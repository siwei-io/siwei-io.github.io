<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>所有文章 - siwei.io</title>
        <link>https://siwei.io/posts/</link>
        <description>所有文章 | siwei.io</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>weyl.gu@gmail.com (Wey Gu)</managingEditor>
            <webMaster>weyl.gu@gmail.com (Wey Gu)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 02 May 2023 16:37:28 &#43;0800</lastBuildDate><atom:link href="https://siwei.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>Nebulagraph Artificial Intelligence Suite</title>
    <link>https://siwei.io/nebulagraph-ai-suite/</link>
    <pubDate>Tue, 02 May 2023 16:37:28 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/nebulagraph-ai-suite/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/nebulagraph-ai-suite/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>介绍新项目！ ng_ai：NebulaGraph 的图算法套件，好用的 NebulaGraph 的 high-level Python Algorithm API，它的目标是让 NebulaGraph 的数据科学家用户能够用很少的代码量执行图上的算法相关的任务。</p>
</blockquote>
<h2 id="nebulagraph-ai-套件" class="headerLink">
    <a href="#nebulagraph-ai-%e5%a5%97%e4%bb%b6" class="header-mark"></a>1 Nebulagraph AI 套件</h2><p>这周，NebulaGraph 3.5.0 <a href="https://docs.nebula-graph.com.cn/3.5.0/20.appendix/release-notes/nebula-comm-release-note/" target="_blank" rel="noopener noreferrer">发布啦</a>，@<strong><a href="https://github.com/whitewum" target="_blank" rel="noopener noreferrer">whitewum</a></strong> 吴老师建议我们把而之前一段时间 NebulaGraph 社区里开启的新项目 <a href="https://github.com/wey-gu/nebulagraph-ai" target="_blank" rel="noopener noreferrer">ng_ai</a> 公开给大家，本文就是第一篇介绍 ng_ai 的文章！</p>
<h3 id="ng_ai-是什么" class="headerLink">
    <a href="#ng_ai-%e6%98%af%e4%bb%80%e4%b9%88" class="header-mark"></a>1.1 ng_ai 是什么</h3><p>ng_ai 的全名是：Nebulagraph AI Suite，顾名思义，它是在 NebulaGraph 之上跑算法的 Python 套件，希望能给 NebulaGraph 的数据科学家用户一个自然、简洁的高级 API，用很少的代码量执行图上的算法相关的任务。</p>
<p>在 ng_ai 这个开源项目里，我们希望快速迭代、公开讨论、演进它，而这背后的目标是：</p>
<blockquote>
<p>Simplifying things in surprising ways.</p>
</blockquote>
<h3 id="ng_ai-的特点" class="headerLink">
    <a href="#ng_ai-%e7%9a%84%e7%89%b9%e7%82%b9" class="header-mark"></a>1.2 ng_ai 的特点</h3><p>为了让 NebulaGraph 社区的同学拥有顺滑的算法体验，ng_ai 有以下特点：</p>
<ul>
<li>与 NebulaGraph 紧密结合，方便从其中读、写图数据</li>
<li>支持多引擎、后端，目前支持 Spark（NebulaGraph Algorithm）、NetworkX，之后会支持 (DGL)[https://www.dgl.ai/]、(PyG)[https://pytorch-geometric.readthedocs.io/en/latest/]</li>
<li>友好、符合直觉的 API 设计</li>
<li>与 NebulaGraph 的 UDF 无缝结合，支持从 Query 中调用 ng_ai 任务</li>
<li>友好的自定义算法接口，方便用户自己实现算法（尚未完成）</li>
<li>一键试玩环境（基于 Docker Extention）</li>
</ul>
<h2 id="我可以用-ng_ai-干什么" class="headerLink">
    <a href="#%e6%88%91%e5%8f%af%e4%bb%a5%e7%94%a8-ng_ai-%e5%b9%b2%e4%bb%80%e4%b9%88" class="header-mark"></a>2 我可以用 ng_ai 干什么</h2><h3 id="跑分布式-pagerank-算法" class="headerLink">
    <a href="#%e8%b7%91%e5%88%86%e5%b8%83%e5%bc%8f-pagerank-%e7%ae%97%e6%b3%95" class="header-mark"></a>2.1 跑分布式 pagerank 算法</h3><p>如果在一个大图上，基于 Nebula-Algorithms 分布式地跑 pagerank 算法，我们可以这么做：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">ng_ai</span> <span class="kn">import</span> <span class="n">NebulaReader</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># read data with spark engine, scan mode</span>
</span></span><span class="line"><span class="cl"><span class="n">reader</span> <span class="o">=</span> <span class="n">NebulaReader</span><span class="p">(</span><span class="n">engine</span><span class="o">=</span><span class="s2">&#34;spark&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">reader</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="n">edge</span><span class="o">=</span><span class="s2">&#34;follow&#34;</span><span class="p">,</span> <span class="n">props</span><span class="o">=</span><span class="s2">&#34;degree&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">df</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># run pagerank algorithm</span>
</span></span><span class="line"><span class="cl"><span class="n">pr_result</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">algo</span><span class="o">.</span><span class="n">pagerank</span><span class="p">(</span><span class="n">reset_prob</span><span class="o">=</span><span class="mf">0.15</span><span class="p">,</span> <span class="n">max_iter</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="写回算法结果到-nebulagraph" class="headerLink">
    <a href="#%e5%86%99%e5%9b%9e%e7%ae%97%e6%b3%95%e7%bb%93%e6%9e%9c%e5%88%b0-nebulagraph" class="header-mark"></a>2.2 写回算法结果到 NebulaGraph</h3><p>假设我们要跑一个 label propagation 算法，然后把结果写回 NebulaGraph，我们可以这么做：</p>
<p>先确保要写回 TAG 的 schema 已经创建好了，写到 label_propagation.cluster_id 字段里：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="k">IF</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">EXISTS</span><span class="w"> </span><span class="n">label_propagation</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">cluster_id</span><span class="w"> </span><span class="n">string</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>我们先执行算法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">df_result</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">algo</span><span class="o">.</span><span class="n">label_propagation</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>再看一下结果的 schema：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">df_result</span><span class="o">.</span><span class="n">printSchema</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">root</span>
</span></span><span class="line"><span class="cl"> <span class="o">|--</span> <span class="n">_id</span><span class="p">:</span> <span class="n">string</span> <span class="p">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="n">false</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"> <span class="o">|--</span> <span class="n">lpa</span><span class="p">:</span> <span class="n">string</span> <span class="p">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="n">false</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后，代码里这么写，我们把 lpa 的结果写回 NebulaGraph 中的 cluster_id 字段里（<code>{&quot;lpa&quot;: &quot;cluster_id&quot;}</code>）：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">ng_ai</span> <span class="kn">import</span> <span class="n">NebulaWriter</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">ng_ai.config</span> <span class="kn">import</span> <span class="n">NebulaGraphConfig</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">config</span> <span class="o">=</span> <span class="n">NebulaGraphConfig</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">writer</span> <span class="o">=</span> <span class="n">NebulaWriter</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">data</span><span class="o">=</span><span class="n">df_result</span><span class="p">,</span> <span class="n">sink</span><span class="o">=</span><span class="s2">&#34;nebulagraph_vertex&#34;</span><span class="p">,</span> <span class="n">config</span><span class="o">=</span><span class="n">config</span><span class="p">,</span> <span class="n">engine</span><span class="o">=</span><span class="s2">&#34;spark&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># map column louvain into property cluster_id</span>
</span></span><span class="line"><span class="cl"><span class="n">properties</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;lpa&#34;</span><span class="p">:</span> <span class="s2">&#34;cluster_id&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">writer</span><span class="o">.</span><span class="n">set_options</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">tag</span><span class="o">=</span><span class="s2">&#34;label_propagation&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">vid_field</span><span class="o">=</span><span class="s2">&#34;_id&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">properties</span><span class="o">=</span><span class="n">properties</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">batch_size</span><span class="o">=</span><span class="mi">256</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">write_mode</span><span class="o">=</span><span class="s2">&#34;insert&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># write back to NebulaGraph</span>
</span></span><span class="line"><span class="cl"><span class="n">writer</span><span class="o">.</span><span class="n">write</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>最后，我们可以验证一下结果啦：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">USE basketballplayer;
</span></span><span class="line"><span class="cl">MATCH (v:label_propagation)
</span></span><span class="line"><span class="cl">RETURN id(v), v.label_propagation.cluster_id LIMIT 3;
</span></span></code></pre></td></tr></table>
</div>
</div><p>结果：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-SQL" data-lang="SQL"><span class="line"><span class="cl"><span class="o">+</span><span class="c1">-------------+--------------------------------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="n">id</span><span class="p">(</span><span class="n">v</span><span class="p">)</span><span class="w">       </span><span class="o">|</span><span class="w"> </span><span class="n">v</span><span class="p">.</span><span class="n">label_propagation</span><span class="p">.</span><span class="n">cluster_id</span><span class="w"> </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">-------------+--------------------------------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;player103&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;player101&#34;</span><span class="w">                    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;player113&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;player129&#34;</span><span class="w">                    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;player121&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;player129&#34;</span><span class="w">                    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">-------------+--------------------------------+
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>更详细的例子参考：<a href="https://github.com/wey-gu/nebulagraph-ai/blob/main/examples/spark_engine.ipynb" target="_blank" rel="noopener noreferrer">ng_ai/examples</a></p>
<h4 id="通过-ngql-调用算法" class="headerLink">
    <a href="#%e9%80%9a%e8%bf%87-ngql-%e8%b0%83%e7%94%a8%e7%ae%97%e6%b3%95" class="header-mark"></a>2.2.1 通过 nGQL 调用算法</h4><p>从 NebulaGraph 3.5.0 之后，我们可以写自己的 UDF 来从 nGQL 里调用自己实现的函数，ng_ai 也用这个能力来实现了一个 ng_ai 函数，它可以从 nGQL 里调用 ng_ai 的算法，例如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- Prepare the write schema
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">USE</span><span class="w"> </span><span class="n">basketballplayer</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="k">IF</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">EXISTS</span><span class="w"> </span><span class="n">pagerank</span><span class="p">(</span><span class="n">pagerank</span><span class="w"> </span><span class="n">string</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">:</span><span class="n">sleep</span><span class="w"> </span><span class="mi">20</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">-- Call with ng_ai()
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">ng_ai</span><span class="p">(</span><span class="s2">&#34;pagerank&#34;</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;follow&#34;</span><span class="p">],</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;degree&#34;</span><span class="p">],</span><span class="w"> </span><span class="s2">&#34;spark&#34;</span><span class="p">,</span><span class="w"> </span><span class="err">{</span><span class="k">space</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;basketballplayer&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">max_iter</span><span class="p">:</span><span class="w"> </span><span class="mi">10</span><span class="err">}</span><span class="p">,</span><span class="w"> </span><span class="err">{</span><span class="n">write_mode</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;insert&#34;</span><span class="err">}</span><span class="p">)</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>更详细的例子参考：<a href="https://github.com/wey-gu/nebulagraph-ai/blob/main/examples/ng_ai_from_ngql_udf.ipynb" target="_blank" rel="noopener noreferrer">ng_ai/examples</a></p>
<h4 id="单机运行算法" class="headerLink">
    <a href="#%e5%8d%95%e6%9c%ba%e8%bf%90%e8%a1%8c%e7%ae%97%e6%b3%95" class="header-mark"></a>2.2.2 单机运行算法</h4><p>在单机、本地的环境里，ng_ai 支持基于 NetworkX 运行算法，例如：</p>
<p>读取图为 ng_ai graph 对象：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">ng_ai</span> <span class="kn">import</span> <span class="n">NebulaReader</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">ng_ai.config</span> <span class="kn">import</span> <span class="n">NebulaGraphConfig</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># read data with nebula/networkx engine, query mode</span>
</span></span><span class="line"><span class="cl"><span class="n">config_dict</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;graphd_hosts&#34;</span><span class="p">:</span> <span class="s2">&#34;graphd:9669&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;user&#34;</span><span class="p">:</span> <span class="s2">&#34;root&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;password&#34;</span><span class="p">:</span> <span class="s2">&#34;nebula&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;space&#34;</span><span class="p">:</span> <span class="s2">&#34;basketballplayer&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">config</span> <span class="o">=</span> <span class="n">NebulaGraphConfig</span><span class="p">(</span><span class="o">**</span><span class="n">config_dict</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">reader</span> <span class="o">=</span> <span class="n">NebulaReader</span><span class="p">(</span><span class="n">engine</span><span class="o">=</span><span class="s2">&#34;nebula&#34;</span><span class="p">,</span> <span class="n">config</span><span class="o">=</span><span class="n">config</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">reader</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">edges</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;follow&#34;</span><span class="p">,</span> <span class="s2">&#34;serve&#34;</span><span class="p">],</span> <span class="n">props</span><span class="o">=</span><span class="p">[[</span><span class="s2">&#34;degree&#34;</span><span class="p">],</span> <span class="p">[]])</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>查看、画图：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">show</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">draw</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>运行算法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">pr_result</span> <span class="o">=</span> <span class="n">g</span><span class="o">.</span><span class="n">algo</span><span class="o">.</span><span class="n">pagerank</span><span class="p">(</span><span class="n">reset_prob</span><span class="o">=</span><span class="mf">0.15</span><span class="p">,</span> <span class="n">max_iter</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>写回 NebulaGraph：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">ng_ai</span> <span class="kn">import</span> <span class="n">NebulaWriter</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">writer</span> <span class="o">=</span> <span class="n">NebulaWriter</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">data</span><span class="o">=</span><span class="n">pr_result</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">sink</span><span class="o">=</span><span class="s2">&#34;nebulagraph_vertex&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">config</span><span class="o">=</span><span class="n">config</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">engine</span><span class="o">=</span><span class="s2">&#34;nebula&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># properties to write</span>
</span></span><span class="line"><span class="cl"><span class="n">properties</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;pagerank&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">writer</span><span class="o">.</span><span class="n">set_options</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">tag</span><span class="o">=</span><span class="s2">&#34;pagerank&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">properties</span><span class="o">=</span><span class="n">properties</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">batch_size</span><span class="o">=</span><span class="mi">256</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">write_mode</span><span class="o">=</span><span class="s2">&#34;insert&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># write back to NebulaGraph</span>
</span></span><span class="line"><span class="cl"><span class="n">writer</span><span class="o">.</span><span class="n">write</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>其他算法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># get all algorithms</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">algo</span><span class="o">.</span><span class="n">get_all_algo</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># get help of each algo</span>
</span></span><span class="line"><span class="cl"><span class="n">help</span><span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">algo</span><span class="o">.</span><span class="n">node2vec</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># call the algo</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">algo</span><span class="o">.</span><span class="n">node2vec</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>更详细的例子参考：<a href="https://github.com/wey-gu/nebulagraph-ai/blob/main/examples/networkx_engine.ipynb" target="_blank" rel="noopener noreferrer">ng_ai/examples</a></p>
<h4 id="可视化图算法结果" class="headerLink">
    <a href="#%e5%8f%af%e8%a7%86%e5%8c%96%e5%9b%be%e7%ae%97%e6%b3%95%e7%bb%93%e6%9e%9c" class="header-mark"></a>2.2.3 可视化图算法结果</h4><p>再演示一个 NetworkX 引擎情况下，计算 Louvain、PageRank 并可视化的例子：</p>
<p>先执行两个算法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">pr_result</span> <span class="o">=</span> <span class="n">g</span><span class="o">.</span><span class="n">algo</span><span class="o">.</span><span class="n">pagerank</span><span class="p">(</span><span class="n">reset_prob</span><span class="o">=</span><span class="mf">0.15</span><span class="p">,</span> <span class="n">max_iter</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">louvain_result</span> <span class="o">=</span> <span class="n">g</span><span class="o">.</span><span class="n">algo</span><span class="o">.</span><span class="n">louvain</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这次我们手写一个好看一点的画图函数：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">matplotlib.colors</span> <span class="kn">import</span> <span class="n">ListedColormap</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">draw_graph_louvain_pr</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">pr_result</span><span class="p">,</span> <span class="n">louvain_result</span><span class="p">,</span> <span class="n">colors</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;#1984c5&#34;</span><span class="p">,</span> <span class="s2">&#34;#22a7f0&#34;</span><span class="p">,</span> <span class="s2">&#34;#63bff0&#34;</span><span class="p">,</span> <span class="s2">&#34;#a7d5ed&#34;</span><span class="p">,</span> <span class="s2">&#34;#e2e2e2&#34;</span><span class="p">,</span> <span class="s2">&#34;#e1a692&#34;</span><span class="p">,</span> <span class="s2">&#34;#de6e56&#34;</span><span class="p">,</span> <span class="s2">&#34;#e14b31&#34;</span><span class="p">,</span> <span class="s2">&#34;#c23728&#34;</span><span class="p">]):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Define positions for the nodes</span>
</span></span><span class="line"><span class="cl">    <span class="n">pos</span> <span class="o">=</span> <span class="n">nx</span><span class="o">.</span><span class="n">spring_layout</span><span class="p">(</span><span class="n">G</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Create a figure and set the axis limits</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">35</span><span class="p">,</span> <span class="mi">15</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">ax</span><span class="o">.</span><span class="n">set_xlim</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">ax</span><span class="o">.</span><span class="n">set_ylim</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Create a colormap from the colors list</span>
</span></span><span class="line"><span class="cl">    <span class="n">cmap</span> <span class="o">=</span> <span class="n">ListedColormap</span><span class="p">(</span><span class="n">colors</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Draw the nodes and edges of the graph</span>
</span></span><span class="line"><span class="cl">    <span class="n">node_colors</span> <span class="o">=</span> <span class="p">[</span><span class="n">louvain_result</span><span class="p">[</span><span class="n">node</span><span class="p">]</span> <span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="n">G</span><span class="o">.</span><span class="n">nodes</span><span class="p">()]</span>
</span></span><span class="line"><span class="cl">    <span class="n">node_sizes</span> <span class="o">=</span> <span class="p">[</span><span class="mi">70000</span> <span class="o">*</span> <span class="n">pr_result</span><span class="p">[</span><span class="n">node</span><span class="p">]</span> <span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="n">G</span><span class="o">.</span><span class="n">nodes</span><span class="p">()]</span>
</span></span><span class="line"><span class="cl">    <span class="n">nx</span><span class="o">.</span><span class="n">draw_networkx_nodes</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">pos</span><span class="o">=</span><span class="n">pos</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span> <span class="n">node_color</span><span class="o">=</span><span class="n">node_colors</span><span class="p">,</span> <span class="n">node_size</span><span class="o">=</span><span class="n">node_sizes</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="n">cmap</span><span class="p">,</span> <span class="n">vmin</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">vmax</span><span class="o">=</span><span class="nb">max</span><span class="p">(</span><span class="n">louvain_result</span><span class="o">.</span><span class="n">values</span><span class="p">()))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">nx</span><span class="o">.</span><span class="n">draw_networkx_edges</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">pos</span><span class="o">=</span><span class="n">pos</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span> <span class="n">edge_color</span><span class="o">=</span><span class="s1">&#39;gray&#39;</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">connectionstyle</span><span class="o">=</span><span class="s1">&#39;arc3, rad=0.2&#39;</span><span class="p">,</span> <span class="n">arrowstyle</span><span class="o">=</span><span class="s1">&#39;-|&gt;&#39;</span><span class="p">,</span> <span class="n">arrows</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Extract edge labels as a dictionary</span>
</span></span><span class="line"><span class="cl">    <span class="n">edge_labels</span> <span class="o">=</span> <span class="n">nx</span><span class="o">.</span><span class="n">get_edge_attributes</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="s1">&#39;label&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Add edge labels to the graph</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">edge</span><span class="p">,</span> <span class="n">label</span> <span class="ow">in</span> <span class="n">edge_labels</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="n">ax</span><span class="o">.</span><span class="n">text</span><span class="p">((</span><span class="n">pos</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="mi">0</span><span class="p">]][</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">pos</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="mi">1</span><span class="p">]][</span><span class="mi">0</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="p">(</span><span class="n">pos</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="mi">0</span><span class="p">]][</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">pos</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="mi">1</span><span class="p">]][</span><span class="mi">1</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="n">label</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">12</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;black&#39;</span><span class="p">,</span> <span class="n">ha</span><span class="o">=</span><span class="s1">&#39;center&#39;</span><span class="p">,</span> <span class="n">va</span><span class="o">=</span><span class="s1">&#39;center&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Add node labels to the graph</span>
</span></span><span class="line"><span class="cl">    <span class="n">node_labels</span> <span class="o">=</span> <span class="p">{</span><span class="n">n</span><span class="p">:</span> <span class="n">G</span><span class="o">.</span><span class="n">nodes</span><span class="p">[</span><span class="n">n</span><span class="p">][</span><span class="s1">&#39;label&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="s1">&#39;label&#39;</span> <span class="ow">in</span> <span class="n">G</span><span class="o">.</span><span class="n">nodes</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="k">else</span> <span class="n">n</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">G</span><span class="o">.</span><span class="n">nodes</span><span class="p">()}</span>
</span></span><span class="line"><span class="cl">    <span class="n">nx</span><span class="o">.</span><span class="n">draw_networkx_labels</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">pos</span><span class="o">=</span><span class="n">pos</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span> <span class="n">labels</span><span class="o">=</span><span class="n">node_labels</span><span class="p">,</span> <span class="n">font_size</span><span class="o">=</span><span class="mi">12</span><span class="p">,</span> <span class="n">font_color</span><span class="o">=</span><span class="s1">&#39;black&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Add colorbar for community colors</span>
</span></span><span class="line"><span class="cl">    <span class="n">sm</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">cm</span><span class="o">.</span><span class="n">ScalarMappable</span><span class="p">(</span><span class="n">cmap</span><span class="o">=</span><span class="n">cmap</span><span class="p">,</span> <span class="n">norm</span><span class="o">=</span><span class="n">plt</span><span class="o">.</span><span class="n">Normalize</span><span class="p">(</span><span class="n">vmin</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">vmax</span><span class="o">=</span><span class="nb">max</span><span class="p">(</span><span class="n">louvain_result</span><span class="o">.</span><span class="n">values</span><span class="p">())))</span>
</span></span><span class="line"><span class="cl">    <span class="n">sm</span><span class="o">.</span><span class="n">set_array</span><span class="p">([])</span>
</span></span><span class="line"><span class="cl">    <span class="n">cbar</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">colorbar</span><span class="p">(</span><span class="n">sm</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span> <span class="n">ticks</span><span class="o">=</span><span class="nb">range</span><span class="p">(</span><span class="nb">max</span><span class="p">(</span><span class="n">louvain_result</span><span class="o">.</span><span class="n">values</span><span class="p">())</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span> <span class="n">shrink</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">cbar</span><span class="o">.</span><span class="n">ax</span><span class="o">.</span><span class="n">set_yticklabels</span><span class="p">([</span><span class="sa">f</span><span class="s1">&#39;Community </span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s1">&#39;</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">max</span><span class="p">(</span><span class="n">louvain_result</span><span class="o">.</span><span class="n">values</span><span class="p">())</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Show the figure</span>
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">draw_graph_louvain_pr</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">pr_result</span><span class="o">=</span><span class="n">pr_result</span><span class="p">,</span> <span class="n">louvain_result</span><span class="o">=</span><span class="n">louvain_result</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>效果如图：</p>
<p><figure><a class="lightgallery" href="https://github.com/siwei-io/talks/assets/1651790/4d13eb2b-3e40-4085-8e0c-71459ca0843b" title="draw_graph_louvain_pr" data-thumbnail="https://github.com/siwei-io/talks/assets/1651790/4d13eb2b-3e40-4085-8e0c-71459ca0843b">
        <img
            
            loading="lazy"
            src="https://github.com/siwei-io/talks/assets/1651790/4d13eb2b-3e40-4085-8e0c-71459ca0843b"
            srcset="https://github.com/siwei-io/talks/assets/1651790/4d13eb2b-3e40-4085-8e0c-71459ca0843b, https://github.com/siwei-io/talks/assets/1651790/4d13eb2b-3e40-4085-8e0c-71459ca0843b 1.5x, https://github.com/siwei-io/talks/assets/1651790/4d13eb2b-3e40-4085-8e0c-71459ca0843b 2x"
            sizes="auto"
            alt="https://github.com/siwei-io/talks/assets/1651790/4d13eb2b-3e40-4085-8e0c-71459ca0843b">
    </a></figure></p>
<p>更详细的例子参考：<a href="https://github.com/wey-gu/nebulagraph-ai/blob/main/examples/ng_ai_networkx_plot.ipynb" target="_blank" rel="noopener noreferrer">ng_ai/examples</a></p>
<h4 id="更方便的-notebook-操作-nebulagraph" class="headerLink">
    <a href="#%e6%9b%b4%e6%96%b9%e4%be%bf%e7%9a%84-notebook-%e6%93%8d%e4%bd%9c-nebulagraph" class="header-mark"></a>2.2.4 更方便的 Notebook 操作 NebulaGraph</h4><p>结合 NebulaGraph 的 Jupyter Notebook 插件: <a href="https://github.com/wey-gu/ipython-ngql" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/ipython-ngql</a> ，我们还可以更方便的操作 NebulaGraph：</p>
<p>在 Jupyter Notbook 里安装这个插件可以通过 ng_ai 的 extras 安装：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">%</span><span class="n">pip</span> <span class="n">install</span> <span class="n">ng_ai</span><span class="p">[</span><span class="n">jupyter</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="o">%</span><span class="n">load_ext</span> <span class="n">ngql</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>也可以单独安装</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">%</span><span class="n">pip</span> <span class="n">install</span> <span class="n">ipython</span><span class="o">-</span><span class="n">ngql</span>
</span></span><span class="line"><span class="cl"><span class="o">%</span><span class="n">load_ext</span> <span class="n">ngql</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>之后，我们就可以在 Notebook 里直接使用 <code>%ngql</code> 命令来执行 NGQL 语句了：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">%</span><span class="n">ngql</span> <span class="o">--</span><span class="n">address</span> <span class="mf">127.0.0.1</span> <span class="o">--</span><span class="n">port</span> <span class="mi">9669</span> <span class="o">--</span><span class="n">user</span> <span class="n">root</span> <span class="o">--</span><span class="n">password</span> <span class="n">nebula</span>
</span></span><span class="line"><span class="cl"><span class="o">%</span><span class="n">ngql</span> <span class="n">USE</span> <span class="n">basketballplayer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="o">%</span><span class="n">ngql</span> <span class="n">MATCH</span> <span class="p">(</span><span class="n">v</span><span class="p">:</span><span class="n">player</span><span class="p">{</span><span class="n">name</span><span class="p">:</span><span class="s2">&#34;Tim Duncan&#34;</span><span class="p">})</span><span class="o">--&gt;</span><span class="p">(</span><span class="n">v2</span><span class="p">:</span><span class="n">player</span><span class="p">)</span> <span class="n">RETURN</span> <span class="n">v2</span><span class="o">.</span><span class="n">player</span><span class="o">.</span><span class="n">name</span> <span class="n">AS</span> <span class="n">Name</span><span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>注，多行的 Query 用两个百分号就好了 <code>%%ngql</code></p>
</blockquote>
<p>最后，我们还能在 Jupyter Notebook 里直接可视化渲染结果！只需要 <code>%ng_draw</code> 就可以啦！</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">%</span><span class="n">ngql</span> <span class="n">match</span> <span class="n">p</span><span class="o">=</span><span class="p">(:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[]</span><span class="o">-&gt;</span><span class="p">()</span> <span class="k">return</span> <span class="n">p</span> <span class="n">LIMIT</span> <span class="mi">5</span>
</span></span><span class="line"><span class="cl"><span class="o">%</span><span class="n">ng_draw</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>效果如下：</p>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/236797874-c142cfd8-b0de-4689-95ef-1da386e137d3.png" title="ipython-ngql" data-thumbnail="https://user-images.githubusercontent.com/1651790/236797874-c142cfd8-b0de-4689-95ef-1da386e137d3.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/236797874-c142cfd8-b0de-4689-95ef-1da386e137d3.png"
            srcset="https://user-images.githubusercontent.com/1651790/236797874-c142cfd8-b0de-4689-95ef-1da386e137d3.png, https://user-images.githubusercontent.com/1651790/236797874-c142cfd8-b0de-4689-95ef-1da386e137d3.png 1.5x, https://user-images.githubusercontent.com/1651790/236797874-c142cfd8-b0de-4689-95ef-1da386e137d3.png 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/236797874-c142cfd8-b0de-4689-95ef-1da386e137d3.png">
    </a></figure></p>
<h2 id="未来工作" class="headerLink">
    <a href="#%e6%9c%aa%e6%9d%a5%e5%b7%a5%e4%bd%9c" class="header-mark"></a>3 未来工作</h2><p>现在 ng_ai 还在开发中，我们还有很多工作要做：</p>
<ul>
<li><i class="far fa-square fa-fw"></i> 完善 reader 模式，现在 NebulaGraph/NetworkX 的读取数据只支持 Query-Mode，还需要支持 Scan-Mode</li>
<li><i class="far fa-square fa-fw"></i> 实现基于 dgl(GNN) 的链路预测、节点分类等算法，例如：</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">model</span> <span class="o">=</span> <span class="n">g</span><span class="o">.</span><span class="n">algo</span><span class="o">.</span><span class="n">gnn_link_prediction</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">result</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">train</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="c1"># query src, dst to be predicted</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">model</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">src_vertex</span><span class="p">,</span> <span class="n">dst_vertices</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><i class="far fa-square fa-fw"></i> UDA，自定义算法</li>
<li><i class="far fa-square fa-fw"></i> 快速部署工具</li>
</ul>
<p>ng_ai 是完全 build in public 的，欢迎社区的大家们来参与，一起来完善 ng_ai，让 NebulaGraph 上的 AI 算法更加简单易用！</p>
<h2 id="试玩-ng_ai" class="headerLink">
    <a href="#%e8%af%95%e7%8e%a9-ng_ai" class="header-mark"></a>4 试玩 ng_ai</h2><p>我们已经准备好了一键部署的 NebulaGraph + Studio + ng_ai in Jupyter 的环境，只需要大家从 Docker Desktop 的 Extension（扩展）中搜索 NebulaGraph，就可以试完了。</p>
<ul>
<li>安装 <a href="https://www.docker.com/blog/distributed-cloud-native-graph-database-nebulagraph-docker-extension/" target="_blank" rel="noopener noreferrer">NebulaGraph Docker 插件</a></li>
</ul>
<p>在 Docker Desktop 的插件市场搜索 NebulaGraph，点击安装</p>
<p><figure><a class="lightgallery" href="https://github.com/siwei-io/talks/assets/1651790/e07e39d1-2b3a-486f-bb68-29a67bc3a714" title="https://github.com/siwei-io/talks/assets/1651790/e07e39d1-2b3a-486f-bb68-29a67bc3a714" data-thumbnail="https://github.com/siwei-io/talks/assets/1651790/e07e39d1-2b3a-486f-bb68-29a67bc3a714">
        <img
            
            loading="lazy"
            src="https://github.com/siwei-io/talks/assets/1651790/e07e39d1-2b3a-486f-bb68-29a67bc3a714"
            srcset="https://github.com/siwei-io/talks/assets/1651790/e07e39d1-2b3a-486f-bb68-29a67bc3a714, https://github.com/siwei-io/talks/assets/1651790/e07e39d1-2b3a-486f-bb68-29a67bc3a714 1.5x, https://github.com/siwei-io/talks/assets/1651790/e07e39d1-2b3a-486f-bb68-29a67bc3a714 2x"
            sizes="auto"
            alt="https://github.com/siwei-io/talks/assets/1651790/e07e39d1-2b3a-486f-bb68-29a67bc3a714">
    </a></figure></p>
<ul>
<li>安装 ng_ai playground</li>
</ul>
<p>进入 NebulaGraph 插件，点击<strong>Install NX Mode</strong>，安装 ng_ai 的 NetworkX playground，通常要等几分钟等待安装完成。</p>
<p><figure><a class="lightgallery" href="https://github.com/siwei-io/talks/assets/1651790/3fca7e39-6e37-4ccb-8177-4771babb7b66" title="https://github.com/siwei-io/talks/assets/1651790/3fca7e39-6e37-4ccb-8177-4771babb7b66" data-thumbnail="https://github.com/siwei-io/talks/assets/1651790/3fca7e39-6e37-4ccb-8177-4771babb7b66">
        <img
            
            loading="lazy"
            src="https://github.com/siwei-io/talks/assets/1651790/3fca7e39-6e37-4ccb-8177-4771babb7b66"
            srcset="https://github.com/siwei-io/talks/assets/1651790/3fca7e39-6e37-4ccb-8177-4771babb7b66, https://github.com/siwei-io/talks/assets/1651790/3fca7e39-6e37-4ccb-8177-4771babb7b66 1.5x, https://github.com/siwei-io/talks/assets/1651790/3fca7e39-6e37-4ccb-8177-4771babb7b66 2x"
            sizes="auto"
            alt="https://github.com/siwei-io/talks/assets/1651790/3fca7e39-6e37-4ccb-8177-4771babb7b66">
    </a></figure></p>
<ul>
<li>进入 NetworkX playground</li>
</ul>
<p>点击<strong>Jupyter NB NetworkX</strong>，进入 NetworkX playground。</p>
<p><figure><a class="lightgallery" href="https://github.com/siwei-io/talks/assets/1651790/48c2e5a2-490e-4626-809e-5894d6f833e9" title="https://github.com/siwei-io/talks/assets/1651790/48c2e5a2-490e-4626-809e-5894d6f833e9" data-thumbnail="https://github.com/siwei-io/talks/assets/1651790/48c2e5a2-490e-4626-809e-5894d6f833e9">
        <img
            
            loading="lazy"
            src="https://github.com/siwei-io/talks/assets/1651790/48c2e5a2-490e-4626-809e-5894d6f833e9"
            srcset="https://github.com/siwei-io/talks/assets/1651790/48c2e5a2-490e-4626-809e-5894d6f833e9, https://github.com/siwei-io/talks/assets/1651790/48c2e5a2-490e-4626-809e-5894d6f833e9 1.5x, https://github.com/siwei-io/talks/assets/1651790/48c2e5a2-490e-4626-809e-5894d6f833e9 2x"
            sizes="auto"
            alt="https://github.com/siwei-io/talks/assets/1651790/48c2e5a2-490e-4626-809e-5894d6f833e9">
    </a></figure></p>
<h2 id="ng_ai-的架构" class="headerLink">
    <a href="#ng_ai-%e7%9a%84%e6%9e%b6%e6%9e%84" class="header-mark"></a>5 ng_ai 的架构</h2><p>ng_ai 的架构如下，它的核心模块有：</p>
<ul>
<li>Reader：负责从 NebulaGraph 读取数据</li>
<li>Writer：负责将数据写入 NebulaGraph</li>
<li>*Engine：负责适配不同运行时，例如 Spark、DGL、NetowrkX 等</li>
<li>Algo：算法模块，例如 PageRank、Louvain、GNN_Link_Predict 等</li>
</ul>
<p>此外，为了支持 nGQL 中的调用，还有两个模块：</p>
<ul>
<li>ng_ai-udf：负责将 UDF 注册到 NebulaGraph，接受 ng_ai 的 query 调用，访问 ng_ai API</li>
<li>ng_ai-api：ng_ai 的 API 服务，接受 UDF 的调用，访问 ng_ai 核心模块</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">          ┌───────────────────────────────────────────────────┐
</span></span><span class="line"><span class="cl">          │   Spark Cluster                                   │
</span></span><span class="line"><span class="cl">          │    .─────.    .─────.    .─────.    .─────.       │
</span></span><span class="line"><span class="cl">          │   ;       :  ;       :  ;       :  ;       :      │
</span></span><span class="line"><span class="cl">       ┌─▶│   :       ;  :       ;  :       ;  :       ;      │
</span></span><span class="line"><span class="cl">       │  │    ╲     ╱    ╲     ╱    ╲     ╱    ╲     ╱       │
</span></span><span class="line"><span class="cl">       │  │     `───&#39;      `───&#39;      `───&#39;      `───&#39;        │
</span></span><span class="line"><span class="cl">  Algo Spark                                                  │
</span></span><span class="line"><span class="cl">    Engine└───────────────────────────────────────────────────┘
</span></span><span class="line"><span class="cl">       │  ┌────────────────────────────────────────────────────┬──────────┐
</span></span><span class="line"><span class="cl">       └──┤                                                    │          │
</span></span><span class="line"><span class="cl">          │   NebulaGraph AI Suite(ngai)                       │ ngai-api │◀─┐
</span></span><span class="line"><span class="cl">          │                                                    │          │  │
</span></span><span class="line"><span class="cl">          │                                                    └──────────┤  │
</span></span><span class="line"><span class="cl">          │     ┌────────┐    ┌──────┐    ┌────────┐   ┌─────┐            │  │
</span></span><span class="line"><span class="cl">          │     │ Reader │    │ Algo │    │ Writer │   │ GNN │            │  │
</span></span><span class="line"><span class="cl"> ┌───────▶│     └────────┘    └──────┘    └────────┘   └─────┘            │  │
</span></span><span class="line"><span class="cl"> │        │          │            │            │          │               │  │
</span></span><span class="line"><span class="cl"> │        │          ├────────────┴───┬────────┴─────┐    └──────┐        │  │
</span></span><span class="line"><span class="cl"> │        │          ▼                ▼              ▼           ▼        │  │
</span></span><span class="line"><span class="cl"> │        │   ┌─────────────┐ ┌──────────────┐ ┌──────────┐ ┌──────────┐  │  │
</span></span><span class="line"><span class="cl"> │     ┌──┤   │ SparkEngine │ │ NebulaEngine │ │ NetworkX │ │ DGLEngine│  │  │
</span></span><span class="line"><span class="cl"> │     │  │   └─────────────┘ └──────────────┘ └──────────┘ └──────────┘  │  │
</span></span><span class="line"><span class="cl"> │     │  └──────────┬────────────────────────────────────────────────────┘  │
</span></span><span class="line"><span class="cl"> │     │             │        Spark                                          │
</span></span><span class="line"><span class="cl"> │     │             └────────Reader ────────────┐                           │
</span></span><span class="line"><span class="cl"> │  Spark                   Query Mode           │                           │
</span></span><span class="line"><span class="cl"> │  Reader                                       │                           │
</span></span><span class="line"><span class="cl"> │Scan Mode                                      ▼                      ┌─────────┐
</span></span><span class="line"><span class="cl"> │     │  ┌───────────────────────────────────────────────────┬─────────┤ ngai-udf│◀─────────────┐
</span></span><span class="line"><span class="cl"> │     │  │                                                   │         └─────────┤              │
</span></span><span class="line"><span class="cl"> │     │  │  NebulaGraph Graph Engine         Nebula-GraphD   │   ngai-GraphD     │              │
</span></span><span class="line"><span class="cl"> │     │  ├──────────────────────────────┬────────────────────┼───────────────────┘              │
</span></span><span class="line"><span class="cl"> │     │  │                              │                    │                                  │
</span></span><span class="line"><span class="cl"> │     │  │  NebulaGraph Storage Engine  │                    │                                  │
</span></span><span class="line"><span class="cl"> │     │  │                              │                    │                                  │
</span></span><span class="line"><span class="cl"> │     └─▶│  Nebula-StorageD             │    Nebula-Metad    │                                  │
</span></span><span class="line"><span class="cl"> │        │                              │                    │                                  │
</span></span><span class="line"><span class="cl"> │        └──────────────────────────────┴────────────────────┘                                  │
</span></span><span class="line"><span class="cl"> │                                                                                               │
</span></span><span class="line"><span class="cl"> │    ┌───────────────────────────────────────────────────────────────────────────────────────┐  │
</span></span><span class="line"><span class="cl"> │    │ RETURN ng_ai(&#34;pagerank&#34;, [&#34;follow&#34;], [&#34;degree&#34;], &#34;spark&#34;, {space:&#34;basketballplayer&#34;}) │──┘
</span></span><span class="line"><span class="cl"> │    └───────────────────────────────────────────────────────────────────────────────────────┘
</span></span><span class="line"><span class="cl"> │  ┌─────────────────────────────────────────────────────────────┐
</span></span><span class="line"><span class="cl"> │  │ from ng_ai import NebulaReader                              │
</span></span><span class="line"><span class="cl"> │  │                                                             │
</span></span><span class="line"><span class="cl"> │  │ # read data with spark engine, scan mode                    │
</span></span><span class="line"><span class="cl"> │  │ reader = NebulaReader(engine=&#34;spark&#34;)                       │
</span></span><span class="line"><span class="cl"> │  │ reader.scan(edge=&#34;follow&#34;, props=&#34;degree&#34;)                  │
</span></span><span class="line"><span class="cl"> └──│ df = reader.read()                                          │
</span></span><span class="line"><span class="cl">    │                                                             │
</span></span><span class="line"><span class="cl">    │ # run pagerank algorithm                                    │
</span></span><span class="line"><span class="cl">    │ pr_result = df.algo.pagerank(reset_prob=0.15, max_iter=10)  │
</span></span><span class="line"><span class="cl">    │                                                             │
</span></span><span class="line"><span class="cl">    └─────────────────────────────────────────────────────────────┘  
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>基于图数据库的推荐系统</title>
    <link>https://siwei.io/recommendation-system-with-graphdb/</link>
    <pubDate>Tue, 25 Oct 2022 10:24:15 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/recommendation-system-with-graphdb/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/recommendation-system-with-graphdb/featured-image.webp" referrerpolicy="no-referrer">
            </div><h2 id="基于图数据库的推荐系统" class="headerLink">
    <a href="#%e5%9f%ba%e4%ba%8e%e5%9b%be%e6%95%b0%e6%8d%ae%e5%ba%93%e7%9a%84%e6%8e%a8%e8%8d%90%e7%b3%bb%e7%bb%9f" class="header-mark"></a>1 基于图数据库的推荐系统</h2><blockquote>
<p>本文是一个基于 NebulaGraph 上图算法、图数据库、机器学习、GNN 的推荐系统方法综述，大部分介绍的方法提供了 Playground 供大家学习。</p>
</blockquote>
<!--

[TOC]

-->
<h3 id="基本概念" class="headerLink">
    <a href="#%e5%9f%ba%e6%9c%ac%e6%a6%82%e5%bf%b5" class="header-mark"></a>1.1 基本概念</h3><p>推荐系统诞生的初衷是解决互联网时代才面临的信息量过载问题，从最初的 Amazon 图书推荐、商品推荐，到电影、音乐、视频、新闻推荐，如今大多数网站、App 中都有至少一个基于推荐系统生成的供用户选择的物品列表界面。而这些物品的推荐基本都是基于用户喜好、物品的特征、用户与物品交互历史和其他相关上下文去做的。</p>
<p>一个推荐系统会包含以下几个部分：</p>
<ul>
<li>数据、特征的处理</li>
<li>从特征出发，生成推荐列表</li>
<li>过滤、排序推荐列表</li>
</ul>
<p>这其中，过滤的核心方法主要有两种：基于内容的过滤（Content-Based Filtering）、与协同过滤（Collaborative Filtering）。</p>
<h4 id="基于内容的过滤" class="headerLink">
    <a href="#%e5%9f%ba%e4%ba%8e%e5%86%85%e5%ae%b9%e7%9a%84%e8%bf%87%e6%bb%a4" class="header-mark"></a>1.1.1 基于内容的过滤</h4><p>内容过滤方法的本质是给用户的偏好做画像，同时对所有待推荐的物品计算特征，做用户的画像与待推荐物品特征之间的距离运算，过滤得到相近的物品。</p>
<blockquote>
<p>ref: <a href="https://www.ise.bgu.ac.il/faculty/liorr/recsyshb/chContent.pdf" target="_blank" rel="noopener noreferrer">https://www.ise.bgu.ac.il/faculty/liorr/recsyshb/chContent.pdf</a></p>
</blockquote>
<p>内容过滤的方法的好处有：</p>
<ul>
<li>清晰的可解释性，无论是对用户的画像分析，还是对物品的运算本身天然带来了排序、过滤的可解释性</li>
<li>用户数据输入的独立性，对给定的待推荐用户来说，只需要单独分析他们的画像和历史评分就足够了</li>
<li>规避新物品冷启动问题，对于新的添加的物品，即使没有任何历史的用户评价，也可以做出推荐</li>
</ul>
<p>同时，基于内容过滤的挑战与劣势也有：</p>
<ul>
<li>特征提取，提取待推荐物品的特征并非总是很容易地，比如照片、视频等非纯文本的物品，而且往往这些物品的特征提取依赖领域专家知识，比如电影推荐系统中需要抽离出导演、电影分类等领域知识作为特征</li>
<li>不擅长突破舒适圈，发掘用户的潜在新兴趣点</li>
<li>存在新用户冷启动问题，对少有信息作为用户画像的用户来说，缺少做进一步物品画像、特种距离运算的输入</li>
</ul>
<h4 id="基于协同过滤" class="headerLink">
    <a href="#%e5%9f%ba%e4%ba%8e%e5%8d%8f%e5%90%8c%e8%bf%87%e6%bb%a4" class="header-mark"></a>1.1.2 基于协同过滤</h4><p>协同过滤方法本质是协同用户与系统之间的交互行为去给出推荐物品。</p>
<p>协同过滤的方法又分为<strong>基于记忆</strong>（memory-based）的与<strong>基于模型</strong>（model-based）的。</p>
<p>前者主要有物品与物品之间的协同过滤（ItemCF）和用户与用户之间的协同过滤（UserCF），ItemCF 简单来说是推荐和用户之前选择过的物品类似的物品：根据行为找物品之间的相似性，UserCF 则推荐与之有共同爱好的用户喜欢的物品：根据行为找用户之间的相似性；</p>
<p>而后者基于展现用户喜好的历史实践信息、利用统计与机器学习方法训练模型，对新的用户偏好进行推理。</p>
<p>协同过滤的方法的好处有：</p>
<ul>
<li>无需对非结构化物品进行特征分析，因为协同过滤关注的是用户和物品之间的协同交互，这绕过了对物品领域知识处理的需求</li>
<li>对用户的个性化更强，更细，基于行为的分析使得对用户偏好的划分本质上是连续的（相比来说，对用户做画像的方法则是离散的），这样的推荐结果会更加“千人千面”，同时，也会蕴含内容过滤、有限的画像角度之下的“惊喜”推荐</li>
</ul>
<p>而它的缺点有：</p>
<ul>
<li>有新用户和新物件上的冷启动问题，因为它们身上都缺少历史喜好行为的信息</li>
</ul>
<blockquote>
<p>ref: <a href="https://coek.info/pdf-a-dynamic-collaborative-filtering-system-via-a-weighted-clustering-approach-.html" target="_blank" rel="noopener noreferrer">https://coek.info/pdf-a-dynamic-collaborative-filtering-system-via-a-weighted-clustering-approach-.html</a></p>
</blockquote>
<p>从以上两种主要的过滤方式的优劣中我们可以看到，它们之中存在互补的地方，比如新物件的冷启动上，基于内容的过滤有优势，对于个性化、惊喜推荐角度，协同过滤有优势。所以，在真实世界中，推荐系统在大多演化地比上边的归类复杂得多，而且常常是多种方法的融合。</p>
<h3 id="基于图的个性推荐" class="headerLink">
    <a href="#%e5%9f%ba%e4%ba%8e%e5%9b%be%e7%9a%84%e4%b8%aa%e6%80%a7%e6%8e%a8%e8%8d%90" class="header-mark"></a>1.2 基于图的个性推荐</h3><p>图技术、图数据库技术在推荐系统中的应用是多方面的，本章我们就从图数据库的出发点上给出多种应用的例子。</p>
<h4 id="建立图谱" class="headerLink">
    <a href="#%e5%bb%ba%e7%ab%8b%e5%9b%be%e8%b0%b1" class="header-mark"></a>1.2.1 建立图谱</h4><p>在开始之前，我简单介绍一下本文使用的图数据集。</p>
<p>为了给出更接近实际情况的例子，我从两个公开的数据集 <a href="https://www.omdb.org/en/us/content/Help:DataDownload" target="_blank" rel="noopener noreferrer">OMDB</a> 和 <a href="https://grouplens.org/datasets/movielens/" target="_blank" rel="noopener noreferrer">MovieLens</a> 中分别抽取了需要的信息，组成了一个既包含电影的卡司（导演、演员）和类型、又包含用户对电影评分记录的知识图谱。</p>
<p>它的 Scehma 如下：</p>
<ul>
<li>
<p>顶点：</p>
<ul>
<li>
<p>user(user_id)</p>
</li>
<li>
<p>movie(name)</p>
</li>
<li>
<p>person(name, birthdate)</p>
</li>
<li>
<p>genre(name)</p>
</li>
</ul>
</li>
<li>
<p>边：</p>
<ul>
<li>
<p>watched(rate(double))</p>
</li>
<li>
<p>with_genre</p>
</li>
<li>
<p>directed_by</p>
</li>
<li>
<p>acted_by</p>
</li>
</ul>
</li>
</ul>
<p><figure><a class="lightgallery" href="/recommendation-system-with-graphdb/schema_0.webp" title="schema_0" data-thumbnail="/recommendation-system-with-graphdb/schema_0.webp">
        <img
            
            loading="lazy"
            src="/recommendation-system-with-graphdb/schema_0.webp"
            srcset="/recommendation-system-with-graphdb/schema_0.webp, /recommendation-system-with-graphdb/schema_0.webp 1.5x, /recommendation-system-with-graphdb/schema_0.webp 2x"
            sizes="auto"
            alt="/recommendation-system-with-graphdb/schema_0.webp">
    </a></figure></p>
<p>这个数据的准备、ETL 过程会在另外的文章里详细介绍，在进入下一章节之前，我们可以用 Nebula-Up 一键搭起一个测试的 NebulaGraph 单机集群，然后参考数据集的 GitHub 仓库，一键导入所需数据：</p>
<blockquote>
<p>注：</p>
<ul>
<li>
<p>Nebula-UP：https://github.com/wey-gu/nebula-up</p>
</li>
<li>
<p>数据集仓库：https://github.com/wey-gu/movie-recommendation-dataset</p>
</li>
</ul>
</blockquote>
<p>过程最简单的操作过程为：</p>
<ul>
<li>用 Nebula-Up 安装 NebulaGraph</li>
<li>克隆 movie-recommendation-dataset</li>
<li>导入数据集 NebulaGraph</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -fsSL nebula-up.siwei.io/install.sh <span class="p">|</span> bash
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git clone https://github.com/wey-gu/movie-recommendation-dataset.git <span class="o">&amp;&amp;</span> <span class="nb">cd</span> movie-recommendation-dataset
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">docker run --rm -ti <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --network<span class="o">=</span>nebula-net <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v <span class="si">${</span><span class="nv">PWD</span><span class="si">}</span>:/root/ <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v <span class="si">${</span><span class="nv">PWD</span><span class="si">}</span>/dbt_project/to_nebulagraph/:/data <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    vesoft/nebula-importer:v3.2.0 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --config /root/nebula-importer.yaml
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="基于内容的过滤-1" class="headerLink">
    <a href="#%e5%9f%ba%e4%ba%8e%e5%86%85%e5%ae%b9%e7%9a%84%e8%bf%87%e6%bb%a4-1" class="header-mark"></a>1.2.2 基于内容的过滤</h4><p>CBF 的思想是利用领域知识、历史记录、元数据分别对用户和物件做画像、打标签，最终根据用户的标签与待推荐物件之间的距离评分排序给出推荐。</p>
<p>对用户的画像不涉及其他用户的信息，但是输入的特征可能来源于元数据（生日、国籍、性别、年龄），历史记录（评论、打分、购买、浏览）等等，在这些基础之上对用户进行标签标注、分类、聚类。</p>
<p>对物件的画像输入的特征可能是基于语言处理（NLP、TF-IDF、LFM）、专家标注、多媒体处理（视觉到文字再NLP、音频风格处理、音频到文字再NLP）等。</p>
<p>有了用户画像与物件的画像特征、对用户涉及的画像进行相关画像物件中新对象的近似度计算，再评分加权，就可以获得最终的推荐排序了。这其中的近似度计算可以是常见的 KNN，余弦相似，Jaccard 相似等各种方法。</p>
<p>CBF 的方法中没有限定具体实现方式，如前边介绍，可能是基于机器学习、elasticsearch、图谱等不同的方法。这里为切合本章的主题，我给出一个基于图数据库、图谱上的 CBF 的例子，做一个电影推荐系统，能让读者理解这个方法的思想的同时熟悉图数据库、知识图谱的方法。</p>
<p>这其中用户的特征我们直接利用历史电影评价记录，而推荐物件：电影，的画像则来自于领域中的知识。这些知识有：电影风格、电影的卡斯、导演。近似度这里我们就采用图谱中基于关系的 Jaccard 相似度算法。</p>
<h5 id="jaccard-index" class="headerLink">
    <a href="#jaccard-index" class="header-mark"></a>1.2.2.1 Jaccard Index</h5><p><a href="https://en.wikipedia.org/wiki/Jaccard_index" target="_blank" rel="noopener noreferrer">Jaccard Index</a> 是一个描述两个集合距离的定义公式，非常简单、符合直觉地取两者的交集与并集测度的比例，它的定义记为：
$$
J(A,B)= \frac {|A\cap B|}{|A\cup B|}
$$
这里，我们把交集理解为 A 与 B 共同连接的点（有共同的导演、电影类型、演员），并集理解为这几种关系下与 A 或者 B 直连的所有点，而测度就直接用数量表示。</p>
<h5 id="cbf-方法在-nebulagraph-中的实现" class="headerLink">
    <a href="#cbf-%e6%96%b9%e6%b3%95%e5%9c%a8-nebulagraph-%e4%b8%ad%e7%9a%84%e5%ae%9e%e7%8e%b0" class="header-mark"></a>1.2.2.2 CBF 方法在 NebulaGraph 中的实现</h5><p>CBF 方法分如下几步：</p>
<ul>
<li>找出推荐用户评分过的电影</li>
<li>从用户评分过的电影，经由导演卡司、电影类型找到新的待推荐电影</li>
<li>对看过的电影与新的电影，藉由导演、卡司、电影类型的关系，在图上做 Jaccard 相似性运算，得出每一对看过的电影和待推荐新电影之间的 Jaccard 系数</li>
<li>把用户对看过电影的评分作为加权系数，针对其到每一个新电影之间的 Jaccard 系数加权评分，获得排序后的推荐电影列表</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="o">//</span><span class="w"> </span><span class="err">用户</span><span class="w"> </span><span class="n">u_124</span><span class="w"> </span><span class="err">看过的电影</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">u</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">u</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;u_124&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="nf">collect</span><span class="p">(</span><span class="nf">id</span><span class="p">(</span><span class="n">m</span><span class="p">))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">watched_movies_id</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">根据电影的标注关系找到备选推荐电影，刨除看过的，把评分、交集关联链路的数量传下去</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">u</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">directed_by</span><span class="o">|</span><span class="n">acted_by</span><span class="o">|</span><span class="n">with_genre</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">intersection</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">directed_by</span><span class="o">|</span><span class="n">acted_by</span><span class="o">|</span><span class="n">with_genre</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">recomm</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">u</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;u_124&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">recomm</span><span class="p">)</span><span class="w"> </span><span class="k">IN</span><span class="w"> </span><span class="n">watched_movies_id</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">2</span><span class="p">.</span><span class="mi">5</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">.</span><span class="mi">5</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">rate</span><span class="p">,</span><span class="w"> </span><span class="n">m</span><span class="p">,</span><span class="w"> </span><span class="n">recomm</span><span class="p">,</span><span class="w"> </span><span class="nf">size</span><span class="p">(</span><span class="nf">COLLECT</span><span class="p">(</span><span class="n">intersection</span><span class="p">))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">intersection_size</span><span class="w"> </span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">intersection_size</span><span class="w"> </span><span class="k">DESC</span><span class="w"> </span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">50</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">计算</span><span class="w"> </span><span class="n">Jaccard</span><span class="w"> </span><span class="k">index</span><span class="o">-----------------------------------------------</span><span class="c1">--
</span></span></span><span class="line"><span class="cl"><span class="c1">
</span></span></span><span class="line"><span class="cl"><span class="c1">// 针对每一对 m 和 recomm：
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">//</span><span class="w"> </span><span class="err">开始计算看过的电影，集合</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="err">的部分</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">directed_by</span><span class="o">|</span><span class="n">acted_by</span><span class="o">|</span><span class="n">with_genre</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">intersection</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">rate</span><span class="p">,</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">m</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">m_id</span><span class="p">,</span><span class="w"> </span><span class="n">recomm</span><span class="p">,</span><span class="w"> </span><span class="n">intersection_size</span><span class="p">,</span><span class="w"> </span><span class="nf">COLLECT</span><span class="p">(</span><span class="nf">id</span><span class="p">(</span><span class="n">intersection</span><span class="p">))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">set_a</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">计算推荐电影，集合</span><span class="w"> </span><span class="n">b</span><span class="w"> </span><span class="err">的部分</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">recomm</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">directed_by</span><span class="o">|</span><span class="n">acted_by</span><span class="o">|</span><span class="n">with_genre</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">intersection</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">rate</span><span class="p">,</span><span class="w"> </span><span class="n">m_id</span><span class="p">,</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">recomm</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">recomm_id</span><span class="p">,</span><span class="w"> </span><span class="n">set_a</span><span class="p">,</span><span class="w"> </span><span class="n">intersection_size</span><span class="p">,</span><span class="w"> </span><span class="nf">COLLECT</span><span class="p">(</span><span class="nf">id</span><span class="p">(</span><span class="n">intersection</span><span class="p">))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">set_b</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">得到并集数量</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">rate</span><span class="p">,</span><span class="w"> </span><span class="n">m_id</span><span class="p">,</span><span class="w"> </span><span class="n">recomm_id</span><span class="p">,</span><span class="w"> </span><span class="nf">toFloat</span><span class="p">(</span><span class="n">intersection_size</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">intersection_size</span><span class="p">,</span><span class="w"> </span><span class="nf">toSet</span><span class="p">(</span><span class="n">set_a</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">set_b</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">A_U_B</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">得到每一对</span><span class="w"> </span><span class="n">m</span><span class="w"> </span><span class="err">和</span><span class="w"> </span><span class="n">recomm</span><span class="w"> </span><span class="err">的</span><span class="w"> </span><span class="n">Jaccard</span><span class="w"> </span><span class="k">index</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">A_N_B</span><span class="o">/</span><span class="n">A_U_B</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">rate</span><span class="p">,</span><span class="w"> </span><span class="n">m_id</span><span class="p">,</span><span class="w"> </span><span class="n">recomm_id</span><span class="p">,</span><span class="w"> </span><span class="n">intersection_size</span><span class="o">/</span><span class="nf">size</span><span class="p">(</span><span class="n">A_U_B</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">jaccard_index</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">计算</span><span class="w"> </span><span class="n">Jaccard</span><span class="w"> </span><span class="k">index</span><span class="o">-----------------------------------------------</span><span class="c1">--
</span></span></span><span class="line"><span class="cl"><span class="c1">
</span></span></span><span class="line"><span class="cl"><span class="c1">
</span></span></span><span class="line"><span class="cl"><span class="c1">// 得到每一个被推荐的电影 recomm_id，经由不同看过电影推荐链路的相似度 = 评分 * jaccard_index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">WITH</span><span class="w"> </span><span class="n">recomm_id</span><span class="p">,</span><span class="w"> </span><span class="n">m_id</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="n">rate</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">jaccard_index</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">score</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">对每一个</span><span class="w"> </span><span class="n">recomm_id</span><span class="w"> </span><span class="err">按照</span><span class="w"> </span><span class="n">m_id</span><span class="w"> </span><span class="err">加权求得相似度的和，为总的推荐程度评分，降序排列</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">recomm_id</span><span class="p">,</span><span class="w"> </span><span class="nf">sum</span><span class="p">(</span><span class="n">score</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">sim_score</span><span class="w"> </span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">sim_score</span><span class="w"> </span><span class="k">DESC</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">sim_score</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">recomm_id</span><span class="p">,</span><span class="w"> </span><span class="n">sim_score</span><span class="w"> </span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">50</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>上边查询的执行结果截取出来是：</p>
<table>
<thead>
<tr>
<th style="text-align:left">recomm_id</th>
<th style="text-align:left">sim_score</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1891</td>
<td style="text-align:left">0.2705882352941177</td>
</tr>
<tr>
<td style="text-align:left">1892</td>
<td style="text-align:left">0.22278481012658227</td>
</tr>
<tr>
<td style="text-align:left">1894</td>
<td style="text-align:left">0.15555555555555556</td>
</tr>
<tr>
<td style="text-align:left">808</td>
<td style="text-align:left">0.144</td>
</tr>
<tr>
<td style="text-align:left">1895</td>
<td style="text-align:left">0.13999999999999999</td>
</tr>
<tr>
<td style="text-align:left">85</td>
<td style="text-align:left">0.12631578947368421</td>
</tr>
<tr>
<td style="text-align:left">348</td>
<td style="text-align:left">0.12413793103448277</td>
</tr>
<tr>
<td style="text-align:left">18746</td>
<td style="text-align:left">0.11666666666666668</td>
</tr>
<tr>
<td style="text-align:left">628</td>
<td style="text-align:left">0.11636363636363636</td>
</tr>
<tr>
<td style="text-align:left">3005</td>
<td style="text-align:left">0.10566037735849057</td>
</tr>
</tbody>
</table>
<h5 id="可视化分析" class="headerLink">
    <a href="#%e5%8f%af%e8%a7%86%e5%8c%96%e5%88%86%e6%9e%90" class="header-mark"></a>1.2.2.3 可视化分析</h5><p>我们把整个过程中的一些步骤的查询修改一下为 <code>p=xxx</code> 的方式，并渲染出来，会更加方便理解</p>
<ul>
<li>
<p>用户 u_124 看过的、评分过的电影</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="o">//</span><span class="w"> </span><span class="err">用户</span><span class="w"> </span><span class="n">u_124</span><span class="w"> </span><span class="err">看过的电影</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">u</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">u</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;u_124&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><figure><a class="lightgallery" href="/recommendation-system-with-graphdb/CBF_step0.webp" title="CBF_step0" data-thumbnail="/recommendation-system-with-graphdb/CBF_step0.webp">
        <img
            
            loading="lazy"
            src="/recommendation-system-with-graphdb/CBF_step0.webp"
            srcset="/recommendation-system-with-graphdb/CBF_step0.webp, /recommendation-system-with-graphdb/CBF_step0.webp 1.5x, /recommendation-system-with-graphdb/CBF_step0.webp 2x"
            sizes="auto"
            alt="/recommendation-system-with-graphdb/CBF_step0.webp">
    </a></figure></p>
</li>
<li>
<p>下一步找到这些看过的电影在相同的演员、导演、电影类型的关系上，图谱关联的所有其他电影</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="o">//</span><span class="w"> </span><span class="err">用户</span><span class="w"> </span><span class="n">u_124</span><span class="w"> </span><span class="err">看过的电影</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">u</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">u</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;u_124&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="nf">collect</span><span class="p">(</span><span class="nf">id</span><span class="p">(</span><span class="n">m</span><span class="p">))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">watched_movies_id</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">根据电影的标注关系找到备选推荐电影，刨除看过的，把评分、交集关联链路的数量传下去</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">u</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">directed_by</span><span class="o">|</span><span class="n">acted_by</span><span class="o">|</span><span class="n">with_genre</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">intersection</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">directed_by</span><span class="o">|</span><span class="n">acted_by</span><span class="o">|</span><span class="n">with_genre</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">recomm</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">u</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;u_124&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">recomm</span><span class="p">)</span><span class="w"> </span><span class="k">IN</span><span class="w"> </span><span class="n">watched_movies_id</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="p">,</span><span class="w"> </span><span class="nf">size</span><span class="p">(</span><span class="nf">COLLECT</span><span class="p">(</span><span class="n">intersection</span><span class="p">))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">intersection_size</span><span class="w"> </span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">intersection_size</span><span class="w"> </span><span class="k">DESC</span><span class="w"> </span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">500</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到用户看过电影经由演员、类型扩散出好多新的电影</p>
<p><figure><a class="lightgallery" href="/recommendation-system-with-graphdb/CBF_step1.webp" title="CBF_step1" data-thumbnail="/recommendation-system-with-graphdb/CBF_step1.webp">
        <img
            
            loading="lazy"
            src="/recommendation-system-with-graphdb/CBF_step1.webp"
            srcset="/recommendation-system-with-graphdb/CBF_step1.webp, /recommendation-system-with-graphdb/CBF_step1.webp 1.5x, /recommendation-system-with-graphdb/CBF_step1.webp 2x"
            sizes="auto"
            alt="/recommendation-system-with-graphdb/CBF_step1.webp">
    </a></figure></p>
</li>
<li>
<p>在得到这些待推荐电影以及推荐路径之后，通过 Jaccard 系数与用户在路径第一条边上的评分综合评定之后，得到了最终的结果，这里我们把结果再可视化一下：取得它们和用户之间的路径并渲染出来</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="o">//</span><span class="w"> </span><span class="err">用户</span><span class="w"> </span><span class="n">u_124</span><span class="w"> </span><span class="err">看过的电影</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">u</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">u</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;u_124&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="nf">collect</span><span class="p">(</span><span class="nf">id</span><span class="p">(</span><span class="n">m</span><span class="p">))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">watched_movies_id</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">根据电影的标注关系找到备选推荐电影，刨除看过的，把评分、交集关联链路的数量传下去</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">u</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">directed_by</span><span class="o">|</span><span class="n">acted_by</span><span class="o">|</span><span class="n">with_genre</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">intersection</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">directed_by</span><span class="o">|</span><span class="n">acted_by</span><span class="o">|</span><span class="n">with_genre</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">recomm</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">u</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;u_124&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">recomm</span><span class="p">)</span><span class="w"> </span><span class="k">IN</span><span class="w"> </span><span class="n">watched_movies_id</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">2</span><span class="p">.</span><span class="mi">5</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">.</span><span class="mi">5</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">rate</span><span class="p">,</span><span class="w"> </span><span class="n">m</span><span class="p">,</span><span class="w"> </span><span class="n">recomm</span><span class="p">,</span><span class="w"> </span><span class="nf">size</span><span class="p">(</span><span class="nf">COLLECT</span><span class="p">(</span><span class="n">intersection</span><span class="p">))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">intersection_size</span><span class="w"> </span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">intersection_size</span><span class="w"> </span><span class="k">DESC</span><span class="w"> </span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">50</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">计算</span><span class="w"> </span><span class="n">Jaccard</span><span class="w"> </span><span class="k">index</span><span class="o">-----------------------------------------------</span><span class="c1">--
</span></span></span><span class="line"><span class="cl"><span class="c1">
</span></span></span><span class="line"><span class="cl"><span class="c1">// 针对每一对 m 和 recomm：
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">//</span><span class="w"> </span><span class="err">开始计算看过的电影，集合</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="err">的部分</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">directed_by</span><span class="o">|</span><span class="n">acted_by</span><span class="o">|</span><span class="n">with_genre</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">intersection</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">rate</span><span class="p">,</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">m</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">m_id</span><span class="p">,</span><span class="w"> </span><span class="n">recomm</span><span class="p">,</span><span class="w"> </span><span class="n">intersection_size</span><span class="p">,</span><span class="w"> </span><span class="nf">COLLECT</span><span class="p">(</span><span class="nf">id</span><span class="p">(</span><span class="n">intersection</span><span class="p">))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">set_a</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">计算推荐电影，集合</span><span class="w"> </span><span class="n">b</span><span class="w"> </span><span class="err">的部分</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">recomm</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">directed_by</span><span class="o">|</span><span class="n">acted_by</span><span class="o">|</span><span class="n">with_genre</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">intersection</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">rate</span><span class="p">,</span><span class="w"> </span><span class="n">m_id</span><span class="p">,</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">recomm</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">recomm_id</span><span class="p">,</span><span class="w"> </span><span class="n">set_a</span><span class="p">,</span><span class="w"> </span><span class="n">intersection_size</span><span class="p">,</span><span class="w"> </span><span class="nf">COLLECT</span><span class="p">(</span><span class="nf">id</span><span class="p">(</span><span class="n">intersection</span><span class="p">))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">set_b</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">得到并集数量</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">rate</span><span class="p">,</span><span class="w"> </span><span class="n">m_id</span><span class="p">,</span><span class="w"> </span><span class="n">recomm_id</span><span class="p">,</span><span class="w"> </span><span class="nf">toFloat</span><span class="p">(</span><span class="n">intersection_size</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">intersection_size</span><span class="p">,</span><span class="w"> </span><span class="nf">toSet</span><span class="p">(</span><span class="n">set_a</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">set_b</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">A_U_B</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">得到每一对</span><span class="w"> </span><span class="n">m</span><span class="w"> </span><span class="err">和</span><span class="w"> </span><span class="n">recomm</span><span class="w"> </span><span class="err">的</span><span class="w"> </span><span class="n">Jaccard</span><span class="w"> </span><span class="k">index</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">A_N_B</span><span class="o">/</span><span class="n">A_U_B</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">rate</span><span class="p">,</span><span class="w"> </span><span class="n">m_id</span><span class="p">,</span><span class="w"> </span><span class="n">recomm_id</span><span class="p">,</span><span class="w"> </span><span class="n">intersection_size</span><span class="o">/</span><span class="nf">size</span><span class="p">(</span><span class="n">A_U_B</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">jaccard_index</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">计算</span><span class="w"> </span><span class="n">Jaccard</span><span class="w"> </span><span class="k">index</span><span class="o">-----------------------------------------------</span><span class="c1">--
</span></span></span><span class="line"><span class="cl"><span class="c1">
</span></span></span><span class="line"><span class="cl"><span class="c1">
</span></span></span><span class="line"><span class="cl"><span class="c1">// 得到每一个被推荐的电影 recomm_id，经由不同看过电影推荐链路的相似度 = 评分 * jaccard_index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">WITH</span><span class="w"> </span><span class="n">recomm_id</span><span class="p">,</span><span class="w"> </span><span class="n">m_id</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="n">rate</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">jaccard_index</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">score</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">对每一个</span><span class="w"> </span><span class="n">recomm_id</span><span class="w"> </span><span class="err">按照</span><span class="w"> </span><span class="n">m_id</span><span class="w"> </span><span class="err">加权求得相似度的和，为总的推荐程度评分，降序排列</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">recomm_id</span><span class="p">,</span><span class="w"> </span><span class="nf">sum</span><span class="p">(</span><span class="n">score</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">sim_score</span><span class="w"> </span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">sim_score</span><span class="w"> </span><span class="k">DESC</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">sim_score</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">recomm_id</span><span class="p">,</span><span class="w"> </span><span class="n">sim_score</span><span class="w"> </span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">10</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="nf">COLLECT</span><span class="p">(</span><span class="n">recomm_id</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">recomm_ids</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">u</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">directed_by</span><span class="o">|</span><span class="n">acted_by</span><span class="o">|</span><span class="n">with_genre</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">intersection</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">directed_by</span><span class="o">|</span><span class="n">acted_by</span><span class="o">|</span><span class="n">with_genre</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">recomm</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">u</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;u_124&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">recomm</span><span class="p">)</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">recomm_ids</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>哇，我们可以很清晰地看到推荐的理由路径（喜欢星战，进而由多条共同的类型、演员、导演引导出未观看的几部星战电影），这其实就是 CBF 的优势之一：天然具有较好的可解释性。</p>
<p><figure><a class="lightgallery" href="/recommendation-system-with-graphdb/CBF_step2.webp" title="CBF_step2" data-thumbnail="/recommendation-system-with-graphdb/CBF_step2.webp">
        <img
            
            loading="lazy"
            src="/recommendation-system-with-graphdb/CBF_step2.webp"
            srcset="/recommendation-system-with-graphdb/CBF_step2.webp, /recommendation-system-with-graphdb/CBF_step2.webp 1.5x, /recommendation-system-with-graphdb/CBF_step2.webp 2x"
            sizes="auto"
            alt="/recommendation-system-with-graphdb/CBF_step2.webp">
    </a></figure></p>
</li>
</ul>
<h4 id="基于记忆的协同过滤" class="headerLink">
    <a href="#%e5%9f%ba%e4%ba%8e%e8%ae%b0%e5%bf%86%e7%9a%84%e5%8d%8f%e5%90%8c%e8%bf%87%e6%bb%a4" class="header-mark"></a>1.2.3 基于记忆的协同过滤</h4><p>前边我们提过了，协同过滤主要可以分为两种：</p>
<ul>
<li>User-User CF 是基于多个用户对物件的历史行为，判定用户之间的相似性，然后根据相似用户的选择推荐新的物件。</li>
<li>Item-Item CF 则是判断物件之间的相似性，给用户推荐他喜欢的物品相似的物品。</li>
</ul>
<p>这里，ItemCF 看起来和前边的 CBF 有些类似，他们的核心区别在于 CBF 找到相似物件的方式是基于物件的“内容”本身，是一些领域知识的画像，而 ItemCF 的协同则是考虑用户对物件的历史行为。</p>
<h5 id="itemcf" class="headerLink">
    <a href="#itemcf" class="header-mark"></a>1.2.3.1 ItemCF</h5><p>这个方法分如下几步：</p>
<ul>
<li>找出推荐用户评分过的电影</li>
<li>经由用户的高评分电影，找到其他给出高评分用户所看过的新的高评分电影</li>
<li>对看过的电影与新的电影，藉由用户的评分，在图上做 Jaccard 相似性运算，得出每一对看过的电影和待推荐新电影之间的 Jaccard 系数</li>
<li>把用户对看过电影的评分作为加权系数，针对其到每一个新电影之间的 Jaccard 系数加权评分，获得排序后的推荐电影列表</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="o">//</span><span class="w"> </span><span class="err">用户</span><span class="w"> </span><span class="n">u_124</span><span class="w"> </span><span class="err">看过的并给出高评分的电影</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">u</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">u</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;u_124&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">e</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="nf">collect</span><span class="p">(</span><span class="nf">id</span><span class="p">(</span><span class="n">m</span><span class="p">))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">watched_movies_id</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">根据同样也看过这些电影，并给出高评分的用户，得出待推荐的电影</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">u</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[</span><span class="n">e0</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">intersection</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e1</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">recomm</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">u</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;u_124&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">recomm</span><span class="p">)</span><span class="w"> </span><span class="k">IN</span><span class="w"> </span><span class="n">watched_movies_id</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">e0</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">&gt;</span><span class="mi">3</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">e1</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">2</span><span class="p">.</span><span class="mi">5</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">.</span><span class="mi">5</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">rate</span><span class="p">,</span><span class="w"> </span><span class="n">m</span><span class="p">,</span><span class="w"> </span><span class="n">recomm</span><span class="p">,</span><span class="w"> </span><span class="nf">size</span><span class="p">(</span><span class="nf">COLLECT</span><span class="p">(</span><span class="n">intersection</span><span class="p">))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">intersection_size</span><span class="w"> </span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">intersection_size</span><span class="w"> </span><span class="k">DESC</span><span class="w"> </span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">50</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">计算</span><span class="w"> </span><span class="n">Jaccard</span><span class="w"> </span><span class="k">index</span><span class="o">-----------------------------------------------</span><span class="c1">--
</span></span></span><span class="line"><span class="cl"><span class="c1">
</span></span></span><span class="line"><span class="cl"><span class="c1">// 针对每一对 m 和 recomm：
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">//</span><span class="w"> </span><span class="err">开始计算看过的电影，集合</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="err">的部分</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[</span><span class="n">e0</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">intersection</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">e0</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">&gt;</span><span class="mi">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">rate</span><span class="p">,</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">m</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">m_id</span><span class="p">,</span><span class="w"> </span><span class="n">recomm</span><span class="p">,</span><span class="w"> </span><span class="n">intersection_size</span><span class="p">,</span><span class="w"> </span><span class="nf">COLLECT</span><span class="p">(</span><span class="nf">id</span><span class="p">(</span><span class="n">intersection</span><span class="p">))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">set_a</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">计算推荐电影，集合</span><span class="w"> </span><span class="n">b</span><span class="w"> </span><span class="err">的部分</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">recomm</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[</span><span class="n">e1</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">intersection</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">e1</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">&gt;</span><span class="mi">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">rate</span><span class="p">,</span><span class="w"> </span><span class="n">m_id</span><span class="p">,</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">recomm</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">recomm_id</span><span class="p">,</span><span class="w"> </span><span class="n">set_a</span><span class="p">,</span><span class="w"> </span><span class="n">intersection_size</span><span class="p">,</span><span class="w"> </span><span class="nf">COLLECT</span><span class="p">(</span><span class="nf">id</span><span class="p">(</span><span class="n">intersection</span><span class="p">))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">set_b</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">得到并集数量</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">rate</span><span class="p">,</span><span class="w"> </span><span class="n">m_id</span><span class="p">,</span><span class="w"> </span><span class="n">recomm_id</span><span class="p">,</span><span class="w"> </span><span class="nf">toFloat</span><span class="p">(</span><span class="n">intersection_size</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">intersection_size</span><span class="p">,</span><span class="w"> </span><span class="nf">toSet</span><span class="p">(</span><span class="n">set_a</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">set_b</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">A_U_B</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">得到每一对</span><span class="w"> </span><span class="n">m</span><span class="w"> </span><span class="err">和</span><span class="w"> </span><span class="n">recomm</span><span class="w"> </span><span class="err">的</span><span class="w"> </span><span class="n">Jaccard</span><span class="w"> </span><span class="k">index</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">A_N_B</span><span class="o">/</span><span class="n">A_U_B</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">rate</span><span class="p">,</span><span class="w"> </span><span class="n">m_id</span><span class="p">,</span><span class="w"> </span><span class="n">recomm_id</span><span class="p">,</span><span class="w"> </span><span class="n">intersection_size</span><span class="o">/</span><span class="nf">size</span><span class="p">(</span><span class="n">A_U_B</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">jaccard_index</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">计算</span><span class="w"> </span><span class="n">Jaccard</span><span class="w"> </span><span class="k">index</span><span class="o">-----------------------------------------------</span><span class="c1">--
</span></span></span><span class="line"><span class="cl"><span class="c1">
</span></span></span><span class="line"><span class="cl"><span class="c1">
</span></span></span><span class="line"><span class="cl"><span class="c1">// 得到每一个被推荐的电影 recomm_id，经由不同看过电影推荐链路的相似度 = 评分 * jaccard_index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">WITH</span><span class="w"> </span><span class="n">recomm_id</span><span class="p">,</span><span class="w"> </span><span class="n">m_id</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="n">rate</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">jaccard_index</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">score</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">对每一个</span><span class="w"> </span><span class="n">recomm_id</span><span class="w"> </span><span class="err">按照</span><span class="w"> </span><span class="n">m_id</span><span class="w"> </span><span class="err">加权求得相似度的和，为总的推荐程度评分，降序排列，只取正值</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">recomm_id</span><span class="p">,</span><span class="w"> </span><span class="nf">sum</span><span class="p">(</span><span class="n">score</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">sim_score</span><span class="w"> </span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">sim_score</span><span class="w"> </span><span class="k">DESC</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">sim_score</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">recomm_id</span><span class="p">,</span><span class="w"> </span><span class="n">sim_score</span><span class="w"> </span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">50</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>结果：</p>
<table>
<thead>
<tr>
<th style="text-align:left">recomm_id</th>
<th style="text-align:left">sim_score</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">832</td>
<td style="text-align:left">0.8428369424692955</td>
</tr>
<tr>
<td style="text-align:left">114707</td>
<td style="text-align:left">0.7913842214590154</td>
</tr>
<tr>
<td style="text-align:left">64957</td>
<td style="text-align:left">0.6924673321504288</td>
</tr>
<tr>
<td style="text-align:left">120880</td>
<td style="text-align:left">0.5775219768736295</td>
</tr>
<tr>
<td style="text-align:left">807</td>
<td style="text-align:left">0.497532028328161</td>
</tr>
<tr>
<td style="text-align:left">473</td>
<td style="text-align:left">0.4748322300870322</td>
</tr>
<tr>
<td style="text-align:left">52797</td>
<td style="text-align:left">0.2311965559170528</td>
</tr>
<tr>
<td style="text-align:left">12768</td>
<td style="text-align:left">0.19642857142857142</td>
</tr>
<tr>
<td style="text-align:left">167058</td>
<td style="text-align:left">0.19642857142857142</td>
</tr>
</tbody>
</table>
<h5 id="可视化分析-itemcf" class="headerLink">
    <a href="#%e5%8f%af%e8%a7%86%e5%8c%96%e5%88%86%e6%9e%90-itemcf" class="header-mark"></a>1.2.3.2 可视化分析 ItemCF</h5><p>同样，我们把整个过程中的一些步骤的查询修改一下为 <code>p=xxx</code> 的方式，并渲染出来，看看可以看出什么有意思的的洞察。</p>
<ul>
<li>
<p>找出推荐用户评分过的电影</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="o">//</span><span class="w"> </span><span class="err">用户</span><span class="w"> </span><span class="n">u_124</span><span class="w"> </span><span class="err">看过的并给出高评分的电影</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">u</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">u</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;u_124&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">e</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>它们是：</p>
<p><figure><a class="lightgallery" href="/recommendation-system-with-graphdb/ItemCF_step0.webp" title="ItemCF_step0" data-thumbnail="/recommendation-system-with-graphdb/ItemCF_step0.webp">
        <img
            
            loading="lazy"
            src="/recommendation-system-with-graphdb/ItemCF_step0.webp"
            srcset="/recommendation-system-with-graphdb/ItemCF_step0.webp, /recommendation-system-with-graphdb/ItemCF_step0.webp 1.5x, /recommendation-system-with-graphdb/ItemCF_step0.webp 2x"
            sizes="auto"
            alt="/recommendation-system-with-graphdb/ItemCF_step0.webp">
    </a></figure></p>
</li>
<li>
<p>经由用户的高评分电影，找到其他给出高评分用户所看过的新的高评分电影，修改结果为路径</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="o">//</span><span class="w"> </span><span class="err">用户</span><span class="w"> </span><span class="n">u_124</span><span class="w"> </span><span class="err">看过的并给出高评分的电影</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">u</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">u</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;u_124&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">e</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="nf">collect</span><span class="p">(</span><span class="nf">id</span><span class="p">(</span><span class="n">m</span><span class="p">))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">watched_movies_id</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">根据同样也看过这些电影，并给出高评分的用户，得出待推荐的电影</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">u</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[</span><span class="n">e0</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">intersection</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e1</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">recomm</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">u</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;u_124&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">recomm</span><span class="p">)</span><span class="w"> </span><span class="k">IN</span><span class="w"> </span><span class="n">watched_movies_id</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">e0</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">&gt;</span><span class="mi">3</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">e1</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">p</span><span class="p">,</span><span class="w"> </span><span class="nf">size</span><span class="p">(</span><span class="nf">COLLECT</span><span class="p">(</span><span class="n">intersection</span><span class="p">))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">intersection_size</span><span class="w"> </span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">intersection_size</span><span class="w"> </span><span class="k">DESC</span><span class="w"> </span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">200</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到待推荐的电影在路径的右边末端，中间连接着的都是其他用户的推荐记录，它的模式和 CBF 真的很像，只不过关联的关系不是具体的内容，而是行为。</p>
<p><figure><a class="lightgallery" href="/recommendation-system-with-graphdb/ItemCF_step1.webp" title="ItemCF_step1" data-thumbnail="/recommendation-system-with-graphdb/ItemCF_step1.webp">
        <img
            
            loading="lazy"
            src="/recommendation-system-with-graphdb/ItemCF_step1.webp"
            srcset="/recommendation-system-with-graphdb/ItemCF_step1.webp, /recommendation-system-with-graphdb/ItemCF_step1.webp 1.5x, /recommendation-system-with-graphdb/ItemCF_step1.webp 2x"
            sizes="auto"
            alt="/recommendation-system-with-graphdb/ItemCF_step1.webp">
    </a></figure></p>
</li>
<li>
<p>在对看过的电影与新的电影，藉由用户的评分，在图上做 Jaccard 相似性运算，得出每一对看过的电影和待推荐新电影之间的 Jaccard 系数之后。把用户对看过电影的评分作为加权系数，针对其到每一个新电影之间的 Jaccard 系数加权评分，获得排序后的推荐电影列表，我们同样改造一下最终的查询为路径，并渲染前 500 条路径：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="o">//</span><span class="w"> </span><span class="err">用户</span><span class="w"> </span><span class="n">u_124</span><span class="w"> </span><span class="err">看过的并给出高评分的电影</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">u</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">u</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;u_124&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">e</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="nf">collect</span><span class="p">(</span><span class="nf">id</span><span class="p">(</span><span class="n">m</span><span class="p">))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">watched_movies_id</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">根据同样也看过这些电影，并给出高评分的用户，得出待推荐的电影</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">u</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[</span><span class="n">e0</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">intersection</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e1</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">recomm</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">u</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;u_124&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">recomm</span><span class="p">)</span><span class="w"> </span><span class="k">IN</span><span class="w"> </span><span class="n">watched_movies_id</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">e0</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">&gt;</span><span class="mi">3</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">e1</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">2</span><span class="p">.</span><span class="mi">5</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">.</span><span class="mi">5</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">rate</span><span class="p">,</span><span class="w"> </span><span class="n">m</span><span class="p">,</span><span class="w"> </span><span class="n">recomm</span><span class="p">,</span><span class="w"> </span><span class="nf">size</span><span class="p">(</span><span class="nf">COLLECT</span><span class="p">(</span><span class="n">intersection</span><span class="p">))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">intersection_size</span><span class="w"> </span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">intersection_size</span><span class="w"> </span><span class="k">DESC</span><span class="w"> </span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">50</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">计算</span><span class="w"> </span><span class="n">Jaccard</span><span class="w"> </span><span class="k">index</span><span class="o">-----------------------------------------------</span><span class="c1">--
</span></span></span><span class="line"><span class="cl"><span class="c1">
</span></span></span><span class="line"><span class="cl"><span class="c1">// 针对每一对 m 和 recomm：
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">//</span><span class="w"> </span><span class="err">开始计算看过的电影，集合</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="err">的部分</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[</span><span class="n">e0</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">intersection</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">e0</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">&gt;</span><span class="mi">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">rate</span><span class="p">,</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">m</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">m_id</span><span class="p">,</span><span class="w"> </span><span class="n">recomm</span><span class="p">,</span><span class="w"> </span><span class="n">intersection_size</span><span class="p">,</span><span class="w"> </span><span class="nf">COLLECT</span><span class="p">(</span><span class="nf">id</span><span class="p">(</span><span class="n">intersection</span><span class="p">))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">set_a</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">计算推荐电影，集合</span><span class="w"> </span><span class="n">b</span><span class="w"> </span><span class="err">的部分</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">recomm</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[</span><span class="n">e1</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">intersection</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">e1</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">&gt;</span><span class="mi">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">rate</span><span class="p">,</span><span class="w"> </span><span class="n">m_id</span><span class="p">,</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">recomm</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">recomm_id</span><span class="p">,</span><span class="w"> </span><span class="n">set_a</span><span class="p">,</span><span class="w"> </span><span class="n">intersection_size</span><span class="p">,</span><span class="w"> </span><span class="nf">COLLECT</span><span class="p">(</span><span class="nf">id</span><span class="p">(</span><span class="n">intersection</span><span class="p">))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">set_b</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">得到并集数量</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">rate</span><span class="p">,</span><span class="w"> </span><span class="n">m_id</span><span class="p">,</span><span class="w"> </span><span class="n">recomm_id</span><span class="p">,</span><span class="w"> </span><span class="nf">toFloat</span><span class="p">(</span><span class="n">intersection_size</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">intersection_size</span><span class="p">,</span><span class="w"> </span><span class="nf">toSet</span><span class="p">(</span><span class="n">set_a</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">set_b</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">A_U_B</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">得到每一对</span><span class="w"> </span><span class="n">m</span><span class="w"> </span><span class="err">和</span><span class="w"> </span><span class="n">recomm</span><span class="w"> </span><span class="err">的</span><span class="w"> </span><span class="n">Jaccard</span><span class="w"> </span><span class="k">index</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">A_N_B</span><span class="o">/</span><span class="n">A_U_B</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">rate</span><span class="p">,</span><span class="w"> </span><span class="n">m_id</span><span class="p">,</span><span class="w"> </span><span class="n">recomm_id</span><span class="p">,</span><span class="w"> </span><span class="n">intersection_size</span><span class="o">/</span><span class="nf">size</span><span class="p">(</span><span class="n">A_U_B</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">jaccard_index</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">计算</span><span class="w"> </span><span class="n">Jaccard</span><span class="w"> </span><span class="k">index</span><span class="o">-----------------------------------------------</span><span class="c1">--
</span></span></span><span class="line"><span class="cl"><span class="c1">
</span></span></span><span class="line"><span class="cl"><span class="c1">
</span></span></span><span class="line"><span class="cl"><span class="c1">// 得到每一个被推荐的电影 recomm_id，经由不同看过电影推荐链路的相似度 = 评分 * jaccard_index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">WITH</span><span class="w"> </span><span class="n">recomm_id</span><span class="p">,</span><span class="w"> </span><span class="n">m_id</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="n">rate</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">jaccard_index</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">score</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">对每一个</span><span class="w"> </span><span class="n">recomm_id</span><span class="w"> </span><span class="err">按照</span><span class="w"> </span><span class="n">m_id</span><span class="w"> </span><span class="err">加权求得相似度的和，为总的推荐程度评分，降序排列，只取正值</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">recomm_id</span><span class="p">,</span><span class="w"> </span><span class="nf">sum</span><span class="p">(</span><span class="n">score</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">sim_score</span><span class="w"> </span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">sim_score</span><span class="w"> </span><span class="k">DESC</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">sim_score</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">recomm_id</span><span class="w"> </span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">10</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="nf">COLLECT</span><span class="p">(</span><span class="n">recomm_id</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">recomm_ids</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">u</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[</span><span class="n">e0</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">intersection</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e1</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">recomm</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">u</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;u_124&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">recomm</span><span class="p">)</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">recomm_ids</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="w"> </span><span class="k">limit</span><span class="w"> </span><span class="mi">500</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>可以看出最北推荐的两个电影是被几乎所有看过并给出中高评分的用户共同看过的中高评分电影</p>
<p><figure><a class="lightgallery" href="/recommendation-system-with-graphdb/ItemCF_step2.webp" title="ItemCF_step2" data-thumbnail="/recommendation-system-with-graphdb/ItemCF_step2.webp">
        <img
            
            loading="lazy"
            src="/recommendation-system-with-graphdb/ItemCF_step2.webp"
            srcset="/recommendation-system-with-graphdb/ItemCF_step2.webp, /recommendation-system-with-graphdb/ItemCF_step2.webp 1.5x, /recommendation-system-with-graphdb/ItemCF_step2.webp 2x"
            sizes="auto"
            alt="/recommendation-system-with-graphdb/ItemCF_step2.webp">
    </a></figure></p>
</li>
</ul>
<h5 id="关于高评分" class="headerLink">
    <a href="#%e5%85%b3%e4%ba%8e%e9%ab%98%e8%af%84%e5%88%86" class="header-mark"></a>1.2.3.3 关于”高评分“</h5><p>这其中还有很多可以进一步优化的点，比如其中写死了“高评分”是高于 3 的评分，这样有时候不免有失客观，一个可能更合理可行的方式是针对每一个用户，取得这个用户所有评分的平均值，然后取得与平均值相差的比例或者绝对值判定高低。此外，我们在通过 Jaccard 相似性判断每一个看过的电影和对应推荐电影的相似性的时候，并没有考虑这条关联关系：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[</span><span class="n">e0</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">intersection</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e1</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">recomm</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>之中 e0 与 e1 的评分数值的因素，只是过滤了低评分的关系，这里也有做的更加细致的提升空间。</p>
<p>实际上， Pearson Correlation Coefficient 就是这样一种考虑了关系中的数值进行相似性运算的方法。</p>
<h5 id="pearson-correlation-coefficient" class="headerLink">
    <a href="#pearson-correlation-coefficient" class="header-mark"></a>1.2.3.4 Pearson Correlation Coefficient</h5><p><a href="https://en.wikipedia.org/wiki/Pearson_correlation_coefficient" target="_blank" rel="noopener noreferrer">Pearson Correlation Coefficient</a> （PCC）的定义为：
$$
r_{xy} =\frac{\sum ^n _{i=1}(x_i - \bar{x})(y_i - \bar{y})}{\sqrt{\sum ^n _{i=1}(x_i - \bar{x})^2} \sqrt{\sum ^n _{i=1}(y_i - \bar{y})^2}}
$$
相比 Jaccard Index，它把对象之间关系中的数值与自身和所有对象的数值的平均值的差进行累加运算，在考虑了数值比重的同事考虑了数值基于对象自身的相对差异。</p>
<h5 id="usercf" class="headerLink">
    <a href="#usercf" class="header-mark"></a>1.2.3.5 UserCF</h5><p>接下来我们就利用 Pearson Correlation Coefficient 来举例 UserCF 方法。</p>
<p>基于用户的协同过滤方法分如下几步：</p>
<ul>
<li>找出和推荐用户同样给出评分过的电影的用户</li>
<li>运算 Pearson Correlation Coefficient 得到和推荐用户兴趣接近的用户</li>
<li>通过兴趣接近用户得到高评分未观看电影</li>
<li>根据观看用户的 Pearson Correlation Coefficient 加权，排序得推荐电影列表</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="o">//</span><span class="w"> </span><span class="err">找出和用户</span><span class="w"> </span><span class="n">u_2</span><span class="w"> </span><span class="err">看过相同电影的用户</span><span class="p">,</span><span class="w"> </span><span class="err">得电影评分</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">u</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e0</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[</span><span class="n">e1</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">u_sim</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">u</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;u_2&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">u_sim</span><span class="p">)</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="s2">&#34;u_2&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">u</span><span class="p">,</span><span class="w"> </span><span class="n">u_sim</span><span class="p">,</span><span class="w"> </span><span class="nf">collect</span><span class="p">(</span><span class="nf">id</span><span class="p">(</span><span class="n">m</span><span class="p">))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">watched_movies_id</span><span class="p">,</span><span class="w"> </span><span class="nf">COLLECT</span><span class="p">(</span><span class="err">{</span><span class="n">e0</span><span class="p">:</span><span class="w"> </span><span class="n">e0</span><span class="p">,</span><span class="w"> </span><span class="n">e1</span><span class="p">:</span><span class="w"> </span><span class="n">e1</span><span class="err">}</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">e</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">计算</span><span class="w"> </span><span class="n">u_2</span><span class="w"> </span><span class="err">和这些用户的</span><span class="w"> </span><span class="n">pearson_cc</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">u</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e0</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">u_sim</span><span class="p">,</span><span class="w"> </span><span class="n">watched_movies_id</span><span class="p">,</span><span class="w"> </span><span class="nf">avg</span><span class="p">(</span><span class="n">e0</span><span class="p">.</span><span class="n">rate</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">u_mean</span><span class="p">,</span><span class="w"> </span><span class="n">e</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">u_sim</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e1</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">recomm</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">u_sim</span><span class="p">,</span><span class="w"> </span><span class="n">watched_movies_id</span><span class="p">,</span><span class="w"> </span><span class="n">u_mean</span><span class="p">,</span><span class="w"> </span><span class="nf">avg</span><span class="p">(</span><span class="n">e1</span><span class="p">.</span><span class="n">rate</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">u_sim_mean</span><span class="p">,</span><span class="w"> </span><span class="n">e</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">e_</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">UNWIND</span><span class="w"> </span><span class="n">e_</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">e</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="nf">sum</span><span class="p">((</span><span class="n">e</span><span class="p">.</span><span class="n">e0</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">u_mean</span><span class="p">)</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">e1</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">u_sim_mean</span><span class="p">)</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">numerator</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">     </span><span class="nf">sqrt</span><span class="p">(</span><span class="nf">sum</span><span class="p">(</span><span class="nf">pow</span><span class="p">((</span><span class="n">e</span><span class="p">.</span><span class="n">e0</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">u_mean</span><span class="p">),</span><span class="mi">2</span><span class="p">)))</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="nf">sqrt</span><span class="p">(</span><span class="nf">sum</span><span class="p">(</span><span class="nf">pow</span><span class="p">((</span><span class="n">e</span><span class="p">.</span><span class="n">e1</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">u_sim_mean</span><span class="p">),</span><span class="mi">2</span><span class="p">)))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">denominator</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">     </span><span class="n">u_sim</span><span class="p">,</span><span class="w"> </span><span class="n">watched_movies_id</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">denominator</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">取</span><span class="w"> </span><span class="n">pearson_cc</span><span class="w"> </span><span class="err">最大的</span><span class="w"> </span><span class="mi">50</span><span class="w"> </span><span class="err">个相似用户</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">u_sim</span><span class="p">,</span><span class="w"> </span><span class="n">watched_movies_id</span><span class="p">,</span><span class="w"> </span><span class="n">numerator</span><span class="o">/</span><span class="n">denominator</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">pearson_cc</span><span class="w"> </span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">pearson_cc</span><span class="w"> </span><span class="k">DESC</span><span class="w"> </span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">50</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">取相似用户给出高评分的新电影，根据相似用户个数对用户相似程度</span><span class="w"> </span><span class="n">pearson_cc</span><span class="w"> </span><span class="err">加权，获得推荐列表</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">u_sim</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e1</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">recomm</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">recomm</span><span class="p">)</span><span class="w"> </span><span class="k">IN</span><span class="w"> </span><span class="n">watched_movies_id</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">e1</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">recomm</span><span class="p">,</span><span class="w"> </span><span class="nf">sum</span><span class="p">(</span><span class="n">pearson_cc</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">sim_score</span><span class="w"> </span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">sim_score</span><span class="w"> </span><span class="k">DESC</span><span class="w"> </span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">50</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>结果：</p>
<table>
<thead>
<tr>
<th style="text-align:left">recomm</th>
<th style="text-align:left">sim_score</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">(&ldquo;64957&rdquo; :movie{name: &ldquo;Mother&rdquo;})</td>
<td style="text-align:left">14</td>
</tr>
<tr>
<td style="text-align:left">(&ldquo;10&rdquo; :movie{name: &ldquo;Star Wars&rdquo;})</td>
<td style="text-align:left">13</td>
</tr>
<tr>
<td style="text-align:left">(&ldquo;11&rdquo; :movie{name: &ldquo;Star Wars: A New Hope&rdquo;})</td>
<td style="text-align:left">13</td>
</tr>
<tr>
<td style="text-align:left">(&ldquo;55207&rdquo; :movie{name: &ldquo;Silence&rdquo;})</td>
<td style="text-align:left">12</td>
</tr>
<tr>
<td style="text-align:left">(&ldquo;170339&rdquo; :movie{name: &ldquo;Silence&rdquo;})</td>
<td style="text-align:left">12</td>
</tr>
<tr>
<td style="text-align:left">(&ldquo;9807&rdquo; :movie{name: &ldquo;Aladdin&rdquo;})</td>
<td style="text-align:left">8</td>
</tr>
<tr>
<td style="text-align:left">(&ldquo;45375&rdquo; :movie{name: &ldquo;X&rdquo;})</td>
<td style="text-align:left">7</td>
</tr>
<tr>
<td style="text-align:left">(&ldquo;87944&rdquo; :movie{name: &ldquo;Robin Hood&rdquo;})</td>
<td style="text-align:left">6</td>
</tr>
<tr>
<td style="text-align:left">(&ldquo;473&rdquo; :movie{name: &ldquo;Pi&rdquo;})</td>
<td style="text-align:left">6</td>
</tr>
<tr>
<td style="text-align:left">(&ldquo;807&rdquo; :movie{name: &ldquo;Seven&rdquo;})</td>
<td style="text-align:left">6</td>
</tr>
</tbody>
</table>
<h5 id="可视化分析-usercf" class="headerLink">
    <a href="#%e5%8f%af%e8%a7%86%e5%8c%96%e5%88%86%e6%9e%90-usercf" class="header-mark"></a>1.2.3.6 可视化分析 UserCF</h5><p>再看看 UserCF 的可视化结果吧：</p>
<ul>
<li>
<p>找出和推荐用户同样给出评分过的电影的用户</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="o">//</span><span class="w"> </span><span class="err">找出和用户</span><span class="w"> </span><span class="n">u_2</span><span class="w"> </span><span class="err">看过相同电影的用户</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">u</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e0</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[</span><span class="n">e1</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">u_sim</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">u</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;u_2&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">u_sim</span><span class="p">)</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="s2">&#34;u_2&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><figure><a class="lightgallery" href="/recommendation-system-with-graphdb/UserCF_step0.webp" title="UserCF_step0" data-thumbnail="/recommendation-system-with-graphdb/UserCF_step0.webp">
        <img
            
            loading="lazy"
            src="/recommendation-system-with-graphdb/UserCF_step0.webp"
            srcset="/recommendation-system-with-graphdb/UserCF_step0.webp, /recommendation-system-with-graphdb/UserCF_step0.webp 1.5x, /recommendation-system-with-graphdb/UserCF_step0.webp 2x"
            sizes="auto"
            alt="/recommendation-system-with-graphdb/UserCF_step0.webp">
    </a></figure></p>
</li>
<li>
<p>运算 Pearson Correlation Coefficient 得到和推荐用户兴趣接近的用户，输出这些接近的用户</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="o">//</span><span class="w"> </span><span class="err">找出和用户</span><span class="w"> </span><span class="n">u_2</span><span class="w"> </span><span class="err">看过相同电影的用户</span><span class="p">,</span><span class="w"> </span><span class="err">得电影评分</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">u</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e0</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[</span><span class="n">e1</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">u_sim</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">u</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;u_2&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">u_sim</span><span class="p">)</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="s2">&#34;u_2&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">u</span><span class="p">,</span><span class="w"> </span><span class="n">u_sim</span><span class="p">,</span><span class="w"> </span><span class="nf">collect</span><span class="p">(</span><span class="nf">id</span><span class="p">(</span><span class="n">m</span><span class="p">))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">watched_movies_id</span><span class="p">,</span><span class="w"> </span><span class="nf">COLLECT</span><span class="p">(</span><span class="err">{</span><span class="n">e0</span><span class="p">:</span><span class="w"> </span><span class="n">e0</span><span class="p">,</span><span class="w"> </span><span class="n">e1</span><span class="p">:</span><span class="w"> </span><span class="n">e1</span><span class="err">}</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">e</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">计算</span><span class="w"> </span><span class="n">u_2</span><span class="w"> </span><span class="err">和这些用户的</span><span class="w"> </span><span class="n">pearson_cc</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">u</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e0</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">u_sim</span><span class="p">,</span><span class="w"> </span><span class="n">watched_movies_id</span><span class="p">,</span><span class="w"> </span><span class="nf">avg</span><span class="p">(</span><span class="n">e0</span><span class="p">.</span><span class="n">rate</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">u_mean</span><span class="p">,</span><span class="w"> </span><span class="n">e</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">u_sim</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e1</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">recomm</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">u_sim</span><span class="p">,</span><span class="w"> </span><span class="n">watched_movies_id</span><span class="p">,</span><span class="w"> </span><span class="n">u_mean</span><span class="p">,</span><span class="w"> </span><span class="nf">avg</span><span class="p">(</span><span class="n">e1</span><span class="p">.</span><span class="n">rate</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">u_sim_mean</span><span class="p">,</span><span class="w"> </span><span class="n">e</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">e_</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">UNWIND</span><span class="w"> </span><span class="n">e_</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">e</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="nf">sum</span><span class="p">((</span><span class="n">e</span><span class="p">.</span><span class="n">e0</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">u_mean</span><span class="p">)</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">e1</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">u_sim_mean</span><span class="p">)</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">numerator</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">     </span><span class="nf">sqrt</span><span class="p">(</span><span class="nf">sum</span><span class="p">(</span><span class="nf">pow</span><span class="p">((</span><span class="n">e</span><span class="p">.</span><span class="n">e0</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">u_mean</span><span class="p">),</span><span class="mi">2</span><span class="p">)))</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="nf">sqrt</span><span class="p">(</span><span class="nf">sum</span><span class="p">(</span><span class="nf">pow</span><span class="p">((</span><span class="n">e</span><span class="p">.</span><span class="n">e1</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">u_sim_mean</span><span class="p">),</span><span class="mi">2</span><span class="p">)))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">denominator</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">     </span><span class="n">u_sim</span><span class="p">,</span><span class="w"> </span><span class="n">watched_movies_id</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">denominator</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">取</span><span class="w"> </span><span class="n">pearson_cc</span><span class="w"> </span><span class="err">最大的</span><span class="w"> </span><span class="mi">50</span><span class="w"> </span><span class="err">个相似用户</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">u_sim</span><span class="p">,</span><span class="w"> </span><span class="n">watched_movies_id</span><span class="p">,</span><span class="w"> </span><span class="n">numerator</span><span class="o">/</span><span class="n">denominator</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">pearson_cc</span><span class="w"> </span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">pearson_cc</span><span class="w"> </span><span class="k">DESC</span><span class="w"> </span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">50</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">u_sim</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>我们增量渲染，并给他们标记一下颜色：</p>
<p><figure><a class="lightgallery" href="/recommendation-system-with-graphdb/UserCF_step1.webp" title="UserCF_step1" data-thumbnail="/recommendation-system-with-graphdb/UserCF_step1.webp">
        <img
            
            loading="lazy"
            src="/recommendation-system-with-graphdb/UserCF_step1.webp"
            srcset="/recommendation-system-with-graphdb/UserCF_step1.webp, /recommendation-system-with-graphdb/UserCF_step1.webp 1.5x, /recommendation-system-with-graphdb/UserCF_step1.webp 2x"
            sizes="auto"
            alt="/recommendation-system-with-graphdb/UserCF_step1.webp">
    </a></figure></p>
</li>
<li>
<p>通过兴趣接近用户得到高评分未观看电影，根据观看用户的 Pearson Correlation Coefficient 加权，排序得推荐电影列表。我们把结果输出为这些相似用户的高评分电影路径：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="o">//</span><span class="w"> </span><span class="err">找出和用户</span><span class="w"> </span><span class="n">u_2</span><span class="w"> </span><span class="err">看过相同电影的用户</span><span class="p">,</span><span class="w"> </span><span class="err">得电影评分</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">u</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e0</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[</span><span class="n">e1</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">u_sim</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">u</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;u_2&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">u_sim</span><span class="p">)</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="s2">&#34;u_2&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">u</span><span class="p">,</span><span class="w"> </span><span class="n">u_sim</span><span class="p">,</span><span class="w"> </span><span class="nf">collect</span><span class="p">(</span><span class="nf">id</span><span class="p">(</span><span class="n">m</span><span class="p">))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">watched_movies_id</span><span class="p">,</span><span class="w"> </span><span class="nf">COLLECT</span><span class="p">(</span><span class="err">{</span><span class="n">e0</span><span class="p">:</span><span class="w"> </span><span class="n">e0</span><span class="p">,</span><span class="w"> </span><span class="n">e1</span><span class="p">:</span><span class="w"> </span><span class="n">e1</span><span class="err">}</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">e</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">计算</span><span class="w"> </span><span class="n">u_2</span><span class="w"> </span><span class="err">和这些用户的</span><span class="w"> </span><span class="n">pearson_cc</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">u</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e0</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">u_sim</span><span class="p">,</span><span class="w"> </span><span class="n">watched_movies_id</span><span class="p">,</span><span class="w"> </span><span class="nf">avg</span><span class="p">(</span><span class="n">e0</span><span class="p">.</span><span class="n">rate</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">u_mean</span><span class="p">,</span><span class="w"> </span><span class="n">e</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">u_sim</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e1</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">recomm</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">u_sim</span><span class="p">,</span><span class="w"> </span><span class="n">watched_movies_id</span><span class="p">,</span><span class="w"> </span><span class="n">u_mean</span><span class="p">,</span><span class="w"> </span><span class="nf">avg</span><span class="p">(</span><span class="n">e1</span><span class="p">.</span><span class="n">rate</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">u_sim_mean</span><span class="p">,</span><span class="w"> </span><span class="n">e</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">e_</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">UNWIND</span><span class="w"> </span><span class="n">e_</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">e</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="nf">sum</span><span class="p">((</span><span class="n">e</span><span class="p">.</span><span class="n">e0</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">u_mean</span><span class="p">)</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">e1</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">u_sim_mean</span><span class="p">)</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">numerator</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">     </span><span class="nf">sqrt</span><span class="p">(</span><span class="nf">sum</span><span class="p">(</span><span class="nf">pow</span><span class="p">((</span><span class="n">e</span><span class="p">.</span><span class="n">e0</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">u_mean</span><span class="p">),</span><span class="mi">2</span><span class="p">)))</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="nf">sqrt</span><span class="p">(</span><span class="nf">sum</span><span class="p">(</span><span class="nf">pow</span><span class="p">((</span><span class="n">e</span><span class="p">.</span><span class="n">e1</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">u_sim_mean</span><span class="p">),</span><span class="mi">2</span><span class="p">)))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">denominator</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">     </span><span class="n">u_sim</span><span class="p">,</span><span class="w"> </span><span class="n">watched_movies_id</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">denominator</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">取</span><span class="w"> </span><span class="n">pearson_cc</span><span class="w"> </span><span class="err">最大的</span><span class="w"> </span><span class="mi">50</span><span class="w"> </span><span class="err">个相似用户</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">u_sim</span><span class="p">,</span><span class="w"> </span><span class="n">watched_movies_id</span><span class="p">,</span><span class="w"> </span><span class="n">numerator</span><span class="o">/</span><span class="n">denominator</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">pearson_cc</span><span class="w"> </span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">pearson_cc</span><span class="w"> </span><span class="k">DESC</span><span class="w"> </span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">50</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">取相似用户给出高评分的新电影，根据相似用户个数对用户相似程度</span><span class="w"> </span><span class="n">pearson_cc</span><span class="w"> </span><span class="err">加权，获得推荐列表</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">u_sim</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e1</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">recomm</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">recomm</span><span class="p">)</span><span class="w"> </span><span class="k">IN</span><span class="w"> </span><span class="n">watched_movies_id</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">e1</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">p</span><span class="p">,</span><span class="w"> </span><span class="n">recomm</span><span class="p">,</span><span class="w"> </span><span class="nf">sum</span><span class="p">(</span><span class="n">pearson_cc</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">sim_score</span><span class="w"> </span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">sim_score</span><span class="w"> </span><span class="k">DESC</span><span class="w"> </span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">50</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>得到的结果，我们增量渲染到画布上可以得到：这些 UserCF 推荐而得的电影在路径末端：</p>
<p><figure><a class="lightgallery" href="/recommendation-system-with-graphdb/UserCF_step2.webp" title="UserCF_step2" data-thumbnail="/recommendation-system-with-graphdb/UserCF_step2.webp">
        <img
            
            loading="lazy"
            src="/recommendation-system-with-graphdb/UserCF_step2.webp"
            srcset="/recommendation-system-with-graphdb/UserCF_step2.webp, /recommendation-system-with-graphdb/UserCF_step2.webp 1.5x, /recommendation-system-with-graphdb/UserCF_step2.webp 2x"
            sizes="auto"
            alt="/recommendation-system-with-graphdb/UserCF_step2.webp">
    </a></figure></p>
<p>在可视化中，相似用户的高评分未观看电影被推荐的思想是不是一目了然了呢？</p>
</li>
</ul>
<h4 id="混合的方法" class="headerLink">
    <a href="#%e6%b7%b7%e5%90%88%e7%9a%84%e6%96%b9%e6%b3%95" class="header-mark"></a>1.2.4 混合的方法</h4><p>在真实世界中，真正达到最好效果的方法通常是结合所有信息的不同方法，共同工作的，这样既可以使得不同角度的有用信息得到充分利用，又能弥补单一方法在不同数据量、不同阶段的弱点。</p>
<p>结合的方法在工程上可以千差万别，这里就不展开了，不过在下边介绍另一类方法的时候，我们会举例一种混合的方式：基于模型。</p>
<h4 id="基于模型的方法" class="headerLink">
    <a href="#%e5%9f%ba%e4%ba%8e%e6%a8%a1%e5%9e%8b%e7%9a%84%e6%96%b9%e6%b3%95" class="header-mark"></a>1.2.5 基于模型的方法</h4><p>直觉上，我们知道除了正向的明确通过基于内容的（电影的领域知识、关系）、协同的（用户与用户、用户与电影之间的交互关系）的算法，也可以把这些信息作为机器学习中的输入特征，用统计学的方法得到一个模型，用来预测用户可能喜欢的物件（电影），这就是基于模型的方法。</p>
<p>基于模型的方法可以很自然地把把以上几种方法的信息同时纳入为特征，这样，它本质上也是混合过滤方法的一种实现了。</p>
<p>基于模型、机器学习的推荐系统方法有很多，这里，因为我们着重以图、图数据库的出发点介绍，我就举例其中的一种方法：基于图神经网络（GNN）。</p>
<p>GNN 的方法可以将图谱中的内容信息（导演、演员、类型）和协同信息（用户-用户、电影-电影、用户-电影之间的相互关系）以知识的方式嵌入，并且方法中的消息传递方式保有了图中的局部性（locality），这使得它可能成为一个非常新颖、有效的推荐系统模型方法。</p>
<h5 id="gnn--图数据库的推荐系统" class="headerLink">
    <a href="#gnn--%e5%9b%be%e6%95%b0%e6%8d%ae%e5%ba%93%e7%9a%84%e6%8e%a8%e8%8d%90%e7%b3%bb%e7%bb%9f" class="header-mark"></a>1.2.5.1 GNN + 图数据库的推荐系统</h5><p><strong>为什么需要图数据库</strong>？</p>
<p>GNN 的方法中，图数据库只是一个可选项，而我给的 GNN 方法的示例中，图数据库的关键作用是它带来了实时性的可能。</p>
<p>一个实时性推荐系统要求在秒级响应下利用 GNN 训练模型从近实时的输入数据中进行推理，这给我们提出的要求是：</p>
<ul>
<li>输入数据可以实时、近实时获取</li>
<li>推理运算可以实时完成</li>
</ul>
<p>而利用归纳型（Inductive model）的模型从图数据库中实时获取新的数据子图作为推理输入是一个满足这样要求可行的设计方式。</p>
<p>下边是简单的流程图：</p>
<ul>
<li>左边是模型训练，在图谱的二分图（user 和 item）之上建模
<ul>
<li>用户和物件（movie）之间的关系除了交互关系之外，还有预先处理的关系，这些关系被查询获得后再写回图数据库中供后续消费使用，关系有：
<ul>
<li>用户间“相似”关系</li>
<li>物件间不同（共同演员、类型、导演）关系</li>
</ul>
</li>
<li>利用 Nebula-DGL 将图中需要的点、边序列化为 DGL 可以消费的对象</li>
<li>在 DGL 中分割训练、测试、验证集，利用 PinSAGE 模型训练。</li>
<li>导出模型给推荐系统使用</li>
</ul>
</li>
</ul>
<blockquote>
<p>注：</p>
<ul>
<li>
<p>DGL 是非常流行的图深度学习矿建，项目官网：https://www.dgl.ai</p>
</li>
<li>
<p>Nebula-DGL 是一个 NebulaGraph 到 DGL 的连接器，项目地址：https://github.com/wey-gu/nebula-dgl</p>
</li>
<li>
<p>PinSAGE 参考 <a href="https://arxiv.org/abs/1806.01973" target="_blank" rel="noopener noreferrer">https://arxiv.org/abs/1806.01973</a> 论文，DGL 中的 PinSAGE 实现其实并不是归纳型，需要做一些修改才可以。</p>
</li>
</ul>
</blockquote>
<ul>
<li>右边是导出的模型作为推理接口的推荐系统
<ul>
<li>基于图库的实时图谱上一直会有实时的数据更新，节点增减</li>
<li>当给定的用户推荐请求过来的时候，图库中以该用户为起点的子图会被获取（1.）、作为输入发送给推理接口（2.）</li>
<li>推理接口把子图输入给之前训练的模型，获得该用户在子图中关联的新物件中的评分排序（3.）作为推荐结果</li>
</ul>
</li>
</ul>
<p><figure><a class="lightgallery" href="/recommendation-system-with-graphdb/PinSAGE_RecommendationSystem.svg" title="PinSAGE_RecommendationSystem" data-thumbnail="/recommendation-system-with-graphdb/PinSAGE_RecommendationSystem.svg">
        <img
            
            loading="lazy"
            src="/recommendation-system-with-graphdb/PinSAGE_RecommendationSystem.svg"
            srcset="/recommendation-system-with-graphdb/PinSAGE_RecommendationSystem.svg, /recommendation-system-with-graphdb/PinSAGE_RecommendationSystem.svg 1.5x, /recommendation-system-with-graphdb/PinSAGE_RecommendationSystem.svg 2x"
            sizes="auto"
            alt="/recommendation-system-with-graphdb/PinSAGE_RecommendationSystem.svg">
    </a></figure></p>
<p>篇幅关系，本章我就不给出端到端的实例代码了，后续有机会我会尽量做一个 demo 出来的。</p>
<h3 id="推荐系统可解释性" class="headerLink">
    <a href="#%e6%8e%a8%e8%8d%90%e7%b3%bb%e7%bb%9f%e5%8f%af%e8%a7%a3%e9%87%8a%e6%80%a7" class="header-mark"></a>1.3 推荐系统可解释性</h3><p>在结束本章之前，再举一个图数据库在推荐系统中的典型应用：推荐理由。</p>
<p>下图是美团、大众点评中的一个常见的搜索、推荐结果，现代推荐系统的复杂度是非常大的，一方面由很多方法自身的特性决定，另一方面最终的推荐可能是多个系统协同获得最终结果排名，这使得我们很难对推荐结果进行解释。</p>
<p>得益于被推荐用户和物件、以及他们的各种各样画像最终形成的知识图谱，我们只需要在图谱中对推荐结果进行“路径查找”就可以获得很有意义的解释，像是如下截图的“在北京喜欢北京菜的山东老乡都说这家店很赞”就是这样获得的解释。</p>
<p><figure><a class="lightgallery" href="/recommendation-system-with-graphdb/reasoning.webp" title="reasoning" data-thumbnail="/recommendation-system-with-graphdb/reasoning.webp">
        <img
            
            loading="lazy"
            src="/recommendation-system-with-graphdb/reasoning.webp"
            srcset="/recommendation-system-with-graphdb/reasoning.webp, /recommendation-system-with-graphdb/reasoning.webp 1.5x, /recommendation-system-with-graphdb/reasoning.webp 2x"
            sizes="auto"
            alt="/recommendation-system-with-graphdb/reasoning.webp">
    </a></figure></p>
<blockquote>
<p>图片来源：https://tech.meituan.com/2021/04/01/nebula-graph-practice-in-meituan.html</p>
</blockquote>
<h4 id="可解释性的例子" class="headerLink">
    <a href="#%e5%8f%af%e8%a7%a3%e9%87%8a%e6%80%a7%e7%9a%84%e4%be%8b%e5%ad%90" class="header-mark"></a>1.3.1 可解释性的例子</h4><p>咱们回到电影推荐的图谱上，我们在前边的算法中曾经获得过用户 <code>u_124</code> 的推荐电影 <code>1891</code>（星球大战：），那么我们可以通过这一个查询获得它的推荐解释：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="n">FIND</span><span class="w"> </span><span class="n">NOLOOP</span><span class="w"> </span><span class="n">PATH</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="s2">&#34;u_124&#34;</span><span class="w"> </span><span class="k">TO</span><span class="w"> </span><span class="s2">&#34;1891&#34;</span><span class="w"> </span><span class="n">over</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">BIDIRECT</span><span class="w"> </span><span class="n">UPTO</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="n">STEPS</span><span class="w"> </span><span class="n">yield</span><span class="w"> </span><span class="n">path</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="o">`</span><span class="n">p</span><span class="o">`</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">20</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>我们可以很快获得 20 条路径：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="p">(</span><span class="n">root</span><span class="o">@</span><span class="n">nebula</span><span class="p">)</span><span class="w"> </span><span class="p">[</span><span class="n">moviegraph</span><span class="p">]</span><span class="o">&gt;</span><span class="w"> </span><span class="n">FIND</span><span class="w"> </span><span class="n">NOLOOP</span><span class="w"> </span><span class="n">PATH</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="s2">&#34;u_124&#34;</span><span class="w"> </span><span class="k">TO</span><span class="w"> </span><span class="s2">&#34;1891&#34;</span><span class="w"> </span><span class="n">over</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">BIDIRECT</span><span class="w"> </span><span class="n">UPTO</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="n">STEPS</span><span class="w"> </span><span class="n">yield</span><span class="w"> </span><span class="n">path</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="o">`</span><span class="n">p</span><span class="o">`</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">20</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+-----------------------------------------------------------------------------------------------------+</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="n">p</span><span class="w">                                                                                                   </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+-----------------------------------------------------------------------------------------------------+</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="o">&lt;</span><span class="p">(</span><span class="s2">&#34;u_124&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">watched</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;11&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">with_genre</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;g_49&#34;</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">with_genre</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="s2">&#34;1891&#34;</span><span class="p">)</span><span class="o">&gt;</span><span class="w">       </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="o">&lt;</span><span class="p">(</span><span class="s2">&#34;u_124&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">watched</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;11&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">with_genre</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;g_17&#34;</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">with_genre</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="s2">&#34;1891&#34;</span><span class="p">)</span><span class="o">&gt;</span><span class="w">       </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="o">&lt;</span><span class="p">(</span><span class="s2">&#34;u_124&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">watched</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;11&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">with_genre</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;g_10281&#34;</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">with_genre</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="s2">&#34;1891&#34;</span><span class="p">)</span><span class="o">&gt;</span><span class="w">    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="o">&lt;</span><span class="p">(</span><span class="s2">&#34;u_124&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">watched</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;11&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">acted_by</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;p_4&#34;</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">acted_by</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="s2">&#34;1891&#34;</span><span class="p">)</span><span class="o">&gt;</span><span class="w">            </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="o">&lt;</span><span class="p">(</span><span class="s2">&#34;u_124&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">watched</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;11&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">acted_by</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;p_3&#34;</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">acted_by</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="s2">&#34;1891&#34;</span><span class="p">)</span><span class="o">&gt;</span><span class="w">            </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="o">&lt;</span><span class="p">(</span><span class="s2">&#34;u_124&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">watched</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;11&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">acted_by</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;p_24342&#34;</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">acted_by</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="s2">&#34;1891&#34;</span><span class="p">)</span><span class="o">&gt;</span><span class="w">        </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="o">&lt;</span><span class="p">(</span><span class="s2">&#34;u_124&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">watched</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;11&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">acted_by</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;p_2&#34;</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">acted_by</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="s2">&#34;1891&#34;</span><span class="p">)</span><span class="o">&gt;</span><span class="w">            </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="o">&lt;</span><span class="p">(</span><span class="s2">&#34;u_124&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">watched</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;832&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">with_genre</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;g_1110&#34;</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">with_genre</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="s2">&#34;1891&#34;</span><span class="p">)</span><span class="o">&gt;</span><span class="w">    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="o">&lt;</span><span class="p">(</span><span class="s2">&#34;u_124&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">watched</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;11&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">with_genre</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;g_1110&#34;</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">with_genre</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="s2">&#34;1891&#34;</span><span class="p">)</span><span class="o">&gt;</span><span class="w">     </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="o">&lt;</span><span class="p">(</span><span class="s2">&#34;u_124&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">watched</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;11&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">acted_by</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;p_13463&#34;</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">acted_by</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="s2">&#34;1891&#34;</span><span class="p">)</span><span class="o">&gt;</span><span class="w">        </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="o">&lt;</span><span class="p">(</span><span class="s2">&#34;u_124&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">watched</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;11&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">acted_by</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;p_12248&#34;</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">acted_by</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="s2">&#34;1891&#34;</span><span class="p">)</span><span class="o">&gt;</span><span class="w">        </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="o">&lt;</span><span class="p">(</span><span class="s2">&#34;u_124&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">watched</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;47981&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">with_genre</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;g_10219&#34;</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">with_genre</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="s2">&#34;1891&#34;</span><span class="p">)</span><span class="o">&gt;</span><span class="w"> </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="o">&lt;</span><span class="p">(</span><span class="s2">&#34;u_124&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">watched</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;11&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">acted_by</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;p_6&#34;</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">acted_by</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="s2">&#34;1891&#34;</span><span class="p">)</span><span class="o">&gt;</span><span class="w">            </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="o">&lt;</span><span class="p">(</span><span class="s2">&#34;u_124&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">watched</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;497&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">with_genre</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;g_104&#34;</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">with_genre</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="s2">&#34;1891&#34;</span><span class="p">)</span><span class="o">&gt;</span><span class="w">     </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="o">&lt;</span><span class="p">(</span><span class="s2">&#34;u_124&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">watched</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;120880&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">with_genre</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;g_104&#34;</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">with_genre</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="s2">&#34;1891&#34;</span><span class="p">)</span><span class="o">&gt;</span><span class="w">  </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="o">&lt;</span><span class="p">(</span><span class="s2">&#34;u_124&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">watched</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;11&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">with_genre</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;g_104&#34;</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">with_genre</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="s2">&#34;1891&#34;</span><span class="p">)</span><span class="o">&gt;</span><span class="w">      </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="o">&lt;</span><span class="p">(</span><span class="s2">&#34;u_124&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">watched</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;11&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">acted_by</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;p_130&#34;</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">acted_by</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="s2">&#34;1891&#34;</span><span class="p">)</span><span class="o">&gt;</span><span class="w">          </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="o">&lt;</span><span class="p">(</span><span class="s2">&#34;u_124&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">watched</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;497&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">with_genre</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;g_50&#34;</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">with_genre</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="s2">&#34;1891&#34;</span><span class="p">)</span><span class="o">&gt;</span><span class="w">      </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="o">&lt;</span><span class="p">(</span><span class="s2">&#34;u_124&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">watched</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;11635&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">with_genre</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;g_50&#34;</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">with_genre</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="s2">&#34;1891&#34;</span><span class="p">)</span><span class="o">&gt;</span><span class="w">    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="o">&lt;</span><span class="p">(</span><span class="s2">&#34;u_124&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">watched</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;11&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">with_genre</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;g_50&#34;</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">with_genre</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="s2">&#34;1891&#34;</span><span class="p">)</span><span class="o">&gt;</span><span class="w">       </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+-----------------------------------------------------------------------------------------------------+</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">Got</span><span class="w"> </span><span class="mi">20</span><span class="w"> </span><span class="nf">rows</span><span class="w"> </span><span class="p">(</span><span class="kt">time</span><span class="w"> </span><span class="n">spent</span><span class="w"> </span><span class="mi">267151</span><span class="o">/</span><span class="mi">278139</span><span class="w"> </span><span class="n">us</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">Wed</span><span class="p">,</span><span class="w"> </span><span class="mi">09</span><span class="w"> </span><span class="n">Nov</span><span class="w"> </span><span class="mi">2022</span><span class="w"> </span><span class="mi">19</span><span class="p">:</span><span class="mi">05</span><span class="p">:</span><span class="mi">56</span><span class="w"> </span><span class="n">CST</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>我们在结果可视化中可以很容易看出这个推荐的结果可以是：</p>
<ul>
<li>曾经喜欢的星战电影的大部分演职人员都也参与了这部和同样是“奥斯卡获奖”且“经典”的电影。</li>
</ul>
<p><figure><a class="lightgallery" href="/recommendation-system-with-graphdb/reasoning_movie.webp" title="reasoning_movie" data-thumbnail="/recommendation-system-with-graphdb/reasoning_movie.webp">
        <img
            
            loading="lazy"
            src="/recommendation-system-with-graphdb/reasoning_movie.webp"
            srcset="/recommendation-system-with-graphdb/reasoning_movie.webp, /recommendation-system-with-graphdb/reasoning_movie.webp 1.5x, /recommendation-system-with-graphdb/reasoning_movie.webp 2x"
            sizes="auto"
            alt="/recommendation-system-with-graphdb/reasoning_movie.webp">
    </a></figure></p>
<h3 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>1.4 总结</h3><p>现在，我们知道图数据库作为推荐系统中信息的最终形式：知识存在，可以适用在不同类型方法上，尽管很多方法中，图库不一定是最终落地系统方案的最流行选择，图数据库所带来的可视化洞察的潜力还是非常大的。</p>
<p>同时，构建的综合知识图谱上的解释、推理能力与一些实时要求高的图方法中（比如 GNN的基于模型方法），能起到带来独一无二的作用。</p>
<p>题图版权：<a href="https://unsplash.com/@charlesdeluvio" target="_blank" rel="noopener noreferrer">charlesdeluvio</a></p>]]></description>
</item></channel>
</rss>
