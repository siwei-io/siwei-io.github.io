<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>所有文章 - siwei.io</title>
        <link>https://siwei.io/posts/</link>
        <description>所有文章 | siwei.io</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>weyl.gu@gmail.com (Wey Gu)</managingEditor>
            <webMaster>weyl.gu@gmail.com (Wey Gu)</webMaster><lastBuildDate>Fri, 13 Jan 2023 22:22:44 &#43;0800</lastBuildDate><atom:link href="https://siwei.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>图数据库驱动的基础设施运维示例</title>
    <link>https://siwei.io/graph-enabled-infra-ops/</link>
    <pubDate>Fri, 13 Jan 2023 22:22:44 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/graph-enabled-infra-ops/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/graph-enabled-infra-ops/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>图技术在大型、复杂基础设施之中 SRE/DevOps 的实践参考，本文以 OpenStack 系统之上的图数据库增强的运维案例为例，揭示图数据库、图算法的智能运维方法，全流程示例代码开源。</p>
</blockquote>
<p>因为有一些还未采用图技术的 DevOps/Infra 领域同学在 NebulaGraph 社区询问参考的案例，我最近试着实践了一下如何利用图的能力与优势去帮助在复杂基础设施上构建辅助运维系统，希望能帮助到感兴趣 Infra Ops 领域、同时感兴趣图数据库、图算法的大家，全过程都是可以复现、并且开源的。</p>
<p>复杂的基础设施运维环境通常包含非常多、不同层面的资源（manifest)，为了能够尽量还原真实世界的复杂环境、又保持这个实例项目的复杂度不会失控，我选择了用一个基础设施平台：OpenStack 作为例子。</p>
<p>本文实现了 OpenStack 系统上分别利用 Push 和 Pull 两种模式将资源之中被图谱建模的图中点、边信息加载到 NebulaGraph 里的 Graph ETL 管道的路径。</p>
<p>在图谱之上，本文探索如下用例：</p>
<ul>
<li>告警、状态的推理与传导；</li>
<li>网络直连与互联关系；</li>
<li>镜像、云盘、快照血缘管理；</li>
<li>高相关性虚机预警；</li>
<li>秘钥泄漏的图上风控分析；</li>
<li>镜像、云盘漏洞范围分析；</li>
<li>宿主机逃离影响范围分析；</li>
<li>脆弱依赖资源检测；</li>
</ul>
<h2 id="试验环境搭建" class="headerLink">
    <a href="#%e8%af%95%e9%aa%8c%e7%8e%af%e5%a2%83%e6%90%ad%e5%bb%ba" class="header-mark"></a>1 试验环境搭建</h2><h3 id="背景知识" class="headerLink">
    <a href="#%e8%83%8c%e6%99%af%e7%9f%a5%e8%af%86" class="header-mark"></a>1.1 背景知识</h3><p>OpenStack 是一个开源的云计算平台，提供了类似于 AWS 的云服务。它提供了一组可插拔的模块，包括了计算，存储和网络等功能，可以帮助用户构建和管理云环境。OpenStack采用分布式架构，支持多种操作系统和硬件平台，可以在企业级和服务提供商级环境中使用。</p>
<p><a class="lightgallery" href="/graph-enabled-infra-ops/OpenStack-overview-diagram-new.webp" title="OpenStack-overview-diagram-new" data-thumbnail="/graph-enabled-infra-ops/OpenStack-overview-diagram-new.webp">
        
    </a></p>
<p>最初由 <em>NASA</em> 和 <em>Rackspace</em> Inc. 发起的 nova （虚拟化计算项目）和 swift （兼容 S3 的对象存储）项目组成，OpenStack 现在由非常多不同的子项目组成：</p>
<p><a class="lightgallery" href="/graph-enabled-infra-ops/openstack-map-v20221001.webp" title="openstack-map-v20221001" data-thumbnail="/graph-enabled-infra-ops/openstack-map-v20221001.webp">
        
    </a></p>
<p>本实验中，我们设计的 OpenStack 主要项目有：</p>
<ul>
<li>Nova 是 OpenStack 的计算服务，用于管理虚拟机。</li>
<li>Cinder 是 OpenStack 的块存储服务，用于管理云存储。</li>
<li>Neutron 是 OpenStack 的网络服务，用于管理云网络。</li>
<li>Glance 是 OpenStack 的镜像服务，用于管理云镜像。</li>
<li>Horizon 是 OpenStack 的可视化控制台服务。</li>
</ul>
<p>除此之外，我还引入了 Vitrage 项目辅助我们收集部分资源数据：</p>
<ul>
<li>Vitrage 是 OpenStack 中的一个高级分析和可视化工具，用于分析和可视化 OpenStack 环境中的资源和事件。它可以汇集来自 OpenStack 各个服务的数据，并使用图形化方式展示出来。Vitrage 发现和诊断问题，提高 OpenStack 环境的可用性和可维护性。</li>
</ul>
<p>得益于 OpenStack Decouple 的设计理念，Vitrage 可以很容易、无侵入式（只需要修改需要收集的服务两行配置）就可以在 OpenStack 的消息队列中订阅资源信息的 push 消息。</p>
<p>不过比较遗憾的是 Vitrage 这个项目已经有好多个 release cycle 没有什么大的更新了，应该是比较不活跃的状态了，比如在 zed 里，它的 Vitrage Dashboard 作为 Horizon 插件已经无法正常工作了，本实验只利用它的资源收集能力。</p>
<h3 id="环境准备搭建" class="headerLink">
    <a href="#%e7%8e%af%e5%a2%83%e5%87%86%e5%a4%87%e6%90%ad%e5%bb%ba" class="header-mark"></a>1.2 环境准备搭建</h3><h4 id="nebulagraph-集群" class="headerLink">
    <a href="#nebulagraph-%e9%9b%86%e7%be%a4" class="header-mark"></a>1.2.1 NebulaGraph 集群</h4><p>首次快速试玩安装 NebulaGraph 的话，有这么几个选项：</p>
<ul>
<li>阿里云上的 NebulaGraph 企业版（带有企业版独有的满血版可视化工具：Explorer，可以图探索、画布内跑图算法），可以获得一个月所有资源免费使用资格：
<ul>
<li>访问 <a href="https://www.siwei.io/try-aliyun" target="_blank" rel="noopener noreferrer">https://www.siwei.io/try-aliyun</a> 获得</li>
</ul>
</li>
<li>Nebula-Up 一键安装 NebulaGraph 开源社区版本，需要一个带有 Docker、Docker Desktop 环境的机器
<ul>
<li>访问 <a href="https://github.com/wey-gu/nebula-up" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/nebula-up</a></li>
</ul>
</li>
<li>有经验的同学可以参考文档进行部署：
<ul>
<li>访问 <a href="https://docs.nebula-graph.com.cn/" target="_blank" rel="noopener noreferrer">https://docs.nebula-graph.com.cn/</a></li>
</ul>
</li>
</ul>
<h4 id="openstack-集群" class="headerLink">
    <a href="#openstack-%e9%9b%86%e7%be%a4" class="header-mark"></a>1.2.2 OpenStack 集群</h4><blockquote>
<p>注意：如果大家已经有现成的 OpenStack 集群，这一步可以忽略，您只需要再去安装 OpenStack Vitrage 就好了。</p>
</blockquote>
<p>本文需要的 OpenStack 集群是一个多机的环境，为此，我准备了在 Linux Server 上利用 Libvirt 和 Linux Bridge 搭建多个虚拟机用来模拟 OpenStack 的物理机，得益于 CPU 的嵌套虚拟化和 qemu，后边我们完全可以在虚拟机搭建的实验环境中模拟可正常工作的 OpenStack nova instance 虚机。</p>
<p>整个流程我都放在 <a href="https://github.com/wey-gu/openstack-graph/#environment-setup" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/openstack-graph/#environment-setup</a> 这里了，感兴趣的同学可以访问、获取。</p>
<p>虚拟机搭建之后，我们还需要模拟真实的 Infra 环境，创建很多资源：整个过程也在 <a href="https://github.com/wey-gu/openstack-graph/#create-resources-on-openstack" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/openstack-graph/#create-resources-on-openstack</a> 有详细列出，想要动手操作的同学可以参考来亲自上手一下。</p>
<p>参考如上步骤操作之后，我们应该可以通过 Horizon Dashboard 查看集群和资源：</p>
<p>我们创建了几个虚拟机：<a class="lightgallery" href="/graph-enabled-infra-ops/nova_instance.webp" title="nova_instance" data-thumbnail="/graph-enabled-infra-ops/nova_instance.webp">
        
    </a></p>
<p>几个网盘，其中四个挂载在不同的虚拟机上</p>
<p><a class="lightgallery" href="/graph-enabled-infra-ops/cinder_volume.webp" title="cinder_volume" data-thumbnail="/graph-enabled-infra-ops/cinder_volume.webp">
        
    </a></p>
<p>集群租户的网络拓扑：<a class="lightgallery" href="/graph-enabled-infra-ops/neutron_topology.webp" title="neutron_topology" data-thumbnail="/graph-enabled-infra-ops/neutron_topology.webp">
        
    </a></p>
<p>我们还能通过 OpenStack Vitrage 的 API/CLI 获得部分主要资源的拓扑：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">source</span> openrc admin admin
</span></span><span class="line"><span class="cl">vitrage topology show --all-tenants
</span></span></code></pre></td></tr></table>
</div>
</div><p>它的结果是一个 JSON，里边已经按照边（links）和点（nodes）序列化图结构的数据了。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;directed&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;graph&#34;</span><span class="p">:</span> <span class="p">{},</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;links&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_is_deleted&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;relationship_type&#34;</span><span class="p">:</span> <span class="s2">&#34;contains&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;source&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;target&#34;</span><span class="p">:</span> <span class="mi">11</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;key&#34;</span><span class="p">:</span> <span class="s2">&#34;contains&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_is_deleted&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;relationship_type&#34;</span><span class="p">:</span> <span class="s2">&#34;contains&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;source&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;target&#34;</span><span class="p">:</span> <span class="mi">13</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;key&#34;</span><span class="p">:</span> <span class="s2">&#34;contains&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="err">...</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_is_deleted&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;relationship_type&#34;</span><span class="p">:</span> <span class="s2">&#34;attached&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;source&#34;</span><span class="p">:</span> <span class="mi">27</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;target&#34;</span><span class="p">:</span> <span class="mi">28</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;key&#34;</span><span class="p">:</span> <span class="s2">&#34;attached&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">],</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;multigraph&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;nodes&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="s2">&#34;node0&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_type&#34;</span><span class="p">:</span> <span class="s2">&#34;nova.host&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_category&#34;</span><span class="p">:</span> <span class="s2">&#34;RESOURCE&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_is_deleted&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;update_timestamp&#34;</span><span class="p">:</span> <span class="s2">&#34;2023-01-13T08:06:48Z&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_sample_timestamp&#34;</span><span class="p">:</span> <span class="s2">&#34;2023-01-13T08:06:49Z&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_is_placeholder&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_id&#34;</span><span class="p">:</span> <span class="s2">&#34;630b4c2c-5347-4073-91a3-255ec18dadfc&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;node0&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_cached_id&#34;</span><span class="p">:</span> <span class="s2">&#34;d043d278a6a712909e30e50ca8ec2364&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;is_real_vitrage_id&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_aggregated_state&#34;</span><span class="p">:</span> <span class="s2">&#34;AVAILABLE&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_operational_state&#34;</span><span class="p">:</span> <span class="s2">&#34;OK&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_datasource_name&#34;</span><span class="p">:</span> <span class="s2">&#34;nova.host&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;state&#34;</span><span class="p">:</span> <span class="s2">&#34;available&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;graph_index&#34;</span><span class="p">:</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="s2">&#34;nova&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_type&#34;</span><span class="p">:</span> <span class="s2">&#34;nova.zone&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_category&#34;</span><span class="p">:</span> <span class="s2">&#34;RESOURCE&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_is_deleted&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_sample_timestamp&#34;</span><span class="p">:</span> <span class="s2">&#34;2023-01-12T03:06:48Z&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_is_placeholder&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_id&#34;</span><span class="p">:</span> <span class="s2">&#34;a1e9c808-dac8-4b59-8f80-f21a90e9869d&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_cached_id&#34;</span><span class="p">:</span> <span class="s2">&#34;125f1d8c4451a6385cc2cfa2b0ba45be&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;is_real_vitrage_id&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_aggregated_state&#34;</span><span class="p">:</span> <span class="s2">&#34;AVAILABLE&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_operational_state&#34;</span><span class="p">:</span> <span class="s2">&#34;OK&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;state&#34;</span><span class="p">:</span> <span class="s2">&#34;available&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;update_timestamp&#34;</span><span class="p">:</span> <span class="s2">&#34;2023-01-12T03:06:48Z&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;nova&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_datasource_name&#34;</span><span class="p">:</span> <span class="s2">&#34;nova.zone&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;graph_index&#34;</span><span class="p">:</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="err">...</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;raw&#34;</span><span class="err">:</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl"><span class="err">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="图谱建模" class="headerLink">
    <a href="#%e5%9b%be%e8%b0%b1%e5%bb%ba%e6%a8%a1" class="header-mark"></a>2 图谱建模</h2><p>本实验环境中，我们考虑纳入如下资源进入图谱：</p>
<ul>
<li>nova instance: 是Nova服务中的虚拟机实例，每个nova instance都有自己的配置信息（如CPU、内存、磁盘等），有时候我们就叫它 server 或者 VM、虚机。</li>
<li>nova host是Nova服务中的物理主机，是nova instance运行的物理环境。nova host上面会运行nova-compute服务，这个服务负责管理和调度nova instance。nova host上面还可能运行其他服务，如网络服务等。</li>
<li>nova keypair: 是Nova服务中的密钥对，用于访问nova instance</li>
<li>cinder volume: 是Cinder服务中的云存储卷，可以 attach 到nova instance上做为硬盘</li>
<li>cinder snapshot: 是Cinder服务中的云存储快照，可以在cinder volume上做快照</li>
<li>glance image: 是Glance服务中的镜像，可以作为创建nova instance时候的启动硬盘</li>
<li>neutron network: 是Neutron服务中的网络，可以用于配置nova instance的网络连接</li>
<li>neutron port: 是Neutron服务中的端口，用来连接nova instance和neutron network之间，在 nova instance 虚拟机上，一个 port 常常对应一个网卡（如果不是 trunk port 的话）。</li>
</ul>
<p>他们之间的关系如下：</p>
<p><a class="lightgallery" href="/graph-enabled-infra-ops/schema_draft.webp" title="schema_draft" data-thumbnail="/graph-enabled-infra-ops/schema_draft.webp">
        
    </a></p>
<h2 id="基础设施图-etl" class="headerLink">
    <a href="#%e5%9f%ba%e7%a1%80%e8%ae%be%e6%96%bd%e5%9b%be-etl" class="header-mark"></a>3 基础设施图 ETL</h2><p>接下来我们解决从基础设施中抽取资源元数据的问题，</p>
<h3 id="push-模式" class="headerLink">
    <a href="#push-%e6%a8%a1%e5%bc%8f" class="header-mark"></a>3.1 push 模式</h3><p>这里的 push 指的是基础设施为主语，从资源方向我们的图谱系统主动、事件驱动地发出资源变动的信息。它的好处是资源中的实时性好，但是坏处是依赖基础设施自身，很多非常瘦的、软件定义/可编程程度不高的组件、比如某些硬件设备没有 push 机制，或者像是古老的软件系统不一定能存在 push 的接口，改造起来有侵入性。</p>
<p>前边提及过，OpenStack 自身是存在 Push hook 的机制的，它的子项目 vitrage 就利用这个机制很优雅地收集系统资源、告警等信息进入图中，类似的机制在其他平台中也是可以实现的。</p>
<p>本实验中我们就利用 vitrage 的机制去收集一部分图谱中的资源信息，如下图，可以看到 vitrage 会在 OpenStack message bus 中订阅 nova/cinder/neutron 等服务中的资源时间，把事件传入 Entity Queue，经过处理，存储到 Entity Graph 中。</p>
<p>在此之上，我们可以通过 vitrage API 获取图谱的拓扑，来消费它。</p>
<blockquote>
<p>注意：实际上 Vitrage 服务还提供了推理告警、推理状态、定义决策事件的能力，这里我们并没有采用，后边我们在图上做的一些事情甚至还和它的能力有一些重叠。</p>
</blockquote>
<p><a class="lightgallery" href="/graph-enabled-infra-ops/vitrage_arch.webp" title="vitrage_arch" data-thumbnail="/graph-enabled-infra-ops/vitrage_arch.webp">
        
    </a></p>
<p>这里我只是用它来展示 push 模式的工作机制，如果没有 Virtrage 这个项目存在，我们也可以比较容易通过 OpenStack 的 oslo.messaging 这个库很容易写出在 Message Bus（可能是 Kafka, RabbitMQ 等不同底层实现）上订阅资源时间的应用，然后把事件通过 Flink/ Kafka/ Pulsar 等方式接驳 NebulaGraph。</p>
<p>因为 Vitrage 的存在，我就偷懒不用去实现这部分逻辑，只消写一小部分代码调用 Vitrage API 取这个数据就可以了，讽刺的是，从这个角度来看，这其实是一种 pull 的模式了，不用拘泥它本质上算是哪一种方式，至少在资源发起测，我们把它当做 push 模式的例子看待吧。</p>
<p>这部分从 Vitrage 抓取的代码我放在 <a href="https://github.com/wey-gu/openstack-graph/blob/main/utils/vitrage_to_graph.py" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/openstack-graph/blob/main/utils/vitrage_to_graph.py</a> 了，调用方式很简单，在有 OpenStack 客户端的环境中，执行它就可以了，比如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 连到 node0 上</span>
</span></span><span class="line"><span class="cl">ssh stack@node0_ip
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 进入 devstack 目录</span>
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> devstack
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 下载 vitrage 中图数据，解析为 NeublaGraph DML/DQL 的工具</span>
</span></span><span class="line"><span class="cl">wget https://raw.githubusercontent.com/wey-gu/openstack-graph/main/utils/vitrage_to_graph.py
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 执行它</span>
</span></span><span class="line"><span class="cl">python3 vitrage_to_graph.py
</span></span></code></pre></td></tr></table>
</div>
</div><p>执行之后，会生成如下文件：</p>
<ul>
<li><code>schema.ngql</code> 图数据的 Schema 定义</li>
<li><code>vertices/</code> 点数据的文件夹</li>
<li><code>edges/</code> 边数据的文件夹</li>
</ul>
<h3 id="pull-模式" class="headerLink">
    <a href="#pull-%e6%a8%a1%e5%bc%8f" class="header-mark"></a>3.2 pull 模式</h3><p>反过来，pull 模式是从资源外部定期或者事件驱动地拉取资源，存入图谱的方式。刚好本实验中 vitrage 抓取的资源是有限的，有一些额外的资源我单独写了 python 的代码来主动全量抓取，pull 模式的好处是对资源方没有任何侵入性，只需要调用它的接口获取信息就可以了，坏处则是有的系统不太容易获得增量变化，可能只能全量去取。</p>
<p>这部分我抓取的关系如下：</p>
<ul>
<li>glance_used_by: <code>image -[:used_by]-&gt; instance (get from instance)</code></li>
<li>glance_created_from: <code>image -[:created_from]-&gt; volume (get from image)</code></li>
<li>nova_keypair_used_by: <code>keypair -[:used_by]-&gt; instance (get from instance)</code></li>
<li>cinder_snapshot_created_from: <code>volume snapshot -[:created_from]-&gt; volume (get from snapshot)</code></li>
<li>cinder_volume_created_from: <code>volume -[:created_from]-&gt; volume snapshot (get from volume)</code></li>
<li>cinder_volume_created_from: <code>volume -[:created_from]-&gt; image (get from volume)</code></li>
</ul>
<p>类似的，它的代码放在 <a href="https://github.com/wey-gu/openstack-graph/blob/main/utils/pull_resources_to_graph.py" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/openstack-graph/blob/main/utils/pull_resources_to_graph.py</a> 之中，在真实场景下，我们可能会用 Apache Airflow、dagster 甚至是 cron job 等方式定期执行它。</p>
<p>我们手动执行的方式也很简单：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 连到 node0 上</span>
</span></span><span class="line"><span class="cl">ssh stack@node0_ip
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 进入 devstack 目录</span>
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> devstack
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 下载抓取 OpenStack 资源，生成 NeublaGraph DML/DQL 的工具</span>
</span></span><span class="line"><span class="cl">wget https://raw.githubusercontent.com/wey-gu/openstack-graph/main/utils/pull_resources_to_graph.py.py
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 执行它</span>
</span></span><span class="line"><span class="cl">python3 pull_resources_to_graph.py
</span></span></code></pre></td></tr></table>
</div>
</div><p>执行之后，会生成点、边的 ngql 语句在两个文件夹下：</p>
<ul>
<li><code>vertices/</code> 点数据的文件夹</li>
<li><code>edges/</code> 边数据的文件夹</li>
</ul>
<h3 id="加载数据到-nebulagraph" class="headerLink">
    <a href="#%e5%8a%a0%e8%bd%bd%e6%95%b0%e6%8d%ae%e5%88%b0-nebulagraph" class="header-mark"></a>3.3 加载数据到 NebulaGraph</h3><p>我们只需要在 NebulaGraph Studio Console, Explorer Console 或者 NebulaGraph 命令行 Console 中执行上边生成的 <code>.ngql</code> 文件就好了：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># DDL from vitrage</span>
</span></span><span class="line"><span class="cl">cat schema.ngql
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># DDL and DML for both push and pull mode data</span>
</span></span><span class="line"><span class="cl">cat edges/*.ngql
</span></span><span class="line"><span class="cl">cat vertices/*.ngql
</span></span></code></pre></td></tr></table>
</div>
</div><p>之后，在 NebulaGraph 中我们会有一个叫做 <code>openstack</code> 的图空间，用这个查询可以查到所有数据：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">MATCH (n) WITH n LIMIT 1000
</span></span><span class="line"><span class="cl">OPTIONAL MATCH p=(n)--()
</span></span><span class="line"><span class="cl">RETURN p, n
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后渲染在 explorer 中，手动设置一下数据的图标，就可以看到我们 OpenStack 集群里的所有租户的资源图了：</p>
<p><a class="lightgallery" href="/graph-enabled-infra-ops/all_graph_view.webp" title="all_graph_view" data-thumbnail="/graph-enabled-infra-ops/all_graph_view.webp">
        
    </a></p>
<p>接下来我们终于可以在图上看看有意思的洞察了。</p>
<h2 id="基于图谱的基础设施运维示例" class="headerLink">
    <a href="#%e5%9f%ba%e4%ba%8e%e5%9b%be%e8%b0%b1%e7%9a%84%e5%9f%ba%e7%a1%80%e8%ae%be%e6%96%bd%e8%bf%90%e7%bb%b4%e7%a4%ba%e4%be%8b" class="header-mark"></a>4 基于图谱的基础设施运维示例</h2><p>作为非 SRE、DevOps 人员，我尝试藉由自己在 OpenStack 和图技术的理解想象出下边的一些实例，希望能帮助到需要的读者们。</p>
<h3 id="告警状态的推理与传导" class="headerLink">
    <a href="#%e5%91%8a%e8%ad%a6%e7%8a%b6%e6%80%81%e7%9a%84%e6%8e%a8%e7%90%86%e4%b8%8e%e4%bc%a0%e5%af%bc" class="header-mark"></a>4.1 告警、状态的推理与传导</h3><p>这部分我收到了 vitrage 项目的启发，参考它们给出的实例文档：<a href="https://github.com/openstack/vitrage/blob/master/doc/source/contributor/vitrage-templates.rst" target="_blank" rel="noopener noreferrer">这里</a>。</p>
<p>借助资源图谱实时图查询、图计算甚至图可视化能力，我们可以在图上推理、传导一些信息，把重要的时间藉由图上组织好的知识分发到需要收到通知的人、组织、系统。</p>
<p>一个简单的例子是，比如我们在 nova host（虚拟机的宿主机、hypervisor 机器，以下简称宿主机），中获得了一个告警、事件的时候，可能是网卡失败、物理硬盘预警、CPU占用过高之类的告警。我们可以借助图谱查询获得所有相关联的虚机，然后把（WARN）级别的告警发出去或者设置它们为（亚健康）的状态。</p>
<p>这样，获得通知的对象，往往是一些用户的系统，就可以根据他们预先定义好的策略做一些自动化运维，或者通知的 hook：</p>
<ul>
<li>收到“宿主机 CPU 过高”的告警的情形下，可以根据用户自己设定的不同策略把虚机迁移走，或者更高级复杂的撤离方式（开始不接受新的 traffic，创建新的替代 workload，然后 gracefully 关闭这个 workload）</li>
<li>“控制面网络故障”告警情况下，这时候往往无法成功进行主机的车里、迁移，故可以考虑触发备份主机、启动新 workload、关机</li>
<li>其他“（亚健康）状态”，可以作为负载层面出问题的根因分析（RCA）依据</li>
</ul>
<p>下边，我们给出一个在图谱上进行告警、状态传导的查询例子，我们假设 vid 为 <code>node0</code> 的宿主机出现了高 CPU 的告警，则这个查询可以得到所有其上的虚机，获得时间、告警通知列表：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">vm</span><span class="p">:</span><span class="n">nova_instance</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="o">`</span><span class="n">contains</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">host_CPU_high</span><span class="p">:</span><span class="n">nova_host</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">host_CPU_high</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;node0&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">vm</span><span class="p">.</span><span class="n">nova_instance</span><span class="p">.</span><span class="n">name</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">VM_to_raise_CPU_alarms</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这其中查询的图模式是从 <code>host_CPU_high</code> 这个 <code>nova_host</code> 向外经由 <code>contains</code> 这个关系指向 <code>vm</code> 这个 <code>nova_instance</code> 的：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="p">(</span><span class="n">vm</span><span class="p">:</span><span class="n">nova_instance</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="o">`</span><span class="n">contains</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">host_CPU_high</span><span class="p">:</span><span class="n">nova_host</span><span class="p">)</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>它的结果是：</p>
<table>
<thead>
<tr>
<th style="text-align:left">VM_to_raise_CPU_alarms</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">server-4</td>
</tr>
<tr>
<td style="text-align:left">server-3</td>
</tr>
<tr>
<td style="text-align:left">server-1</td>
</tr>
<tr>
<td style="text-align:left">server-0</td>
</tr>
</tbody>
</table>
<p>如果我们把查询改动一下，选择输出全路径，则可以看到这个信息传导的方向：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">vm</span><span class="p">:</span><span class="n">nova_instance</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="o">`</span><span class="n">contains</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">host_CPU_high</span><span class="p">:</span><span class="n">nova_host</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">host_CPU_high</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;node0&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>在 Explorer 中渲染，点击 N 跳检测：</p>
<video width="800" controls>
  <source src="https://user-images.githubusercontent.com/1651790/212291702-1754c9ce-f23f-4a68-930c-07a587c113be.mov" type="video/mp4"> 
</video>
<p>第一个例子比较简单，甚至不是很有必要用图的能力（这种因为一跳查询表结构中也是很轻松地，我们用一两个 nova API call 就可以搞定等价的信息获取了），这里只是一个例子，实际上我们在图上可以做很多更 Graphy（具有图属性的）、复杂、独特的工作，我们慢慢来看。</p>
<h3 id="网络可达检测" class="headerLink">
    <a href="#%e7%bd%91%e7%bb%9c%e5%8f%af%e8%be%be%e6%a3%80%e6%b5%8b" class="header-mark"></a>4.2 网络可达检测</h3><p>我们来考虑这样的场景，在 OpenStack 中，不同的主机可以连接到相同的子网（VPC），主机也可以连接到多个子网之中，这样，主机之间的网络连通性信息、与网络联通相关的推理、传导都可以在图上进行。</p>
<blockquote>
<p>注：在真实世界中，这里可能还要考虑 Security Group、Router、Switch 等因素，本利中我们用到的 OpenStack 是 L2 only 的 Setup，比较简化。</p>
</blockquote>
<p>获得与虚机 <code>server_a</code> 同一 VPC 的所有其他虚机看起来很容易表达了：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">server_a</span><span class="p">)</span><span class="o">--</span><span class="p">(:</span><span class="n">neutron_port</span><span class="p">)</span><span class="o">--</span><span class="p">(:</span><span class="n">neutron_network</span><span class="p">)</span><span class="o">--</span><span class="p">(:</span><span class="n">neutron_port</span><span class="p">)</span><span class="o">--</span><span class="p">(</span><span class="n">server_b</span><span class="p">:</span><span class="o">`</span><span class="n">nova_instance</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">server_a</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;server-0&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">server_b</span><span class="p">.</span><span class="n">nova_instance</span><span class="p">.</span><span class="n">name</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">L2_connected_server</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>结果如下：</p>
<table>
<thead>
<tr>
<th style="text-align:left">L2_connected_server</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">server-1</td>
</tr>
</tbody>
</table>
<p>看起来很初级呀，接下来我们再查询与虚机 <code>server_a</code> 同一 VPC、或者有可能通过跨网络虚机而互联的主机的所有其他虚机，这时候，我们除了共享 neutron network(VPC) 的情况，还要查询所有二层直连的虚机可能通过其他 VPC 连出去的的虚机，这里，我们用到了 <code>OPTIONAL MATCH</code> 的表达，表示可能匹配到的模式：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">server_a</span><span class="p">)</span><span class="o">--</span><span class="p">(:</span><span class="n">neutron_port</span><span class="p">)</span><span class="o">--</span><span class="p">(</span><span class="n">net</span><span class="p">:</span><span class="n">neutron_network</span><span class="p">)</span><span class="o">--</span><span class="p">(:</span><span class="n">neutron_port</span><span class="p">)</span><span class="o">--</span><span class="p">(</span><span class="n">server_b</span><span class="p">:</span><span class="o">`</span><span class="n">nova_instance</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">server_a</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;server-0&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">server_b</span><span class="p">)</span><span class="o">--</span><span class="p">()</span><span class="o">--</span><span class="p">(</span><span class="n">other_net</span><span class="p">:</span><span class="n">neutron_network</span><span class="p">)</span><span class="o">--</span><span class="p">(:</span><span class="n">neutron_port</span><span class="p">)</span><span class="o">--</span><span class="p">(</span><span class="n">server_c</span><span class="p">:</span><span class="o">`</span><span class="n">nova_instance</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WITH</span><span class="w"> </span><span class="n">server_a</span><span class="p">,</span><span class="w"> </span><span class="n">server_b</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">same_subnet_machines</span><span class="p">,</span><span class="w"> </span><span class="n">server_c</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">routeable_machines</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">routeable_machines</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">server_a</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">same_subnet_machines</span><span class="p">.</span><span class="n">nova_instance</span><span class="p">.</span><span class="n">name</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">L2_connected_server</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="n">routeable_machines</span><span class="p">.</span><span class="n">nova_instance</span><span class="p">.</span><span class="n">name</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">cross_vpc_server</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到结果里，跨网络潜在的相连主机还有 server-3：</p>
<table>
<thead>
<tr>
<th style="text-align:left">L2_connected_server</th>
<th style="text-align:left">cross_vpc_server</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">server-1</td>
<td style="text-align:left">server-3</td>
</tr>
</tbody>
</table>
<p>我们将其可视化，同样，修改输出为路径 <code>p</code> 和 <code>p1</code>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">server_a</span><span class="p">)</span><span class="o">--</span><span class="p">(:</span><span class="n">neutron_port</span><span class="p">)</span><span class="o">--</span><span class="p">(</span><span class="n">net</span><span class="p">:</span><span class="n">neutron_network</span><span class="p">)</span><span class="o">--</span><span class="p">(:</span><span class="n">neutron_port</span><span class="p">)</span><span class="o">--</span><span class="p">(</span><span class="n">server_b</span><span class="p">:</span><span class="o">`</span><span class="n">nova_instance</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">server_a</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;server-0&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="n">p1</span><span class="o">=</span><span class="p">(</span><span class="n">server_b</span><span class="p">)</span><span class="o">--</span><span class="p">()</span><span class="o">--</span><span class="p">(</span><span class="n">other_net</span><span class="p">:</span><span class="n">neutron_network</span><span class="p">)</span><span class="o">--</span><span class="p">(:</span><span class="n">neutron_port</span><span class="p">)</span><span class="o">--</span><span class="p">(</span><span class="n">server_c</span><span class="p">:</span><span class="o">`</span><span class="n">nova_instance</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="p">,</span><span class="w"> </span><span class="n">p1</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>它可能的连接路径一目了然</p>
<p><a class="lightgallery" href="/graph-enabled-infra-ops/cross_vpc_vm.webp" title="cross_vpc_vm" data-thumbnail="/graph-enabled-infra-ops/cross_vpc_vm.webp">
        
    </a></p>
<p>有了获得这些信息的能力，我们可以可编程地连接告警、状态、安全风控、网络等方方面面系统了，因为这不是本文的重点，这里就不加以赘述了，欢迎大家来 NebulaGraph 社区分享你们的图洞察使用方式。</p>
<p>接下来我们来看看存储相关的例子。</p>
<h3 id="镜像云盘快照的血缘" class="headerLink">
    <a href="#%e9%95%9c%e5%83%8f%e4%ba%91%e7%9b%98%e5%bf%ab%e7%85%a7%e7%9a%84%e8%a1%80%e7%bc%98" class="header-mark"></a>4.3 镜像、云盘、快照的血缘</h3><p>在基础设施中，云盘（iSCSI、Ceph、NFS）、镜像、快照之间有多重复杂的关系，比如：</p>
<ul>
<li>一个系统镜像可能从某一个虚拟机挂载的云盘或者一个快照创建</li>
<li>一个云盘可能是从一个系统镜像、一个快照或者另一个云盘创建</li>
<li>一个快照是从一个云盘创建的</li>
</ul>
<p>这种血缘信息的识别和管理是很有必要的。下边的查询可以获得给定的虚机 <code>server-0</code> 的所有存储血缘：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">server_a</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">attached</span><span class="o">`|</span><span class="n">created_from</span><span class="o">|</span><span class="n">used_by</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">step1</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">server_a</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;server-0&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="n">p1</span><span class="o">=</span><span class="p">(</span><span class="n">step1</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">created_from</span><span class="o">*</span><span class="mi">1</span><span class="p">..</span><span class="mi">5</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">step2</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="p">,</span><span class="w"> </span><span class="n">p1</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>我们可以看到结果中：</p>
<ul>
<li><code>server-0</code> 的启动镜像（这里它是从本地盘启动的，没有挂载云盘）是从 <code>volume-1</code> 创建的</li>
<li><code>volume-1</code> 是从 <code>cirros-0.5.2-x86_64-disk</code> 这个镜像创建的</li>
<li>此外，还有其他有分叉关系的存储资源和他们也息息相关</li>
</ul>
<p><a class="lightgallery" href="/graph-enabled-infra-ops/storage_lineage_0.webp" title="storage_lineage_0" data-thumbnail="/graph-enabled-infra-ops/storage_lineage_0.webp">
        
    </a></p>
<p>接下来，我们不只考虑存储资源，再看看涉及云盘（cinder_volume）挂载（attached）这层关系下的血缘关系：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">server_a</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">attached</span><span class="o">`|</span><span class="n">created_from</span><span class="o">|</span><span class="n">used_by</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">step1</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">server_a</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;server-4&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="n">p1</span><span class="o">=</span><span class="p">(</span><span class="n">step1</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">created_from</span><span class="o">|</span><span class="n">attached</span><span class="o">*</span><span class="mi">1</span><span class="p">..</span><span class="mi">5</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">step2</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="p">,</span><span class="w"> </span><span class="n">p1</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这次，我们可以从渲染图中读出这样的洞察：</p>
<ul>
<li><code>server-4</code> 的启动镜像（这里它是从本地盘启动的）是从 <code>volume-1</code> 创建的
<ul>
<li>而 <code>volume-1</code> 现在挂载在 <code>server-6</code> 上</li>
<li><code>volume-1</code> 是从 <code>cirros-0.5.2-x86_64-disk</code> 这个镜像创建的</li>
<li>同样 <code>cirros-0.5.2-x86_64-disk</code> 镜像被很多其他虚机在采用</li>
</ul>
</li>
<li><code>server-4</code> 同时挂载了数据盘 <code>volume-2</code>
<ul>
<li>而 <code>volume-2</code> 是一个多挂载的盘，它同时挂载在 <code>server-3</code> 之上</li>
<li><code>server-3</code> 的系统启动盘是从快照 <code>snapshot-202301111800-volume-1</code> 克隆创建的</li>
<li>快照 <code>snapshot-202301111800-volume-1</code> 是曾经从 <code>volume-1</code> 创建的</li>
<li><code>volume-1</code> 现在挂载在 <code>server-6</code> 上
<ul>
<li>快照不一定是从 <code>server-6</code> 而来，因为镜像可能被重新挂载过</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><a class="lightgallery" href="/graph-enabled-infra-ops/storage_lineage_1.webp" title="storage_lineage_1" data-thumbnail="/graph-enabled-infra-ops/storage_lineage_1.webp">
        
    </a></p>
<p>而这些血缘信息可以被用在资源生命周期管理、根因分析、安全告警、状态传导上，这里不加以赘述。</p>
<h3 id="高相关性虚机预警" class="headerLink">
    <a href="#%e9%ab%98%e7%9b%b8%e5%85%b3%e6%80%a7%e8%99%9a%e6%9c%ba%e9%a2%84%e8%ad%a6" class="header-mark"></a>4.4 高相关性虚机预警</h3><p>下面再给一个节点相似度的应用，我们可以在全图或者子图上，利用图算法找到与一个虚机在图上关系的维度上最相似的其他虚机，基于在这种相关性增加新的关系，并在关系上做风险事件预警。</p>
<p>这次的图算法应用中，我们按照一个典型的从[快速子图验证]到[全图生产应用的]工作流。</p>
<h4 id="在子图上快速验证浏览器内算法" class="headerLink">
    <a href="#%e5%9c%a8%e5%ad%90%e5%9b%be%e4%b8%8a%e5%bf%ab%e9%80%9f%e9%aa%8c%e8%af%81%e6%b5%8f%e8%a7%88%e5%99%a8%e5%86%85%e7%ae%97%e6%b3%95" class="header-mark"></a>4.4.1 在子图上快速验证：浏览器内算法</h4><p>首先，我们试着从 <code>server-0</code> 的三度子图上做算法的验证。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">GET SUBGRAPH 3 STEPS FROM &#34;server-0&#34;
</span></span><span class="line"><span class="cl">YIELD VERTICES AS nodes, EDGES AS relationships;
</span></span></code></pre></td></tr></table>
</div>
</div><p>将结果渲染在画布上，我们可以看到子图中包含了其他几个虚机：</p>
<p><a class="lightgallery" href="/graph-enabled-infra-ops/server_subgraph.webp" title="server_subgraph" data-thumbnail="/graph-enabled-infra-ops/server_subgraph.webp">
        
    </a></p>
<p>然后，我们利用 explorer 中的浏览器内图算法，可以非常方便地验证我们的想法，这里，我们使用 Jaccard SImilarity 相似性算法，进行 <code>server-0</code> 与 <code>server-1,server-3,server-4,server-6</code> 迭代分别得到相似性：</p>
<p><a class="lightgallery" href="/graph-enabled-infra-ops/jacc_sim_browser.webp" title="jacc_sim_browser" data-thumbnail="/graph-enabled-infra-ops/jacc_sim_browser.webp">
        
    </a></p>
<p>可以看出，在 3 步子图内，和 <code>server-0</code> 最近接的虚机是 <code>server-4</code>。进一步我们可以简单在子图上看看两者之间的路径作为相似性的解释：</p>
<p><a class="lightgallery" href="/graph-enabled-infra-ops/sim_explain.webp" title="sim_explain" data-thumbnail="/graph-enabled-infra-ops/sim_explain.webp">
        
    </a></p>
<p>在这个可解释结果中，我们知道 <code>server-0</code> 与 <code>server-4</code> 相似的原因可能是：</p>
<ul>
<li>坐落在同一个宿主机：node-0</li>
<li>使用同一个镜像：cirros_mod_from_volume-1</li>
</ul>
<p>如此，我们最终落地的预警机制可能是，当 <code>server-0</code> 出现某一问题、告警时候，给相似的 server-4 也设定预警，预警理由就是它们在同样主机、同样镜像。</p>
<h4 id="落地算法为应用workflowanalytics" class="headerLink">
    <a href="#%e8%90%bd%e5%9c%b0%e7%ae%97%e6%b3%95%e4%b8%ba%e5%ba%94%e7%94%a8workflowanalytics" class="header-mark"></a>4.4.2 落地算法为应用：Workflow+Analytics</h4><p>有了前边的快速实验，我们可以借助 workflow + NebulaGraph Analytics 把它落地为全图上的算法，利用 Analytics 分布式能力去执行。</p>
<p>在生产上，我们利用 Workflow 的 DAG 编排能力创建两个前后相连的任务：</p>
<ul>
<li>取临近虚机</li>
<li>全图算相似度</li>
</ul>
<p>第一个任务如下，它实时从给定的虚机（这里写死了 server-0，但是 workflow 可以把这里作为参数化，并封装任务为可以被 API 触发的异步服务）：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="o">*</span><span class="mi">1</span><span class="p">..</span><span class="mi">5</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">nova_instance</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;server-0&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">m</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="k">distinct</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">m</span><span class="p">)</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这里 Query job 我们输出待比较的其他虚机的 vid。</p>
<p><a class="lightgallery" href="/graph-enabled-infra-ops/query_sim_server.webp" title="query_sim_server" data-thumbnail="/graph-enabled-infra-ops/query_sim_server.webp">
        
    </a></p>
<p>接着，JaccardSImilarity job 中，我们选择 ids1 为 server-0（这里如上，上线时是参数化的），ids2 从上游取（前边的 Query job），选择在 openstack 全图扫描所有类型的边。<a class="lightgallery" href="/graph-enabled-infra-ops/jacc_sim_workflow.webp" title="jacc_sim_workflow" data-thumbnail="/graph-enabled-infra-ops/jacc_sim_workflow.webp">
        
    </a></p>
<p>保存、运行，我们可以看到，结果如下，区别是这次它运算了更多的目标虚机，并且迭代作用范围是全图而非一个子图，可以看到结果是一致的，这是因为子图上关联度大的点和相近的边在 Jaccard 算法里起到了更主要的作用。</p>
<p><a class="lightgallery" href="/graph-enabled-infra-ops/jacc_result.webp" title="jacc_result" data-thumbnail="/graph-enabled-infra-ops/jacc_result.webp">
        
    </a></p>
<h3 id="安全相关场景" class="headerLink">
    <a href="#%e5%ae%89%e5%85%a8%e7%9b%b8%e5%85%b3%e5%9c%ba%e6%99%af" class="header-mark"></a>4.5 安全相关场景</h3><p>基础设施资源中的关联关系和金融、内容系统、电商领域的风控场景有相似的地方，很多场景本质上利用到了图谱关系中的知识，在图库上实时获取这些复杂多跳天然带有可解释性的安全洞察非常适合。</p>
<h4 id="秘钥泄漏风控分析" class="headerLink">
    <a href="#%e7%a7%98%e9%92%a5%e6%b3%84%e6%bc%8f%e9%a3%8e%e6%8e%a7%e5%88%86%e6%9e%90" class="header-mark"></a>4.5.1 秘钥泄漏风控分析</h4><p>先看一个秘钥泄漏的场景：假设 <code>key-0</code> 被安全部门确定被泄漏了，我们可以在毫秒时间内获得如下查询：</p>
<ul>
<li>直接采用了密钥的虚机</li>
<li>与采用秘钥的虚机网络直连的机器</li>
<li>与采用秘钥的虚机跨网络相连的机器</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">key_leaked</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">used_by</span><span class="o">`</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">involved_server</span><span class="p">:</span><span class="n">nova_instance</span><span class="p">)</span><span class="o">--</span><span class="p">(:</span><span class="n">neutron_port</span><span class="p">)</span><span class="o">--</span><span class="p">(</span><span class="n">net</span><span class="p">:</span><span class="n">neutron_network</span><span class="p">)</span><span class="o">--</span><span class="p">(:</span><span class="n">neutron_port</span><span class="p">)</span><span class="o">--</span><span class="p">(</span><span class="n">server_b</span><span class="p">:</span><span class="n">nova_instance</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">key_leaked</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;key-0&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">server_b</span><span class="p">)</span><span class="o">--</span><span class="p">()</span><span class="o">--</span><span class="p">(</span><span class="n">other_net</span><span class="p">:</span><span class="n">neutron_network</span><span class="p">)</span><span class="o">--</span><span class="p">(:</span><span class="n">neutron_port</span><span class="p">)</span><span class="o">--</span><span class="p">(</span><span class="n">server_c</span><span class="p">:</span><span class="n">nova_instance</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WITH</span><span class="w"> </span><span class="n">involved_server</span><span class="p">,</span><span class="w"> </span><span class="n">server_b</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">same_subnet_machines</span><span class="p">,</span><span class="w"> </span><span class="n">server_c</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">cross_net_machines</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">WHERE</span><span class="w"> </span><span class="n">cross_net_machines</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">involved_server</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">involved_server</span><span class="p">.</span><span class="n">nova_instance</span><span class="p">.</span><span class="n">name</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">with_key</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">same_subnet_machines</span><span class="p">.</span><span class="n">nova_instance</span><span class="p">.</span><span class="n">name</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">l2_vms</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">cross_net_machines</span><span class="p">.</span><span class="n">nova_instance</span><span class="p">.</span><span class="n">name</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">cross_vpc_vms</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>贴一下部分结果，我们知道 server-4 采用了这个 keypair，并且 server-6 和它在同一个网络，同时，有一定可能，通过 server-6，server-1,2,0,5 也受到了威胁、影响，相关的机器可以被触发不同级别的告警来降低安全事故的影响。</p>
<table>
<thead>
<tr>
<th style="text-align:left">with_key</th>
<th style="text-align:left">l2_vms</th>
<th style="text-align:left">cross_vpc_vms</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">server-4</td>
<td style="text-align:left">server-6</td>
<td style="text-align:left">server-1</td>
</tr>
<tr>
<td style="text-align:left">server-4</td>
<td style="text-align:left">server-6</td>
<td style="text-align:left">server-2</td>
</tr>
<tr>
<td style="text-align:left">server-4</td>
<td style="text-align:left">server-6</td>
<td style="text-align:left">server-0</td>
</tr>
<tr>
<td style="text-align:left">server-4</td>
<td style="text-align:left">server-6</td>
<td style="text-align:left">server-5</td>
</tr>
</tbody>
</table>
<p>这个查询改造为可视化结果：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">key_leaked</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">used_by</span><span class="o">`</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">involved_server</span><span class="p">:</span><span class="n">nova_instance</span><span class="p">)</span><span class="o">--</span><span class="p">(:</span><span class="n">neutron_port</span><span class="p">)</span><span class="o">--</span><span class="p">(</span><span class="n">net</span><span class="p">:</span><span class="n">neutron_network</span><span class="p">)</span><span class="o">--</span><span class="p">(:</span><span class="n">neutron_port</span><span class="p">)</span><span class="o">--</span><span class="p">(</span><span class="n">server_b</span><span class="p">:</span><span class="n">nova_instance</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">key_leaked</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;key-0&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="n">p1</span><span class="o">=</span><span class="p">(</span><span class="n">server_b</span><span class="p">)</span><span class="o">--</span><span class="p">()</span><span class="o">--</span><span class="p">(</span><span class="n">other_net</span><span class="p">:</span><span class="n">neutron_network</span><span class="p">)</span><span class="o">--</span><span class="p">(:</span><span class="n">neutron_port</span><span class="p">)</span><span class="o">--</span><span class="p">(</span><span class="n">server_c</span><span class="p">:</span><span class="n">nova_instance</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="p">,</span><span class="n">p1</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>在 explorer 里 应用 Dagre-LR 的布局，一关联关系很清晰的被展示出来，也许可以考虑把它引用在安全事故的报告分发给虚机租户。</p>
<p><a class="lightgallery" href="/graph-enabled-infra-ops/key_leaked.webp" title="key_leaked" data-thumbnail="/graph-enabled-infra-ops/key_leaked.webp">
        
    </a></p>
<h4 id="镜像云盘漏洞范围分析" class="headerLink">
    <a href="#%e9%95%9c%e5%83%8f%e4%ba%91%e7%9b%98%e6%bc%8f%e6%b4%9e%e8%8c%83%e5%9b%b4%e5%88%86%e6%9e%90" class="header-mark"></a>4.5.2 镜像、云盘漏洞范围分析</h4><p>类似的，一个镜像被扫出漏洞，我们可以瞬间查到涉及到的资源，并做出相应</p>
<ul>
<li>镜像文件有漏洞</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">image_risky</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">created_from</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">step1</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">image_risky</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;cirros-0.5.2-x86_64-disk&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="n">p1</span><span class="o">=</span><span class="p">(</span><span class="n">step1</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">created_from</span><span class="o">*</span><span class="mi">1</span><span class="p">..</span><span class="mi">5</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">step2</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="p">,</span><span class="w"> </span><span class="n">p1</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><a class="lightgallery" href="/graph-enabled-infra-ops/image_vulnerability.webp" title="image_vulnerability" data-thumbnail="/graph-enabled-infra-ops/image_vulnerability.webp">
        
    </a></p>
<ul>
<li>一个云盘有漏洞</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">volume_risky</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">created_from</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">step1</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">volume_risky</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;volume-1&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="n">p1</span><span class="o">=</span><span class="p">(</span><span class="n">step1</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">created_from</span><span class="o">*</span><span class="mi">1</span><span class="p">..</span><span class="mi">5</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">step2</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="p">,</span><span class="w"> </span><span class="n">p1</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><a class="lightgallery" href="/graph-enabled-infra-ops/volume_vulnerability.webp" title="volume_vulnerability" data-thumbnail="/graph-enabled-infra-ops/volume_vulnerability.webp">
        
    </a></p>
<h4 id="潜在宿主机逃离影响范围分析" class="headerLink">
    <a href="#%e6%bd%9c%e5%9c%a8%e5%ae%bf%e4%b8%bb%e6%9c%ba%e9%80%83%e7%a6%bb%e5%bd%b1%e5%93%8d%e8%8c%83%e5%9b%b4%e5%88%86%e6%9e%90" class="header-mark"></a>4.5.3 潜在宿主机逃离影响范围分析</h4><p>最后，我们讨论一个比较严重的安全问题：宿主机逃离。</p>
<p>在极端的情况下如果在我们得到消息，<code>server-0</code> 发生了有可能影响宿主机的安全时间的时候，仅仅关闭这个宿主机是不够的，受影响的范围可能已经扩大了，然而，我们不可能因为这样关闭整个机房，所以，利用图谱辅助找出受影响范围会有一些帮助。</p>
<p>下面的查询模式是：</p>
<ul>
<li>找出可能被影响的子网（VPC），标记最高级别风险子网为后续定位做准备</li>
<li>找到可能被控制了的宿主机</li>
<li>从宿主机触发，找出同主机的其他虚机</li>
<li>从其他虚机触发，找到它们的子网（VPC）</li>
<li>从其他虚机触发，找到可能已经被影响的网盘（防止被挂载到其他机器，扩大影响）</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">server_escaping_hypervisor</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="o">`</span><span class="n">contains</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">hypervisor_compromised</span><span class="p">:</span><span class="n">nova_host</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">server_escaping_hypervisor</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;server-0&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">server_escaping_hypervisor</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">attached</span><span class="p">]</span><span class="o">-</span><span class="p">(:</span><span class="n">neutron_port</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">contains</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">impacted_subnet_high</span><span class="p">:</span><span class="n">neutron_network</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">hypervisor_compromised</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">contains</span><span class="o">`</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">server_same_host</span><span class="p">:</span><span class="n">nova_instance</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">server_same_host</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">attached</span><span class="p">]</span><span class="o">-</span><span class="p">(:</span><span class="n">neutron_port</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">contains</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">impacted_subnet</span><span class="p">:</span><span class="n">neutron_network</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">server_same_host</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">attached</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">impacted_volume</span><span class="p">:</span><span class="n">cinder_volume</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">impacted_subnet_high</span><span class="p">.</span><span class="n">neutron_network</span><span class="p">.</span><span class="n">name</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">impacted_subnet_high</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="n">hypervisor_compromised</span><span class="p">.</span><span class="n">nova_host</span><span class="p">.</span><span class="n">name</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">hypervisor_compromised</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="n">impacted_subnet</span><span class="p">.</span><span class="n">neutron_network</span><span class="p">.</span><span class="n">name</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">impacted_subnet</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="p">[</span><span class="n">server_same_host</span><span class="p">.</span><span class="n">nova_instance</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">server_same_host</span><span class="p">.</span><span class="n">nova_instance</span><span class="p">.</span><span class="n">instance_name</span><span class="p">]</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">server_same_host</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="n">impacted_volume</span><span class="p">.</span><span class="n">cinder_volume</span><span class="p">.</span><span class="n">name</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">impacted_volume</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>结果中列出了 server-0 被控制之后，考虑宿主机逃离的情况下可能受影响的扩散范围。</p>
<table>
<thead>
<tr>
<th style="text-align:left">impacted_subnet_high</th>
<th style="text-align:left">hypervisor_compromised</th>
<th style="text-align:left">impacted_subnet</th>
<th style="text-align:left">server_same_host</th>
<th style="text-align:left">impacted_volume</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">shared</td>
<td style="text-align:left">node0</td>
<td style="text-align:left">shared</td>
<td style="text-align:left">[&ldquo;server-0&rdquo;, &ldquo;instance-00000001&rdquo;]</td>
<td style="text-align:left"><strong>Empty</strong></td>
</tr>
<tr>
<td style="text-align:left">shared</td>
<td style="text-align:left">node0</td>
<td style="text-align:left">shared</td>
<td style="text-align:left">[&ldquo;server-1&rdquo;, &ldquo;instance-00000002&rdquo;]</td>
<td style="text-align:left">ffaeb199-47f4-4d95-89b2-97fba3c1bcfe</td>
</tr>
<tr>
<td style="text-align:left">shared</td>
<td style="text-align:left">node0</td>
<td style="text-align:left">private</td>
<td style="text-align:left">[&ldquo;server-1&rdquo;, &ldquo;instance-00000002&rdquo;]</td>
<td style="text-align:left">ffaeb199-47f4-4d95-89b2-97fba3c1bcfe</td>
</tr>
<tr>
<td style="text-align:left">shared</td>
<td style="text-align:left">node0</td>
<td style="text-align:left">private</td>
<td style="text-align:left">[&ldquo;server-3&rdquo;, &ldquo;instance-00000005&rdquo;]</td>
<td style="text-align:left">c9db7c2e-c712-49d6-8019-14b82de8542d</td>
</tr>
<tr>
<td style="text-align:left">shared</td>
<td style="text-align:left">node0</td>
<td style="text-align:left">private</td>
<td style="text-align:left">[&ldquo;server-3&rdquo;, &ldquo;instance-00000005&rdquo;]</td>
<td style="text-align:left">volume-2</td>
</tr>
<tr>
<td style="text-align:left">shared</td>
<td style="text-align:left">node0</td>
<td style="text-align:left">public</td>
<td style="text-align:left">[&ldquo;server-4&rdquo;, &ldquo;instance-00000006&rdquo;]</td>
<td style="text-align:left">volume-2</td>
</tr>
</tbody>
</table>
<p>咱们再看看它的可视化结果。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">server_escaping_hypervisor</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="o">`</span><span class="n">contains</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">hypervisor_compromised</span><span class="p">:</span><span class="n">nova_host</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">server_escaping_hypervisor</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;server-0&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="n">p0</span><span class="o">=</span><span class="p">(</span><span class="n">server_escaping_hypervisor</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">attached</span><span class="p">]</span><span class="o">-</span><span class="p">(:</span><span class="n">neutron_port</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">contains</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">impacted_subnet_high</span><span class="p">:</span><span class="n">neutron_network</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="n">p1</span><span class="o">=</span><span class="p">(</span><span class="n">hypervisor_compromised</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">contains</span><span class="o">`</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">server_same_host</span><span class="p">:</span><span class="n">nova_instance</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="n">p2</span><span class="o">=</span><span class="p">(</span><span class="n">server_same_host</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">attached</span><span class="p">]</span><span class="o">-</span><span class="p">(:</span><span class="n">neutron_port</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">contains</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">impacted_subnet</span><span class="p">:</span><span class="n">neutron_network</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="n">p3</span><span class="o">=</span><span class="p">(</span><span class="n">server_same_host</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">attached</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">impacted_volume</span><span class="p">:</span><span class="n">cinder_volume</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="p">,</span><span class="n">p0</span><span class="p">,</span><span class="n">p1</span><span class="p">,</span><span class="n">p2</span><span class="p">,</span><span class="n">p3</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>选择 Dagre 布局之后，可以比较清晰看出影响资源的范围，从这些可能受影响的虚机、网络、网盘出发，可以进一步采取需要的措施了。</p>
<p><a class="lightgallery" href="/graph-enabled-infra-ops/hypervisor_escape.webp" title="hypervisor_escape" data-thumbnail="/graph-enabled-infra-ops/hypervisor_escape.webp">
        
    </a></p>
<h3 id="重点关注资源检测" class="headerLink">
    <a href="#%e9%87%8d%e7%82%b9%e5%85%b3%e6%b3%a8%e8%b5%84%e6%ba%90%e6%a3%80%e6%b5%8b" class="header-mark"></a>4.6 重点关注资源检测</h3><p>最后，利用 Betweenness Centrality 算法，我们可以得出基础设施中影响面大的那些，”脆弱环节“，这些资源不一定真的处在危险的状态，只是说，它们处在了比较重要的资源之间的交汇处，一旦它们出问题，出问题的代价可能会非常大。</p>
<p>识别出这样的资源之后我们可以考虑：</p>
<ul>
<li>有针对性采用更激进、昂贵的健康检查策略；</li>
<li>设定更高的支持、关切级别；</li>
<li>主动迁移相关联的资源以降低”脆弱环节“对整体基础设施可用性的影响范围；</li>
</ul>
<p>这次，我们就只在浏览器内部的子图上做算法流程验证，读者朋友们可以自己试着利用开源的 NebulaGraph Algorithm 或者付费的 NebulaGraph Workflow+Analytics 做全图上的等价操作。</p>
<p>首先，我们在前边用过的方式去扫描图上 1000 个点，并且从其出发，跳一跳，获得一个比较随机的子图，在我们当前的数据集下，这实际上捞取了全图的数据：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">MATCH (n) WITH n LIMIT 1000
</span></span><span class="line"><span class="cl">OPTIONAL MATCH p=(n)--()
</span></span><span class="line"><span class="cl">RETURN p, n
</span></span></code></pre></td></tr></table>
</div>
</div><p>在其之上，我们运行 Betweenness Centrality 之后，得到 <code>node0</code> 是分值最大的”脆弱一环“，的确，它是我们当前实验中负载最大的宿主机，可以想象它确实是故障之后全局影响最大的一个资源。</p>
<p><a class="lightgallery" href="/graph-enabled-infra-ops/bwteeness_centrality.webp" title="bwteeness_centrality" data-thumbnail="/graph-enabled-infra-ops/bwteeness_centrality.webp">
        
    </a></p>
<h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>5 总结</h2><p>在海量数据、企业云、混合云的复杂基础设施运维场景下，利用图数据库图算法的能力做高效的辅助运维工作是一个十分值得的尝试与技术投资。</p>
<p>NebulaGraph 作为高性能、开源、分布式的新一代云原生图数据库，是一个很值得考虑的图基础设施选型目标。</p>
<p>欢迎大家在文末留言讨论，本文的可复现环境和示例的 ETL 管道的代码、示例数据全都在 <a href="https://github.com/wey-gu/openstack-graph/" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/openstack-graph/</a> 开源，欢迎大家来一起完善。</p>
<blockquote>
<p>题图版权：<a href="https://unsplash.com/photos/Wv2U24G2F78" target="_blank" rel="noopener noreferrer">Ivan</a></p>
</blockquote>]]></description>
</item><item>
    <title>基于开源技术栈的数据血缘、治理参考解决方案</title>
    <link>https://siwei.io/data-lineage-oss-ref-solution/</link>
    <pubDate>Fri, 25 Nov 2022 16:20:43 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/data-lineage-oss-ref-solution/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/data-lineage-oss-ref-solution/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>也许我们没有必要从头在 NebulaGraph 上搭建自己的数据血缘项目，本文分享如何用开源、现代的 DataOps、ETL、Dashboard、元数据、数据血缘管理系统构建大数据治理基础设施</p>
</blockquote>
<h2 id="元数据治理系统" class="headerLink">
    <a href="#%e5%85%83%e6%95%b0%e6%8d%ae%e6%b2%bb%e7%90%86%e7%b3%bb%e7%bb%9f" class="header-mark"></a>1 元数据治理系统</h2><p><strong>元数据治理</strong>系统是一个提供了所有数据在哪、它们的格式化方式、生成、转换、依赖、呈现和所属的<strong>一站式视图</strong>。</p>
<p>元数据治理系统是所有数据仓库、数据库、表、仪表板、ETL 作业等的<strong>目录接口</strong>（catalog），有了它，我们就不用在群里喊“大家好，我可以更改这个表的 schema 吗？”， “请问谁知道我如何找到 table-view-foo-bar 的原始数据？”，一个成熟的数据治理方案中的元数据治理系统，对成规模的数据团队来说非常必要。</p>
<p>对于另一个词：<strong>数据血缘</strong>则是众多需要管理的元数据之一，例如，某些 Dashboard 是 某一个 Table View 的下游，而这个 Table View 又是从另外两个上游的表 JOIN 而来两。 我们显然应该清晰的掌握、管理这些信息，去构建一个可信、可控的系统和数据质量控制体系。</p>
<h2 id="参考解决方案" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88" class="header-mark"></a>2 参考解决方案</h2><h3 id="方案的动机" class="headerLink">
    <a href="#%e6%96%b9%e6%a1%88%e7%9a%84%e5%8a%a8%e6%9c%ba" class="header-mark"></a>2.1 方案的动机</h3><p>元数据和数据血缘本质上非常适合图数据建模、图数据库的场景。这里典型的查询就是面向图关系的查询了，像“查找每个给定组件（即表）的所有 n 深度数据血缘”就是一个 NebulaGraph 中的<code>FIND ALL PATH</code> 查询。</p>
<p>作为 NebulaGraph 社区中的一员，我发现人们在论坛、群里讨论的查询和图建模总能看出来很多人都在 NebulaGraph 上从头搭建自己的数据血缘系统，而这些工作看起来大多数都是重复造轮子（而且轮子并不容易造）。</p>
<p>我们来看看这样的元数据治理系统的轮子里，都需要那些功能组件：</p>
<ul>
<li>元数据 extractor
<ul>
<li>这部分需要从数据栈的不同方（如数据库、数仓、Dashboard，甚至从 ETL Pipeline 和应用、服务等等）中以拉或者推的方式获取。</li>
</ul>
</li>
<li>元数据存储
<ul>
<li>可以存在数据库、图数据库里，或者有时候存成超大的 JSON manifest 文件都行</li>
</ul>
</li>
<li>元数据目录接口系统（Catalog）
<ul>
<li>提供 API 和/或 GUI 界面以读取/写入元数据和数据血缘的系统</li>
</ul>
</li>
</ul>
<p>在 NebulaGraph 社区中，我看到不少人因为提问的查询和建模中明显有数据血缘的痕迹，意识到大家都在从头搭建数据血缘系统。考虑到系统中元数据的提取对象都是从各种知名数据库、数仓、最终的需求也大相径庭，这种重复的开发、研究、探索是一种大大的浪费。</p>
<p>所以，我准备搭建一个能够启发大家的参考数据血缘、治理方案，利用到市面上最好的开源项目。希望能让打算在 NebulaGraph 上定义和迭代自己的 Graph Model 并创建内部元数据和 pipeline 的人可以从这个项目中受益，从而拥有一个相对完善、设计精美的开箱即用的元数据治理系统，和相对更完善的图模型。</p>
<p>我尽量把这个方案做的完备、端到端（不只有元数据管理），希望也能为考虑做基于图做数据治理的新手一些启发和参考。</p>
<p>下图是整个方案的简单示意图：</p>
<p>其中上方是元数据的来源与导入、下方是元数据的存储与展示、发现。</p>
<p><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168849779-4826f50e-ff87-4e78-b17f-076f91182c43.svg" title="diagram-of-ref-project" data-thumbnail="https://user-images.githubusercontent.com/1651790/168849779-4826f50e-ff87-4e78-b17f-076f91182c43.svg">
        
    </a></p>
<h3 id="技术栈介绍" class="headerLink">
    <a href="#%e6%8a%80%e6%9c%af%e6%a0%88%e4%bb%8b%e7%bb%8d" class="header-mark"></a>2.2 技术栈介绍</h3><p>下边介绍一下其中的每一部分。</p>
<h4 id="数据库和数仓" class="headerLink">
    <a href="#%e6%95%b0%e6%8d%ae%e5%ba%93%e5%92%8c%e6%95%b0%e4%bb%93" class="header-mark"></a>2.2.1 数据库和数仓</h4><p>为了处理和使用原始和中间数据，这里一定涉及至少一个数据库或者数仓。</p>
<p>它可以是 Hive、Apache Delta、TiDB、Cassandra、MySQL 或 Postgres，在这个参考项目中，我们选一个简单、流行的 Postgres。</p>
<p>✅ - 数据仓库：Postgres</p>
<h4 id="数据运维-dataops" class="headerLink">
    <a href="#%e6%95%b0%e6%8d%ae%e8%bf%90%e7%bb%b4-dataops" class="header-mark"></a>2.2.2 数据运维 DataOps</h4><p>我们应该有某种 DataOps 的方案，让 Pipeline 和环境具有可重复性、可测试性和版本控制性。</p>
<p>在这里，我们使用了 GitLab 创建的 <a href="https://gitlab.com/meltano/meltano" target="_blank" rel="noopener noreferrer">Meltano</a>。</p>
<p>Meltano 是一个 just-work 的 DataOps 平台，它以一种神奇而优雅的方式将 <a href="https://singer.io/" target="_blank" rel="noopener noreferrer">Singer</a> 作为 EL 和 <a href="https://getdbt.com/" target="_blank" rel="noopener noreferrer">dbt</a> 作为 T 连接起来，它还连接到其他一些 dataInfra 实用程序，例如 Apache Superset 和 Apache Airflow 等。</p>
<p>至此，我们又纳入了一个成员：</p>
<p>✅ - GitOps：Meltano <a href="https://gitlab.com/meltano/meltano" target="_blank" rel="noopener noreferrer">https://gitlab.com/meltano/meltano</a></p>
<h4 id="etl" class="headerLink">
    <a href="#etl" class="header-mark"></a>2.2.3 ETL</h4><p>如前边提到，我们还利用 <a href="https://singer.io/" target="_blank" rel="noopener noreferrer">Singer</a> 与 Meltano 一起将来自许多不同数据源的数据 E（提取）和 L（加载）数据目标，并使用 <a href="https://getdbt.com/" target="_blank" rel="noopener noreferrer">dbt</a> 作为 Transform 的平台。</p>
<p>✅ - EL：Singer <a href="https://singer.io/" target="_blank" rel="noopener noreferrer">https://singer.io/</a></p>
<p>✅ - T: dbt <a href="https://getdbt.com/" target="_blank" rel="noopener noreferrer">https://getdbt.com/</a></p>
<h4 id="数据可视化" class="headerLink">
    <a href="#%e6%95%b0%e6%8d%ae%e5%8f%af%e8%a7%86%e5%8c%96" class="header-mark"></a>2.2.4 数据可视化</h4><p>在数据之上创建 Dashboard、图表和表格来获得洞察是很直接的需求（可以想象为想象大数据之上的 excel 图标功能）。</p>
<p><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/172800854-8e01acae-696d-4e07-8e3e-a7d34dec8278.png" title="https://user-images.githubusercontent.com/1651790/172800854-8e01acae-696d-4e07-8e3e-a7d34dec8278.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/172800854-8e01acae-696d-4e07-8e3e-a7d34dec8278.png">
        
    </a></p>
<p><a href="https://superset.apache.org/" target="_blank" rel="noopener noreferrer">Apache Superset</a> 是我很喜欢的开源数据可视化项目，我准备用它来作为被治理管理的目标之一，同时，也会利用它的可视化作为元数据洞察功能的一部分。</p>
<p>✅ - Dashboard：Apache Superset <a href="https://superset.apache.org/" target="_blank" rel="noopener noreferrer">https://superset.apache.org/</a></p>
<h4 id="任务编排dag-job-orchestration" class="headerLink">
    <a href="#%e4%bb%bb%e5%8a%a1%e7%bc%96%e6%8e%92dag-job-orchestration" class="header-mark"></a>2.2.5 任务编排（DAG Job Orchestration）</h4><p>在大多数情况下，我们的 DataOps 作业、任务会增长到需要一个编排系统的规模，我们可以用 <a href="https://airflow.apache.org/" target="_blank" rel="noopener noreferrer">Apache Airflow</a> 来负责这一块。</p>
<p>✅ - DAG：Apache Airflow <a href="https://airflow.apache.org/" target="_blank" rel="noopener noreferrer">https://airflow.apache.org/</a></p>
<h4 id="元数据治理" class="headerLink">
    <a href="#%e5%85%83%e6%95%b0%e6%8d%ae%e6%b2%bb%e7%90%86" class="header-mark"></a>2.2.6 元数据治理</h4><p>随着越来越多的组件和数据被引入数据基础设施，在数据库、表、数据建模(schema)、Dashboard、DAG（编排系统中的有向无环图）、应用与服务的所有生命周期中都将存在海量的元数据，需要对它们的管理员和团队进行协同管理、连接和发现。</p>
<p><a href="https://www.amundsen.io/amundsen/" target="_blank" rel="noopener noreferrer">Linux Foundation Amundsen</a> 是我认为可以解决这个问题的最佳项目之一。</p>
<p><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/172801018-ecd67fa9-2743-451f-8734-b14f2a814199.png" title="https://user-images.githubusercontent.com/1651790/172801018-ecd67fa9-2743-451f-8734-b14f2a814199.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/172801018-ecd67fa9-2743-451f-8734-b14f2a814199.png">
        
    </a></p>
<p>✅ - 数据发现：Linux Foundation Amundsen <a href="https://www.amundsen.io/amundsen/" target="_blank" rel="noopener noreferrer">https://www.amundsen.io/amundsen/</a></p>
<p>Amundsen 用图数据库为事实源（single source of truth）以加速多跳查询，Elastic Search 为全文搜索引擎，它能对所有元数据及其血缘进行了顺滑的处理还提供了优雅的 UI 和 API。</p>
<p>Amundsen 支持多种图数据库为后端，这里咱们用 <a href="https://nebula-graph.com.cn" target="_blank" rel="noopener noreferrer">NebulaGraph</a>。</p>
<p>✅ - 全文搜索：Elastic Search</p>
<p>✅ - 图数据库：NebulaGraph</p>
<p>现在，所有组件都齐活了，开始组装它们吧。</p>
<h2 id="环境搭建与各组件初识" class="headerLink">
    <a href="#%e7%8e%af%e5%a2%83%e6%90%ad%e5%bb%ba%e4%b8%8e%e5%90%84%e7%bb%84%e4%bb%b6%e5%88%9d%e8%af%86" class="header-mark"></a>3 环境搭建与各组件初识</h2><p>整个项目方案都是开源的，大家可以在这里找到它的所有细节：</p>
<ul>
<li><a href="https://github.com/wey-gu/data-lineage-ref-solution" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/data-lineage-ref-solution</a></li>
</ul>
<p>整个项目大家的实验中我遵循尽量干净、鼓励的原则，需要假设在一个 unix-like 的系统上运行，有互联网和 Docker-Compose。</p>
<blockquote>
<p>注：参考 <a href="https://docs.docker.com/compose/install/" target="_blank" rel="noopener noreferrer">https://docs.docker.com/compose/install/</a> 在继续之前安装 Docker 和 Docker Compose。</p>
</blockquote>
<p>这里我们在 Ubuntu 20.04 LTS X86_64 上运行它，但在其他发行版或 Linux 版本上应该也没有问题。</p>
<h3 id="运行一个数仓数据库" class="headerLink">
    <a href="#%e8%bf%90%e8%a1%8c%e4%b8%80%e4%b8%aa%e6%95%b0%e4%bb%93%e6%95%b0%e6%8d%ae%e5%ba%93" class="header-mark"></a>3.1 运行一个数仓、数据库</h3><p>首先，安装 Postgres 作为我们的数仓。</p>
<p>这个单行命令会创建一个使用 docker 在后台运行的 Postgres，进程关闭之后容器不会残留而是被清理掉（因为参数<code>--rm</code>）。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run --rm --name postgres <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -e <span class="nv">POSTGRES_PASSWORD</span><span class="o">=</span>lineage_ref <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -e <span class="nv">POSTGRES_USER</span><span class="o">=</span>lineage_ref <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -e <span class="nv">POSTGRES_DB</span><span class="o">=</span>warehouse -d <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -p 5432:5432 postgres
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后我们可以使用 Postgres CLI 或 GUI 客户端来验证它。</p>
<blockquote>
<p>提示：可以用 VS Code 插件：<a href="https://marketplace.visualstudio.com/items?itemName=mtxr.sqltools" target="_blank" rel="noopener noreferrer">SQL TOOLS</a> 快速以 GUI 方式连接到数据库（支持 MariaDB、Postgres 、Cassandra 等）</p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=mtxr.sqltools" target="_blank" rel="noopener noreferrer">https://marketplace.visualstudio.com/items?itemName=mtxr.sqltools</a></p>
</blockquote>
<h3 id="dataops-工具链部署" class="headerLink">
    <a href="#dataops-%e5%b7%a5%e5%85%b7%e9%93%be%e9%83%a8%e7%bd%b2" class="header-mark"></a>3.2 DataOps 工具链部署</h3><p>然后，安装有机结合了 Singler 和 dbt 的 Meltano。</p>
<p>Meltano 帮助我们管理 ETL 工具（作为插件）及其所有配置和 pipeline。 这些元信息位于 meltano 配置及其系统数据库（https://docs.meltano.com/concepts/project#system-database）中，其中配置是基于文件的（可以使用 GitOps 管理），它的默认系统数据库是 SQLite。</p>
<h4 id="安装-meltano" class="headerLink">
    <a href="#%e5%ae%89%e8%a3%85-meltano" class="header-mark"></a>3.2.1 安装 Meltano</h4><p>使用 Meltano 的工作流是启动一个“meltano 项目”并开始将 E、L 和 T 添加到配置文件中。 项目的启动只需要一个 CLI 命令调用：<code>meltano init yourprojectname</code>，在那之前，可以先用 Python 的包管理器：pip 或者 Docker 镜像安装 Meltano：</p>
<ul>
<li>在 python 虚拟环境中使用 pip 安装 Meltano：</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkdir .venv
</span></span><span class="line"><span class="cl"><span class="c1"># example in a debian flavor Linux distro</span>
</span></span><span class="line"><span class="cl">sudo apt-get install python3-dev python3-pip python3-venv python3-wheel -y
</span></span><span class="line"><span class="cl">python3 -m venv .venv/meltano
</span></span><span class="line"><span class="cl"><span class="nb">source</span> .venv/meltano/bin/activate
</span></span><span class="line"><span class="cl">python3 -m pip install wheel
</span></span><span class="line"><span class="cl">python3 -m pip install meltano
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># init a project</span>
</span></span><span class="line"><span class="cl">mkdir meltano_projects <span class="o">&amp;&amp;</span> <span class="nb">cd</span> meltano_projects
</span></span><span class="line"><span class="cl"><span class="c1"># replace &lt;yourprojectname&gt; with your own one</span>
</span></span><span class="line"><span class="cl">touch .env
</span></span><span class="line"><span class="cl">meltano init &lt;yourprojectname&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>或者用容器安装 Meltano：</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker pull meltano/meltano:latest
</span></span><span class="line"><span class="cl">docker run --rm meltano/meltano --version
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># init a project</span>
</span></span><span class="line"><span class="cl">mkdir meltano_projects <span class="o">&amp;&amp;</span> <span class="nb">cd</span> meltano_projects
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># replace &lt;yourprojectname&gt; with your own one</span>
</span></span><span class="line"><span class="cl">touch .env
</span></span><span class="line"><span class="cl">docker run --rm -v <span class="s2">&#34;</span><span class="k">$(</span><span class="nb">pwd</span><span class="k">)</span><span class="s2">&#34;</span>:/projects <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>             -w /projects --env-file .env <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>             meltano/meltano init &lt;yourprojectname&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p>除了 <code>meltano init</code>，还有一些其他命令，例如 <code>meltano etl</code> 表示 ETL 的执行，还有 <code>meltano invoke &lt;plugin&gt;</code> 来调用插件命令，详细可以参考它的速查表（https://docs.meltano.com/reference/command-line-interface）。</p>
<h4 id="meltano-gui-界面" class="headerLink">
    <a href="#meltano-gui-%e7%95%8c%e9%9d%a2" class="header-mark"></a>3.2.2 Meltano GUI 界面</h4><p>Meltano 还带有一个基于 Web 的 UI，执行 <code>ui</code> 子命令就是启动它：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">meltano ui
</span></span></code></pre></td></tr></table>
</div>
</div><p>默认他会跑在 http://localhost:5000 上。</p>
<p>对于 Docker 运行的情况，只需要在暴露 5000 端口的情况下运行容器即可，由于容器的默认命令已经是 <code>meltano ui</code>，所以 <code>run</code> 的命令只需：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run -v <span class="s2">&#34;</span><span class="k">$(</span><span class="nb">pwd</span><span class="k">)</span><span class="s2">&#34;</span>:/project <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>             -w /project <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>             -p 5000:5000 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>             meltano/meltano
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="meltano-项目示例" class="headerLink">
    <a href="#meltano-%e9%a1%b9%e7%9b%ae%e7%a4%ba%e4%be%8b" class="header-mark"></a>3.2.3 Meltano 项目示例</h4><p>写到这里的时候，我注意到 <a href="https://github.com/pnadolny13" target="_blank" rel="noopener noreferrer">Pat Nadolny</a> 创建了很好的示例项目在 <a href="https://github.com/pnadolny13/meltano_example_implementations/tree/main/meltano_projects/singer_dbt_jaffle" target="_blank" rel="noopener noreferrer">https://github.com/pnadolny13/meltano_example_implementations/tree/main/meltano_projects/singer_dbt_jaffle</a>，它利用 dbt 的 Meltano 示例数据集，采用 Airflow 编排 ETL 任务（https://github.com/pnadolny13/meltano_example_implementations/tree/main/meltano_projects/dbt_orchestration，还有利用 Superset 的例子（https://github.com/pnadolny13/meltano_example_implementations/tree/main/meltano_projects/jaffle_superset）。</p>
<p>这里，我就不重复造轮子了，直接利用他的例子吧。</p>
<p>咱们可以参照 <a href="https://github.com/pnadolny13/meltano_example_implementations/tree/main/meltano_projects/singer_dbt_jaffle" target="_blank" rel="noopener noreferrer">https://github.com/pnadolny13/meltano_example_implementations/tree/main/meltano_projects/singer_dbt_jaffle</a>，运行这样的数据管道（pipeline）：</p>
<ul>
<li><a href="https://hub.meltano.com/taps/csv" target="_blank" rel="noopener noreferrer">tap-CSV</a>(Singer)，从 CSV 文件中提取数据</li>
<li><a href="https://hub.meltano.com/targets/postgres" target="_blank" rel="noopener noreferrer">target-postgres</a>(Singer)，将数据加载到 Postgres</li>
<li><a href="https://hub.meltano.com/transformers/dbt" target="_blank" rel="noopener noreferrer">dbt</a>，将数据转换为聚合表或视图</li>
</ul>
<blockquote>
<p>注意，前边我们已经启动了 postgres，那一步可以跳过。</p>
</blockquote>
<p>操作过程是：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone https://github.com/pnadolny13/meltano_example_implementations.git
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> meltano_example_implementations/meltano_projects/singer_dbt_jaffle/
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">meltano install
</span></span><span class="line"><span class="cl">touch .env
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="nv">PG_PASSWORD</span><span class="o">=</span><span class="s2">&#34;lineage_ref&#34;</span> &gt;&gt; .env
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="nv">PG_USERNAME</span><span class="o">=</span><span class="s2">&#34;lineage_ref&#34;</span> &gt;&gt; .env
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Extract and Load(with Singer)</span>
</span></span><span class="line"><span class="cl">meltano run tap-csv target-postgres
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Trasnform(with dbt)</span>
</span></span><span class="line"><span class="cl">meltano run dbt:run
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Generate dbt docs</span>
</span></span><span class="line"><span class="cl">meltano invoke dbt docs generate
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Serve generated dbt docs</span>
</span></span><span class="line"><span class="cl">meltano invoke dbt docs to serve
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Then visit http://localhost:8080</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>现在，我们可以连接到 Postgres 来查看 加载和转换后的数据预览如下，截图来自 VS Code 的 SQLTool：</p>
<p>Payments 表里长这样子：</p>
<p><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/167540494-01e3dbd2-6ab1-41d2-998e-3b79f755bdc7.png" title="https://user-images.githubusercontent.com/1651790/167540494-01e3dbd2-6ab1-41d2-998e-3b79f755bdc7.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/167540494-01e3dbd2-6ab1-41d2-998e-3b79f755bdc7.png">
        
    </a></p>
<h3 id="搭一个-bi-dashboard-系统" class="headerLink">
    <a href="#%e6%90%ad%e4%b8%80%e4%b8%aa-bi-dashboard-%e7%b3%bb%e7%bb%9f" class="header-mark"></a>3.3 搭一个 BI Dashboard 系统</h3><p>现在，我们有了数据仓库中的一些数据，用 ETL 工具链将不同的数据源导了进去，接下来可以试着用一下这些数据了。</p>
<p>像仪表大盘 Dashbaord 这样的 BI 工具能帮助我们从数据中获得有用的洞察，使用 Apache Superset，可以很容易地创建和管理基于这些数据源的 Dashboard 和各式各样的图表。</p>
<p>本章的重点不在于 Apache Superset 本身，所以，咱们还是复用 <a href="https://github.com/pnadolny13" target="_blank" rel="noopener noreferrer">Pat Nadolny</a> 在的例子 <a href="https://github.com/pnadolny13/meltano_example_implementations/tree/main/meltano_projects/jaffle_superset" target="_blank" rel="noopener noreferrer">https://github.com/pnadolny13/meltano_example_implementations/tree/main/meltano_projects/jaffle_superset</a>。</p>
<h4 id="bootstrap-meltano-和-superset" class="headerLink">
    <a href="#bootstrap-meltano-%e5%92%8c-superset" class="header-mark"></a>3.3.1 Bootstrap Meltano 和 Superset</h4><p>创建一个安装了 Meltano 的 python venv：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkdir .venv
</span></span><span class="line"><span class="cl">python3 -m venv .venv/meltano
</span></span><span class="line"><span class="cl"><span class="nb">source</span> .venv/meltano/bin/activate
</span></span><span class="line"><span class="cl">python3 -m pip install wheel
</span></span><span class="line"><span class="cl">python3 -m pip install meltano
</span></span></code></pre></td></tr></table>
</div>
</div><p>参考 Pat 的 Guide（https://github.com/pnadolny13/meltano_example_implementations/tree/main/meltano_projects/jaffle_superset），稍微做一些修改：</p>
<ul>
<li>克隆 repo，进入 <code>jaffle_superset</code> 项目</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone https://github.com/pnadolny13/meltano_example_implementations.git
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> meltano_example_implementations/meltano_projects/jaffle_superset/
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>修改meltano配置文件，让 Superset 连接到我们创建的 Postgres：</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">vim meltano_projects/jaffle_superset/meltano.yml
</span></span></code></pre></td></tr></table>
</div>
</div><p>这里，我将主机名更改为“10.1.1.111”，这是我当前主机的 IP，而如果读者在 Windows 或者 macOS 机器的 Docker Desktop 上跑的话，这里不要修改，否则要参考我去改成自己实际的地址：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl"><span class="gd">--- a/meltano_projects/jaffle_superset/meltano.yml
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+++ b/meltano_projects/jaffle_superset/meltano.yml
</span></span></span><span class="line"><span class="cl"><span class="gi"></span><span class="gu">@@ -71,7 +71,7 @@ plugins:
</span></span></span><span class="line"><span class="cl"><span class="gu"></span>               A list of database driver dependencies can be found here https://superset.apache.org/docs/databases/installing-database-drivers
</span></span><span class="line"><span class="cl">     config:
</span></span><span class="line"><span class="cl">       database_name: my_postgres
</span></span><span class="line"><span class="cl"><span class="gd">-      sqlalchemy_uri: postgresql+psycopg2://${PG_USERNAME}:${PG_PASSWORD}@host.docker.internal:${PG_PORT}/${PG_DATABASE}
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+      sqlalchemy_uri: postgresql+psycopg2://${PG_USERNAME}:${PG_PASSWORD}@10.1.1.168:${PG_PORT}/${PG_DATABASE}
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>       tables:
</span></span><span class="line"><span class="cl">       - model.my_meltano_project.customers
</span></span><span class="line"><span class="cl">       - model.my_meltano_project.orders
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>添加 Postgres 登录的信息到  <code>.env</code> 文件：</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">echo</span> <span class="nv">PG_USERNAME</span><span class="o">=</span>lineage_ref &gt;&gt; .env
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="nv">PG_PASSWORD</span><span class="o">=</span>lineage_ref &gt;&gt; .env
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>安装 Meltano 项目，运行 ETL 任务</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">meltano install
</span></span><span class="line"><span class="cl">meltano run tap-csv target-postgres dbt:run
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>调用、启动 superset，这里注意 <code>ui</code> 不是 meltano 的内部命令，而是一个配置进去的自定义行为（user-defined action）</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">meltano invoke superset:ui
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>在另一个命令行终端，执行另一个自定义的命令 <code>load_datasources</code></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">meltano invoke superset:load_datasources
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>通过浏览器访问 http://localhost:8088/ 就是Superset 的图形界面了：</li>
</ul>
<p><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168570300-186b56a5-58e8-4ff1-bc06-89fd77d74166.png" title="https://user-images.githubusercontent.com/1651790/168570300-186b56a5-58e8-4ff1-bc06-89fd77d74166.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168570300-186b56a5-58e8-4ff1-bc06-89fd77d74166.png">
        
    </a></p>
<h4 id="创建一个-dashboard" class="headerLink">
    <a href="#%e5%88%9b%e5%bb%ba%e4%b8%80%e4%b8%aa-dashboard" class="header-mark"></a>3.3.2 创建一个 Dashboard</h4><p>试一下在这个 Meltano 项目中定义的 Postgres 中的 ETL 数据上创建一个 Dashboard 吧</p>
<ul>
<li>点击 <code>+ DASHBOARD</code>，填写仪表盘名称，然后点击 <code>SAVE</code>，然后点击 <code>+ CREATE A NEW CHART</code></li>
</ul>
<p><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168570363-c6b4f929-2aad-4f03-8e3e-b1b61f560ce5.png" title="https://user-images.githubusercontent.com/1651790/168570363-c6b4f929-2aad-4f03-8e3e-b1b61f560ce5.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168570363-c6b4f929-2aad-4f03-8e3e-b1b61f560ce5.png">
        
    </a></p>
<ul>
<li>在新图表（Create a new chart）视图中，我们应该选择图表类型和数据集。 在这里，我选择了 <code>orders</code> 表作为数据源和 <code>Pie Chart</code> 图表类型：</li>
</ul>
<p><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168570927-9559a2a1-fed7-43be-9f6a-f6fb3c263830.png" title="https://user-images.githubusercontent.com/1651790/168570927-9559a2a1-fed7-43be-9f6a-f6fb3c263830.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168570927-9559a2a1-fed7-43be-9f6a-f6fb3c263830.png">
        
    </a></p>
<ul>
<li>点击“CREATE NEW CHART”后，我们在图表定义视图中，我选择了“status”的“Query”为“DIMENSIONS”，“COUNT(amount)”为“METRIC”。 至此，咱们就可以看到每个订单状态分布的饼图了。</li>
</ul>
<p><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168571130-a65ba88e-1ebe-4699-8783-08e5ecf54a0c.png" title="https://user-images.githubusercontent.com/1651790/168571130-a65ba88e-1ebe-4699-8783-08e5ecf54a0c.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168571130-a65ba88e-1ebe-4699-8783-08e5ecf54a0c.png">
        
    </a></p>
<ul>
<li>点击 <code>SAVE</code> ，它会询问应该将此图表添加到哪个 Dashboard，选择后，单击 <code>SAVE &amp; GO TO DASHBOARD</code>。</li>
</ul>
<p><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168571301-8ae69983-eda8-4e75-99cf-6904f583fc7c.png" title="https://user-images.githubusercontent.com/1651790/168571301-8ae69983-eda8-4e75-99cf-6904f583fc7c.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168571301-8ae69983-eda8-4e75-99cf-6904f583fc7c.png">
        
    </a></p>
<ul>
<li>然后，在 Dashboard 中，我们可以看到那里的所有图表。 您可以看到我还添加了另一个图表来显示客户订单数量分布：</li>
</ul>
<p><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168571878-30a77057-1f66-448a-9bbd-0dedcee24cc9.png" title="https://user-images.githubusercontent.com/1651790/168571878-30a77057-1f66-448a-9bbd-0dedcee24cc9.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168571878-30a77057-1f66-448a-9bbd-0dedcee24cc9.png">
        
    </a></p>
<ul>
<li>点  <code>···</code> 的话，还能看到刷新率设置、下载渲染图等其他的功能。</li>
</ul>
<p><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168573874-b5d57919-2866-4b3c-a4e5-55b6e6ef342e.png" title="https://user-images.githubusercontent.com/1651790/168573874-b5d57919-2866-4b3c-a4e5-55b6e6ef342e.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168573874-b5d57919-2866-4b3c-a4e5-55b6e6ef342e.png">
        
    </a></p>
<p>目前，我们有一个简单但典型的 homelab 数据技术栈了，并且所有东西都是开源的！</p>
<p>想象一下，我们在 CSV 中有 100 个数据集，在数据仓库中有 200 个表，并且有几个数据工程师在运行不同的项目，这些项目使用、生成不同的应用与服务、Dashbaord 和数据库。 当有人想要查找、发现或者修改其中的一些表、数据集、Dashbaord 和管道，在沟通和工程方面可能都是非常不好管理的。</p>
<p>如前边提到的，我们需要这个示例项目的主要部分：元数据发现系统。</p>
<h3 id="元数据发现系统" class="headerLink">
    <a href="#%e5%85%83%e6%95%b0%e6%8d%ae%e5%8f%91%e7%8e%b0%e7%b3%bb%e7%bb%9f" class="header-mark"></a>3.4 元数据发现系统</h3><p>然后，我们部署一个带有 NebulaGraph 和 Elasticsearch 的 Amundsen。</p>
<blockquote>
<p>注：目前【NebulaGraph 作为 Amundsen 后端的 PR】（https://github.com/amundsen-io/amundsen/pull/1817）尚未合并，我还在与 Amundsen 团队合作（https://github.com/amundsen-io/rfcs/pull/48）来实现它。</p>
</blockquote>
<p>有了 Amundsen，我们可以在一个地方发现和管理整个数据栈中的所有元数据。</p>
<p>Amundsen 主要有两个部分组成：</p>
<ul>
<li>元数据导入 Metadata Ingestion
<ul>
<li><a href="https://www.amundsen.io/amundsen/databuilder/" target="_blank" rel="noopener noreferrer">Amundsen Data builder</a></li>
</ul>
</li>
<li>元数据目录服务 Metadata Catalog
<ul>
<li><a href="https://www.amundsen.io/amundsen/frontend/" target="_blank" rel="noopener noreferrer">Amundsen Frontend service</a></li>
<li><a href="https://www.amundsen.io/amundsen/metadata/" target="_blank" rel="noopener noreferrer">Amundsen Metadata service</a></li>
<li><a href="https://www.amundsen.io/amundsen/search/" target="_blank" rel="noopener noreferrer">Amundsen Search service</a></li>
</ul>
</li>
</ul>
<p>它的工作原理是：利用 <code>Data builder</code> 从不同来源提取元数据，并将元数据持久化到 <code>Meta service</code> 的后端存储和 <code>Search service</code> 的后端存储中，用户从 <code>Froent service</code> 或通过 <code>Meta Service</code> 的API。</p>
<h4 id="部署-amundsen" class="headerLink">
    <a href="#%e9%83%a8%e7%bd%b2-amundsen" class="header-mark"></a>3.4.1 部署 Amundsen</h4><h5 id="元数据服务-metadata-service" class="headerLink">
    <a href="#%e5%85%83%e6%95%b0%e6%8d%ae%e6%9c%8d%e5%8a%a1-metadata-service" class="header-mark"></a>3.4.1.1 元数据服务 Metadata service</h5><p>我们用 docker-compose 文件部署一个 Amundsen 集群。 由于 NebulaGraph 后端支持尚未合并，还不能用官方的代码，先用我自己的分叉版本。</p>
<p>首先，让我们克隆包含所有子模块的 repo：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone -b amundsen_nebula_graph --recursive git@github.com:wey-gu/amundsen.git
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> amundsen
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后，启动所有目录服务（catalog services）及其后端存储：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker-compose -f docker-amundsen-nebula.yml up
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>注：可以添加 <code>-d</code> 来让容器在后台运行：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker-compose -f docker-amundsen-nebula.yml up -d
</span></span></code></pre></td></tr></table>
</div>
</div><p>关闭后台运行的集群</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker-compose -f docker-amundsen-nebula.yml stop
</span></span></code></pre></td></tr></table>
</div>
</div><p>删除后台运行的集群</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker-compose -f docker-amundsen-nebula.yml down
</span></span></code></pre></td></tr></table>
</div>
</div></blockquote>
<p>由于这个 docker-compose 文件是供开发人员试玩、调试 Amundsen 用的，而不是给生产部署准备的，它在启动的时候会从代码库构建镜像，第一次跑的时候启动会慢一些。</p>
<p>部署好了之后，我们使用 Data builder 将一些示例、虚构的数据加载存储里。</p>
<h5 id="抓取元数据-data-builder" class="headerLink">
    <a href="#%e6%8a%93%e5%8f%96%e5%85%83%e6%95%b0%e6%8d%ae-data-builder" class="header-mark"></a>3.4.1.2 抓取元数据 Data builder</h5><p>Amundsen Data builder 就像 Meltano 系统一样，只不过是用在元数据的上的 ETL ，它把元数据加载到“Meta service”和“Search service”的后端存储：NebulaGraph 和 Elasticsearch 里。 这里的 Data builder 只是一个 python 模块，所有的元数据 ETL 作业可以作为脚本运行，也可以用 Apache Airflow 等 DAG 平台进行编排。</p>
<p>安装 <a href="https://github.com/amundsen-io/amundsen/tree/main/databuilder" target="_blank" rel="noopener noreferrer">Amundsen Data builder</a>：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> databuilder
</span></span><span class="line"><span class="cl">python3 -m venv .venv
</span></span><span class="line"><span class="cl"><span class="nb">source</span> .venv/bin/activate
</span></span><span class="line"><span class="cl">python3 -m pip install wheel
</span></span><span class="line"><span class="cl">python3 -m pip install -r requirements.txt
</span></span><span class="line"><span class="cl">python3 setup.py install
</span></span></code></pre></td></tr></table>
</div>
</div><p>调用这个示例数据构建器 ETL 脚本来把示例的虚拟数据导进去。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">python3 example/scripts/sample_data_loader_nebula.py
</span></span></code></pre></td></tr></table>
</div>
</div><h5 id="验证一下-amundsen" class="headerLink">
    <a href="#%e9%aa%8c%e8%af%81%e4%b8%80%e4%b8%8b-amundsen" class="header-mark"></a>3.4.1.3 验证一下 Amundsen</h5><p>在访问 Amundsen 之前，我们需要创建一个测试用户：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># run a container with curl attached to amundsenfrontend</span>
</span></span><span class="line"><span class="cl">docker run -it --rm --net container:amundsenfrontend nicolaka/netshoot
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Create a user with id test_user_id</span>
</span></span><span class="line"><span class="cl">curl -X PUT -v http://amundsenmetadata:5002/user <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -H <span class="s2">&#34;Content-Type: application/json&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --data <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="s1">&#39;{&#34;user_id&#34;:&#34;test_user_id&#34;,&#34;first_name&#34;:&#34;test&#34;,&#34;last_name&#34;:&#34;user&#34;, &#34;email&#34;:&#34;test_user_id@mail.com&#34;}&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">exit</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后我们可以在 <a href="http://localhost:5000/" target="_blank" rel="noopener noreferrer">http://localhost:5000</a> 查看 UI 并尝试搜索 <code>test</code>，它应该会返回一些结果。</p>
<p><a class="lightgallery" href="https://github.com/amundsen-io/amundsen/raw/master/docs/img/search-page.png" title="https://github.com/amundsen-io/amundsen/raw/master/docs/img/search-page.png" data-thumbnail="https://github.com/amundsen-io/amundsen/raw/master/docs/img/search-page.png">
        
    </a></p>
<p>然后，可以单击并浏览在“sample_data_loader_nebula.py”期间加载到 Amundsen 的那些示例元数据。</p>
<p>此外，我们还可以通过 NebulaStudio(http://localhost:7001) 访问 NebulaGraph 里的这些数据。</p>
<blockquote>
<p>注意在 Nebula Studio 中，默认登录字段为：</p>
<ul>
<li>主机：<code>graphd:9669</code></li>
<li>用户：<code>root</code></li>
<li>密码：<code>nebula</code></li>
</ul>
</blockquote>
<p>下图显示了有关 Amundsen 组件的更多详细信息：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">       ┌────────────────────────┐ ┌────────────────────────────────────────┐
</span></span><span class="line"><span class="cl">       │ Frontend:5000          │ │ Metadata Sources                       │
</span></span><span class="line"><span class="cl">       ├────────────────────────┤ │ ┌────────┐ ┌─────────┐ ┌─────────────┐ │
</span></span><span class="line"><span class="cl">       │ Metaservice:5001       │ │ │        │ │         │ │             │ │
</span></span><span class="line"><span class="cl">       │ ┌──────────────┐       │ │ │ Foo DB │ │ Bar App │ │ X Dashboard │ │
</span></span><span class="line"><span class="cl">  ┌────┼─┤ Nebula Proxy │       │ │ │        │ │         │ │             │ │
</span></span><span class="line"><span class="cl">  │    │ └──────────────┘       │ │ │        │ │         │ │             │ │
</span></span><span class="line"><span class="cl">  │    ├────────────────────────┤ │ └────────┘ └─────┬───┘ └─────────────┘ │
</span></span><span class="line"><span class="cl">┌─┼────┤ Search searvice:5002   │ │                  │                     │
</span></span><span class="line"><span class="cl">│ │    └────────────────────────┘ └──────────────────┼─────────────────────┘
</span></span><span class="line"><span class="cl">│ │    ┌─────────────────────────────────────────────┼───────────────────────┐
</span></span><span class="line"><span class="cl">│ │    │                                             │                       │
</span></span><span class="line"><span class="cl">│ │    │ Databuilder     ┌───────────────────────────┘                       │
</span></span><span class="line"><span class="cl">│ │    │                 │                                                   │
</span></span><span class="line"><span class="cl">│ │    │ ┌───────────────▼────────────────┐ ┌──────────────────────────────┐ │
</span></span><span class="line"><span class="cl">│ │ ┌──┼─► Extractor of Sources           ├─► nebula_search_data_extractor │ │
</span></span><span class="line"><span class="cl">│ │ │  │ └───────────────┬────────────────┘ └──────────────┬───────────────┘ │
</span></span><span class="line"><span class="cl">│ │ │  │ ┌───────────────▼────────────────┐ ┌──────────────▼───────────────┐ │
</span></span><span class="line"><span class="cl">│ │ │  │ │ Loader filesystem_csv_nebula   │ │ Loader Elastic FS loader     │ │
</span></span><span class="line"><span class="cl">│ │ │  │ └───────────────┬────────────────┘ └──────────────┬───────────────┘ │
</span></span><span class="line"><span class="cl">│ │ │  │ ┌───────────────▼────────────────┐ ┌──────────────▼───────────────┐ │
</span></span><span class="line"><span class="cl">│ │ │  │ │ Publisher nebula_csv_publisher │ │ Publisher Elasticsearch      │ │
</span></span><span class="line"><span class="cl">│ │ │  │ └───────────────┬────────────────┘ └──────────────┬───────────────┘ │
</span></span><span class="line"><span class="cl">│ │ │  └─────────────────┼─────────────────────────────────┼─────────────────┘
</span></span><span class="line"><span class="cl">│ │ └────────────────┐   │                                 │
</span></span><span class="line"><span class="cl">│ │    ┌─────────────┼───►─────────────────────────┐ ┌─────▼─────┐
</span></span><span class="line"><span class="cl">│ │    │ Nebula Graph│   │                         │ │           │
</span></span><span class="line"><span class="cl">│ └────┼─────┬───────┴───┼───────────┐     ┌─────┐ │ │           │
</span></span><span class="line"><span class="cl">│      │     │           │           │     │MetaD│ │ │           │
</span></span><span class="line"><span class="cl">│      │ ┌───▼──┐    ┌───▼──┐    ┌───▼──┐  └─────┘ │ │           │
</span></span><span class="line"><span class="cl">│ ┌────┼─►GraphD│    │GraphD│    │GraphD│          │ │           │
</span></span><span class="line"><span class="cl">│ │    │ └──────┘    └──────┘    └──────┘  ┌─────┐ │ │           │
</span></span><span class="line"><span class="cl">│ │    │ :9669                             │MetaD│ │ │  Elastic  │
</span></span><span class="line"><span class="cl">│ │    │ ┌────────┐ ┌────────┐ ┌────────┐  └─────┘ │ │  Search   │
</span></span><span class="line"><span class="cl">│ │    │ │        │ │        │ │        │          │ │  Cluster  │
</span></span><span class="line"><span class="cl">│ │    │ │StorageD│ │StorageD│ │StorageD│  ┌─────┐ │ │  :9200    │
</span></span><span class="line"><span class="cl">│ │    │ │        │ │        │ │        │  │MetaD│ │ │           │
</span></span><span class="line"><span class="cl">│ │    │ └────────┘ └────────┘ └────────┘  └─────┘ │ │           │
</span></span><span class="line"><span class="cl">│ │    ├───────────────────────────────────────────┤ │           │
</span></span><span class="line"><span class="cl">│ └────┤ Nebula Studio:7001                        │ │           │
</span></span><span class="line"><span class="cl">│      └───────────────────────────────────────────┘ └─────▲─────┘
</span></span><span class="line"><span class="cl">└──────────────────────────────────────────────────────────┘
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="穿针引线元数据发现" class="headerLink">
    <a href="#%e7%a9%bf%e9%92%88%e5%bc%95%e7%ba%bf%e5%85%83%e6%95%b0%e6%8d%ae%e5%8f%91%e7%8e%b0" class="header-mark"></a>4 穿针引线：元数据发现</h2><p>设置好基本环境后，让我们把所有东西穿起来。还记得我们有 ELT 一些数据到 PostgreSQL 吗？</p>
<p><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/167540494-01e3dbd2-6ab1-41d2-998e-3b79f755bdc7.png" title="https://user-images.githubusercontent.com/1651790/167540494-01e3dbd2-6ab1-41d2-998e-3b79f755bdc7.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/167540494-01e3dbd2-6ab1-41d2-998e-3b79f755bdc7.png">
        
    </a></p>
<p>那么，我们如何让 Amundsen 发现有关这些数据和 ETL 的元数据呢？</p>
<h3 id="提取-postgres-元数据" class="headerLink">
    <a href="#%e6%8f%90%e5%8f%96-postgres-%e5%85%83%e6%95%b0%e6%8d%ae" class="header-mark"></a>4.1 提取 Postgres 元数据</h3><p>我们从数据源开始：首先是 Postgres。</p>
<p>我们为 python3 安装 Postgres 客户端：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo apt-get install libpq-dev
</span></span><span class="line"><span class="cl">pip3 install Psycopg2
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="执行-postgres-元数据-etl" class="headerLink">
    <a href="#%e6%89%a7%e8%a1%8c-postgres-%e5%85%83%e6%95%b0%e6%8d%ae-etl" class="header-mark"></a>4.1.1 执行 Postgres 元数据 ETL</h4><p>运行一个脚本来解析 Postgres 元数据：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">CREDENTIALS_POSTGRES_USER</span><span class="o">=</span>lineage_ref
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">CREDENTIALS_POSTGRES_PASSWORD</span><span class="o">=</span>lineage_ref
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">CREDENTIALS_POSTGRES_DATABASE</span><span class="o">=</span>warehouse
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">python3 example/scripts/sample_postgres_loader_nebula.py
</span></span></code></pre></td></tr></table>
</div>
</div><p>If you look into the code of the sample script for loading Postgres metadata to Nebula, the main lines are quite straightforward:</p>
<p>我们看看把 Postgres 元数据加载到 NebulaGraph 的示例脚本的代码，非常简单直接：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># part 1: PostgressMetadata --&gt; CSV --&gt; Nebula Graph</span>
</span></span><span class="line"><span class="cl"><span class="n">job</span> <span class="o">=</span> <span class="n">DefaultJob</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">      <span class="n">conf</span><span class="o">=</span><span class="n">job_config</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">task</span><span class="o">=</span><span class="n">DefaultTask</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">          <span class="n">extractor</span><span class="o">=</span><span class="n">PostgresMetadataExtractor</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">          <span class="n">loader</span><span class="o">=</span><span class="n">FsNebulaCSVLoader</span><span class="p">()),</span>
</span></span><span class="line"><span class="cl">      <span class="n">publisher</span><span class="o">=</span><span class="n">NebulaCsvPublisher</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="c1"># part 2: Metadata stored in NebulaGraph --&gt; Elasticsearch</span>
</span></span><span class="line"><span class="cl"><span class="n">extractor</span> <span class="o">=</span> <span class="n">NebulaSearchDataExtractor</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">task</span> <span class="o">=</span> <span class="n">SearchMetadatatoElasticasearchTask</span><span class="p">(</span><span class="n">extractor</span><span class="o">=</span><span class="n">extractor</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">job</span> <span class="o">=</span> <span class="n">DefaultJob</span><span class="p">(</span><span class="n">conf</span><span class="o">=</span><span class="n">job_config</span><span class="p">,</span> <span class="n">task</span><span class="o">=</span><span class="n">task</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>第一个工作路径是：<code>PostgressMetadata --&gt; CSV --&gt; Nebula Graph</code></p>
<ul>
<li><code>PostgresMetadataExtractor</code> 用于从 Postgres 中提取/提取元数据，可以参考文档（https://www.amundsen.io/amundsen/databuilder/#postgresmetadataextractor）。</li>
<li><code>FsNebulaCSVLoader</code> 用于将提取的数据中间放置为 CSV 文件</li>
<li><code>NebulaCsvPublisher</code> 用于将元数据以 CSV 的形式发布到 NebulaGraph</li>
</ul>
<p>第二个工作路径是：<code>Metadata stored in NebulaGraph --&gt; Elasticsearch</code></p>
<ul>
<li><code>NebulaSearchDataExtractor</code> 用于获取存储在 Nebula Graph 中的元数据</li>
<li><code>SearchMetadatatoElasticasearchTask</code> 用于使 Elasticsearch 对元数据进行索引。</li>
</ul>
<blockquote>
<p>请注意，在生产环境中，我们可以在脚本中或使用 Apache Airflow 等编排平台触发这些作业。</p>
</blockquote>
<h4 id="验证-postgres-中元数据的获取" class="headerLink">
    <a href="#%e9%aa%8c%e8%af%81-postgres-%e4%b8%ad%e5%85%83%e6%95%b0%e6%8d%ae%e7%9a%84%e8%8e%b7%e5%8f%96" class="header-mark"></a>4.1.2 验证 Postgres 中元数据的获取</h4><p>搜索<code>payments</code>或者直接访问http://localhost:5000/table_detail/warehouse/postgres/public/payments，你可以看到我们 Postgres 的元数据，比如：</p>
<p><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168475180-ebfaa188-268c-4fbe-a614-135d56d07e5d.png" title="https://user-images.githubusercontent.com/1651790/168475180-ebfaa188-268c-4fbe-a614-135d56d07e5d.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168475180-ebfaa188-268c-4fbe-a614-135d56d07e5d.png">
        
    </a></p>
<p>然后，像上面的屏幕截图一样，可以轻松完成元数据管理操作，如添加标签、所有者和描述。</p>
<h3 id="提取-dbt-元数据" class="headerLink">
    <a href="#%e6%8f%90%e5%8f%96-dbt-%e5%85%83%e6%95%b0%e6%8d%ae" class="header-mark"></a>4.2 提取 dbt 元数据</h3><p>实际上，我们也可以从 <a href="https://www.getdbt.com/" target="_blank" rel="noopener noreferrer">dbt</a> 本身提取元数据。</p>
<p>Amundsen <a href="https://www.amundsen.io/amundsen/databuilder/#dbtextractor" target="_blank" rel="noopener noreferrer">DbtExtractor</a> 会解析 <code>catalog.json</code> 或 <code>manifest.json</code> 文件以将元数据加载到 Amundsen 存储（NebulaGraph 和 Elasticsearch )。</p>
<p>在上面的 meltano 章节中，我们已经使用 <code>meltano invoke dbt docs generate</code> 生成了这个文件：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">14:23:15  Done.
</span></span><span class="line"><span class="cl">14:23:15  Building catalog
</span></span><span class="line"><span class="cl">14:23:15  Catalog written to /home/ubuntu/ref-data-lineage/meltano_example_implementations/meltano_projects/singer_dbt_jaffle/.meltano/transformers/dbt/target/catalog.json
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="dbt-元数据-etl-的执行" class="headerLink">
    <a href="#dbt-%e5%85%83%e6%95%b0%e6%8d%ae-etl-%e7%9a%84%e6%89%a7%e8%a1%8c" class="header-mark"></a>4.2.1 dbt 元数据 ETL 的执行</h4><p>我们试着解析示例 dbt 文件中的元数据吧：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ls -l example/sample_data/dbt/
</span></span><span class="line"><span class="cl">total <span class="m">184</span>
</span></span><span class="line"><span class="cl">-rw-rw-r-- <span class="m">1</span> w w   <span class="m">5320</span> May <span class="m">15</span> 07:17 catalog.json
</span></span><span class="line"><span class="cl">-rw-rw-r-- <span class="m">1</span> w w <span class="m">177163</span> May <span class="m">15</span> 07:17 manifest.json
</span></span></code></pre></td></tr></table>
</div>
</div><p>我写的这个示例的加载例子如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">python3 example/scripts/sample_dbt_loader_nebula.py
</span></span></code></pre></td></tr></table>
</div>
</div><p>其中主要的代码如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># part 1: Dbt manifest --&gt; CSV --&gt; Nebula Graph</span>
</span></span><span class="line"><span class="cl"><span class="n">job</span> <span class="o">=</span> <span class="n">DefaultJob</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">      <span class="n">conf</span><span class="o">=</span><span class="n">job_config</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">task</span><span class="o">=</span><span class="n">DefaultTask</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">          <span class="n">extractor</span><span class="o">=</span><span class="n">DbtExtractor</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">          <span class="n">loader</span><span class="o">=</span><span class="n">FsNebulaCSVLoader</span><span class="p">()),</span>
</span></span><span class="line"><span class="cl">      <span class="n">publisher</span><span class="o">=</span><span class="n">NebulaCsvPublisher</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="c1"># part 2: Metadata stored in NebulaGraph --&gt; Elasticsearch</span>
</span></span><span class="line"><span class="cl"><span class="n">extractor</span> <span class="o">=</span> <span class="n">NebulaSearchDataExtractor</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">task</span> <span class="o">=</span> <span class="n">SearchMetadatatoElasticasearchTask</span><span class="p">(</span><span class="n">extractor</span><span class="o">=</span><span class="n">extractor</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">job</span> <span class="o">=</span> <span class="n">DefaultJob</span><span class="p">(</span><span class="n">conf</span><span class="o">=</span><span class="n">job_config</span><span class="p">,</span> <span class="n">task</span><span class="o">=</span><span class="n">task</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>它和 Postgres 元数据 ETL 的唯一区别是 <code>extractor=DbtExtractor()</code>，它带有以下配置以获取有关 dbt 项目的以下信息：</p>
<ul>
<li>数据库名称</li>
<li>目录_json</li>
<li>manifest_json</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">job_config</span> <span class="o">=</span> <span class="n">ConfigFactory</span><span class="o">.</span><span class="n">from_dict</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;extractor.dbt.database_name&#39;</span><span class="p">:</span> <span class="n">database_name</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;extractor.dbt.catalog_json&#39;</span><span class="p">:</span> <span class="n">catalog_file_loc</span><span class="p">,</span>  <span class="c1"># File</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;extractor.dbt.manifest_json&#39;</span><span class="p">:</span> <span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">manifest_data</span><span class="p">),</span>  <span class="c1"># JSON Dumped objecy</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;extractor.dbt.source_url&#39;</span><span class="p">:</span> <span class="n">source_url</span><span class="p">})</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="验证-dbt-抓取结果" class="headerLink">
    <a href="#%e9%aa%8c%e8%af%81-dbt-%e6%8a%93%e5%8f%96%e7%bb%93%e6%9e%9c" class="header-mark"></a>4.2.2 验证 dbt 抓取结果</h4><p>搜索 <code>dbt_demo</code> 或者直接访问 http://localhost:5000/table_detail/dbt_demo/snowflake/public/raw_inventory_value，可以看到</p>
<p><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168479864-2f73ea73-265f-4cd2-999f-e7effbaf3ec1.png" title="https://user-images.githubusercontent.com/1651790/168479864-2f73ea73-265f-4cd2-999f-e7effbaf3ec1.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168479864-2f73ea73-265f-4cd2-999f-e7effbaf3ec1.png">
        
    </a></p>
<blockquote>
<p>小提示：我们可以选择启用 DEBUG log 级别去看已发送到 Elasticsearch 和 NebulaGraph 的内容。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl"><span class="gd">- logging.basicConfig(level=logging.INFO)
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+ logging.basicConfig(level=logging.DEBUG)
</span></span></span></code></pre></td></tr></table>
</div>
</div></blockquote>
<p>或者，在 NebulaStudio 中探索导入的数据：</p>
<p>首先，点击 “Start with Vertices”，填写顶点 vid：<code>snowflake://dbt_demo.public/fact_warehouse_inventory</code></p>
<p><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168480047-26c28cde-5df8-40af-8da4-6ab0203094e2.png" title="https://user-images.githubusercontent.com/1651790/168480047-26c28cde-5df8-40af-8da4-6ab0203094e2.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168480047-26c28cde-5df8-40af-8da4-6ab0203094e2.png">
        
    </a></p>
<p>然后，我们可以看到顶点显示为粉红色的点。 让我们修改 <code>Expand</code> / ”拓展“选项：</p>
<ul>
<li>方向：双向</li>
<li>步数：单向、三步</li>
</ul>
<p><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168480101-7b7b5824-06d9-4155-87c9-798db0dc7612.png" title="https://user-images.githubusercontent.com/1651790/168480101-7b7b5824-06d9-4155-87c9-798db0dc7612.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168480101-7b7b5824-06d9-4155-87c9-798db0dc7612.png">
        
    </a></p>
<p>并双击顶点（点），它将双向拓展 3 步：</p>
<p><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168480280-1dc88d1b-1f1e-48fd-9997-972965522ef5.png" title="https://user-images.githubusercontent.com/1651790/168480280-1dc88d1b-1f1e-48fd-9997-972965522ef5.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168480280-1dc88d1b-1f1e-48fd-9997-972965522ef5.png">
        
    </a></p>
<p>从上边这个截图里我们可以发现，在可视化之后的图数据库中，这些元数据可以很容易被查看、分析，并从中获得洞察。</p>
<blockquote>
<p>小贴士，您可以点击 👁 图标选择一些要显示的属性，我在截图之前就是通过它让一些信息显示出来的。</p>
</blockquote>
<p>而且，我们在 NebulaStudio 中看到的也与 Amundsen 元数据服务的数据模型相呼应：</p>
<p><a class="lightgallery" href="https://www.amundsen.io/amundsen/img/graph_model.png" title="https://www.amundsen.io/amundsen/img/graph_model.png" data-thumbnail="https://www.amundsen.io/amundsen/img/graph_model.png">
        
    </a></p>
<p>最后，请记住我们曾利用 dbt 来转换meltano 中的一些数据，并且清单文件路径是<code>.meltano/transformers/dbt/target/catalog.json</code>，您可以尝试创建一个数据构建器作业来导入它。</p>
<h3 id="提取-superset-中的元数据" class="headerLink">
    <a href="#%e6%8f%90%e5%8f%96-superset-%e4%b8%ad%e7%9a%84%e5%85%83%e6%95%b0%e6%8d%ae" class="header-mark"></a>4.3 提取 Superset 中的元数据</h3><p>Amundsen 的 Superset extractor 可以获取</p>
<ul>
<li>Dashboard 元数据抽取 <a href="https://www.amundsen.io/amundsen/databuilder/databuilder/extractor/dashboard/apache_superset/apache_superset_metadata_extractor.py" target="_blank" rel="noopener noreferrer">https://www.amundsen.io/amundsen/databuilder/databuilder/extractor/dashboard/apache_superset/apache_superset_metadata_extractor.py</a></li>
<li>图表元数据抽取 <a href="https://www.amundsen.io/amundsen/databuilder/databuilder" target="_blank" rel="noopener noreferrer">https://www.amundsen.io/amundsen/databuilder/databuilder</a> /extractor/dashboard/apache_superset/apache_superset_chart_extractor.py</li>
<li>Superset 元素与数据源（表）的关系抽取 <a href="https://www.amundsen.io/amundsen/databuilder/databuilder/extractor/dashboard/apache_superset/apache_superset_table_extractor.py" target="_blank" rel="noopener noreferrer">https://www.amundsen.io/amundsen/databuilder/databuilder/extractor/dashboard/apache_superset/apache_superset_table_extractor.py</a></li>
</ul>
<p>咱们现在就尝试摄取之前创建的 Superset Dashboard 的元数据。</p>
<h4 id="superset-元数据-etl-的执行" class="headerLink">
    <a href="#superset-%e5%85%83%e6%95%b0%e6%8d%ae-etl-%e7%9a%84%e6%89%a7%e8%a1%8c" class="header-mark"></a>4.3.1 Superset 元数据 ETL 的执行</h4><p>下边执行的示例 Superset 提取脚本可以从中获取数据并将元数据加载到 NebulaGraph 和 Elasticsearch 中。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">python3</span> <span class="n">sample_superset_data_loader_nebula</span><span class="o">.</span><span class="n">py</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果我们将日志记录级别设置为“DEBUG”，我们实际上可以看到这些中间的过程日志：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># fetching metadata from superset</span>
</span></span><span class="line"><span class="cl"><span class="n">DEBUG</span><span class="p">:</span><span class="n">urllib3</span><span class="o">.</span><span class="n">connectionpool</span><span class="p">:</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">localhost</span><span class="p">:</span><span class="mi">8088</span> <span class="s2">&#34;POST /api/v1/security/login HTTP/1.1&#34;</span> <span class="mi">200</span> <span class="mi">280</span>
</span></span><span class="line"><span class="cl"><span class="n">INFO</span><span class="p">:</span><span class="n">databuilder</span><span class="o">.</span><span class="n">task</span><span class="o">.</span><span class="n">task</span><span class="p">:</span><span class="n">Running</span> <span class="n">a</span> <span class="n">task</span>
</span></span><span class="line"><span class="cl"><span class="n">DEBUG</span><span class="p">:</span><span class="n">urllib3</span><span class="o">.</span><span class="n">connectionpool</span><span class="p">:</span><span class="n">Starting</span> <span class="n">new</span> <span class="n">HTTP</span> <span class="n">connection</span> <span class="p">(</span><span class="mi">1</span><span class="p">):</span> <span class="n">localhost</span><span class="p">:</span><span class="mi">8088</span>
</span></span><span class="line"><span class="cl"><span class="n">DEBUG</span><span class="p">:</span><span class="n">urllib3</span><span class="o">.</span><span class="n">connectionpool</span><span class="p">:</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">localhost</span><span class="p">:</span><span class="mi">8088</span> <span class="s2">&#34;GET /api/v1/dashboard?q=(page_size:20,page:0,order_direction:desc) HTTP/1.1&#34;</span> <span class="mi">308</span> <span class="mi">374</span>
</span></span><span class="line"><span class="cl"><span class="n">DEBUG</span><span class="p">:</span><span class="n">urllib3</span><span class="o">.</span><span class="n">connectionpool</span><span class="p">:</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">localhost</span><span class="p">:</span><span class="mi">8088</span> <span class="s2">&#34;GET /api/v1/dashboard/?q=(page_size:20,page:0,order_direction:desc) HTTP/1.1&#34;</span> <span class="mi">200</span> <span class="mi">1058</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># insert Dashboard</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">DEBUG</span><span class="p">:</span><span class="n">databuilder</span><span class="o">.</span><span class="n">publisher</span><span class="o">.</span><span class="n">nebula_csv_publisher</span><span class="p">:</span><span class="n">Query</span><span class="p">:</span> <span class="n">INSERT</span> <span class="n">VERTEX</span> <span class="err">`</span><span class="n">Dashboard</span><span class="err">`</span> <span class="p">(</span><span class="err">`</span><span class="n">dashboard_url</span><span class="err">`</span><span class="p">,</span> <span class="err">`</span><span class="n">name</span><span class="err">`</span><span class="p">,</span> <span class="n">published_tag</span><span class="p">,</span> <span class="n">publisher_last_updated_epoch_ms</span><span class="p">)</span> <span class="n">VALUES</span>  <span class="s2">&#34;superset_dashboard://my_cluster.1/3&#34;</span><span class="p">:(</span><span class="s2">&#34;http://localhost:8088/superset/dashboard/3/&#34;</span><span class="p">,</span><span class="s2">&#34;my_dashboard&#34;</span><span class="p">,</span><span class="s2">&#34;unique_tag&#34;</span><span class="p">,</span><span class="n">timestamp</span><span class="p">());</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># insert a DASHBOARD_WITH_TABLE relationship/edge</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">INFO</span><span class="p">:</span><span class="n">databuilder</span><span class="o">.</span><span class="n">publisher</span><span class="o">.</span><span class="n">nebula_csv_publisher</span><span class="p">:</span><span class="n">Importing</span> <span class="n">data</span> <span class="ow">in</span> <span class="n">edge</span> <span class="n">files</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;/tmp/amundsen/dashboard/relationships/Dashboard_Table_DASHBOARD_WITH_TABLE.csv&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">DEBUG</span><span class="p">:</span><span class="n">databuilder</span><span class="o">.</span><span class="n">publisher</span><span class="o">.</span><span class="n">nebula_csv_publisher</span><span class="p">:</span><span class="n">Query</span><span class="p">:</span>
</span></span><span class="line"><span class="cl"><span class="n">INSERT</span> <span class="n">edge</span> <span class="err">`</span><span class="n">DASHBOARD_WITH_TABLE</span><span class="err">`</span> <span class="p">(</span><span class="err">`</span><span class="n">END_LABEL</span><span class="err">`</span><span class="p">,</span> <span class="err">`</span><span class="n">START_LABEL</span><span class="err">`</span><span class="p">,</span> <span class="n">published_tag</span><span class="p">,</span> <span class="n">publisher_last_updated_epoch_ms</span><span class="p">)</span> <span class="n">VALUES</span> <span class="s2">&#34;superset_dashboard://my_cluster.1/3&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;postgresql+psycopg2://my_cluster.warehouse/orders&#34;</span><span class="p">:(</span><span class="s2">&#34;Table&#34;</span><span class="p">,</span><span class="s2">&#34;Dashboard&#34;</span><span class="p">,</span><span class="s2">&#34;unique_tag&#34;</span><span class="p">,</span> <span class="n">timestamp</span><span class="p">()),</span> <span class="s2">&#34;superset_dashboard://my_cluster.1/3&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;postgresql+psycopg2://my_cluster.warehouse/customers&#34;</span><span class="p">:(</span><span class="s2">&#34;Table&#34;</span><span class="p">,</span><span class="s2">&#34;Dashboard&#34;</span><span class="p">,</span><span class="s2">&#34;unique_tag&#34;</span><span class="p">,</span> <span class="n">timestamp</span><span class="p">());</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="验证-superset-dashboard-元数据" class="headerLink">
    <a href="#%e9%aa%8c%e8%af%81-superset-dashboard-%e5%85%83%e6%95%b0%e6%8d%ae" class="header-mark"></a>4.3.2 验证 Superset Dashboard 元数据</h4><p>通过在 Amundsen 中搜索它，我们现在可以获得 Dashboard 信息。</p>
<p>我们也可以从 NebulaStudio 进行验证。</p>
<p><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168719624-738323dd-4c6e-475f-a370-f149181c6184.png" title="https://user-images.githubusercontent.com/1651790/168719624-738323dd-4c6e-475f-a370-f149181c6184.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168719624-738323dd-4c6e-475f-a370-f149181c6184.png">
        
    </a></p>
<blockquote>
<p>注：可以参阅 <a href="https://www.amundsen.io/amundsen/databuilder/docs/dashboard_ingestion_guide/" target="_blank" rel="noopener noreferrer">Dashboard 抓取指南</a> 中的 Amundsen Dashboard 图建模：</p>
<p><a class="lightgallery" href="https://www.amundsen.io/amundsen/databuilder/docs/assets/dashboard_graph_modeling.png?raw=true" title="dashboard_graph_modeling" data-thumbnail="https://www.amundsen.io/amundsen/databuilder/docs/assets/dashboard_graph_modeling.png?raw=true">
        
    </a></p>
</blockquote>
<h3 id="用-superset-预览数据" class="headerLink">
    <a href="#%e7%94%a8-superset-%e9%a2%84%e8%a7%88%e6%95%b0%e6%8d%ae" class="header-mark"></a>4.4 用 Superset 预览数据</h3><p>Superset可以用来预览这样的表格数据。 相应的文档可以参考 <a href="https://www.amundsen.io/amundsen/frontend/docs/configuration/#preview-client" target="_blank" rel="noopener noreferrer">https://www.amundsen.io/amundsen/frontend/docs/configuration/#preview-client</a> ，其中 <code>/superset/sql_json/</code> 的 API 被 Amundsen Frontend service 调用，取得预览信息。</p>
<p><a class="lightgallery" href="https://github.com/amundsen-io/amundsenfrontendlibrary/blob/master/docs/img/data_preview.png?raw=true" title="https://github.com/amundsen-io/amundsenfrontendlibrary/blob/master/docs/img/data_preview.png?raw=true" data-thumbnail="https://github.com/amundsen-io/amundsenfrontendlibrary/blob/master/docs/img/data_preview.png?raw=true">
        
    </a></p>
<h3 id="开启数据血缘信息" class="headerLink">
    <a href="#%e5%bc%80%e5%90%af%e6%95%b0%e6%8d%ae%e8%a1%80%e7%bc%98%e4%bf%a1%e6%81%af" class="header-mark"></a>4.5 开启数据血缘信息</h3><p>默认情况下，数据血缘是关闭的，我们可以通过以下方式启用它：</p>
<ol start="0">
<li><code>cd</code> 到 Amundsen 代码仓库下，这也是我们运行 <code>docker-compose -f docker-amundsen-nebula.yml up</code> 命令的地方</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> amundsen
</span></span></code></pre></td></tr></table>
</div>
</div><ol>
<li>修改 frontend 下的 typescript 配置</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl"><span class="gd">--- a/frontend/amundsen_application/static/js/config/config-default.ts
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+++ b/frontend/amundsen_application/static/js/config/config-default.ts
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>   tableLineage: {
</span></span><span class="line"><span class="cl"><span class="gd">-    inAppListEnabled: false,
</span></span></span><span class="line"><span class="cl"><span class="gd">-    inAppPageEnabled: false,
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+    inAppListEnabled: true,
</span></span></span><span class="line"><span class="cl"><span class="gi">+    inAppPageEnabled: true,
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>     externalEnabled: false,
</span></span><span class="line"><span class="cl">     iconPath: &#39;PATH_TO_ICON&#39;,
</span></span><span class="line"><span class="cl">     isBeta: false,
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="2">
<li>重新构建 docker 镜像，其中将重建前端图像。</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker-compose -f docker-amundsen-nebula.yml build
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后，重新运行 <code>up -d</code> 以确保前端用新的配置：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker-compose -f docker-amundsen-nebula.yml up -d
</span></span></code></pre></td></tr></table>
</div>
</div><p>结果大概长这样子：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker-compose -f docker-amundsen-nebula.yml up -d
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">Recreating amundsenfrontend           ... <span class="k">done</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>之后，我们可以访问 http://localhost:5000/lineage/table/gold/hive/test_schema/test_table1 看到 <code>Lineage （beta）</code> 血缘按钮已经显示出来了：</p>
<p><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168838731-79d0e3bc-439e-4f6b-8ef7-83b37e9bcb12.png" title="https://user-images.githubusercontent.com/1651790/168838731-79d0e3bc-439e-4f6b-8ef7-83b37e9bcb12.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168838731-79d0e3bc-439e-4f6b-8ef7-83b37e9bcb12.png">
        
    </a></p>
<p>我们可以点击 <code>Downstream</code> 在存在的时候查看该表的下游资源：</p>
<p><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168839251-efd523af-d729-44cf-a40b-fa83a0852654.png" title="https://user-images.githubusercontent.com/1651790/168839251-efd523af-d729-44cf-a40b-fa83a0852654.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168839251-efd523af-d729-44cf-a40b-fa83a0852654.png">
        
    </a></p>
<p>或者点血缘按钮查看血缘的图表式：</p>
<p><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168838814-e6ff5152-c24b-470e-a46a-48f183ba7201.png" title="https://user-images.githubusercontent.com/1651790/168838814-e6ff5152-c24b-470e-a46a-48f183ba7201.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168838814-e6ff5152-c24b-470e-a46a-48f183ba7201.png">
        
    </a></p>
<p>也有用于血缘查询的 API。 这个例子中我们用 cURL 调用下这个 API：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run -it --rm --net container:amundsenfrontend nicolaka/netshoot
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">curl <span class="s2">&#34;http://amundsenmetadata:5002/table/snowflake://dbt_demo.public/raw_inventory_value/lineage?depth=3&amp;direction=both&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>上面的 API 调用是查询上游和下游方向的 linage，表 <code>snowflake://dbt_demo.public/raw_inventory_value</code> 的深度为 3。</p>
<p>结果应该是这样的：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;depth&#34;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;downstream_entities&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;level&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;usage&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;key&#34;</span><span class="p">:</span> <span class="s2">&#34;snowflake://dbt_demo.public/fact_daily_expenses&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;parent&#34;</span><span class="p">:</span> <span class="s2">&#34;snowflake://dbt_demo.public/fact_warehouse_inventory&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;badges&#34;</span><span class="p">:</span> <span class="p">[],</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;source&#34;</span><span class="p">:</span> <span class="s2">&#34;snowflake&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;level&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;usage&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;key&#34;</span><span class="p">:</span> <span class="s2">&#34;snowflake://dbt_demo.public/fact_warehouse_inventory&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;parent&#34;</span><span class="p">:</span> <span class="s2">&#34;snowflake://dbt_demo.public/raw_inventory_value&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;badges&#34;</span><span class="p">:</span> <span class="p">[],</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;source&#34;</span><span class="p">:</span> <span class="s2">&#34;snowflake&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;key&#34;</span><span class="p">:</span> <span class="s2">&#34;snowflake://dbt_demo.public/raw_inventory_value&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;direction&#34;</span><span class="p">:</span> <span class="s2">&#34;both&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;upstream_entities&#34;</span><span class="p">:</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>实际上，这个血缘数据就是在我们的 <a href="https://github.com/amundsen-io/amundsen/blob/main/databuilder/databuilder/extractor/dbt_extractor.py" target="_blank" rel="noopener noreferrer">DbtExtractor</a> 执行期间提取和加载的，其中 <code>extractor .dbt.{DbtExtractor.EXTRACT_LINEAGE}</code> 默认为 <code>True</code>，因此创建了血缘元数据并将其加载到了 Amundsen。</p>
<h4 id="在-nebulagraph-中洞察血缘" class="headerLink">
    <a href="#%e5%9c%a8-nebulagraph-%e4%b8%ad%e6%b4%9e%e5%af%9f%e8%a1%80%e7%bc%98" class="header-mark"></a>4.5.1 在 NebulaGraph 中洞察血缘</h4><p>使用图数据库作为元数据存储的两个优点是：</p>
<ul>
<li>图查询本身是一个灵活的 DSL for lineage API，例如，这个查询帮助我们执行 Amundsen 元数据 API 的等价的查询：</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">t</span><span class="p">:</span><span class="o">`</span><span class="k">Table</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">HAS_UPSTREAM</span><span class="o">`|</span><span class="p">:</span><span class="o">`</span><span class="n">HAS_DOWNSTREAM</span><span class="o">`</span><span class="w"> </span><span class="o">*</span><span class="mi">1</span><span class="p">..</span><span class="mi">3</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">t</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;snowflake://dbt_demo.public/raw_inventory_value&#34;</span><span class="w"> </span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>我们现在甚至可以在 NebulaGraph Studio 或者 Explorer 的控制台中查询它</li>
</ul>
<p><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168844882-ca3d0587-7946-4e17-8264-9dc973a44673.png" title="https://user-images.githubusercontent.com/1651790/168844882-ca3d0587-7946-4e17-8264-9dc973a44673.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168844882-ca3d0587-7946-4e17-8264-9dc973a44673.png">
        
    </a></p>
<p>​    然后渲染这个结果：</p>
<p><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168845155-b0e7a5ce-3ddf-4cc9-89a3-aaf1bbb0f5ec.png" title="https://user-images.githubusercontent.com/1651790/168845155-b0e7a5ce-3ddf-4cc9-89a3-aaf1bbb0f5ec.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168845155-b0e7a5ce-3ddf-4cc9-89a3-aaf1bbb0f5ec.png">
        
    </a></p>
<h4 id="提取数据血缘" class="headerLink">
    <a href="#%e6%8f%90%e5%8f%96%e6%95%b0%e6%8d%ae%e8%a1%80%e7%bc%98" class="header-mark"></a>4.5.2 提取数据血缘</h4><p>这些血缘信息是需要我们明确指定、获取的，获取的方式可以是自己写的 extractor，也可以是一些已经有的方式。比如 dbt 的 extractor和 Open Lineage 项目的 Amundsen extractor。</p>
<h5 id="通过-dbt" class="headerLink">
    <a href="#%e9%80%9a%e8%bf%87-dbt" class="header-mark"></a>4.5.2.1 通过 dbt</h5><p>这个在刚才已经展示过了，Dbt 的 Extractor 会从表级别获取血缘和其他 dbt 中产生的元数据信息一起被拿到。</p>
<h5 id="通过-open-lineage" class="headerLink">
    <a href="#%e9%80%9a%e8%bf%87-open-lineage" class="header-mark"></a>4.5.2.2 通过 Open Lineage</h5><p>Amundsen 中的另一个开箱即用的血缘 Extractor 是 <a href="https://www.amundsen.io/amundsen/databuilder/#openlineagetablelineageextractor" target="_blank" rel="noopener noreferrer">OpenLineageTableLineageExtractor</a>。</p>
<p><a href="https://openlineage.io/" target="_blank" rel="noopener noreferrer">Open Lineage</a> 是一个开放的框架，可以将不同来源的血统数据收集到一个地方，它可以将血统信息输出为 JSON 文件：https://www.amundsen.io/amundsen/databuilder/#openlineagetablelineageextractor</p>
<p>下边是它的 Amundsen data builder 例子：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">dict_config</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">    <span class="sa">f</span><span class="s1">&#39;extractor.openlineage_tablelineage.</span><span class="si">{</span><span class="n">OpenLineageTableLineageExtractor</span><span class="o">.</span><span class="n">CLUSTER_NAME</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">:</span> <span class="s1">&#39;datalab&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="sa">f</span><span class="s1">&#39;extractor.openlineage_tablelineage.</span><span class="si">{</span><span class="n">OpenLineageTableLineageExtractor</span><span class="o">.</span><span class="n">OL_DATASET_NAMESPACE_OVERRIDE</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">:</span> <span class="s1">&#39;hive_table&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="sa">f</span><span class="s1">&#39;extractor.openlineage_tablelineage.</span><span class="si">{</span><span class="n">OpenLineageTableLineageExtractor</span><span class="o">.</span><span class="n">TABLE_LINEAGE_FILE_LOCATION</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">:</span> <span class="s1">&#39;input_dir/openlineage_nd.json&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">task</span> <span class="o">=</span> <span class="n">DefaultTask</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">extractor</span><span class="o">=</span><span class="n">OpenLineageTableLineageExtractor</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">    <span class="n">loader</span><span class="o">=</span><span class="n">FsNebulaCSVLoader</span><span class="p">())</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="回顾" class="headerLink">
    <a href="#%e5%9b%9e%e9%a1%be" class="header-mark"></a>5 回顾</h2><p>整套元数据治理/发现的方案思路如下：</p>
<ul>
<li>将整个数据技术栈中的组件作为元数据源（从任何数据库、数仓，到 dbt、Airflow、Openlineage、Superset 等各级项目）</li>
<li>使用 Databuilder（作为脚本或 DAG）运行元数据 ETL，以使用 NebulaGraph 和 Elasticsearch 存储和索引</li>
<li>从前端 UI（使用 Superset 预览）或 API 去使用、消费、管理和发现元数据</li>
<li>通过查询和 UI 对 NebulaGraph，我们可以获得更多的可能性、灵活性和数据、血缘的洞察</li>
</ul>
<p><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168849779-4826f50e-ff87-4e78-b17f-076f91182c43.svg" title="https://user-images.githubusercontent.com/1651790/168849779-4826f50e-ff87-4e78-b17f-076f91182c43.svg" data-thumbnail="https://user-images.githubusercontent.com/1651790/168849779-4826f50e-ff87-4e78-b17f-076f91182c43.svg">
        
    </a></p>
<h3 id="涉及到的开源" class="headerLink">
    <a href="#%e6%b6%89%e5%8f%8a%e5%88%b0%e7%9a%84%e5%bc%80%e6%ba%90" class="header-mark"></a>5.1 涉及到的开源</h3><p>此参考项目中使用的所有项目都按字典顺序在下面列出。</p>
<ul>
<li>Amundsen</li>
<li>Apache Airflow</li>
<li>Apache Superset</li>
<li>dbt</li>
<li>Elasticsearch</li>
<li>meltano</li>
<li>Nebula Graph</li>
<li>Open Lineage</li>
<li>singer</li>
</ul>
<blockquote>
<p>题图版权： <a href="https://unsplash.com/photos/PhnJhjH9Y9s" target="_blank" rel="noopener noreferrer">Phil Hearing</a></p>
</blockquote>]]></description>
</item><item>
    <title>图数据库的社交网络应用</title>
    <link>https://siwei.io/nebulagraph-sns/</link>
    <pubDate>Thu, 08 Dec 2022 15:30:33 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/nebulagraph-sns/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/nebulagraph-sns/featured-image.webp" referrerpolicy="no-referrer">
            </div><h1 id="图数据库的社交网络应用" class="headerLink">
    <a href="#%e5%9b%be%e6%95%b0%e6%8d%ae%e5%ba%93%e7%9a%84%e7%a4%be%e4%ba%a4%e7%bd%91%e7%bb%9c%e5%ba%94%e7%94%a8" class="header-mark"></a>图数据库的社交网络应用</h1><blockquote>
<p>本文是一个基于 NebulaGraph 上解决社交网络问题的常规方法综述。其中介绍的方法提供都了 Playground 供大家学习、玩耍。</p>
</blockquote>
<!--

[TOC]

-->
<p>社交网络大家都不陌生，无论是微信、微博、B 站还是大众点评、知乎、陌陌等服务，其本质上的用户都形成了社交网络。</p>
<p>在一个社交网络系统中，我们可以用图数据库来表示用户和他们的连接关系。图数据库能允许对用户之间的关系进行有效的查询，使得各种基于连接查找、统计、分析的社交网络上的业务实现变得可行、高效。</p>
<p>例如，图形数据库可以用来识别网络中的“有影响力用户”，或者根据用户之间的共同点对新的连接（好友关系、关心的内容）进行推荐，再或者寻找社群中相聚集的不同人群、社区，进行用户画像。图形数据库因为在能支撑复杂多跳查询的同时也能支持实时写入、更新，使其非常适合应用在用户关系不断变化的社交网络系统之上。</p>
<h2 id="图建模" class="headerLink">
    <a href="#%e5%9b%be%e5%bb%ba%e6%a8%a1" class="header-mark"></a>1 图建模</h2><p>为了给出一些常见社交场景的应用示例，我会把大多数例子建立在一个典型的小型社交网络上，社交网络天然就是一张网络、图的形态。</p>
<p>为此，我在 NebulaGraph 官方示例数据集：篮球运动员之上，增加了三种点：</p>
<ul>
<li>地址</li>
<li>地点</li>
<li>文章</li>
</ul>
<p>五种边：</p>
<ul>
<li>发文</li>
<li>评论</li>
<li>住在</li>
<li>属于（地点）</li>
</ul>
<p>它的建模非常自然：</p>
<p><a class="lightgallery" href="/nebulagraph-sns/schema_sketch.webp" title="schema_sketch" data-thumbnail="/nebulagraph-sns/schema_sketch.webp">
        
    </a></p>
<h2 id="数据导入" class="headerLink">
    <a href="#%e6%95%b0%e6%8d%ae%e5%af%bc%e5%85%a5" class="header-mark"></a>2 数据导入</h2><h3 id="加载默认数据集" class="headerLink">
    <a href="#%e5%8a%a0%e8%bd%bd%e9%bb%98%e8%ae%a4%e6%95%b0%e6%8d%ae%e9%9b%86" class="header-mark"></a>2.1 加载默认数据集</h3><p>首先，我们加载默认的 basketballplayer 数据集。</p>
<ul>
<li>
<p>在命令行 console 之中，我们只需要执行 <code>:play basketballplayer</code> 就可以。</p>
</li>
<li>
<p>而在 NebulaGraph Studio/Explorer 之中，我们可以在欢迎页点击下载就部署这份基础数据集。</p>
<p><a class="lightgallery" href="/nebulagraph-sns/baskertballplayer_studio_starter.webp" title="baskertballplayer_studio_starter" data-thumbnail="/nebulagraph-sns/baskertballplayer_studio_starter.webp">
        
    </a></p>
</li>
</ul>
<h3 id="加载社交网络-schema" class="headerLink">
    <a href="#%e5%8a%a0%e8%bd%bd%e7%a4%be%e4%ba%a4%e7%bd%91%e7%bb%9c-schema" class="header-mark"></a>2.2 加载社交网络 schema</h3><p>其次我们执行下边的语句，首先是 Schema 定义的语句：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="k">IF</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">EXISTS</span><span class="w"> </span><span class="n">post</span><span class="p">(</span><span class="n">title</span><span class="w"> </span><span class="n">string</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">created_post</span><span class="p">(</span><span class="n">post_time</span><span class="w"> </span><span class="k">timestamp</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">commented_at</span><span class="p">(</span><span class="n">post_time</span><span class="w"> </span><span class="k">timestamp</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="n">address</span><span class="p">(</span><span class="n">address</span><span class="w"> </span><span class="n">string</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w"> </span><span class="o">`</span><span class="n">geo_point</span><span class="o">`</span><span class="w"> </span><span class="n">geography</span><span class="p">(</span><span class="n">point</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="n">place</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="n">string</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w"> </span><span class="o">`</span><span class="n">geo_point</span><span class="o">`</span><span class="w"> </span><span class="n">geography</span><span class="p">(</span><span class="n">point</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">belong_to</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">lived_in</span><span class="p">();</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="加载数据" class="headerLink">
    <a href="#%e5%8a%a0%e8%bd%bd%e6%95%b0%e6%8d%ae" class="header-mark"></a>2.3 加载数据</h3><p>然后，在等两个心跳时间以上之后（20秒），我们可以执行数据插入：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">INSERT</span><span class="w"> </span><span class="n">VERTEX</span><span class="w"> </span><span class="n">post</span><span class="p">(</span><span class="n">title</span><span class="p">)</span><span class="w"> </span><span class="k">values</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;post1&#34;</span><span class="p">:(</span><span class="s2">&#34;a beautify flower&#34;</span><span class="p">),</span><span class="w"> </span><span class="s2">&#34;post2&#34;</span><span class="p">:(</span><span class="s2">&#34;my first bike&#34;</span><span class="p">),</span><span class="w"> </span><span class="s2">&#34;post3&#34;</span><span class="p">:(</span><span class="s2">&#34;I can swim&#34;</span><span class="p">),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;post4&#34;</span><span class="p">:(</span><span class="s2">&#34;I love you, Dad&#34;</span><span class="p">),</span><span class="w"> </span><span class="s2">&#34;post5&#34;</span><span class="p">:(</span><span class="s2">&#34;I hate coriander&#34;</span><span class="p">),</span><span class="w"> </span><span class="s2">&#34;post6&#34;</span><span class="p">:(</span><span class="s2">&#34;my best friend, tom&#34;</span><span class="p">),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;post7&#34;</span><span class="p">:(</span><span class="s2">&#34;my best friend, jerry&#34;</span><span class="p">),</span><span class="w"> </span><span class="s2">&#34;post8&#34;</span><span class="p">:(</span><span class="s2">&#34;Frank, the cat&#34;</span><span class="p">),</span><span class="w"> </span><span class="s2">&#34;post9&#34;</span><span class="p">:(</span><span class="s2">&#34;sushi rocks&#34;</span><span class="p">),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;post10&#34;</span><span class="p">:(</span><span class="s2">&#34;I love you, Mom&#34;</span><span class="p">),</span><span class="w"> </span><span class="s2">&#34;post11&#34;</span><span class="p">:(</span><span class="s2">&#34;Let&#39;s have a party!&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">created_post</span><span class="p">(</span><span class="n">post_time</span><span class="p">)</span><span class="w"> </span><span class="k">values</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player100&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post1&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-01-01 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player111&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post2&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2016-11-23 10:04:50&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player101&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post3&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-11-11 10:44:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player103&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post4&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2014-12-01 20:45:11&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player102&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post5&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2015-03-01 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player104&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post6&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2017-09-21 23:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player125&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post7&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2018-01-01 00:44:23&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player106&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post8&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-01-01 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player117&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post9&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2022-01-01 22:23:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player108&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post10&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2011-01-01 10:00:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player100&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post11&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2021-11-01 11:10:30&#34;</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">commented_at</span><span class="p">(</span><span class="n">post_time</span><span class="p">)</span><span class="w"> </span><span class="k">values</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player105&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post1&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-01-02 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player109&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post1&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2016-11-24 10:04:50&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player113&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post3&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-11-13 10:44:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player101&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post4&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2014-12-04 20:45:11&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player102&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post1&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2015-03-03 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player103&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post1&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2017-09-23 23:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player102&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post7&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2018-01-04 00:44:23&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player101&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post8&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-01-04 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player106&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post9&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2022-01-02 22:23:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player105&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post10&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2011-01-11 10:00:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player130&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post1&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-01-02 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player131&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post2&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2016-11-24 10:04:50&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player131&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post3&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-11-13 10:44:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player133&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post4&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2014-12-04 20:45:11&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player132&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post5&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2015-03-03 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player134&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post6&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2017-09-23 23:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player135&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post7&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2018-01-04 00:44:23&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player136&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post8&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-01-04 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player137&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post9&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2022-01-02 22:23:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player138&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post10&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2011-01-11 10:00:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player141&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post1&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-01-03 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player142&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post2&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2016-11-25 10:04:50&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player143&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post3&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-11-14 10:44:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player144&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post4&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2014-12-05 20:45:11&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player145&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post5&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2015-03-04 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player146&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post6&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2017-09-24 23:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player147&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post7&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2018-01-05 00:44:23&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player148&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post8&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-01-05 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player139&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post9&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2022-01-03 22:23:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player140&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post10&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2011-01-12 10:01:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player141&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post1&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-01-04 00:34:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player102&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post2&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2016-11-26 10:06:50&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player103&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post3&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-11-15 10:45:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player104&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post4&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2014-12-06 20:47:11&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player105&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post5&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2015-03-05 00:32:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player106&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post6&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2017-09-25 23:31:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player107&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post7&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2018-01-06 00:46:23&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player118&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post8&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-01-06 00:35:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player119&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post9&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2022-01-04 22:26:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player110&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post10&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2011-01-15 10:00:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player111&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post1&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-01-06 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player104&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post11&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2022-01-15 10:00:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player125&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post11&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2022-02-15 10:00:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player113&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post11&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2022-03-15 10:00:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player102&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post11&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2022-04-15 10:00:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player108&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post11&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2022-05-15 10:00:30&#34;</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="n">VERTEX</span><span class="w"> </span><span class="o">`</span><span class="n">address</span><span class="o">`</span><span class="w"> </span><span class="p">(</span><span class="o">`</span><span class="n">address</span><span class="o">`</span><span class="p">,</span><span class="w"> </span><span class="o">`</span><span class="n">geo_point</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="k">VALUES</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_0&#34;</span><span class="p">:(</span><span class="s2">&#34;Brittany Forge Apt. 718 East Eric  WV 97881&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_1&#34;</span><span class="p">:(</span><span class="s2">&#34;Richard Curve Kingstad  AZ 05660&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_2&#34;</span><span class="p">:(</span><span class="s2">&#34;Schmidt Key Lake Charles  AL 36174&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">13</span><span class="p">.</span><span class="mi">13</span><span class="p">,</span><span class="o">-</span><span class="mi">87</span><span class="p">.</span><span class="mi">65</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_3&#34;</span><span class="p">:(</span><span class="s2">&#34;5 Joanna Key Suite 704 Frankshire  OK 03035&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_4&#34;</span><span class="p">:(</span><span class="s2">&#34;1 Payne Circle Mitchellfort  LA 73053&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_5&#34;</span><span class="p">:(</span><span class="s2">&#34;2 Klein Mission New Annetteton  HI 05775&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_6&#34;</span><span class="p">:(</span><span class="s2">&#34;1 Vanessa Stravenue Suite 184 Baileyville  NY 46381&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">11</span><span class="p">,</span><span class="mi">12</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_7&#34;</span><span class="p">:(</span><span class="s2">&#34;John Garden Port John  LA 54602&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">13</span><span class="p">,</span><span class="mi">14</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_8&#34;</span><span class="p">:(</span><span class="s2">&#34;11 Webb Groves Tiffanyside  MN 14566&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="mi">16</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_9&#34;</span><span class="p">:(</span><span class="s2">&#34;70 Robinson Locks Suite 113 East Veronica  ND 87845&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">17</span><span class="p">,</span><span class="mi">18</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_10&#34;</span><span class="p">:(</span><span class="s2">&#34;24 Mcknight Port Apt. 028 Sarahborough  MD 38195&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">19</span><span class="p">,</span><span class="mi">20</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_11&#34;</span><span class="p">:(</span><span class="s2">&#34;0337 Mason Corner Apt. 900 Toddmouth  FL 61464&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">21</span><span class="p">,</span><span class="mi">22</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_12&#34;</span><span class="p">:(</span><span class="s2">&#34;7 Davis Station Apt. 691 Pittmanfort  HI 29746&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">23</span><span class="p">,</span><span class="mi">24</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_13&#34;</span><span class="p">:(</span><span class="s2">&#34;1 Southport Street Apt. 098 Westport  KY 85907&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">120</span><span class="p">.</span><span class="mi">12</span><span class="p">,</span><span class="mi">30</span><span class="p">.</span><span class="mi">16</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_14&#34;</span><span class="p">:(</span><span class="s2">&#34;Weber Unions Eddieland  MT 64619&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">25</span><span class="p">,</span><span class="mi">26</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_15&#34;</span><span class="p">:(</span><span class="s2">&#34;1 Amanda Freeway Lisaland  NJ 94933&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">27</span><span class="p">,</span><span class="mi">28</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_16&#34;</span><span class="p">:(</span><span class="s2">&#34;2 Klein HI 05775&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_17&#34;</span><span class="p">:(</span><span class="s2">&#34;Schmidt Key Lake Charles AL 13617&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">13</span><span class="p">.</span><span class="mi">12</span><span class="p">,</span><span class="w"> </span><span class="o">-</span><span class="mi">87</span><span class="p">.</span><span class="mi">60</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_18&#34;</span><span class="p">:(</span><span class="s2">&#34;Rodriguez Track East Connorfort  NC 63144&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">29</span><span class="p">,</span><span class="mi">30</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="n">VERTEX</span><span class="w"> </span><span class="o">`</span><span class="n">place</span><span class="o">`</span><span class="w"> </span><span class="p">(</span><span class="o">`</span><span class="n">name</span><span class="o">`</span><span class="p">,</span><span class="w"> </span><span class="o">`</span><span class="n">geo_point</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="k">VALUES</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;WV&#34;</span><span class="p">:(</span><span class="s2">&#34;West Virginia&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">.</span><span class="mi">5</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;AZ&#34;</span><span class="p">:(</span><span class="s2">&#34;Arizona&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">.</span><span class="mi">5</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;AL&#34;</span><span class="p">:(</span><span class="s2">&#34;Alabama&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">13</span><span class="p">.</span><span class="mi">13</span><span class="p">,</span><span class="o">-</span><span class="mi">87</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;OK&#34;</span><span class="p">:(</span><span class="s2">&#34;Oklahoma&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">.</span><span class="mi">1</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;LA&#34;</span><span class="p">:(</span><span class="s2">&#34;Louisiana&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">.</span><span class="mi">1</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;HI&#34;</span><span class="p">:(</span><span class="s2">&#34;Hawaii&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="p">.</span><span class="mi">1</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;NY&#34;</span><span class="p">:(</span><span class="s2">&#34;New York&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">11</span><span class="p">,</span><span class="mi">12</span><span class="p">.</span><span class="mi">1</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;MN&#34;</span><span class="p">:(</span><span class="s2">&#34;Minnesota&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="mi">16</span><span class="p">.</span><span class="mi">1</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;ND&#34;</span><span class="p">:(</span><span class="s2">&#34;North Dakota&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">17</span><span class="p">,</span><span class="mi">18</span><span class="p">.</span><span class="mi">1</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;FL&#34;</span><span class="p">:(</span><span class="s2">&#34;Florida&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">21</span><span class="p">,</span><span class="mi">22</span><span class="p">.</span><span class="mi">1</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;KY&#34;</span><span class="p">:(</span><span class="s2">&#34;Kentucky&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">120</span><span class="p">.</span><span class="mi">12</span><span class="p">,</span><span class="mi">30</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;MT&#34;</span><span class="p">:(</span><span class="s2">&#34;Montana&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">25</span><span class="p">,</span><span class="mi">26</span><span class="p">.</span><span class="mi">1</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;NJ&#34;</span><span class="p">:(</span><span class="s2">&#34;New Jersey&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">27</span><span class="p">,</span><span class="mi">28</span><span class="p">.</span><span class="mi">1</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;NC&#34;</span><span class="p">:(</span><span class="s2">&#34;North Carolina&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">29</span><span class="p">,</span><span class="mi">30</span><span class="p">.</span><span class="mi">1</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="o">`</span><span class="n">belong_to</span><span class="o">`</span><span class="p">()</span><span class="w"> </span><span class="k">VALUES</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_0&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;WV&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_1&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;AZ&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_2&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;AL&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_3&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;OK&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_4&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;LA&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_5&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;HI&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_6&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;NY&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_7&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;LA&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_8&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;MN&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_9&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;ND&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_10&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;MD&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_11&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;FL&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_12&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;HI&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_13&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;KY&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_14&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;MT&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_15&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;NJ&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_16&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;HI&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_17&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;AL&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_18&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;NC&#34;</span><span class="p">:();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="o">`</span><span class="n">lived_in</span><span class="o">`</span><span class="p">()</span><span class="w"> </span><span class="k">VALUES</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player100&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_4&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player101&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_7&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player102&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_2&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player103&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_3&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player104&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_0&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player105&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_5&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player106&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_6&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player107&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_1&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player108&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_8&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player109&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_9&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player110&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_10&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player111&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_11&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player112&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_12&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player113&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_13&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player114&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_14&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player115&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_15&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player116&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_16&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player117&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_17&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player118&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_18&#34;</span><span class="p">:();</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="数据初探" class="headerLink">
    <a href="#%e6%95%b0%e6%8d%ae%e5%88%9d%e6%8e%a2" class="header-mark"></a>2.4 数据初探</h3><p>首先，我们看看数据统计</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="p">[</span><span class="n">basketballplayer</span><span class="p">]</span><span class="o">&gt;</span><span class="w"> </span><span class="n">SUBMIT</span><span class="w"> </span><span class="n">JOB</span><span class="w"> </span><span class="n">STATS</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">------------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="k">New</span><span class="w"> </span><span class="n">Job</span><span class="w"> </span><span class="n">Id</span><span class="w"> </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">------------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="mi">10</span><span class="w">         </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">------------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">[</span><span class="n">basketballplayer</span><span class="p">]</span><span class="o">&gt;</span><span class="w"> </span><span class="k">SHOW</span><span class="w"> </span><span class="n">STATS</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">---------+----------------+-------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="k">Type</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="n">Name</span><span class="w">           </span><span class="o">|</span><span class="w"> </span><span class="k">Count</span><span class="w"> </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">---------+----------------+-------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Tag&#34;</span><span class="w">   </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;address&#34;</span><span class="w">      </span><span class="o">|</span><span class="w"> </span><span class="mi">19</span><span class="w">    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Tag&#34;</span><span class="w">   </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;place&#34;</span><span class="w">        </span><span class="o">|</span><span class="w"> </span><span class="mi">14</span><span class="w">    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Tag&#34;</span><span class="w">   </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;player&#34;</span><span class="w">       </span><span class="o">|</span><span class="w"> </span><span class="mi">51</span><span class="w">    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Tag&#34;</span><span class="w">   </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;post&#34;</span><span class="w">         </span><span class="o">|</span><span class="w"> </span><span class="mi">10</span><span class="w">    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Tag&#34;</span><span class="w">   </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;team&#34;</span><span class="w">         </span><span class="o">|</span><span class="w"> </span><span class="mi">30</span><span class="w">    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Edge&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;belong_to&#34;</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="mi">19</span><span class="w">    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Edge&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;commented_at&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="mi">40</span><span class="w">    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Edge&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;created_post&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="mi">10</span><span class="w">    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Edge&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;follow&#34;</span><span class="w">       </span><span class="o">|</span><span class="w"> </span><span class="mi">81</span><span class="w">    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Edge&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;lived_in&#34;</span><span class="w">     </span><span class="o">|</span><span class="w"> </span><span class="mi">19</span><span class="w">    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Edge&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;serve&#34;</span><span class="w">        </span><span class="o">|</span><span class="w"> </span><span class="mi">152</span><span class="w">   </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Space&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;vertices&#34;</span><span class="w">     </span><span class="o">|</span><span class="w"> </span><span class="mi">124</span><span class="w">   </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Space&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;edges&#34;</span><span class="w">        </span><span class="o">|</span><span class="w"> </span><span class="mi">321</span><span class="w">   </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">---------+----------------+-------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Got</span><span class="w"> </span><span class="mi">13</span><span class="w"> </span><span class="k">rows</span><span class="w"> </span><span class="p">(</span><span class="n">time</span><span class="w"> </span><span class="n">spent</span><span class="w"> </span><span class="mi">1038</span><span class="o">/</span><span class="mi">51372</span><span class="w"> </span><span class="n">us</span><span class="p">)</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>查一下所有的数据</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">()</span><span class="o">-</span><span class="p">[</span><span class="n">e</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">()</span><span class="w"> </span><span class="k">RETURN</span><span class="w"> </span><span class="n">e</span><span class="w"> </span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">10000</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>因为数据量太小了，所以可以把所有数据在 NebulaGraph Explorer 中渲染出来：</p>
<p><a class="lightgallery" href="/nebulagraph-sns/match_all.webp" title="match_all" data-thumbnail="/nebulagraph-sns/match_all.webp">
        
    </a></p>
<h2 id="找出网络中的关键人物" class="headerLink">
    <a href="#%e6%89%be%e5%87%ba%e7%bd%91%e7%bb%9c%e4%b8%ad%e7%9a%84%e5%85%b3%e9%94%ae%e4%ba%ba%e7%89%a9" class="header-mark"></a>3 找出网络中的关键人物</h2><p>识别社交网络中的有影响的关键人物们（influencers）涉及使用各种指标和方法来识别在特定网络中拥有大量影响力的个人。这对很多业务场景都有帮助都很有用，比如用于营销或研究网络中的信息传播。</p>
<p>识别他们的方法有很多，具体的方法和考量的信息、关系、角度也取决于这些关键人物的类型、和获取他们的目的。</p>
<p>一些常见的方法包括看一个人拥有的粉丝或内容被消费的数量，他们在其帖子、视频上读者的参与度，以及他们的内容的影响力（转发、引用）。这些方法在图上也是可以做的，但是比较平凡，我就不举例了，在这里，我们可以试着用评估、计算节点重要性的图算法，在图上得出这些关键人物。</p>
<h3 id="pagerank" class="headerLink">
    <a href="#pagerank" class="header-mark"></a>3.1 PageRank</h3><p>PageRank 是一个非常“古老的”图算法，它通过考虑图上点之间的关系数量去迭代，得到每一个点的得分（Rank），最初由 Google 的创始人 Larry Page 和 Sergey Brin 提出并应用在早期的 Google 搜索引擎中，用来排序搜索结果，这里的 Page 可以是 Larry Page 的姓和 Web Page 的双关了。</p>
<p>在现代、复杂的搜索引擎中，PageRank 早就因为其过于简单而被弃用，但是在其他图结构网络场景中，PageRank 仍然在发光发热，社交网络中我们可以粗略地认为所有链接的重要程度类似，去运行这个算法找出那些关键的用户。</p>
<p>在 NebulaGraph 中，我们可以利用 NebulaGraph Algorithm、NebulaGraph Analytics 去在大的全图上运行 PageRank，而在日常的分析、验证、设计阶段，我们不需要在全量数据上跑结果，而在很小的子图上（最多上万），我们可以轻松地在浏览器里边运行各种图算法去得出线上业务可以用的方法。</p>
<p>今天，我们就用 NebulaGraph Explorer 内置的浏览器内图算法功能执行一下 PageRank 看看（具体方法这里略去，可以参考<a href="https://docs.nebula-graph.com.cn/3.3.0/nebula-explorer/graph-explorer/graph-algorithm/" target="_blank" rel="noopener noreferrer">文档</a>，不过其实就是点一下鼠标的事儿）：</p>
<p><a class="lightgallery" href="/nebulagraph-sns/PageRank.webp" title="PageRank" data-thumbnail="/nebulagraph-sns/PageRank.webp">
        
    </a></p>
<p>我们可以从上边看到，PageRank 计算之后所有绿色的 player（人）中，&ldquo;player.name: Tim Duncan&rdquo; 是最大的一个点，与之相关联的关系看起来的确不少，我们在图上选择他，再右键反选，选择除了 Tim Duncan 之外的所有点，用退格键删除所有其他的点，然后在他作为起点双向探索出1到5步，可以得到 Tim Duncan 的子图：</p>
<p><a class="lightgallery" href="/nebulagraph-sns/TimDuncan.webp" title="TimDuncan" data-thumbnail="/nebulagraph-sns/TimDuncan.webp">
        
    </a></p>
<p>从子图中可以看到 Tim Duncan 和非常多其他球员有关注的关系的同时，一些其他很受欢迎的队员和他一起一样服役过非常热门的热刺（Spurs）队，这些都印证了 PageRank 的评估方式。</p>
<p>现在我们再看看其他判定维度下的算法会不会得出一样的结论呢？</p>
<h3 id="betweenness-centrality" class="headerLink">
    <a href="#betweenness-centrality" class="header-mark"></a>3.2 Betweenness Centrality</h3><p>作为另一个流行的节点重要性算法，通过计算一个节点对于图中的中介、桥梁作用来衡量节点的重要性，这里的桥梁作用是有数学定义的量化算法，这里就不展开说了，不过从感官上可以看出它是另一个角度很符合直觉地去评估重要性的方法。</p>
<p>我们重新在画布上查询所有的点边之后，在浏览器里运行 Betweenness Centrality 算法，这次的结果是：</p>
<p><a class="lightgallery" href="/nebulagraph-sns/Betweeness_centrality.webp" title="Betweeness_centrality" data-thumbnail="/nebulagraph-sns/Betweeness_centrality.webp">
        
    </a></p>
<p>从它的五跳内子图可以看出，与之前 PageRank 所得的关键人物 Tim Duncan 呈现的星星状态不同，Dejounte Murray 的子图呈现簇状，在感官、直觉上可以想象 Dejounte Murray 真的在很多节点之间的最小路径的必经之路上，而 Tim Duncan 则似乎和更多的重要连接者产生了关联。</p>
<p><a class="lightgallery" href="/nebulagraph-sns/DejounteMurray.webp" title="DejounteMurray" data-thumbnail="/nebulagraph-sns/DejounteMurray.webp">
        
    </a></p>
<p>在实际的应用场景中，我们通常要通过不同方式的定义的理解、不同执行结果的试验、分析去找到我们关注的关键人物产生影响的结构特征，用来针对不同需求选择不同的算法。</p>
<h2 id="找出社区聚集群体" class="headerLink">
    <a href="#%e6%89%be%e5%87%ba%e7%a4%be%e5%8c%ba%e8%81%9a%e9%9b%86%e7%be%a4%e4%bd%93" class="header-mark"></a>4 找出社区、聚集群体</h2><p>社交网络中的社区检测是一种通过分析社交关系来发现社区结构的技术。社区结构是指在社交网络、图谱中相互联系密切的一组节点，这些节点通常具有相似的特征或兴趣。例如，社区结构可能表现为用户根据共同的话题或兴趣聚集在一起的一组用户。</p>
<p>社区检测的目的是通过对社交网络进行分析，找出不同社区的边界，并确定每个社区中的节点。这一过程可以通过使用各种算法来完成，例如标签传播算法、弱联通分量算法和 Louvain 算法等。通过发现社区结构，可以更好地了解社交网络的结构和特征，并有助于社交网络服务提供方更好地推断和预测社交网络中的行为，帮助做好社交网络的治理、广告投放、市场营销等。</p>
<p>由于我们的数据集是非真实的，我在不同的算法之下得出的结果并不能展现出真实的意涵，所以本章只是展示一下利用几个图算法进行社区识别之后的结果，在真实世界的案例中，我们还应该在此基础之上利用领域知识或者其他技术手段协同给出不同群体、社区的画像、标签。</p>
<p>标签传播算法效果：</p>
<p><a class="lightgallery" href="/nebulagraph-sns/LPA.webp" title="LPA" data-thumbnail="/nebulagraph-sns/LPA.webp">
        
    </a></p>
<p>Louvain 算法效果：</p>
<p><a class="lightgallery" href="/nebulagraph-sns/Louvain.webp" title="Louvain" data-thumbnail="/nebulagraph-sns/Louvain.webp">
        
    </a></p>
<p>弱联通分量算法效果：</p>
<p><a class="lightgallery" href="/nebulagraph-sns/WCC.webp" title="WCC" data-thumbnail="/nebulagraph-sns/WCC.webp">
        
    </a></p>
<p>在后边的章节，我们有机会可以在更小、更简单的子图上再次验证这几个算法，结果会更有可解释性一些。</p>
<h2 id="好友亲密度" class="headerLink">
    <a href="#%e5%a5%bd%e5%8f%8b%e4%ba%b2%e5%af%86%e5%ba%a6" class="header-mark"></a>5 好友亲密度</h2><p>通过社区识别算法，其实是能够在一定程度上，在全局计算获得兴趣相近、关联紧密的好友的。那么如何获得一个给定用户的其他亲密好友呢？我们可以通过计算这个用户的好友中，和他共同好友的个数来排序获得这一信息！</p>
<p>我们拿 &ldquo;Tim Duncan&rdquo; 举例，我们知道，他的两度好友（好友的好友：<code>(:player{name: &quot;Tim Duncan&quot;})-[:follow]-(f:player)-[:follow]-(fof:player)</code>）如果同时也是他的好友的话，那么他们这个中间的好友就是他和这个朋友的共同好友（Mutual Friend），那么有理由相信那些和 Tim Duncan 有更多共同好友的人可能跟他有更高亲密度：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">start</span><span class="p">:</span><span class="o">`</span><span class="n">player</span><span class="o">`</span><span class="err">{</span><span class="n">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Tim Duncan&#34;</span><span class="err">}</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">f</span><span class="p">:</span><span class="o">`</span><span class="n">player</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">fof</span><span class="p">:</span><span class="o">`</span><span class="n">player</span><span class="o">`</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="n">start</span><span class="p">:</span><span class="o">`</span><span class="n">player</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">fof</span><span class="p">:</span><span class="o">`</span><span class="n">player</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">fof</span><span class="p">.</span><span class="o">`</span><span class="n">player</span><span class="o">`</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="nf">count</span><span class="p">(</span><span class="k">DISTINCT</span><span class="w"> </span><span class="n">f</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">NrOfMutualF</span><span class="w"> </span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">NrOfMutualF</span><span class="w"> </span><span class="k">DESC</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这个计算结果是，&ldquo;Tony Parker&rdquo; 和 Tim 有 5 个共同好友，最为亲密。</p>
<table>
<thead>
<tr>
<th style="text-align:left">fof.player.name</th>
<th style="text-align:left">NrOfMutualF</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Tony Parker</td>
<td style="text-align:left">5</td>
</tr>
<tr>
<td style="text-align:left">Dejounte Murray</td>
<td style="text-align:left">4</td>
</tr>
<tr>
<td style="text-align:left">Manu Ginobili</td>
<td style="text-align:left">3</td>
</tr>
<tr>
<td style="text-align:left">Marco Belinelli</td>
<td style="text-align:left">3</td>
</tr>
<tr>
<td style="text-align:left">Danny Green</td>
<td style="text-align:left">2</td>
</tr>
<tr>
<td style="text-align:left">Boris Diaw</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">LaMarcus Aldridge</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">Tiago Splitter</td>
<td style="text-align:left">1</td>
</tr>
</tbody>
</table>
<p>下面，咱们通过可视化来验证一下这个结果吧！</p>
<p>先看看每一个好友的共同好友(f:)都是谁？</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">start</span><span class="p">:</span><span class="n">player</span><span class="err">{</span><span class="n">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Tim Duncan&#34;</span><span class="err">}</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">f</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">fof</span><span class="p">:</span><span class="n">player</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="n">start</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">fof</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">fof</span><span class="p">.</span><span class="n">player</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="nf">collect</span><span class="p">(</span><span class="k">DISTINCT</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">player</span><span class="p">.</span><span class="n">name</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>结果如下：</p>
<table>
<thead>
<tr>
<th style="text-align:left">fof.player.name</th>
<th style="text-align:left">collect(distinct f.player.name)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Boris Diaw</td>
<td style="text-align:left">[&ldquo;Tony Parker&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Manu Ginobili</td>
<td style="text-align:left">[&ldquo;Dejounte Murray&rdquo;, &ldquo;Tiago Splitter&rdquo;, &ldquo;Tony Parker&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">LaMarcus Aldridge</td>
<td style="text-align:left">[&ldquo;Tony Parker&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Tiago Splitter</td>
<td style="text-align:left">[&ldquo;Manu Ginobili&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Tony Parker</td>
<td style="text-align:left">[&ldquo;Dejounte Murray&rdquo;, &ldquo;Boris Diaw&rdquo;, &ldquo;Manu Ginobili&rdquo;, &ldquo;Marco Belinelli&rdquo;, &ldquo;LaMarcus Aldridge&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Dejounte Murray</td>
<td style="text-align:left">[&ldquo;Danny Green&rdquo;, &ldquo;Tony Parker&rdquo;, &ldquo;Manu Ginobili&rdquo;, &ldquo;Marco Belinelli&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Danny Green</td>
<td style="text-align:left">[&ldquo;Dejounte Murray&rdquo;, &ldquo;Marco Belinelli&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Marco Belinelli</td>
<td style="text-align:left">[&ldquo;Dejounte Murray&rdquo;, &ldquo;Danny Green&rdquo;, &ldquo;Tony Parker&rdquo;]</td>
</tr>
</tbody>
</table>
<p>然后我们在 Explorer 上可视化一下这个结果：</p>
<ul>
<li>首先，我们把 Tim 的量度好友路径全查出来</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">start</span><span class="p">:</span><span class="n">player</span><span class="err">{</span><span class="n">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Tim Duncan&#34;</span><span class="err">}</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">f</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">follow</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">fof</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>然后我们在其中按照度去渲染节点大小，并选中 Tim 和 Tony，并在两者之间查询 follow 类型边、双向、最多 2 跳的全部路径：</li>
</ul>
<p>可以看出他们之间是最亲密的朋友没跑了，而且他们的共同好友也在路径之中：</p>
<p><code>[&quot;Dejounte Murray&quot;, &quot;Boris Diaw&quot;, &quot;Manu Ginobili&quot;, &quot;Marco Belinelli&quot;, &quot;LaMarcus Aldridge&quot;]</code></p>
<p><a class="lightgallery" href="/nebulagraph-sns/closest_friend.webp" title="closest_friend" data-thumbnail="/nebulagraph-sns/closest_friend.webp">
        
    </a></p>
<h3 id="朋友圈子里的小群体" class="headerLink">
    <a href="#%e6%9c%8b%e5%8f%8b%e5%9c%88%e5%ad%90%e9%87%8c%e7%9a%84%e5%b0%8f%e7%be%a4%e4%bd%93" class="header-mark"></a>5.1 朋友圈子里的小群体</h3><p>这时候，如前边提到，这份数据集本身的非真实性，使得社区发现算法的结果不能得到其中洞察的内涵，现在我们可以接着这个小的子图，看看 Tim 的好友中可以如何区分群组、社区呢，咱们跑一个 Louvain 、弱联通分量、标签传播看看：</p>
<ul>
<li>弱联通分量，可以把 Tim 等朋友们大体分割出两三个相互不连通的部分，非常符合连通分量的直观理解和定义。</li>
</ul>
<p><a class="lightgallery" href="/nebulagraph-sns/Tim_wcc.webp" title="Tim_wcc" data-thumbnail="/nebulagraph-sns/Tim_wcc.webp">
        
    </a></p>
<ul>
<li>
<p>标签传播，我们可以通过控制迭代次数按需去通过随机的传播划定出不同的划分度，结果可以有一定的区分度：</p>
<p>20 次迭代</p>
<p><a class="lightgallery" href="/nebulagraph-sns/Tim_LPA.webp" title="Tim_LPA" data-thumbnail="/nebulagraph-sns/Tim_LPA.webp">
        
    </a></p>
<p>1000 次迭代</p>
<p><a class="lightgallery" href="/nebulagraph-sns/Tim_LPA_1000.webp" title="Tim_LPA_1000" data-thumbnail="/nebulagraph-sns/Tim_LPA_1000.webp">
        
    </a></p>
</li>
<li>
<p>Louvain，是一个比较高效、稳定的算法，基本上在这个子图下我们可以在很小的迭代次数下得到很符合直觉的划分：</p>
</li>
</ul>
<p><a class="lightgallery" href="/nebulagraph-sns/Tim_Louvain.webp" title="Tim_Louvain" data-thumbnail="/nebulagraph-sns/Tim_Louvain.webp">
        
    </a></p>
<h2 id="新朋友推荐" class="headerLink">
    <a href="#%e6%96%b0%e6%9c%8b%e5%8f%8b%e6%8e%a8%e8%8d%90" class="header-mark"></a>6 新朋友推荐</h2><p>接着前边二度朋友（朋友的朋友）的思路，我们可以很容易把那些还不是朋友的二度朋友作为推荐添加的好友，而排序规则则是他们之间的共同好友数量：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">start</span><span class="p">:</span><span class="n">player</span><span class="err">{</span><span class="n">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Tim Duncan&#34;</span><span class="err">}</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">f</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">fof</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="p">(</span><span class="n">start</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">fof</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">fof</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">start</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">fof</span><span class="p">.</span><span class="n">player</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="nf">count</span><span class="p">(</span><span class="k">DISTINCT</span><span class="w"> </span><span class="n">f</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">NrOfMutualF</span><span class="w"> </span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">NrOfMutualF</span><span class="w"> </span><span class="k">DESC</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><table>
<thead>
<tr>
<th style="text-align:left">fof.player.name</th>
<th style="text-align:left">NrOfMutualF</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">LeBron James</td>
<td style="text-align:left">2</td>
</tr>
<tr>
<td style="text-align:left">James Harden</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">Chris Paul</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">Yao Ming</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">Damian Lillard</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">JaVale McGee</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">Kevin Durant</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">Kyle Anderson</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">Rudy Gay</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">Russell Westbrook</td>
<td style="text-align:left">1</td>
</tr>
</tbody>
</table>
<p>显然，LeBron 最值得推荐！再看看这些共同好友都是谁？</p>
<table>
<thead>
<tr>
<th style="text-align:left">fof.player.name</th>
<th style="text-align:left">collect(distinct f.player.name)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">James Harden</td>
<td style="text-align:left">[&ldquo;Dejounte Murray&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">LeBron James</td>
<td style="text-align:left">[&ldquo;Danny Green&rdquo;, &ldquo;Dejounte Murray&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Chris Paul</td>
<td style="text-align:left">[&ldquo;Dejounte Murray&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Yao Ming</td>
<td style="text-align:left">[&ldquo;Shaquille O&rsquo;Neal&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Damian Lillard</td>
<td style="text-align:left">[&ldquo;LaMarcus Aldridge&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">JaVale McGee</td>
<td style="text-align:left">[&ldquo;Shaquille O&rsquo;Neal&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Kevin Durant</td>
<td style="text-align:left">[&ldquo;Dejounte Murray&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Kyle Anderson</td>
<td style="text-align:left">[&ldquo;Dejounte Murray&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Rudy Gay</td>
<td style="text-align:left">[&ldquo;LaMarcus Aldridge&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Russell Westbrook</td>
<td style="text-align:left">[&ldquo;Dejounte Murray&rdquo;]</td>
</tr>
</tbody>
</table>
<p>同样，我们在刚才的子图里找找 LeBron James 吧！我们把它俩之间的两步、双向路径找出来，果然只会经过 <code>[&quot;Danny Green&quot;, &quot;Dejounte Murray&quot;]</code> 并且，没有直接的连接：</p>
<p><a class="lightgallery" href="/nebulagraph-sns/Tim_newFriend.webp" title="Tim_newFriend" data-thumbnail="/nebulagraph-sns/Tim_newFriend.webp">
        
    </a></p>
<p>现在，系统会给两边发提醒：“hey，也许你们应该交个朋友！”</p>
<h2 id="共同邻居" class="headerLink">
    <a href="#%e5%85%b1%e5%90%8c%e9%82%bb%e5%b1%85" class="header-mark"></a>7 共同邻居</h2><p>查找共同邻居是一个很常见的图库查询，它的场景可能根据不同的邻居关系，节点类型，同构、异构，带来不同的场景，前边两个场景下的共同好友本质上是两点之间的共同邻居，直接查询这样的关系用 OpenCypher 的表达非常简单。</p>
<h3 id="两点之间的共同邻居" class="headerLink">
    <a href="#%e4%b8%a4%e7%82%b9%e4%b9%8b%e9%97%b4%e7%9a%84%e5%85%b1%e5%90%8c%e9%82%bb%e5%b1%85" class="header-mark"></a>7.1 两点之间的共同邻居</h3><p>比如这个表达可以查询两个用户之间的共性、交集，结果可能是共同团队、去过的地方、兴趣爱好、共同参与的帖子回复等等：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="o">`</span><span class="n">v0</span><span class="o">`</span><span class="p">)</span><span class="o">--</span><span class="p">()</span><span class="o">--</span><span class="p">(</span><span class="o">`</span><span class="n">v1</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="o">`</span><span class="n">v0</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;player100&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="o">`</span><span class="n">v1</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;player104&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>而限定了边的类型之后，这个查询就限定在共同好友的查询了。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">v0</span><span class="p">)</span><span class="o">--</span><span class="p">(:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">)</span><span class="o">--</span><span class="p">(</span><span class="n">v1</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">v0</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;player100&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">v1</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;player104&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="多点之间的共同邻居内容推送" class="headerLink">
    <a href="#%e5%a4%9a%e7%82%b9%e4%b9%8b%e9%97%b4%e7%9a%84%e5%85%b1%e5%90%8c%e9%82%bb%e5%b1%85%e5%86%85%e5%ae%b9%e6%8e%a8%e9%80%81" class="header-mark"></a>7.2 多点之间的共同邻居：内容推送</h3><p>下面，我们给出一个多点共同邻居的场景，我们从一个文章触发，查出所有在这个文章上有互动的用户，找到这一群体中的共同邻居。</p>
<p>这个共同邻居有什么用处呢？很自然，如果这个共同邻居还没有和这个文章有任何交互，我们可以把这个文章推荐给他。</p>
<p>这个查询的实现很有意思：</p>
<ul>
<li>第一个 MATCH 是查到所有 post11 文章下留言和作者这些人的总人数</li>
<li>在第二个 MATCH 之后，我们查到所有这群人的一度好友路径中，这些文章过的交互用户的一度好友的参与过文章的朋友数量刚好等于这个参与文章的用户的数量的这些人，他们其实就是这些所有参与用户的共同好友。</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">blog</span><span class="p">:</span><span class="n">post</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[</span><span class="n">e</span><span class="p">]</span><span class="o">-</span><span class="p">(:</span><span class="n">player</span><span class="p">)</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">blog</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;post11&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">blog</span><span class="p">,</span><span class="w"> </span><span class="nf">count</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">invoved_user_count</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">blog</span><span class="p">:</span><span class="n">post</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[]</span><span class="o">-</span><span class="p">(</span><span class="n">users</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">common_neighbor</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="nf">toSet</span><span class="p">(</span><span class="nf">collect</span><span class="p">(</span><span class="n">users</span><span class="p">))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">users</span><span class="p">,</span><span class="w"> </span><span class="n">common_neighbor</span><span class="p">,</span><span class="w"> </span><span class="n">invoved_user_count</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">size</span><span class="p">(</span><span class="n">users</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">invoved_user_count</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">common_neighbor</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>而这个人就是&hellip;Tony！</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">+-----------------------------------------------------+
</span></span><span class="line"><span class="cl">| common_neighbor                                     |
</span></span><span class="line"><span class="cl">+-----------------------------------------------------+
</span></span><span class="line"><span class="cl">| (&#34;player101&#34; :player{age: 36, name: &#34;Tony Parker&#34;}) |
</span></span><span class="line"><span class="cl">+-----------------------------------------------------+
</span></span></code></pre></td></tr></table>
</div>
</div><p>而我们可以很容易在可视化中国验证它：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">blog</span><span class="p">:</span><span class="n">post</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[]</span><span class="o">-</span><span class="p">(</span><span class="n">users</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">common_neighbor</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">blog</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;post11&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>渲染这个查询结果，然后再这篇叫做 &ldquo;Let&rsquo;s have a party!&rdquo; 的文章与 Tony 之间查找评论、po文、关注三类边的双向、两跳查询，就可以看到这些参与文章的人们无一例外，都是 Tony 的好友，而只有 Tony 自己还没去文章里留言！</p>
<p>而 Party 怎么可以少了 Tony 呢？难道是他的惊喜生日 Party，Opps，我们是不是不应该告诉他？</p>
<p><a class="lightgallery" href="/nebulagraph-sns/common_nbrs_tony.webp" title="common_nbrs_tony" data-thumbnail="/nebulagraph-sns/common_nbrs_tony.webp">
        
    </a></p>
<h2 id="信息流" class="headerLink">
    <a href="#%e4%bf%a1%e6%81%af%e6%b5%81" class="header-mark"></a>8 信息流</h2><p>我在之前写过基于图技术的推荐系统实现方法，其中描述了现代推荐系统中内容过滤、排序方法可以在图谱上进行，社交网络中有一点相似但又不同的场景是信息流（Feed），它的产生类似于推荐系统中的个性化，同时有具有很高的时效性，借助于包含了内容行为知识的社交图谱可以很直观、高效去实现个性化的信息流生成。</p>
<h3 id="好友参与的内容" class="headerLink">
    <a href="#%e5%a5%bd%e5%8f%8b%e5%8f%82%e4%b8%8e%e7%9a%84%e5%86%85%e5%ae%b9" class="header-mark"></a>8.1 好友参与的内容</h3><p>最简单、直接的信息流定义可能就是在朋友圈、微博 feed 上刷一下关注的人创建、参与的内容列表了，先不考虑排序的问题，这些内容一定是：</p>
<ul>
<li>一定时间段内好友创建的内容</li>
<li>一定时间端内好友评论的内容</li>
</ul>
<p>我们可以用 cypher 表达这个查询用户 id 为 player100 的信息流：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">feed_owner</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">friend</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">feed_owner</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;player100&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">friend</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">newly_commented</span><span class="p">:</span><span class="n">commented_at</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(:</span><span class="n">post</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">created_post</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">feed_owner</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="n">newly_commented</span><span class="p">.</span><span class="n">post_time</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="kt">timestamp</span><span class="p">(</span><span class="s2">&#34;2010-01-01 00:00:00&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">friend</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">newly_created</span><span class="p">:</span><span class="n">created_post</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">po</span><span class="p">:</span><span class="n">post</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="n">newly_created</span><span class="p">.</span><span class="n">post_time</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="kt">timestamp</span><span class="p">(</span><span class="s2">&#34;2010-01-01 00:00:00&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="k">DISTINCT</span><span class="w"> </span><span class="n">friend</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nf">collect</span><span class="p">(</span><span class="k">DISTINCT</span><span class="w"> </span><span class="n">po</span><span class="p">.</span><span class="n">post</span><span class="p">.</span><span class="n">title</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nf">collect</span><span class="p">(</span><span class="s2">&#34;comment of &#34;</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nf">dst</span><span class="p">(</span><span class="n">newly_commented</span><span class="p">))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">AS</span><span class="w"> </span><span class="n">feeds</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">size</span><span class="p">(</span><span class="n">feeds</span><span class="p">)</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">friend</span><span class="p">.</span><span class="n">player</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">feeds</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><table>
<thead>
<tr>
<th style="text-align:left">friend.player.name</th>
<th style="text-align:left">feeds</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Boris Diaw</td>
<td style="text-align:left">[&ldquo;I love you, Mom&rdquo;, &ldquo;comment of post11&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Marco Belinelli</td>
<td style="text-align:left">[&ldquo;my best friend, tom&rdquo;, &ldquo;comment of post11&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Danny Green</td>
<td style="text-align:left">[&ldquo;comment of post1&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Tiago Splitter</td>
<td style="text-align:left">[&ldquo;comment of post1&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Dejounte Murray</td>
<td style="text-align:left">[&ldquo;comment of post11&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Tony Parker</td>
<td style="text-align:left">[&ldquo;I can swim&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">LaMarcus Aldridge</td>
<td style="text-align:left">[&ldquo;I hate coriander&rdquo;, &ldquo;comment of post11&rdquo;, &ldquo;comment of post1&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Manu Ginobili</td>
<td style="text-align:left">[&ldquo;my best friend, jerry&rdquo;, &ldquo;comment of post11&rdquo;, &ldquo;comment of post11&rdquo;]</td>
</tr>
</tbody>
</table>
<p>于是，我们可以把这些评论、文章发送到用户的 feed 之上了。</p>
<p>我们也来看看他们在图上的样子吧，我们输出所有查到的路径：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">feed_owner</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">friend</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">feed_owner</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;player100&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="n">p_comment</span><span class="o">=</span><span class="p">(</span><span class="n">friend</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">newly_commented</span><span class="p">:</span><span class="n">commented_at</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(:</span><span class="n">post</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">created_post</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">feed_owner</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="n">newly_commented</span><span class="p">.</span><span class="n">post_time</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="kt">timestamp</span><span class="p">(</span><span class="s2">&#34;2010-01-01 00:00:00&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="n">p_post</span><span class="o">=</span><span class="p">(</span><span class="n">friend</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">newly_created</span><span class="p">:</span><span class="n">created_post</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">po</span><span class="p">:</span><span class="n">post</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="n">newly_created</span><span class="p">.</span><span class="n">post_time</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="kt">timestamp</span><span class="p">(</span><span class="s2">&#34;2010-01-01 00:00:00&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="p">,</span><span class="w"> </span><span class="n">p_comment</span><span class="p">,</span><span class="w"> </span><span class="n">p_post</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>渲染在 Explorer 上，选择“神经网络”这个布局，可以很清晰看出这些粉色的文章节点，还有代表评论的边。</p>
<p><a class="lightgallery" href="/nebulagraph-sns/feed_from_friends.webp" title="feed_from_friends" data-thumbnail="/nebulagraph-sns/feed_from_friends.webp">
        
    </a></p>
<h3 id="附近好友的内容" class="headerLink">
    <a href="#%e9%99%84%e8%bf%91%e5%a5%bd%e5%8f%8b%e7%9a%84%e5%86%85%e5%ae%b9" class="header-mark"></a>8.2 附近好友的内容</h3><p>我们再进一步，把地理信息考虑进来，获取那些住址的经纬度小于一定距离朋友相关的内容。</p>
<p>这里，我们用到了 NebulaGraph 的 GeoSpatial 地理功能，<code>ST_Distance(home.address.geo_point, friend_addr.address.geo_point) AS distance WHERE distance &lt; 1000000</code> 的约束条件帮我们表达了距离的限制。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">home</span><span class="p">:</span><span class="n">address</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">lived_in</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">feed_owner</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">friend</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">lived_in</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">friend_addr</span><span class="p">:</span><span class="n">address</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">feed_owner</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;player100&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">feed_owner</span><span class="p">,</span><span class="w"> </span><span class="n">friend</span><span class="p">,</span><span class="w"> </span><span class="nf">ST_Distance</span><span class="p">(</span><span class="n">home</span><span class="p">.</span><span class="n">address</span><span class="p">.</span><span class="n">geo_point</span><span class="p">,</span><span class="w"> </span><span class="n">friend_addr</span><span class="p">.</span><span class="n">address</span><span class="p">.</span><span class="n">geo_point</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">distance</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">distance</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">1000000</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">friend</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">newly_commented</span><span class="p">:</span><span class="n">commented_at</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(:</span><span class="n">post</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">created_post</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">feed_owner</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="n">newly_commented</span><span class="p">.</span><span class="n">post_time</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="kt">timestamp</span><span class="p">(</span><span class="s2">&#34;2010-01-01 00:00:00&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">friend</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">newly_created</span><span class="p">:</span><span class="n">created_post</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">po</span><span class="p">:</span><span class="n">post</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="n">newly_created</span><span class="p">.</span><span class="n">post_time</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="kt">timestamp</span><span class="p">(</span><span class="s2">&#34;2010-01-01 00:00:00&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="k">DISTINCT</span><span class="w"> </span><span class="n">friend</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nf">collect</span><span class="p">(</span><span class="k">DISTINCT</span><span class="w"> </span><span class="n">po</span><span class="p">.</span><span class="n">post</span><span class="p">.</span><span class="n">title</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nf">collect</span><span class="p">(</span><span class="s2">&#34;comment of &#34;</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nf">dst</span><span class="p">(</span><span class="n">newly_commented</span><span class="p">))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">AS</span><span class="w"> </span><span class="n">feeds</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">size</span><span class="p">(</span><span class="n">feeds</span><span class="p">)</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">friend</span><span class="p">.</span><span class="n">player</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">feeds</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><table>
<thead>
<tr>
<th style="text-align:left">friend.player.name</th>
<th style="text-align:left">feeds</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Marco Belinelli</td>
<td style="text-align:left">[&ldquo;my best friend, tom&rdquo;, &ldquo;comment of post11&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Tony Parker</td>
<td style="text-align:left">[&ldquo;I can swim&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Danny Green</td>
<td style="text-align:left">[&ldquo;comment of post1&rdquo;]</td>
</tr>
</tbody>
</table>
<p>这时候，从可视化这个结果也可以看到住址这一关系，以及它们的经纬度信息，我手动根据它们的经纬度，把地址的节点在图上排布了一下可以看到这个 feed 的主人 Tim(player100) 的住址（7，8）刚好在其他好友住址的中间位置，这些临近好友的相关的文章和参与评论的内容将被作为信息流推送给 Tim：</p>
<p><a class="lightgallery" href="/nebulagraph-sns/geo_feed.webp" title="geo_feed" data-thumbnail="/nebulagraph-sns/geo_feed.webp">
        
    </a></p>
<h2 id="时空关系追踪" class="headerLink">
    <a href="#%e6%97%b6%e7%a9%ba%e5%85%b3%e7%b3%bb%e8%bf%bd%e8%b8%aa" class="header-mark"></a>9 时空关系追踪</h2><p>时空关系追踪这个图谱应用是在公共安全、物流、疫情防控等场景下，利用图遍历将繁杂、凌乱的信息充分利用起来的典型应用。当我们建立起这样的图谱之后往往只需要简单的图查询就可以获得非常有用的洞察。本章节我给大家距离一下这个应用场景。</p>
<h3 id="数据集" class="headerLink">
    <a href="#%e6%95%b0%e6%8d%ae%e9%9b%86" class="header-mark"></a>9.1 数据集</h3><p>为此，我创建了一个虚拟的数据集由来构建一个时空关系图谱。数据集的生成程序和一份可以直接用的文件都放在了 GitHub 上，仓库地址是： <a href="https://github.com/wey-gu/covid-track-graph-datagen" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/covid-track-graph-datagen</a> 。</p>
<p>它的数据建模如下：</p>

<p>在一个全新的环境里，我们可以用下边的 3 行命令就准备好这个图谱：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 安装 NebulaGraph + NebulaGraph Studio</span>
</span></span><span class="line"><span class="cl">curl -fsSL nebula-up.siwei.io/install.sh <span class="p">|</span> bash -s -- v3
</span></span><span class="line"><span class="cl"><span class="c1"># 下载数据集</span>
</span></span><span class="line"><span class="cl">git clone https://github.com/wey-gu/covid-track-graph-datagen <span class="o">&amp;&amp;</span> <span class="nb">cd</span> covid-track-graph-datagen
</span></span><span class="line"><span class="cl"><span class="c1"># 导入数据集</span>
</span></span><span class="line"><span class="cl">docker run --rm -ti <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --network<span class="o">=</span>nebula-net <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v <span class="si">${</span><span class="nv">PWD</span><span class="si">}</span>/:/root <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    vesoft/nebula-importer:v3.2.0 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --config /root/nebula-importer-config.yaml
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后我们在 console 里查看一下数据</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">~/.nebula-up/console.sh
</span></span><span class="line"><span class="cl"><span class="c1"># 进入 console 了，进到 covid_trace 图空间（刚才创建的）</span>
</span></span><span class="line"><span class="cl">USE covid_trace<span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 执行数据统计的任务</span>
</span></span><span class="line"><span class="cl">SHOW JOB STATS
</span></span></code></pre></td></tr></table>
</div>
</div><p>结果：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>root@nebula<span class="o">)</span> <span class="o">[</span>covid_trace<span class="o">]</span>&gt; SHOW STATS
</span></span><span class="line"><span class="cl">+---------+------------+--------+
</span></span><span class="line"><span class="cl"><span class="p">|</span> Type    <span class="p">|</span> Name       <span class="p">|</span> Count  <span class="p">|</span>
</span></span><span class="line"><span class="cl">+---------+------------+--------+
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Tag&#34;</span>   <span class="p">|</span> <span class="s2">&#34;人&#34;</span>       <span class="p">|</span> <span class="m">10000</span>  <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Tag&#34;</span>   <span class="p">|</span> <span class="s2">&#34;地址&#34;</span>     <span class="p">|</span> <span class="m">1000</span>   <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Tag&#34;</span>   <span class="p">|</span> <span class="s2">&#34;城市&#34;</span>     <span class="p">|</span> <span class="m">341</span>    <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Tag&#34;</span>   <span class="p">|</span> <span class="s2">&#34;村镇&#34;</span>     <span class="p">|</span> <span class="m">42950</span>  <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Tag&#34;</span>   <span class="p">|</span> <span class="s2">&#34;省份&#34;</span>     <span class="p">|</span> <span class="m">32</span>     <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Tag&#34;</span>   <span class="p">|</span> <span class="s2">&#34;联系方式&#34;</span> <span class="p">|</span> <span class="m">0</span>      <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Tag&#34;</span>   <span class="p">|</span> <span class="s2">&#34;行政区&#34;</span>   <span class="p">|</span> <span class="m">3134</span>   <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Tag&#34;</span>   <span class="p">|</span> <span class="s2">&#34;街道&#34;</span>     <span class="p">|</span> <span class="m">667911</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Edge&#34;</span>  <span class="p">|</span> <span class="s2">&#34;住址&#34;</span>     <span class="p">|</span> <span class="m">0</span>      <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Edge&#34;</span>  <span class="p">|</span> <span class="s2">&#34;到访&#34;</span>     <span class="p">|</span> <span class="m">19986</span>  <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Edge&#34;</span>  <span class="p">|</span> <span class="s2">&#34;同住&#34;</span>     <span class="p">|</span> <span class="m">19998</span>  <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Edge&#34;</span>  <span class="p">|</span> <span class="s2">&#34;属于&#34;</span>     <span class="p">|</span> <span class="m">715336</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Space&#34;</span> <span class="p">|</span> <span class="s2">&#34;vertices&#34;</span> <span class="p">|</span> <span class="m">725368</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Space&#34;</span> <span class="p">|</span> <span class="s2">&#34;edges&#34;</span>    <span class="p">|</span> <span class="m">755320</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl">+---------+------------+--------+
</span></span><span class="line"><span class="cl">Got <span class="m">14</span> rows <span class="o">(</span><span class="nb">time</span> spent 1087/46271 us<span class="o">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="两人之间的关联" class="headerLink">
    <a href="#%e4%b8%a4%e4%ba%ba%e4%b9%8b%e9%97%b4%e7%9a%84%e5%85%b3%e8%81%94" class="header-mark"></a>9.2 两人之间的关联</h3><p>很自然，利用路径查询就可以了：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># 最短
</span></span><span class="line"><span class="cl">FIND SHORTEST PATH FROM &#34;p_100&#34; TO &#34;p_101&#34; OVER * BIDIRECT YIELD PATH AS paths
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 所有路径
</span></span><span class="line"><span class="cl">FIND ALL PATH FROM &#34;p_100&#34; TO &#34;p_101&#34; OVER * BIDIRECT YIELD PATH AS paths | LIMIT 10
</span></span></code></pre></td></tr></table>
</div>
</div><p>最短路径结果：</p>
<table>
<thead>
<tr>
<th style="text-align:left">paths</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">&lt;(&ldquo;p_100&rdquo;)&lt;-[:同住@0 {}]-(&ldquo;p_2136&rdquo;)&lt;-[:同住@0 {}]-(&ldquo;p_3708&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_125&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_101&rdquo;)&gt;</td>
</tr>
</tbody>
</table>
<p>所有路径结果：</p>
<table>
<thead>
<tr>
<th style="text-align:left">paths</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">&lt;(&ldquo;p_100&rdquo;)&lt;-[:同住@0 {}]-(&ldquo;p_2136&rdquo;)&lt;-[:同住@0 {}]-(&ldquo;p_3708&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_125&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_101&rdquo;)&gt;</td>
</tr>
<tr>
<td style="text-align:left">&lt;(&ldquo;p_100&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_328&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_6976&rdquo;)&lt;-[:同住@0 {}]-(&ldquo;p_261&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_352&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_101&rdquo;)&gt;</td>
</tr>
<tr>
<td style="text-align:left">&lt;(&ldquo;p_100&rdquo;)-[:同住@0 {}]-&gt;(&ldquo;p_8709&rdquo;)-[:同住@0 {}]-&gt;(&ldquo;p_9315&rdquo;)-[:同住@0 {}]-&gt;(&ldquo;p_261&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_352&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_101&rdquo;)&gt;</td>
</tr>
<tr>
<td style="text-align:left">&lt;(&ldquo;p_100&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_328&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_6311&rdquo;)-[:同住@0 {}]-&gt;(&ldquo;p_3941&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_345&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_101&rdquo;)&gt;</td>
</tr>
<tr>
<td style="text-align:left">&lt;(&ldquo;p_100&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_328&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_5046&rdquo;)-[:同住@0 {}]-&gt;(&ldquo;p_3993&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_144&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_101&rdquo;)&gt;</td>
</tr>
<tr>
<td style="text-align:left">&lt;(&ldquo;p_100&rdquo;)-[:同住@0 {}]-&gt;(&ldquo;p_3457&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_199&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_6771&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_458&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_101&rdquo;)&gt;</td>
</tr>
<tr>
<td style="text-align:left">&lt;(&ldquo;p_100&rdquo;)&lt;-[:同住@0 {}]-(&ldquo;p_1462&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_922&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_5869&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_345&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_101&rdquo;)&gt;</td>
</tr>
<tr>
<td style="text-align:left">&lt;(&ldquo;p_100&rdquo;)&lt;-[:同住@0 {}]-(&ldquo;p_9489&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_985&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_2733&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_458&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_101&rdquo;)&gt;</td>
</tr>
<tr>
<td style="text-align:left">&lt;(&ldquo;p_100&rdquo;)&lt;-[:同住@0 {}]-(&ldquo;p_9489&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_905&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_2733&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_458&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_101&rdquo;)&gt;</td>
</tr>
<tr>
<td style="text-align:left">&lt;(&ldquo;p_100&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_89&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_1333&rdquo;)&lt;-[:同住@0 {}]-(&ldquo;p_1683&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_345&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_101&rdquo;)&gt;</td>
</tr>
</tbody>
</table>
<p>我们把所有路径进行可视化渲染，标记出起点终点的两人，并在其中查到他们的最短路径，他们之间的千丝万缕关系就一目了然了，无论是商业洞察、公共安全还是疫情防控的目的，有了这个信息，相应的工作都可以如虎添翼地向下进展。</p>
<p><a class="lightgallery" href="/nebulagraph-sns/find_path_two_people.webp" title="find_path_two_people" data-thumbnail="/nebulagraph-sns/find_path_two_people.webp">
        
    </a></p>
<p>当然，在真实的系统上，可能我们只需要关心两个用户之间的关联远近，得出量化的评估：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">FIND SHORTEST PATH FROM &#34;p_100&#34; TO &#34;p_101&#34; OVER * BIDIRECT YIELD PATH AS paths |
</span></span><span class="line"><span class="cl">    YIELD collect(length($-.paths)) AS len | YIELD coalesce($-.len[0], -1) AS len
</span></span></code></pre></td></tr></table>
</div>
</div><p>结果中我们只关心他们之间最短路径的长度为：4。</p>
<table>
<thead>
<tr>
<th style="text-align:left">len</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">4</td>
</tr>
</tbody>
</table>
<h3 id="时空相交的人" class="headerLink">
    <a href="#%e6%97%b6%e7%a9%ba%e7%9b%b8%e4%ba%a4%e7%9a%84%e4%ba%ba" class="header-mark"></a>9.3 时空相交的人</h3><p>进一步我们可以用图语义勾勒出我们想确定的任何带有时间与空间信息的模式，在图谱中实时查询出来，比如对给定的人，他的 id 是 p_101，我们相差在特定时间里所有和他有时空相交的人，这意味着那些人在 p_101 访问某一地方的时间段之内也逗留、访问了这些地方：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">p</span><span class="p">:</span><span class="err">人</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="o">`</span><span class="n">visit0</span><span class="o">`</span><span class="p">:</span><span class="err">到访</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="o">`</span><span class="n">addr</span><span class="o">`</span><span class="p">:</span><span class="err">地址</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[</span><span class="o">`</span><span class="n">visit1</span><span class="o">`</span><span class="p">:</span><span class="err">到访</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">p1</span><span class="p">:</span><span class="err">人</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;p_101&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="o">`</span><span class="n">visit0</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">start_time</span><span class="o">`</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="o">`</span><span class="n">visit1</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">end_time</span><span class="o">`</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">RETURN</span><span class="w"> </span><span class="o">`</span><span class="n">addr</span><span class="o">`</span><span class="p">.</span><span class="err">地址</span><span class="p">.</span><span class="o">`</span><span class="n">name</span><span class="o">`</span><span class="p">,</span><span class="w"> </span><span class="nf">collect</span><span class="p">(</span><span class="n">p1</span><span class="p">.</span><span class="err">人</span><span class="p">.</span><span class="o">`</span><span class="n">name</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>我们得到了再每一个到访地点的时空相交人列表如下：</p>
<table>
<thead>
<tr>
<th style="text-align:left">addr.地址.name</th>
<th style="text-align:left">collect(p1.人.name)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">闵行仇路q座 255960</td>
<td style="text-align:left">[&ldquo;徐畅&rdquo;, &ldquo;王佳&rdquo;, &ldquo;曾亮&rdquo;, &ldquo;姜桂香&rdquo;, &ldquo;邵秀英&rdquo;, &ldquo;韦婷婷&rdquo;, &ldquo;陶玉&rdquo;, &ldquo;马坤&rdquo;, &ldquo;黄想&rdquo;, &ldquo;张秀芳&rdquo;, &ldquo;颜桂芳&rdquo;, &ldquo;张洋&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">丰都北京路J座 725701</td>
<td style="text-align:left">[&ldquo;陈春梅&rdquo;, &ldquo;施婷婷&rdquo;, &ldquo;井成&rdquo;, &ldquo;范文&rdquo;, &ldquo;王楠&rdquo;, &ldquo;尚明&rdquo;, &ldquo;薛秀珍&rdquo;, &ldquo;宋金凤&rdquo;, &ldquo;杨雪&rdquo;, &ldquo;邓丽华&rdquo;, &ldquo;李杨&rdquo;, &ldquo;温佳&rdquo;, &ldquo;叶玉&rdquo;, &ldquo;周明&rdquo;, &ldquo;王桂珍&rdquo;, &ldquo;段玉华&rdquo;, &ldquo;金成&rdquo;, &ldquo;黄鑫&rdquo;, &ldquo;邬兵&rdquo;, &ldquo;魏柳&rdquo;, &ldquo;王兰英&rdquo;, &ldquo;杨柳&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">普陀潜江路P座 210730</td>
<td style="text-align:left">[&ldquo;储平&rdquo;, &ldquo;洪红霞&rdquo;, &ldquo;沈玉英&rdquo;, &ldquo;王洁&rdquo;, &ldquo;董玉英&rdquo;, &ldquo;邓凤英&rdquo;, &ldquo;谢海燕&rdquo;, &ldquo;梁雷&rdquo;, &ldquo;张畅&rdquo;, &ldquo;任玉兰&rdquo;, &ldquo;贾宇&rdquo;, &ldquo;汪成&rdquo;, &ldquo;孙琴&rdquo;, &ldquo;纪红梅&rdquo;, &ldquo;王欣&rdquo;, &ldquo;陈兵&rdquo;, &ldquo;张成&rdquo;, &ldquo;王东&rdquo;, &ldquo;谷霞&rdquo;, &ldquo;林成&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">普陀武街f座 706352</td>
<td style="text-align:left">[&ldquo;邢成&rdquo;, &ldquo;张建军&rdquo;, &ldquo;张鑫&rdquo;, &ldquo;戴涛&rdquo;, &ldquo;蔡洋&rdquo;, &ldquo;汪燕&rdquo;, &ldquo;尹亮&rdquo;, &ldquo;何利&rdquo;, &ldquo;何玉&rdquo;, &ldquo;周波&rdquo;, &ldquo;金秀珍&rdquo;, &ldquo;杨波&rdquo;, &ldquo;张帅&rdquo;, &ldquo;周柳&rdquo;, &ldquo;马云&rdquo;, &ldquo;张建华&rdquo;, &ldquo;王丽丽&rdquo;, &ldquo;陈丽&rdquo;, &ldquo;万萍&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">城东贵阳街O座 110567</td>
<td style="text-align:left">[&ldquo;李洁&rdquo;, &ldquo;陈静&rdquo;, &ldquo;王建国&rdquo;, &ldquo;方淑华&rdquo;, &ldquo;古想&rdquo;, &ldquo;漆萍&rdquo;, &ldquo;詹桂花&rdquo;, &ldquo;王成&rdquo;, &ldquo;李慧&rdquo;, &ldquo;孙娜&rdquo;, &ldquo;马伟&rdquo;, &ldquo;谢杰&rdquo;, &ldquo;王鹏&rdquo;, &ldquo;鞠桂英&rdquo;, &ldquo;莫桂英&rdquo;, &ldquo;汪雷&rdquo;, &ldquo;黄彬&rdquo;, &ldquo;李玉梅&rdquo;, &ldquo;祝红梅&rdquo;]</td>
</tr>
</tbody>
</table>
<p>现在，我们在图上可视化这个结果看看：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">p</span><span class="p">:</span><span class="err">人</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="o">`</span><span class="n">visit0</span><span class="o">`</span><span class="p">:</span><span class="err">到访</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="o">`</span><span class="n">addr</span><span class="o">`</span><span class="p">:</span><span class="err">地址</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[</span><span class="o">`</span><span class="n">visit1</span><span class="o">`</span><span class="p">:</span><span class="err">到访</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">p1</span><span class="p">:</span><span class="err">人</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;p_101&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="o">`</span><span class="n">visit0</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">start_time</span><span class="o">`</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="o">`</span><span class="n">visit1</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">end_time</span><span class="o">`</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">RETURN</span><span class="w"> </span><span class="n">paths</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>结果中我们标记了 p_101 为不同的图标，在用标签传播算法识别一下聚集社区，是不是一图胜千言呢？</p>
<p><a class="lightgallery" href="/nebulagraph-sns/time_and_space.webp" title="time_and_space" data-thumbnail="/nebulagraph-sns/time_and_space.webp">
        
    </a></p>
<h3 id="最近去过的省份" class="headerLink">
    <a href="#%e6%9c%80%e8%bf%91%e5%8e%bb%e8%bf%87%e7%9a%84%e7%9c%81%e4%bb%bd" class="header-mark"></a>9.4 最近去过的省份</h3><p>最后，我们再用简单的查询模式表达出一个人在给定时间内，比如从一个时间点开始，到访过的所有省份</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">p</span><span class="p">:</span><span class="err">人</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">visit</span><span class="p">:</span><span class="err">到访</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="o">`</span><span class="n">addr</span><span class="o">`</span><span class="p">:</span><span class="err">地址</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="err">属于</span><span class="o">*</span><span class="mi">5</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">province</span><span class="p">:</span><span class="err">省份</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;p_101&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">visit</span><span class="p">.</span><span class="n">start_time</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">1625469000</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">RETURN</span><span class="w"> </span><span class="n">province</span><span class="p">.</span><span class="err">省份</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="nf">collect</span><span class="p">(</span><span class="n">addr</span><span class="p">.</span><span class="err">地址</span><span class="p">.</span><span class="n">name</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>看起来他/她去过不少地方呢：</p>
<table>
<thead>
<tr>
<th style="text-align:left">province.省份.name</th>
<th style="text-align:left">collect(addr.地址.name)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">四川省</td>
<td style="text-align:left">[&ldquo;闵行仇路q座 255960&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">山东省</td>
<td style="text-align:left">[&ldquo;城东贵阳街O座 110567&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">云南省</td>
<td style="text-align:left">[&ldquo;丰都北京路J座 725701&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">福建省</td>
<td style="text-align:left">[&ldquo;普陀潜江路P座 210730&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">内蒙古自治区</td>
<td style="text-align:left">[&ldquo;普陀武街f座 706352&rdquo;]</td>
</tr>
</tbody>
</table>
<p>老轨迹，我们在图上看看这个结果吧，这次，我们选择 Dagre-LR 这个布局渲染，结果是不是非常清晰呢？</p>
<p><a class="lightgallery" href="/nebulagraph-sns/visited_provinces.webp" title="visited_provinces" data-thumbnail="/nebulagraph-sns/visited_provinces.webp">
        
    </a></p>
<h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>10 总结</h2><p>我们给出了不少社交网络里的应用案例，包括：</p>
<ul>
<li>查找关键的人</li>
<li>识别聚集的人群、社群</li>
<li>判定两个用户之间的亲密度</li>
<li>推荐新朋友</li>
<li>利用共同邻居精准推送重要内容</li>
<li>根据好友关系、地理位置推送信息流</li>
<li>利用时空关系图谱查询人与人之间关系、获取时空相交的人、访问过的省份</li>
</ul>
<p>社交网络作为天然的图结构，非常适合用图的技术来存储、查询、计算、分析与可视化去解决其上的各式各样的问题，NebulaGraph 的强大处理能力和可视化能力使得我们已知很多公司在使用它作为社交领域的图存储、计算层，这其中包括：网易游戏、微信、Line、Soul、快手和知乎等等很多行业领先的团队，希望大家通过本章能对社交领域的图技术应有有一个初步的认识。</p>
<blockquote>
<p>题图版权：by <a href="https://unsplash.com/photos/IBaVuZsJJTo" target="_blank" rel="noopener noreferrer">Ryoji</a></p>
</blockquote>]]></description>
</item></channel>
</rss>
