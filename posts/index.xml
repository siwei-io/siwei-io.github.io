<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>所有文章 - siwei.io</title>
        <link>https://siwei.io/posts/</link>
        <description>所有文章 | siwei.io</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>weyl.gu@gmail.com (Wey Gu)</managingEditor>
            <webMaster>weyl.gu@gmail.com (Wey Gu)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 15 Aug 2023 11:10:34 &#43;0800</lastBuildDate><atom:link href="https://siwei.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>Text2Cypher：大语言模型驱动的图谱查询生成</title>
    <link>https://siwei.io/llm-text-to-nebulagraph-query/</link>
    <pubDate>Mon, 17 Jul 2023 20:30:04 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/llm-text-to-nebulagraph-query/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/llm-text-to-nebulagraph-query/featured-image.webp" referrerpolicy="no-referrer">
            </div><p>从 GPT-3 开始展现出超出预期的”理解能力“开始，我们一直在做 Graph + LLM 技术组合、互补的研究、探索和阜分享，截止到现在 NebulaGraph 已经在 LlamaIndex 与 Langchain 项目做出了不少领先的贡献，从本文开始，我们就把其中一些阶段性的成功、方法单独分享给大家。</p>
<p>本文的主题是我们认为这个领域最低垂的果实，text2cypher：自然语言生成图查询。</p>
<h2 id="text2cypher" class="headerLink">
    <a href="#text2cypher" class="header-mark"></a>1 Text2Cypher</h2><p>顾名思义， Text2Cypher 做的就是把自然语言的文本转换成 Cypher 查询语句的这件事儿，和另一个大家可能已经比较熟悉的场景 Text2SQL：文本转换 SQL 在形式上没有什么区别。而本质上，大多数知识图谱、图数据库的应用都是在图上按照人类意愿进行查询，我们在图数据库上构造方便的可视化工具、封装方便的 API 的工作都是为这个目标服务的。</p>
<p>一直以来，阻碍图数据库、知识图谱被更广泛应用的主要因素可能就是查询图数据库的门槛了。那么，在没有大语言模型的时候，我们是怎么做的呢？</p>
<h2 id="传统的-text2cypher" class="headerLink">
    <a href="#%e4%bc%a0%e7%bb%9f%e7%9a%84-text2cypher" class="header-mark"></a>2 传统的 Text2Cypher</h2><p>文本到查询的这个领域在大语言模型之前就一直存在这样的需求，一直是知识图谱最常见的应用之一，比如 KBQA（基于知识库的问答系统）的系统内部本质上就是 text2cypher。</p>
<p>这里以我之前写的项目 <a href="https://www.siwei.io/siwi" target="_blank" rel="noopener noreferrer">Siwi</a> （发音：/ˈsɪwi/， 一个基于篮球运动员数据集的问答应用）为例，了解一下它的后端架构：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">┌─────────────┬───────────────────────────────────┐
</span></span><span class="line"><span class="cl">│      Speech │  Frontend                         │
</span></span><span class="line"><span class="cl">│  ┌──────────▼──────────┐ Siwi, /ˈsɪwi/          │
</span></span><span class="line"><span class="cl">│  │ Web_Speech_API      │ A PoC of Dialog System │
</span></span><span class="line"><span class="cl">│  │ Vue.JS              │ With Graph Database    │
</span></span><span class="line"><span class="cl">│  │                     │ Backed Knowledge Graph │
</span></span><span class="line"><span class="cl">│  └──────────┬──────────┘                        │
</span></span><span class="line"><span class="cl">│             │  Sentence  Backend                │
</span></span><span class="line"><span class="cl">│┌────────────┼────────────────────────────┐      │
</span></span><span class="line"><span class="cl">││ ┌──────────▼──────────┐                 │      │
</span></span><span class="line"><span class="cl">││ │ Web API, Flask      │ ./app/          │      │
</span></span><span class="line"><span class="cl">││ └──────────┬──────────┘                 │      │
</span></span><span class="line"><span class="cl">││            │  Sentence  ./bot/          │      │
</span></span><span class="line"><span class="cl">││ ┌──────────▼──────────┐                 │      │
</span></span><span class="line"><span class="cl">││ │ Intent Matching,    │ ./bot/classifier│      │
</span></span><span class="line"><span class="cl">││ │ Symentic Processing │                 │      │
</span></span><span class="line"><span class="cl">││ └──────────┬──────────┘                 │      │
</span></span><span class="line"><span class="cl">││            │  Intent, Enties            │      │
</span></span><span class="line"><span class="cl">││ ┌──────────▼──────────┐                 │      │
</span></span><span class="line"><span class="cl">││ │ Intent Actor        │ ./bot/actions   │      │
</span></span><span class="line"><span class="cl">│└─┴──────────┬──────────┴─────────────────┘      │
</span></span><span class="line"><span class="cl">│             │  Graph Query                      │
</span></span><span class="line"><span class="cl">│  ┌──────────▼──────────┐                        │
</span></span><span class="line"><span class="cl">│  │ Graph Database      │  NebulaGraph           │
</span></span><span class="line"><span class="cl">│  └─────────────────────┘                        │
</span></span><span class="line"><span class="cl">└─────────────────────────────────────────────────┘
</span></span></code></pre></td></tr></table>
</div>
</div><p>当一个问题语句发送过来之后，它首先要做意图识别（Intent）、实体识别（Entity），然后再利用 NLP 模型或者代码把相应的意图和实体构造成知识图谱的查询语句，最终查询图数据库，并根据返回结构构造答案。</p>
<p>可以想象，让程序能够：</p>
<ul>
<li>从自然语言中理解意图：对应到哪一类支持回答的问题</li>
<li>找出实体：问题中涉及到的主要个体</li>
<li>从意图和实体构造查询语句</li>
</ul>
<p>不可能是一个容易的开发工作，一个真正能够落地的实现要训练的模型或者实现的规则代码所考虑的边界条件可能非常多。</p>
<h2 id="用语言模型做-text2cypher" class="headerLink">
    <a href="#%e7%94%a8%e8%af%ad%e8%a8%80%e6%a8%a1%e5%9e%8b%e5%81%9a-text2cypher" class="header-mark"></a>3 用语言模型做 Text2Cypher</h2><p>而在”后大语言模型“时代，这种从前需要专门训练或者写规则的”智能“应用场景成了通用模型+提示工程（Prompt Engineering）就能完成的任务。</p>
<blockquote>
<p>注：提示工程指通过自然语言描述，让生成模型、语言模型完成”智能“任务的方法。</p>
</blockquote>
<p>事实上，在 GPT-3 刚发布之后，我就开始利用它帮助我写很多非常复杂的 Cypher 查询语句了，我发现它可以写很多非常复杂的模式匹配、多步条件那种之前我需要一点点调试半天才能写出来的语句，通常在它的答案之上，我只需要稍微修改就可以了，而且往往我还能从它的答案里知道我之前没了解到的 Cypher 语法盲区。</p>
<p>后来，在今年二月份的时候，我就试着实现了一个基于 GPT-3 （因为那时候还没有 GPT-3.5）的项目：<a href="https://ngql-gpt.siwei.io/" target="_blank" rel="noopener noreferrer">ngql-GPT</a>（<a href="https://github.com/wey-gu/NebulaGraph-GPT" target="_blank" rel="noopener noreferrer">代码仓库</a>）。</p>
<iframe width="800" height="450" src="https://user-images.githubusercontent.com/1651790/218627408-995b81e1-9b01-423c-ba90-849faaad6f5d.mp4"> </iframe>
<p>它的工作原理非常简单，和 Text2SQL 没有区别，语言模型已经通过公共领域学习了 Cypher 的语法表达，我们在提出任务的时候，只需要让大模型知道我们要查询的图的 Schema 作为上下文就可以了。</p>
<p>所以，基本上 Prompt 就是：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">你是一位 NebulaGraph Cypher 专家，请根据给定的图 Schema 和问题，写出查询语句。
</span></span><span class="line"><span class="cl">schema 如下：
</span></span><span class="line"><span class="cl">---
</span></span><span class="line"><span class="cl">{schema}
</span></span><span class="line"><span class="cl">---
</span></span><span class="line"><span class="cl">问题如下：
</span></span><span class="line"><span class="cl">---
</span></span><span class="line"><span class="cl">{question}
</span></span><span class="line"><span class="cl">---
</span></span><span class="line"><span class="cl">下面写出查询语句：
</span></span></code></pre></td></tr></table>
</div>
</div><p>然而，真实世界的 prompt 往往还需要增加额外的要求：</p>
<ul>
<li>只返回语句，不用给出解释，不用道歉</li>
<li>强调不要写超出 schema 之外的点、边类型</li>
</ul>
<p>感兴趣的同学可以参考我在 LlamaIndex 的 <a href="https://github.com/jerryjliu/llama_index/blob/71919f9dfa09e9628af8b3a59d497ad02a7a82f8/llama_index/query_engine/knowledge_graph_query_engine.py#L24" target="_blank" rel="noopener noreferrer">KnowlegeGraph Query Engine 中的实现</a>。</p>
<p>在真实场景中，我们想快速学习、构建大语言模型应用的时候，常常会用到 Langchain 或者 LlamaIndex 这样的编排（Orchestrator）工具，它们可以帮我们做很多合理的抽象，从而避免从头去实现很多通用的脚手架代码：</p>
<ul>
<li>和不同语言模型交互</li>
<li>和不同向量数据库交互</li>
<li>数据分割</li>
</ul>
<p>而且，这些编排工具还内置了很多工程方法的最佳实践，这样，我们常常调用一个方法就可以用到最新最好用的大语言模型研究论文的方法了，比如 <a href="https://github.com/jerryjliu/llama_index/tree/main/llama_index/query_engine/flare" target="_blank" rel="noopener noreferrer">FLARE</a>、<a href="https://github.com/jerryjliu/llama_index/blob/main/docs/community/integrations/guidance.md" target="_blank" rel="noopener noreferrer">Guidence</a>。</p>
<p>为此，我在 LlamaIndex 和 Langchain 中都贡献了可以方便进行 NebulaGraph 上 Text2Cypher 的工具，真正做到 3 行代码，Text2Cypher。</p>
<h2 id="nebulagraph-上的-text2cypher" class="headerLink">
    <a href="#nebulagraph-%e4%b8%8a%e7%9a%84-text2cypher" class="header-mark"></a>4 NebulaGraph 上的 Text2Cypher</h2><p>在 LlamaIndex 的 <code>KnowledgeQueryEngine</code> 和 LangChain 的 <code>NebulaGraphQAChain</code> 中：NebulaGraph 图数据库的 Schema 获取、Cypher 语句生成的 Prompt、各种 LLM 的调用、结果的处理、衔接我们可以全都不用关心，开箱即用！</p>
<h3 id="使用-llamaindex" class="headerLink">
    <a href="#%e4%bd%bf%e7%94%a8-llamaindex" class="header-mark"></a>4.1 使用 LlamaIndex</h3><p>用 LlamaIndex，我们只需要：</p>
<ul>
<li>创建一个 <code>NebulaGraphStore</code> 实例</li>
<li>创建一个 <code>KnowledgeQueryEngine</code></li>
</ul>
<p>就可以直接进行问答了，是不是超级简单？</p>
<blockquote>
<p>参考文档：https://gpt-index.readthedocs.io/en/latest/examples/query_engine/knowledge_graph_query_engine.html</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">llama_index.query_engine</span> <span class="kn">import</span> <span class="n">KnowledgeGraphQueryEngine</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">llama_index.storage.storage_context</span> <span class="kn">import</span> <span class="n">StorageContext</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">llama_index.graph_stores</span> <span class="kn">import</span> <span class="n">NebulaGraphStore</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">graph_store</span> <span class="o">=</span> <span class="n">NebulaGraphStore</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">space_name</span><span class="o">=</span><span class="n">space_name</span><span class="p">,</span> <span class="n">edge_types</span><span class="o">=</span><span class="n">edge_types</span><span class="p">,</span> <span class="n">rel_prop_names</span><span class="o">=</span><span class="n">rel_prop_names</span><span class="p">,</span> <span class="n">tags</span><span class="o">=</span><span class="n">tags</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">storage_context</span> <span class="o">=</span> <span class="n">StorageContext</span><span class="o">.</span><span class="n">from_defaults</span><span class="p">(</span><span class="n">graph_store</span><span class="o">=</span><span class="n">graph_store</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">nl2kg_query_engine</span> <span class="o">=</span> <span class="n">KnowledgeGraphQueryEngine</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">storage_context</span><span class="o">=</span><span class="n">storage_context</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">service_context</span><span class="o">=</span><span class="n">service_context</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">llm</span><span class="o">=</span><span class="n">llm</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">verbose</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 问答</span>
</span></span><span class="line"><span class="cl"><span class="n">response</span> <span class="o">=</span> <span class="n">nl2kg_query_engine</span><span class="o">.</span><span class="n">query</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Tell me about Peter Quill?&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 只生成语句</span>
</span></span><span class="line"><span class="cl"><span class="n">graph_query</span> <span class="o">=</span> <span class="n">nl2kg_query_engine</span><span class="o">.</span><span class="n">generate_query</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Tell me about Peter Quill?&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="使用-langchain" class="headerLink">
    <a href="#%e4%bd%bf%e7%94%a8-langchain" class="header-mark"></a>4.2 使用 Langchain</h3><p>类似的，在 Langchain 里，我们只需要：</p>
<ul>
<li>创建一个 <code>NebulaGraph</code>实例</li>
<li>创建一个 <code>NebulaGraphQAChain</code> 实例</li>
</ul>
<p>就可以直接提问了。</p>
<blockquote>
<p>参考文档：https://python.langchain.com/docs/modules/chains/additional/graph_nebula_qa</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">langchain.chat_models</span> <span class="kn">import</span> <span class="n">ChatOpenAI</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">langchain.chains</span> <span class="kn">import</span> <span class="n">NebulaGraphQAChain</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">langchain.graphs</span> <span class="kn">import</span> <span class="n">NebulaGraph</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">graph</span> <span class="o">=</span> <span class="n">NebulaGraph</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">space</span><span class="o">=</span><span class="n">space_name</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">username</span><span class="o">=</span><span class="s2">&#34;root&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">password</span><span class="o">=</span><span class="s2">&#34;nebula&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">address</span><span class="o">=</span><span class="s2">&#34;127.0.0.1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">port</span><span class="o">=</span><span class="mi">9669</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">session_pool_size</span><span class="o">=</span><span class="mi">30</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">chain</span> <span class="o">=</span> <span class="n">NebulaGraphQAChain</span><span class="o">.</span><span class="n">from_llm</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">llm</span><span class="p">,</span> <span class="n">graph</span><span class="o">=</span><span class="n">graph</span><span class="p">,</span> <span class="n">verbose</span><span class="o">=</span><span class="kc">True</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">chain</span><span class="o">.</span><span class="n">run</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Tell me about Peter Quill?&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="demo" class="headerLink">
    <a href="#demo" class="header-mark"></a>5 Demo</h2><p><a href="https://www.siwei.io/demos/text2cypher/" target="_blank" rel="noopener noreferrer">demo 地址</a></p>
<iframe width="800" height="857" src="https://user-images.githubusercontent.com/1651790/254521700-6de6aadf-4b62-495a-9276-ef866ebb4add.mp4"> </iframe>
<p>这个 Demo 展示了如何利用 LLM 从不同类型的信息源（以维基百科为例）中抽取知识三元组，并存储到图数据库 NebulaGraph 中。</p>
<p>本 Demo 中，我们先抽取了维基百科中关于《银河护卫队3》的信息，然后利用 LLM 生成的知识三元组，构建了一个图谱。 然后利用 Cypher 查询图谱，最后利用 LlamaIndex 和 Langchain 中的 Text2Cypher，实现了自然语言查询图谱的功能。</p>
<p>您可以点击其他标签亲自试玩图谱的可视化、Cypher 查询、自然语言查询（Text2Cypher）等功能。</p>
<p>这里可以<a href="https://www.siwei.io/demo-dumps/kg-llm/KG_Building.ipynb" target="_blank" rel="noopener noreferrer">下载</a> 完整的 Notebook。</p>
<h2 id="结论" class="headerLink">
    <a href="#%e7%bb%93%e8%ae%ba" class="header-mark"></a>6 结论</h2><p>有了 LLM，知识图谱、NebulaGraph 图数据库中的的数据中进行 Text2Cypher 从来没有这么简单过。</p>
<p>一个具有更强人机、机器接入的知识图谱可以代表了全新的时代，我们可能不需要从前那样高额成本去实现图库之上的后端服务，也不再需要培训才能让领域专家从图中获取重要的洞察了。</p>
<p>利用 LlamaIndex 或者 Langchain 中的生态集成，我们可以几乎没有开发成本地几行代码把自己的应用、图数据智能化。</p>
<p>然而，Text2Cypher 只是一个开始，请大家关注我们后续的文章，展现更多知识图谱、图数据库为大语言模型生态带来的变革。</p>
<blockquote>
<p>题图 <strong>prompt</strong>：</p>
<p><em>In an artful fusion of language and AI, this minimalist oil painting captures the essence of technological advancement. Delicate brushstrokes depict a harmony of binary code and flowing words, converging into a central point. With a refined color palette and clean composition, the artwork represents the symbiotic relationship between language and artificial intelligence, inviting contemplation and appreciation.</em></p>
</blockquote>]]></description>
</item><item>
    <title>Graph RAG: 知识图谱结合 LLM 的检索增强</title>
    <link>https://siwei.io/graph-rag/</link>
    <pubDate>Tue, 15 Aug 2023 11:10:34 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/graph-rag/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/graph-rag/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>本文为大家揭示我们优先提出的 Graph RAG 方法，这种结合知识图谱、图数据库作为大模型结合私有知识系统最新的技术栈，作为之前的图上下文学习、text2cypher 文章的第三篇文章。</p>
</blockquote>
<p>本文为大家揭示我们优先提出的 Graph RAG 方法，这种结合知识图谱、图数据库作为大模型结合私有知识系统最新的技术栈，作为之前的图上下文学习、text2cypher 文章的第三篇文章。</p>
<h2 id="graph-rag" class="headerLink">
    <a href="#graph-rag" class="header-mark"></a>1 Graph RAG</h2><p>在<a href="https://siwei.io/en/graph-enabled-llama-index/" target="_blank" rel="noopener noreferrer">第一篇关于上下文学习的博客中</a>我们介绍过， RAG（Retrieval Argumented Generation）这种基于特定任务/问题的文档检索范式中，我们通常先收集必要的上下文，然后利用具有认知能力的机器学习模型进行上下文学习（in-context learning），来合成任务的答案。</p>
<p>借助 LLM 这个只需要”说话“就可以灵活处理复杂问题的感知层，只需要两步，就能搭建一个基于私有知识的智能应用：</p>
<ul>
<li>利用各种搜索方式（比如 Embedding 与向量数据库）从给定的文档中检索相关知识。</li>
<li>利用 LLM 理解并智能地合成答案。</li>
</ul>
<p>而这篇博客中，我们结合最新的探索进展和思考，尝试把 Graph RAG 和其他方法进行比较，说得更透一点。并且，我们决定开始用 Graph RAG 这个叫法来描述它。</p>
<blockquote>
<p>实际上，<a href="https://siwei.io/talks/graph-rag-with-jerry/" target="_blank" rel="noopener noreferrer">Graph RAG</a>，是最先又我<a href="https://www.youtube.com/watch?v=bPoNCkjDmco" target="_blank" rel="noopener noreferrer">和 Jerry Liu 的直播研讨会讨论</a>和<a href="https://twitter.com/wey_gu/status/1673362774930628608" target="_blank" rel="noopener noreferrer">相关的讨论的 Twitter Thread</a>中提到的，差不多的内容我在 <a href="https://www.bilibili.com/video/BV1Pp4y157nt" target="_blank" rel="noopener noreferrer">NebulaGraph 社区直播</a> 中也用中文介绍过。</p>
</blockquote>
<h2 id="在-rag-中知识图谱的价值" class="headerLink">
    <a href="#%e5%9c%a8-rag-%e4%b8%ad%e7%9f%a5%e8%af%86%e5%9b%be%e8%b0%b1%e7%9a%84%e4%bb%b7%e5%80%bc" class="header-mark"></a>2 在 RAG 中知识图谱的价值</h2><p>这部分内容我们在第一篇文章中阐述过，比如一个查询：“告诉我所有关于苹果和乔布斯的事”，基于乔布斯自传这本书进行问答，而这个问题涉及到的上下文分布在自传这本书的 30 页（分块）的时候，传统的“分割数据，Embedding 再向量搜索”方法在多个文档块里用 top-k 去搜索的方法很难得到这种分散，细粒的完整信息。而且，这种方法还很容易遗漏互相关联的文档块，从而导致信息检索不完整。</p>
<p>除此之外，在之后一次技术会议中，我有幸和 leadscloud.com 的徐旭讨论之后（他们因为有知识图谱的技术背景，也做了和我们类似的探索和尝试！），让我意识到知识图谱可以减少基于嵌入的语义搜索所导致的不准确性。徐旭给出的一个有趣的例子是“保温大棚”与“保温杯”，尽管在语义上两者是存在相关性的，但在大多数场景下，这种通用语义（Embedding）下的相关性常常是我们不希望产生的，进而作为错误的上下文而引入“幻觉”。</p>
<p>这时候，保有领域知识的知识图谱则是非常直接可以缓解、消除这种幻觉的手段。</p>
<h2 id="用-nebulagraph-实现-graph-rag" class="headerLink">
    <a href="#%e7%94%a8-nebulagraph-%e5%ae%9e%e7%8e%b0-graph-rag" class="header-mark"></a>3 用 NebulaGraph 实现 Graph RAG</h2><p>一个简单的 Graph RAG 可以如下去简单实现：</p>
<ol>
<li>使用LLM(或其他)模型从问题中提取关键实体。</li>
<li>根据这些实体检索子图，深入到一定的深度（例如，2）。</li>
<li>利用获得的上下文利用LLM产生答案。</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># 伪代码</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">_get_key_entities</span><span class="p">(</span><span class="n">query_str</span><span class="p">,</span> <span class="n">llm</span><span class="o">=</span><span class="kc">None</span> <span class="p">,</span><span class="n">with_llm</span><span class="o">=</span><span class="kc">True</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">_expand_synonyms</span><span class="p">(</span><span class="n">entities</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">_retrieve_subgraph_context</span><span class="p">(</span><span class="n">entities</span><span class="p">,</span> <span class="n">depth</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">limit</span><span class="o">=</span><span class="mi">30</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">nebulagraph_store</span><span class="o">.</span><span class="n">get_relations</span><span class="p">(</span><span class="n">entities</span><span class="p">,</span> <span class="n">depth</span><span class="p">,</span> <span class="n">limit</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">_synthesize_answer</span><span class="p">(</span><span class="n">query_str</span><span class="p">,</span> <span class="n">graph_rag_context</span><span class="p">,</span> <span class="n">llm</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">llm</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">PROMPT_SYNTHESIZE_AND_REFINE</span><span class="p">,</span> <span class="n">query_str</span><span class="p">,</span> <span class="n">graph_rag_context</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">simple_graph_rag</span><span class="p">(</span><span class="n">query_str</span><span class="p">,</span> <span class="n">nebulagraph_store</span><span class="p">,</span> <span class="n">llm</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">entities</span> <span class="o">=</span> <span class="n">_get_key_entities</span><span class="p">(</span><span class="n">query_str</span><span class="p">,</span> <span class="n">llm</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">graph_rag_context</span> <span class="o">=</span> <span class="n">_retrieve_subgraph_context</span><span class="p">(</span><span class="n">entities</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">_synthesize_answer</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">query_str</span><span class="p">,</span> <span class="n">graph_rag_context</span><span class="p">,</span> <span class="n">llm</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>然而，有了像 Llama Index 这样方便的 LLM 编排工具，开发者可以专注于 LLM 的编排逻辑和 pipeline 设计，而不用亲自处理很多细节的抽象与实现。</p>
<p>所以，用 Llama Index，我们可以轻松搭建 Graph RAG，甚至整合更复杂的 RAG 逻辑，比如 <a href="https://gpt-index.readthedocs.io/en/latest/examples/index_structs/knowledge_graph/KnowledgeGraphIndex_vs_VectorStoreIndex_vs_CustomIndex_combined.html" target="_blank" rel="noopener noreferrer">Graph+Vector RAG</a>。</p>
<p><figure><a class="lightgallery" href="https://github.com/siwei-io/talks/assets/1651790/f783b592-7a8f-4eab-bd61-cf0837e83870" title="Graph_RAG_Entity_SubGraph" data-thumbnail="https://github.com/siwei-io/talks/assets/1651790/f783b592-7a8f-4eab-bd61-cf0837e83870">
        <img
            
            loading="lazy"
            src="https://github.com/siwei-io/talks/assets/1651790/f783b592-7a8f-4eab-bd61-cf0837e83870"
            srcset="https://github.com/siwei-io/talks/assets/1651790/f783b592-7a8f-4eab-bd61-cf0837e83870, https://github.com/siwei-io/talks/assets/1651790/f783b592-7a8f-4eab-bd61-cf0837e83870 1.5x, https://github.com/siwei-io/talks/assets/1651790/f783b592-7a8f-4eab-bd61-cf0837e83870 2x"
            sizes="auto"
            alt="Graph_RAG_Entity_SubGraph">
    </a></figure></p>
<p>在 Llama Index 中，我们有两种方法实现 Graph RAG：</p>
<ul>
<li><code>KnowledgeGraphIndex</code> 用来从任何私有数据只是从零构建知识图谱（基于 LLM 或者其他语言模型），然后 4 行代码进行 Graph RAG。</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">graph_store = NebulaGraphStore(
</span></span><span class="line"><span class="cl">    space_name=space_name,
</span></span><span class="line"><span class="cl">    edge_types=edge_types,
</span></span><span class="line"><span class="cl">    rel_prop_names=rel_prop_names,
</span></span><span class="line"><span class="cl">    tags=tags,
</span></span><span class="line"><span class="cl">)
</span></span><span class="line"><span class="cl">storage_context = StorageContext.from_defaults(graph_store=graph_store)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Build KG
</span></span><span class="line"><span class="cl">kg_index = KnowledgeGraphIndex.from_documents(
</span></span><span class="line"><span class="cl">    documents,
</span></span><span class="line"><span class="cl">    storage_context=storage_context,
</span></span><span class="line"><span class="cl">    max_triplets_per_chunk=10,
</span></span><span class="line"><span class="cl">    space_name=space_name,
</span></span><span class="line"><span class="cl">    edge_types=edge_types,
</span></span><span class="line"><span class="cl">    rel_prop_names=rel_prop_names,
</span></span><span class="line"><span class="cl">    tags=tags,
</span></span><span class="line"><span class="cl">)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">kg_query_engine = kg_index.as_query_engine()
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>KnowledgeGraphRAGQueryEngine</code> 则可以在任何已经存在的知识图谱上进行 Graph RAG，不过我还没有完成这个 <a href="https://github.com/jerryjliu/llama_index/pull/7204" target="_blank" rel="noopener noreferrer">PR</a>。</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">graph_store = NebulaGraphStore(
</span></span><span class="line"><span class="cl">    space_name=space_name,
</span></span><span class="line"><span class="cl">    edge_types=edge_types,
</span></span><span class="line"><span class="cl">    rel_prop_names=rel_prop_names,
</span></span><span class="line"><span class="cl">    tags=tags,
</span></span><span class="line"><span class="cl">)
</span></span><span class="line"><span class="cl">storage_context = StorageContext.from_defaults(graph_store=graph_store)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">graph_rag_query_engine = KnowledgeGraphRAGQueryEngine(
</span></span><span class="line"><span class="cl">    storage_context=storage_context,
</span></span><span class="line"><span class="cl">)
</span></span></code></pre></td></tr></table>
</div>
</div><p>最后，我做了<a href="https://www.siwei.io/demos/graph-rag/" target="_blank" rel="noopener noreferrer">一个 streamlit 的 demo</a>来比较 Graph RAG 与 Vector RAG，从中我们可以看到 Graph RAG 并没有取代 Embedding、向量搜索的方法，而是增强了/补充了它的不足。</p>
<p><figure><a class="lightgallery" href="https://github.com/siwei-io/talks/assets/1651790/102d00bc-6146-4856-a81f-f953c7254b29" title="img" data-thumbnail="https://github.com/siwei-io/talks/assets/1651790/102d00bc-6146-4856-a81f-f953c7254b29">
        <img
            
            loading="lazy"
            src="https://github.com/siwei-io/talks/assets/1651790/102d00bc-6146-4856-a81f-f953c7254b29"
            srcset="https://github.com/siwei-io/talks/assets/1651790/102d00bc-6146-4856-a81f-f953c7254b29, https://github.com/siwei-io/talks/assets/1651790/102d00bc-6146-4856-a81f-f953c7254b29 1.5x, https://github.com/siwei-io/talks/assets/1651790/102d00bc-6146-4856-a81f-f953c7254b29 2x"
            sizes="auto"
            alt="img">
    </a></figure></p>
<h2 id="text2cypher" class="headerLink">
    <a href="#text2cypher" class="header-mark"></a>4 text2cypher</h2><p>基于图谱的 LLM 的另一种有趣方法是text2cypher。这种方法不依赖于实体的子图检索，而是将任务/问题翻译成一个面向答案的特定图查询，和我们常说的 text2sql 方法本质是一样的。</p>
<h3 id="在-nebulagraph-上进行-text2cypher" class="headerLink">
    <a href="#%e5%9c%a8-nebulagraph-%e4%b8%8a%e8%bf%9b%e8%a1%8c-text2cypher" class="header-mark"></a>4.1 在 NebulaGraph 上进行 text2cypher</h3><p>在之前的文章中我们已经介绍过，得益于 LLM，实现 text2cypher 比传统的 ML 方法更为简单和便宜。</p>
<p>比如，<a href="https://python.langchain.com/docs/use_cases/more/graph/graph_nebula_qa" target="_blank" rel="noopener noreferrer">LangChain: NebulaGraphQAChain</a> 和 <a href="https://gpt-index.readthedocs.io/en/latest/examples/query_engine/knowledge_graph_query_engine.html" target="_blank" rel="noopener noreferrer">Llama Index: KnowledgeGraphQueryEngine</a> 让我们 3 行代码就能跑起来 text2cypher。</p>
<h3 id="比较-text2cypher-和-subgraph-rag" class="headerLink">
    <a href="#%e6%af%94%e8%be%83-text2cypher-%e5%92%8c-subgraph-rag" class="header-mark"></a>4.2 比较 text2cypher 和 (Sub)Graph RAG</h3><p>这两种方法主要在其检索机制上有所不同。text2cypher 根据 KG 的 Schema 和给定的任务生成图形模式查询，而SubGraph RAG获取相关的子图以提供上下文。</p>
<p>两者都有其优点，为了大家更直观理解他们的特点，我做了这个 demo 视频：</p>
<p>我们可以看到两者的图查询模式在可视化下是有非常清晰的差异的。</p>
<p><figure><a class="lightgallery" href="https://github.com/siwei-io/talks/assets/1651790/102d00bc-6146-4856-a81f-f953c7254b29" title="https://github.com/siwei-io/talks/assets/1651790/102d00bc-6146-4856-a81f-f953c7254b29" data-thumbnail="https://github.com/siwei-io/talks/assets/1651790/102d00bc-6146-4856-a81f-f953c7254b29">
        <img
            
            loading="lazy"
            src="https://github.com/siwei-io/talks/assets/1651790/102d00bc-6146-4856-a81f-f953c7254b29"
            srcset="https://github.com/siwei-io/talks/assets/1651790/102d00bc-6146-4856-a81f-f953c7254b29, https://github.com/siwei-io/talks/assets/1651790/102d00bc-6146-4856-a81f-f953c7254b29 1.5x, https://github.com/siwei-io/talks/assets/1651790/102d00bc-6146-4856-a81f-f953c7254b29 2x"
            sizes="auto"
            alt="https://github.com/siwei-io/talks/assets/1651790/102d00bc-6146-4856-a81f-f953c7254b29">
    </a></figure></p>
<h3 id="结合text2cypher的graph-rag" class="headerLink">
    <a href="#%e7%bb%93%e5%90%88text2cypher%e7%9a%84graph-rag" class="header-mark"></a>4.3 结合text2cypher的Graph RAG</h3><p>然而，两者并没有绝对的好与坏，不同场景下，它们各有优劣。</p>
<p>在现实世界中，我们可能并不总是知道哪种方法更有效（好帮助区分应该用哪一种），因此，我倾向于考虑同时利用两者，这样获取的两种检索结果作为上下文，一起来生成最终答案的效果可能是最好的。</p>
<p>具体的实现方法在<a href="https://github.com/jerryjliu/llama_index/pull/7204" target="_blank" rel="noopener noreferrer">这个 PR</a>中已经可以做到了，只需要设置<code>with_text2cypher=True</code>，Graph RAG 就会包含text2cypher 上下文，敬请期待它的合并。</p>
<h2 id="结论" class="headerLink">
    <a href="#%e7%bb%93%e8%ae%ba" class="header-mark"></a>5 结论</h2><p>通过将知识图谱、图存储集成到 LLM 技术栈中，Graph RAG 把 RAG 的上下文学习推向了一个新的高度。它能在 LLM 应用中，通过利用现有（或新建）的知识图谱，提取细粒度、精确调整、领域特定且互联的知识。</p>
<p>请继续关注图谱和LLM领域的更深入的探索和进一步的发展。</p>
<blockquote>
<p>题图 prompt： A vast open book serves as the backdrop, with intricately interwoven nodes and lines forming a Graph on its pages. At the center of this graph, there&rsquo;s a glowing brain symbolizing the Knowledge Graph. Rays of light emanate from the brain, reaching every corner of the graph, mirroring neural connections linking diverse information. On the right side of the illustration, a robotic arm with a pen is swiftly writing, representing the input and output of the AI large language model.</p>
</blockquote>]]></description>
</item><item>
    <title>从零到一：如何构建一个基于知识图谱的智能问答助手？</title>
    <link>https://siwei.io/siwi/</link>
    <pubDate>Thu, 30 Dec 2021 14:04:31 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/siwi/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/siwi/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>如何利用图数据库从0-1构建一个特定领域问答助手？本文手把手带你构建一个简易版的篮球领域智能问答机器人。</p>
</blockquote>
<h2 id="前言" class="headerLink">
    <a href="#%e5%89%8d%e8%a8%80" class="header-mark"></a>1 前言</h2><p>「问答机器人」在我们日常生活中并不少见到 ：比如在一些电商客服、智能问诊、技术支持等人工输入与沟通界面的场景下，机器人“智能”问答系统一定程度上可以在无需人力、不需要耗费终端用户心智去做知识库、商品搜索、科室选择等等的情况下实时给出问题答案。</p>
<p>问答机器人系统背后的技术有多重可能：</p>
<ul>
<li>基于检索，全文搜索接近的问题</li>
<li>基于<a href="https://arxiv.org/abs/1710.10723" target="_blank" rel="noopener noreferrer">机器学习阅读理解</a></li>
<li>基于知识图谱（Knowledge-Based Question Answering system: KBQA）</li>
<li>其他</li>
</ul>
<p>基于知识图谱构建问答系统在以下三个情况下很有优势：</p>
<ul>
<li>对于领域类型是结构化数据场景：电商、医药、系统运维（微服务、服务器、事件）、产品支持系统等，其中作为问答系统的参考对象已经是结构化数据；</li>
<li>问题的解答过程涉及多跳查询，比如“姚明的妻子今年是本命年吗？”，“你们家的产品 A 和 A+ 的区别是什么？”；</li>
<li>为了解决其他需求（风控、推荐、管理），已经构建了图结构数据、知识图谱的情况。</li>
</ul>
<p>为了方便读者最快速了解如何构建 KBQA 系统，我写了非常简陋的小 KBQA 项目，在本文中，我会带领大家从头到尾把它搭起来。</p>
<blockquote>
<p>💡：这个小项目叫做 Siwi，它的代码就在 GitHub 上：<a href="https://github.com/wey-gu/nebula-siwi/" target="_blank" rel="noopener noreferrer">github.com/wey-gu/nebula-siwi</a></p>
<p>Siwi 的发音是：<code>/ˈsɪwi/</code> 或者叫：<code>思二为</code> ，它是一个能解答 NBA 相关问题的机器人。</p>
</blockquote>
<p>我们开始吧。</p>
<h2 id="鸟瞰-tldr" class="headerLink">
    <a href="#%e9%b8%9f%e7%9e%b0-tldr" class="header-mark"></a>2 鸟瞰 TL;DR</h2><p>KBQA 用一句话说就是把问题解析、转换成在知识图谱中的查询，查询得到结果之后进行筛选、翻译成结果（句子、卡片或者任何方便人理解的答案格式）。</p>
<blockquote>
<p>💡：知识图谱的构建实际上是非常重要的过程，在本文中，我们专注在串起来 KBQA 系统的骨架，我们假设需求是基于一个已经有的图谱之上，为其增加一个 QA 系统。</p>
</blockquote>
<p>「问题到图谱查询的转换」有不同的方法可以实现。</p>
<ul>
<li>可以是对语义进行分析：理解问题的意图，针对不同意图匹配最可能的问题类型，从而构建这个类型问题的图谱查询，查得结果；</li>
<li>也可以是基于信息的抽取：从问题中抽取主要的实体，在图谱中获取实体的所有知识、关系条目（子图），再对结果根据问题中的约束条件匹配、排序选择结果。</li>
</ul>
<blockquote>
<p>💡：美团技术团队在<a href="https://tech.meituan.com/2021/11/03/knowledge-based-question-answering-in-meituan.html" target="_blank" rel="noopener noreferrer">这篇文章</a>里分享了他们的真实世界实践，下图是美团结合了机器学习和 NLP 的方案。</p>
</blockquote>
<p><figure><a class="lightgallery" href="/siwi/meituan-kbqa.jpg" title="美团KBQA解决方案" data-thumbnail="/siwi/meituan-kbqa.jpg">
        <img
            
            loading="lazy"
            src="/siwi/meituan-kbqa.jpg"
            srcset="/siwi/meituan-kbqa.jpg, /siwi/meituan-kbqa.jpg 1.5x, /siwi/meituan-kbqa.jpg 2x"
            sizes="auto"
            alt="美团KBQA解决方案" height="1080"  width="1875" >
    </a></figure></p>
<p>而在 Siwi 里，我们一切从简，单独选择了语义分析这条路，它的特点是需要人为去标注或者编码一些问题类型的查询方式，但实际上在大多数场景下，尤其单一领域图谱的场景下反而是轻量却效果不差的方案，也是一个便于新手理解 KBQA 的合适的入门方式。</p>
<p>除了核心的问答部分，我还为 Siwi 增加了语音识别和语音回答（感谢浏览器接口标准的发展）的功能，于是，这个项目的结构和问答调用流程就是这样的了：一个语音问题自上而下分别经过三个部分：</p>
<ul>
<li>基于网页的 Siwi Frontend 语音、文字问答界面</li>
<li>Python Flask 实现的 Siwi Backend/API 系统</li>
<li><a href="https://nebula-graph.com.cn" target="_blank" rel="noopener noreferrer">Nebula Graph</a> 开源分布式高性能图数据库之上的知识图谱</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">┌────────────────┬──────────────────────────────────────┐
</span></span><span class="line"><span class="cl">│                │                                      │
</span></span><span class="line"><span class="cl">│                │  Speech                              │
</span></span><span class="line"><span class="cl">│     ┌──────────▼──────────┐                           │
</span></span><span class="line"><span class="cl">│     │            Frontend │   Siwi, /ˈsɪwi/           │
</span></span><span class="line"><span class="cl">│     │ Web_Speech_API      │   A PoC of                │
</span></span><span class="line"><span class="cl">│     │                     │   Dialog System           │
</span></span><span class="line"><span class="cl">│     │ Vue.JS              │   With Graph Database     │
</span></span><span class="line"><span class="cl">│     │                     │   Backed Knowledge Graph  │
</span></span><span class="line"><span class="cl">│     └──────────┬──────────┘                           │
</span></span><span class="line"><span class="cl">│                │  Sentence                            │
</span></span><span class="line"><span class="cl">│   ┌────────────┼──────────────────────────────┐       │
</span></span><span class="line"><span class="cl">│   │            │              Backend         │       │
</span></span><span class="line"><span class="cl">│   │ ┌──────────▼──────────┐                   │       │
</span></span><span class="line"><span class="cl">│   │ │ Web API, Flask      │   ./app/          │       │
</span></span><span class="line"><span class="cl">│   │ └──────────┬──────────┘                   │       │
</span></span><span class="line"><span class="cl">│   │            │  Sentence    ./bot/          │       │
</span></span><span class="line"><span class="cl">│   │ ┌──────────▼──────────┐                   │       │
</span></span><span class="line"><span class="cl">│   │ │ Intent matching,    │   ./bot/classifier│       │
</span></span><span class="line"><span class="cl">│   │ │ Symentic Processing │                   │       │
</span></span><span class="line"><span class="cl">│   │ └──────────┬──────────┘                   │       │
</span></span><span class="line"><span class="cl">│   │            │  Intent, Entities            │       │
</span></span><span class="line"><span class="cl">│   │ ┌──────────▼──────────┐                   │       │
</span></span><span class="line"><span class="cl">│   │ │ Intent Actor        │   ./bot/actions   │       │
</span></span><span class="line"><span class="cl">│   └─┴──────────┬──────────┴───────────────────┘       │
</span></span><span class="line"><span class="cl">│                │  Graph Query                         │
</span></span><span class="line"><span class="cl">│     ┌──────────▼──────────┐                           │
</span></span><span class="line"><span class="cl">│     │ Graph Database      │    Nebula Graph           │
</span></span><span class="line"><span class="cl">│     └─────────────────────┘                           │
</span></span><span class="line"><span class="cl">└───────────────────────────────────────────────────────┘
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>💡：图数据库相比于其他知识图谱存储系统来说，因为其设计专注于数据内的数据关系，非常擅长实时获取海量数据下实体之间的复杂关联关系。</p>
<p>Nebula Graph 的原生分布式设计和 share-nothing 架构使得它擅长于巨大数据量和高并发读写的场景，加上它的开源社区特别活跃，已经被国内很多团队用于支撑生产上的各种业务，<a href="https://nebula-graph.com.cn/cases/" target="_blank" rel="noopener noreferrer">这里</a>有一些他们分享的选型、落地实践。</p>
</blockquote>
<h2 id="知识图谱" class="headerLink">
    <a href="#%e7%9f%a5%e8%af%86%e5%9b%be%e8%b0%b1" class="header-mark"></a>3 知识图谱</h2><p>Siwi 构建于一个篮球相关的知识图谱之上，它其实是 Siwi 采用的开源分布式图数据库 <a href="http://nebula-graph.com.cn/" target="_blank" rel="noopener noreferrer">Nebula Graph</a> 社区的官方文档里的示例<a href="https://docs.nebula-graph.com.cn/master/3.ngql-guide/1.nGQL-overview/1.overview/#basketballplayer" target="_blank" rel="noopener noreferrer">数据集</a>。</p>
<p>在这个非常简单的图谱之中，只有两种点：</p>
<ul>
<li>player，球员</li>
<li>team，球队</li>
</ul>
<p>两种关系：</p>
<ul>
<li>serve 服役于（比如：姚明 <code>-服役于-&gt;</code> 休斯顿火箭）</li>
<li>follow 关注 （比如：姚明 <code>-关注-&gt;</code> 奥尼尔）</li>
</ul>
<blockquote>
<p>💡：这个数据集在 Nebula 社区上有一个 <a href="https://nebula-graph.com.cn/demo/" target="_blank" rel="noopener noreferrer">在线体验</a> 环境，任何人都无需登录，通过<a href="https://docs.nebula-graph.com.cn/2.6.1/nebula-studio/about-studio/st-ug-what-is-graph-studio/" target="_blank" rel="noopener noreferrer">Nebula Graph Studio</a> 可视化探索篮球图谱。</p>
</blockquote>
<p>下图就是这个图谱的可视化探索截图，可以看到左边的中心节点勇士队（Warriors）有杜兰特（Durant）还有其他几个队员在其中服役（serve）；除了服役之外，还可以看到队员和队员之中也有关注（follow）的关系存在。</p>
<p><figure><a class="lightgallery" href="https://nebula-website-cn.oss-cn-hangzhou.aliyuncs.com/nebula-website/images/demo/demo1.png" title="篮球图谱" data-thumbnail="https://nebula-website-cn.oss-cn-hangzhou.aliyuncs.com/nebula-website/images/demo/demo1.png">
        <img
            
            loading="lazy"
            src="https://nebula-website-cn.oss-cn-hangzhou.aliyuncs.com/nebula-website/images/demo/demo1.png"
            srcset="https://nebula-website-cn.oss-cn-hangzhou.aliyuncs.com/nebula-website/images/demo/demo1.png, https://nebula-website-cn.oss-cn-hangzhou.aliyuncs.com/nebula-website/images/demo/demo1.png 1.5x, https://nebula-website-cn.oss-cn-hangzhou.aliyuncs.com/nebula-website/images/demo/demo1.png 2x"
            sizes="auto"
            alt="篮球图谱">
    </a></figure></p>
<p>有了这个知识图谱，咱们接下来就在它之上搭一个简单的基于语法解析的 QA 系统吧😁。</p>
<h2 id="siwi-backend" class="headerLink">
    <a href="#siwi-backend" class="header-mark"></a>4 Siwi-backend</h2><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">┌────────────┼──────────────────────────────┐
</span></span><span class="line"><span class="cl">│            │              Backend         │
</span></span><span class="line"><span class="cl">│ ┌──────────▼──────────┐                   │
</span></span><span class="line"><span class="cl">│ │ Web API, Flask      │   ./app/          │
</span></span><span class="line"><span class="cl">│ └──────────┬──────────┘                   │
</span></span><span class="line"><span class="cl">│            │  Sentence    ./bot/          │
</span></span><span class="line"><span class="cl">│ ┌──────────▼──────────┐                   │
</span></span><span class="line"><span class="cl">│ │ Intent matching,    │   ./bot/classifier│
</span></span><span class="line"><span class="cl">│ │ Symentic Processing │                   │
</span></span><span class="line"><span class="cl">│ └──────────┬──────────┘                   │
</span></span><span class="line"><span class="cl">│            │  Intent, Entities            │
</span></span><span class="line"><span class="cl">│ ┌──────────▼──────────┐                   │
</span></span><span class="line"><span class="cl">│ │ Intent Actor        │   ./bot/actions   │
</span></span><span class="line"><span class="cl">└─┴──────────┬──────────┴───────────────────┘
</span></span><span class="line"><span class="cl">             │  Graph Query
</span></span><span class="line"><span class="cl">  ┌──────────▼──────────┐
</span></span><span class="line"><span class="cl">  │ Graph Database      │    Nebula Graph
</span></span><span class="line"><span class="cl">  └─────────────────────┘
</span></span></code></pre></td></tr></table>
</div>
</div><p>如上图的设计流程，Siwi 的后端部分需要接收问句，处理之后访问知识图谱（图数据库），然后将处理结果返回给用户。</p>
<h3 id="接收-http-请求app" class="headerLink">
    <a href="#%e6%8e%a5%e6%94%b6-http-%e8%af%b7%e6%b1%82app" class="header-mark"></a>4.1 接收 HTTP 请求(app)</h3><p>对于请求，就简单地用 Flask 作为 web server 来接收 HTTP 的 POST 请求：</p>
<blockquote>
<p>💡：还不熟悉 Flask 的同学，可以在 <a href="https://www.freecodecamp.org/news/tag/flask/" target="_blank" rel="noopener noreferrer">freeCodeCamp 上搜索一下</a>，有一些不错的课程哈。</p>
</blockquote>
<p>下边的代码就是告诉 Flask ：</p>
<ol>
<li>如果用户发过来 <code>http://&lt;server&gt;/query</code> 的 POST 请求，提的问题就在请求的 body 里的 <code>question</code> 的 Key 之下。</li>
<li>取得问题之后，调用把请求传给  <code>siwi_bot</code> 的 <code>query()</code>，得到 <code>answer</code> 。</li>
</ol>
<p>代码段：<code>src/siwi/app/__init__.py</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1">#...</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">siwi.bot</span> <span class="kn">import</span> <span class="n">bot</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#...</span>
</span></span><span class="line"><span class="cl"><span class="nd">@app.route</span><span class="p">(</span><span class="s2">&#34;/query&#34;</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;POST&#34;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">query</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">request_data</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">get_json</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">question</span> <span class="o">=</span> <span class="n">request_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;question&#34;</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">)</span> <span class="c1"># &lt;----- 1.</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">question</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">answer</span> <span class="o">=</span> <span class="n">siwi_bot</span><span class="o">.</span><span class="n">query</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">request_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;question&#34;</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">))</span>   <span class="c1"># &lt;----- 2.</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">answer</span> <span class="o">=</span> <span class="s2">&#34;Sorry, what did you say?&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">jsonify</span><span class="p">({</span><span class="s2">&#34;answer&#34;</span><span class="p">:</span> <span class="n">answer</span><span class="p">})</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>接下来我们来实现 <code>siwi_bot</code>，真正处理提问的逻辑。</p>
<h3 id="处理请求bot" class="headerLink">
    <a href="#%e5%a4%84%e7%90%86%e8%af%b7%e6%b1%82bot" class="header-mark"></a>4.2 处理请求(bot)</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">│            │  Sentence    ./bot/          │
</span></span><span class="line"><span class="cl">│ ┌──────────▼──────────┐                   │
</span></span><span class="line"><span class="cl">│ │ Intent matching,    │   ./bot/classifier│
</span></span><span class="line"><span class="cl">│ │ Symentic Processing │                   │
</span></span><span class="line"><span class="cl">│ └──────────┬──────────┘                   │
</span></span><span class="line"><span class="cl">│            │  Intent, Entities            │
</span></span><span class="line"><span class="cl">│ ┌──────────▼──────────┐                   │
</span></span><span class="line"><span class="cl">│ │ Intent Actor        │   ./bot/actions   │
</span></span><span class="line"><span class="cl">└─┴──────────┬──────────┴───────────────────┘
</span></span></code></pre></td></tr></table>
</div>
</div><p>前边提到过，KBQA 基本上是</p>
<p>a. 把问题解析、转换成在知识图谱中的查询</p>
<p>b. 查询得到结果之后进行筛选、翻译成结果</p>
<p>这里，我们把 a. 的逻辑放在 <code>classifier</code> 里，b. 的逻辑放在 <code>actions</code>(actor) 里。</p>
<p>a. HTTP 请求的问题句子 <code>sentence</code> 传过来，用 <code>classifier</code> 解析它的意图和句子实体</p>
<p>b. 用意图和句子实体构造 <code>action</code>，并链接图数据库执行，获取结果。</p>
<p>代码段：<code>src/siwi/bot/bot/__init__.py</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">siwi.bot.actions</span> <span class="kn">import</span> <span class="n">SiwiActions</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">siwi.bot.classifier</span> <span class="kn">import</span> <span class="n">SiwiClassifier</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">SiwiBot</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">connection_pool</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">classifier</span> <span class="o">=</span> <span class="n">SiwiClassifier</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">actions</span> <span class="o">=</span> <span class="n">SiwiActions</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">connection_pool</span> <span class="o">=</span> <span class="n">connection_pool</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">query</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">sentence</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">intent</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">classifier</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">sentence</span><span class="p">)</span> <span class="c1"># &lt;--- a.</span>
</span></span><span class="line"><span class="cl">        <span class="n">action</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">actions</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">intent</span><span class="p">)</span>      <span class="c1"># &lt;--- b.</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">action</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">connection_pool</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>首先咱们来进一步实现一下 <code>SiwiClassifier</code> 吧。</p>
<h4 id="语义解析classifier" class="headerLink">
    <a href="#%e8%af%ad%e4%b9%89%e8%a7%a3%e6%9e%90classifier" class="header-mark"></a>4.2.1 语义解析(classifier)</h4><p><code>classifier </code> 需要在 <code>get(sentence)</code> 方法里将句子中的实体和句子的意图解析、分类出来。通常来说，这里是需要借助机器学习、NLP去分词、分类实现的，这里只是为了展示这个过程实际上只是各种 <code>if/ else</code>。</p>
<p>我们这里实现了三类意图的问题：</p>
<ul>
<li>关系（A，B）：获得 A 和 B 在图谱中的关系路径，比如姚明和湖人队的关系是？</li>
<li>服役情况：比如乔纳森在哪里服役？</li>
<li>关注情况：比如邓肯关注了谁？</li>
</ul>
<blockquote>
<p>❓ 开放问题：</p>
<p>如果看教程的你觉得这几个问题太没意思了，这里留一个开放问题，你可以在 Siwi 里帮我们实现：「共同好友（A，B）获得 A 和 B 的一度共同好友」这个意图（或者更酷的其他句子）么？欢迎来 Github：github.com/wey-gu/nebula-siwi/ 提 PR 哦，看看谁先实现。</p>
</blockquote>
<p>代码片段：<code>src/siwi/bot/classfier/__init__.py</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">SiwiClassifier</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">sentence</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">dict</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">        Classify Sentences and Fill Slots.
</span></span></span><span class="line"><span class="cl"><span class="s2">        This should be done by NLP, here we fake one to demostrate
</span></span></span><span class="line"><span class="cl"><span class="s2">        the intent Actor --&gt; Graph DB work flow.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">        sentense:
</span></span></span><span class="line"><span class="cl"><span class="s2">          relation:
</span></span></span><span class="line"><span class="cl"><span class="s2">            - What is the relationship between Yao Ming and Lakers?
</span></span></span><span class="line"><span class="cl"><span class="s2">            - How does Tracy McGrady and Lakers connected?
</span></span></span><span class="line"><span class="cl"><span class="s2">          serving:
</span></span></span><span class="line"><span class="cl"><span class="s2">            - Which team had Jonathon Simmons served?
</span></span></span><span class="line"><span class="cl"><span class="s2">          friendship:
</span></span></span><span class="line"><span class="cl"><span class="s2">            - Whom does Tim Duncan follow?
</span></span></span><span class="line"><span class="cl"><span class="s2">            - Who are Tracy McGrady&#39;s friends?
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">        returns:
</span></span></span><span class="line"><span class="cl"><span class="s2">        {
</span></span></span><span class="line"><span class="cl"><span class="s2">            &#34;entities&#34;: entities,
</span></span></span><span class="line"><span class="cl"><span class="s2">            &#34;intents&#34;: intents
</span></span></span><span class="line"><span class="cl"><span class="s2">        }
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="n">entities</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_matched_entities</span><span class="p">(</span><span class="n">sentence</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">intents</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_matched_intents</span><span class="p">(</span><span class="n">sentence</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;entities&#34;</span><span class="p">:</span> <span class="n">entities</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;intents&#34;</span><span class="p">:</span> <span class="n">intents</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这里，我把匹配的规则（等价于 if else&hellip;）写在了 <code>src/siwi/bot/test/data</code> 之下的 YAML 文件里，这样增加 <code>classifier</code> 之中新的规则只需要更新这个文件就可以了：</p>
<h5 id="意图识别intent" class="headerLink">
    <a href="#%e6%84%8f%e5%9b%be%e8%af%86%e5%88%abintent" class="header-mark"></a>4.2.1.1 意图识别(intent)</h5><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">load_entity_data</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># load data from yaml files</span>
</span></span><span class="line"><span class="cl">    <span class="n">module_path</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span> <span class="n">siwi</span><span class="o">.</span><span class="n">__path__</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="si">}</span><span class="s2">/bot/test/data&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#...</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span> <span class="n">module_path</span> <span class="si">}</span><span class="s2">/intents.yaml&#34;</span><span class="p">,</span> <span class="s2">&#34;r&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">file</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">intents</span> <span class="o">=</span> <span class="n">yaml</span><span class="o">.</span><span class="n">safe_load</span><span class="p">(</span><span class="n">file</span><span class="p">)[</span><span class="s2">&#34;intents&#34;</span><span class="p">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>对于每一个意图来说：</p>
<ul>
<li><code>intents.&lt;名字&gt;</code> 代表名字</li>
<li>名字之后的 <code>action</code> 代表后边在要实现的相应的 <code>xxxAction</code> 的类
<ul>
<li>比如 <code>RelationshipAction</code> 将是用来处理查询关系（A，B）这样的问题的 Action 类</li>
</ul>
</li>
<li><code>keywords</code> 代表在句子之中匹配的关键词
<ul>
<li>比如问句里出现 serve，served，serving 的字眼的时候，将会匹配服役的问题</li>
</ul>
</li>
</ul>
<blockquote>
<p>💡：写 if else 条件来对应意图是不容易的，因为不同意图不可能没有关键词相交的情况，我们的实现只是一个非常简陋、不严谨的方式。在实际场景下，训练模型去做匹配效果会更好，有意思的是，那些做的比较好的模型的输入和我们的 YAML 的格式是很类似的。</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">intents</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">fallback</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">action</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="l">FallbackAction</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">keywords</span><span class="p">:</span><span class="w"> </span><span class="p">[]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">relationship</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">action</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="l">RelationshipAction</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">keywords</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">between</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">relation</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">relationship</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">related</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">connect</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">correlate</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">serve</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">action</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="l">ServeAction</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">keywords</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">serve</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">served</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">serving</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">friend</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">action</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="l">FollowAction</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">keywords</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">follows</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">followed</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">follow</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">friend</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">friends</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h5 id="实体识别entity" class="headerLink">
    <a href="#%e5%ae%9e%e4%bd%93%e8%af%86%e5%88%abentity" class="header-mark"></a>4.2.1.2 实体识别(entity)</h5><p>类似的，实体识别的部分本质上也是 if else，只不过这里利用到了**<a href="https://zh.wikipedia.org/wiki/AC%E8%87%AA%E5%8A%A8%E6%9C%BA%E7%AE%97%E6%B3%95" target="_blank" rel="noopener noreferrer">Aho–Corasick算法</a>**来帮助搜索实体，在生产（非玩具）的情况下，应该用 NLP 里的分词的方法来做。</p>
<blockquote>
<p>💡：大家可以去了解一下这个 <a href="https://zh.wikipedia.org/wiki/AC%E8%87%AA%E5%8A%A8%E6%9C%BA%E7%AE%97%E6%B3%95" target="_blank" rel="noopener noreferrer">AC自动机算法</a></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">setup_entity_tree</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="bp">self</span><span class="o">.</span><span class="n">entity_type_map</span><span class="o">.</span><span class="n">update</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">        <span class="n">key</span><span class="p">:</span> <span class="s2">&#34;player&#34;</span> <span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">players</span><span class="o">.</span><span class="n">keys</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="bp">self</span><span class="o">.</span><span class="n">entity_type_map</span><span class="o">.</span><span class="n">update</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">        <span class="n">key</span><span class="p">:</span> <span class="s2">&#34;team&#34;</span> <span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">teams</span><span class="o">.</span><span class="n">keys</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="bp">self</span><span class="o">.</span><span class="n">entity_tree</span> <span class="o">=</span> <span class="n">ahocorasick</span><span class="o">.</span><span class="n">Automaton</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">index</span><span class="p">,</span> <span class="n">entity</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">entity_type_map</span><span class="o">.</span><span class="n">keys</span><span class="p">()):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">entity_tree</span><span class="o">.</span><span class="n">add_word</span><span class="p">(</span><span class="n">entity</span><span class="p">,</span> <span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="n">entity</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="bp">self</span><span class="o">.</span><span class="n">entity_tree</span><span class="o">.</span><span class="n">make_automaton</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">get_matched_entities</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">sentence</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">dict</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    Consume a sentence to be matched with ahocorasick
</span></span></span><span class="line"><span class="cl"><span class="s2">    Returns a dict: {entity: entity_type}
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">_matched</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">entity_tree</span><span class="o">.</span><span class="n">iter</span><span class="p">(</span><span class="n">sentence</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">entities_matched</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">item</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">entity</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">entity_type_map</span><span class="p">[</span><span class="n">entity</span><span class="p">]</span> <span class="k">for</span> <span class="n">entity</span> <span class="ow">in</span> <span class="n">_matched</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>至此，我们的 <code>SiwiClassifier.get(sentence)</code> 已经能返回解析、分类出来的意图和实体了，这时候，它们会被传给 Actions 来让 siwi bot 知道如何去执行知识图谱的查询啦！</p>
<h4 id="构造图谱查询action" class="headerLink">
    <a href="#%e6%9e%84%e9%80%a0%e5%9b%be%e8%b0%b1%e6%9f%a5%e8%af%a2action" class="header-mark"></a>4.2.2 构造图谱查询(action)</h4><p>还记得前边的 bot 代码里，最后一步，图谱查询的动作是这么被构造的：</p>
<p><code>action = self.actions.get(intent)</code></p>
<p>现在咱们就把它实现一下：</p>
<ol>
<li>
<p>在前边提到过的 <code>intents.yaml</code> 里获取这个意图里配置的意图的类名称</p>
</li>
<li>
<p>导入相应的 Action 类</p>
</li>
</ol>
<p>代码段：<code>src/bot/actions/__init__.py</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">SiwiActions</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">intent_map</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">load_data</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">load_data</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># load data from yaml files</span>
</span></span><span class="line"><span class="cl">        <span class="n">module_path</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span> <span class="n">siwi</span><span class="o">.</span><span class="n">__path__</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="si">}</span><span class="s2">/bot/test/data&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span> <span class="n">module_path</span> <span class="si">}</span><span class="s2">/intents.yaml&#34;</span><span class="p">,</span> <span class="s2">&#34;r&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">file</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">intent_map</span> <span class="o">=</span> <span class="n">yaml</span><span class="o">.</span><span class="n">safe_load</span><span class="p">(</span><span class="n">file</span><span class="p">)[</span><span class="s2">&#34;intents&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">intent</span><span class="p">:</span> <span class="nb">dict</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">        returns SiwiActionBase
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">intent</span><span class="p">[</span><span class="s2">&#34;intents&#34;</span><span class="p">])</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">intent_name</span> <span class="o">=</span> <span class="n">intent</span><span class="p">[</span><span class="s2">&#34;intents&#34;</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">intent_name</span> <span class="o">=</span> <span class="s2">&#34;fallback&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">cls_name</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">intent_map</span><span class="o">.</span><span class="n">get</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">intent_name</span><span class="p">)</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;action&#34;</span><span class="p">)</span> <span class="c1">#-------&gt; 1.</span>
</span></span><span class="line"><span class="cl">        <span class="n">action_cls</span> <span class="o">=</span> <span class="nb">getattr</span><span class="p">(</span>          <span class="c1">#-------&gt; 2.</span>
</span></span><span class="line"><span class="cl">            <span class="n">importlib</span><span class="o">.</span><span class="n">import_module</span><span class="p">(</span><span class="s2">&#34;siwi.bot.actions&#34;</span><span class="p">),</span> <span class="n">cls_name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">action</span> <span class="o">=</span> <span class="n">action_cls</span><span class="p">(</span><span class="n">intent</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">action</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>最后，我们来实现其中一个<code>Action</code> 类，比如 <code>RelationshipAction</code> 对应的代码如下：</p>
<ol>
<li>根据提供的 A 和 B，构造并执行图数据库之中的 <code>FIND PATH</code></li>
<li>将 <code>FIND PATH</code> 的结果进行解析，通过 <code>as_path()</code> 方法的封装，获得 path 类型的数据，并处理一个句子返回给用户</li>
</ol>
<blockquote>
<p>💡：FIND PATH 就是字面意思的查找路径，<a href="https://docs.nebula-graph.com.cn/2.6.1/3.ngql-guide/16.subgraph-and-path/2.find-path/" target="_blank" rel="noopener noreferrer">这里</a>有详细的解释哦。</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">RelationshipAction</span><span class="p">(</span><span class="n">SiwiActionBase</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    USE basketballplayer;
</span></span></span><span class="line"><span class="cl"><span class="s2">    FIND NOLOOP PATH
</span></span></span><span class="line"><span class="cl"><span class="s2">    FROM &#34;player100&#34; TO &#34;team204&#34; OVER * BIDIRECT UPTO 4 STEPS;
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">intent</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;[DEBUG] RelationshipAction intent: </span><span class="si">{</span> <span class="n">intent</span> <span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="fm">__init__</span><span class="p">(</span><span class="n">intent</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">entity_left</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">entity_right</span> <span class="o">=</span> <span class="n">intent</span><span class="p">[</span><span class="s2">&#34;entities&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">left_vid</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_vid</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">entity_left</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">right_vid</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_vid</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">entity_right</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">except</span> <span class="ne">Exception</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="sa">f</span><span class="s2">&#34;[WARN] RelationshipAction entities recognition Failure &#34;</span>
</span></span><span class="line"><span class="cl">                <span class="sa">f</span><span class="s2">&#34;will fallback to FallbackAction, &#34;</span>
</span></span><span class="line"><span class="cl">                <span class="sa">f</span><span class="s2">&#34;intent: </span><span class="si">{</span> <span class="n">intent</span> <span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">                <span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">error</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">execute</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">connection_pool</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">_error_check</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">query</span> <span class="o">=</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="sa">f</span><span class="s1">&#39;USE basketballplayer;&#39;</span>
</span></span><span class="line"><span class="cl">            <span class="sa">f</span><span class="s1">&#39;FIND NOLOOP PATH &#39;</span>
</span></span><span class="line"><span class="cl">            <span class="sa">f</span><span class="s1">&#39;FROM &#34;</span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">left_vid</span><span class="si">}</span><span class="s1">&#34; TO &#34;</span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">right_vid</span><span class="si">}</span><span class="s1">&#34; &#39;</span>
</span></span><span class="line"><span class="cl">            <span class="sa">f</span><span class="s1">&#39;OVER * BIDIRECT UPTO 4 STEPS;&#39;</span>
</span></span><span class="line"><span class="cl">            <span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="sa">f</span><span class="s2">&#34;[DEBUG] query for RelationshipAction :</span><span class="se">\n\t</span><span class="si">{</span> <span class="n">query</span> <span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">with</span> <span class="n">connection_pool</span><span class="o">.</span><span class="n">session_context</span><span class="p">(</span><span class="s2">&#34;root&#34;</span><span class="p">,</span> <span class="s2">&#34;nebula&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">session</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">result</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>        <span class="c1">#--------------------&gt; 1.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="ow">not</span> <span class="n">result</span><span class="o">.</span><span class="n">is_succeeded</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="sa">f</span><span class="s2">&#34;Something is wrong on Graph Database connection when query &#34;</span>
</span></span><span class="line"><span class="cl">                <span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span> <span class="n">query</span> <span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">                <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">result</span><span class="o">.</span><span class="n">is_empty</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="sa">f</span><span class="s2">&#34;There is no relationship between &#34;</span>
</span></span><span class="line"><span class="cl">                <span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span> <span class="bp">self</span><span class="o">.</span><span class="n">entity_left</span> <span class="si">}</span><span class="s2"> and </span><span class="si">{</span> <span class="bp">self</span><span class="o">.</span><span class="n">entity_right</span> <span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">                <span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">path</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="n">row_values</span><span class="p">(</span><span class="mi">0</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">as_path</span><span class="p">()</span>    <span class="c1">#-------------------&gt; 2.</span>
</span></span><span class="line"><span class="cl">        <span class="n">relationships</span> <span class="o">=</span> <span class="n">path</span><span class="o">.</span><span class="n">relationships</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">relations_str</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_name</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">relationships</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">start_vertex_id</span><span class="p">()</span><span class="o">.</span><span class="n">as_string</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">rel_index</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">path</span><span class="o">.</span><span class="n">length</span><span class="p">()):</span>
</span></span><span class="line"><span class="cl">            <span class="n">rel</span> <span class="o">=</span> <span class="n">relationships</span><span class="p">[</span><span class="n">rel_index</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="n">relations_str</span> <span class="o">+=</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="sa">f</span><span class="s2">&#34; </span><span class="si">{</span> <span class="n">rel</span><span class="o">.</span><span class="n">edge_name</span><span class="p">()</span> <span class="si">}</span><span class="s2">s &#34;</span>
</span></span><span class="line"><span class="cl">                <span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span> <span class="bp">self</span><span class="o">.</span><span class="n">_name</span><span class="p">(</span><span class="n">rel</span><span class="o">.</span><span class="n">end_vertex_id</span><span class="p">()</span><span class="o">.</span><span class="n">as_string</span><span class="p">())</span> <span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="sa">f</span><span class="s2">&#34;There are at least </span><span class="si">{</span> <span class="n">result</span><span class="o">.</span><span class="n">row_size</span><span class="p">()</span> <span class="si">}</span><span class="s2"> relations between &#34;</span>
</span></span><span class="line"><span class="cl">            <span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span> <span class="bp">self</span><span class="o">.</span><span class="n">entity_left</span> <span class="si">}</span><span class="s2"> and </span><span class="si">{</span> <span class="bp">self</span><span class="o">.</span><span class="n">entity_right</span> <span class="si">}</span><span class="s2">, &#34;</span>
</span></span><span class="line"><span class="cl">            <span class="sa">f</span><span class="s2">&#34;one relation path is: </span><span class="si">{</span> <span class="n">relations_str</span> <span class="si">}</span><span class="s2">.&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>至此，咱们就已经实现了后端的所有功能，我们可以把它启动起来试试了！</p>
<h3 id="测试一下" class="headerLink">
    <a href="#%e6%b5%8b%e8%af%95%e4%b8%80%e4%b8%8b" class="header-mark"></a>4.3 测试一下</h3><h4 id="启动图数据库" class="headerLink">
    <a href="#%e5%90%af%e5%8a%a8%e5%9b%be%e6%95%b0%e6%8d%ae%e5%ba%93" class="header-mark"></a>4.3.1 启动图数据库</h4><p>我们在 Nebula Graph 里建立（导入数据）一个篮球的知识图谱。</p>
<blockquote>
<p>💡：在导入数据之前，请先部署一个 Nebula Graph 集群。最简便的部署方式是使用 Nebula-UP 这个小工具，只需要一行命令就能在 Linux 机器上同时启动一个 Nebula Graph 核心和可视化图探索工具 <a href="https://docs.nebula-graph.com.cn/2.6.1/nebula-studio/about-studio/st-ug-what-is-graph-studio/" target="_blank" rel="noopener noreferrer">Nebula Graph Studio</a>。如果你更愿意用 Docker 部署，请参考<a href="https://docs.nebula-graph.com.cn/2.6.1/4.deployment-and-installation/2.compile-and-install-nebula-graph/3.deploy-nebula-graph-with-docker-compose/" target="_blank" rel="noopener noreferrer">这个文档</a>。</p>
</blockquote>
<p>本文假设我们使用 <a href="https://siwei.io/nebula-up/" target="_blank" rel="noopener noreferrer">Nebula-UP</a> 来部署一个 Nebula Graph：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -fsSL nebula-up.siwei.io/install.sh <span class="p">|</span> bash
</span></span></code></pre></td></tr></table>
</div>
</div><p>之后，我们会看到这样的提示：</p>
<p><figure><a class="lightgallery" href="https://github.com/wey-gu/nebula-up/raw/main/images/nebula-up-demo-shell.png" title="https://github.com/wey-gu/nebula-up/raw/main/images/nebula-up-demo-shell.png" data-thumbnail="https://github.com/wey-gu/nebula-up/raw/main/images/nebula-up-demo-shell.png">
        <img
            
            loading="lazy"
            src="https://github.com/wey-gu/nebula-up/raw/main/images/nebula-up-demo-shell.png"
            srcset="https://github.com/wey-gu/nebula-up/raw/main/images/nebula-up-demo-shell.png, https://github.com/wey-gu/nebula-up/raw/main/images/nebula-up-demo-shell.png 1.5x, https://github.com/wey-gu/nebula-up/raw/main/images/nebula-up-demo-shell.png 2x"
            sizes="auto"
            alt="https://github.com/wey-gu/nebula-up/raw/main/images/nebula-up-demo-shell.png">
    </a></figure></p>
<p>按照提示，我们可以通过这个命令进入到有 Nebula Console 的容器里：</p>
<blockquote>
<p>💡：<a href="https://github.com/vesoft-inc/nebula-console" target="_blank" rel="noopener noreferrer">Nebula Console</a> 是命令行访问 Nebula Graph 图数据库的客户端，支持 Linux，Windows 和 macOS，下载地址：<a href="https://github.com/vesoft-inc/nebula-console/releases" target="_blank" rel="noopener noreferrer">这里</a></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">~/.nebula-up/console.sh
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后，在 <code>#</code> 的提示符下就表示我们进来了，我们在里边可以执行：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">nebula-console -addr graphd -port 9669 -user root -p nebula
</span></span></code></pre></td></tr></table>
</div>
</div><p>这样就表示我们连接上了 Nebula Graph 图数据库：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="o">/</span><span class="w"> </span><span class="c1"># nebula-console -addr graphd -port 9669 -user root -p nebula
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Welcome</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="n">Nebula</span><span class="w"> </span><span class="n">Graph</span><span class="o">!</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="n">root</span><span class="o">@</span><span class="n">nebula</span><span class="p">)</span><span class="w"> </span><span class="p">[(</span><span class="n">none</span><span class="p">)]</span><span class="o">&gt;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>在这里，我们就可以通过 nGQL 去操作 Nebula Graph，不过我们先退出来，执行 <code>exit</code>：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="p">(</span><span class="n">root</span><span class="o">@</span><span class="n">nebula</span><span class="p">)</span><span class="w"> </span><span class="p">[(</span><span class="n">none</span><span class="p">)]</span><span class="o">&gt;</span><span class="w"> </span><span class="k">exit</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">Bye</span><span class="w"> </span><span class="n">root</span><span class="o">!</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">Fri</span><span class="p">,</span><span class="w"> </span><span class="mi">31</span><span class="w"> </span><span class="kt">Dec</span><span class="w"> </span><span class="mi">2021</span><span class="w"> </span><span class="mi">04</span><span class="p">:</span><span class="mi">11</span><span class="p">:</span><span class="mi">28</span><span class="w"> </span><span class="n">UTC</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>我们在这个容器内把基于 nGQL 语句的数据下载下来：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">/ <span class="c1"># wget https://docs.nebula-graph.io/2.0/basketballplayer-2.X.ngql</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后通过 Nebula Console 的 <code>-f &lt;file_path&gt;</code> 把数据导入进去：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">nebula-console -addr graphd -port <span class="m">9669</span> -user root -p nebula -f basketballplayer-2.X.ngql
</span></span></code></pre></td></tr></table>
</div>
</div><p>至此，我们就启动了一个 Nebula Graph 图数据库，还在里边加载了篮球的知识图谱！</p>
<blockquote>
<p>💡：还记得前边我们提到的 <a href="https://nebula-graph.com.cn/demo/" target="_blank" rel="noopener noreferrer">在线体验</a> 环境么？现在，我们可以在这个利用 Nebula-UP 部署了 Nebula 的环境里启动自己的 Nebula Studio 啦，按照上边 Nebula-UP 的提示：http://&lt;本机IP&gt;:7001 就是它的地址，然后大家可以参考<a href="https://docs.nebula-graph.com.cn/2.6.1/nebula-studio/deploy-connect/st-ug-connect/" target="_blank" rel="noopener noreferrer">文档</a>和<a href="https://www.bilibili.com/video/BV1hq4y1177e" target="_blank" rel="noopener noreferrer">在线体验介绍</a>去了解更多。</p>
<p><figure><a class="lightgallery" href="https://nebula-website-cn.oss-cn-hangzhou.aliyuncs.com/nebula-website/images/demo/demo1.png" title="studio" data-thumbnail="https://nebula-website-cn.oss-cn-hangzhou.aliyuncs.com/nebula-website/images/demo/demo1.png">
        <img
            
            loading="lazy"
            src="https://nebula-website-cn.oss-cn-hangzhou.aliyuncs.com/nebula-website/images/demo/demo1.png"
            srcset="https://nebula-website-cn.oss-cn-hangzhou.aliyuncs.com/nebula-website/images/demo/demo1.png, https://nebula-website-cn.oss-cn-hangzhou.aliyuncs.com/nebula-website/images/demo/demo1.png 1.5x, https://nebula-website-cn.oss-cn-hangzhou.aliyuncs.com/nebula-website/images/demo/demo1.png 2x"
            sizes="auto"
            alt="studio">
    </a></figure></p>
</blockquote>
<h4 id="启动-siwi-backend" class="headerLink">
    <a href="#%e5%90%af%e5%8a%a8-siwi-backend" class="header-mark"></a>4.3.2 启动 Siwi-backend</h4><p>大家可以直接 clone 我的代码：<code>git clone https://github.com/wey-gu/nebula-siwi/</code></p>
<p>然后安装、启动 Siwi Backend：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> nebula-siwi
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Install dependencies</span>
</span></span><span class="line"><span class="cl">python3 -m pip install -r src/requirements.txt
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Install siwi backend</span>
</span></span><span class="line"><span class="cl">python3 -m build
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Configure Nebula Graph Endpoint</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">NG_ENDPOINTS</span><span class="o">=</span>127.0.0.1:9669
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Run Backend API server</span>
</span></span><span class="line"><span class="cl">gunicorn --bind :5000 wsgi --workers <span class="m">1</span> --threads <span class="m">1</span> --timeout <span class="m">60</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>启动之后，我们可以另外开窗口，通过 cURL 去发起问题给 backend，更多细节大家可以参考 GitHub 上的 README：</p>
<p><a href="https://github.com/wey-gu/nebula-siwi/blob/main/images/backend-demo.webp" target="_blank" rel="noopener noreferrer"><figure><a class="lightgallery" href="https://github.com/wey-gu/nebula-siwi/raw/main/images/backend-demo.webp" title="backend-demo" data-thumbnail="https://github.com/wey-gu/nebula-siwi/raw/main/images/backend-demo.webp">
        <img
            
            loading="lazy"
            src="https://github.com/wey-gu/nebula-siwi/raw/main/images/backend-demo.webp"
            srcset="https://github.com/wey-gu/nebula-siwi/raw/main/images/backend-demo.webp, https://github.com/wey-gu/nebula-siwi/raw/main/images/backend-demo.webp 1.5x, https://github.com/wey-gu/nebula-siwi/raw/main/images/backend-demo.webp 2x"
            sizes="auto"
            alt="backend-demo">
    </a></figure></a></p>
<p>至此，我们已经写好了 QA 系统的重要的代码啦，大家是不是对一个 KBQA 的构成有了更清晰的概念了呢？</p>
<p>接下来，我们为它增加一个界面！</p>
<h2 id="siwi-frontend" class="headerLink">
    <a href="#siwi-frontend" class="header-mark"></a>5 Siwi-frontend</h2><h3 id="聊天界面" class="headerLink">
    <a href="#%e8%81%8a%e5%a4%a9%e7%95%8c%e9%9d%a2" class="header-mark"></a>5.1 聊天界面</h3><p>我们利用 <a href="https://github.com/juzser/vue-bot-ui" target="_blank" rel="noopener noreferrer">Vue Bot UI</a> 这个可爱的机器人界面的 Vue 实现可以很容易构造一个</p>
<p>代码段：<code>src/siwi/frontend/src/App.vue</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-vue" data-lang="vue"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">VueBotUI</span>
</span></span><span class="line"><span class="cl">      <span class="nt">:messages</span><span class="s">=&#34;msg&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">:options</span><span class="s">=&#34;botOptions&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">:bot-typing</span><span class="s">=&#34;locking&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">:input-disable</span><span class="s">=&#34;locking&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">@msg-send</span><span class="s">=&#34;msgSender&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">VueBotUI</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;vue-bot-ui&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="https://github.com/wey-gu/nebula-siwi/blob/main/src/siwi_frontend/images/demo.webp" target="_blank" rel="noopener noreferrer"><figure><a class="lightgallery" href="https://github.com/wey-gu/nebula-siwi/raw/main/src/siwi_frontend/images/demo.webp" title="demo" data-thumbnail="https://github.com/wey-gu/nebula-siwi/raw/main/src/siwi_frontend/images/demo.webp">
        <img
            
            loading="lazy"
            src="https://github.com/wey-gu/nebula-siwi/raw/main/src/siwi_frontend/images/demo.webp"
            srcset="https://github.com/wey-gu/nebula-siwi/raw/main/src/siwi_frontend/images/demo.webp, https://github.com/wey-gu/nebula-siwi/raw/main/src/siwi_frontend/images/demo.webp 1.5x, https://github.com/wey-gu/nebula-siwi/raw/main/src/siwi_frontend/images/demo.webp 2x"
            sizes="auto"
            alt="demo">
    </a></figure></a></p>
<p>注意到那个小飞机按钮了吧，它是发出问题请求的按键，我们要在按下它的时候对后端做出请求。</p>
<h3 id="访问后端" class="headerLink">
    <a href="#%e8%ae%bf%e9%97%ae%e5%90%8e%e7%ab%af" class="header-mark"></a>5.2 访问后端</h3><p>这部分用到了<a href="https://github.com/axios/axios" target="_blank" rel="noopener noreferrer">Axios</a>，它是浏览器里访问其他地址的 HTTP 客户端。</p>
<ol>
<li>在按下的时候，<code>@msg-send=&quot;msgSender&quot;</code> 会触发 <code>msgSender()</code></li>
<li><code> msgSender()</code>去构造<code>axios.post(this.apiEndpoint, { &quot;question&quot;: data.text })</code> 的请求给 Siwi 的后端</li>
<li>后端的结果被 <code>push()</code> 到界面的聊天消息里，渲染出来 <code>this.msg.push()</code></li>
</ol>
<p>代码段：<code>src/siwi/frontend/src/App.vue</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-vue" data-lang="vue"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">     <span class="p">&lt;</span><span class="nt">VueBotUI</span>
</span></span><span class="line"><span class="cl">      <span class="nt">:messages</span><span class="s">=&#34;msg&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">:options</span><span class="s">=&#34;botOptions&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">:bot-typing</span><span class="s">=&#34;locking&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">:input-disable</span><span class="s">=&#34;locking&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">@msg-send</span><span class="s">=&#34;msgSender&#34;</span>         <span class="err">----------------</span> <span class="na">1.</span>
</span></span><span class="line"><span class="cl">    <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">VueBotUI</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;vue-bot-ui&#39;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">axios</span> <span class="nx">from</span> <span class="s2">&#34;axios&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;App&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">components</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">VueBotUI</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">msgSender</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="p">.</span><span class="nx">msg</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">        <span class="nx">agent</span><span class="o">:</span> <span class="s2">&#34;user&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">type</span><span class="o">:</span> <span class="s2">&#34;text&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">text</span><span class="o">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">text</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="p">.</span><span class="nx">locking</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="nx">axios</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">apiEndpoint</span><span class="p">,</span> <span class="p">{</span> <span class="s2">&#34;question&#34;</span><span class="o">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">text</span> <span class="p">}).</span><span class="nx">then</span><span class="p">((</span><span class="nx">response</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">response</span><span class="p">);</span>   <span class="o">-----------------</span> <span class="mf">2.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">msg</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span>          <span class="o">-----------------</span> <span class="mf">3.</span>
</span></span><span class="line"><span class="cl">          <span class="nx">agent</span><span class="o">:</span> <span class="s2">&#34;bot&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="nx">type</span><span class="o">:</span> <span class="s2">&#34;text&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="nx">text</span><span class="o">:</span> <span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">answer</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">synthText</span> <span class="o">=</span> <span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">answer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">agentSpeak</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">locking</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">});</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>现在，我们已经有了一个图形界面的机器人啦，不过，更进一步，我们可以利用现代浏览器的接口，实现语音识别和机器人说话！</p>
<h3 id="语音识别" class="headerLink">
    <a href="#%e8%af%ad%e9%9f%b3%e8%af%86%e5%88%ab" class="header-mark"></a>5.3 语音识别</h3><p>我们借助于 <a href="https://github.com/Drackokacka/vue-web-speech" target="_blank" rel="noopener noreferrer">Vue Web Speech</a>, 这个语音 API 的 VueJS 的绑定，可以很容易在按下 🎙️ 的时候接收人的语音，并把语音转换成文字发出去，在回答被返回之后，它（还是他/她😁？）也会把回答的句子读出来给用户。</p>
<ol>
<li><code>record</code> 在 <code>🎙️</code> 被按下之后，变成 <code>👂</code></li>
<li>触发 <code>onResults()</code> 监听</li>
<li>把返回结果发给 <code>this.synthText</code> 合成器，准备读出</li>
<li><code>&lt;vue-web-speech-synth&gt;</code> 把语音读出</li>
</ol>
<p>代码段：<code>src/siwi/frontend/src/App.vue</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-vue" data-lang="vue"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">button</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;mic_btn&#34;</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;record = !record&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">{{</span><span class="nx">record</span><span class="o">?</span><span class="s1">&#39;👂&#39;</span><span class="o">:</span><span class="s1">&#39;🎙️&#39;</span><span class="p">}}</span>      <span class="o">--------------------------&gt;</span> <span class="mf">1.</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">vue-web-speech</span>
</span></span><span class="line"><span class="cl">      <span class="na">v</span><span class="nt">-model</span><span class="err">=&#34;</span><span class="na">record</span><span class="err">&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">@results</span><span class="s">=&#34;onResults&#34;</span>       <span class="err">--------------------------</span><span class="p">&gt;</span> <span class="mf">1.</span>
</span></span><span class="line"><span class="cl">      <span class="err">@</span><span class="nx">unrecognized</span><span class="o">=</span><span class="s2">&#34;unrecognized&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="o">&lt;</span><span class="err">/vue-web-speech&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">...</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">vue-web-speech-synth</span>
</span></span><span class="line"><span class="cl">      <span class="na">v</span><span class="nt">-model</span><span class="err">=&#34;</span><span class="na">agentSpeak</span><span class="err">&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">:voice</span><span class="s">=&#34;synthVoice&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">:text</span><span class="s">=&#34;synthText&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">@list-voices</span><span class="s">=&#34;listVoices&#34;</span>  <span class="err">--------------------------</span><span class="p">&gt;</span> <span class="mf">4.</span>
</span></span><span class="line"><span class="cl">    <span class="o">/&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">VueBotUI</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;vue-bot-ui&#39;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">axios</span> <span class="nx">from</span> <span class="s2">&#34;axios&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;App&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">components</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">VueBotUI</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">onResults</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>             <span class="o">-------------------------&gt;</span> <span class="mf">2.</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="p">.</span><span class="nx">results</span> <span class="o">=</span> <span class="nx">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="p">.</span><span class="nx">locking</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="p">.</span><span class="nx">msg</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">        <span class="nx">agent</span><span class="o">:</span> <span class="s2">&#34;user&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">type</span><span class="o">:</span> <span class="s2">&#34;text&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">text</span><span class="o">:</span> <span class="nx">data</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">      <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="p">.</span><span class="nx">locking</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">      <span class="nx">axios</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">apiEndpoint</span><span class="p">,</span> <span class="p">{</span> <span class="s2">&#34;question&#34;</span><span class="o">:</span> <span class="nx">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">}).</span><span class="nx">then</span><span class="p">((</span><span class="nx">response</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">msg</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">          <span class="nx">agent</span><span class="o">:</span> <span class="s2">&#34;bot&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="nx">type</span><span class="o">:</span> <span class="s2">&#34;text&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="nx">text</span><span class="o">:</span> <span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">answer</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">synthText</span> <span class="o">=</span> <span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">answer</span><span class="p">;</span>  <span class="o">----------&gt;</span> <span class="mf">3.</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">agentSpeak</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">});</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="p">.</span><span class="nx">locking</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>6 总结</h2><p>至此，我们已经学会了搭建自己的第一个 KBQA：知识图谱驱动的问答系统。</p>
<p>回顾下它的代码结构：</p>
<ul>
<li><code>src/siwi</code> 对应后端
<ul>
<li>App 是 Flask API 处理的部分</li>
<li>Bot 是处理请求、访问 Nebula Graph 的部分</li>
</ul>
</li>
<li><code>src/siwi_frontend</code> 是前端</li>
</ul>
<p>希望大家在这个简陋的基础之上，多多探索，做出来更加成熟的聊天机器人，欢迎你来给我邮件、留言告诉我呀，这里：https://siwei.io/about 有我的联系方式。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── README.md
</span></span><span class="line"><span class="cl">├── src
</span></span><span class="line"><span class="cl">│   ├── siwi                        <span class="c1"># Siwi-API Backend</span>
</span></span><span class="line"><span class="cl">│   │   ├── app                     <span class="c1"># Web Server, take HTTP requests and calls Bot API</span>
</span></span><span class="line"><span class="cl">│   │   └── bot                     <span class="c1"># Bot API</span>
</span></span><span class="line"><span class="cl">│   │       ├── actions             <span class="c1"># Take Intent, Slots, Query Knowledge Graph here</span>
</span></span><span class="line"><span class="cl">│   │       ├── bot                 <span class="c1"># Entrypoint of the Bot API</span>
</span></span><span class="line"><span class="cl">│   │       ├── classifier          <span class="c1"># Symentic Parsing, Intent Matching, Slot Filling</span>
</span></span><span class="line"><span class="cl">│   │       └── <span class="nb">test</span>                <span class="c1"># Example Data Source as equivalent/mocked module</span>
</span></span><span class="line"><span class="cl">│   └── siwi_frontend               <span class="c1"># Browser End</span>
</span></span><span class="line"><span class="cl">│       ├── README.md
</span></span><span class="line"><span class="cl">│       ├── package.json
</span></span><span class="line"><span class="cl">│       └── src
</span></span><span class="line"><span class="cl">│           ├── App.vue             <span class="c1"># Listening to user and pass Questions to Siwi-API</span>
</span></span><span class="line"><span class="cl">│           └── main.js
</span></span><span class="line"><span class="cl">└── wsgi.py
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果你很喜欢这样的小项目，欢迎来看看我之前的分享： 「<a href="https://siwei.io/corp-rel-graph/" target="_blank" rel="noopener noreferrer">从0-1：如何构建一个企业股权图谱系统？</a>」哦。</p>
<blockquote>
<p>💡：你知道吗，我其实借助于 Katacoda 已经为大家搭建了一个交互式体验 Siwi + Nebula 的部署的环境，如果您的网络条件够快（Katacoda服务器在国外），可以在<a href="https://siwei.io/learn/nebula-101-siwi-kgqa/" target="_blank" rel="noopener noreferrer">这里</a>点点鼠标就交互式体验它。</p>
<p>视频介绍</p>
<iframe src="//player.bilibili.com/player.html?aid=421964672&bvid=BV1Rm4y1Q7B5&cid=448090671&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>
</blockquote>
<h2 id="感谢用到的开源项目-" class="headerLink">
    <a href="#%e6%84%9f%e8%b0%a2%e7%94%a8%e5%88%b0%e7%9a%84%e5%bc%80%e6%ba%90%e9%a1%b9%e7%9b%ae-" class="header-mark"></a>7 感谢用到的开源项目 ❤️</h2><p>这个小项目里我们用到了好多开源的项目，非常感谢这些贡献者们的慷慨与无私，开源是不是很酷呢？</p>
<h3 id="backend" class="headerLink">
    <a href="#backend" class="header-mark"></a>7.1 Backend</h3><ul>
<li><a href="https://github.com/liuhuanyong/QASystemOnMedicalKG" target="_blank" rel="noopener noreferrer">KGQA on MedicalKG</a> by <a href="https://liuhuanyong.github.io/" target="_blank" rel="noopener noreferrer">Huanyong Liu</a></li>
<li><a href="https://github.com/pallets/flask" target="_blank" rel="noopener noreferrer">Flask</a></li>
<li><a href="https://github.com/WojciechMula/pyahocorasick" target="_blank" rel="noopener noreferrer">pyahocorasick</a> created by <a href="http://0x80.pl/" target="_blank" rel="noopener noreferrer">Wojciech Muła</a></li>
<li><a href="https://pyyaml.org/" target="_blank" rel="noopener noreferrer">PyYaml</a></li>
</ul>
<h3 id="frontend" class="headerLink">
    <a href="#frontend" class="header-mark"></a>7.2 Frontend</h3><ul>
<li><a href="https://vuejs.org/" target="_blank" rel="noopener noreferrer">VueJS</a> for frontend framework</li>
<li><a href="https://github.com/juzser/vue-bot-ui" target="_blank" rel="noopener noreferrer">Vue Bot UI</a>, as a lovely bot UI in vue</li>
<li><a href="https://github.com/Drackokacka/vue-web-speech" target="_blank" rel="noopener noreferrer">Vue Web Speech</a>, for speech API vue wrapper</li>
<li><a href="https://github.com/axios/axios" target="_blank" rel="noopener noreferrer">Axios</a> for browser http client</li>
<li><a href="https://en.wikipedia.org/wiki/Solarized_%28color_scheme%29" target="_blank" rel="noopener noreferrer">Solarized</a> for color scheme</li>
<li><a href="https://github.com/alvarosaburido/vitesome" target="_blank" rel="noopener noreferrer">Vitesome</a> for landing page design</li>
</ul>
<h3 id="graph-database" class="headerLink">
    <a href="#graph-database" class="header-mark"></a>7.3 Graph Database</h3><ul>
<li><a href="https://github.com/vesoft-inc/nebula/" target="_blank" rel="noopener noreferrer">Nebula Graph</a> 高性能、云原生的开源分布式图数据库</li>
</ul>]]></description>
</item></channel>
</rss>
