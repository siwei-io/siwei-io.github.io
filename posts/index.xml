<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>所有文章 - siwei.io</title>
        <link>https://siwei.io/posts/</link>
        <description>所有文章 | siwei.io</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>weyl.gu@gmail.com (Wey Gu)</managingEditor>
            <webMaster>weyl.gu@gmail.com (Wey Gu)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 13 Jan 2023 22:22:44 &#43;0800</lastBuildDate><atom:link href="https://siwei.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>图数据库的社交网络应用</title>
    <link>https://siwei.io/nebulagraph-sns/</link>
    <pubDate>Thu, 08 Dec 2022 15:30:33 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/nebulagraph-sns/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/nebulagraph-sns/featured-image.webp" referrerpolicy="no-referrer">
            </div><h1 id="图数据库的社交网络应用" class="headerLink">
    <a href="#%e5%9b%be%e6%95%b0%e6%8d%ae%e5%ba%93%e7%9a%84%e7%a4%be%e4%ba%a4%e7%bd%91%e7%bb%9c%e5%ba%94%e7%94%a8" class="header-mark"></a>图数据库的社交网络应用</h1><blockquote>
<p>本文是一个基于 NebulaGraph 上解决社交网络问题的常规方法综述。其中介绍的方法提供都了 Playground 供大家学习、玩耍。</p>
</blockquote>
<!--

[TOC]

-->
<p>社交网络大家都不陌生，无论是微信、微博、B 站还是大众点评、知乎、陌陌等服务，其本质上的用户都形成了社交网络。</p>
<p>在一个社交网络系统中，我们可以用图数据库来表示用户和他们的连接关系。图数据库能允许对用户之间的关系进行有效的查询，使得各种基于连接查找、统计、分析的社交网络上的业务实现变得可行、高效。</p>
<p>例如，图形数据库可以用来识别网络中的“有影响力用户”，或者根据用户之间的共同点对新的连接（好友关系、关心的内容）进行推荐，再或者寻找社群中相聚集的不同人群、社区，进行用户画像。图形数据库因为在能支撑复杂多跳查询的同时也能支持实时写入、更新，使其非常适合应用在用户关系不断变化的社交网络系统之上。</p>
<h2 id="图建模" class="headerLink">
    <a href="#%e5%9b%be%e5%bb%ba%e6%a8%a1" class="header-mark"></a>1 图建模</h2><p>为了给出一些常见社交场景的应用示例，我会把大多数例子建立在一个典型的小型社交网络上，社交网络天然就是一张网络、图的形态。</p>
<p>为此，我在 NebulaGraph 官方示例数据集：篮球运动员之上，增加了三种点：</p>
<ul>
<li>地址</li>
<li>地点</li>
<li>文章</li>
</ul>
<p>五种边：</p>
<ul>
<li>发文</li>
<li>评论</li>
<li>住在</li>
<li>属于（地点）</li>
</ul>
<p>它的建模非常自然：</p>
<p><a class="lightgallery" href="/nebulagraph-sns/schema_sketch.webp" title="schema_sketch" data-thumbnail="/nebulagraph-sns/schema_sketch.webp">
        
    </a></p>
<h2 id="数据导入" class="headerLink">
    <a href="#%e6%95%b0%e6%8d%ae%e5%af%bc%e5%85%a5" class="header-mark"></a>2 数据导入</h2><h3 id="加载默认数据集" class="headerLink">
    <a href="#%e5%8a%a0%e8%bd%bd%e9%bb%98%e8%ae%a4%e6%95%b0%e6%8d%ae%e9%9b%86" class="header-mark"></a>2.1 加载默认数据集</h3><p>首先，我们加载默认的 basketballplayer 数据集。</p>
<ul>
<li>
<p>在命令行 console 之中，我们只需要执行 <code>:play basketballplayer</code> 就可以。</p>
</li>
<li>
<p>而在 NebulaGraph Studio/Explorer 之中，我们可以在欢迎页点击下载就部署这份基础数据集。</p>
<p><a class="lightgallery" href="/nebulagraph-sns/baskertballplayer_studio_starter.webp" title="baskertballplayer_studio_starter" data-thumbnail="/nebulagraph-sns/baskertballplayer_studio_starter.webp">
        
    </a></p>
</li>
</ul>
<h3 id="加载社交网络-schema" class="headerLink">
    <a href="#%e5%8a%a0%e8%bd%bd%e7%a4%be%e4%ba%a4%e7%bd%91%e7%bb%9c-schema" class="header-mark"></a>2.2 加载社交网络 schema</h3><p>其次我们执行下边的语句，首先是 Schema 定义的语句：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="k">IF</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">EXISTS</span><span class="w"> </span><span class="n">post</span><span class="p">(</span><span class="n">title</span><span class="w"> </span><span class="n">string</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">created_post</span><span class="p">(</span><span class="n">post_time</span><span class="w"> </span><span class="k">timestamp</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">commented_at</span><span class="p">(</span><span class="n">post_time</span><span class="w"> </span><span class="k">timestamp</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="n">address</span><span class="p">(</span><span class="n">address</span><span class="w"> </span><span class="n">string</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w"> </span><span class="o">`</span><span class="n">geo_point</span><span class="o">`</span><span class="w"> </span><span class="n">geography</span><span class="p">(</span><span class="n">point</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="n">place</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="n">string</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w"> </span><span class="o">`</span><span class="n">geo_point</span><span class="o">`</span><span class="w"> </span><span class="n">geography</span><span class="p">(</span><span class="n">point</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">belong_to</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">lived_in</span><span class="p">();</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="加载数据" class="headerLink">
    <a href="#%e5%8a%a0%e8%bd%bd%e6%95%b0%e6%8d%ae" class="header-mark"></a>2.3 加载数据</h3><p>然后，在等两个心跳时间以上之后（20秒），我们可以执行数据插入：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">INSERT</span><span class="w"> </span><span class="n">VERTEX</span><span class="w"> </span><span class="n">post</span><span class="p">(</span><span class="n">title</span><span class="p">)</span><span class="w"> </span><span class="k">values</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;post1&#34;</span><span class="p">:(</span><span class="s2">&#34;a beautify flower&#34;</span><span class="p">),</span><span class="w"> </span><span class="s2">&#34;post2&#34;</span><span class="p">:(</span><span class="s2">&#34;my first bike&#34;</span><span class="p">),</span><span class="w"> </span><span class="s2">&#34;post3&#34;</span><span class="p">:(</span><span class="s2">&#34;I can swim&#34;</span><span class="p">),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;post4&#34;</span><span class="p">:(</span><span class="s2">&#34;I love you, Dad&#34;</span><span class="p">),</span><span class="w"> </span><span class="s2">&#34;post5&#34;</span><span class="p">:(</span><span class="s2">&#34;I hate coriander&#34;</span><span class="p">),</span><span class="w"> </span><span class="s2">&#34;post6&#34;</span><span class="p">:(</span><span class="s2">&#34;my best friend, tom&#34;</span><span class="p">),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;post7&#34;</span><span class="p">:(</span><span class="s2">&#34;my best friend, jerry&#34;</span><span class="p">),</span><span class="w"> </span><span class="s2">&#34;post8&#34;</span><span class="p">:(</span><span class="s2">&#34;Frank, the cat&#34;</span><span class="p">),</span><span class="w"> </span><span class="s2">&#34;post9&#34;</span><span class="p">:(</span><span class="s2">&#34;sushi rocks&#34;</span><span class="p">),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;post10&#34;</span><span class="p">:(</span><span class="s2">&#34;I love you, Mom&#34;</span><span class="p">),</span><span class="w"> </span><span class="s2">&#34;post11&#34;</span><span class="p">:(</span><span class="s2">&#34;Let&#39;s have a party!&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">created_post</span><span class="p">(</span><span class="n">post_time</span><span class="p">)</span><span class="w"> </span><span class="k">values</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player100&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post1&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-01-01 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player111&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post2&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2016-11-23 10:04:50&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player101&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post3&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-11-11 10:44:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player103&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post4&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2014-12-01 20:45:11&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player102&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post5&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2015-03-01 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player104&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post6&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2017-09-21 23:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player125&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post7&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2018-01-01 00:44:23&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player106&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post8&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-01-01 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player117&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post9&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2022-01-01 22:23:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player108&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post10&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2011-01-01 10:00:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player100&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post11&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2021-11-01 11:10:30&#34;</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">commented_at</span><span class="p">(</span><span class="n">post_time</span><span class="p">)</span><span class="w"> </span><span class="k">values</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player105&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post1&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-01-02 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player109&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post1&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2016-11-24 10:04:50&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player113&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post3&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-11-13 10:44:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player101&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post4&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2014-12-04 20:45:11&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player102&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post1&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2015-03-03 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player103&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post1&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2017-09-23 23:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player102&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post7&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2018-01-04 00:44:23&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player101&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post8&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-01-04 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player106&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post9&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2022-01-02 22:23:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player105&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post10&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2011-01-11 10:00:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player130&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post1&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-01-02 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player131&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post2&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2016-11-24 10:04:50&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player131&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post3&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-11-13 10:44:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player133&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post4&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2014-12-04 20:45:11&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player132&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post5&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2015-03-03 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player134&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post6&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2017-09-23 23:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player135&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post7&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2018-01-04 00:44:23&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player136&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post8&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-01-04 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player137&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post9&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2022-01-02 22:23:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player138&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post10&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2011-01-11 10:00:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player141&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post1&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-01-03 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player142&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post2&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2016-11-25 10:04:50&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player143&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post3&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-11-14 10:44:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player144&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post4&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2014-12-05 20:45:11&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player145&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post5&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2015-03-04 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player146&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post6&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2017-09-24 23:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player147&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post7&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2018-01-05 00:44:23&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player148&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post8&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-01-05 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player139&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post9&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2022-01-03 22:23:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player140&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post10&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2011-01-12 10:01:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player141&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post1&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-01-04 00:34:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player102&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post2&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2016-11-26 10:06:50&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player103&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post3&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-11-15 10:45:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player104&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post4&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2014-12-06 20:47:11&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player105&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post5&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2015-03-05 00:32:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player106&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post6&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2017-09-25 23:31:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player107&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post7&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2018-01-06 00:46:23&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player118&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post8&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-01-06 00:35:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player119&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post9&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2022-01-04 22:26:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player110&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post10&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2011-01-15 10:00:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player111&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post1&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-01-06 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player104&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post11&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2022-01-15 10:00:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player125&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post11&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2022-02-15 10:00:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player113&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post11&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2022-03-15 10:00:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player102&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post11&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2022-04-15 10:00:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player108&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post11&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2022-05-15 10:00:30&#34;</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="n">VERTEX</span><span class="w"> </span><span class="o">`</span><span class="n">address</span><span class="o">`</span><span class="w"> </span><span class="p">(</span><span class="o">`</span><span class="n">address</span><span class="o">`</span><span class="p">,</span><span class="w"> </span><span class="o">`</span><span class="n">geo_point</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="k">VALUES</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_0&#34;</span><span class="p">:(</span><span class="s2">&#34;Brittany Forge Apt. 718 East Eric  WV 97881&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_1&#34;</span><span class="p">:(</span><span class="s2">&#34;Richard Curve Kingstad  AZ 05660&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_2&#34;</span><span class="p">:(</span><span class="s2">&#34;Schmidt Key Lake Charles  AL 36174&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">13</span><span class="p">.</span><span class="mi">13</span><span class="p">,</span><span class="o">-</span><span class="mi">87</span><span class="p">.</span><span class="mi">65</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_3&#34;</span><span class="p">:(</span><span class="s2">&#34;5 Joanna Key Suite 704 Frankshire  OK 03035&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_4&#34;</span><span class="p">:(</span><span class="s2">&#34;1 Payne Circle Mitchellfort  LA 73053&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_5&#34;</span><span class="p">:(</span><span class="s2">&#34;2 Klein Mission New Annetteton  HI 05775&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_6&#34;</span><span class="p">:(</span><span class="s2">&#34;1 Vanessa Stravenue Suite 184 Baileyville  NY 46381&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">11</span><span class="p">,</span><span class="mi">12</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_7&#34;</span><span class="p">:(</span><span class="s2">&#34;John Garden Port John  LA 54602&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">13</span><span class="p">,</span><span class="mi">14</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_8&#34;</span><span class="p">:(</span><span class="s2">&#34;11 Webb Groves Tiffanyside  MN 14566&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="mi">16</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_9&#34;</span><span class="p">:(</span><span class="s2">&#34;70 Robinson Locks Suite 113 East Veronica  ND 87845&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">17</span><span class="p">,</span><span class="mi">18</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_10&#34;</span><span class="p">:(</span><span class="s2">&#34;24 Mcknight Port Apt. 028 Sarahborough  MD 38195&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">19</span><span class="p">,</span><span class="mi">20</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_11&#34;</span><span class="p">:(</span><span class="s2">&#34;0337 Mason Corner Apt. 900 Toddmouth  FL 61464&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">21</span><span class="p">,</span><span class="mi">22</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_12&#34;</span><span class="p">:(</span><span class="s2">&#34;7 Davis Station Apt. 691 Pittmanfort  HI 29746&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">23</span><span class="p">,</span><span class="mi">24</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_13&#34;</span><span class="p">:(</span><span class="s2">&#34;1 Southport Street Apt. 098 Westport  KY 85907&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">120</span><span class="p">.</span><span class="mi">12</span><span class="p">,</span><span class="mi">30</span><span class="p">.</span><span class="mi">16</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_14&#34;</span><span class="p">:(</span><span class="s2">&#34;Weber Unions Eddieland  MT 64619&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">25</span><span class="p">,</span><span class="mi">26</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_15&#34;</span><span class="p">:(</span><span class="s2">&#34;1 Amanda Freeway Lisaland  NJ 94933&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">27</span><span class="p">,</span><span class="mi">28</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_16&#34;</span><span class="p">:(</span><span class="s2">&#34;2 Klein HI 05775&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_17&#34;</span><span class="p">:(</span><span class="s2">&#34;Schmidt Key Lake Charles AL 13617&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">13</span><span class="p">.</span><span class="mi">12</span><span class="p">,</span><span class="w"> </span><span class="o">-</span><span class="mi">87</span><span class="p">.</span><span class="mi">60</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_18&#34;</span><span class="p">:(</span><span class="s2">&#34;Rodriguez Track East Connorfort  NC 63144&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">29</span><span class="p">,</span><span class="mi">30</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="n">VERTEX</span><span class="w"> </span><span class="o">`</span><span class="n">place</span><span class="o">`</span><span class="w"> </span><span class="p">(</span><span class="o">`</span><span class="n">name</span><span class="o">`</span><span class="p">,</span><span class="w"> </span><span class="o">`</span><span class="n">geo_point</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="k">VALUES</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;WV&#34;</span><span class="p">:(</span><span class="s2">&#34;West Virginia&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">.</span><span class="mi">5</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;AZ&#34;</span><span class="p">:(</span><span class="s2">&#34;Arizona&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">.</span><span class="mi">5</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;AL&#34;</span><span class="p">:(</span><span class="s2">&#34;Alabama&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">13</span><span class="p">.</span><span class="mi">13</span><span class="p">,</span><span class="o">-</span><span class="mi">87</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;OK&#34;</span><span class="p">:(</span><span class="s2">&#34;Oklahoma&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">.</span><span class="mi">1</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;LA&#34;</span><span class="p">:(</span><span class="s2">&#34;Louisiana&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">.</span><span class="mi">1</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;HI&#34;</span><span class="p">:(</span><span class="s2">&#34;Hawaii&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="p">.</span><span class="mi">1</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;NY&#34;</span><span class="p">:(</span><span class="s2">&#34;New York&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">11</span><span class="p">,</span><span class="mi">12</span><span class="p">.</span><span class="mi">1</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;MN&#34;</span><span class="p">:(</span><span class="s2">&#34;Minnesota&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="mi">16</span><span class="p">.</span><span class="mi">1</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;ND&#34;</span><span class="p">:(</span><span class="s2">&#34;North Dakota&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">17</span><span class="p">,</span><span class="mi">18</span><span class="p">.</span><span class="mi">1</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;FL&#34;</span><span class="p">:(</span><span class="s2">&#34;Florida&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">21</span><span class="p">,</span><span class="mi">22</span><span class="p">.</span><span class="mi">1</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;KY&#34;</span><span class="p">:(</span><span class="s2">&#34;Kentucky&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">120</span><span class="p">.</span><span class="mi">12</span><span class="p">,</span><span class="mi">30</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;MT&#34;</span><span class="p">:(</span><span class="s2">&#34;Montana&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">25</span><span class="p">,</span><span class="mi">26</span><span class="p">.</span><span class="mi">1</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;NJ&#34;</span><span class="p">:(</span><span class="s2">&#34;New Jersey&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">27</span><span class="p">,</span><span class="mi">28</span><span class="p">.</span><span class="mi">1</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;NC&#34;</span><span class="p">:(</span><span class="s2">&#34;North Carolina&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">29</span><span class="p">,</span><span class="mi">30</span><span class="p">.</span><span class="mi">1</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="o">`</span><span class="n">belong_to</span><span class="o">`</span><span class="p">()</span><span class="w"> </span><span class="k">VALUES</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_0&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;WV&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_1&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;AZ&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_2&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;AL&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_3&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;OK&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_4&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;LA&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_5&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;HI&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_6&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;NY&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_7&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;LA&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_8&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;MN&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_9&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;ND&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_10&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;MD&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_11&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;FL&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_12&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;HI&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_13&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;KY&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_14&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;MT&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_15&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;NJ&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_16&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;HI&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_17&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;AL&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_18&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;NC&#34;</span><span class="p">:();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="o">`</span><span class="n">lived_in</span><span class="o">`</span><span class="p">()</span><span class="w"> </span><span class="k">VALUES</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player100&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_4&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player101&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_7&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player102&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_2&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player103&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_3&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player104&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_0&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player105&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_5&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player106&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_6&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player107&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_1&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player108&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_8&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player109&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_9&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player110&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_10&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player111&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_11&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player112&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_12&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player113&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_13&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player114&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_14&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player115&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_15&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player116&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_16&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player117&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_17&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player118&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_18&#34;</span><span class="p">:();</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="数据初探" class="headerLink">
    <a href="#%e6%95%b0%e6%8d%ae%e5%88%9d%e6%8e%a2" class="header-mark"></a>2.4 数据初探</h3><p>首先，我们看看数据统计</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="p">[</span><span class="n">basketballplayer</span><span class="p">]</span><span class="o">&gt;</span><span class="w"> </span><span class="n">SUBMIT</span><span class="w"> </span><span class="n">JOB</span><span class="w"> </span><span class="n">STATS</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">------------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="k">New</span><span class="w"> </span><span class="n">Job</span><span class="w"> </span><span class="n">Id</span><span class="w"> </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">------------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="mi">10</span><span class="w">         </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">------------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">[</span><span class="n">basketballplayer</span><span class="p">]</span><span class="o">&gt;</span><span class="w"> </span><span class="k">SHOW</span><span class="w"> </span><span class="n">STATS</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">---------+----------------+-------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="k">Type</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="n">Name</span><span class="w">           </span><span class="o">|</span><span class="w"> </span><span class="k">Count</span><span class="w"> </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">---------+----------------+-------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Tag&#34;</span><span class="w">   </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;address&#34;</span><span class="w">      </span><span class="o">|</span><span class="w"> </span><span class="mi">19</span><span class="w">    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Tag&#34;</span><span class="w">   </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;place&#34;</span><span class="w">        </span><span class="o">|</span><span class="w"> </span><span class="mi">14</span><span class="w">    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Tag&#34;</span><span class="w">   </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;player&#34;</span><span class="w">       </span><span class="o">|</span><span class="w"> </span><span class="mi">51</span><span class="w">    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Tag&#34;</span><span class="w">   </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;post&#34;</span><span class="w">         </span><span class="o">|</span><span class="w"> </span><span class="mi">10</span><span class="w">    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Tag&#34;</span><span class="w">   </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;team&#34;</span><span class="w">         </span><span class="o">|</span><span class="w"> </span><span class="mi">30</span><span class="w">    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Edge&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;belong_to&#34;</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="mi">19</span><span class="w">    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Edge&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;commented_at&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="mi">40</span><span class="w">    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Edge&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;created_post&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="mi">10</span><span class="w">    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Edge&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;follow&#34;</span><span class="w">       </span><span class="o">|</span><span class="w"> </span><span class="mi">81</span><span class="w">    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Edge&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;lived_in&#34;</span><span class="w">     </span><span class="o">|</span><span class="w"> </span><span class="mi">19</span><span class="w">    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Edge&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;serve&#34;</span><span class="w">        </span><span class="o">|</span><span class="w"> </span><span class="mi">152</span><span class="w">   </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Space&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;vertices&#34;</span><span class="w">     </span><span class="o">|</span><span class="w"> </span><span class="mi">124</span><span class="w">   </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Space&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;edges&#34;</span><span class="w">        </span><span class="o">|</span><span class="w"> </span><span class="mi">321</span><span class="w">   </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">---------+----------------+-------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Got</span><span class="w"> </span><span class="mi">13</span><span class="w"> </span><span class="k">rows</span><span class="w"> </span><span class="p">(</span><span class="n">time</span><span class="w"> </span><span class="n">spent</span><span class="w"> </span><span class="mi">1038</span><span class="o">/</span><span class="mi">51372</span><span class="w"> </span><span class="n">us</span><span class="p">)</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>查一下所有的数据</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">()</span><span class="o">-</span><span class="p">[</span><span class="n">e</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">()</span><span class="w"> </span><span class="k">RETURN</span><span class="w"> </span><span class="n">e</span><span class="w"> </span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">10000</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>因为数据量太小了，所以可以把所有数据在 NebulaGraph Explorer 中渲染出来：</p>
<p><a class="lightgallery" href="/nebulagraph-sns/match_all.webp" title="match_all" data-thumbnail="/nebulagraph-sns/match_all.webp">
        
    </a></p>
<h2 id="找出网络中的关键人物" class="headerLink">
    <a href="#%e6%89%be%e5%87%ba%e7%bd%91%e7%bb%9c%e4%b8%ad%e7%9a%84%e5%85%b3%e9%94%ae%e4%ba%ba%e7%89%a9" class="header-mark"></a>3 找出网络中的关键人物</h2><p>识别社交网络中的有影响的关键人物们（influencers）涉及使用各种指标和方法来识别在特定网络中拥有大量影响力的个人。这对很多业务场景都有帮助都很有用，比如用于营销或研究网络中的信息传播。</p>
<p>识别他们的方法有很多，具体的方法和考量的信息、关系、角度也取决于这些关键人物的类型、和获取他们的目的。</p>
<p>一些常见的方法包括看一个人拥有的粉丝或内容被消费的数量，他们在其帖子、视频上读者的参与度，以及他们的内容的影响力（转发、引用）。这些方法在图上也是可以做的，但是比较平凡，我就不举例了，在这里，我们可以试着用评估、计算节点重要性的图算法，在图上得出这些关键人物。</p>
<h3 id="pagerank" class="headerLink">
    <a href="#pagerank" class="header-mark"></a>3.1 PageRank</h3><p>PageRank 是一个非常“古老的”图算法，它通过考虑图上点之间的关系数量去迭代，得到每一个点的得分（Rank），最初由 Google 的创始人 Larry Page 和 Sergey Brin 提出并应用在早期的 Google 搜索引擎中，用来排序搜索结果，这里的 Page 可以是 Larry Page 的姓和 Web Page 的双关了。</p>
<p>在现代、复杂的搜索引擎中，PageRank 早就因为其过于简单而被弃用，但是在其他图结构网络场景中，PageRank 仍然在发光发热，社交网络中我们可以粗略地认为所有链接的重要程度类似，去运行这个算法找出那些关键的用户。</p>
<p>在 NebulaGraph 中，我们可以利用 NebulaGraph Algorithm、NebulaGraph Analytics 去在大的全图上运行 PageRank，而在日常的分析、验证、设计阶段，我们不需要在全量数据上跑结果，而在很小的子图上（最多上万），我们可以轻松地在浏览器里边运行各种图算法去得出线上业务可以用的方法。</p>
<p>今天，我们就用 NebulaGraph Explorer 内置的浏览器内图算法功能执行一下 PageRank 看看（具体方法这里略去，可以参考<a href="https://docs.nebula-graph.com.cn/3.3.0/nebula-explorer/graph-explorer/graph-algorithm/" target="_blank" rel="noopener noreferrer">文档</a>，不过其实就是点一下鼠标的事儿）：</p>
<p><a class="lightgallery" href="/nebulagraph-sns/PageRank.webp" title="PageRank" data-thumbnail="/nebulagraph-sns/PageRank.webp">
        
    </a></p>
<p>我们可以从上边看到，PageRank 计算之后所有绿色的 player（人）中，&ldquo;player.name: Tim Duncan&rdquo; 是最大的一个点，与之相关联的关系看起来的确不少，我们在图上选择他，再右键反选，选择除了 Tim Duncan 之外的所有点，用退格键删除所有其他的点，然后在他作为起点双向探索出1到5步，可以得到 Tim Duncan 的子图：</p>
<p><a class="lightgallery" href="/nebulagraph-sns/TimDuncan.webp" title="TimDuncan" data-thumbnail="/nebulagraph-sns/TimDuncan.webp">
        
    </a></p>
<p>从子图中可以看到 Tim Duncan 和非常多其他球员有关注的关系的同时，一些其他很受欢迎的队员和他一起一样服役过非常热门的热刺（Spurs）队，这些都印证了 PageRank 的评估方式。</p>
<p>现在我们再看看其他判定维度下的算法会不会得出一样的结论呢？</p>
<h3 id="betweenness-centrality" class="headerLink">
    <a href="#betweenness-centrality" class="header-mark"></a>3.2 Betweenness Centrality</h3><p>作为另一个流行的节点重要性算法，通过计算一个节点对于图中的中介、桥梁作用来衡量节点的重要性，这里的桥梁作用是有数学定义的量化算法，这里就不展开说了，不过从感官上可以看出它是另一个角度很符合直觉地去评估重要性的方法。</p>
<p>我们重新在画布上查询所有的点边之后，在浏览器里运行 Betweenness Centrality 算法，这次的结果是：</p>
<p><a class="lightgallery" href="/nebulagraph-sns/Betweeness_centrality.webp" title="Betweeness_centrality" data-thumbnail="/nebulagraph-sns/Betweeness_centrality.webp">
        
    </a></p>
<p>从它的五跳内子图可以看出，与之前 PageRank 所得的关键人物 Tim Duncan 呈现的星星状态不同，Dejounte Murray 的子图呈现簇状，在感官、直觉上可以想象 Dejounte Murray 真的在很多节点之间的最小路径的必经之路上，而 Tim Duncan 则似乎和更多的重要连接者产生了关联。</p>
<p><a class="lightgallery" href="/nebulagraph-sns/DejounteMurray.webp" title="DejounteMurray" data-thumbnail="/nebulagraph-sns/DejounteMurray.webp">
        
    </a></p>
<p>在实际的应用场景中，我们通常要通过不同方式的定义的理解、不同执行结果的试验、分析去找到我们关注的关键人物产生影响的结构特征，用来针对不同需求选择不同的算法。</p>
<h2 id="找出社区聚集群体" class="headerLink">
    <a href="#%e6%89%be%e5%87%ba%e7%a4%be%e5%8c%ba%e8%81%9a%e9%9b%86%e7%be%a4%e4%bd%93" class="header-mark"></a>4 找出社区、聚集群体</h2><p>社交网络中的社区检测是一种通过分析社交关系来发现社区结构的技术。社区结构是指在社交网络、图谱中相互联系密切的一组节点，这些节点通常具有相似的特征或兴趣。例如，社区结构可能表现为用户根据共同的话题或兴趣聚集在一起的一组用户。</p>
<p>社区检测的目的是通过对社交网络进行分析，找出不同社区的边界，并确定每个社区中的节点。这一过程可以通过使用各种算法来完成，例如标签传播算法、弱联通分量算法和 Louvain 算法等。通过发现社区结构，可以更好地了解社交网络的结构和特征，并有助于社交网络服务提供方更好地推断和预测社交网络中的行为，帮助做好社交网络的治理、广告投放、市场营销等。</p>
<p>由于我们的数据集是非真实的，我在不同的算法之下得出的结果并不能展现出真实的意涵，所以本章只是展示一下利用几个图算法进行社区识别之后的结果，在真实世界的案例中，我们还应该在此基础之上利用领域知识或者其他技术手段协同给出不同群体、社区的画像、标签。</p>
<p>标签传播算法效果：</p>
<p><a class="lightgallery" href="/nebulagraph-sns/LPA.webp" title="LPA" data-thumbnail="/nebulagraph-sns/LPA.webp">
        
    </a></p>
<p>Louvain 算法效果：</p>
<p><a class="lightgallery" href="/nebulagraph-sns/Louvain.webp" title="Louvain" data-thumbnail="/nebulagraph-sns/Louvain.webp">
        
    </a></p>
<p>弱联通分量算法效果：</p>
<p><a class="lightgallery" href="/nebulagraph-sns/WCC.webp" title="WCC" data-thumbnail="/nebulagraph-sns/WCC.webp">
        
    </a></p>
<p>在后边的章节，我们有机会可以在更小、更简单的子图上再次验证这几个算法，结果会更有可解释性一些。</p>
<h2 id="好友亲密度" class="headerLink">
    <a href="#%e5%a5%bd%e5%8f%8b%e4%ba%b2%e5%af%86%e5%ba%a6" class="header-mark"></a>5 好友亲密度</h2><p>通过社区识别算法，其实是能够在一定程度上，在全局计算获得兴趣相近、关联紧密的好友的。那么如何获得一个给定用户的其他亲密好友呢？我们可以通过计算这个用户的好友中，和他共同好友的个数来排序获得这一信息！</p>
<p>我们拿 &ldquo;Tim Duncan&rdquo; 举例，我们知道，他的两度好友（好友的好友：<code>(:player{name: &quot;Tim Duncan&quot;})-[:follow]-(f:player)-[:follow]-(fof:player)</code>）如果同时也是他的好友的话，那么他们这个中间的好友就是他和这个朋友的共同好友（Mutual Friend），那么有理由相信那些和 Tim Duncan 有更多共同好友的人可能跟他有更高亲密度：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">start</span><span class="p">:</span><span class="o">`</span><span class="n">player</span><span class="o">`</span><span class="err">{</span><span class="n">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Tim Duncan&#34;</span><span class="err">}</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">f</span><span class="p">:</span><span class="o">`</span><span class="n">player</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">fof</span><span class="p">:</span><span class="o">`</span><span class="n">player</span><span class="o">`</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="n">start</span><span class="p">:</span><span class="o">`</span><span class="n">player</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">fof</span><span class="p">:</span><span class="o">`</span><span class="n">player</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">fof</span><span class="p">.</span><span class="o">`</span><span class="n">player</span><span class="o">`</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="nf">count</span><span class="p">(</span><span class="k">DISTINCT</span><span class="w"> </span><span class="n">f</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">NrOfMutualF</span><span class="w"> </span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">NrOfMutualF</span><span class="w"> </span><span class="k">DESC</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这个计算结果是，&ldquo;Tony Parker&rdquo; 和 Tim 有 5 个共同好友，最为亲密。</p>
<table>
<thead>
<tr>
<th style="text-align:left">fof.player.name</th>
<th style="text-align:left">NrOfMutualF</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Tony Parker</td>
<td style="text-align:left">5</td>
</tr>
<tr>
<td style="text-align:left">Dejounte Murray</td>
<td style="text-align:left">4</td>
</tr>
<tr>
<td style="text-align:left">Manu Ginobili</td>
<td style="text-align:left">3</td>
</tr>
<tr>
<td style="text-align:left">Marco Belinelli</td>
<td style="text-align:left">3</td>
</tr>
<tr>
<td style="text-align:left">Danny Green</td>
<td style="text-align:left">2</td>
</tr>
<tr>
<td style="text-align:left">Boris Diaw</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">LaMarcus Aldridge</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">Tiago Splitter</td>
<td style="text-align:left">1</td>
</tr>
</tbody>
</table>
<p>下面，咱们通过可视化来验证一下这个结果吧！</p>
<p>先看看每一个好友的共同好友(f:)都是谁？</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">start</span><span class="p">:</span><span class="n">player</span><span class="err">{</span><span class="n">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Tim Duncan&#34;</span><span class="err">}</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">f</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">fof</span><span class="p">:</span><span class="n">player</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="n">start</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">fof</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">fof</span><span class="p">.</span><span class="n">player</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="nf">collect</span><span class="p">(</span><span class="k">DISTINCT</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">player</span><span class="p">.</span><span class="n">name</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>结果如下：</p>
<table>
<thead>
<tr>
<th style="text-align:left">fof.player.name</th>
<th style="text-align:left">collect(distinct f.player.name)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Boris Diaw</td>
<td style="text-align:left">[&ldquo;Tony Parker&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Manu Ginobili</td>
<td style="text-align:left">[&ldquo;Dejounte Murray&rdquo;, &ldquo;Tiago Splitter&rdquo;, &ldquo;Tony Parker&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">LaMarcus Aldridge</td>
<td style="text-align:left">[&ldquo;Tony Parker&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Tiago Splitter</td>
<td style="text-align:left">[&ldquo;Manu Ginobili&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Tony Parker</td>
<td style="text-align:left">[&ldquo;Dejounte Murray&rdquo;, &ldquo;Boris Diaw&rdquo;, &ldquo;Manu Ginobili&rdquo;, &ldquo;Marco Belinelli&rdquo;, &ldquo;LaMarcus Aldridge&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Dejounte Murray</td>
<td style="text-align:left">[&ldquo;Danny Green&rdquo;, &ldquo;Tony Parker&rdquo;, &ldquo;Manu Ginobili&rdquo;, &ldquo;Marco Belinelli&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Danny Green</td>
<td style="text-align:left">[&ldquo;Dejounte Murray&rdquo;, &ldquo;Marco Belinelli&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Marco Belinelli</td>
<td style="text-align:left">[&ldquo;Dejounte Murray&rdquo;, &ldquo;Danny Green&rdquo;, &ldquo;Tony Parker&rdquo;]</td>
</tr>
</tbody>
</table>
<p>然后我们在 Explorer 上可视化一下这个结果：</p>
<ul>
<li>首先，我们把 Tim 的量度好友路径全查出来</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">start</span><span class="p">:</span><span class="n">player</span><span class="err">{</span><span class="n">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Tim Duncan&#34;</span><span class="err">}</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">f</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">follow</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">fof</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>然后我们在其中按照度去渲染节点大小，并选中 Tim 和 Tony，并在两者之间查询 follow 类型边、双向、最多 2 跳的全部路径：</li>
</ul>
<p>可以看出他们之间是最亲密的朋友没跑了，而且他们的共同好友也在路径之中：</p>
<p><code>[&quot;Dejounte Murray&quot;, &quot;Boris Diaw&quot;, &quot;Manu Ginobili&quot;, &quot;Marco Belinelli&quot;, &quot;LaMarcus Aldridge&quot;]</code></p>
<p><a class="lightgallery" href="/nebulagraph-sns/closest_friend.webp" title="closest_friend" data-thumbnail="/nebulagraph-sns/closest_friend.webp">
        
    </a></p>
<h3 id="朋友圈子里的小群体" class="headerLink">
    <a href="#%e6%9c%8b%e5%8f%8b%e5%9c%88%e5%ad%90%e9%87%8c%e7%9a%84%e5%b0%8f%e7%be%a4%e4%bd%93" class="header-mark"></a>5.1 朋友圈子里的小群体</h3><p>这时候，如前边提到，这份数据集本身的非真实性，使得社区发现算法的结果不能得到其中洞察的内涵，现在我们可以接着这个小的子图，看看 Tim 的好友中可以如何区分群组、社区呢，咱们跑一个 Louvain 、弱联通分量、标签传播看看：</p>
<ul>
<li>弱联通分量，可以把 Tim 等朋友们大体分割出两三个相互不连通的部分，非常符合连通分量的直观理解和定义。</li>
</ul>
<p><a class="lightgallery" href="/nebulagraph-sns/Tim_wcc.webp" title="Tim_wcc" data-thumbnail="/nebulagraph-sns/Tim_wcc.webp">
        
    </a></p>
<ul>
<li>
<p>标签传播，我们可以通过控制迭代次数按需去通过随机的传播划定出不同的划分度，结果可以有一定的区分度：</p>
<p>20 次迭代</p>
<p><a class="lightgallery" href="/nebulagraph-sns/Tim_LPA.webp" title="Tim_LPA" data-thumbnail="/nebulagraph-sns/Tim_LPA.webp">
        
    </a></p>
<p>1000 次迭代</p>
<p><a class="lightgallery" href="/nebulagraph-sns/Tim_LPA_1000.webp" title="Tim_LPA_1000" data-thumbnail="/nebulagraph-sns/Tim_LPA_1000.webp">
        
    </a></p>
</li>
<li>
<p>Louvain，是一个比较高效、稳定的算法，基本上在这个子图下我们可以在很小的迭代次数下得到很符合直觉的划分：</p>
</li>
</ul>
<p><a class="lightgallery" href="/nebulagraph-sns/Tim_Louvain.webp" title="Tim_Louvain" data-thumbnail="/nebulagraph-sns/Tim_Louvain.webp">
        
    </a></p>
<h2 id="新朋友推荐" class="headerLink">
    <a href="#%e6%96%b0%e6%9c%8b%e5%8f%8b%e6%8e%a8%e8%8d%90" class="header-mark"></a>6 新朋友推荐</h2><p>接着前边二度朋友（朋友的朋友）的思路，我们可以很容易把那些还不是朋友的二度朋友作为推荐添加的好友，而排序规则则是他们之间的共同好友数量：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">start</span><span class="p">:</span><span class="n">player</span><span class="err">{</span><span class="n">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Tim Duncan&#34;</span><span class="err">}</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">f</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">fof</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="p">(</span><span class="n">start</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">fof</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">fof</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">start</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">fof</span><span class="p">.</span><span class="n">player</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="nf">count</span><span class="p">(</span><span class="k">DISTINCT</span><span class="w"> </span><span class="n">f</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">NrOfMutualF</span><span class="w"> </span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">NrOfMutualF</span><span class="w"> </span><span class="k">DESC</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><table>
<thead>
<tr>
<th style="text-align:left">fof.player.name</th>
<th style="text-align:left">NrOfMutualF</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">LeBron James</td>
<td style="text-align:left">2</td>
</tr>
<tr>
<td style="text-align:left">James Harden</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">Chris Paul</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">Yao Ming</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">Damian Lillard</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">JaVale McGee</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">Kevin Durant</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">Kyle Anderson</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">Rudy Gay</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">Russell Westbrook</td>
<td style="text-align:left">1</td>
</tr>
</tbody>
</table>
<p>显然，LeBron 最值得推荐！再看看这些共同好友都是谁？</p>
<table>
<thead>
<tr>
<th style="text-align:left">fof.player.name</th>
<th style="text-align:left">collect(distinct f.player.name)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">James Harden</td>
<td style="text-align:left">[&ldquo;Dejounte Murray&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">LeBron James</td>
<td style="text-align:left">[&ldquo;Danny Green&rdquo;, &ldquo;Dejounte Murray&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Chris Paul</td>
<td style="text-align:left">[&ldquo;Dejounte Murray&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Yao Ming</td>
<td style="text-align:left">[&ldquo;Shaquille O&rsquo;Neal&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Damian Lillard</td>
<td style="text-align:left">[&ldquo;LaMarcus Aldridge&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">JaVale McGee</td>
<td style="text-align:left">[&ldquo;Shaquille O&rsquo;Neal&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Kevin Durant</td>
<td style="text-align:left">[&ldquo;Dejounte Murray&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Kyle Anderson</td>
<td style="text-align:left">[&ldquo;Dejounte Murray&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Rudy Gay</td>
<td style="text-align:left">[&ldquo;LaMarcus Aldridge&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Russell Westbrook</td>
<td style="text-align:left">[&ldquo;Dejounte Murray&rdquo;]</td>
</tr>
</tbody>
</table>
<p>同样，我们在刚才的子图里找找 LeBron James 吧！我们把它俩之间的两步、双向路径找出来，果然只会经过 <code>[&quot;Danny Green&quot;, &quot;Dejounte Murray&quot;]</code> 并且，没有直接的连接：</p>
<p><a class="lightgallery" href="/nebulagraph-sns/Tim_newFriend.webp" title="Tim_newFriend" data-thumbnail="/nebulagraph-sns/Tim_newFriend.webp">
        
    </a></p>
<p>现在，系统会给两边发提醒：“hey，也许你们应该交个朋友！”</p>
<h2 id="共同邻居" class="headerLink">
    <a href="#%e5%85%b1%e5%90%8c%e9%82%bb%e5%b1%85" class="header-mark"></a>7 共同邻居</h2><p>查找共同邻居是一个很常见的图库查询，它的场景可能根据不同的邻居关系，节点类型，同构、异构，带来不同的场景，前边两个场景下的共同好友本质上是两点之间的共同邻居，直接查询这样的关系用 OpenCypher 的表达非常简单。</p>
<h3 id="两点之间的共同邻居" class="headerLink">
    <a href="#%e4%b8%a4%e7%82%b9%e4%b9%8b%e9%97%b4%e7%9a%84%e5%85%b1%e5%90%8c%e9%82%bb%e5%b1%85" class="header-mark"></a>7.1 两点之间的共同邻居</h3><p>比如这个表达可以查询两个用户之间的共性、交集，结果可能是共同团队、去过的地方、兴趣爱好、共同参与的帖子回复等等：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="o">`</span><span class="n">v0</span><span class="o">`</span><span class="p">)</span><span class="o">--</span><span class="p">()</span><span class="o">--</span><span class="p">(</span><span class="o">`</span><span class="n">v1</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="o">`</span><span class="n">v0</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;player100&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="o">`</span><span class="n">v1</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;player104&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>而限定了边的类型之后，这个查询就限定在共同好友的查询了。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">v0</span><span class="p">)</span><span class="o">--</span><span class="p">(:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">)</span><span class="o">--</span><span class="p">(</span><span class="n">v1</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">v0</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;player100&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">v1</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;player104&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="多点之间的共同邻居内容推送" class="headerLink">
    <a href="#%e5%a4%9a%e7%82%b9%e4%b9%8b%e9%97%b4%e7%9a%84%e5%85%b1%e5%90%8c%e9%82%bb%e5%b1%85%e5%86%85%e5%ae%b9%e6%8e%a8%e9%80%81" class="header-mark"></a>7.2 多点之间的共同邻居：内容推送</h3><p>下面，我们给出一个多点共同邻居的场景，我们从一个文章触发，查出所有在这个文章上有互动的用户，找到这一群体中的共同邻居。</p>
<p>这个共同邻居有什么用处呢？很自然，如果这个共同邻居还没有和这个文章有任何交互，我们可以把这个文章推荐给他。</p>
<p>这个查询的实现很有意思：</p>
<ul>
<li>第一个 MATCH 是查到所有 post11 文章下留言和作者这些人的总人数</li>
<li>在第二个 MATCH 之后，我们查到所有这群人的一度好友路径中，这些文章过的交互用户的一度好友的参与过文章的朋友数量刚好等于这个参与文章的用户的数量的这些人，他们其实就是这些所有参与用户的共同好友。</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">blog</span><span class="p">:</span><span class="n">post</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[</span><span class="n">e</span><span class="p">]</span><span class="o">-</span><span class="p">(:</span><span class="n">player</span><span class="p">)</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">blog</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;post11&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">blog</span><span class="p">,</span><span class="w"> </span><span class="nf">count</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">invoved_user_count</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">blog</span><span class="p">:</span><span class="n">post</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[]</span><span class="o">-</span><span class="p">(</span><span class="n">users</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">common_neighbor</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="nf">toSet</span><span class="p">(</span><span class="nf">collect</span><span class="p">(</span><span class="n">users</span><span class="p">))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">users</span><span class="p">,</span><span class="w"> </span><span class="n">common_neighbor</span><span class="p">,</span><span class="w"> </span><span class="n">invoved_user_count</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">size</span><span class="p">(</span><span class="n">users</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">invoved_user_count</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">common_neighbor</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>而这个人就是&hellip;Tony！</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">+-----------------------------------------------------+
</span></span><span class="line"><span class="cl">| common_neighbor                                     |
</span></span><span class="line"><span class="cl">+-----------------------------------------------------+
</span></span><span class="line"><span class="cl">| (&#34;player101&#34; :player{age: 36, name: &#34;Tony Parker&#34;}) |
</span></span><span class="line"><span class="cl">+-----------------------------------------------------+
</span></span></code></pre></td></tr></table>
</div>
</div><p>而我们可以很容易在可视化中国验证它：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">blog</span><span class="p">:</span><span class="n">post</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[]</span><span class="o">-</span><span class="p">(</span><span class="n">users</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">common_neighbor</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">blog</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;post11&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>渲染这个查询结果，然后再这篇叫做 &ldquo;Let&rsquo;s have a party!&rdquo; 的文章与 Tony 之间查找评论、po文、关注三类边的双向、两跳查询，就可以看到这些参与文章的人们无一例外，都是 Tony 的好友，而只有 Tony 自己还没去文章里留言！</p>
<p>而 Party 怎么可以少了 Tony 呢？难道是他的惊喜生日 Party，Opps，我们是不是不应该告诉他？</p>
<p><a class="lightgallery" href="/nebulagraph-sns/common_nbrs_tony.webp" title="common_nbrs_tony" data-thumbnail="/nebulagraph-sns/common_nbrs_tony.webp">
        
    </a></p>
<h2 id="信息流" class="headerLink">
    <a href="#%e4%bf%a1%e6%81%af%e6%b5%81" class="header-mark"></a>8 信息流</h2><p>我在之前写过基于图技术的推荐系统实现方法，其中描述了现代推荐系统中内容过滤、排序方法可以在图谱上进行，社交网络中有一点相似但又不同的场景是信息流（Feed），它的产生类似于推荐系统中的个性化，同时有具有很高的时效性，借助于包含了内容行为知识的社交图谱可以很直观、高效去实现个性化的信息流生成。</p>
<h3 id="好友参与的内容" class="headerLink">
    <a href="#%e5%a5%bd%e5%8f%8b%e5%8f%82%e4%b8%8e%e7%9a%84%e5%86%85%e5%ae%b9" class="header-mark"></a>8.1 好友参与的内容</h3><p>最简单、直接的信息流定义可能就是在朋友圈、微博 feed 上刷一下关注的人创建、参与的内容列表了，先不考虑排序的问题，这些内容一定是：</p>
<ul>
<li>一定时间段内好友创建的内容</li>
<li>一定时间端内好友评论的内容</li>
</ul>
<p>我们可以用 cypher 表达这个查询用户 id 为 player100 的信息流：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">feed_owner</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">friend</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">feed_owner</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;player100&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">friend</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">newly_commented</span><span class="p">:</span><span class="n">commented_at</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(:</span><span class="n">post</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">created_post</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">feed_owner</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="n">newly_commented</span><span class="p">.</span><span class="n">post_time</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="kt">timestamp</span><span class="p">(</span><span class="s2">&#34;2010-01-01 00:00:00&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">friend</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">newly_created</span><span class="p">:</span><span class="n">created_post</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">po</span><span class="p">:</span><span class="n">post</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="n">newly_created</span><span class="p">.</span><span class="n">post_time</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="kt">timestamp</span><span class="p">(</span><span class="s2">&#34;2010-01-01 00:00:00&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="k">DISTINCT</span><span class="w"> </span><span class="n">friend</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nf">collect</span><span class="p">(</span><span class="k">DISTINCT</span><span class="w"> </span><span class="n">po</span><span class="p">.</span><span class="n">post</span><span class="p">.</span><span class="n">title</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nf">collect</span><span class="p">(</span><span class="s2">&#34;comment of &#34;</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nf">dst</span><span class="p">(</span><span class="n">newly_commented</span><span class="p">))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">AS</span><span class="w"> </span><span class="n">feeds</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">size</span><span class="p">(</span><span class="n">feeds</span><span class="p">)</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">friend</span><span class="p">.</span><span class="n">player</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">feeds</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><table>
<thead>
<tr>
<th style="text-align:left">friend.player.name</th>
<th style="text-align:left">feeds</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Boris Diaw</td>
<td style="text-align:left">[&ldquo;I love you, Mom&rdquo;, &ldquo;comment of post11&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Marco Belinelli</td>
<td style="text-align:left">[&ldquo;my best friend, tom&rdquo;, &ldquo;comment of post11&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Danny Green</td>
<td style="text-align:left">[&ldquo;comment of post1&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Tiago Splitter</td>
<td style="text-align:left">[&ldquo;comment of post1&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Dejounte Murray</td>
<td style="text-align:left">[&ldquo;comment of post11&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Tony Parker</td>
<td style="text-align:left">[&ldquo;I can swim&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">LaMarcus Aldridge</td>
<td style="text-align:left">[&ldquo;I hate coriander&rdquo;, &ldquo;comment of post11&rdquo;, &ldquo;comment of post1&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Manu Ginobili</td>
<td style="text-align:left">[&ldquo;my best friend, jerry&rdquo;, &ldquo;comment of post11&rdquo;, &ldquo;comment of post11&rdquo;]</td>
</tr>
</tbody>
</table>
<p>于是，我们可以把这些评论、文章发送到用户的 feed 之上了。</p>
<p>我们也来看看他们在图上的样子吧，我们输出所有查到的路径：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">feed_owner</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">friend</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">feed_owner</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;player100&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="n">p_comment</span><span class="o">=</span><span class="p">(</span><span class="n">friend</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">newly_commented</span><span class="p">:</span><span class="n">commented_at</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(:</span><span class="n">post</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">created_post</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">feed_owner</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="n">newly_commented</span><span class="p">.</span><span class="n">post_time</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="kt">timestamp</span><span class="p">(</span><span class="s2">&#34;2010-01-01 00:00:00&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="n">p_post</span><span class="o">=</span><span class="p">(</span><span class="n">friend</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">newly_created</span><span class="p">:</span><span class="n">created_post</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">po</span><span class="p">:</span><span class="n">post</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="n">newly_created</span><span class="p">.</span><span class="n">post_time</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="kt">timestamp</span><span class="p">(</span><span class="s2">&#34;2010-01-01 00:00:00&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="p">,</span><span class="w"> </span><span class="n">p_comment</span><span class="p">,</span><span class="w"> </span><span class="n">p_post</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>渲染在 Explorer 上，选择“神经网络”这个布局，可以很清晰看出这些粉色的文章节点，还有代表评论的边。</p>
<p><a class="lightgallery" href="/nebulagraph-sns/feed_from_friends.webp" title="feed_from_friends" data-thumbnail="/nebulagraph-sns/feed_from_friends.webp">
        
    </a></p>
<h3 id="附近好友的内容" class="headerLink">
    <a href="#%e9%99%84%e8%bf%91%e5%a5%bd%e5%8f%8b%e7%9a%84%e5%86%85%e5%ae%b9" class="header-mark"></a>8.2 附近好友的内容</h3><p>我们再进一步，把地理信息考虑进来，获取那些住址的经纬度小于一定距离朋友相关的内容。</p>
<p>这里，我们用到了 NebulaGraph 的 GeoSpatial 地理功能，<code>ST_Distance(home.address.geo_point, friend_addr.address.geo_point) AS distance WHERE distance &lt; 1000000</code> 的约束条件帮我们表达了距离的限制。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">home</span><span class="p">:</span><span class="n">address</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">lived_in</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">feed_owner</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">friend</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">lived_in</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">friend_addr</span><span class="p">:</span><span class="n">address</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">feed_owner</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;player100&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">feed_owner</span><span class="p">,</span><span class="w"> </span><span class="n">friend</span><span class="p">,</span><span class="w"> </span><span class="nf">ST_Distance</span><span class="p">(</span><span class="n">home</span><span class="p">.</span><span class="n">address</span><span class="p">.</span><span class="n">geo_point</span><span class="p">,</span><span class="w"> </span><span class="n">friend_addr</span><span class="p">.</span><span class="n">address</span><span class="p">.</span><span class="n">geo_point</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">distance</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">distance</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">1000000</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">friend</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">newly_commented</span><span class="p">:</span><span class="n">commented_at</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(:</span><span class="n">post</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">created_post</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">feed_owner</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="n">newly_commented</span><span class="p">.</span><span class="n">post_time</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="kt">timestamp</span><span class="p">(</span><span class="s2">&#34;2010-01-01 00:00:00&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">friend</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">newly_created</span><span class="p">:</span><span class="n">created_post</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">po</span><span class="p">:</span><span class="n">post</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="n">newly_created</span><span class="p">.</span><span class="n">post_time</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="kt">timestamp</span><span class="p">(</span><span class="s2">&#34;2010-01-01 00:00:00&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="k">DISTINCT</span><span class="w"> </span><span class="n">friend</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nf">collect</span><span class="p">(</span><span class="k">DISTINCT</span><span class="w"> </span><span class="n">po</span><span class="p">.</span><span class="n">post</span><span class="p">.</span><span class="n">title</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nf">collect</span><span class="p">(</span><span class="s2">&#34;comment of &#34;</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nf">dst</span><span class="p">(</span><span class="n">newly_commented</span><span class="p">))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">AS</span><span class="w"> </span><span class="n">feeds</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">size</span><span class="p">(</span><span class="n">feeds</span><span class="p">)</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">friend</span><span class="p">.</span><span class="n">player</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">feeds</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><table>
<thead>
<tr>
<th style="text-align:left">friend.player.name</th>
<th style="text-align:left">feeds</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Marco Belinelli</td>
<td style="text-align:left">[&ldquo;my best friend, tom&rdquo;, &ldquo;comment of post11&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Tony Parker</td>
<td style="text-align:left">[&ldquo;I can swim&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Danny Green</td>
<td style="text-align:left">[&ldquo;comment of post1&rdquo;]</td>
</tr>
</tbody>
</table>
<p>这时候，从可视化这个结果也可以看到住址这一关系，以及它们的经纬度信息，我手动根据它们的经纬度，把地址的节点在图上排布了一下可以看到这个 feed 的主人 Tim(player100) 的住址（7，8）刚好在其他好友住址的中间位置，这些临近好友的相关的文章和参与评论的内容将被作为信息流推送给 Tim：</p>
<p><a class="lightgallery" href="/nebulagraph-sns/geo_feed.webp" title="geo_feed" data-thumbnail="/nebulagraph-sns/geo_feed.webp">
        
    </a></p>
<h2 id="时空关系追踪" class="headerLink">
    <a href="#%e6%97%b6%e7%a9%ba%e5%85%b3%e7%b3%bb%e8%bf%bd%e8%b8%aa" class="header-mark"></a>9 时空关系追踪</h2><p>时空关系追踪这个图谱应用是在公共安全、物流、疫情防控等场景下，利用图遍历将繁杂、凌乱的信息充分利用起来的典型应用。当我们建立起这样的图谱之后往往只需要简单的图查询就可以获得非常有用的洞察。本章节我给大家距离一下这个应用场景。</p>
<h3 id="数据集" class="headerLink">
    <a href="#%e6%95%b0%e6%8d%ae%e9%9b%86" class="header-mark"></a>9.1 数据集</h3><p>为此，我创建了一个虚拟的数据集由来构建一个时空关系图谱。数据集的生成程序和一份可以直接用的文件都放在了 GitHub 上，仓库地址是： <a href="https://github.com/wey-gu/covid-track-graph-datagen" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/covid-track-graph-datagen</a> 。</p>
<p>它的数据建模如下：</p>

<p>在一个全新的环境里，我们可以用下边的 3 行命令就准备好这个图谱：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 安装 NebulaGraph + NebulaGraph Studio</span>
</span></span><span class="line"><span class="cl">curl -fsSL nebula-up.siwei.io/install.sh <span class="p">|</span> bash -s -- v3
</span></span><span class="line"><span class="cl"><span class="c1"># 下载数据集</span>
</span></span><span class="line"><span class="cl">git clone https://github.com/wey-gu/covid-track-graph-datagen <span class="o">&amp;&amp;</span> <span class="nb">cd</span> covid-track-graph-datagen
</span></span><span class="line"><span class="cl"><span class="c1"># 导入数据集</span>
</span></span><span class="line"><span class="cl">docker run --rm -ti <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --network<span class="o">=</span>nebula-net <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v <span class="si">${</span><span class="nv">PWD</span><span class="si">}</span>/:/root <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    vesoft/nebula-importer:v3.2.0 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --config /root/nebula-importer-config.yaml
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后我们在 console 里查看一下数据</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">~/.nebula-up/console.sh
</span></span><span class="line"><span class="cl"><span class="c1"># 进入 console 了，进到 covid_trace 图空间（刚才创建的）</span>
</span></span><span class="line"><span class="cl">USE covid_trace<span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 执行数据统计的任务</span>
</span></span><span class="line"><span class="cl">SHOW JOB STATS
</span></span></code></pre></td></tr></table>
</div>
</div><p>结果：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>root@nebula<span class="o">)</span> <span class="o">[</span>covid_trace<span class="o">]</span>&gt; SHOW STATS
</span></span><span class="line"><span class="cl">+---------+------------+--------+
</span></span><span class="line"><span class="cl"><span class="p">|</span> Type    <span class="p">|</span> Name       <span class="p">|</span> Count  <span class="p">|</span>
</span></span><span class="line"><span class="cl">+---------+------------+--------+
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Tag&#34;</span>   <span class="p">|</span> <span class="s2">&#34;人&#34;</span>       <span class="p">|</span> <span class="m">10000</span>  <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Tag&#34;</span>   <span class="p">|</span> <span class="s2">&#34;地址&#34;</span>     <span class="p">|</span> <span class="m">1000</span>   <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Tag&#34;</span>   <span class="p">|</span> <span class="s2">&#34;城市&#34;</span>     <span class="p">|</span> <span class="m">341</span>    <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Tag&#34;</span>   <span class="p">|</span> <span class="s2">&#34;村镇&#34;</span>     <span class="p">|</span> <span class="m">42950</span>  <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Tag&#34;</span>   <span class="p">|</span> <span class="s2">&#34;省份&#34;</span>     <span class="p">|</span> <span class="m">32</span>     <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Tag&#34;</span>   <span class="p">|</span> <span class="s2">&#34;联系方式&#34;</span> <span class="p">|</span> <span class="m">0</span>      <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Tag&#34;</span>   <span class="p">|</span> <span class="s2">&#34;行政区&#34;</span>   <span class="p">|</span> <span class="m">3134</span>   <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Tag&#34;</span>   <span class="p">|</span> <span class="s2">&#34;街道&#34;</span>     <span class="p">|</span> <span class="m">667911</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Edge&#34;</span>  <span class="p">|</span> <span class="s2">&#34;住址&#34;</span>     <span class="p">|</span> <span class="m">0</span>      <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Edge&#34;</span>  <span class="p">|</span> <span class="s2">&#34;到访&#34;</span>     <span class="p">|</span> <span class="m">19986</span>  <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Edge&#34;</span>  <span class="p">|</span> <span class="s2">&#34;同住&#34;</span>     <span class="p">|</span> <span class="m">19998</span>  <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Edge&#34;</span>  <span class="p">|</span> <span class="s2">&#34;属于&#34;</span>     <span class="p">|</span> <span class="m">715336</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Space&#34;</span> <span class="p">|</span> <span class="s2">&#34;vertices&#34;</span> <span class="p">|</span> <span class="m">725368</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Space&#34;</span> <span class="p">|</span> <span class="s2">&#34;edges&#34;</span>    <span class="p">|</span> <span class="m">755320</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl">+---------+------------+--------+
</span></span><span class="line"><span class="cl">Got <span class="m">14</span> rows <span class="o">(</span><span class="nb">time</span> spent 1087/46271 us<span class="o">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="两人之间的关联" class="headerLink">
    <a href="#%e4%b8%a4%e4%ba%ba%e4%b9%8b%e9%97%b4%e7%9a%84%e5%85%b3%e8%81%94" class="header-mark"></a>9.2 两人之间的关联</h3><p>很自然，利用路径查询就可以了：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># 最短
</span></span><span class="line"><span class="cl">FIND SHORTEST PATH FROM &#34;p_100&#34; TO &#34;p_101&#34; OVER * BIDIRECT YIELD PATH AS paths
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 所有路径
</span></span><span class="line"><span class="cl">FIND ALL PATH FROM &#34;p_100&#34; TO &#34;p_101&#34; OVER * BIDIRECT YIELD PATH AS paths | LIMIT 10
</span></span></code></pre></td></tr></table>
</div>
</div><p>最短路径结果：</p>
<table>
<thead>
<tr>
<th style="text-align:left">paths</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">&lt;(&ldquo;p_100&rdquo;)&lt;-[:同住@0 {}]-(&ldquo;p_2136&rdquo;)&lt;-[:同住@0 {}]-(&ldquo;p_3708&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_125&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_101&rdquo;)&gt;</td>
</tr>
</tbody>
</table>
<p>所有路径结果：</p>
<table>
<thead>
<tr>
<th style="text-align:left">paths</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">&lt;(&ldquo;p_100&rdquo;)&lt;-[:同住@0 {}]-(&ldquo;p_2136&rdquo;)&lt;-[:同住@0 {}]-(&ldquo;p_3708&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_125&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_101&rdquo;)&gt;</td>
</tr>
<tr>
<td style="text-align:left">&lt;(&ldquo;p_100&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_328&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_6976&rdquo;)&lt;-[:同住@0 {}]-(&ldquo;p_261&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_352&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_101&rdquo;)&gt;</td>
</tr>
<tr>
<td style="text-align:left">&lt;(&ldquo;p_100&rdquo;)-[:同住@0 {}]-&gt;(&ldquo;p_8709&rdquo;)-[:同住@0 {}]-&gt;(&ldquo;p_9315&rdquo;)-[:同住@0 {}]-&gt;(&ldquo;p_261&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_352&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_101&rdquo;)&gt;</td>
</tr>
<tr>
<td style="text-align:left">&lt;(&ldquo;p_100&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_328&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_6311&rdquo;)-[:同住@0 {}]-&gt;(&ldquo;p_3941&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_345&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_101&rdquo;)&gt;</td>
</tr>
<tr>
<td style="text-align:left">&lt;(&ldquo;p_100&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_328&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_5046&rdquo;)-[:同住@0 {}]-&gt;(&ldquo;p_3993&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_144&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_101&rdquo;)&gt;</td>
</tr>
<tr>
<td style="text-align:left">&lt;(&ldquo;p_100&rdquo;)-[:同住@0 {}]-&gt;(&ldquo;p_3457&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_199&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_6771&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_458&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_101&rdquo;)&gt;</td>
</tr>
<tr>
<td style="text-align:left">&lt;(&ldquo;p_100&rdquo;)&lt;-[:同住@0 {}]-(&ldquo;p_1462&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_922&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_5869&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_345&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_101&rdquo;)&gt;</td>
</tr>
<tr>
<td style="text-align:left">&lt;(&ldquo;p_100&rdquo;)&lt;-[:同住@0 {}]-(&ldquo;p_9489&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_985&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_2733&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_458&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_101&rdquo;)&gt;</td>
</tr>
<tr>
<td style="text-align:left">&lt;(&ldquo;p_100&rdquo;)&lt;-[:同住@0 {}]-(&ldquo;p_9489&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_905&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_2733&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_458&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_101&rdquo;)&gt;</td>
</tr>
<tr>
<td style="text-align:left">&lt;(&ldquo;p_100&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_89&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_1333&rdquo;)&lt;-[:同住@0 {}]-(&ldquo;p_1683&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_345&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_101&rdquo;)&gt;</td>
</tr>
</tbody>
</table>
<p>我们把所有路径进行可视化渲染，标记出起点终点的两人，并在其中查到他们的最短路径，他们之间的千丝万缕关系就一目了然了，无论是商业洞察、公共安全还是疫情防控的目的，有了这个信息，相应的工作都可以如虎添翼地向下进展。</p>
<p><a class="lightgallery" href="/nebulagraph-sns/find_path_two_people.webp" title="find_path_two_people" data-thumbnail="/nebulagraph-sns/find_path_two_people.webp">
        
    </a></p>
<p>当然，在真实的系统上，可能我们只需要关心两个用户之间的关联远近，得出量化的评估：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">FIND SHORTEST PATH FROM &#34;p_100&#34; TO &#34;p_101&#34; OVER * BIDIRECT YIELD PATH AS paths |
</span></span><span class="line"><span class="cl">    YIELD collect(length($-.paths)) AS len | YIELD coalesce($-.len[0], -1) AS len
</span></span></code></pre></td></tr></table>
</div>
</div><p>结果中我们只关心他们之间最短路径的长度为：4。</p>
<table>
<thead>
<tr>
<th style="text-align:left">len</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">4</td>
</tr>
</tbody>
</table>
<h3 id="时空相交的人" class="headerLink">
    <a href="#%e6%97%b6%e7%a9%ba%e7%9b%b8%e4%ba%a4%e7%9a%84%e4%ba%ba" class="header-mark"></a>9.3 时空相交的人</h3><p>进一步我们可以用图语义勾勒出我们想确定的任何带有时间与空间信息的模式，在图谱中实时查询出来，比如对给定的人，他的 id 是 p_101，我们相差在特定时间里所有和他有时空相交的人，这意味着那些人在 p_101 访问某一地方的时间段之内也逗留、访问了这些地方：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">p</span><span class="p">:</span><span class="err">人</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="o">`</span><span class="n">visit0</span><span class="o">`</span><span class="p">:</span><span class="err">到访</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="o">`</span><span class="n">addr</span><span class="o">`</span><span class="p">:</span><span class="err">地址</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[</span><span class="o">`</span><span class="n">visit1</span><span class="o">`</span><span class="p">:</span><span class="err">到访</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">p1</span><span class="p">:</span><span class="err">人</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;p_101&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="o">`</span><span class="n">visit0</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">start_time</span><span class="o">`</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="o">`</span><span class="n">visit1</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">end_time</span><span class="o">`</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="o">`</span><span class="n">visit0</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">end_time</span><span class="o">`</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="o">`</span><span class="n">visit1</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">start_time</span><span class="o">`</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">RETURN</span><span class="w"> </span><span class="o">`</span><span class="n">addr</span><span class="o">`</span><span class="p">.</span><span class="err">地址</span><span class="p">.</span><span class="o">`</span><span class="n">name</span><span class="o">`</span><span class="p">,</span><span class="w"> </span><span class="nf">collect</span><span class="p">(</span><span class="n">p1</span><span class="p">.</span><span class="err">人</span><span class="p">.</span><span class="o">`</span><span class="n">name</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>我们得到了再每一个到访地点的时空相交人列表如下：</p>
<table>
<thead>
<tr>
<th style="text-align:left">addr.地址.name</th>
<th style="text-align:left">collect(p1.人.name)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">闵行仇路q座 255960</td>
<td style="text-align:left">[&ldquo;徐畅&rdquo;, &ldquo;王佳&rdquo;, &ldquo;曾亮&rdquo;, &ldquo;姜桂香&rdquo;, &ldquo;邵秀英&rdquo;, &ldquo;韦婷婷&rdquo;, &ldquo;陶玉&rdquo;, &ldquo;马坤&rdquo;, &ldquo;黄想&rdquo;, &ldquo;张秀芳&rdquo;, &ldquo;颜桂芳&rdquo;, &ldquo;张洋&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">丰都北京路J座 725701</td>
<td style="text-align:left">[&ldquo;陈春梅&rdquo;, &ldquo;施婷婷&rdquo;, &ldquo;井成&rdquo;, &ldquo;范文&rdquo;, &ldquo;王楠&rdquo;, &ldquo;尚明&rdquo;, &ldquo;薛秀珍&rdquo;, &ldquo;宋金凤&rdquo;, &ldquo;杨雪&rdquo;, &ldquo;邓丽华&rdquo;, &ldquo;李杨&rdquo;, &ldquo;温佳&rdquo;, &ldquo;叶玉&rdquo;, &ldquo;周明&rdquo;, &ldquo;王桂珍&rdquo;, &ldquo;段玉华&rdquo;, &ldquo;金成&rdquo;, &ldquo;黄鑫&rdquo;, &ldquo;邬兵&rdquo;, &ldquo;魏柳&rdquo;, &ldquo;王兰英&rdquo;, &ldquo;杨柳&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">普陀潜江路P座 210730</td>
<td style="text-align:left">[&ldquo;储平&rdquo;, &ldquo;洪红霞&rdquo;, &ldquo;沈玉英&rdquo;, &ldquo;王洁&rdquo;, &ldquo;董玉英&rdquo;, &ldquo;邓凤英&rdquo;, &ldquo;谢海燕&rdquo;, &ldquo;梁雷&rdquo;, &ldquo;张畅&rdquo;, &ldquo;任玉兰&rdquo;, &ldquo;贾宇&rdquo;, &ldquo;汪成&rdquo;, &ldquo;孙琴&rdquo;, &ldquo;纪红梅&rdquo;, &ldquo;王欣&rdquo;, &ldquo;陈兵&rdquo;, &ldquo;张成&rdquo;, &ldquo;王东&rdquo;, &ldquo;谷霞&rdquo;, &ldquo;林成&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">普陀武街f座 706352</td>
<td style="text-align:left">[&ldquo;邢成&rdquo;, &ldquo;张建军&rdquo;, &ldquo;张鑫&rdquo;, &ldquo;戴涛&rdquo;, &ldquo;蔡洋&rdquo;, &ldquo;汪燕&rdquo;, &ldquo;尹亮&rdquo;, &ldquo;何利&rdquo;, &ldquo;何玉&rdquo;, &ldquo;周波&rdquo;, &ldquo;金秀珍&rdquo;, &ldquo;杨波&rdquo;, &ldquo;张帅&rdquo;, &ldquo;周柳&rdquo;, &ldquo;马云&rdquo;, &ldquo;张建华&rdquo;, &ldquo;王丽丽&rdquo;, &ldquo;陈丽&rdquo;, &ldquo;万萍&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">城东贵阳街O座 110567</td>
<td style="text-align:left">[&ldquo;李洁&rdquo;, &ldquo;陈静&rdquo;, &ldquo;王建国&rdquo;, &ldquo;方淑华&rdquo;, &ldquo;古想&rdquo;, &ldquo;漆萍&rdquo;, &ldquo;詹桂花&rdquo;, &ldquo;王成&rdquo;, &ldquo;李慧&rdquo;, &ldquo;孙娜&rdquo;, &ldquo;马伟&rdquo;, &ldquo;谢杰&rdquo;, &ldquo;王鹏&rdquo;, &ldquo;鞠桂英&rdquo;, &ldquo;莫桂英&rdquo;, &ldquo;汪雷&rdquo;, &ldquo;黄彬&rdquo;, &ldquo;李玉梅&rdquo;, &ldquo;祝红梅&rdquo;]</td>
</tr>
</tbody>
</table>
<p>现在，我们在图上可视化这个结果看看：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">p</span><span class="p">:</span><span class="err">人</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="o">`</span><span class="n">visit0</span><span class="o">`</span><span class="p">:</span><span class="err">到访</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="o">`</span><span class="n">addr</span><span class="o">`</span><span class="p">:</span><span class="err">地址</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[</span><span class="o">`</span><span class="n">visit1</span><span class="o">`</span><span class="p">:</span><span class="err">到访</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">p1</span><span class="p">:</span><span class="err">人</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;p_101&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="o">`</span><span class="n">visit0</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">start_time</span><span class="o">`</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="o">`</span><span class="n">visit1</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">end_time</span><span class="o">`</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="o">`</span><span class="n">visit0</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">end_time</span><span class="o">`</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="o">`</span><span class="n">visit1</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">start_time</span><span class="o">`</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">RETURN</span><span class="w"> </span><span class="n">paths</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>结果中我们标记了 p_101 为不同的图标，在用标签传播算法识别一下聚集社区，是不是一图胜千言呢？</p>
<p><a class="lightgallery" href="/nebulagraph-sns/time_and_space.webp" title="time_and_space" data-thumbnail="/nebulagraph-sns/time_and_space.webp">
        
    </a></p>
<h3 id="最近去过的省份" class="headerLink">
    <a href="#%e6%9c%80%e8%bf%91%e5%8e%bb%e8%bf%87%e7%9a%84%e7%9c%81%e4%bb%bd" class="header-mark"></a>9.4 最近去过的省份</h3><p>最后，我们再用简单的查询模式表达出一个人在给定时间内，比如从一个时间点开始，到访过的所有省份</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">p</span><span class="p">:</span><span class="err">人</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">visit</span><span class="p">:</span><span class="err">到访</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="o">`</span><span class="n">addr</span><span class="o">`</span><span class="p">:</span><span class="err">地址</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="err">属于</span><span class="o">*</span><span class="mi">5</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">province</span><span class="p">:</span><span class="err">省份</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;p_101&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">visit</span><span class="p">.</span><span class="n">start_time</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">1625469000</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">RETURN</span><span class="w"> </span><span class="n">province</span><span class="p">.</span><span class="err">省份</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="nf">collect</span><span class="p">(</span><span class="n">addr</span><span class="p">.</span><span class="err">地址</span><span class="p">.</span><span class="n">name</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>看起来他/她去过不少地方呢：</p>
<table>
<thead>
<tr>
<th style="text-align:left">province.省份.name</th>
<th style="text-align:left">collect(addr.地址.name)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">四川省</td>
<td style="text-align:left">[&ldquo;闵行仇路q座 255960&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">山东省</td>
<td style="text-align:left">[&ldquo;城东贵阳街O座 110567&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">云南省</td>
<td style="text-align:left">[&ldquo;丰都北京路J座 725701&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">福建省</td>
<td style="text-align:left">[&ldquo;普陀潜江路P座 210730&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">内蒙古自治区</td>
<td style="text-align:left">[&ldquo;普陀武街f座 706352&rdquo;]</td>
</tr>
</tbody>
</table>
<p>老轨迹，我们在图上看看这个结果吧，这次，我们选择 Dagre-LR 这个布局渲染，结果是不是非常清晰呢？</p>
<p><a class="lightgallery" href="/nebulagraph-sns/visited_provinces.webp" title="visited_provinces" data-thumbnail="/nebulagraph-sns/visited_provinces.webp">
        
    </a></p>
<h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>10 总结</h2><p>我们给出了不少社交网络里的应用案例，包括：</p>
<ul>
<li>查找关键的人</li>
<li>识别聚集的人群、社群</li>
<li>判定两个用户之间的亲密度</li>
<li>推荐新朋友</li>
<li>利用共同邻居精准推送重要内容</li>
<li>根据好友关系、地理位置推送信息流</li>
<li>利用时空关系图谱查询人与人之间关系、获取时空相交的人、访问过的省份</li>
</ul>
<p>社交网络作为天然的图结构，非常适合用图的技术来存储、查询、计算、分析与可视化去解决其上的各式各样的问题，NebulaGraph 的强大处理能力和可视化能力使得我们已知很多公司在使用它作为社交领域的图存储、计算层，这其中包括：网易游戏、微信、Line、Soul、快手和知乎等等很多行业领先的团队，希望大家通过本章能对社交领域的图技术应有有一个初步的认识。</p>
<blockquote>
<p>题图版权：by <a href="https://unsplash.com/photos/IBaVuZsJJTo" target="_blank" rel="noopener noreferrer">Ryoji</a></p>
</blockquote>]]></description>
</item><item>
    <title>Nebula-Up，一键拉起一个 Nebula 测试环境</title>
    <link>https://siwei.io/nebula-up/</link>
    <pubDate>Mon, 26 Apr 2021 11:11:04 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/nebula-up/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/nebula-up/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>Update: the All-in-one mode is introduced! Check <a href="#all-in-one-mode" rel="">here</a> and try it!</p>
</blockquote>
<p><a href="https://asciinema.org/a/407151" title="Nebula Up Demo" target="_blank" rel="noopener noreferrer"><a class="lightgallery" href="/nebula-up/nebula-up-demo.svg" title="nebula-up demo" data-thumbnail="/nebula-up/nebula-up-demo.svg">
        
    </a></a></p>
<p><code>Nebula-Up</code> is PoC utility to enable developer to bootstrap an nebula-graph cluster with nebula-graph-studio(Web UI) + nebula-graph-console(Command UI) ready out of box in an oneliner run. All required packages will handled with <code>nebula-up</code> as well, including Docker on Linux(Ubuntu/CentOS), Docker Desktop on macOS(including both Intel and M1 chip based), and Docker Desktop Windows.</p>
<p>Also, it&rsquo;s optimized to leverage China Repo Mirrors(docker, brew, gitee, etc&hellip;) in case needed enable a smooth deployment for both Mainland China users and others.</p>
<p>macOS and Linux with Shell:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -fsSL nebula-up.siwei.io/install.sh <span class="p">|</span> bash
</span></span></code></pre></td></tr></table>
</div>
</div><p><a class="lightgallery" href="/nebula-up/nebula-up-demo-shell.png" title="nebula-up-demo-shell" data-thumbnail="/nebula-up/nebula-up-demo-shell.png">
        
    </a></p>
<p>Note: you could specify the version of Nebula Graph like:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -fsSL nebula-up.siwei.io/install.sh <span class="p">|</span> bash -s -- v2.6
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="all-in-one-mode" class="headerLink">
    <a href="#all-in-one-mode" class="header-mark"></a>1 All-in-one mode</h2><p>With all-in-one mode, you could play with many Nebula Tools in one command, too:</p>
<p><a class="lightgallery" href="/nebula-up/nebula-up-all-in-one.svg" title="/nebula-up/nebula-up-all-in-one.svg" data-thumbnail="/nebula-up/nebula-up-all-in-one.svg">
        
    </a></p>
<p>Supported tools:</p>
<ul>
<li><i class="far fa-check-square fa-fw"></i> Nebula Dashboard</li>
<li><i class="far fa-check-square fa-fw"></i> Nebula Graph Studio</li>
<li><i class="far fa-check-square fa-fw"></i> Nebula Graph Console</li>
<li><i class="far fa-check-square fa-fw"></i> Nebula BR(backup &amp; restore)</li>
<li><i class="far fa-check-square fa-fw"></i> Nebula Graph Spark utils
<ul>
<li><i class="far fa-check-square fa-fw"></i> Nebula Graph Spark Connector/PySpark</li>
<li><i class="far fa-check-square fa-fw"></i> Nebula Graph Algorithm</li>
<li><i class="far fa-check-square fa-fw"></i> Nebula Graph Exchange</li>
</ul>
</li>
<li><i class="far fa-square fa-fw"></i> Nebula Graph Importer</li>
<li><i class="far fa-square fa-fw"></i> Nebula Graph Fulltext Search</li>
<li><i class="far fa-square fa-fw"></i> Nebula Bench</li>
</ul>
<h3 id="install-all-in-one" class="headerLink">
    <a href="#install-all-in-one" class="header-mark"></a>1.1 Install all in one</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># Install Nebula Core with all-in-one mode</span>
</span></span><span class="line"><span class="cl">curl -fsSL nebula-up.siwei.io/all-in-one.sh <span class="p">|</span> bash
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="install-nebula-core-and-one-of-the-coponent" class="headerLink">
    <a href="#install-nebula-core-and-one-of-the-coponent" class="header-mark"></a>1.2 Install Nebula Core and One of the coponent:</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># Install Core with Backup and Restore with MinIO</span>
</span></span><span class="line"><span class="cl">curl -fsSL nebula-up.siwei.io/all-in-one.sh <span class="p">|</span> bash -s -- v3 br
</span></span><span class="line"><span class="cl"><span class="c1"># Install Core with Spark Connector, Nebula Algorithm, Nebula Exchange</span>
</span></span><span class="line"><span class="cl">curl -fsSL nebula-up.siwei.io/all-in-one.sh <span class="p">|</span> bash -s -- v3 spark
</span></span><span class="line"><span class="cl"><span class="c1"># Install Core with Dashboard</span>
</span></span><span class="line"><span class="cl">curl -fsSL nebula-up.siwei.io/all-in-one.sh <span class="p">|</span> bash -s -- v3 dashboard
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="how-to-play-with-all-in-one-mode" class="headerLink">
    <a href="#how-to-play-with-all-in-one-mode" class="header-mark"></a>1.3 How to play with all-in-one mode:</h3><h4 id="console-and-basketballplayer-dataset-loading" class="headerLink">
    <a href="#console-and-basketballplayer-dataset-loading" class="header-mark"></a>1.3.1 Console and Basketballplayer Dataset Loading</h4><p>Then you could call Nebula Console like:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># Connect to nebula with console</span>
</span></span><span class="line"><span class="cl">~/.nebula-up/console.sh
</span></span><span class="line"><span class="cl"><span class="c1"># Execute queryies like</span>
</span></span><span class="line"><span class="cl">~/.nebula-up/console.sh -e <span class="s2">&#34;SHOW HOSTS&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Load the sample dataset</span>
</span></span><span class="line"><span class="cl">~/.nebula-up/load-basketballplayer-dataset.sh
</span></span><span class="line"><span class="cl"><span class="c1"># Make a Graph Query the sample dataset</span>
</span></span><span class="line"><span class="cl">~/.nebula-up/console.sh -e <span class="s1">&#39;USE basketballplayer; FIND ALL PATH FROM &#34;player100&#34; TO &#34;team204&#34; OVER * WHERE follow.degree is EMPTY or follow.degree &gt;=0 YIELD path AS p;&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="monitor-the-whole-cluster-with-nebula-dashboard" class="headerLink">
    <a href="#monitor-the-whole-cluster-with-nebula-dashboard" class="header-mark"></a>1.3.2 Monitor the whole cluster with Nebula Dashboard</h4><p>Visit http://127.0.0.1:7003 with user: <code>root</code>, password: <code>nebula</code>.</p>
<blockquote>
<p>Note, thanks to the sponsorship of Microsoft, we have a demo site of Nebula-UP on Azure: you could visit the dashboard here: <a href="http://nebula-demo.siwei.io:7003" target="_blank" rel="noopener noreferrer">http://nebula-demo.siwei.io:7003</a> .</p>
</blockquote>
<h4 id="access-nebula-graph-studio" class="headerLink">
    <a href="#access-nebula-graph-studio" class="header-mark"></a>1.3.3 Access Nebula Graph Studio</h4><p>Visit http://127.0.0.1:7001 with user: <code>root</code>, password: <code>nebula</code>, host: <code>graphd:9669</code>(for non-all-in-one case, this should be <code>&lt;host-ip&gt;:9669</code>).</p>
<blockquote>
<p>Note, thanks to the sponsorship of Microsoft, we have a demo site of Nebula-UP on Azure: you could visit the studio here: <a href="http://nebula-demo.siwei.io:7001" target="_blank" rel="noopener noreferrer">http://nebula-demo.siwei.io:7001</a> .</p>
</blockquote>
<h4 id="query-data-with-nebula-spark-connector-in-pyspark-shell" class="headerLink">
    <a href="#query-data-with-nebula-spark-connector-in-pyspark-shell" class="header-mark"></a>1.3.4 Query Data with Nebula Spark Connector in PySpark Shell</h4><p>Or play in PySpark like:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">~/.nebula-up/nebula-pyspark.sh
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># call Nebula Spark Connector Reader</span>
</span></span><span class="line"><span class="cl"><span class="nv">df</span> <span class="o">=</span> spark.read.format<span class="o">(</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;com.vesoft.nebula.connector.NebulaDataSource&#34;</span><span class="o">)</span>.option<span class="o">(</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;type&#34;</span>, <span class="s2">&#34;vertex&#34;</span><span class="o">)</span>.option<span class="o">(</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;spaceName&#34;</span>, <span class="s2">&#34;basketballplayer&#34;</span><span class="o">)</span>.option<span class="o">(</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;label&#34;</span>, <span class="s2">&#34;player&#34;</span><span class="o">)</span>.option<span class="o">(</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;returnCols&#34;</span>, <span class="s2">&#34;name,age&#34;</span><span class="o">)</span>.option<span class="o">(</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;metaAddress&#34;</span>, <span class="s2">&#34;metad0:9559&#34;</span><span class="o">)</span>.option<span class="o">(</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;partitionNumber&#34;</span>, 1<span class="o">)</span>.load<span class="o">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># show the dataframe with limit 2</span>
</span></span><span class="line"><span class="cl">df.show<span class="o">(</span><span class="nv">n</span><span class="o">=</span>2<span class="o">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>The output may look like:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">      <span class="n">____</span>              <span class="n">__</span>
</span></span><span class="line"><span class="cl">     <span class="o">/</span> <span class="n">__</span><span class="o">/</span><span class="n">__</span>  <span class="n">___</span> <span class="n">_____</span><span class="o">/</span> <span class="o">/</span><span class="n">__</span>
</span></span><span class="line"><span class="cl">    <span class="n">_</span>\ \<span class="o">/</span> <span class="n">_</span> \<span class="o">/</span> <span class="n">_</span> <span class="err">`</span><span class="o">/</span> <span class="n">__</span><span class="o">/</span>  <span class="s1">&#39;_/</span>
</span></span><span class="line"><span class="cl">   <span class="o">/</span><span class="n">__</span> <span class="o">/</span> <span class="o">.</span><span class="n">__</span><span class="o">/</span>\<span class="n">_</span><span class="p">,</span><span class="n">_</span><span class="o">/</span><span class="n">_</span><span class="o">/</span> <span class="o">/</span><span class="n">_</span><span class="o">/</span>\<span class="n">_</span>\   <span class="n">version</span> <span class="mf">2.4.5</span>
</span></span><span class="line"><span class="cl">      <span class="o">/</span><span class="n">_</span><span class="o">/</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Using</span> <span class="n">Python</span> <span class="n">version</span> <span class="mf">2.7.16</span> <span class="p">(</span><span class="n">default</span><span class="p">,</span> <span class="n">Jan</span> <span class="mi">14</span> <span class="mi">2020</span> <span class="mi">07</span><span class="p">:</span><span class="mi">22</span><span class="p">:</span><span class="mi">06</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">SparkSession</span> <span class="n">available</span> <span class="k">as</span> <span class="s1">&#39;spark&#39;</span><span class="o">.</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">df</span> <span class="o">=</span> <span class="n">spark</span><span class="o">.</span><span class="n">read</span><span class="o">.</span><span class="n">format</span><span class="p">(</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>   <span class="s2">&#34;com.vesoft.nebula.connector.NebulaDataSource&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">option</span><span class="p">(</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="s2">&#34;type&#34;</span><span class="p">,</span> <span class="s2">&#34;vertex&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">option</span><span class="p">(</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="s2">&#34;spaceName&#34;</span><span class="p">,</span> <span class="s2">&#34;basketballplayer&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">option</span><span class="p">(</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="s2">&#34;label&#34;</span><span class="p">,</span> <span class="s2">&#34;player&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">option</span><span class="p">(</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="s2">&#34;returnCols&#34;</span><span class="p">,</span> <span class="s2">&#34;name,age&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">option</span><span class="p">(</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="s2">&#34;metaAddress&#34;</span><span class="p">,</span> <span class="s2">&#34;metad0:9559&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">option</span><span class="p">(</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="s2">&#34;partitionNumber&#34;</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">load</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">df</span><span class="o">.</span><span class="n">show</span><span class="p">(</span><span class="n">n</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">+---------+--------------+---+</span>
</span></span><span class="line"><span class="cl"><span class="o">|</span><span class="n">_vertexId</span><span class="o">|</span>          <span class="n">name</span><span class="o">|</span><span class="n">age</span><span class="o">|</span>
</span></span><span class="line"><span class="cl"><span class="o">+---------+--------------+---+</span>
</span></span><span class="line"><span class="cl"><span class="o">|</span><span class="n">player105</span><span class="o">|</span>   <span class="n">Danny</span> <span class="n">Green</span><span class="o">|</span> <span class="mi">31</span><span class="o">|</span>
</span></span><span class="line"><span class="cl"><span class="o">|</span><span class="n">player109</span><span class="o">|</span><span class="n">Tiago</span> <span class="n">Splitter</span><span class="o">|</span> <span class="mi">34</span><span class="o">|</span>
</span></span><span class="line"><span class="cl"><span class="o">+---------+--------------+---+</span>
</span></span><span class="line"><span class="cl"><span class="n">only</span> <span class="n">showing</span> <span class="n">top</span> <span class="mi">2</span> <span class="n">rows</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="run-nebula-exchange" class="headerLink">
    <a href="#run-nebula-exchange" class="header-mark"></a>1.3.5 Run Nebula Exchange</h4><p>Or run an example Nebula Exchange job to import data from CSV file:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">~/.nebula-up/nebula-exchange-example.sh
</span></span></code></pre></td></tr></table>
</div>
</div><p>You could check the example configuration file in <code>~/.nebula-up/nebula-up/spark/exchange.conf</code></p>
<h4 id="run-nebula-graph-algorithm" class="headerLink">
    <a href="#run-nebula-graph-algorithm" class="header-mark"></a>1.3.6 Run Nebula Graph Algorithm</h4><blockquote>
<p>Reference: <a href="https://github.com/wey-gu/nebula-livejournal" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/nebula-livejournal</a></p>
</blockquote>
<p>Load LiveJournal dataset with Nebula Importer:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">~/.nebula-up/load-LiveJournal-dataset.sh
</span></span></code></pre></td></tr></table>
</div>
</div><p>Run Nebula Algorithm like:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">~/.nebula-up/nebula-algo-pagerank-example.sh
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="try-backup-and-restore-with-minio-as-storage" class="headerLink">
    <a href="#try-backup-and-restore-with-minio-as-storage" class="header-mark"></a>1.3.7 Try Backup and Restore with MinIO as Storage</h4><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># Create a full backup to MinIO(Be sure to run load-basketballplayer-dataset.sh before doing so)</span>
</span></span><span class="line"><span class="cl">~/.nebula-up/nebula-br-backup-full.sh
</span></span><span class="line"><span class="cl"><span class="c1"># Show all backups</span>
</span></span><span class="line"><span class="cl">~/.nebula-up/nebula-br-show.sh
</span></span><span class="line"><span class="cl"><span class="c1"># Restore to a backup named BACKUP_2022_05_08_11_38_08</span>
</span></span><span class="line"><span class="cl">~/.nebula-up/nebula-br-restore-full.sh BACKUP_2022_05_08_11_38_08
</span></span></code></pre></td></tr></table>
</div>
</div><p>Note, you could also browser files in MinIO with from http://127.0.0.1:9001 with user: <code>minioadmin</code>, password: <code>minioadmin</code>.</p>
<blockquote>
<p>Note, thanks to the sponsorship of Microsoft, we have a demo site of Nebula-UP on Azure: you could visit the MinIO site here: <a href="http://nebula-demo.siwei.io:9001" target="_blank" rel="noopener noreferrer">http://nebula-demo.siwei.io:9001</a> .</p>
</blockquote>
<hr>
<p><del>Windows with PowerShell</del>(Working In Progress):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="nb">iwr nebula-up</span><span class="p">.</span><span class="py">siwei</span><span class="p">.</span><span class="n">io</span><span class="p">/</span><span class="n">install</span><span class="p">.</span><span class="py">ps1</span> <span class="n">-useb</span> <span class="p">|</span> <span class="nb">iex
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>TBD:</p>
<ul>
<li><i class="far fa-square fa-fw"></i> Finished Windows(Docker Desktop instead of the WSL 1&amp;2 in initial phase) part, leveraging chocolatey package manager as homebrew was used in macOS</li>
<li><i class="far fa-square fa-fw"></i> Fully optimized for CN users, for now, git/apt/yum repo were not optimised, newly installed docker repo, brew repo were automatically optimised for CN internet access</li>
<li><i class="far fa-square fa-fw"></i> Packaging similar content into homebrew/chocolatey?</li>
<li><i class="far fa-square fa-fw"></i> CI/UT</li>
</ul>]]></description>
</item><item>
    <title>Nebula-Insights，我们基于 Serverless 架构的数据管道方案与代码分享。</title>
    <link>https://siwei.io/nebula-insights/</link>
    <pubDate>Mon, 03 May 2021 21:11:04 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/nebula-insights/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/nebula-insights/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>这是我首发在 Datawhale 的<a href="http://datawhale.club/t/topic/2089" target="_blank" rel="noopener noreferrer">文章</a>，介绍我们如何用公有云 Serverless 技术：Google Cloud Scheduler，Google Cloud Functions 和 BigQuery 搭建数据管道，收集探索开源社区洞察。并将全部代码开源在 GitHub。</p>
</blockquote>
<blockquote>
<p>引子
我们想要收集一些帮助 Nebula Graph 社区运营的 metrics，希望能从不同来源的数据自动化周期性收集、处理、并方便地展现出来做数据驱动分析的基础设施。</p>
</blockquote>
<blockquote>
<p>Nebula Graph 是一个现代的开源分布式图数据库(Graph Database)，欢迎同学们从:</p>
<ul>
<li>官网: <a href="https://nebula-graph.com.cn" target="_blank" rel="noopener noreferrer">https://nebula-graph.com.cn </a></li>
<li>Bilibili: <a href="https://space.bilibili.com/472621355" target="_blank" rel="noopener noreferrer">https://space.bilibili.com/472621355</a></li>
<li>GitHub:https://github.com/vesoft-inc/nebula-graph
了解我们哈。</li>
</ul>
</blockquote>
<h2 id="需求" class="headerLink">
    <a href="#%e9%9c%80%e6%b1%82" class="header-mark"></a>1 需求</h2><ol>
<li>方便增加新的数据</li>
<li>数据收集无需人为触发（自动、周期性）</li>
<li>每天数据量不超过1000条</li>
<li>数据可以生成 dashboard，也可以支持统计分期 query</li>
<li>高可用，数据安全</li>
<li>低预算，尽可能不需要运维人力</li>
</ol>
<h3 id="需求分析" class="headerLink">
    <a href="#%e9%9c%80%e6%b1%82%e5%88%86%e6%9e%90" class="header-mark"></a>1.1 需求分析</h3><p>我们需要搭建一个系统能实现</p>
<ul>
<li>一个能周期性触发获取数据的事件的服务: scheduler</li>
<li>一个触发之后，把数据 ETL 到数据库中的服务: ETL worker</li>
<li>一个数据仓库</li>
<li>一个能够把数据库作为源，允许用户 query，展示数据的界面: Data-UI</li>
</ul>
<p>这个需求的特点是虽然数据量很小、但是要求服务高可用、安全。因为这种情况下自建服务器还需要保证HA和数据安全会一定会消耗昂贵运维人力，所以我们应该尽量避免在自己维护的服务器中搭建 scheduler, 和数据库。</p>
<p>最终，我们选择了尽量使用公有云的 aaS 的方案:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">┌──────────────────────────┐
</span></span><span class="line"><span class="cl">│                          │
</span></span><span class="line"><span class="cl">│  Google Cloud Scheduler  │
</span></span><span class="line"><span class="cl">│                          │
</span></span><span class="line"><span class="cl">└────────────┬─────────────┘
</span></span><span class="line"><span class="cl">             │                             ┌─────────────────────┐
</span></span><span class="line"><span class="cl">             │                             │                     │
</span></span><span class="line"><span class="cl">┌────────────▼─────────────┐   ┌───────────►  GitHub API Server  │
</span></span><span class="line"><span class="cl">│                          │   │           │                     │
</span></span><span class="line"><span class="cl">│  Google Cloud Functions  ├───┤           └─────────────────────┘
</span></span><span class="line"><span class="cl">│                          │   │
</span></span><span class="line"><span class="cl">└────────────┬─────────────┘   │           ┌─────────────────────────┐
</span></span><span class="line"><span class="cl">             │                 │           │                         │
</span></span><span class="line"><span class="cl">             │                 ├───────────►  Docker Hub API Server  │
</span></span><span class="line"><span class="cl">   ┌─────────▼─────────┐       │           │                         │
</span></span><span class="line"><span class="cl">   │                   │       │           │                         │
</span></span><span class="line"><span class="cl">   │  Google BigQuery  │       │           └─────────────────────────┘
</span></span><span class="line"><span class="cl">   │                   │       ├───────────► ...                   
</span></span><span class="line"><span class="cl">   └─────────▲─────────┘       │           ┌──────────────────┐
</span></span><span class="line"><span class="cl">             │                 │           │                  │
</span></span><span class="line"><span class="cl">             │                 └───────────►  Aliyun OSS API  │
</span></span><span class="line"><span class="cl">  ┌──────────┴───────────┐                 │                  │
</span></span><span class="line"><span class="cl">  │                      │                 └──────────────────┘
</span></span><span class="line"><span class="cl">  │  Google Data Studio  │
</span></span><span class="line"><span class="cl">  │       ┌──┐           │
</span></span><span class="line"><span class="cl">  │  ┌──┐ │  │ ┌──┐      │
</span></span><span class="line"><span class="cl">  │  │  │ │  │ │  │      │
</span></span><span class="line"><span class="cl">  │  │  │ │  │ │  │      │
</span></span><span class="line"><span class="cl">  └──┴──┴─┴──┴─┴──┴──────┘
</span></span></code></pre></td></tr></table>
</div>
</div><p>因为我个人比较熟悉 Google Cloud Platform(GCP)的原因，加上GCP在大数据处理上比较领先，再加上Google提供的 free tier额度非常大方，以至于在我们这个数据量下，所有workload都会是免费的。
这个方案最后选择了全栈 Google Cloud，然而，这实际上只是一个参考，同学们完全可以在其他公有云提供商那里找到对应的服务。</p>
<p>这里我简单介绍一下， Google Cloud Scheduler是自解释的，不用多介绍了。
而 Google Cloud Functions是GCP的无服务器(serverless)的 Function as a Service服务，它的好处是我们可以把无状态的 event-driven 的 workload 代码放上去，它是按需付费（pay as you go)的，类似的服务还有 Google Cloud Run，后者的区别在于我们提供的是一个docker/container（这使得能支持的运行环境可以使任何能跑在容器里的东西），而 Cloud Functions是把我们的代码文件放上去。他们的效果是类似的，因为我准备用Python来做 ETL的东西，Clouf Functions已经支持了，我就直接选择它了。</p>
<p>在scheduler里边，我定义了每一天它发一个 pub/sub（类似于kafka，这里google可以保证至少发成功一次）消息给 Cloud Functions，然后 Cloud Functions会去做 ETL的工作。</p>
<p>这里，实际上我的设计里这个触发的函数调会把数据从API那里获取下来，在内存里处理好之后，存储到在对象存储里为 <code>JSON</code> 文件，然后再调用 Google BigQuery 的 API让 BigQuery直接从对对象存储里拉取 <code>JSON</code> 文件，导入记录到相应的表之中。</p>
<p><code>Google BigQuery</code> 作为GCP 特别有竞争力的一个产品，是它数据仓库，BigQuery 可以无限扩容，支持海量数据导入，支持 SQL-like 的 query，还自带ML算法，通过SQL就能调用这些算法。它可以和很多GCP以及第三方的组件可以集成起来。</p>
<p><code>Google Data Studio</code> 是GCP的数据 Insights产品，如果大家用过 Google Analytics 应该已经用过它了。</p>
<h3 id="数据的获取api" class="headerLink">
    <a href="#%e6%95%b0%e6%8d%ae%e7%9a%84%e8%8e%b7%e5%8f%96api" class="header-mark"></a>1.2 数据的获取，API</h3><p>我们第一阶段想要收集的数据来源是 GitHub 上，社区项目的统计数据、Docker Hub上，社区镜像的拉取计数，之后，会增加更多维度的数据。</p>
<ul>
<li>Github API, ref: <a href="https://pygithub.readthedocs.io" target="_blank" rel="noopener noreferrer">https://pygithub.readthedocs.io</a>
这里我们利用了一个Github API的一个 Python 封装，下边是在 IDLE/iPython/Jupyter 里尝试的例子</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># 实例化一个client
</span></span><span class="line"><span class="cl">g = Github(login_or_token=token, timeout=60, retry=Retry(
</span></span><span class="line"><span class="cl">           total=10, status_forcelist=(500, 502, 504), backoff_factor=0.3))
</span></span><span class="line"><span class="cl"># 配置好要获取的repo的信息
</span></span><span class="line"><span class="cl">org_str = &#34;vesoft-inc&#34;
</span></span><span class="line"><span class="cl">org = g.get_organization(org_str)
</span></span><span class="line"><span class="cl">repos = org.get_repos()
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 这里repos是一个迭代器，方便看到里边的东西，我们把它 list 一下可以看到所有的repo:
</span></span><span class="line"><span class="cl">list(repos)
</span></span><span class="line"><span class="cl">[Repository(full_name=&#34;vesoft-inc/nebula&#34;),
</span></span><span class="line"><span class="cl"> Repository(full_name=&#34;vesoft-inc/nebula-docs&#34;),
</span></span><span class="line"><span class="cl"> Repository(full_name=&#34;vesoft-inc/nebula-dev-docker&#34;),
</span></span><span class="line"><span class="cl"> Repository(full_name=&#34;vesoft-inc/github-statistics&#34;),
</span></span><span class="line"><span class="cl"> Repository(full_name=&#34;vesoft-inc/nebula-docker-compose&#34;),
</span></span><span class="line"><span class="cl"> Repository(full_name=&#34;vesoft-inc/nebula-go&#34;),
</span></span><span class="line"><span class="cl"> Repository(full_name=&#34;vesoft-inc/nebula-java&#34;),
</span></span><span class="line"><span class="cl"> Repository(full_name=&#34;vesoft-inc/nebula-python&#34;),
</span></span><span class="line"><span class="cl"> Repository(full_name=&#34;vesoft-inc/nebula-importer&#34;),
</span></span><span class="line"><span class="cl"> Repository(full_name=&#34;vesoft-inc/nebula-third-party&#34;),
</span></span><span class="line"><span class="cl"> Repository(full_name=&#34;vesoft-inc/nebula-storage&#34;),
</span></span><span class="line"><span class="cl"> Repository(full_name=&#34;vesoft-inc/nebula-graph&#34;),
</span></span><span class="line"><span class="cl"> Repository(full_name=&#34;vesoft-inc/nebula-common&#34;),
</span></span><span class="line"><span class="cl"> Repository(full_name=&#34;vesoft-inc/nebula-stats-exporter&#34;),
</span></span><span class="line"><span class="cl"> Repository(full_name=&#34;vesoft-inc/nebula-web-docker&#34;),
</span></span><span class="line"><span class="cl"> Repository(full_name=&#34;vesoft-inc/nebula-bench&#34;),
</span></span><span class="line"><span class="cl"> Repository(full_name=&#34;vesoft-inc/nebula-console&#34;),
</span></span><span class="line"><span class="cl"> Repository(full_name=&#34;vesoft-inc/nebula-docs-cn&#34;),
</span></span><span class="line"><span class="cl"> Repository(full_name=&#34;vesoft-inc/nebula-chaos&#34;),
</span></span><span class="line"><span class="cl"> Repository(full_name=&#34;vesoft-inc/nebula-clients&#34;),
</span></span><span class="line"><span class="cl"> Repository(full_name=&#34;vesoft-inc/nebula-spark-utils&#34;),
</span></span><span class="line"><span class="cl"> Repository(full_name=&#34;vesoft-inc/nebula-node&#34;),
</span></span><span class="line"><span class="cl"> Repository(full_name=&#34;vesoft-inc/nebula-rust&#34;),
</span></span><span class="line"><span class="cl"> Repository(full_name=&#34;vesoft-inc/nebula-cpp&#34;),
</span></span><span class="line"><span class="cl"> Repository(full_name=&#34;vesoft-inc/nebula-http-gateway&#34;),
</span></span><span class="line"><span class="cl"> Repository(full_name=&#34;vesoft-inc/nebula-flink-connector&#34;),
</span></span><span class="line"><span class="cl"> Repository(full_name=&#34;vesoft-inc/nebula-community&#34;),
</span></span><span class="line"><span class="cl"> Repository(full_name=&#34;vesoft-inc/nebula-br&#34;),
</span></span><span class="line"><span class="cl"> Repository(full_name=&#34;vesoft-inc/.github&#34;)]
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># repo0 是 vesoft-inc/nebula 这个repo，我们可以通过 get_clones_traffic，get_views_traffic 来获取过去十几天的 clone，view 统计
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">In [16]: repo0.get_clones_traffic()
</span></span><span class="line"><span class="cl">Out[16]:
</span></span><span class="line"><span class="cl">{&#39;count&#39;: 362,
</span></span><span class="line"><span class="cl"> &#39;uniques&#39;: 150,
</span></span><span class="line"><span class="cl"> &#39;clones&#39;: [Clones(uniques=5, timestamp=2021-04-06 00:00:00, count=16),
</span></span><span class="line"><span class="cl">  Clones(uniques=8, timestamp=2021-04-07 00:00:00, count=23),
</span></span><span class="line"><span class="cl">  Clones(uniques=13, timestamp=2021-04-08 00:00:00, count=30),
</span></span><span class="line"><span class="cl">  Clones(uniques=33, timestamp=2021-04-09 00:00:00, count=45),
</span></span><span class="line"><span class="cl">  Clones(uniques=2, timestamp=2021-04-10 00:00:00, count=13),
</span></span><span class="line"><span class="cl">  Clones(uniques=6, timestamp=2021-04-11 00:00:00, count=19),
</span></span><span class="line"><span class="cl">  Clones(uniques=15, timestamp=2021-04-12 00:00:00, count=28),
</span></span><span class="line"><span class="cl">  Clones(uniques=40, timestamp=2021-04-13 00:00:00, count=54),
</span></span><span class="line"><span class="cl">  Clones(uniques=9, timestamp=2021-04-14 00:00:00, count=21),
</span></span><span class="line"><span class="cl">  Clones(uniques=10, timestamp=2021-04-15 00:00:00, count=34),
</span></span><span class="line"><span class="cl">  Clones(uniques=10, timestamp=2021-04-16 00:00:00, count=23),
</span></span><span class="line"><span class="cl">  Clones(uniques=5, timestamp=2021-04-17 00:00:00, count=17),
</span></span><span class="line"><span class="cl">  Clones(uniques=2, timestamp=2021-04-18 00:00:00, count=13),
</span></span><span class="line"><span class="cl">  Clones(uniques=9, timestamp=2021-04-19 00:00:00, count=23),
</span></span><span class="line"><span class="cl">  Clones(uniques=3, timestamp=2021-04-20 00:00:00, count=3)]}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">In [17]: repo0.get_views_traffic()
</span></span><span class="line"><span class="cl">Out[17]:
</span></span><span class="line"><span class="cl">{&#39;count&#39;: 6019,
</span></span><span class="line"><span class="cl"> &#39;uniques&#39;: 1134,
</span></span><span class="line"><span class="cl"> &#39;views&#39;: [View(uniques=52, timestamp=2021-04-06 00:00:00, count=169),
</span></span><span class="line"><span class="cl">  View(uniques=143, timestamp=2021-04-07 00:00:00, count=569),
</span></span><span class="line"><span class="cl">  View(uniques=152, timestamp=2021-04-08 00:00:00, count=635),
</span></span><span class="line"><span class="cl">  View(uniques=134, timestamp=2021-04-09 00:00:00, count=648),
</span></span><span class="line"><span class="cl">  View(uniques=81, timestamp=2021-04-10 00:00:00, count=318),
</span></span><span class="line"><span class="cl">  View(uniques=42, timestamp=2021-04-11 00:00:00, count=197),
</span></span><span class="line"><span class="cl">  View(uniques=127, timestamp=2021-04-12 00:00:00, count=515),
</span></span><span class="line"><span class="cl">  View(uniques=149, timestamp=2021-04-13 00:00:00, count=580),
</span></span><span class="line"><span class="cl">  View(uniques=134, timestamp=2021-04-14 00:00:00, count=762),
</span></span><span class="line"><span class="cl">  View(uniques=141, timestamp=2021-04-15 00:00:00, count=385),
</span></span><span class="line"><span class="cl">  View(uniques=113, timestamp=2021-04-16 00:00:00, count=284),
</span></span><span class="line"><span class="cl">  View(uniques=48, timestamp=2021-04-17 00:00:00, count=168),
</span></span><span class="line"><span class="cl">  View(uniques=35, timestamp=2021-04-18 00:00:00, count=135),
</span></span><span class="line"><span class="cl">  View(uniques=124, timestamp=2021-04-19 00:00:00, count=492),
</span></span><span class="line"><span class="cl">  View(uniques=59, timestamp=2021-04-20 00:00:00, count=162)]}
</span></span></code></pre></td></tr></table>
</div>
</div><p>除了repo的 <code>clone</code>, <code>view</code>数据，我们还可以获取到 release的数据:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">In [31]: for rel in repo0.get_releases():
</span></span><span class="line"><span class="cl">    ...:     print(rel)
</span></span><span class="line"><span class="cl">GitRelease(title=&#34;Nebula Graph v1.2.1&#34;)
</span></span><span class="line"><span class="cl">GitRelease(title=&#34;Nebula Graph v1.2.0&#34;)
</span></span><span class="line"><span class="cl">GitRelease(title=&#34;Nebula Graph V1.1.0&#34;)
</span></span><span class="line"><span class="cl">GitRelease(title=&#34;Nebula Graph v1.0.1&#34;)
</span></span><span class="line"><span class="cl">GitRelease(title=&#34;V1.0.0 GA&#34;)
</span></span><span class="line"><span class="cl">GitRelease(title=&#34;Nebula Graph v1.0.0-RC4&#34;)
</span></span><span class="line"><span class="cl">GitRelease(title=&#34;Nebula Graph v1.0.0-RC3&#34;)
</span></span><span class="line"><span class="cl">GitRelease(title=&#34;Nebula Graph Release v1.0.0-RC2&#34;)
</span></span><span class="line"><span class="cl">GitRelease(title=&#34;Nebula Graph v1.0.0-rc1&#34;)
</span></span><span class="line"><span class="cl">GitRelease(title=&#34;Nebula Graph v1.0.0-beta&#34;)
</span></span><span class="line"><span class="cl">GitRelease(title=&#34;Nebula Graph v0.1.0&#34;)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 每一个 release 对应一个 git tag，其中会有一个或者多个供下载的 asset
</span></span><span class="line"><span class="cl">In [33]: release_v121 = rels[0]
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">In [34]: release_v121.tag_name
</span></span><span class="line"><span class="cl">Out[34]: &#39;v1.2.1&#39;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">In [35]: list(release_121.get_assets())
</span></span><span class="line"><span class="cl">Out[35]:
</span></span><span class="line"><span class="cl">[GitReleaseAsset(url=&#34;https://api.github.com/repos/vesoft-inc/nebula/releases/assets/35056357&#34;),
</span></span><span class="line"><span class="cl"> GitReleaseAsset(url=&#34;https://api.github.com/repos/vesoft-inc/nebula/releases/assets/35056361&#34;),
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl"> GitReleaseAsset(url=&#34;https://api.github.com/repos/vesoft-inc/nebula/releases/assets/35056456&#34;)]
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 每一个assset 的下载量和其他metadata也是可以获取的
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">In [40]: assets[0].browser_download_url
</span></span><span class="line"><span class="cl">Out[40]: &#39;https://github.com/vesoft-inc/nebula/releases/download/v1.2.1/nebula-1.2.1.el6-5.x86_64.rpm&#39;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">In [41]: assets[0].download_count
</span></span><span class="line"><span class="cl">Out[41]: 45
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">In [43]: assets[0].name
</span></span><span class="line"><span class="cl">Out[43]: &#39;nebula-1.2.1.el6-5.x86_64.rpm&#39;
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>Docker Hub API, ref <a href="https://github.com/amalfra/docker-hub/blob/master/src/libs/docker_hub_client.py" target="_blank" rel="noopener noreferrer">https://github.com/amalfra/docker-hub/blob/master/src/libs/docker_hub_client.py</a>
这里我们服用了 docker-hub 这个开源小项目中的一个库 <code>docker_hub_client.py</code> 来作为 Docker Hub API的 python wrapper</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="c1"># 实例化 client
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">In</span><span class="w"> </span><span class="p">[</span><span class="mi">47</span><span class="p">]:</span><span class="w"> </span><span class="n">dh_client</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">DockerHubClient</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1"># 获取 `vesoft`之下的repo
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">In</span><span class="w"> </span><span class="p">[</span><span class="mi">48</span><span class="p">]:</span><span class="w"> </span><span class="n">dh_r</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">dh_client</span><span class="p">.</span><span class="nf">get_repos</span><span class="p">(</span><span class="s2">&#34;vesoft&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">In</span><span class="w"> </span><span class="p">[</span><span class="mi">54</span><span class="p">]:</span><span class="w"> </span><span class="n">dh_r</span><span class="p">[</span><span class="s1">&#39;code&#39;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">Out</span><span class="p">[</span><span class="mi">54</span><span class="p">]:</span><span class="w"> </span><span class="mi">200</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">In</span><span class="w"> </span><span class="p">[</span><span class="mi">55</span><span class="p">]:</span><span class="w"> </span><span class="n">dh_r</span><span class="p">[</span><span class="s1">&#39;content&#39;</span><span class="p">].</span><span class="k">keys</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">Out</span><span class="p">[</span><span class="mi">55</span><span class="p">]:</span><span class="w"> </span><span class="nf">dict_keys</span><span class="p">([</span><span class="s1">&#39;count&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;next&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;previous&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;results&#39;</span><span class="p">])</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1"># 可以看到这一个返回的API里就有所有（如果多的话是需要翻页的）的 image的 start_count, pull_count的数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">In</span><span class="w"> </span><span class="p">[</span><span class="mi">58</span><span class="p">]:</span><span class="w"> </span><span class="n">dh_r</span><span class="p">[</span><span class="s1">&#39;content&#39;</span><span class="p">][</span><span class="s1">&#39;results&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">Out</span><span class="p">[</span><span class="mi">58</span><span class="p">]:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">{</span><span class="s1">&#39;user&#39;</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;vesoft&#39;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="s1">&#39;name&#39;</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;nebula-graphd&#39;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="s1">&#39;namespace&#39;</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;vesoft&#39;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="s1">&#39;repository_type&#39;</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;image&#39;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="s1">&#39;status&#39;</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="s1">&#39;description&#39;</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;Nebula Graph Graphd Service Image. https://github.com/vesoft-inc/nebula&#39;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="s1">&#39;is_private&#39;</span><span class="p">:</span><span class="w"> </span><span class="no">False</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="s1">&#39;is_automated&#39;</span><span class="p">:</span><span class="w"> </span><span class="no">False</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="s1">&#39;can_edit&#39;</span><span class="p">:</span><span class="w"> </span><span class="no">False</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="s1">&#39;star_count&#39;</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="s1">&#39;pull_count&#39;</span><span class="p">:</span><span class="w"> </span><span class="mi">223494</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="s1">&#39;last_updated&#39;</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;2021-04-19T19:04:20.324010Z&#39;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="s1">&#39;is_migrated&#39;</span><span class="p">:</span><span class="w"> </span><span class="no">False</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="s1">&#39;collaborator_count&#39;</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="s1">&#39;affiliation&#39;</span><span class="p">:</span><span class="w"> </span><span class="n">None</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="s1">&#39;hub_user&#39;</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;vesoft&#39;</span><span class="err">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="实现" class="headerLink">
    <a href="#%e5%ae%9e%e7%8e%b0" class="header-mark"></a>2 实现</h2><h3 id="计划任务调度-with-cloud-scheduler" class="headerLink">
    <a href="#%e8%ae%a1%e5%88%92%e4%bb%bb%e5%8a%a1%e8%b0%83%e5%ba%a6-with-cloud-scheduler" class="header-mark"></a>2.1 计划任务调度 with Cloud Scheduler</h3><p>前边提到，<code>Scheduler --&gt; Functions</code> 中间是通过消息队列实现的可靠事件触发，我们需要在 Google Cloud Pub/Sub里创建一个订阅消息，后边我们会把这个订阅消息从 Scheduler 定期发送，并且在 Function创建的时候定义为触发条件。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ gcloud pubsub topics create nebula-insights-cron-topic
</span></span><span class="line"><span class="cl">$ gcloud pubsub subscriptions create cron-sub --topic nebula-insights-cron-topic
</span></span></code></pre></td></tr></table>
</div>
</div><p>任务的创建非常直接，在 <a href="https://console.cloud.google.com/cloudscheduler" target="_blank" rel="noopener noreferrer">Scheduler Web Console</a> 上直接图形化操作就可以了，记得要选择触发 Pub/Sub 消息为 <code>cron-sub</code>，消息主题为 <code>nebula-insights-cron-topic</code></p>
<h3 id="etl-worker-with-python--google-functions" class="headerLink">
    <a href="#etl-worker-with-python--google-functions" class="header-mark"></a>2.2 ETL Worker with Python + Google Functions</h3><p>当 Scheduler 每天定时发送消息之后，接收方就是我们要定义的 Google Functions了，它的定义如图
第一步，选择它的触发类型为 Pub/Sub，同时要定义消息的主题和名字。</p>
<p><a class="lightgallery" href="/nebula-insights/create_functions.png" title="create_functions" data-thumbnail="/nebula-insights/create_functions.png">
        
    </a></p>
<p>第二步就是把代码放进去:</p>
<p><a class="lightgallery" href="/nebula-insights/create_functions_code.png" title="create_functions_code" data-thumbnail="/nebula-insights/create_functions_code.png">
        
    </a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">                                              ┌─────────────────────┐
</span></span><span class="line"><span class="cl">                                              │                     │
</span></span><span class="line"><span class="cl">   ┌──────────────────────────┐   ┌───────────►  GitHub API Server  │
</span></span><span class="line"><span class="cl">   │                          │   │           │                     │
</span></span><span class="line"><span class="cl">   │  Google Cloud Functions  ◄───►           └─────────────────────┘
</span></span><span class="line"><span class="cl">   │                          │   │
</span></span><span class="line"><span class="cl">   └────────────▲─────────────┘   │           ┌─────────────────────────┐
</span></span><span class="line"><span class="cl">                │                 │           │                         │
</span></span><span class="line"><span class="cl">                │                 ├───────────►  Docker Hub API Server  │
</span></span><span class="line"><span class="cl">   ┌────────────▼────────────┐    │           │                         │
</span></span><span class="line"><span class="cl">   │                         │    │           │                         │
</span></span><span class="line"><span class="cl">   │  Google Cloud Storage   │    │           └─────────────────────────┘
</span></span><span class="line"><span class="cl">   │                         │    ...
</span></span><span class="line"><span class="cl">   └────────────┬────────────┘    │           ┌──────────────────┐
</span></span><span class="line"><span class="cl">                │                 │           │                  │
</span></span><span class="line"><span class="cl">                │                 └───────────►  Aliyun OSS API  │
</span></span><span class="line"><span class="cl">      ┌─────────▼─────────┐                   │                  │
</span></span><span class="line"><span class="cl">      │                   │                   └──────────────────┘
</span></span><span class="line"><span class="cl">      │  Google BigQuery  │
</span></span><span class="line"><span class="cl">      │                   │
</span></span><span class="line"><span class="cl">      └───────────────────┘
</span></span></code></pre></td></tr></table>
</div>
</div><p>这部分的逻辑就是通过前边分析了的API取得信息，然后组装成需要的格式存到 Cloud Storage(对象存储），然后再导入到 BigQuery（数仓）之中，全部代码在GitHub上:
<a href="https://github.com/wey-gu/nebula-insights/blob/main/functions/data-fetching-0/main.py" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/nebula-insights/blob/main/functions/data-fetching-0/main.py</a>
另外，可以参考这个官方教程 <a href="https://cloud.google.com/scheduler/docs/tut-pub-sub" target="_blank" rel="noopener noreferrer">https://cloud.google.com/scheduler/docs/tut-pub-sub</a></p>
<h3 id="数仓表结构定义" class="headerLink">
    <a href="#%e6%95%b0%e4%bb%93%e8%a1%a8%e7%bb%93%e6%9e%84%e5%ae%9a%e4%b9%89" class="header-mark"></a>2.3 数仓表结构定义</h3><p>数仓的表结构比较直接，schema的图贴在下边了，值得注意的是，BigQuery支持嵌套的表结构（而不像一般关系型数据库那样需要把这样的逻辑结构用辅助表来表示），在我们这个场景下非常方便，比如release表中的 assets的三个嵌套字段。
<a class="lightgallery" href="/nebula-insights/bigquery_schema.png" title="bigquery_schema|475x412" data-thumbnail="/nebula-insights/bigquery_schema.png">
        
    </a></p>
<p>更详细的信息可以参考GitHub上的介绍和代码: <a href="https://github.com/wey-gu/nebula-insights#data-etl-bigquery-and-gcs" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/nebula-insights#data-etl-bigquery-and-gcs</a></p>
<h3 id="数据可视化" class="headerLink">
    <a href="#%e6%95%b0%e6%8d%ae%e5%8f%af%e8%a7%86%e5%8c%96" class="header-mark"></a>2.4 数据可视化</h3><p>到这里，我们就可以自动在BigQuery里存有每天收集的不同来源的统计数据啦，有了它，我们可以借助 Data Studio 来生成各式各样的可视化表示。</p>
<p>参考 <a href="https://cloud.google.com/bigquery/docs/visualize-data-studio" target="_blank" rel="noopener noreferrer">https://cloud.google.com/bigquery/docs/visualize-data-studio</a></p>
<h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>3 总结</h2><p>这样，我们实际上不需要任何认为维护的成本和投入，就搭建了一整个数据的流水线，并且只需要按照数据用量付费，在我们的数据量下，及时考虑未来增加数十个新的量度的收集，我们依然没有达到需要付费的用量，是不是很Cool？
因为数据同时存在于对象存储与数仓里，我们可以方便随时把数据导入任意其他平台上。</p>
<p>BigQuery还有一些非常常用的，自带的机器学习的功能，只需要写一个SQL-Like的query就能触发然后获得预测结果，如果我们用到这些功能的话也会回到 datawhale 为同学们继续分享哈。</p>
<p>第一次做数据工程方面的分享，如果有错误的地方欢迎大家不吝指出哈~~</p>
<p>谢谢！</p>]]></description>
</item><item>
    <title>用图数据库可视化探索 Chia Network 区块链数据</title>
    <link>https://siwei.io/nebula-chia/</link>
    <pubDate>Wed, 26 May 2021 21:17:04 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/nebula-chia/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/nebula-chia/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>这篇文章里，我全网首次地分析了 Chia Network 的全链数据，并做了将全链数据导入图数据库：Nebula Graph 之中的尝试，从而可视化地探索了 Chia 图中数据之间的关联关系。</p>
<p>我把涉及的代码开源在了这里：https://github.com/wey-gu/nebula-chia</p>
</blockquote>
<h2 id="chia-是什么" class="headerLink">
    <a href="#chia-%e6%98%af%e4%bb%80%e4%b9%88" class="header-mark"></a>1 Chia 是什么?</h2><p>Chia Network 是由 BitTorrent 的作者 Bram Cohen 的团队在 2017 年创建的区块链项目。</p>
<h3 id="为什么再搞一个区块链" class="headerLink">
    <a href="#%e4%b8%ba%e4%bb%80%e4%b9%88%e5%86%8d%e6%90%9e%e4%b8%80%e4%b8%aa%e5%8c%ba%e5%9d%97%e9%93%be" class="header-mark"></a>1.1 为什么再搞一个区块链?</h3><p>Chia 用了全新的中本聪共识算法，这个算法通过不允许并行计算，让挖矿（Proof of Work）所需算力和能耗降到非常低，这使得超大组织、玩家没法像在其他的区块链项目那样有算力的绝对优势，也一定程度上规避了能源的浪费。</p>
<h3 id="如何连接chia" class="headerLink">
    <a href="#%e5%a6%82%e4%bd%95%e8%bf%9e%e6%8e%a5chia" class="header-mark"></a>1.2 如何连接Chia?</h3><p>我们可以通过 Chia Network 的客户端来访问它，这个客户端是 Electron + Python 的程序，天然跨平台，既有 GUI 又有 CLI 的方式。</p>
<h4 id="安装" class="headerLink">
    <a href="#%e5%ae%89%e8%a3%85" class="header-mark"></a>1.2.1 安装</h4><p>只需要按照官方的 Guide 来下载安装就好， <a href="https://github.com/Chia-Network/chia-blockchain/wiki/INSTALL" target="_blank" rel="noopener noreferrer">https://github.com/Chia-Network/chia-blockchain/wiki/INSTALL</a>，我在 M1 Mac 下安装的时候脚本出了点小问题，大概是因为拉取二进制 wheel 文件网络出问题走到了编译 wheel的逻辑，而那里是依赖 <code>cargo</code>的，如果大家遇到了这个问题，可以提前手动安装一下 rust，或者 cherry-pick 我的这个 <a href="https://github.com/Chia-Network/chia-blockchain/pull/3789" target="_blank" rel="noopener noreferrer">PR</a> 。</p>
<h4 id="运行" class="headerLink">
    <a href="#%e8%bf%90%e8%a1%8c" class="header-mark"></a>1.2.2 运行</h4><ul>
<li>按照官方 guide，比如 macOS 来说，最后一步执行<code>npm run electron &amp;</code> 就是运行它的GUI客户端。</li>
<li>如果大家像我一样喜欢 CLI，直接在执行完 <code>. ./activate</code> 之后就可以 <code>chia --help</code>了哈☺，里边有只启动部分服务的方式（相比 GUI 启动所有来说)。</li>
</ul>
<p>在运行之后，如果你的网络不是多层 NAT 的那种，理论上您可以连到 <code>mainnet</code> 并且自动和主链同步数据了，如果您是第二次运行，连接主链，一开始可能有一阵子同步的<code>block</code> 数是不变的，也没有 <code>peer</code> 连过来，不必惊慌，等一下就好了。</p>
<blockquote>
<p>Tips:</p>
<ul>
<li>第一次连到 Chia Network 的同学们，客户端会自动生成一个钱包，及的保存那一串词，它们就是你的私钥哦。</li>
<li>万一，如果真的连不上的话，可能需要在路由上配置，<a href="https://www.homenethowto.com/ports-and-nat/upnp-automatic-port-forward/" target="_blank" rel="noopener noreferrer">UPnP</a>，防火墙要允许 8444。</li>
</ul>
</blockquote>
<h4 id="访问-chia-的数据" class="headerLink">
    <a href="#%e8%ae%bf%e9%97%ae-chia-%e7%9a%84%e6%95%b0%e6%8d%ae" class="header-mark"></a>1.2.3 访问 Chia 的数据</h4><p>Chia 的客户端把数据存在了几个 SQLite 数据库里，它们的路径是我们安装客户端的用户的家目录：<code>~/.chia/mainnet</code></p>
<p>下边就是运行起来 Chia 之后生成的主要的两个数据库的二进制文件：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">~/.chia/mainnet/db 
</span></span><span class="line"><span class="cl">❯ ll -h
</span></span><span class="line"><span class="cl">total 4350416
</span></span><span class="line"><span class="cl">-rw-r--r--  1 weyl  staff   2.0G May  6 12:06 blockchain_v1_mainnet.sqlite
</span></span><span class="line"><span class="cl">-rw-r--r--  1 weyl  staff    64K May  6 11:17 blockchain_v1_mainnet.sqlite-shm
</span></span><span class="line"><span class="cl">-rw-r--r--  1 weyl  staff    20M May  6 12:10 blockchain_v1_mainnet.sqlite-wal
</span></span><span class="line"><span class="cl">-rw-r--r--  1 weyl  staff   1.8M May  6 11:46 peer_table_node.sqlite
</span></span><span class="line"><span class="cl">-rw-r--r--  1 weyl  staff    32K May  5 17:30 peer_table_node.sqlite-shm
</span></span><span class="line"><span class="cl">-rw-r--r--  1 weyl  staff   5.4M May  6 11:46 peer_table_node.sqlite-wal
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">~/.chia/mainnet/wallet/db
</span></span><span class="line"><span class="cl">❯ ll -h 
</span></span><span class="line"><span class="cl">total 3055848
</span></span><span class="line"><span class="cl">-rw-r--r--  1 weyl  staff   1.4G May  7 15:32 blockchain_wallet_v1_mainnet_903996200.sqlite
</span></span><span class="line"><span class="cl">-rw-r--r--  1 weyl  staff    32K May  7 15:24 blockchain_wallet_v1_mainnet_903996200.sqlite-shm
</span></span><span class="line"><span class="cl">-rw-r--r--  1 weyl  staff   4.0M May  7 15:32 blockchain_wallet_v1_mainnet_903996200.sqlite-wal
</span></span><span class="line"><span class="cl">-rw-r--r--  1 weyl  staff    16K May  7 15:24 wallet_peers.sqlite
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后，我们可以先用 SQLite Browser，一个 SQlite 数据库（文件）的浏览器来看看它。</p>
<p>SQlite 浏览器的官网是 <a href="https://sqlitebrowser.org/" target="_blank" rel="noopener noreferrer">https://sqlitebrowser.org/</a> 。在下载，安装之后，我们可以通过点击 <code>Open Database/打开数据库</code> 选择浏览上边列出来的两个 <code>.sqlite</code> 扩展名的数据库文件。</p>
<p>打开数据库之后，我们可以选择第一个标签 <code>Database Schema</code> 来看看表的结构。</p>
<p><a class="lightgallery" href="/nebula-chia/SQLite_Schema.png" title="SQLite_Schema" data-thumbnail="/nebula-chia/SQLite_Schema.png">
        
    </a></p>
<p>我们还能像类似于 Excel 一样去看表的数据，还可以 Filter/过滤、Sort/排序任意列。</p>
<p><a class="lightgallery" href="/nebula-chia/SQLite_Browse_Data.png" title="SQLite_Browse_Data" data-thumbnail="/nebula-chia/SQLite_Browse_Data.png">
        
    </a></p>
<p>下一部分，我们来简单看看表里的数据。</p>
<blockquote>
<p>Tips:</p>
<p>这里边，<code>~/.chia/mainnet/wallet</code> 和裸目录 <code>~/.chia/mainnet </code> 下边的 <code>db</code> 里分别都有表文件，他们的信息是有重复的，大家可以分别打开看看哦，即使是相同的表的名字，比如 <code>block_record</code> 内里的信息也略有差别，如果大家知道为什么有这样的差别，欢迎浏览告诉大家哈，可能要仔细研究一下客户端、钱包等代码才行，幸运的是，它们相对比较好阅读，是 Python 写的： <a href="https://github.com/Chia-Network/chia-blockchain" target="_blank" rel="noopener noreferrer">https://github.com/Chia-Network/chia-blockchain</a> 。</p>
</blockquote>
<h2 id="分析-chia-的数据" class="headerLink">
    <a href="#%e5%88%86%e6%9e%90-chia-%e7%9a%84%e6%95%b0%e6%8d%ae" class="header-mark"></a>2 分析 Chia 的数据</h2><p>如果大家仔细看了上边表结构定义的截图，就能注意到一些表的主要信息是嵌套二进制 KV Byte，所以只从 SQLite 并不能看到所有 Chia 的数据，所以我们需要（用一个编程语言来）读取表里的 Byte。</p>
<p>幸运的是，这件事儿因为 Chia 是开源的，而且是 Python 的代码，使得我们可以直接交互式的做。</p>
<p>我花了一点点时间在 Chia 客户端代码里找到了需要的封装类，借助它，可以比较方便的分析 Chia 客户端在本地的全链数据。</p>
<p>如果您不感兴趣细节，可以直接看我分析的结论。</p>
<p>结论之后，我也给大家演示一下是怎么读取它们的。</p>
<h3 id="tldr-结论" class="headerLink">
    <a href="#tldr-%e7%bb%93%e8%ae%ba" class="header-mark"></a>2.1 TL;DR, 结论</h3><p>我们可以从表中读取到区块链记录（Block Record ），Chia 币记录（Coin Record）。</p>
<p>从区块记录中，我们可以看到关键的涉及交易的信息：</p>
<ul>
<li>关联的 Coin ，关联的 Puzzle（地址），Coin 的值(Amount)</li>
</ul>
<p>从币记录中，我们可以看到关键的涉及区块的信息：</p>
<ul>
<li>生成这个 Coin 所在区块链里的索引高度（Confirmed Index）</li>
<li>如果这个记录是花费 Coin 的，花费它的索引高度（Spent Index）</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">                                                   ┌──────────────────────┐
</span></span><span class="line"><span class="cl">┌────────────────────────────────────────┐         │                      │
</span></span><span class="line"><span class="cl">│                                        │         │    Coin Record       │
</span></span><span class="line"><span class="cl">│   Block Record                         │         │                      │
</span></span><span class="line"><span class="cl">│                                        │         │     Coin Name        │
</span></span><span class="line"><span class="cl">│    Height ◄────────────────────────────┼─┐       │                      │
</span></span><span class="line"><span class="cl">│                                        │ │     ┌─┼───► Puzzle           │
</span></span><span class="line"><span class="cl">│    Header                              │ │     │ │                      │
</span></span><span class="line"><span class="cl">│                                        │ │     ├─┼───► Coin Parent      │
</span></span><span class="line"><span class="cl">│    Prev Header                         │ │     │ │                      │
</span></span><span class="line"><span class="cl">│                                        │ │     ├─┼───► Amount           │
</span></span><span class="line"><span class="cl">│    Block Body                          │ │     │ │                      │
</span></span><span class="line"><span class="cl">│      farmer_puzzle_hash                │ │     │ │     Time Stamp       │
</span></span><span class="line"><span class="cl">│      fees                              │ │     │ │                      │
</span></span><span class="line"><span class="cl">│      pool_puzzle_hash                  │ └─────┼─┼─┬─  Confirmed Index  │
</span></span><span class="line"><span class="cl">│      prev_transaction_block_hash       │       │ │ │                    │
</span></span><span class="line"><span class="cl">│      prev_transaction_block_height     │       │ │ └─  Spent Index      │
</span></span><span class="line"><span class="cl">│      transactions_info  ───────────────┼───────┘ │                      │
</span></span><span class="line"><span class="cl">│ ┌─── is_transaction_block              │         │     Coinbase         │
</span></span><span class="line"><span class="cl">│ │    sub_epoch_summary ────────────────┼───────┐ │                      │
</span></span><span class="line"><span class="cl">│ │                                      │       │ └─ ────────────────────┘
</span></span><span class="line"><span class="cl">│ │  is Peak                             │       │
</span></span><span class="line"><span class="cl">│ └──is Block                            │       │ ┌─────────────────────┐
</span></span><span class="line"><span class="cl">│                                        │       │ │                     │
</span></span><span class="line"><span class="cl">└────────────────────────────────────────┘       └─┼─► Sub Epoch Segment │
</span></span><span class="line"><span class="cl">                                                   │                     │
</span></span><span class="line"><span class="cl">                                                   └─────────────────────┘
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="准备" class="headerLink">
    <a href="#%e5%87%86%e5%a4%87" class="header-mark"></a>2.2 准备</h3><p>因为安装客户端之后，我们本地实际上已经有了相关的 Python 环境和依赖，只需要在里边跑起来就好。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 注意，我们要 cd 到之前安装客户端时候克隆的仓库。</span>
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> chia-blockchain
</span></span><span class="line"><span class="cl"><span class="c1"># source activate 脚本来切换到仓库安装时候创建的 Python 虚拟环境，并进到 IPython 里。</span>
</span></span><span class="line"><span class="cl"><span class="nb">source</span> venv/bin/activate <span class="o">&amp;&amp;</span> pip install ipython <span class="o">&amp;&amp;</span> ipython
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后试着导入客户端里边带有的 Python 的 Chia 的封装类试试看。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="kn">import</span> <span class="nn">sqlite3</span>
</span></span><span class="line"><span class="cl">   <span class="o">...</span><span class="p">:</span> <span class="kn">from</span> <span class="nn">chia.consensus.block_record</span> <span class="kn">import</span> <span class="n">BlockRecord</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 导入成功，没有报错</span>
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="err">!</span><span class="n">pwd</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 我的安装克隆目录</span>
</span></span><span class="line"><span class="cl"><span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">weyl</span><span class="o">/</span><span class="n">chia</span><span class="o">-</span><span class="n">blockchain</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>恭喜你做好了准备，我们看看 Block Record 里都有什么。</p>
<h3 id="chia-链的数据" class="headerLink">
    <a href="#chia-%e9%93%be%e7%9a%84%e6%95%b0%e6%8d%ae" class="header-mark"></a>2.3 Chia 链的数据</h3><h4 id="区块记录" class="headerLink">
    <a href="#%e5%8c%ba%e5%9d%97%e8%ae%b0%e5%bd%95" class="header-mark"></a>2.3.1 区块记录</h4><p>在上一步的 <code>IPython</code> 窗口下。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># 注意，这里的路径的前缀是我们自己的家目录，不同操作系统，不同的用户都会有所不同。</span>
</span></span><span class="line"><span class="cl"><span class="n">chia_db_path</span> <span class="o">=</span> <span class="s2">&#34;/Users/weyl/.chia/mainnet/db/blockchain_v1_mainnet.sqlite&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">cur</span> <span class="o">=</span> <span class="n">con</span><span class="o">.</span><span class="n">cursor</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 这里我们取第 201645 高的区块</span>
</span></span><span class="line"><span class="cl"><span class="n">rows</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">cur</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s1">&#39;SELECT * FROM block_records WHERE height = 201645&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 这里 0 表示 SELECT 结果的第一行，3 表示在 BlockRecord 这个表里边，Block 的二进制 BLOB 是第四列，参考本章底部的表定义部分</span>
</span></span><span class="line"><span class="cl"><span class="n">block_records_201645</span> <span class="o">=</span> <span class="n">BlockRecord</span><span class="o">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="n">rows</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">3</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="nb">dir</span><span class="p">(</span><span class="n">block_records_201645</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 可以查看一些属性 is_transaction_block，timestamp，reward_claims_incorporated</span>
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">174</span><span class="p">]:</span> <span class="n">block_records_201645</span><span class="o">.</span><span class="n">is_transaction_block</span>
</span></span><span class="line"><span class="cl"><span class="n">Out</span><span class="p">[</span><span class="mi">174</span><span class="p">]:</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">182</span><span class="p">]:</span> <span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">183</span><span class="p">]:</span> <span class="n">datetime</span><span class="o">.</span><span class="n">fromtimestamp</span><span class="p">(</span><span class="n">block_records_201645</span><span class="o">.</span><span class="n">timestamp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">Out</span><span class="p">[</span><span class="mi">183</span><span class="p">]:</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2021</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">29</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">190</span><span class="p">]:</span> <span class="n">block_records_201645</span><span class="o">.</span><span class="n">reward_claims_incorporated</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">to_json_dict</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">Out</span><span class="p">[</span><span class="mi">190</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span><span class="s1">&#39;parent_coin_info&#39;</span><span class="p">:</span> <span class="s1">&#39;0xccd5bb71183532bff220ba46c268991a000000000000000000000000000313ab&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"> <span class="s1">&#39;puzzle_hash&#39;</span><span class="p">:</span> <span class="s1">&#39;0xbbb014f41d88c74b78501b36e4863d3382bfda9ae3c4d30a1b6df72b962502b6&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"> <span class="s1">&#39;amount&#39;</span><span class="p">:</span> <span class="mi">1750000000000</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 可以快速 print 看大部分信息</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">block_records_201645</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>block_records_201645</code> 的打印结果如下。</p>
<blockquote>
<p>注意，这里我截断了一些数据</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span><span class="err">&#39;challenge_block_info_hash&#39;:</span> <span class="err">&#39;0x4a562f1ffa7a06fe76b1df74dbdd6bdcfbf63139a6f1fc3291c606d7c976abf6&#39;,</span>
</span></span><span class="line"><span class="cl"> <span class="err">&#39;challenge_vdf_output&#39;:</span> <span class="err">{&#39;data&#39;:</span> <span class="err">&#39;0x0200a6b38d6b58d17129d71737088772561f22a44ef302fe45a70a763b878f998abfe35946df720bcb5d78e214b667bce801d597b46c867928c4b8926c342375a961f36cd63ec698bc25e5ce48c45d9a2074eded0e42d24dd1b50a59e699f671f0900100&#39;</span><span class="p">}</span><span class="err">,</span>
</span></span><span class="line"><span class="cl"> <span class="err">&#39;deficit&#39;:</span> <span class="mi">16</span><span class="err">,</span>
</span></span><span class="line"><span class="cl"> <span class="err">&#39;farmer_puzzle_hash&#39;:</span> <span class="err">&#39;</span><span class="mi">0</span><span class="err">x</span><span class="mi">4</span><span class="err">bc</span><span class="mi">6435</span><span class="err">b</span><span class="mi">409</span><span class="err">bcbabe</span><span class="mi">53870</span><span class="err">dae</span><span class="mi">0</span><span class="err">f</span><span class="mi">03755</span><span class="err">f</span><span class="mi">6</span><span class="err">aabb</span><span class="mi">4594</span><span class="err">c</span><span class="mi">5915</span><span class="err">ec</span><span class="mi">983</span><span class="err">acf</span><span class="mi">12</span><span class="err">a</span><span class="mi">5</span><span class="err">d</span><span class="mi">1</span><span class="err">fba&#39;,</span>
</span></span><span class="line"><span class="cl"> <span class="err">&#39;fees&#39;:</span> <span class="mi">0</span><span class="err">,</span>
</span></span><span class="line"><span class="cl"> <span class="err">&#39;finished_challenge_slot_hashes&#39;:</span> <span class="p">[</span><span class="err">&#39;</span><span class="mi">0</span><span class="err">x</span><span class="mi">2</span><span class="err">b</span><span class="mi">1</span><span class="err">a</span><span class="mi">7</span><span class="err">b</span><span class="mi">4859</span><span class="err">a</span><span class="mi">8</span><span class="err">d</span><span class="mi">3597</span><span class="err">b</span><span class="mf">8e6</span><span class="err">cbe</span><span class="mi">3</span><span class="err">b</span><span class="mi">27</span><span class="err">ab</span><span class="mi">97212</span><span class="err">be</span><span class="mi">8</span><span class="err">b</span><span class="mf">19e6867</span><span class="err">f</span><span class="mi">2</span><span class="err">a</span><span class="mi">4</span><span class="err">d</span><span class="mi">0</span><span class="err">eef</span><span class="mi">26</span><span class="err">c</span><span class="mi">36340</span><span class="err">f&#39;</span><span class="p">]</span><span class="err">,</span>
</span></span><span class="line"><span class="cl"> <span class="err">&#39;finished_infused_challenge_slot_hashes&#39;:</span> <span class="p">[</span><span class="err">&#39;</span><span class="mi">0</span><span class="err">xd</span><span class="mi">0185</span><span class="err">a</span><span class="mi">6493</span><span class="err">b</span><span class="mi">10</span><span class="err">d</span><span class="mf">84e696</span><span class="err">c</span><span class="mi">6</span><span class="err">fc</span><span class="mi">55</span><span class="err">ec</span><span class="mf">1920e8</span><span class="err">a</span><span class="mi">96791</span><span class="err">a</span><span class="mi">604</span><span class="err">dedfe</span><span class="mi">77635</span><span class="err">da</span><span class="mi">460</span><span class="err">f</span><span class="mi">354</span><span class="err">d&#39;</span><span class="p">]</span><span class="err">,</span>
</span></span><span class="line"><span class="cl"> <span class="err">&#39;finished_reward_slot_hashes&#39;:</span> <span class="p">[</span><span class="err">&#39;</span><span class="mi">0</span><span class="err">xe</span><span class="mi">2</span><span class="err">bcbf</span><span class="mi">560471131</span><span class="err">a</span><span class="mi">7</span><span class="err">fb</span><span class="mi">87</span><span class="err">ffe</span><span class="mi">3</span><span class="err">f</span><span class="mi">9</span><span class="err">ddde</span><span class="mi">03166</span><span class="err">a</span><span class="mi">9</span><span class="err">b</span><span class="mi">0092</span><span class="err">a</span><span class="mi">50</span><span class="err">f</span><span class="mi">1</span><span class="err">ed</span><span class="mi">1599715857</span><span class="err">c</span><span class="mi">365</span><span class="err">&#39;</span><span class="p">]</span><span class="err">,</span>
</span></span><span class="line"><span class="cl"> <span class="err">&#39;header_hash&#39;:</span> <span class="err">&#39;</span><span class="mi">0</span><span class="err">x</span><span class="mf">2791729e1</span><span class="err">c</span><span class="mi">914</span><span class="err">f</span><span class="mi">9</span><span class="err">c</span><span class="mi">3908</span><span class="err">a</span><span class="mi">0</span><span class="err">ad</span><span class="mi">895</span><span class="err">b</span><span class="mi">5846</span><span class="err">c</span><span class="mi">86</span><span class="err">fc</span><span class="mf">4e207</span><span class="err">cc</span><span class="mf">463820123e9</span><span class="err">a</span><span class="mi">299</span><span class="err">c</span><span class="mi">39</span><span class="err">f</span><span class="mi">3</span><span class="err">&#39;,</span>
</span></span><span class="line"><span class="cl"> <span class="err">&#39;height&#39;:</span> <span class="mi">201645</span><span class="err">,</span>
</span></span><span class="line"><span class="cl"> <span class="err">&#39;infused_challenge_vdf_output&#39;:</span> <span class="err">None,</span>
</span></span><span class="line"><span class="cl"> <span class="err">&#39;overflow&#39;:</span> <span class="err">True,</span>
</span></span><span class="line"><span class="cl"> <span class="err">&#39;pool_puzzle_hash&#39;:</span> <span class="err">&#39;</span><span class="mi">0</span><span class="err">x</span><span class="mi">4</span><span class="err">bc</span><span class="mi">6435</span><span class="err">b</span><span class="mi">409</span><span class="err">bcbabe</span><span class="mi">53870</span><span class="err">dae</span><span class="mi">0</span><span class="err">f</span><span class="mi">03755</span><span class="err">f</span><span class="mi">6</span><span class="err">aabb</span><span class="mi">4594</span><span class="err">c</span><span class="mi">5915</span><span class="err">ec</span><span class="mi">983</span><span class="err">acf</span><span class="mi">12</span><span class="err">a</span><span class="mi">5</span><span class="err">d</span><span class="mi">1</span><span class="err">fba&#39;,</span>
</span></span><span class="line"><span class="cl"> <span class="err">&#39;prev_hash&#39;:</span> <span class="err">&#39;</span><span class="mi">0</span><span class="err">xf</span><span class="mi">126</span><span class="err">ecf</span><span class="mi">64473</span><span class="err">beb</span><span class="mi">9</span><span class="err">ae</span><span class="mi">5</span><span class="err">b</span><span class="mi">84137788100</span><span class="err">feb</span><span class="mi">9</span><span class="err">d</span><span class="mi">731</span><span class="err">c</span><span class="mi">604877</span><span class="err">c</span><span class="mi">0744</span><span class="err">cdc</span><span class="mi">6025</span><span class="err">f</span><span class="mi">4</span><span class="err">cbeb&#39;,</span>
</span></span><span class="line"><span class="cl"> <span class="err">&#39;prev_transaction_block_hash&#39;:</span> <span class="err">&#39;</span><span class="mi">0</span><span class="err">x</span><span class="mi">7103</span><span class="err">fe</span><span class="mi">2</span><span class="err">f</span><span class="mi">1</span><span class="err">aa</span><span class="mi">96998</span><span class="err">f</span><span class="mi">9</span><span class="err">ccf</span><span class="mi">6</span><span class="err">fc</span><span class="mi">98561</span><span class="err">b</span><span class="mi">64</span><span class="err">c</span><span class="mi">5</span><span class="err">f</span><span class="mi">7</span><span class="err">a</span><span class="mi">98</span><span class="err">cf</span><span class="mi">942335</span><span class="err">c</span><span class="mi">4</span><span class="err">c</span><span class="mi">927</span><span class="err">fb</span><span class="mi">2</span><span class="err">eaa</span><span class="mi">9325</span><span class="err">a&#39;,</span>
</span></span><span class="line"><span class="cl"> <span class="err">&#39;prev_transaction_block_height&#39;:</span> <span class="mi">201643</span><span class="err">,</span>
</span></span><span class="line"><span class="cl"> <span class="err">&#39;required_iters&#39;:</span> <span class="mi">95752</span><span class="err">,</span>
</span></span><span class="line"><span class="cl"> <span class="err">&#39;reward_claims_incorporated&#39;:</span> <span class="p">[{</span><span class="err">&#39;amount&#39;:</span> <span class="err">1750000000000,</span>
</span></span><span class="line"><span class="cl">                                 <span class="err">&#39;parent_coin_info&#39;:</span> <span class="err">&#39;0xccd5bb71183532bff220ba46c268991a000000000000000000000000000313ab&#39;,</span>
</span></span><span class="line"><span class="cl">                                 <span class="err">&#39;puzzle_hash&#39;:</span> <span class="err">&#39;0xbbb014f41d88c74b78501b36e4863d3382bfda9ae3c4d30a1b6df72b962502b6&#39;</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">                                <span class="p">{</span><span class="err">&#39;amount&#39;:</span> <span class="err">250000000000,</span>
</span></span><span class="line"><span class="cl">                                 <span class="err">&#39;parent_coin_info&#39;:</span> <span class="err">&#39;0x3ff07eb358e8255a65c30a2dce0e5fbb000000000000000000000000000313ab&#39;,</span>
</span></span><span class="line"><span class="cl">                                 <span class="err">&#39;puzzle_hash&#39;:</span> <span class="err">&#39;0xbbb014f41d88c74b78501b36e4863d3382bfda9ae3c4d30a1b6df72b962502b6&#39;</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">                                <span class="p">{</span><span class="err">&#39;amount&#39;:</span> <span class="err">1750000000000,</span>
</span></span><span class="line"><span class="cl">                                 <span class="err">&#39;parent_coin_info&#39;:</span> <span class="err">&#39;0xccd5bb71183532bff220ba46c268991a000000000000000000000000000313aa&#39;,</span>
</span></span><span class="line"><span class="cl">                                 <span class="err">&#39;puzzle_hash&#39;:</span> <span class="err">&#39;0x4bc6435b409bcbabe53870dae0f03755f6aabb4594c5915ec983acf12a5d1fba&#39;</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">                                <span class="p">{</span><span class="err">&#39;amount&#39;:</span> <span class="err">250000000000,</span>
</span></span><span class="line"><span class="cl">                                 <span class="err">&#39;parent_coin_info&#39;:</span> <span class="err">&#39;0x3ff07eb358e8255a65c30a2dce0e5fbb000000000000000000000000000313a8&#39;,</span>
</span></span><span class="line"><span class="cl">                                 <span class="err">&#39;puzzle_hash&#39;:</span> <span class="err">&#39;0xcf178071f6aa6cb1c92f00943424bcc8cb774449bd60058fc08e9894f49a1ca4&#39;</span><span class="p">}]</span><span class="err">,</span>
</span></span><span class="line"><span class="cl"> <span class="err">&#39;reward_infusion_new_challenge&#39;:</span> <span class="err">&#39;</span><span class="mi">0</span><span class="err">x</span><span class="mi">660886</span><span class="err">f</span><span class="mi">4</span><span class="err">ab</span><span class="mi">030</span><span class="err">c</span><span class="mi">07755</span><span class="err">f</span><span class="mi">53362</span><span class="err">ae</span><span class="mi">4253</span><span class="err">dfa</span><span class="mi">93</span><span class="err">ea</span><span class="mi">853</span><span class="err">cbc</span><span class="mi">321218</span><span class="err">f</span><span class="mi">58</span><span class="err">f</span><span class="mi">159</span><span class="err">c</span><span class="mi">75</span><span class="err">adaa&#39;,</span>
</span></span><span class="line"><span class="cl"> <span class="err">&#39;signage_point_index&#39;:</span> <span class="mi">63</span><span class="err">,</span>
</span></span><span class="line"><span class="cl"> <span class="err">&#39;sub_epoch_summary_included&#39;:</span> <span class="err">None,</span>
</span></span><span class="line"><span class="cl"> <span class="err">&#39;sub_slot_iters&#39;:</span> <span class="mi">99614720</span><span class="err">,</span>
</span></span><span class="line"><span class="cl"> <span class="err">&#39;timestamp&#39;:</span> <span class="mi">1619662081</span><span class="err">,</span>
</span></span><span class="line"><span class="cl"> <span class="err">&#39;total_iters&#39;:</span> <span class="mi">660123219464</span><span class="err">,</span>
</span></span><span class="line"><span class="cl"> <span class="err">&#39;weight&#39;:</span> <span class="mi">4121254</span><span class="err">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>另外，我们取的这个表的定义如下。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="nf">block_records</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">header_hash</span><span class="w"> </span><span class="kt">text</span><span class="w"> </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="p">,</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">prev_hash</span><span class="w"> </span><span class="kt">text</span><span class="p">,</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">height</span><span class="w"> </span><span class="kt">bigint</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">block</span><span class="w"> </span><span class="kt">blob</span><span class="p">,</span><span class="w"> </span><span class="c1">#&lt;----
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">  </span><span class="n">sub_epoch_summary</span><span class="w"> </span><span class="kt">blob</span><span class="p">,</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">is_peak</span><span class="w"> </span><span class="kt">tinyint</span><span class="p">,</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">is_block</span><span class="w"> </span><span class="kt">tinyint</span><span class="p">)</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h4 id="chia-币记录" class="headerLink">
    <a href="#chia-%e5%b8%81%e8%ae%b0%e5%bd%95" class="header-mark"></a>2.3.2 Chia 币记录</h4><p>类似的，我们可以获取一个 Coin 的记录，这里边，从表的定义可以看到，唯一二进制（不能直接从数据库查询中被人读懂）的字段就是是币值，不存在嵌套的结构，所以也并不需要封装的类才能看清楚里边的信息。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="nf">coin_record</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">coin_name</span><span class="w"> </span><span class="kt">text</span><span class="w"> </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">confirmed_index</span><span class="w"> </span><span class="kt">bigint</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">spent_index</span><span class="w"> </span><span class="kt">bigint</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">spent</span><span class="w"> </span><span class="kt">int</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">coinbase</span><span class="w"> </span><span class="kt">int</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">puzzle_hash</span><span class="w"> </span><span class="kt">text</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">coin_parent</span><span class="w"> </span><span class="kt">text</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">amount</span><span class="w"> </span><span class="kt">blob</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="kt">timestamp</span><span class="w"> </span><span class="kt">bigint</span><span class="p">)</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这里值得注意的信息主要是 <code>spent_index</code> 和 <code>confirmed_index</code>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">chia.util.ints</span> <span class="kn">import</span> <span class="n">uint64</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">chia_db_path</span> <span class="o">=</span> <span class="s2">&#34;/Users/weyl/.chia/mainnet/db/blockchain_v1_mainnet.sqlite&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">con</span> <span class="o">=</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">chia_db_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">cur</span> <span class="o">=</span> <span class="n">con</span><span class="o">.</span><span class="n">cursor</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">rows</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">cur</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s1">&#39;SELECT * FROM coin_record WHERE confirmed_index = 201645&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">coin_amount</span> <span class="o">=</span> <span class="n">uint64</span><span class="o">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="n">rows</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">7</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">201</span><span class="p">]:</span> <span class="n">rows</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">Out</span><span class="p">[</span><span class="mi">201</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="s1">&#39;cf35da0f595b49dde626d676b511ee62bce886f2216751aa51bb8ff851563d35&#39;</span><span class="p">,</span> <span class="c1"># coin_name</span>
</span></span><span class="line"><span class="cl"> <span class="mi">201645</span><span class="p">,</span> <span class="c1"># confirmed_index</span>
</span></span><span class="line"><span class="cl"> <span class="mi">0</span><span class="p">,</span> <span class="c1"># spent_index，这里没有spent，所以值无效</span>
</span></span><span class="line"><span class="cl"> <span class="mi">0</span><span class="p">,</span> <span class="c1"># spent，其实是 bool</span>
</span></span><span class="line"><span class="cl"> <span class="mi">1</span><span class="p">,</span> <span class="c1"># coinbase，bool</span>
</span></span><span class="line"><span class="cl"> <span class="s1">&#39;bbb014f41d88c74b78501b36e4863d3382bfda9ae3c4d30a1b6df72b962502b6&#39;</span><span class="p">,</span> <span class="c1"># puzzle_hash 对应到地址</span>
</span></span><span class="line"><span class="cl"> <span class="s1">&#39;ccd5bb71183532bff220ba46c268991a000000000000000000000000000313ab&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"> <span class="sa">b</span><span class="s1">&#39;</span><span class="se">\x00\x00\x01\x97</span><span class="s1">t </span><span class="se">\xdc\x00</span><span class="s1">&#39;</span><span class="p">,</span> <span class="c1"># uint64</span>
</span></span><span class="line"><span class="cl"> <span class="mi">1619662081</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="puzzles-address地址" class="headerLink">
    <a href="#puzzles-address%e5%9c%b0%e5%9d%80" class="header-mark"></a>2.3.3 Puzzles/ Address，地址</h4><p>我们可以把 Chia 中的 Puzzle 理解成为交易中的地址，为了方便使用，通常会把 Puzzle 的 hash 用<a href="https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki" target="_blank" rel="noopener noreferrer">bech32m</a> 转换成地址。</p>
<blockquote>
<p>Tips:</p>
<p>这里有一个在线双向转换的在线工具推荐一下: <a href="https://www.chiaexplorer.com/tools/address-puzzlehash-converter" target="_blank" rel="noopener noreferrer">https://www.chiaexplorer.com/tools/address-puzzlehash-converter</a></p>
</blockquote>
<h2 id="如何探索-chia-链" class="headerLink">
    <a href="#%e5%a6%82%e4%bd%95%e6%8e%a2%e7%b4%a2-chia-%e9%93%be" class="header-mark"></a>3 如何探索 Chia 链</h2><p>随着我们之前分析的信息，自然地，我们可以把 Chia 区块链中的信息取出来，用图（Graph）来表示，这里的图并不是（Graphic）图形、图画的意思，是数学、图论中的图。</p>
<p>在图的语境下，最主要的两个元素就是顶点（Vertex）和边（Edge）。</p>
<p>顶点表示一个实体，而边表示实体之间的某种关系，这种关系可以是对等的（无方向的）也可以是有方向的。</p>
<p>这里我们可以把这里的信息抽象映射到如图的图模型里：</p>
<ul>
<li>Block 顶点</li>
<li>Coin 顶点</li>
<li>Puzzle 顶点</li>
<li>spends 边（Block 到 Coin）</li>
<li>confirms 边 （Block 到 Coin）</li>
<li>belongs_to 边（Coin 到 Puzzle）</li>
</ul>
<p><a class="lightgallery" href="/nebula-chia/Chia_Graph_schema.png" title="Chia_Graph_schema" data-thumbnail="/nebula-chia/Chia_Graph_schema.png">
        
    </a></p>
<p>这里，我们应用的图是一种叫做属性图的形式，除了点和边的关系之外。这两种实体（点、边）还有其他信息只和它们的一个实例相关，所以再定义为顶点、边就不是很适合，这些信息就作为点、边的属性（preperty）存在。</p>
<p>这种为了处理实体之间关联、涉及实体、关联的属性信息的，也就是&quot;属性图&quot;的存储信息的方式在计算机领域越来越流行，甚至有专门为此结构而原生开发的数据库——图数据库（Graph Database）。</p>
<p>这里，我们用的就是一个叫做 Nebula Graph 的图数据库，它是一个现代的、为超大规模分部署架构设计的、原生存储、查询、计算图数据的项目，更棒的是，它是产生于社区的开源产品。</p>
<blockquote>
<p>Tips:</p>
<p><strong>安装 Nebula Graph</strong></p>
<p>一般来说，面向超大规模数据的分布式系统，天然的都是不容易轻量部署的，大家如果第一次使用的话可以试试我写的一个叫做 nebula-up 的小工具，可以一行指令部署一个用来试用、学习的 Nebula Graph 集群，地址在这里： <a href="https://github.com/wey-gu/nebula-up/" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/nebula-up/</a> 。</p>
</blockquote>
<h3 id="nebula-graph-导入-chia-数据到图数据库" class="headerLink">
    <a href="#nebula-graph-%e5%af%bc%e5%85%a5-chia-%e6%95%b0%e6%8d%ae%e5%88%b0%e5%9b%be%e6%95%b0%e6%8d%ae%e5%ba%93" class="header-mark"></a>3.1 Nebula Graph 导入 Chia 数据到图数据库</h3><p>我们分两步走，第一步这把 Chia Network 数据转换成 CSV 文件，第二步使用 Nebula 的 <a href="https://github.com/vesoft-inc/nebula-importer/" target="_blank" rel="noopener noreferrer">Nebula-Importer</a> 把数据导入 Nebula Graph。</p>
<h4 id="数据转换" class="headerLink">
    <a href="#%e6%95%b0%e6%8d%ae%e8%bd%ac%e6%8d%a2" class="header-mark"></a>3.1.1 数据转换</h4><p>这部分的代码我开源在这里了:</p>
<p><a href="https://github.com/wey-gu/nebula-chia" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/nebula-chia</a></p>
<p>使用它只需要在 Chia Network 的 python venv 下安装它:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">python3 -m pip install nebula-chia
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后调用 <code>ChaiBatchConvertor</code> 就可以在当前目录下生成两个 CSV 文件。</p>
<p>这里边有一些可以配置的参数，具体可以参考代码 <code>nebulachia/convertor.py</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">nebulachia.convertor</span> <span class="kn">import</span> <span class="n">ChiaBatchConvertor</span>
</span></span><span class="line"><span class="cl"><span class="n">c</span> <span class="o">=</span> <span class="n">ChaiBatchConvertor</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">block_record_limit</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">coin_record_limit</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">write_batch_size</span><span class="o">=</span><span class="mi">10000</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">c</span><span class="o">.</span><span class="n">convert_block_record</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">c</span><span class="o">.</span><span class="n">convert_coin_record</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>生成的文件：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ls -lth
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">-rw-r--r--   <span class="m">1</span> weyl  staff   173M May <span class="m">19</span> 13:01 coin_record.csv
</span></span><span class="line"><span class="cl">-rw-r--r--   <span class="m">1</span> weyl  staff    77M May <span class="m">19</span> 12:59 block_record.csv
</span></span></code></pre></td></tr></table>
</div>
</div><p>这里边字段的含义和类型，可以参考代码中 <code>block_record_row</code> 和 <code>coin_record_row</code> 的 <code>__doc__</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">466</span><span class="p">]:</span> <span class="nb">print</span><span class="p">(</span><span class="n">c</span><span class="o">.</span><span class="n">coin_record_row</span><span class="o">.</span><span class="vm">__doc__</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">Parse</span> <span class="n">row</span> <span class="ow">and</span> <span class="k">return</span> <span class="n">a</span> <span class="n">CSV</span> <span class="n">block</span> <span class="n">coin</span> <span class="n">row</span> <span class="nb">list</span><span class="o">.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">CREATE</span> <span class="n">TABLE</span> <span class="n">coin_record</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">          <span class="n">coin_name</span> <span class="n">text</span> <span class="n">PRIMARY</span> <span class="n">KEY</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="n">confirmed_index</span> <span class="n">bigint</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="n">spent_index</span> <span class="n">bigint</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="n">spent</span> <span class="nb">int</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="n">coinbase</span> <span class="nb">int</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="n">puzzle_hash</span> <span class="n">text</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="n">coin_parent</span> <span class="n">text</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="n">amount</span> <span class="n">blob</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="n">timestamp</span> <span class="n">bigint</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">Coin</span> <span class="n">Record</span> <span class="n">CSV</span> <span class="n">Head</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="mi">0</span>         <span class="mi">1</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>          <span class="mi">2</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>      <span class="mi">3</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">coin_name</span><span class="o">|</span><span class="n">confirmed_index</span><span class="o">|</span><span class="n">spent_index</span><span class="o">|</span><span class="n">spent</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="mi">4</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>  <span class="mi">5</span>           <span class="mi">6</span>           <span class="mi">7</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">coinbase</span><span class="o">|</span><span class="n">puzzle_hash</span><span class="o">|</span><span class="n">coin_parent</span><span class="o">|</span><span class="n">amount</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="mi">8</span><span class="p">(</span><span class="n">timestamp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">timestamp</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="mi">9</span>              <span class="mi">10</span>
</span></span><span class="line"><span class="cl">            <span class="n">confirmed_hash</span><span class="o">|</span><span class="n">spent_hash</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">467</span><span class="p">]:</span> <span class="nb">print</span><span class="p">(</span><span class="n">c</span><span class="o">.</span><span class="n">block_record_row</span><span class="o">.</span><span class="vm">__doc__</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">Parse</span> <span class="n">row</span> <span class="ow">and</span> <span class="k">return</span> <span class="n">a</span> <span class="n">CSV</span> <span class="n">block</span> <span class="n">record</span> <span class="n">row</span> <span class="nb">list</span><span class="o">.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">CREATE</span> <span class="n">TABLE</span> <span class="n">block_records</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">          <span class="n">header_hash</span> <span class="n">text</span> <span class="n">PRIMARY</span> <span class="n">KEY</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="n">prev_hash</span> <span class="n">text</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="n">height</span> <span class="n">bigint</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="n">block</span> <span class="n">blob</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="n">sub_epoch_summary</span> <span class="n">blob</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="n">is_peak</span> <span class="n">tinyint</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="n">is_block</span> <span class="n">tinyint</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">Block</span> <span class="n">Record</span> <span class="n">CSV</span> <span class="n">Head</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="mi">0</span>           <span class="mi">1</span>         <span class="mi">2</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span> <span class="mi">3</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span> <span class="mi">4</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">header_hash</span><span class="o">|</span><span class="n">prev_hash</span><span class="o">|</span><span class="n">height</span><span class="o">|</span><span class="n">is_peak</span><span class="o">|</span><span class="n">is_block</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="mi">5</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">deficit</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="mi">6</span>
</span></span><span class="line"><span class="cl">            <span class="n">challenge_block_info_hash</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="mi">7</span>
</span></span><span class="line"><span class="cl">            <span class="n">farmer_puzzle_hash</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="mi">8</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">fees</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="mi">9</span>
</span></span><span class="line"><span class="cl">            <span class="n">prev_transaction_block_hash</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="mi">10</span>
</span></span><span class="line"><span class="cl">            <span class="n">prev_transaction_block_height</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="mi">11</span>             <span class="mi">12</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">required_iters</span><span class="o">|</span><span class="n">signage_point_index</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="mi">13</span><span class="p">(</span><span class="n">timestamp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">timestamp</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="数据导入" class="headerLink">
    <a href="#%e6%95%b0%e6%8d%ae%e5%af%bc%e5%85%a5" class="header-mark"></a>3.1.2 数据导入</h4><p>有了 CSV 文件，我们可以借助 <a href="https://github.com/vesoft-inc/nebula-importer/" target="_blank" rel="noopener noreferrer">Nebula-Importer</a> 导入数据到图数据库中。</p>
<p>这里，我们写好了 nebula-importer 的配置文件，其中包涵了如下信息:</p>
<ul>
<li>在 Nebula Graph 中创建需要的数据模型 Schema，这和我们前边做的图映射的信息是等价的</li>
<li>描述 CSV 文件之中的 Column 的数据到图模型（点，边，点或边的属性）映射关系</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 这里，我的 csv 文件和 配置文件都放在 /home/wei.gu/chia 之下</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 我使用 docker-compose 默认配置部署的 Nebula Graph,</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 它创建了叫 nebula-docker-compose_nebula-net 的 docker 网络</span>
</span></span><span class="line"><span class="cl">docker run --rm -ti <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --network<span class="o">=</span>nebula-docker-compose_nebula-net <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v /home/wei.gu/chia/nebula-chia.yaml:/root/nebula-chia.yaml <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v /home/wei.gu/chia:/root <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    vesoft/nebula-importer:v2 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --config /root/nebula-chia.yaml
</span></span></code></pre></td></tr></table>
</div>
</div><p>这里我展示一个导入的结果示例，我在单机部署的 Nebula Graph 里导入了我一两周之前取的全量 Chia Network 数据的结果。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">2021/05/19 09:55:09 <span class="o">[</span>INFO<span class="o">]</span> reader.go:180: Total lines of file<span class="o">(</span>/root/coin_record.csv<span class="o">)</span> is: 547557, error lines: <span class="m">0</span>
</span></span><span class="line"><span class="cl">2021/05/19 09:55:09 <span class="o">[</span>INFO<span class="o">]</span> statsmgr.go:61: Done<span class="o">(</span>/root/coin_record.csv<span class="o">)</span>: Time<span class="o">(</span>4385.88s<span class="o">)</span>, Finished<span class="o">(</span>4512927<span class="o">)</span>, Failed<span class="o">(</span>0<span class="o">)</span>, Latency AVG<span class="o">(</span>1305us<span class="o">)</span>, Batches Req AVG<span class="o">(</span>2015us<span class="o">)</span>, Rows AVG<span class="o">(</span>1028.42/s<span class="o">)</span>
</span></span><span class="line"><span class="cl">2021/05/19 09:55:10 --- END OF NEBULA IMPORTER ---
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="探索-chia-的图数据" class="headerLink">
    <a href="#%e6%8e%a2%e7%b4%a2-chia-%e7%9a%84%e5%9b%be%e6%95%b0%e6%8d%ae" class="header-mark"></a>3.2 探索 Chia 的图数据</h3><h4 id="用图数据库的-queries" class="headerLink">
    <a href="#%e7%94%a8%e5%9b%be%e6%95%b0%e6%8d%ae%e5%ba%93%e7%9a%84-queries" class="header-mark"></a>3.2.1 用图数据库的 Queries</h4><p>导入 Chia 链的网络到 Nebula Graph 之后，我们可以在里边快速查询数据之间的关联。</p>
<p>比如这个查询表示从区块 <code>524aa2013781ff4cd9d2b5dc...</code> 查起，经过三种边 <code>farmer_puzzle, spends, confirms</code> 双向遍历的结果。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">GO</span><span class="w"> </span><span class="mi">5</span><span class="w"> </span><span class="n">STEPS</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="s2">&#34;524aa2013781ff4cd9d2b5dce40647b670d722e2de25bd2e2b79970a8ec435ee&#34;</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="n">OVER</span><span class="w"> </span><span class="n">farmer_puzzle</span><span class="p">,</span><span class="n">spends</span><span class="p">,</span><span class="n">confirms</span><span class="w"> </span><span class="n">BIDIRECT</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">Got</span><span class="w"> </span><span class="mi">419437</span><span class="w"> </span><span class="k">rows</span><span class="w"> </span><span class="p">(</span><span class="n">time</span><span class="w"> </span><span class="n">spent</span><span class="w"> </span><span class="mi">735120</span><span class="o">/</span><span class="mi">1170946</span><span class="w"> </span><span class="n">us</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">Wed</span><span class="p">,</span><span class="w"> </span><span class="mi">19</span><span class="w"> </span><span class="n">May</span><span class="w"> </span><span class="mi">2021</span><span class="w"> </span><span class="mi">10</span><span class="p">:</span><span class="mi">11</span><span class="p">:</span><span class="mi">28</span><span class="w"> </span><span class="n">UTC</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>再比如，计算一个 Puzzle 地址上的余额（所有 coin 的总价值）比如这个puzzle <code>bbe39134ccc32c08fdeff...</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">GO</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="n">STEP</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="s2">&#34;bbe39134ccc32c08fdeff4d2c19d1d1f4f7e48cdaf79d37397bc3136ce9b3cb7&#34;</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="n">OVER</span><span class="w"> </span><span class="n">belongs_to</span><span class="w"> </span><span class="n">REVERSELY</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="n">YIELD</span><span class="w"> </span><span class="k">CASE</span><span class="w"> </span><span class="err">$$</span><span class="p">.</span><span class="n">coin</span><span class="p">.</span><span class="n">is_spent</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">         </span><span class="k">WHEN</span><span class="w"> </span><span class="k">true</span><span class="w"> </span><span class="k">THEN</span><span class="w"> </span><span class="err">$$</span><span class="p">.</span><span class="n">coin</span><span class="p">.</span><span class="n">amount</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">         </span><span class="k">WHEN</span><span class="w"> </span><span class="k">false</span><span class="w"> </span><span class="k">THEN</span><span class="w"> </span><span class="o">-</span><span class="err">$$</span><span class="p">.</span><span class="n">coin</span><span class="p">.</span><span class="n">amount</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">         </span><span class="k">END</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">Amount</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">YIELD</span><span class="w"> </span><span class="k">sum</span><span class="p">(</span><span class="err">$</span><span class="o">-</span><span class="p">.</span><span class="n">Amount</span><span class="p">)</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h4 id="用-nebula-studio-可视化探索" class="headerLink">
    <a href="#%e7%94%a8-nebula-studio-%e5%8f%af%e8%a7%86%e5%8c%96%e6%8e%a2%e7%b4%a2" class="header-mark"></a>3.2.2 用 Nebula Studio 可视化探索</h4><p>Nebula Graph 为我们提供了图形化界面，有了它，我们可以用更符合人脑的方式地查看 Chia Network 中的数据。</p>
<p>比如，我们还是回到上边的那个区块，从这里查询。</p>
<p><a class="lightgallery" href="/nebula-chia/Visualized_block.png" title="Visualized_block" data-thumbnail="/nebula-chia/Visualized_block.png">
        
    </a></p>
<p>我们就获得了这个 block 类型的一个点/ vertex。我们可以从他开始进一步探索，先鼠标单击这个点，在拓展条件里把方向选择双向，默认的边类型是所有的边类型，这样我们就可以把所有 <code>步数</code>内相关联的数据一下子全都找出来。</p>
<p>选择好拓展条件之后，点击拓展就可以。</p>
<p><a class="lightgallery" href="/nebula-chia/Visualized_block_1.png" title="Visualized_block_1" data-thumbnail="/nebula-chia/Visualized_block_1.png">
        
    </a></p>
<p>这里，我们选择了步数为 <code>1</code>，点击拓展（或者双击要拓展的点），之后，我们可以快速双击其他的点继续拓展，这是我鼠标点了几次之后看到的样子：</p>
<p><a class="lightgallery" href="/nebula-chia/Visualized_block_2.png" title="Visualized_block_2" data-thumbnail="/nebula-chia/Visualized_block_2.png">
        
    </a></p>
<p>我们接下来再试试拓展的步数为 <code>2</code>，点击拓展（或者双击要拓展的点），看起来找到了有意思的信息。</p>
<p>我们看到了一个有很多边的黑色的点。</p>
<p><a class="lightgallery" href="/nebula-chia/Visualized_block_3.png" title="Visualized_block_3" data-thumbnail="/nebula-chia/Visualized_block_3.png">
        
    </a></p>
<p>通过查看这个点和我们开始查看的 block 之间的边，我们知道这个点正是 farm 这个 block 的地址，这个地址下边有非常多的 coin。</p>
<p><a class="lightgallery" href="/nebula-chia/Visualized_block_4.png" title="Visualized_block_3" data-thumbnail="/nebula-chia/Visualized_block_4.png">
        
    </a></p>
<p>这只是一个开始，有了这个导入到 Nebula Graph 图数据的基础，我们可以做很多有意思的分析和洞察，大家可以自己试试看，得到更有意思的结果分享给其他同学。</p>
<h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>4 总结</h2><p>这篇文章里，在我们简单介绍了 Chia Network 之后，我们首次的带大家一起从安装一个 Chia 终端，到分析终端同步到本地的 Chia 全网数据，借助于 Chia 终端开源的 Python 代码库，我们分析了全网数据里的重要信息。</p>
<p>之后，我们开源了一个小工具 Nebula-Chia，有了它，就可以把 Chia 的全网数据转换成 CSV 格式，这样，就可以借助 nebula-importer 把所有的数据导入到一个先进的图数据库（Nebula Graph）中。</p>
<p>Nebula Graph 的项目地址是 <a href="https://github.com/vesoft-inc/nebula-graph" target="_blank" rel="noopener noreferrer">https://github.com/vesoft-inc/nebula-graph</a></p>
<p>Nebula-Chia 我也开源在 <a href="https://github.com/wey-gu/nebula-chia" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/nebula-chia</a></p>
<p>在图数据库中，我们展示了做基本 Query 的例子和借助图数据库自带的可视化工具，我们可以轻易地获取 Chia 全网数据之间关联关系，有了这个作为基础，这些数据中洞察的潜力和可以尝试的有意思事情可以比较直观和高效地进一步探索了！</p>
<p>是不是很酷？</p>
<p><a class="lightgallery" href="/nebula-chia/Visualized_block_5.png" title="Visualized_block_5" data-thumbnail="/nebula-chia/Visualized_block_5.png">
        
    </a></p>
<h2 id="引用" class="headerLink">
    <a href="#%e5%bc%95%e7%94%a8" class="header-mark"></a>5 引用</h2><ul>
<li><a href="https://www.chia.net/faq/" target="_blank" rel="noopener noreferrer">https://www.chia.net/faq/</a></li>
<li><a href="https://chialisp.com/docs/" target="_blank" rel="noopener noreferrer">https://chialisp.com/docs/</a></li>
<li><a href="https://www.chiaexplorer.com/chia-coins" target="_blank" rel="noopener noreferrer">https://www.chiaexplorer.com/chia-coins</a></li>
<li><a href="https://docs.google.com/document/d/1tmRIb7lgi4QfKkNaxuKOBHRmwbVlGL4f7EsBDr_5xZE" target="_blank" rel="noopener noreferrer">https://docs.google.com/document/d/1tmRIb7lgi4QfKkNaxuKOBHRmwbVlGL4f7EsBDr_5xZE</a></li>
<li><a href="https://github.com/sipa/bech32/tree/master/ref/python" target="_blank" rel="noopener noreferrer">https://github.com/sipa/bech32/tree/master/ref/python</a></li>
<li><a href="https://github.com/Chia-Network/chia-blockchain/blob/main/README.md" target="_blank" rel="noopener noreferrer">https://github.com/Chia-Network/chia-blockchain/blob/main/README.md</a></li>
<li><a href="https://www.chia.net/assets/ChiaGreenPaper.pdf" target="_blank" rel="noopener noreferrer">https://www.chia.net/assets/ChiaGreenPaper.pdf</a></li>
<li><a href="https://docs.nebula-graph.com.cn" target="_blank" rel="noopener noreferrer">https://docs.nebula-graph.com.cn</a></li>
</ul>
<blockquote>
<p>题图版权：<a href="https://unsplash.com/photos/Ph5_4TnXXYE?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditShareLink" target="_blank" rel="noopener noreferrer">Icons8 Team</a></p>
</blockquote>]]></description>
</item><item>
    <title>Nebula Operator Kind，一键单机玩转 Nebula K8s 集群</title>
    <link>https://siwei.io/nebula-operator-kind/</link>
    <pubDate>Wed, 09 Jun 2021 19:27:00 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/nebula-operator-kind/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/nebula-operator-kind/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>Nebula-Kind，无需依赖，一键安装尝鲜基于 Nebula Operator 的 K8s Nebula Graph Cluster。</p>
<p>注： KIND 是一个 K8s 的 SIG，代表 K8s in Docker。</p>
</blockquote>
<h2 id="nebula-operator-kind-是什么" class="headerLink">
    <a href="#nebula-operator-kind-%e6%98%af%e4%bb%80%e4%b9%88" class="header-mark"></a>1 Nebula-Operator-Kind 是什么</h2><p>Nebula Graph 作为云原生的分布式开源图数据库，有开源的 <a href="https://github.com/vesoft-inc/nebula-operator" target="_blank" rel="noopener noreferrer">K8s Operator</a> 供大家在 K8s 上方便的通过 CRD 去维护、部署 Nebula Graph 集群。</p>
<p>对于手头没有方便的 K8s 环境的同学，如果想尝鲜、学习 Nebula Graph 的 K8s Operator 的话，可能需要耗费一些精力才能搭起来一整套的控制平面的依赖。</p>
<p>作为一个懒人，我做利用 K8s in Docker(<a href="https://kind.sigs.K8s.io/" target="_blank" rel="noopener noreferrer">KIND</a>)，和之前做 <a href="https://github.com/wey-gu/nebula-up" target="_blank" rel="noopener noreferrer">Nebula-Up</a> 的 shell 脚本架子，快速的搞了一个一键安装工具：Nebula-Operator-Kind</p>
<p>它能直接帮我们：</p>
<ul>
<li>安装 Docker</li>
<li>安装 K8s(KIND)</li>
<li>安装 PV Provider</li>
<li>安装 Nebula-Operator 以及依赖</li>
<li>安装 Nebula-Console</li>
<li>配置 nodePort 用以一键直连 Nebula 集群</li>
<li>安装 kubectl 用来体验 Nebula-Operator 的 CRD 配置</li>
</ul>
<h2 id="如何使用" class="headerLink">
    <a href="#%e5%a6%82%e4%bd%95%e4%bd%bf%e7%94%a8" class="header-mark"></a>2 如何使用</h2><p>安装：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -sL nebula-kind.siwei.io/install.sh <span class="p">|</span> bash
</span></span></code></pre></td></tr></table>
</div>
</div><p>成功之后：
<a class="lightgallery" href="/nebula-operator-kind/install_success.webp" title="install_success" data-thumbnail="/nebula-operator-kind/install_success.webp">
        
    </a></p>
<p>用 <code>~/.nebula-kind/bin/console</code> 一行连接集群：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">~/.nebula-kind/bin/console -u user -p password --address<span class="o">=</span>127.0.0.1 --port<span class="o">=</span><span class="m">30000</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="详细信息" class="headerLink">
    <a href="#%e8%af%a6%e7%bb%86%e4%bf%a1%e6%81%af" class="header-mark"></a>3 详细信息</h2><p>Repo 的地址是：https://github.com/wey-gu/nebula-operator-kind ，里边有更多的信息，欢迎大家试用、反馈、PR 哈！</p>
<blockquote>
<p>Updated Sept. 2021</p>
</blockquote>
<p>如果在 KubeSphere All-in-one 环境安装：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -sL nebula-kind.siwei.io/install-ks-1.sh <span class="p">|</span> bash
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果在 Minikube、其他 K8s 之中安装</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -sL nebula-kind.siwei.io/install-on-k8s.sh <span class="p">|</span> bash
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>题图版权：<a href="https://unsplash.com/photos/a4Gz2DD4dX0" target="_blank" rel="noopener noreferrer">Maik Hankemann</a></p>
</blockquote>]]></description>
</item><item>
    <title>Nebula Exchange SST 2.x Hands-on Guide</title>
    <link>https://siwei.io/nebula-exchange-sst-2.x/</link>
    <pubDate>Wed, 18 Aug 2021 15:21:00 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/nebula-exchange-sst-2.x/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/nebula-exchange-sst-2.x/featured-image.webp" referrerpolicy="no-referrer">
            </div><p>这篇文章带大家以最小方式，快速趟一下 Nebula Exchange 中 SST 写入方式的步骤。</p>
<h2 id="什么是-nebula-exchange-" class="headerLink">
    <a href="#%e4%bb%80%e4%b9%88%e6%98%af-nebula-exchange-" class="header-mark"></a>1 什么是 Nebula Exchange ?</h2><p>之前我在 <a href="https://siwei.io/sketches/nebula-data-import-options/" target="_blank" rel="noopener noreferrer">Nebula Data Import Options</a> 之中介绍过，<a href="https://github.com/vesoft-inc/nebula-spark-utils/tree/master/nebula-exchange" target="_blank" rel="noopener noreferrer">Nebula Exchange</a> 是一个 Nebula Graph 社区开源的 Spark Applicaiton，它专门用来支持批量或者流式地把数据导入 Nebula Graph Database 之中。</p>
<p>Nebula Exchange 支持多种多样的数据源（从 Apache Parquet, ORC, JSON, CSV, HBase, Hive MaxCompute 到 Neo4j, MySQL, ClickHouse, 再有 Kafka, Pulsar，更多的数据源也在不断增加之中）。</p>
<p><a class="lightgallery" href="/nebula-exchange-sst-2.x/nebula-exchange-digram.webp" title="nebula-exchange-digram" data-thumbnail="/nebula-exchange-sst-2.x/nebula-exchange-digram.webp">
        
    </a></p>
<p>如上图所示，在 Exchange 内部，从除了不同 Reader 可以读取不同数据源之外，在数据经过 Processor 处理之后通过 Writer写入（sink） Nebula Graph 图数据库的时候，除了走正常的 ServerBaseWriter 的写入流程之外，它还可以绕过整个写入流程，利用 Spark 的计算能力并行生成底层 RocksDB 的 SST 文件，从而实现超高性能的数据导入，这个 SST 文件导入的场景就是本文带大家上手熟悉的部分。</p>
<blockquote>
<p>详细信息请参阅：<a href="https://docs.nebula-graph.com.cn/master/nebula-exchange/about-exchange/ex-ug-what-is-exchange/" target="_blank" rel="noopener noreferrer">Nebula Graph 手册:什么是 Nebula Exchange</a></p>
<p><a href="https://nebula-graph.com.cn/posts/" target="_blank" rel="noopener noreferrer">Nebula Graph 官方博客</a>也有更多 Nebula Exchange 的实践文章</p>
</blockquote>
<h2 id="步骤概观" class="headerLink">
    <a href="#%e6%ad%a5%e9%aa%a4%e6%a6%82%e8%a7%82" class="header-mark"></a>2 步骤概观</h2><ul>
<li><a href="#%e5%ae%9e%e9%aa%8c%e7%8e%af%e5%a2%83%e5%87%86%e5%a4%87" rel="">实验环境</a></li>
<li><a href="#%e9%85%8d%e7%bd%aeExchange" rel="">配置 Exchange</a></li>
<li><a href="#%e7%94%9f%e6%88%90SST%e6%96%87%e4%bb%b6" rel="">生成 SST 文件</a></li>
<li><a href="#%e5%86%99%e5%85%a5SST%e6%96%87%e4%bb%b6%e5%88%b0NebulaGraph" rel="">写入 SST 文件到 Nebula Graph</a></li>
</ul>
<h2 id="实验环境准备" class="headerLink">
    <a href="#%e5%ae%9e%e9%aa%8c%e7%8e%af%e5%a2%83%e5%87%86%e5%a4%87" class="header-mark"></a>3 实验环境准备</h2><p>为了最小化使用 Nebula Exchange 的 SST 功能，我们需要：</p>
<ul>
<li>搭建一个 Nebula Graph 集群，创建导入数据的 Schema，我们选择使用 Docker-Compose 方式、利用 <a href="https://github.com/wey-gu/nebula-up/" target="_blank" rel="noopener noreferrer">Nebula-Up</a> 快速部署，并简单修改其网络，以方便同样容器化的 Exchange 程序对其访问。</li>
<li>搭建容器化的 Spark 运行环境</li>
<li>搭建容器化的 HDFS</li>
</ul>
<h3 id="1-搭建-nebula-graph-集群" class="headerLink">
    <a href="#1-%e6%90%ad%e5%bb%ba-nebula-graph-%e9%9b%86%e7%be%a4" class="header-mark"></a>3.1 1. 搭建 Nebula Graph 集群</h3><p>借助于 <a href="https://github.com/wey-gu/nebula-up/" target="_blank" rel="noopener noreferrer">Nebula-Up</a> 我们可以在 Linux 环境下一键部署一套 Nebula Graph 集群：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -fsSL nebula-up.siwei.io/install.sh <span class="p">|</span> bash
</span></span></code></pre></td></tr></table>
</div>
</div><p><a class="lightgallery" href="https://github.com/wey-gu/nebula-up/raw/main/images/nebula-up-demo-shell.png" title="nebula-up" data-thumbnail="https://github.com/wey-gu/nebula-up/raw/main/images/nebula-up-demo-shell.png">
        
    </a></p>
<p>待部署成功之后，我们需要对环境做一些修改，这里我做的修改其实就是两点：</p>
<ol>
<li>只保留一个 metaD 服务</li>
<li>起用 Docker 的外部网络</li>
</ol>
<p>详细修改的部分参考<a href="#%e9%99%84%e5%bd%95%e4%b8%80" rel="">附录一</a></p>
<p>应用 docker-compose 的修改：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> ~/.nebula-up/nebula-docker-compose
</span></span><span class="line"><span class="cl">vim docker-compose.yaml <span class="c1"># 参考附录一</span>
</span></span><span class="line"><span class="cl">docker network create nebula-net <span class="c1"># 需要创建外部网络</span>
</span></span><span class="line"><span class="cl">docker-compose up -d --remove-orphans
</span></span></code></pre></td></tr></table>
</div>
</div><p>之后，我们来创建要测试的图空间，并创建图的 Schema，为此，我们可以利用 nebula-console ，同样，Nebula-Up 里自带了容器化的 nebula-console。</p>
<ul>
<li>进入 Nebula-Console 所在的容器</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">~/.nebula-up/console.sh
</span></span><span class="line"><span class="cl">/ <span class="c1">#</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>在 console 容器里发起链接到图数据库，其中 <code>192.168.x.y</code> 是我所在的 Linux VM 的第一个网卡地址，请换成您的</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">/ # nebula-console -addr 192.168.x.y -port 9669 -user root -p password
</span></span><span class="line"><span class="cl">[INFO] connection pool is initialized successfully
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Welcome to Nebula Graph!
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>创建图空间（我们起名字叫 <code>sst</code> ），以及 schema</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">create</span><span class="w"> </span><span class="k">space</span><span class="w"> </span><span class="n">sst</span><span class="p">(</span><span class="n">partition_num</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span><span class="n">replica_factor</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">vid_type</span><span class="o">=</span><span class="n">fixed_string</span><span class="p">(</span><span class="mi">32</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">:</span><span class="n">sleep</span><span class="w"> </span><span class="mi">20</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">use</span><span class="w"> </span><span class="n">sst</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">create</span><span class="w"> </span><span class="n">tag</span><span class="w"> </span><span class="n">player</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="n">string</span><span class="p">,</span><span class="w"> </span><span class="n">age</span><span class="w"> </span><span class="nb">int</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>示例输出</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="p">(</span><span class="n">root</span><span class="o">@</span><span class="n">nebula</span><span class="p">)</span><span class="w"> </span><span class="p">[(</span><span class="k">none</span><span class="p">)]</span><span class="o">&gt;</span><span class="w"> </span><span class="k">create</span><span class="w"> </span><span class="k">space</span><span class="w"> </span><span class="n">sst</span><span class="p">(</span><span class="n">partition_num</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span><span class="n">replica_factor</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">vid_type</span><span class="o">=</span><span class="n">fixed_string</span><span class="p">(</span><span class="mi">32</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">Execution</span><span class="w"> </span><span class="n">succeeded</span><span class="w"> </span><span class="p">(</span><span class="n">time</span><span class="w"> </span><span class="n">spent</span><span class="w"> </span><span class="mi">1468</span><span class="o">/</span><span class="mi">1918</span><span class="w"> </span><span class="n">us</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="n">root</span><span class="o">@</span><span class="n">nebula</span><span class="p">)</span><span class="w"> </span><span class="p">[(</span><span class="k">none</span><span class="p">)]</span><span class="o">&gt;</span><span class="w"> </span><span class="p">:</span><span class="n">sleep</span><span class="w"> </span><span class="mi">20</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="n">root</span><span class="o">@</span><span class="n">nebula</span><span class="p">)</span><span class="w"> </span><span class="p">[(</span><span class="k">none</span><span class="p">)]</span><span class="o">&gt;</span><span class="w"> </span><span class="n">use</span><span class="w"> </span><span class="n">sst</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">Execution</span><span class="w"> </span><span class="n">succeeded</span><span class="w"> </span><span class="p">(</span><span class="n">time</span><span class="w"> </span><span class="n">spent</span><span class="w"> </span><span class="mi">1253</span><span class="o">/</span><span class="mi">1566</span><span class="w"> </span><span class="n">us</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">Wed</span><span class="p">,</span><span class="w"> </span><span class="mi">18</span><span class="w"> </span><span class="n">Aug</span><span class="w"> </span><span class="mi">2021</span><span class="w"> </span><span class="mi">08</span><span class="p">:</span><span class="mi">18</span><span class="p">:</span><span class="mi">13</span><span class="w"> </span><span class="n">UTC</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="n">root</span><span class="o">@</span><span class="n">nebula</span><span class="p">)</span><span class="w"> </span><span class="p">[</span><span class="n">sst</span><span class="p">]</span><span class="o">&gt;</span><span class="w"> </span><span class="k">create</span><span class="w"> </span><span class="n">tag</span><span class="w"> </span><span class="n">player</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="n">string</span><span class="p">,</span><span class="w"> </span><span class="n">age</span><span class="w"> </span><span class="nb">int</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">Execution</span><span class="w"> </span><span class="n">succeeded</span><span class="w"> </span><span class="p">(</span><span class="n">time</span><span class="w"> </span><span class="n">spent</span><span class="w"> </span><span class="mi">1312</span><span class="o">/</span><span class="mi">1735</span><span class="w"> </span><span class="n">us</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">Wed</span><span class="p">,</span><span class="w"> </span><span class="mi">18</span><span class="w"> </span><span class="n">Aug</span><span class="w"> </span><span class="mi">2021</span><span class="w"> </span><span class="mi">08</span><span class="p">:</span><span class="mi">18</span><span class="p">:</span><span class="mi">23</span><span class="w"> </span><span class="n">UTC</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="搭建容器化的-spark-环境" class="headerLink">
    <a href="#%e6%90%ad%e5%bb%ba%e5%ae%b9%e5%99%a8%e5%8c%96%e7%9a%84-spark-%e7%8e%af%e5%a2%83" class="header-mark"></a>3.2 搭建容器化的 Spark 环境</h3><p>利用 big data europe 做的工作，这个过程非常容易。</p>
<p>值得注意的是：</p>
<ul>
<li>现在的 Nebula Exchange 对 Spark 的版本有要求，在现在的 2021 年 8 月，我是用了 spark-2.4.5-hadoop-2.7 的版本。</li>
<li>为了方便，我让 Spark 运行在 Nebula Graph 相同的机器上，并且指定了运行在同一个 Docker 网络下</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run --name spark-master --network nebula-net <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -h spark-master -e <span class="nv">ENABLE_INIT_DAEMON</span><span class="o">=</span><span class="nb">false</span> -d <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    bde2020/spark-master:2.4.5-hadoop2.7
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后，我们就可以进入到环境中了：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker <span class="nb">exec</span> -it spark-master bash
</span></span></code></pre></td></tr></table>
</div>
</div><p>进到 Spark 容器中之后，可以像这样安装 maven:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">MAVEN_VERSION</span><span class="o">=</span>3.5.4
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">MAVEN_HOME</span><span class="o">=</span>/usr/lib/mvn
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">PATH</span><span class="o">=</span><span class="nv">$MAVEN_HOME</span>/bin:<span class="nv">$PATH</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">wget http://archive.apache.org/dist/maven/maven-3/<span class="nv">$MAVEN_VERSION</span>/binaries/apache-maven-<span class="nv">$MAVEN_VERSION</span>-bin.tar.gz <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  tar -zxvf apache-maven-<span class="nv">$MAVEN_VERSION</span>-bin.tar.gz <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  rm apache-maven-<span class="nv">$MAVEN_VERSION</span>-bin.tar.gz <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  mv apache-maven-<span class="nv">$MAVEN_VERSION</span> /usr/lib/mvn
</span></span></code></pre></td></tr></table>
</div>
</div><p>还可以这样在容器里下载 nebula-exchange 的 <code>jar</code> 包：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> ~
</span></span><span class="line"><span class="cl">wget https://repo1.maven.org/maven2/com/vesoft/nebula-exchange/2.1.0/nebula-exchange-2.1.0.jar
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="搭建容器化的-hdfs" class="headerLink">
    <a href="#%e6%90%ad%e5%bb%ba%e5%ae%b9%e5%99%a8%e5%8c%96%e7%9a%84-hdfs" class="header-mark"></a>3.3 搭建容器化的 HDFS</h3><p>同样借助 big-data-euroupe 的工作，这非常简单，不过我们要做一点修改，让它的 <code>docker-compose.yml</code> 文件里使用 <code>nebula-net</code> 这个之前创建的 Docker 网络。</p>
<p>详细修改的部分参考<a href="#%e9%99%84%e5%bd%95%e4%ba%8c" rel="">附录二</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone https://github.com/big-data-europe/docker-hadoop.git
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> docker-hadoop
</span></span><span class="line"><span class="cl">vim docker-compose.yml
</span></span><span class="line"><span class="cl">docker-compose up -d
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="配置exchange" class="headerLink">
    <a href="#%e9%85%8d%e7%bd%aeexchange" class="header-mark"></a>4 配置Exchange</h2><p>这个配置主要填入的信息就是 Nebula Graph 集群本身和将要写入数据的 Space Name，以及数据源相关的配置（这里我们用 <code>csv</code> 作为例子），最后再配置输出（sink）为 <code>sst</code></p>
<ul>
<li>Nebula Graph
<ul>
<li>GraphD 地址</li>
<li>MetaD 地址</li>
<li>credential</li>
<li>Space Name</li>
</ul>
</li>
<li>数据源
<ul>
<li><code>source: csv</code>
<ul>
<li><code>path</code></li>
<li><code>fields</code> etc.</li>
</ul>
</li>
<li><code>ink: sst</code></li>
</ul>
</li>
</ul>
<p>详细的配置参考<a href="#%e9%99%84%e5%bd%95%e4%ba%8c" rel="">附录二</a></p>
<p>注意，这里 metaD 的地址可以这样获取，可以看到 <code>0.0.0.0:49377-&gt;9559</code> 表示 <code>49377</code> 是外部的地址。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker ps <span class="p">|</span> grep meta
</span></span><span class="line"><span class="cl">887740c15750   vesoft/nebula-metad:v2.0.0                               <span class="s2">&#34;./bin/nebula-metad …&#34;</span>   <span class="m">6</span> hours ago    Up <span class="m">6</span> hours <span class="o">(</span>healthy<span class="o">)</span>    9560/tcp, 0.0.0.0:49377-&gt;9559/tcp, :::49377-&gt;9559/tcp, 0.0.0.0:49376-&gt;19559/tcp, :::49376-&gt;19559/tcp, 0.0.0.0:49375-&gt;19560/tcp, :::49375-&gt;19560/tcp                  nebula-docker-compose_metad0_1
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="生成sst文件" class="headerLink">
    <a href="#%e7%94%9f%e6%88%90sst%e6%96%87%e4%bb%b6" class="header-mark"></a>5 生成SST文件</h2><h3 id="准备源文件配置文件" class="headerLink">
    <a href="#%e5%87%86%e5%a4%87%e6%ba%90%e6%96%87%e4%bb%b6%e9%85%8d%e7%bd%ae%e6%96%87%e4%bb%b6" class="header-mark"></a>5.1 准备源文件、配置文件</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker cp exchange-sst.conf spark-master:/root/
</span></span><span class="line"><span class="cl">docker cp player.csv spark-master:/root/
</span></span></code></pre></td></tr></table>
</div>
</div><p>其中 <code>player.csv</code> 的例子：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">1100,Tim Duncan,42
</span></span><span class="line"><span class="cl">1101,Tony Parker,36
</span></span><span class="line"><span class="cl">1102,LaMarcus Aldridge,33
</span></span><span class="line"><span class="cl">1103,Rudy Gay,32
</span></span><span class="line"><span class="cl">1104,Marco Belinelli,32
</span></span><span class="line"><span class="cl">1105,Danny Green,31
</span></span><span class="line"><span class="cl">1106,Kyle Anderson,25
</span></span><span class="line"><span class="cl">1107,Aron Baynes,32
</span></span><span class="line"><span class="cl">1108,Boris Diaw,36
</span></span><span class="line"><span class="cl">1109,Tiago Splitter,34
</span></span><span class="line"><span class="cl">1110,Cory Joseph,27
</span></span><span class="line"><span class="cl">1111,David West,38
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="执行-exchange-程序" class="headerLink">
    <a href="#%e6%89%a7%e8%a1%8c-exchange-%e7%a8%8b%e5%ba%8f" class="header-mark"></a>5.2 执行 exchange 程序</h3><p>进入 <code>spark-master</code> 容器，提交执行 <code>exchange</code> 应用。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker <span class="nb">exec</span> -it spark-master bash
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> /root/
</span></span><span class="line"><span class="cl">/spark/bin/spark-submit --master <span class="nb">local</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --class com.vesoft.nebula.exchange.Exchange nebula-exchange-2.1.0.jar<span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -c exchange-sst.conf
</span></span></code></pre></td></tr></table>
</div>
</div><p>检查执行结果：</p>
<p><code>spark-submit</code> 输出：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">21/08/17 03:37:43 INFO TaskSetManager: Finished task 31.0 in stage 2.0 <span class="o">(</span>TID 33<span class="o">)</span> in <span class="m">1093</span> ms on localhost <span class="o">(</span>executor driver<span class="o">)</span> <span class="o">(</span>32/32<span class="o">)</span>
</span></span><span class="line"><span class="cl">21/08/17 03:37:43 INFO TaskSchedulerImpl: Removed TaskSet 2.0, whose tasks have all completed, from pool
</span></span><span class="line"><span class="cl">21/08/17 03:37:43 INFO DAGScheduler: ResultStage <span class="m">2</span> <span class="o">(</span>foreachPartition at VerticesProcessor.scala:179<span class="o">)</span> finished in 22.336 s
</span></span><span class="line"><span class="cl">21/08/17 03:37:43 INFO DAGScheduler: Job <span class="m">1</span> finished: foreachPartition at VerticesProcessor.scala:179, took 22.500639 s
</span></span><span class="line"><span class="cl">21/08/17 03:37:43 INFO Exchange$: SST-Import: failure.player: <span class="m">0</span>
</span></span><span class="line"><span class="cl">21/08/17 03:37:43 WARN Exchange$: Edge is not defined
</span></span><span class="line"><span class="cl">21/08/17 03:37:43 INFO SparkUI: Stopped Spark web UI at http://spark-master:4040
</span></span><span class="line"><span class="cl">21/08/17 03:37:43 INFO MapOutputTrackerMasterEndpoint: MapOutputTrackerMasterEndpoint stopped!
</span></span></code></pre></td></tr></table>
</div>
</div><p>验证 HDFS 上生成的 SST 文件：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker <span class="nb">exec</span> -it namenode /bin/bash
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">root@2db58903fb53:/# hdfs dfs -ls /sst
</span></span><span class="line"><span class="cl">Found <span class="m">10</span> items
</span></span><span class="line"><span class="cl">drwxr-xr-x   - root supergroup          <span class="m">0</span> 2021-08-17 03:37 /sst/1
</span></span><span class="line"><span class="cl">drwxr-xr-x   - root supergroup          <span class="m">0</span> 2021-08-17 03:37 /sst/10
</span></span><span class="line"><span class="cl">drwxr-xr-x   - root supergroup          <span class="m">0</span> 2021-08-17 03:37 /sst/2
</span></span><span class="line"><span class="cl">drwxr-xr-x   - root supergroup          <span class="m">0</span> 2021-08-17 03:37 /sst/3
</span></span><span class="line"><span class="cl">drwxr-xr-x   - root supergroup          <span class="m">0</span> 2021-08-17 03:37 /sst/4
</span></span><span class="line"><span class="cl">drwxr-xr-x   - root supergroup          <span class="m">0</span> 2021-08-17 03:37 /sst/5
</span></span><span class="line"><span class="cl">drwxr-xr-x   - root supergroup          <span class="m">0</span> 2021-08-17 03:37 /sst/6
</span></span><span class="line"><span class="cl">drwxr-xr-x   - root supergroup          <span class="m">0</span> 2021-08-17 03:37 /sst/7
</span></span><span class="line"><span class="cl">drwxr-xr-x   - root supergroup          <span class="m">0</span> 2021-08-17 03:37 /sst/8
</span></span><span class="line"><span class="cl">drwxr-xr-x   - root supergroup          <span class="m">0</span> 2021-08-17 03:37 /sst/9
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="写入sst到nebulagraph" class="headerLink">
    <a href="#%e5%86%99%e5%85%a5sst%e5%88%b0nebulagraph" class="header-mark"></a>6 写入SST到NebulaGraph</h2><p>这里的操作实际上都是参考文档：<a href="https://docs.nebula-graph.com.cn/master/nebula-exchange/use-exchange/ex-ug-import-from-sst/" target="_blank" rel="noopener noreferrer">SST 导入</a>，得来。其中就是从 console 之中执行了两步操作：</p>
<ul>
<li>Download</li>
<li>Ingest</li>
</ul>
<p>其中 Download 实际上是触发 Nebula Graph 从服务端发起 HDFS Client 的 download，获取 HDFS 上的 SST 文件，然后放到 storageD 能访问的本地路径下，这里，需要我们在服务端部署 HDFS 的依赖。因为我们是最小实践，我就偷懒手动做了这个 Download 的操作。</p>
<h3 id="手动下载" class="headerLink">
    <a href="#%e6%89%8b%e5%8a%a8%e4%b8%8b%e8%bd%bd" class="header-mark"></a>6.1 手动下载</h3><p>这里边手动下载我们就要知道 Nebula Graph 服务端下载的路径，实际上是 <code>/data/storage/nebula/&lt;space_id&gt;/download/</code>，这里的 Space ID 需要手动获取一下：</p>
<p>这个例子里，我们的 Space Name 是 <code>sst</code>，而 Space ID 是 <code>49</code>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="p">(</span><span class="n">root</span><span class="o">@</span><span class="n">nebula</span><span class="p">)</span><span class="w"> </span><span class="p">[</span><span class="n">sst</span><span class="p">]</span><span class="o">&gt;</span><span class="w"> </span><span class="k">DESC</span><span class="w"> </span><span class="k">space</span><span class="w"> </span><span class="n">sst</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">----+-------+------------------+----------------+---------+------------+--------------------+-------------+-----------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="n">ID</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Name</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="n">Partition</span><span class="w"> </span><span class="nb">Number</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Replica</span><span class="w"> </span><span class="n">Factor</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Charset</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="k">Collate</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="n">Vid</span><span class="w"> </span><span class="k">Type</span><span class="w">           </span><span class="o">|</span><span class="w"> </span><span class="k">Atomic</span><span class="w"> </span><span class="n">Edge</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="k">Group</span><span class="w">     </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">----+-------+------------------+----------------+---------+------------+--------------------+-------------+-----------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="mi">49</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;sst&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="mi">10</span><span class="w">               </span><span class="o">|</span><span class="w"> </span><span class="mi">1</span><span class="w">              </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;utf8&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;utf8_bin&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;FIXED_STRING(32)&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;false&#34;</span><span class="w">     </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;default&#34;</span><span class="w"> </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">----+-------+------------------+----------------+---------+------------+--------------------+-------------+-----------+
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>于是，下边的操作就是手动把 SST 文件从 HDFS 之中 <code>get</code> 下来，再拷贝到 storageD 之中。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker <span class="nb">exec</span> -it namenode /bin/bash
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ hdfs dfs -get /sst /sst
</span></span><span class="line"><span class="cl"><span class="nb">exit</span>
</span></span><span class="line"><span class="cl">docker cp namenode:/sst .
</span></span><span class="line"><span class="cl">docker <span class="nb">exec</span> -it nebula-docker-compose_storaged0_1 mkdir -p /data/storage/nebula/49/download/
</span></span><span class="line"><span class="cl">docker <span class="nb">exec</span> -it nebula-docker-compose_storaged1_1 mkdir -p /data/storage/nebula/49/download/
</span></span><span class="line"><span class="cl">docker <span class="nb">exec</span> -it nebula-docker-compose_storaged2_1 mkdir -p /data/storage/nebula/49/download/
</span></span><span class="line"><span class="cl">docker cp sst nebula-docker-compose_storaged0_1:/data/storage/nebula/49/download/
</span></span><span class="line"><span class="cl">docker cp sst nebula-docker-compose_storaged1_1:/data/storage/nebula/49/download/
</span></span><span class="line"><span class="cl">docker cp sst nebula-docker-compose_storaged2_1:/data/storage/nebula/49/download/
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="sst-文件导入" class="headerLink">
    <a href="#sst-%e6%96%87%e4%bb%b6%e5%af%bc%e5%85%a5" class="header-mark"></a>6.2 SST 文件导入</h3><ul>
<li>进入 Nebula-Console 所在的容器</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">~/.nebula-up/console.sh
</span></span><span class="line"><span class="cl">/ <span class="c1">#</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>在 console 容器里发起链接到图数据库，其中 <code>192.168.x.y</code> 是我所在的 Linux VM 的第一个网卡地址，请换成您的</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">/ # nebula-console -addr 192.168.x.y -port 9669 -user root -p password
</span></span><span class="line"><span class="cl">[INFO] connection pool is initialized successfully
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Welcome to Nebula Graph!
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>执行 <code>INGEST</code> 开始让 StorageD 读取 SST 文件</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>root@nebula<span class="o">)</span> <span class="o">[(</span>none<span class="o">)]</span>&gt; use sst
</span></span><span class="line"><span class="cl"><span class="o">(</span>root@nebula<span class="o">)</span> <span class="o">[</span>sst<span class="o">]</span>&gt; INGEST<span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>我们可以用如下方法实时查看 Nebula Graph 服务端的日志</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">tail -f ~/.nebula-up/nebula-docker-compose/logs/*/*
</span></span></code></pre></td></tr></table>
</div>
</div><p>成功的 INGEST 日志：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">I0817 08:03:28.611877   <span class="m">169</span> EventListner.h:96<span class="o">]</span> Ingest external SST file: column family default, the external file path /data/storage/nebula/49/download/8/8-6.sst, the internal file path /data/storage/nebula/49/data/000023.sst, the properties of the table: <span class="c1"># data blocks=1; # entries=1; # deletions=0; # merge operands=0; # range deletions=0; raw key size=48; raw average key size=48.000000; raw value size=40; raw average value size=40.000000; data block size=75; index block size (user-key? 0, delta-value? 0)=66; filter block size=0; (estimated) table size=141; filter policy name=N/A; prefix extractor name=nullptr; column family ID=N/A; column family name=N/A; comparator name=leveldb.BytewiseComparator; merge operator name=nullptr; property collectors names=[]; SST file compression algo=Snappy; SST file compression options=window_bits=-14; level=32767; strategy=0; max_dict_bytes=0; zstd_max_train_bytes=0; enabled=0; ; creation time=0; time stamp of earliest key=0; file creation time=0;</span>
</span></span><span class="line"><span class="cl">E0817 08:03:28.611912   <span class="m">169</span> StorageHttpIngestHandler.cpp:63<span class="o">]</span> SSTFile ingest successfully
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>题图版权：<a href="https://unsplash.com/photos/n6B49lTx7NM" target="_blank" rel="noopener noreferrer">Pietro Jeng</a></p>
</blockquote>
<h2 id="附录" class="headerLink">
    <a href="#%e9%99%84%e5%bd%95" class="header-mark"></a>7 附录</h2><h3 id="附录一" class="headerLink">
    <a href="#%e9%99%84%e5%bd%95%e4%b8%80" class="header-mark"></a>7.1 附录一</h3><p><code>docker-compose.yaml</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span><span class="lnt">150
</span><span class="lnt">151
</span><span class="lnt">152
</span><span class="lnt">153
</span><span class="lnt">154
</span><span class="lnt">155
</span><span class="lnt">156
</span><span class="lnt">157
</span><span class="lnt">158
</span><span class="lnt">159
</span><span class="lnt">160
</span><span class="lnt">161
</span><span class="lnt">162
</span><span class="lnt">163
</span><span class="lnt">164
</span><span class="lnt">165
</span><span class="lnt">166
</span><span class="lnt">167
</span><span class="lnt">168
</span><span class="lnt">169
</span><span class="lnt">170
</span><span class="lnt">171
</span><span class="lnt">172
</span><span class="lnt">173
</span><span class="lnt">174
</span><span class="lnt">175
</span><span class="lnt">176
</span><span class="lnt">177
</span><span class="lnt">178
</span><span class="lnt">179
</span><span class="lnt">180
</span><span class="lnt">181
</span><span class="lnt">182
</span><span class="lnt">183
</span><span class="lnt">184
</span><span class="lnt">185
</span><span class="lnt">186
</span><span class="lnt">187
</span><span class="lnt">188
</span><span class="lnt">189
</span><span class="lnt">190
</span><span class="lnt">191
</span><span class="lnt">192
</span><span class="lnt">193
</span><span class="lnt">194
</span><span class="lnt">195
</span><span class="lnt">196
</span><span class="lnt">197
</span><span class="lnt">198
</span><span class="lnt">199
</span><span class="lnt">200
</span><span class="lnt">201
</span><span class="lnt">202
</span><span class="lnt">203
</span><span class="lnt">204
</span><span class="lnt">205
</span><span class="lnt">206
</span><span class="lnt">207
</span><span class="lnt">208
</span><span class="lnt">209
</span><span class="lnt">210
</span><span class="lnt">211
</span><span class="lnt">212
</span><span class="lnt">213
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl"><span class="gh">diff --git a/docker-compose.yaml b/docker-compose.yaml
</span></span></span><span class="line"><span class="cl"><span class="gh">index 48854de..cfeaedb 100644
</span></span></span><span class="line"><span class="cl"><span class="gh"></span><span class="gd">--- a/docker-compose.yaml
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+++ b/docker-compose.yaml
</span></span></span><span class="line"><span class="cl"><span class="gi"></span><span class="gu">@@ -6,11 +6,13 @@ services:
</span></span></span><span class="line"><span class="cl"><span class="gu"></span>       USER: root
</span></span><span class="line"><span class="cl">       TZ:   &#34;${TZ}&#34;
</span></span><span class="line"><span class="cl">     command:
</span></span><span class="line"><span class="cl"><span class="gd">-      - --meta_server_addrs=metad0:9559,metad1:9559,metad2:9559
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+      - --meta_server_addrs=metad0:9559
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>       - --local_ip=metad0
</span></span><span class="line"><span class="cl">       - --ws_ip=metad0
</span></span><span class="line"><span class="cl">       - --port=9559
</span></span><span class="line"><span class="cl">       - --ws_http_port=19559
</span></span><span class="line"><span class="cl"><span class="gi">+      - --ws_storage_http_port=19779
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>       - --data_path=/data/meta
</span></span><span class="line"><span class="cl">       - --log_dir=/logs
</span></span><span class="line"><span class="cl">       - --v=0
</span></span><span class="line"><span class="cl"><span class="gu">@@ -34,81 +36,14 @@ services:
</span></span></span><span class="line"><span class="cl"><span class="gu"></span>     cap_add:
</span></span><span class="line"><span class="cl">       - SYS_PTRACE
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="gd">-  metad1:
</span></span></span><span class="line"><span class="cl"><span class="gd">-    image: vesoft/nebula-metad:v2.0.0
</span></span></span><span class="line"><span class="cl"><span class="gd">-    environment:
</span></span></span><span class="line"><span class="cl"><span class="gd">-      USER: root
</span></span></span><span class="line"><span class="cl"><span class="gd">-      TZ:   &#34;${TZ}&#34;
</span></span></span><span class="line"><span class="cl"><span class="gd">-    command:
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - --meta_server_addrs=metad0:9559,metad1:9559,metad2:9559
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - --local_ip=metad1
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - --ws_ip=metad1
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - --port=9559
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - --ws_http_port=19559
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - --data_path=/data/meta
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - --log_dir=/logs
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - --v=0
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - --minloglevel=0
</span></span></span><span class="line"><span class="cl"><span class="gd">-    healthcheck:
</span></span></span><span class="line"><span class="cl"><span class="gd">-      test: [&#34;CMD&#34;, &#34;curl&#34;, &#34;-sf&#34;, &#34;http://metad1:19559/status&#34;]
</span></span></span><span class="line"><span class="cl"><span class="gd">-      interval: 30s
</span></span></span><span class="line"><span class="cl"><span class="gd">-      timeout: 10s
</span></span></span><span class="line"><span class="cl"><span class="gd">-      retries: 3
</span></span></span><span class="line"><span class="cl"><span class="gd">-      start_period: 20s
</span></span></span><span class="line"><span class="cl"><span class="gd">-    ports:
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - 9559
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - 19559
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - 19560
</span></span></span><span class="line"><span class="cl"><span class="gd">-    volumes:
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - ./data/meta1:/data/meta
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - ./logs/meta1:/logs
</span></span></span><span class="line"><span class="cl"><span class="gd">-    networks:
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - nebula-net
</span></span></span><span class="line"><span class="cl"><span class="gd">-    restart: on-failure
</span></span></span><span class="line"><span class="cl"><span class="gd">-    cap_add:
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - SYS_PTRACE
</span></span></span><span class="line"><span class="cl"><span class="gd">-
</span></span></span><span class="line"><span class="cl"><span class="gd">-  metad2:
</span></span></span><span class="line"><span class="cl"><span class="gd">-    image: vesoft/nebula-metad:v2.0.0
</span></span></span><span class="line"><span class="cl"><span class="gd">-    environment:
</span></span></span><span class="line"><span class="cl"><span class="gd">-      USER: root
</span></span></span><span class="line"><span class="cl"><span class="gd">-      TZ:   &#34;${TZ}&#34;
</span></span></span><span class="line"><span class="cl"><span class="gd">-    command:
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - --meta_server_addrs=metad0:9559,metad1:9559,metad2:9559
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - --local_ip=metad2
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - --ws_ip=metad2
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - --port=9559
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - --ws_http_port=19559
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - --data_path=/data/meta
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - --log_dir=/logs
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - --v=0
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - --minloglevel=0
</span></span></span><span class="line"><span class="cl"><span class="gd">-    healthcheck:
</span></span></span><span class="line"><span class="cl"><span class="gd">-      test: [&#34;CMD&#34;, &#34;curl&#34;, &#34;-sf&#34;, &#34;http://metad2:19559/status&#34;]
</span></span></span><span class="line"><span class="cl"><span class="gd">-      interval: 30s
</span></span></span><span class="line"><span class="cl"><span class="gd">-      timeout: 10s
</span></span></span><span class="line"><span class="cl"><span class="gd">-      retries: 3
</span></span></span><span class="line"><span class="cl"><span class="gd">-      start_period: 20s
</span></span></span><span class="line"><span class="cl"><span class="gd">-    ports:
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - 9559
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - 19559
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - 19560
</span></span></span><span class="line"><span class="cl"><span class="gd">-    volumes:
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - ./data/meta2:/data/meta
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - ./logs/meta2:/logs
</span></span></span><span class="line"><span class="cl"><span class="gd">-    networks:
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - nebula-net
</span></span></span><span class="line"><span class="cl"><span class="gd">-    restart: on-failure
</span></span></span><span class="line"><span class="cl"><span class="gd">-    cap_add:
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - SYS_PTRACE
</span></span></span><span class="line"><span class="cl"><span class="gd">-
</span></span></span><span class="line"><span class="cl"><span class="gd"></span>   storaged0:
</span></span><span class="line"><span class="cl">     image: vesoft/nebula-storaged:v2.0.0
</span></span><span class="line"><span class="cl">     environment:
</span></span><span class="line"><span class="cl">       USER: root
</span></span><span class="line"><span class="cl">       TZ:   &#34;${TZ}&#34;
</span></span><span class="line"><span class="cl">     command:
</span></span><span class="line"><span class="cl"><span class="gd">-      - --meta_server_addrs=metad0:9559,metad1:9559,metad2:9559
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+      - --meta_server_addrs=metad0:9559
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>       - --local_ip=storaged0
</span></span><span class="line"><span class="cl">       - --ws_ip=storaged0
</span></span><span class="line"><span class="cl">       - --port=9779
</span></span><span class="line"><span class="cl"><span class="gu">@@ -119,8 +54,8 @@ services:
</span></span></span><span class="line"><span class="cl"><span class="gu"></span>       - --minloglevel=0
</span></span><span class="line"><span class="cl">     depends_on:
</span></span><span class="line"><span class="cl">       - metad0
</span></span><span class="line"><span class="cl"><span class="gd">-      - metad1
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - metad2
</span></span></span><span class="line"><span class="cl"><span class="gd"></span>     healthcheck:
</span></span><span class="line"><span class="cl">       test: [&#34;CMD&#34;, &#34;curl&#34;, &#34;-sf&#34;, &#34;http://storaged0:19779/status&#34;]
</span></span><span class="line"><span class="cl">       interval: 30s
</span></span><span class="line"><span class="cl"><span class="gu">@@ -146,7 +81,7 @@ services:
</span></span></span><span class="line"><span class="cl"><span class="gu"></span>       USER: root
</span></span><span class="line"><span class="cl">       TZ:   &#34;${TZ}&#34;
</span></span><span class="line"><span class="cl">     command:
</span></span><span class="line"><span class="cl"><span class="gd">-      - --meta_server_addrs=metad0:9559,metad1:9559,metad2:9559
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+      - --meta_server_addrs=metad0:9559
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>       - --local_ip=storaged1
</span></span><span class="line"><span class="cl">       - --ws_ip=storaged1
</span></span><span class="line"><span class="cl">       - --port=9779
</span></span><span class="line"><span class="cl"><span class="gu">@@ -157,8 +92,8 @@ services:
</span></span></span><span class="line"><span class="cl"><span class="gu"></span>       - --minloglevel=0
</span></span><span class="line"><span class="cl">     depends_on:
</span></span><span class="line"><span class="cl">       - metad0
</span></span><span class="line"><span class="cl"><span class="gd">-      - metad1
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - metad2
</span></span></span><span class="line"><span class="cl"><span class="gd"></span>     healthcheck:
</span></span><span class="line"><span class="cl">       test: [&#34;CMD&#34;, &#34;curl&#34;, &#34;-sf&#34;, &#34;http://storaged1:19779/status&#34;]
</span></span><span class="line"><span class="cl">       interval: 30s
</span></span><span class="line"><span class="cl"><span class="gu">@@ -184,7 +119,7 @@ services:
</span></span></span><span class="line"><span class="cl"><span class="gu"></span>       USER: root
</span></span><span class="line"><span class="cl">       TZ:   &#34;${TZ}&#34;
</span></span><span class="line"><span class="cl">     command:
</span></span><span class="line"><span class="cl"><span class="gd">-      - --meta_server_addrs=metad0:9559,metad1:9559,metad2:9559
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+      - --meta_server_addrs=metad0:9559
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>       - --local_ip=storaged2
</span></span><span class="line"><span class="cl">       - --ws_ip=storaged2
</span></span><span class="line"><span class="cl">       - --port=9779
</span></span><span class="line"><span class="cl"><span class="gu">@@ -195,8 +130,8 @@ services:
</span></span></span><span class="line"><span class="cl"><span class="gu"></span>       - --minloglevel=0
</span></span><span class="line"><span class="cl">     depends_on:
</span></span><span class="line"><span class="cl">       - metad0
</span></span><span class="line"><span class="cl"><span class="gd">-      - metad1
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - metad2
</span></span></span><span class="line"><span class="cl"><span class="gd"></span>     healthcheck:
</span></span><span class="line"><span class="cl">       test: [&#34;CMD&#34;, &#34;curl&#34;, &#34;-sf&#34;, &#34;http://storaged2:19779/status&#34;]
</span></span><span class="line"><span class="cl">       interval: 30s
</span></span><span class="line"><span class="cl"><span class="gu">@@ -222,17 +157,19 @@ services:
</span></span></span><span class="line"><span class="cl"><span class="gu"></span>       USER: root
</span></span><span class="line"><span class="cl">       TZ:   &#34;${TZ}&#34;
</span></span><span class="line"><span class="cl">     command:
</span></span><span class="line"><span class="cl"><span class="gd">-      - --meta_server_addrs=metad0:9559,metad1:9559,metad2:9559
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+      - --meta_server_addrs=metad0:9559
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>       - --port=9669
</span></span><span class="line"><span class="cl">       - --ws_ip=graphd
</span></span><span class="line"><span class="cl">       - --ws_http_port=19669
</span></span><span class="line"><span class="cl"><span class="gi">+      - --ws_meta_http_port=19559
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>       - --log_dir=/logs
</span></span><span class="line"><span class="cl">       - --v=0
</span></span><span class="line"><span class="cl">       - --minloglevel=0
</span></span><span class="line"><span class="cl">     depends_on:
</span></span><span class="line"><span class="cl">       - metad0
</span></span><span class="line"><span class="cl"><span class="gd">-      - metad1
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - metad2
</span></span></span><span class="line"><span class="cl"><span class="gd"></span>     healthcheck:
</span></span><span class="line"><span class="cl">       test: [&#34;CMD&#34;, &#34;curl&#34;, &#34;-sf&#34;, &#34;http://graphd:19669/status&#34;]
</span></span><span class="line"><span class="cl">       interval: 30s
</span></span><span class="line"><span class="cl"><span class="gu">@@ -257,17 +194,19 @@ services:
</span></span></span><span class="line"><span class="cl"><span class="gu"></span>       USER: root
</span></span><span class="line"><span class="cl">       TZ:   &#34;${TZ}&#34;
</span></span><span class="line"><span class="cl">     command:
</span></span><span class="line"><span class="cl"><span class="gd">-      - --meta_server_addrs=metad0:9559,metad1:9559,metad2:9559
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+      - --meta_server_addrs=metad0:9559
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>       - --port=9669
</span></span><span class="line"><span class="cl">       - --ws_ip=graphd1
</span></span><span class="line"><span class="cl">       - --ws_http_port=19669
</span></span><span class="line"><span class="cl"><span class="gi">+      - --ws_meta_http_port=19559
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>       - --log_dir=/logs
</span></span><span class="line"><span class="cl">       - --v=0
</span></span><span class="line"><span class="cl">       - --minloglevel=0
</span></span><span class="line"><span class="cl">     depends_on:
</span></span><span class="line"><span class="cl">       - metad0
</span></span><span class="line"><span class="cl"><span class="gd">-      - metad1
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - metad2
</span></span></span><span class="line"><span class="cl"><span class="gd"></span>     healthcheck:
</span></span><span class="line"><span class="cl">       test: [&#34;CMD&#34;, &#34;curl&#34;, &#34;-sf&#34;, &#34;http://graphd1:19669/status&#34;]
</span></span><span class="line"><span class="cl">       interval: 30s
</span></span><span class="line"><span class="cl"><span class="gu">@@ -292,17 +231,21 @@ services:
</span></span></span><span class="line"><span class="cl"><span class="gu"></span>       USER: root
</span></span><span class="line"><span class="cl">       TZ:   &#34;${TZ}&#34;
</span></span><span class="line"><span class="cl">     command:
</span></span><span class="line"><span class="cl"><span class="gd">-      - --meta_server_addrs=metad0:9559,metad1:9559,metad2:9559
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+      - --meta_server_addrs=metad0:9559
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>       - --port=9669
</span></span><span class="line"><span class="cl">       - --ws_ip=graphd2
</span></span><span class="line"><span class="cl">       - --ws_http_port=19669
</span></span><span class="line"><span class="cl"><span class="gi">+      - --ws_meta_http_port=19559
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>       - --log_dir=/logs
</span></span><span class="line"><span class="cl">       - --v=0
</span></span><span class="line"><span class="cl">       - --minloglevel=0
</span></span><span class="line"><span class="cl"><span class="gi">+      - --storage_client_timeout_ms=60000
</span></span></span><span class="line"><span class="cl"><span class="gi">+      - --local_config=true
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>     depends_on:
</span></span><span class="line"><span class="cl">       - metad0
</span></span><span class="line"><span class="cl"><span class="gd">-      - metad1
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - metad2
</span></span></span><span class="line"><span class="cl"><span class="gd"></span>     healthcheck:
</span></span><span class="line"><span class="cl">       test: [&#34;CMD&#34;, &#34;curl&#34;, &#34;-sf&#34;, &#34;http://graphd2:19669/status&#34;]
</span></span><span class="line"><span class="cl">       interval: 30s
</span></span><span class="line"><span class="cl"><span class="gu">@@ -323,3 +266,4 @@ services:
</span></span></span><span class="line"><span class="cl"><span class="gu"></span>
</span></span><span class="line"><span class="cl"> networks:
</span></span><span class="line"><span class="cl">   nebula-net:
</span></span><span class="line"><span class="cl"><span class="gi">+    external: true
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="附录二" class="headerLink">
    <a href="#%e9%99%84%e5%bd%95%e4%ba%8c" class="header-mark"></a>7.2 附录二</h3><p><a href="https://github.com/big-data-europe/docker-hadoop" target="_blank" rel="noopener noreferrer">https://github.com/big-data-europe/docker-hadoop</a> 的 <code>docker-compose.yml</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl"><span class="gh">diff --git a/docker-compose.yml b/docker-compose.yml
</span></span></span><span class="line"><span class="cl"><span class="gh">index ed40dc6..66ff1f4 100644
</span></span></span><span class="line"><span class="cl"><span class="gh"></span><span class="gd">--- a/docker-compose.yml
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+++ b/docker-compose.yml
</span></span></span><span class="line"><span class="cl"><span class="gi"></span><span class="gu">@@ -14,6 +14,8 @@ services:
</span></span></span><span class="line"><span class="cl"><span class="gu"></span>       - CLUSTER_NAME=test
</span></span><span class="line"><span class="cl">     env_file:
</span></span><span class="line"><span class="cl">       - ./hadoop.env
</span></span><span class="line"><span class="cl"><span class="gi">+    networks:
</span></span></span><span class="line"><span class="cl"><span class="gi">+      - nebula-net
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>
</span></span><span class="line"><span class="cl">   datanode:
</span></span><span class="line"><span class="cl">     image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
</span></span><span class="line"><span class="cl"><span class="gu">@@ -25,6 +27,8 @@ services:
</span></span></span><span class="line"><span class="cl"><span class="gu"></span>       SERVICE_PRECONDITION: &#34;namenode:9870&#34;
</span></span><span class="line"><span class="cl">     env_file:
</span></span><span class="line"><span class="cl">       - ./hadoop.env
</span></span><span class="line"><span class="cl"><span class="gi">+    networks:
</span></span></span><span class="line"><span class="cl"><span class="gi">+      - nebula-net
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>
</span></span><span class="line"><span class="cl">   resourcemanager:
</span></span><span class="line"><span class="cl">     image: bde2020/hadoop-resourcemanager:2.0.0-hadoop3.2.1-java8
</span></span><span class="line"><span class="cl"><span class="gu">@@ -34,6 +38,8 @@ services:
</span></span></span><span class="line"><span class="cl"><span class="gu"></span>       SERVICE_PRECONDITION: &#34;namenode:9000 namenode:9870 datanode:9864&#34;
</span></span><span class="line"><span class="cl">     env_file:
</span></span><span class="line"><span class="cl">       - ./hadoop.env
</span></span><span class="line"><span class="cl"><span class="gi">+    networks:
</span></span></span><span class="line"><span class="cl"><span class="gi">+      - nebula-net
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>
</span></span><span class="line"><span class="cl">   nodemanager1:
</span></span><span class="line"><span class="cl">     image: bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8
</span></span><span class="line"><span class="cl"><span class="gu">@@ -43,6 +49,8 @@ services:
</span></span></span><span class="line"><span class="cl"><span class="gu"></span>       SERVICE_PRECONDITION: &#34;namenode:9000 namenode:9870 datanode:9864 resourcemanager:8088&#34;
</span></span><span class="line"><span class="cl">     env_file:
</span></span><span class="line"><span class="cl">       - ./hadoop.env
</span></span><span class="line"><span class="cl"><span class="gi">+    networks:
</span></span></span><span class="line"><span class="cl"><span class="gi">+      - nebula-net
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>
</span></span><span class="line"><span class="cl">   historyserver:
</span></span><span class="line"><span class="cl">     image: bde2020/hadoop-historyserver:2.0.0-hadoop3.2.1-java8
</span></span><span class="line"><span class="cl"><span class="gu">@@ -54,8 +62,14 @@ services:
</span></span></span><span class="line"><span class="cl"><span class="gu"></span>       - hadoop_historyserver:/hadoop/yarn/timeline
</span></span><span class="line"><span class="cl">     env_file:
</span></span><span class="line"><span class="cl">       - ./hadoop.env
</span></span><span class="line"><span class="cl"><span class="gi">+    networks:
</span></span></span><span class="line"><span class="cl"><span class="gi">+      - nebula-net
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>
</span></span><span class="line"><span class="cl"> volumes:
</span></span><span class="line"><span class="cl">   hadoop_namenode:
</span></span><span class="line"><span class="cl">   hadoop_datanode:
</span></span><span class="line"><span class="cl">   hadoop_historyserver:
</span></span><span class="line"><span class="cl"><span class="gi">+
</span></span></span><span class="line"><span class="cl"><span class="gi">+networks:
</span></span></span><span class="line"><span class="cl"><span class="gi">+  nebula-net:
</span></span></span><span class="line"><span class="cl"><span class="gi">+    external: true
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="附录三" class="headerLink">
    <a href="#%e9%99%84%e5%bd%95%e4%b8%89" class="header-mark"></a>7.3 附录三</h3><p><code>nebula-exchange-sst.conf</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span><span class="lnt">88
</span><span class="lnt">89
</span><span class="lnt">90
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c"># Spark relation config</span>
</span></span><span class="line"><span class="cl">  <span class="nx">spark</span><span class="err">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">app</span><span class="err">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">name</span><span class="err">:</span> <span class="nx">Nebula</span> <span class="nx">Exchange</span> <span class="mf">2.1</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">master</span><span class="err">:</span><span class="nx">local</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">driver</span><span class="err">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">cores</span><span class="err">:</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">      <span class="nx">maxResultSize</span><span class="err">:</span> <span class="mi">1</span><span class="nx">G</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">executor</span><span class="err">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">memory</span><span class="err">:</span><span class="mi">1</span><span class="nx">G</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">cores</span><span class="err">:</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">max</span><span class="err">:</span> <span class="mi">16</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c"># Nebula Graph relation config</span>
</span></span><span class="line"><span class="cl">  <span class="nx">nebula</span><span class="err">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">address</span><span class="err">:</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">graph</span><span class="err">:</span><span class="p">[</span><span class="s2">&#34;192.168.8.128:9669&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">      <span class="nx">meta</span><span class="err">:</span><span class="p">[</span><span class="s2">&#34;192.168.8.128:49377&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">user</span><span class="err">:</span> <span class="nx">root</span>
</span></span><span class="line"><span class="cl">    <span class="nx">pswd</span><span class="err">:</span> <span class="nx">nebula</span>
</span></span><span class="line"><span class="cl">    <span class="nx">space</span><span class="err">:</span> <span class="nx">sst</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c"># parameters for SST import, not required</span>
</span></span><span class="line"><span class="cl">    <span class="nx">path</span><span class="err">:</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">local</span><span class="err">:</span><span class="s2">&#34;/tmp&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">remote</span><span class="err">:</span><span class="s2">&#34;/sst&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">hdfs</span><span class="p">.</span><span class="nx">namenode</span><span class="err">:</span> <span class="s2">&#34;hdfs://192.168.8.128:9000&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c"># nebula client connection parameters</span>
</span></span><span class="line"><span class="cl">    <span class="nx">connection</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="c"># socket connect &amp; execute timeout, unit: millisecond</span>
</span></span><span class="line"><span class="cl">      <span class="nx">timeout</span><span class="err">:</span> <span class="mi">30000</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">error</span><span class="err">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="c"># max number of failures, if the number of failures is bigger than max, then exit the application.</span>
</span></span><span class="line"><span class="cl">      <span class="nx">max</span><span class="err">:</span> <span class="mi">32</span>
</span></span><span class="line"><span class="cl">      <span class="c"># failed import job will be recorded in output path</span>
</span></span><span class="line"><span class="cl">      <span class="nx">output</span><span class="err">:</span> <span class="err">/</span><span class="nx">tmp</span><span class="err">/</span><span class="nx">errors</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c"># use google&#39;s RateLimiter to limit the requests send to NebulaGraph</span>
</span></span><span class="line"><span class="cl">    <span class="nx">rate</span><span class="err">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="c"># the stable throughput of RateLimiter</span>
</span></span><span class="line"><span class="cl">      <span class="nx">limit</span><span class="err">:</span> <span class="mi">1024</span>
</span></span><span class="line"><span class="cl">      <span class="c"># Acquires a permit from RateLimiter, unit: MILLISECONDS</span>
</span></span><span class="line"><span class="cl">      <span class="c"># if it can&#39;t be obtained within the specified timeout, then give up the request.</span>
</span></span><span class="line"><span class="cl">      <span class="nx">timeout</span><span class="err">:</span> <span class="mi">1000</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c"># Processing tags</span>
</span></span><span class="line"><span class="cl">  <span class="c"># There are tag config examples for different dataSources.</span>
</span></span><span class="line"><span class="cl">  <span class="nx">tags</span><span class="err">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c"># HDFS csv</span>
</span></span><span class="line"><span class="cl">    <span class="c"># Import mode is sst, just change type.sink to client if you want to use client import mode.</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">name</span><span class="err">:</span> <span class="nx">player</span>
</span></span><span class="line"><span class="cl">      <span class="nx">type</span><span class="err">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">source</span><span class="err">:</span> <span class="nx">csv</span>
</span></span><span class="line"><span class="cl">        <span class="nx">sink</span><span class="err">:</span> <span class="nx">sst</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="nx">path</span><span class="err">:</span> <span class="s2">&#34;file:///root/player.csv&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="c"># if your csv file has no header, then use _c0,_c1,_c2,.. to indicate fields</span>
</span></span><span class="line"><span class="cl">      <span class="nx">fields</span><span class="err">:</span> <span class="p">[</span><span class="nx">_c1</span><span class="p">,</span> <span class="nx">_c2</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">      <span class="nx">nebula</span><span class="p">.</span><span class="nx">fields</span><span class="err">:</span> <span class="p">[</span><span class="nx">name</span><span class="p">,</span> <span class="nx">age</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">      <span class="nx">vertex</span><span class="err">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">field</span><span class="err">:</span><span class="nx">_c0</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="nx">separator</span><span class="err">:</span> <span class="s2">&#34;,&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="nx">header</span><span class="err">:</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">      <span class="nx">batch</span><span class="err">:</span> <span class="mi">256</span>
</span></span><span class="line"><span class="cl">      <span class="nx">partition</span><span class="err">:</span> <span class="mi">32</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>Nebula Holdshare Dataset，图数据库的股权穿透</title>
    <link>https://siwei.io/nebula-holdshare-dataset/</link>
    <pubDate>Sat, 28 Aug 2021 13:54:03 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/nebula-holdshare-dataset/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/nebula-holdshare-dataset/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>A demo of Shareholding Breakthrough with Distributed open-source Graph Database: Nebula Graph. 图数据库应用示例：股权关系穿透</p>
</blockquote>
<p>Related GitHub Repo: <a href="https://github.com/wey-gu/nebula-shareholding-example" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/nebula-shareholding-example</a></p>
<blockquote>
<p>更新：在这个数据集生成的工作基础上，我又做了一个全栈示例项目 👉🏻 <a href="https://siwei.io/corp-rel-graph/" target="_blank" rel="noopener noreferrer">https://siwei.io/corp-rel-graph/</a></p>
</blockquote>
<blockquote>
<p>这个项目我也做成了互动教程，可以按照这里的步骤搭建起来 👉🏻 <a href="https://siwei.io/cources/" target="_blank" rel="noopener noreferrer">https://siwei.io/cources/</a></p>
<p>I created the Katacoda Interactive Env for this project 👉🏻 <a href="https://siwei.io/cources/" target="_blank" rel="noopener noreferrer">https://siwei.io/cources/</a></p>
</blockquote>
<blockquote>
<p>您也可以在 Nebula Playground 上直接玩这个数据集啦：https://nebula-graph.com.cn/demo/</p>
<p>Now you can play with the data on Nebula Playground: <a href="https://nebula-graph.io/demo/" target="_blank" rel="noopener noreferrer">https://nebula-graph.io/demo/</a></p>
</blockquote>
<p>This is a demo of Shareholding Relationship Analysis with Distributed open-source Graph Database: Nebula Graph.</p>
<h2 id="data" class="headerLink">
    <a href="#data" class="header-mark"></a>1 Data</h2><h3 id="data-modeling" class="headerLink">
    <a href="#data-modeling" class="header-mark"></a>1.1 Data Modeling</h3><p><a class="lightgallery" href="/nebula-holdshare-dataset/modeling.webp" title="modeling" data-thumbnail="/nebula-holdshare-dataset/modeling.webp">
        
    </a></p>
<p>There are various kinds of relationships when we checking companies&rsquo; shareholding breakthrough, here let&rsquo;s simplify it with only two kind of entities: person and corp, and with following relationship types.</p>
<ul>
<li><code>person</code> can hold a <code>corp</code> in <code>{share} %</code></li>
<li><code>person</code> can be relative with another <code>person</code></li>
<li><code>corp</code> can hold another <code>corp</code> in <code>{share} %</code></li>
<li><code>corp</code> can be a branch of another <code>corp</code></li>
<li><code>person</code> can be as a role of a <code>corp</code></li>
</ul>
<p>Below is the lines to reflect this graph modele in Nebula Graph, it&rsquo;s quite straightforward, right?</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="n">person</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="n">string</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="n">corp</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="n">string</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">role_as</span><span class="p">(</span><span class="k">role</span><span class="w"> </span><span class="n">string</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">is_branch_of</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">hold_share</span><span class="p">(</span><span class="k">share</span><span class="w"> </span><span class="nb">float</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">reletive_with</span><span class="p">(</span><span class="n">degree</span><span class="w"> </span><span class="nb">int</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="data-generation" class="headerLink">
    <a href="#data-generation" class="header-mark"></a>1.2 Data Generation</h3><p>We just randomly generate some data to help with this demo, you can call <code>data_generator.py</code> directly to generate or reuse what&rsquo;s already done under <code>data_sample</code> folder.</p>
<p>The generated data are records to be fit in above data model from below <code>.csv</code> files.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ pip install <span class="nv">Faker</span><span class="o">==</span>2.0.5 <span class="nv">pydbgen</span><span class="o">==</span>1.0.5
</span></span><span class="line"><span class="cl">$ python3 data_generator.py
</span></span><span class="line"><span class="cl">$ ls -l data
</span></span><span class="line"><span class="cl">total <span class="m">1688</span>
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> weyl  staff   <span class="m">23941</span> Jul <span class="m">14</span> 13:28 corp.csv
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> weyl  staff    <span class="m">1277</span> Jul <span class="m">14</span> 13:26 corp_rel.csv
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> weyl  staff    <span class="m">3048</span> Jul <span class="m">14</span> 13:26 corp_share.csv
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> weyl  staff  <span class="m">211661</span> Jul <span class="m">14</span> 13:26 person.csv
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> weyl  staff  <span class="m">179770</span> Jul <span class="m">14</span> 13:26 person_corp_role.csv
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> weyl  staff  <span class="m">322965</span> Jul <span class="m">14</span> 13:26 person_corp_share.csv
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> weyl  staff   <span class="m">17689</span> Jul <span class="m">14</span> 13:26 person_rel.csv
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="data-import" class="headerLink">
    <a href="#data-import" class="header-mark"></a>1.3 Data Import</h3><p>With those data in <code>.csv</code> files, we can easily import them into a Nebula Graph Cluster with the help of <a href="https://github.com/vesoft-inc/nebula-importer" target="_blank" rel="noopener noreferrer">Nebula-Importer</a>. <code>nebula-importer.yaml</code> in this repo describes rules and configurations on how this import will be done by the importer.</p>
<p>For Nebula Graph Database, plesae refer to <a href="https://docs.nebula-graph.io/" target="_blank" rel="noopener noreferrer">Doc</a> , <a href="https://docs.nebula-graph.com.cn/" target="_blank" rel="noopener noreferrer">Doc-CN</a> to deploy on any Linux Servers, for study and test, you can run it via Docker following the Quick Start Chapter of the documentation.</p>
<p>For Nebula-Importer, if you already have Docker env, you can run it as the following without installing anything. Or, if you prefer to install it, it&rsquo;s quite easy as it&rsquo;s written in Golang and you can run its single file binary quite easily, go check both Documentation and Nebula-Importer Repo: <a href="https://github.com/vesoft-inc/nebula-importer" target="_blank" rel="noopener noreferrer">https://github.com/vesoft-inc/nebula-importer</a>.</p>
<blockquote>
<p>Let&rsquo;s start! Below is the commands I used to import our data into a Nebula Graph Database.</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># put generated data &amp; nebula-importor.yaml to nebula-importer server</span>
</span></span><span class="line"><span class="cl">$ scp -r data nebula_graph_host:~
</span></span><span class="line"><span class="cl">$ scp nebula-importer.yaml data nebula_graph_host:~/data
</span></span><span class="line"><span class="cl">$ ssh nebula_graph_host
</span></span><span class="line"><span class="cl">$ ls -l <span class="si">${</span><span class="nv">HOME</span><span class="si">}</span>/data
</span></span><span class="line"><span class="cl">total <span class="m">756</span>
</span></span><span class="line"><span class="cl">-rw-r--r--. <span class="m">1</span> wei.gu wei.gu  <span class="m">23941</span> Jul <span class="m">14</span> 05:44 corp.csv
</span></span><span class="line"><span class="cl">-rw-r--r--. <span class="m">1</span> wei.gu wei.gu   <span class="m">1277</span> Jul <span class="m">14</span> 05:44 corp_rel.csv
</span></span><span class="line"><span class="cl">-rw-r--r--. <span class="m">1</span> wei.gu wei.gu   <span class="m">3048</span> Jul <span class="m">14</span> 05:44 corp_share.csv
</span></span><span class="line"><span class="cl">-rw-r--r--. <span class="m">1</span> wei.gu wei.gu   <span class="m">3893</span> Jul <span class="m">14</span> 05:44 nebula-importer.yaml
</span></span><span class="line"><span class="cl">-rw-r--r--. <span class="m">1</span> wei.gu wei.gu <span class="m">211661</span> Jul <span class="m">14</span> 05:44 person.csv
</span></span><span class="line"><span class="cl">-rw-r--r--. <span class="m">1</span> wei.gu wei.gu <span class="m">179770</span> Jul <span class="m">14</span> 05:44 person_corp_role.csv
</span></span><span class="line"><span class="cl">-rw-r--r--. <span class="m">1</span> wei.gu wei.gu <span class="m">322965</span> Jul <span class="m">14</span> 05:44 person_corp_share.csv
</span></span><span class="line"><span class="cl">-rw-r--r--. <span class="m">1</span> wei.gu wei.gu  <span class="m">17689</span> Jul <span class="m">14</span> 05:44 person_rel.csv
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># import data into our nebula graph database</span>
</span></span><span class="line"><span class="cl">$ docker run --rm -ti <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --network<span class="o">=</span>nebula-docker-compose_nebula-net <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v <span class="si">${</span><span class="nv">HOME</span><span class="si">}</span>/data/nebula-importer.yaml:/root/nebula-importer.yaml <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v <span class="si">${</span><span class="nv">HOME</span><span class="si">}</span>/data:/root <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    vesoft/nebula-importer:v2 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --config /root/nebula-importer.yaml
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">2021/07/14 05:49:32 --- START OF NEBULA IMPORTER ---
</span></span><span class="line"><span class="cl">2021/07/14 05:49:32 <span class="o">[</span>WARN<span class="o">]</span> config.go:491: Not <span class="nb">set</span> files<span class="o">[</span>0<span class="o">]</span>.schema.vertex.vid.Type, reset to default value <span class="sb">`</span>string<span class="err">&#39;</span>
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">2021/07/14 05:49:43 <span class="o">[</span>INFO<span class="o">]</span> reader.go:180: Total lines of file<span class="o">(</span>/root/person_corp_role.csv<span class="o">)</span> is: 5000, error lines: <span class="m">1287</span>
</span></span><span class="line"><span class="cl">2021/07/14 05:49:43 <span class="o">[</span>INFO<span class="o">]</span> statsmgr.go:61: Done<span class="o">(</span>/root/person_corp_role.csv<span class="o">)</span>: Time<span class="o">(</span>11.39s<span class="o">)</span>, Finished<span class="o">(</span>12523<span class="o">)</span>, Failed<span class="o">(</span>0<span class="o">)</span>, Latency AVG<span class="o">(</span>1514us<span class="o">)</span>, Batches Req AVG<span class="o">(</span>1824us<span class="o">)</span>, Rows AVG<span class="o">(</span>1099.43/s<span class="o">)</span>
</span></span><span class="line"><span class="cl">2021/07/14 05:49:47 <span class="o">[</span>INFO<span class="o">]</span> statsmgr.go:61: Tick: Time<span class="o">(</span>15.00s<span class="o">)</span>, Finished<span class="o">(</span>25807<span class="o">)</span>, Failed<span class="o">(</span>0<span class="o">)</span>, Latency AVG<span class="o">(</span>1500us<span class="o">)</span>, Batches Req AVG<span class="o">(</span>1805us<span class="o">)</span>, Rows AVG<span class="o">(</span>1720.46/s<span class="o">)</span>
</span></span><span class="line"><span class="cl">2021/07/14 05:49:48 <span class="o">[</span>INFO<span class="o">]</span> reader.go:180: Total lines of file<span class="o">(</span>/root/person.csv<span class="o">)</span> is: 10000, error lines: <span class="m">0</span>
</span></span><span class="line"><span class="cl">2021/07/14 05:49:48 <span class="o">[</span>INFO<span class="o">]</span> statsmgr.go:61: Done<span class="o">(</span>/root/person.csv<span class="o">)</span>: Time<span class="o">(</span>16.10s<span class="o">)</span>, Finished<span class="o">(</span>29731<span class="o">)</span>, Failed<span class="o">(</span>0<span class="o">)</span>, Latency AVG<span class="o">(</span>1505us<span class="o">)</span>, Batches Req AVG<span class="o">(</span>1810us<span class="o">)</span>, Rows AVG<span class="o">(</span>1847.17/s<span class="o">)</span>
</span></span><span class="line"><span class="cl">2021/07/14 05:49:50 <span class="o">[</span>INFO<span class="o">]</span> reader.go:180: Total lines of file<span class="o">(</span>/root/person_corp_share.csv<span class="o">)</span> is: 20000, error lines: <span class="m">0</span>
</span></span><span class="line"><span class="cl">2021/07/14 05:49:50 <span class="o">[</span>INFO<span class="o">]</span> statsmgr.go:61: Done<span class="o">(</span>/root/person_corp_share.csv<span class="o">)</span>: Time<span class="o">(</span>17.74s<span class="o">)</span>, Finished<span class="o">(</span>36013<span class="o">)</span>, Failed<span class="o">(</span>0<span class="o">)</span>, Latency AVG<span class="o">(</span>1531us<span class="o">)</span>, Batches Req AVG<span class="o">(</span>1844us<span class="o">)</span>, Rows AVG<span class="o">(</span>2030.29/s<span class="o">)</span>
</span></span><span class="line"><span class="cl">2021/07/14 05:49:50 Finish import data, consume time: 18.25s
</span></span><span class="line"><span class="cl">2021/07/14 05:49:51 --- END OF NEBULA IMPORTER ---
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="corporation-sharehold-relationship-breakthrough" class="headerLink">
    <a href="#corporation-sharehold-relationship-breakthrough" class="header-mark"></a>2 Corporation sharehold relationship breakthrough</h2><h4 id="query-in-ngql" class="headerLink">
    <a href="#query-in-ngql" class="header-mark"></a>2.0.1 Query in nGQL</h4><p>We can query from corp: <code>c_132</code> over <code>*</code>(all relationships) in <code>BIDIRECT</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">GO</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="k">TO</span><span class="w"> </span><span class="mi">3</span><span class="w"> </span><span class="n">STEPS</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="s2">&#34;c_132&#34;</span><span class="w"> </span><span class="n">over</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">BIDIRECT</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Below are lines I call this query in <a href="https://github.com/vesoft-inc/nebula-console" target="_blank" rel="noopener noreferrer">nebula-console</a>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">/ <span class="c1"># nebula-console  -addr 192.168.8.128 -port 9669 -user user -password password</span>
</span></span><span class="line"><span class="cl">2021/07/14 07:07:41 <span class="o">[</span>INFO<span class="o">]</span> connection pool is initialized successfully
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Welcome to Nebula Graph!
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">(</span>user@nebula<span class="o">)</span> <span class="o">[(</span>none<span class="o">)]</span>&gt; show spaces
</span></span><span class="line"><span class="cl">+--------------------+
</span></span><span class="line"><span class="cl"><span class="p">|</span> Name               <span class="p">|</span>
</span></span><span class="line"><span class="cl">+--------------------+
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;basketballplayer&#34;</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl">+--------------------+
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;shareholding&#34;</span>     <span class="p">|</span>
</span></span><span class="line"><span class="cl">+--------------------+
</span></span><span class="line"><span class="cl">Got <span class="m">2</span> rows <span class="o">(</span><span class="nb">time</span> spent 3851/4595 us<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Wed, <span class="m">14</span> Jul <span class="m">2021</span> 07:07:57 UTC
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">(</span>user@nebula<span class="o">)</span> <span class="o">[(</span>none<span class="o">)]</span>&gt; use shareholding
</span></span><span class="line"><span class="cl">Execution succeeded <span class="o">(</span><span class="nb">time</span> spent 1822/2342 us<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Wed, <span class="m">14</span> Jul <span class="m">2021</span> 07:08:02 UTC
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">(</span>user@nebula<span class="o">)</span> <span class="o">[</span>shareholding<span class="o">]</span>&gt; GO <span class="m">1</span> TO <span class="m">3</span> STEPS FROM <span class="s2">&#34;c_132&#34;</span> over * BIDIRECT
</span></span><span class="line"><span class="cl">+--------------+-------------------+-----------------+--------------------+
</span></span><span class="line"><span class="cl"><span class="p">|</span> role_as._dst <span class="p">|</span> is_branch_of._dst <span class="p">|</span> hold_share._dst <span class="p">|</span> reletive_with._dst <span class="p">|</span>
</span></span><span class="line"><span class="cl">+--------------+-------------------+-----------------+--------------------+
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;p_2024&#34;</span>     <span class="p">|</span>                   <span class="p">|</span>                 <span class="p">|</span>                    <span class="p">|</span>
</span></span><span class="line"><span class="cl">+--------------+-------------------+-----------------+--------------------+
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;p_4000&#34;</span>     <span class="p">|</span>                   <span class="p">|</span>                 <span class="p">|</span>                    <span class="p">|</span>
</span></span><span class="line"><span class="cl">+--------------+-------------------+-----------------+--------------------+
</span></span><span class="line"><span class="cl"><span class="p">|</span>              <span class="p">|</span>                   <span class="p">|</span> <span class="s2">&#34;c_245&#34;</span>         <span class="p">|</span>                    <span class="p">|</span>
</span></span><span class="line"><span class="cl">+--------------+-------------------+-----------------+--------------------+
</span></span><span class="line"><span class="cl"><span class="p">|</span>              <span class="p">|</span>                   <span class="p">|</span> <span class="s2">&#34;p_1039&#34;</span>        <span class="p">|</span>                    <span class="p">|</span>
</span></span><span class="line"><span class="cl">+--------------+-------------------+-----------------+--------------------+
</span></span><span class="line"><span class="cl"><span class="p">|</span>              <span class="p">|</span>                   <span class="p">|</span> <span class="s2">&#34;p_1399&#34;</span>        <span class="p">|</span>                    <span class="p">|</span>
</span></span><span class="line"><span class="cl">+--------------+-------------------+-----------------+--------------------+
</span></span><span class="line"><span class="cl"><span class="p">|</span>              <span class="p">|</span>                   <span class="p">|</span> <span class="s2">&#34;p_1767&#34;</span>        <span class="p">|</span>                    <span class="p">|</span>
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">+--------------+-------------------+-----------------+--------------------+
</span></span><span class="line"><span class="cl"><span class="p">|</span>              <span class="p">|</span>                   <span class="p">|</span> <span class="s2">&#34;c_132&#34;</span>         <span class="p">|</span>                    <span class="p">|</span>
</span></span><span class="line"><span class="cl">+--------------+-------------------+-----------------+--------------------+
</span></span><span class="line"><span class="cl"><span class="p">|</span>              <span class="p">|</span>                   <span class="p">|</span> <span class="s2">&#34;c_245&#34;</span>         <span class="p">|</span>                    <span class="p">|</span>
</span></span><span class="line"><span class="cl">+--------------+-------------------+-----------------+--------------------+
</span></span><span class="line"><span class="cl"><span class="p">|</span>              <span class="p">|</span>                   <span class="p">|</span> <span class="s2">&#34;c_25&#34;</span>          <span class="p">|</span>                    <span class="p">|</span>
</span></span><span class="line"><span class="cl">+--------------+-------------------+-----------------+--------------------+
</span></span><span class="line"><span class="cl"><span class="p">|</span>              <span class="p">|</span>                   <span class="p">|</span> <span class="s2">&#34;c_649&#34;</span>         <span class="p">|</span>                    <span class="p">|</span>
</span></span><span class="line"><span class="cl">+--------------+-------------------+-----------------+--------------------+
</span></span><span class="line"><span class="cl"><span class="p">|</span>              <span class="p">|</span>                   <span class="p">|</span> <span class="s2">&#34;c_753&#34;</span>         <span class="p">|</span>                    <span class="p">|</span>
</span></span><span class="line"><span class="cl">+--------------+-------------------+-----------------+--------------------+
</span></span><span class="line"><span class="cl">Got <span class="m">1519</span> rows <span class="o">(</span><span class="nb">time</span> spent 12190/14702 us<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Wed, <span class="m">14</span> Jul <span class="m">2021</span> 07:08:06 UTC
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="in-a-visual-way" class="headerLink">
    <a href="#in-a-visual-way" class="header-mark"></a>2.0.2 In a Visual Way</h4><p>Of course, we can also be done in a visual way:</p>
<p>Step 1, login from Nebula Graph Studio, explore with one VID: <code>c_132</code>:</p>
<p><a class="lightgallery" href="/nebula-holdshare-dataset/studio_explore_0.webp" title="studio_explore_0" data-thumbnail="/nebula-holdshare-dataset/studio_explore_0.webp">
        
    </a></p>
<p>Step2, click this explored vertex dot, then you can explore from select vertices by selecting:</p>
<ul>
<li>Edge Type</li>
<li>Direction</li>
<li>Steps</li>
<li>Query Limit(Optional)</li>
</ul>
<blockquote>
<p>note, you can click the 👁️ icon to add options to show fields of the graph,</p>
</blockquote>
<p><a class="lightgallery" href="/nebula-holdshare-dataset/studio_explore_1.webp" title="studio_explore_1" data-thumbnail="/nebula-holdshare-dataset/studio_explore_1.webp">
        
    </a></p>
<p>Step3, after click Expand, you will see all quried relations with <code>c_132</code> the <code>Chambers LLC</code>.</p>
<p><a class="lightgallery" href="/nebula-holdshare-dataset/studio_explore_2.webp" title="studio_explore_2" data-thumbnail="/nebula-holdshare-dataset/studio_explore_2.webp">
        
    </a></p>
<h2 id="thanks-to-upstream-projects-" class="headerLink">
    <a href="#thanks-to-upstream-projects-" class="header-mark"></a>3 Thanks to Upstream Projects ❤️</h2><ul>
<li>Python Faker <a href="https://github.com/joke2k/faker/" target="_blank" rel="noopener noreferrer">https://github.com/joke2k/faker/</a></li>
<li>pydbgen <a href="https://github.com/tirthajyoti/pydbgen" target="_blank" rel="noopener noreferrer">https://github.com/tirthajyoti/pydbgen</a></li>
<li>Nebula Graph <a href="https://github.com/vesoft-inc/nebula-graph" target="_blank" rel="noopener noreferrer">https://github.com/vesoft-inc/nebula-graph</a></li>
</ul>
<h3 id="tips" class="headerLink">
    <a href="#tips" class="header-mark"></a>3.1 Tips:</h3><ul>
<li>You can deploy nebula graph in one line with:
<ul>
<li><a href="https://siwei.io/nebula-up/" target="_blank" rel="noopener noreferrer">Nebula-UP</a>, it helps install a nebula graph with Docker</li>
<li><a href="https://siwei.io/nebula-operator-kind/" target="_blank" rel="noopener noreferrer">Nebula-operator-KIND</a> , it helps setup all dependencies of Nebula-K8s-Operator including a K8s in Docker, PV Provider and then install a Nebula Graph with Nebula-Operator in K8s.</li>
</ul>
</li>
</ul>
<blockquote>
<p>Image Credit goes to <a href="https://unsplash.com/photos/3fPXt37X6UQ" target="_blank" rel="noopener noreferrer">https://unsplash.com/photos/3fPXt37X6UQ</a></p>
</blockquote>]]></description>
</item><item>
    <title>Nebula Siwi，基于图数据库的智能问答助手</title>
    <link>https://siwei.io/nebula-siwi/</link>
    <pubDate>Sat, 18 Sep 2021 13:53:20 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/nebula-siwi/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/nebula-siwi/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>一个基于图数据库的智能问答助手项目。</p>
</blockquote>
<p>GitHub Repo: <a href="https://github.com/wey-gu/nebula-siwi/" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/nebula-siwi/</a></p>
<blockquote>
<p>这个项目我也做成了互动教程，可以按照这里的步骤搭建起来 👉🏻 <a href="https://siwei.io/cources/" target="_blank" rel="noopener noreferrer">https://siwei.io/cources/</a>
update: 写了一篇完整介绍 Siwi 设计的文章 👉🏻 <a href="https://siwei.io/siwi" target="_blank" rel="noopener noreferrer">https://siwei.io/siwi</a></p>
</blockquote>
<blockquote>
<p>您也可以在 Nebula Playground 上直接玩这个数据集啦：https://nebula-graph.com.cn/demo/</p>
</blockquote>
<h1 id="siwi-the-voice-assistant" class="headerLink">
    <a href="#siwi-the-voice-assistant" class="header-mark"></a>Siwi the voice assistant</h1><p>Siwi (/ˈsɪwi/) is a PoC of Dialog System With Graph Database Backed Knowledge Graph.</p>
<p>For now, it&rsquo;s a demo for task-driven(not general purpose) dialog bots with KG(Knowledge Graph) leveraging Nebula Graph with the minimal/sample dataset from <a href="https://docs.nebula-graph.io/2.0.1/3.ngql-guide/1.nGQL-overview/1.overview/#basketballplayer" target="_blank" rel="noopener noreferrer">Nebula Graph Manual</a>/ <a href="https://docs.nebula-graph.com.cn/2.0.1/3.ngql-guide/1.nGQL-overview/1.overview/#basketballplayer" target="_blank" rel="noopener noreferrer">NG中文手册</a>.</p>
<blockquote>
<p>Tips: Now you can play with the graph online without installing yourself!</p>
<p><a href="https://playground.nebula-graph.io" target="_blank" rel="noopener noreferrer">Nebula Playground</a> | <a href="https://playground.nebula-graph.com.cn" target="_blank" rel="noopener noreferrer">Nebula Playground - China Mainland</a></p>
</blockquote>
<p>Supported queries:</p>
<p><code>relation</code>:</p>
<ul>
<li>What is the relationship between Yao Ming and Lakers?</li>
<li>How does Yao Ming and Lakers connected?</li>
</ul>
<p><code>serving</code>:</p>
<ul>
<li>Which team had Yao Ming served?</li>
</ul>
<p><code>friendship</code>:</p>
<ul>
<li>Whom does Tim Duncan follow?</li>
<li>Who are Yao Ming&rsquo;s friends?</li>
</ul>
<h2 id="deploy-and-try" class="headerLink">
    <a href="#deploy-and-try" class="header-mark"></a>1 Deploy and Try</h2><p>TBD (leveraging docker and nebula-up)</p>
<h2 id="how-does-it-work" class="headerLink">
    <a href="#how-does-it-work" class="header-mark"></a>2 How does it work?</h2><p>This is one of the most naive pipeline for a specific domain/ single purpose chat bot built on a Knowledge Graph.</p>
<h3 id="backend" class="headerLink">
    <a href="#backend" class="header-mark"></a>2.1 Backend</h3><p><a class="lightgallery" href="/nebula-siwi/backend-demo.webp" title="backend-demo" data-thumbnail="/nebula-siwi/backend-demo.webp">
        
    </a></p>
<p>The Backend(Siwi API) is a Flask based API server:</p>
<ul>
<li>
<p>Flask API server takes questions in HTTP POST, and calls the bot API.</p>
</li>
<li>
<p>In bot API part there are classfier(Symentic Parsing, Intent Matching, Slot Filling), and question actors(Call corresponding actions to query Knowledge Graph with intents and slots).</p>
</li>
<li>
<p>Knowledge Graph is built on an Open-Source Graph Database: <a href="https://github.com/vesoft-inc/nebula-graph" target="_blank" rel="noopener noreferrer">Nebula Graph</a></p>
</li>
</ul>
<h3 id="frontend" class="headerLink">
    <a href="#frontend" class="header-mark"></a>2.2 Frontend</h3><p><a class="lightgallery" href="/nebula-siwi/demo.webp" title="demo" data-thumbnail="/nebula-siwi/demo.webp">
        
    </a></p>
<p>The Frontend is a VueJS Single Page Applicaiton(SPA):</p>
<ul>
<li>I reused a Vue Bot UI to showcase a chat window in this human-agent interaction, typing is supported.</li>
<li>In addtion, leverating Chrome&rsquo;s <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Speech_API/Using_the_Web_Speech_API" target="_blank" rel="noopener noreferrer">Web Speech API</a>, a button to listen to human voice is introduced</li>
</ul>
<h3 id="a-query-flow" class="headerLink">
    <a href="#a-query-flow" class="header-mark"></a>2.3 A Query Flow</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">┌────────────────┬──────────────────────────────────────┐
</span></span><span class="line"><span class="cl">│                │                                      │
</span></span><span class="line"><span class="cl">│                │  Speech                              │
</span></span><span class="line"><span class="cl">│     ┌──────────▼──────────┐                           │
</span></span><span class="line"><span class="cl">│     │            Frontend │   Siwi, /ˈsɪwi/           │
</span></span><span class="line"><span class="cl">│     │ Web_Speech_API      │   A PoC of                │
</span></span><span class="line"><span class="cl">│     │                     │   Dialog System           │
</span></span><span class="line"><span class="cl">│     │ Vue.JS              │   With Graph Database     │
</span></span><span class="line"><span class="cl">│     │                     │   Backed Knowledge Graph  │
</span></span><span class="line"><span class="cl">│     └──────────┬──────────┘                           │
</span></span><span class="line"><span class="cl">│                │  Sentence                            │
</span></span><span class="line"><span class="cl">│                │                                      │
</span></span><span class="line"><span class="cl">│   ┌────────────┼──────────────────────────────┐       │
</span></span><span class="line"><span class="cl">│   │            │                              │       │
</span></span><span class="line"><span class="cl">│   │            │              Backend         │       │
</span></span><span class="line"><span class="cl">│   │ ┌──────────▼──────────┐                   │       │
</span></span><span class="line"><span class="cl">│   │ │ Web API, Flask      │   ./app/          │       │
</span></span><span class="line"><span class="cl">│   │ └──────────┬──────────┘                   │       │
</span></span><span class="line"><span class="cl">│   │            │  Sentence    ./bot/          │       │
</span></span><span class="line"><span class="cl">│   │ ┌──────────▼──────────┐                   │       │
</span></span><span class="line"><span class="cl">│   │ │                     │                   │       │
</span></span><span class="line"><span class="cl">│   │ │ Intent matching,    │   ./bot/classifier│       │
</span></span><span class="line"><span class="cl">│   │ │ Symentic Processing │                   │       │
</span></span><span class="line"><span class="cl">│   │ │                     │                   │       │
</span></span><span class="line"><span class="cl">│   │ └──────────┬──────────┘                   │       │
</span></span><span class="line"><span class="cl">│   │            │  Intent, Entities            │       │
</span></span><span class="line"><span class="cl">│   │ ┌──────────▼──────────┐                   │       │
</span></span><span class="line"><span class="cl">│   │ │                     │                   │       │
</span></span><span class="line"><span class="cl">│   │ │ Intent Actor        │   ./bot/actions   │       │
</span></span><span class="line"><span class="cl">│   │ │                     │                   │       │
</span></span><span class="line"><span class="cl">│   └─┴──────────┬──────────┴───────────────────┘       │
</span></span><span class="line"><span class="cl">│                │  Graph Query                         │
</span></span><span class="line"><span class="cl">│     ┌──────────▼──────────┐                           │
</span></span><span class="line"><span class="cl">│     │                     │                           │
</span></span><span class="line"><span class="cl">│     │ Graph Database      │    Nebula Graph           │
</span></span><span class="line"><span class="cl">│     │                     │                           │
</span></span><span class="line"><span class="cl">│     └─────────────────────┘                           │
</span></span><span class="line"><span class="cl">│                                                       │
</span></span><span class="line"><span class="cl">│                                                       │
</span></span><span class="line"><span class="cl">│                                                       │
</span></span><span class="line"><span class="cl">└───────────────────────────────────────────────────────┘
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="source-code-tree" class="headerLink">
    <a href="#source-code-tree" class="header-mark"></a>2.4 Source Code Tree</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── README.md
</span></span><span class="line"><span class="cl">├── src
</span></span><span class="line"><span class="cl">│   ├── siwi                        <span class="c1"># Siwi-API Backend</span>
</span></span><span class="line"><span class="cl">│   │   ├── app                     <span class="c1"># Web Server, take HTTP requests and calls Bot API</span>
</span></span><span class="line"><span class="cl">│   │   └── bot                     <span class="c1"># Bot API</span>
</span></span><span class="line"><span class="cl">│   │       ├── actions             <span class="c1"># Take Intent, Slots, Query Knowledge Graph here</span>
</span></span><span class="line"><span class="cl">│   │       ├── bot                 <span class="c1"># Entrypoint of the Bot API</span>
</span></span><span class="line"><span class="cl">│   │       ├── classifier          <span class="c1"># Symentic Parsing, Intent Matching, Slot Filling</span>
</span></span><span class="line"><span class="cl">│   │       └── <span class="nb">test</span>                <span class="c1"># Example Data Source as equivalent/mocked module</span>
</span></span><span class="line"><span class="cl">│   └── siwi_frontend               <span class="c1"># Browser End</span>
</span></span><span class="line"><span class="cl">│       ├── README.md
</span></span><span class="line"><span class="cl">│       ├── package.json
</span></span><span class="line"><span class="cl">│       └── src
</span></span><span class="line"><span class="cl">│           ├── App.vue             <span class="c1"># Listening to user and pass Questions to Siwi-API</span>
</span></span><span class="line"><span class="cl">│           └── main.js
</span></span><span class="line"><span class="cl">└── wsgi.py
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="manually-run-components" class="headerLink">
    <a href="#manually-run-components" class="header-mark"></a>3 Manually Run Components</h2><h3 id="backend-1" class="headerLink">
    <a href="#backend-1" class="header-mark"></a>3.1 Backend</h3><p>Install and run.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># Install siwi backend</span>
</span></span><span class="line"><span class="cl">python3 -m build
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Configure Nebula Graph Endpoint</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">NG_ENDPOINTS</span><span class="o">=</span>127.0.0.1:9669
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Run Backend API server</span>
</span></span><span class="line"><span class="cl">gunicorn --bind :5000 wsgi --workers <span class="m">1</span> --threads <span class="m">1</span> --timeout <span class="m">60</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>For OpenFunction/ KNative</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker build -t weygu/siwi-api .
</span></span><span class="line"><span class="cl">docker run --rm --name siwi-api <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>     --env<span class="o">=</span><span class="nv">PORT</span><span class="o">=</span><span class="m">5000</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>     --env<span class="o">=</span><span class="nv">NG_ENDPOINTS</span><span class="o">=</span>127.0.0.1:9669 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>     --net<span class="o">=</span>host <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>     weygu/siwi-api
</span></span></code></pre></td></tr></table>
</div>
</div><p>Try it out Web API:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ curl --header <span class="s2">&#34;Content-Type: application/json&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>       --request POST <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>       --data <span class="s1">&#39;{&#34;question&#34;: &#34;What is the relationship between Yao Ming and Lakers?&#34;}&#39;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>       http://192.168.8.128:5000/query <span class="p">|</span> jq
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;answer&#34;</span>: <span class="s2">&#34;There are at least 23 relations between Yao Ming and Lakers, one relation path is: Yao Ming follows Shaquille O&#39;Neal serves Lakers.&#34;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Call Bot Python API:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">nebula2.gclient.net</span> <span class="kn">import</span> <span class="n">ConnectionPool</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">nebula2.Config</span> <span class="kn">import</span> <span class="n">Config</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># define a config</span>
</span></span><span class="line"><span class="cl"><span class="n">config</span> <span class="o">=</span> <span class="n">Config</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">config</span><span class="o">.</span><span class="n">max_connection_pool_size</span> <span class="o">=</span> <span class="mi">10</span>
</span></span><span class="line"><span class="cl"><span class="c1"># init connection pool</span>
</span></span><span class="line"><span class="cl"><span class="n">connection_pool</span> <span class="o">=</span> <span class="n">ConnectionPool</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="c1"># if the given servers are ok, return true, else return false</span>
</span></span><span class="line"><span class="cl"><span class="n">ok</span> <span class="o">=</span> <span class="n">connection_pool</span><span class="o">.</span><span class="n">init</span><span class="p">([(</span><span class="s1">&#39;127.0.0.1&#39;</span><span class="p">,</span> <span class="mi">9669</span><span class="p">)],</span> <span class="n">config</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># import siwi bot</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">siwi.bot</span> <span class="kn">import</span> <span class="n">bot</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># instantiate a bot</span>
</span></span><span class="line"><span class="cl"><span class="n">b</span> <span class="o">=</span> <span class="n">bot</span><span class="o">.</span><span class="n">SiwiBot</span><span class="p">(</span><span class="n">connection_pool</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># make the question query</span>
</span></span><span class="line"><span class="cl"><span class="n">b</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="s2">&#34;Which team had Jonathon Simmons served?&#34;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Then a response will be like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">4</span><span class="p">]:</span> <span class="n">b</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="s2">&#34;Which team had Jonathon Simmons serv</span>
</span></span><span class="line"><span class="cl">   <span class="o">...</span><span class="p">:</span> <span class="n">ed</span><span class="err">?</span><span class="s2">&#34;)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="n">DEBUG</span><span class="p">]</span> <span class="n">ServeAction</span> <span class="n">intent</span><span class="p">:</span> <span class="p">{</span><span class="s1">&#39;entities&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s1">&#39;Jonathon Simmons&#39;</span><span class="p">:</span> <span class="s1">&#39;player&#39;</span><span class="p">},</span> <span class="s1">&#39;intents&#39;</span><span class="p">:</span> <span class="p">(</span><span class="s1">&#39;serve&#39;</span><span class="p">,)}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="n">DEBUG</span><span class="p">]</span> <span class="n">query</span> <span class="k">for</span> <span class="n">RelationshipAction</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="n">USE</span> <span class="n">basketballplayer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">MATCH</span> <span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">v</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e</span><span class="p">:</span><span class="n">serve</span><span class="o">*</span><span class="mi">1</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">v1</span><span class="p">)</span> <span class="n">WHERE</span> <span class="nb">id</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="o">==</span> <span class="s2">&#34;player112&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="n">RETURN</span> <span class="n">p</span> <span class="n">LIMIT</span> <span class="mi">100</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="mi">2021</span><span class="o">-</span><span class="mi">07</span><span class="o">-</span><span class="mi">02</span> <span class="mi">02</span><span class="p">:</span><span class="mi">59</span><span class="p">:</span><span class="mi">36</span><span class="p">,</span><span class="mi">392</span><span class="p">]:</span><span class="n">Get</span> <span class="n">connection</span> <span class="n">to</span> <span class="p">(</span><span class="s1">&#39;127.0.0.1&#39;</span><span class="p">,</span> <span class="mi">9669</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Out</span><span class="p">[</span><span class="mi">4</span><span class="p">]:</span> <span class="s1">&#39;Jonathon Simmons had served 3 teams. Spurs from 2015 to 2015; 76ers from 2019 to 2019; Magic from 2017 to 2017; &#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="frontend-1" class="headerLink">
    <a href="#frontend-1" class="header-mark"></a>3.2 Frontend</h3><p>Referring to <a href="https://github.com/wey-gu/nebula-siwi/tree/main/src/siwi_frontend" target="_blank" rel="noopener noreferrer">siwi_frontend</a></p>
<h2 id="further-work" class="headerLink">
    <a href="#further-work" class="header-mark"></a>4 Further work</h2><ul>
<li><i class="far fa-square fa-fw"></i> Use <a href="https://github.com/swar/nba_api" target="_blank" rel="noopener noreferrer">NBA-API</a> to fallback undefined pattern questions</li>
<li><i class="far fa-square fa-fw"></i> Wrap and manage sessions instead of get and release session per request, this is somehow costly actually.</li>
<li><i class="far fa-square fa-fw"></i> Use NLP methods to implement proper Symentic Parsing, Intent Matching, Slot Filling</li>
<li><i class="far fa-square fa-fw"></i> Build Graph to help with Intent Matching, especially for a general purpose bot</li>
<li><i class="far fa-square fa-fw"></i> Use larger Dataset i.e. from <a href="https://www.kaggle.com/wyattowalsh/basketball" target="_blank" rel="noopener noreferrer">wyattowalsh/basketball</a></li>
</ul>
<h2 id="thanks-to-upstream-projects-" class="headerLink">
    <a href="#thanks-to-upstream-projects-" class="header-mark"></a>5 Thanks to Upstream Projects ❤️</h2><h3 id="backend-2" class="headerLink">
    <a href="#backend-2" class="header-mark"></a>5.1 Backend</h3><ul>
<li>I learnt a lot from the <a href="https://github.com/liuhuanyong/QASystemOnMedicalKG" target="_blank" rel="noopener noreferrer">KGQA on MedicalKG</a> created by <a href="https://liuhuanyong.github.io" target="_blank" rel="noopener noreferrer">Huanyong Liu</a></li>
<li><a href="https://github.com/pallets/flask" target="_blank" rel="noopener noreferrer">Flask</a></li>
<li><a href="https://github.com/WojciechMula/pyahocorasick" target="_blank" rel="noopener noreferrer">pyahocorasick</a> created by <a href="http://0x80.pl/" target="_blank" rel="noopener noreferrer">Wojciech Muła</a></li>
<li><a href="https://pyyaml.org/" target="_blank" rel="noopener noreferrer">PyYaml</a></li>
</ul>
<h3 id="frontend-2" class="headerLink">
    <a href="#frontend-2" class="header-mark"></a>5.2 Frontend</h3><ul>
<li><a href="https://vuejs.org" target="_blank" rel="noopener noreferrer">VueJS</a> for frontend framework</li>
<li><a href="https://github.com/juzser/vue-bot-ui" target="_blank" rel="noopener noreferrer">Vue Bot UI</a>, as a lovely bot UI in vue</li>
<li><a href="https://github.com/Drackokacka/vue-web-speech" target="_blank" rel="noopener noreferrer">Vue Web Speech</a>, for speech API vue wrapper</li>
<li><a href="https://github.com/axios/axios" target="_blank" rel="noopener noreferrer">Axios</a> for browser http client</li>
<li><a href="https://en.wikipedia.org/wiki/Solarized_%28color_scheme%29" target="_blank" rel="noopener noreferrer">Solarized</a> for color scheme</li>
<li><a href="https://github.com/alvarosaburido/vitesome" target="_blank" rel="noopener noreferrer">Vitesome</a> for landing page design</li>
</ul>
<blockquote>
<p>Image credit goes to <a href="https://unsplash.com/photos/0E_vhMVqL9g" target="_blank" rel="noopener noreferrer">https://unsplash.com/photos/0E_vhMVqL9g</a></p>
</blockquote>]]></description>
</item><item>
    <title>从零到一：如何构建一个企业股权图谱系统？</title>
    <link>https://siwei.io/corp-rel-graph/</link>
    <pubDate>Wed, 24 Nov 2021 13:59:58 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/corp-rel-graph/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/corp-rel-graph/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>如何构建一个具有股权分析的图谱与线上系统呢？本文里，我将利用图数据库从零到一带你构建一个简易版的股权穿透图谱系统。</p>
</blockquote>
<p>我们知道无论是监管部门、企业还是个人，都有需求去针对一个企业、法人做一些背景调查，这些调查可以是法律诉讼、公开持股、企业任职等等多种多样的信息。这些背景信息可以辅助我们做商业上的重要决策，规避风险：比如根据公司的股权关系，了解是否存在利益冲突比如是否选择与一家公司进行商业往来。</p>
<p>在满足这样的关系分析需求的时候，我们往往面临一些挑战，比如：</p>
<ol>
<li>如何将这些数据的关联关系体现在系统之中？使得它们可以被挖掘、利用</li>
<li>多种异构数据、数据源之间的关系可能随着业务的发展引申出更多的变化，在结构数据库中，这意味着 Schema 变更</li>
<li>分析系统需要尽可能实时获取需要的查询结果，这通常涉及到多跳关系查询</li>
<li>领域专家能否快速灵活、可视化获取分享信息</li>
</ol>
<p>那么如何构建这样一个系统解决以上挑战呢？</p>
<h2 id="数据存在哪里" class="headerLink">
    <a href="#%e6%95%b0%e6%8d%ae%e5%ad%98%e5%9c%a8%e5%93%aa%e9%87%8c" class="header-mark"></a>1 数据存在哪里？</h2><blockquote>
<p>前提：数据集准备，为了更好的给大家演示解决这个问题，我写了一个轮子能随机生成股权结构相关的数据，生成的数据的例子在<a href="https://github.com/wey-gu/nebula-shareholding-example/tree/main/data_sample" target="_blank" rel="noopener noreferrer">这里</a>。</p>
<p>这里，我们有<a href="https://github.com/wey-gu/nebula-shareholding-example/blob/main/data_sample/person.csv" target="_blank" rel="noopener noreferrer">法人</a>、<a href="https://github.com/wey-gu/nebula-shareholding-example/blob/main/data_sample/corp.csv" target="_blank" rel="noopener noreferrer">公司</a>的数据，更有<a href="https://github.com/wey-gu/nebula-shareholding-example/blob/main/data_sample/corp_rel.csv" target="_blank" rel="noopener noreferrer">公司与子公司之间的关系</a>，<a href="https://github.com/wey-gu/nebula-shareholding-example/blob/main/data_sample/corp_share.csv" target="_blank" rel="noopener noreferrer">公司持有公司股份</a>，<a href="https://github.com/wey-gu/nebula-shareholding-example/blob/main/data_sample/person_corp_role.csv" target="_blank" rel="noopener noreferrer">法人任职公司</a>，<a href="https://github.com/wey-gu/nebula-shareholding-example/blob/main/data_sample/person_corp_share.csv" target="_blank" rel="noopener noreferrer">法人持有公司股份</a>和<a href="https://github.com/wey-gu/nebula-shareholding-example/blob/main/data_sample/person_rel.csv" target="_blank" rel="noopener noreferrer">法人之间亲密度</a>的关系数据。</p>
</blockquote>
<p>数据存在哪里？这是一个关键的问题，这里我们剧透一下，答案是：图数据库。然后我们再简单解释一下为什么这样一个股权图谱系统跑在图数据库上是更好的。</p>
<p>在这样一个简单的数据模型之下，我们可以很直接的在关系型数据库中这么建模：</p>
<p><a class="lightgallery" href="/corp-rel-graph/why_0_tabular.webp" title="why_0_tabular" data-thumbnail="/corp-rel-graph/why_0_tabular.webp">
        
    </a></p>
<p>而这么建模的问题在于：这种逻辑关联的方式使得无论数据的关联关系查询表达、存储、还是引入新的关联关系都不是很高效。</p>
<ul>
<li><strong>查询表达不高效</strong>是因为关系型数据库是面向表结构设计的，这决定了关系查询要写嵌套的 JOIN。
<ul>
<li>这就是前边提到的<strong>挑战 1</strong>：能够表达，但是比较勉强，遇到稍微复杂的情况就变得很难。</li>
</ul>
</li>
<li><strong>存储不高效</strong>是因为表结构被设计的模式是面向数据记录，而非数据之间的关系：我们虽然习惯了将数据中实体（比如法人）和实体关联（比如持有股权 <code>hold_sharing_relationship</code>）以另外一个表中的记录来表达、存储起来，这逻辑上完全行得通，但是到了多跳、大量需要请求数据关系跳转的情况下，这样跨表 JOIN 的代价就成为了瓶颈。
<ul>
<li>这就是前边提到的<strong>挑战 3</strong>：无法应对多条查询的性能需要。</li>
</ul>
</li>
<li><strong>引入新的关联关系</strong>代价大，还是前边提到的，表结构下，用新的表来表达持有股权 <code>hold_sharing_relationship</code>这个关联关系是可行的，但是这非常不灵活、而且昂贵，它意味着我们在引入这个关系的时候限定了起点终点的类型，比如股权持有的关系可能是法人-&gt;公司，也可能是公司-&gt;公司，随着业务的演进，我们可能还需要引入政府-&gt;公司的新关系，而这些变化都需要做有不小代价的工作：改动 Schema。
<ul>
<li>这就是前边提到的<strong>挑战 2</strong>：无法应对业务上对数据关系上灵活多变的要求。</li>
</ul>
</li>
</ul>
<p>当一个通用系统无法满足不可忽视的具体需求的时候，一个新的系统就会诞生，这就是图数据库，针对这样的场景，图数据库很自然地特别针对关联关系场景去设计整个数据库：</p>
<ul>
<li>面向关联关系表达的语义。（挑战 1）
<ul>
<li>如下表，我列举了一个等价的一跳查询在表结构数据库与图数据库中，查询语句的区别。大家应该可以看出“找到所有持有和 p_100 共同持有公司股份的人”这样的查询表达可以在图数据库如何自然表达，这仅仅是一条查询的区别，如果是多跳的话，他们的复杂度区分还会更明显一些。</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>表结构数据库</th>
<th>图数据库（属性图）</th>
</tr>
</thead>
<tbody>
<tr>
<td><a class="lightgallery" href="/corp-rel-graph/why_1_sql_join.webp" title="why_1_sql_join" data-thumbnail="/corp-rel-graph/why_1_sql_join.webp">
        
    </a></td>
<td><a class="lightgallery" href="/corp-rel-graph/why_1_ngql.webp" title="why_1_ngql" data-thumbnail="/corp-rel-graph/why_1_ngql.webp">
        
    </a></td>
</tr>
</tbody>
</table>
<ul>
<li>将关联关系存储为物理连接，从而使得跳转查询代价最小。（挑战 3、2）
<ul>
<li>图数据之中，从点拓展（找到一个或者多个关系的另一头）出去的代价是非常小的，这因为图数据库是一个专有的系统，得益于它主要关心“图”结构的设计，查找确定的实体（比如和一个法人 A ）所有关联（可能是任职、亲戚、持有、等等关系）其他所有实体（公司、法人）这个查找的代价是 O(1) 的，因为它们在图数据库的数据机构里是真的链接在一起的。</li>
<li>大家可以从下表的定量参考数据一窥图数据库在这种查询下的优势，这种优势在多跳高并发情况下的区别是“能”与”不能“作为线上系统的区别，是“实时”与“离线”的区别。</li>
<li>在面向关联关系的数据建模和数据结构之下，引入新的实体、关联关系的代价要小很多，还是前边提到的例子：
在 Nebula Graph 图数据中引入一个新的“政府机构”类型的实体，并增加政府机构-&gt;公司的“持有股份”的关联关系相比于在非图模型的数据库中的代价小很多。</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>表结构数据库</th>
<th>图数据库（属性图）</th>
</tr>
</thead>
<tbody>
<tr>
<td>4 跳查询时延 1544 秒</td>
<td>4 跳查询时延 1.36 秒</td>
</tr>
</tbody>
</table>
<ul>
<li>建模符合直觉；图数据库有面向数据连接的数据可视化能力（挑战 4）
<ul>
<li>大家在下表第二列中可以对比我们本文中进行的股权分析数据在两种数据库之中的建模的区别，尤其是在关心关联关系的场景下，我们可以感受到属性图的模型建立是很符合人类大脑直觉的，而这和大脑之中<a href="https://zh.wikipedia.org/zh/%E7%A5%9E%E7%B6%93%E5%85%83" target="_blank" rel="noopener noreferrer">神经元</a>的结构可能也有一些关系。</li>
<li>图数据库中内置的可视化工具提供了一般用户便捷理解数据关系的能力，也给领域专家用户提供了表达请求复杂数据关系的直观接口。</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>表结构数据库</th>
<th>图数据库（属性图）</th>
</tr>
</thead>
<tbody>
<tr>
<td><a class="lightgallery" href="/corp-rel-graph/why_0_tabular.webp" title="why_0_tabular" data-thumbnail="/corp-rel-graph/why_0_tabular.webp">
        
    </a></td>
<td><a class="lightgallery" href="/corp-rel-graph/why_0_graph_based.webp" title="why_0_graph_based" data-thumbnail="/corp-rel-graph/why_0_graph_based.webp">
        
    </a></td>
</tr>
</tbody>
</table>
<blockquote>
<p>表结构数据库与图数据库的总体比较：</p>
</blockquote>
<!---
```ngql
GO FROM "p_100" OVER hold_share YIELD dst(edge) AS corp_with_share |\
GO FROM $-.corp_with_share OVER hold_share REVERSELY YIELD properties(vertex).name;
```

```sql
SELECT a.id, a.name, c.name
FROM person a
JOIN hold_share b ON a.id=b.person_id
JOIN corp c ON c.id=b.corp_id
WHERE c.name IN (SELECT c.name
FROM person a
JOIN hold_share b ON a.id=b.person_id
JOIN corp c ON c.id=b.corp_id
WHERE a.id = 'p_100')
```
-->
<table>
<thead>
<tr>
<th></th>
<th>表结构数据库</th>
<th>图数据库（属性图）</th>
</tr>
</thead>
<tbody>
<tr>
<td>查询</td>
<td><a class="lightgallery" href="/corp-rel-graph/why_1_sql_join.webp" title="why_1_sql_join" data-thumbnail="/corp-rel-graph/why_1_sql_join.webp">
        
    </a></td>
<td><a class="lightgallery" href="/corp-rel-graph/why_1_ngql.webp" title="why_1_ngql" data-thumbnail="/corp-rel-graph/why_1_ngql.webp">
        
    </a></td>
</tr>
<tr>
<td>建模</td>
<td><a class="lightgallery" href="/corp-rel-graph/why_0_tabular.webp" title="why_0_tabular" data-thumbnail="/corp-rel-graph/why_0_tabular.webp">
        
    </a></td>
<td><a class="lightgallery" href="/corp-rel-graph/why_0_graph_based.webp" title="why_0_graph_based" data-thumbnail="/corp-rel-graph/why_0_graph_based.webp">
        
    </a></td>
</tr>
<tr>
<td>性能</td>
<td>4 跳查询时延 1544 秒</td>
<td>4 跳查询时延 1.36 秒</td>
</tr>
</tbody>
</table>
<p>综上，在本教程里，我们将利用图数据库来进行数据存储。</p>
<h2 id="图数据建模" class="headerLink">
    <a href="#%e5%9b%be%e6%95%b0%e6%8d%ae%e5%bb%ba%e6%a8%a1" class="header-mark"></a>2 图数据建模</h2><p>前面在讨论数据存在哪里的时候，我们已经揭示了在图数据库中建模的方式：本质上，在这张图中，将会有两种实体：</p>
<ul>
<li>人</li>
<li>公司</li>
</ul>
<p>四种关系：</p>
<ul>
<li><code>人</code> –<code>作为亲人</code>–&gt;<code>人</code></li>
<li><code>人</code> –<code>作为角色</code>–&gt; <code>公司</code></li>
<li><code>人</code> 或者 <code>公司</code> –<code>持有股份</code>–&gt; <code>公司</code></li>
<li><code>公司</code> –<code>作为子机构</code>–&gt; <code>公司</code></li>
</ul>
<p>这里面，实体与关系本身都可以包含更多的信息，这些信息在图数据库里就是实体、关系自身的属性。如下图表示：</p>
<ul>
<li><code>人</code>的属性包括 <code>name</code>，<code>age</code></li>
<li><code>公司</code>的属性包括 <code>name</code>，<code>location</code></li>
<li><code>持有股份</code> 这个关系有属性 <code>share</code>(份额)</li>
<li><code>任职</code>这个关系有属性 <code>role</code>，<code>level</code></li>
</ul>
<p><a class="lightgallery" href="/corp-rel-graph/why_0_graph_based.webp" title="why_0_graph_based" data-thumbnail="/corp-rel-graph/why_0_graph_based.webp">
        
    </a></p>
<h2 id="数据入库" class="headerLink">
    <a href="#%e6%95%b0%e6%8d%ae%e5%85%a5%e5%ba%93" class="header-mark"></a>3 数据入库</h2><p>本教程中，我们使用的图数据库叫做 Nebula Graph（星云图数据库），它是一个以 Apache 2.0 许可证开源的分布式图数据库。</p>
<blockquote>
<p>Nebula Graph in Github: <a href="https://github.com/vesoft-inc/nebula" target="_blank" rel="noopener noreferrer">https://github.com/vesoft-inc/nebula</a></p>
</blockquote>
<p>在向 Nebula Graph 导入数据的时候，关于如何选择工具，请参考<a href="https://docs.nebula-graph.com.cn/2.6.1/20.appendix/write-tools/" target="_blank" rel="noopener noreferrer">这篇文档</a>和<a href="https://www.siwei.io/sketches/nebula-data-import-options/" target="_blank" rel="noopener noreferrer">这个视频</a>。</p>
<p>这里，由于数据格式是 csv 文件并且利用单机的客户端资源就足够了，我们可以选择使用 nebula-importer 来完成这个工作。</p>
<blockquote>
<p>提示：在导入数据之前，请先部署一个 Nebula Graph 集群，最简便的部署方式是使用 nebula-up 这个小工具，只需要一行命令就能在 Linux 机器上同时启动一个 Nebula Graph 核心和可视化图探索工具  <a href="https://docs.nebula-graph.com.cn/2.6.1/nebula-studio/about-studio/st-ug-what-is-graph-studio/" target="_blank" rel="noopener noreferrer">Nebula Graph Studio</a>。如果你更愿意用 Docker 部署，请参考<a href="https://docs.nebula-graph.com.cn/2.6.1/4.deployment-and-installation/2.compile-and-install-nebula-graph/3.deploy-nebula-graph-with-docker-compose/" target="_blank" rel="noopener noreferrer">这个文档</a>。</p>
<p>本文假设我们使用 <a href="https://siwei.io/nebula-up/" target="_blank" rel="noopener noreferrer">Nebula-UP</a> 来部署：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -fsSL nebula-up.siwei.io/install.sh <span class="p">|</span> bash
</span></span></code></pre></td></tr></table>
</div>
</div></blockquote>
<p>这里的数据是<a href="https://github.com/wey-gu/nebula-shareholding-example" target="_blank" rel="noopener noreferrer">生成器</a>生成的，你可以按需生成任意规模随机数据集，或者选择一份生成好了的数据在<a href="https://github.com/wey-gu/nebula-shareholding-example/tree/main/data_sample" target="_blank" rel="noopener noreferrer">这里</a></p>
<p>有了这些<a href="https://github.com/wey-gu/nebula-shareholding-example/tree/main/data_sample" target="_blank" rel="noopener noreferrer">数据</a>，我们可以开始导入了。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ pip install <span class="nv">Faker</span><span class="o">==</span>2.0.5 <span class="nv">pydbgen</span><span class="o">==</span>1.0.5
</span></span><span class="line"><span class="cl">$ python3 data_generator.py
</span></span><span class="line"><span class="cl">$ ls -l data
</span></span><span class="line"><span class="cl">total <span class="m">1688</span>
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> weyl  staff   <span class="m">23941</span> Jul <span class="m">14</span> 13:28 corp.csv
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> weyl  staff    <span class="m">1277</span> Jul <span class="m">14</span> 13:26 corp_rel.csv
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> weyl  staff    <span class="m">3048</span> Jul <span class="m">14</span> 13:26 corp_share.csv
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> weyl  staff  <span class="m">211661</span> Jul <span class="m">14</span> 13:26 person.csv
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> weyl  staff  <span class="m">179770</span> Jul <span class="m">14</span> 13:26 person_corp_role.csv
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> weyl  staff  <span class="m">322965</span> Jul <span class="m">14</span> 13:26 person_corp_share.csv
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> weyl  staff   <span class="m">17689</span> Jul <span class="m">14</span> 13:26 person_rel.csv
</span></span></code></pre></td></tr></table>
</div>
</div><p>导入工具 <a href="https://github.com/vesoft-inc/nebula-importer" target="_blank" rel="noopener noreferrer">nebula-importer</a> 是一个 golang 的二进制文件，使用方式就是将导入的 Nebula Graph 连接信息、数据源中字段的含义的信息写进 YAML 格式的配置文件里，然后通过命令行调用它。可以参考<a href="https://docs.nebula-graph.com.cn/2.6.1/nebula-importer/use-importer/" target="_blank" rel="noopener noreferrer">文档</a>或者它的 GitHub 仓库里的例子。</p>
<p>这里我已经写好了准备好了一份 nebula-importer 的配置文件，在数据生成器同一个 repo 之下的<a href="https://github.com/wey-gu/nebula-shareholding-example/blob/main/nebula-importer.yaml" target="_blank" rel="noopener noreferrer">这里</a>。</p>
<p>最后，只需要执行如下命令就可以开始数据导入了：</p>
<blockquote>
<p>注意，在写本文的时候，nebula 的新版本是 2.6.1，这里对应的 nebula-importer 是 v2.6.0，如果您出现导入错误可能是版本不匹配，可以相应调整下边命令中的版本号。</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone https://github.com/wey-gu/nebula-shareholding-example
</span></span><span class="line"><span class="cl">cp -r data_sample /tmp/data
</span></span><span class="line"><span class="cl">cp nebula-importer.yaml /tmp/data/
</span></span><span class="line"><span class="cl">docker run --rm -ti <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --network<span class="o">=</span>nebula-docker-compose_nebula-net <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v /tmp/data:/root <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    vesoft/nebula-importer:v2.6.0 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --config /root/nebula-importer.yaml
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>你知道吗？TL;DR</p>
<p>实际上，这份 importer 的<a href="https://github.com/wey-gu/nebula-shareholding-example/blob/main/nebula-importer.yaml" target="_blank" rel="noopener noreferrer">配置</a>里帮我们做了 Nebula Graph 之中的图建模的操作，它们的指令在下边，我们不需要手动去执行了。</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">SPACE</span><span class="w"> </span><span class="k">IF</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">EXISTS</span><span class="w"> </span><span class="n">shareholding</span><span class="p">(</span><span class="n">partition_num</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span><span class="w"> </span><span class="n">replica_factor</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="n">vid_type</span><span class="o">=</span><span class="n">FIXED_STRING</span><span class="p">(</span><span class="mi">10</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">USE</span><span class="w"> </span><span class="n">shareholding</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="n">person</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="n">string</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="n">corp</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="n">string</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="k">INDEX</span><span class="w"> </span><span class="n">person_name</span><span class="w"> </span><span class="k">on</span><span class="w"> </span><span class="n">person</span><span class="p">(</span><span class="n">name</span><span class="p">(</span><span class="mi">20</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="k">INDEX</span><span class="w"> </span><span class="n">corp_name</span><span class="w"> </span><span class="k">on</span><span class="w"> </span><span class="n">corp</span><span class="p">(</span><span class="n">name</span><span class="p">(</span><span class="mi">20</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="o">`</span><span class="n">role_as</span><span class="o">`</span><span class="p">(</span><span class="k">role</span><span class="w"> </span><span class="n">string</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">is_branch_of</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">hold_share</span><span class="p">(</span><span class="k">share</span><span class="w"> </span><span class="nb">float</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">reletive_with</span><span class="p">(</span><span class="n">degree</span><span class="w"> </span><span class="nb">int</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="图库中查询数据" class="headerLink">
    <a href="#%e5%9b%be%e5%ba%93%e4%b8%ad%e6%9f%a5%e8%af%a2%e6%95%b0%e6%8d%ae" class="header-mark"></a>4 图库中查询数据</h2><blockquote>
<p>Tips: 你知道吗，你也可以无需部署安装，通过 <a href="https://nebula-graph.com.cn/demo/" target="_blank" rel="noopener noreferrer">Nebula-Playground</a> 之中，找到股权穿透来在线访问同一份数据集。</p>
</blockquote>
<p>我们可以借助  <a href="https://docs.nebula-graph.com.cn/2.6.1/nebula-studio/about-studio/st-ug-what-is-graph-studio/" target="_blank" rel="noopener noreferrer">Nebula Graph Studio</a> 来访问数据，访问我们部署 Nebula-UP 的服务器地址的 7001 端口就可以了：</p>
<p>假设服务器地址为 <code>192.168.8.127</code>，则有：</p>
<ul>
<li>Nebula Studio 地址：<code>192.168.8.127:7001</code></li>
<li>Nebula Graph 地址：<code>192.168.8.127:9669</code></li>
<li>默认用户名：<code>root</code></li>
<li>默认密码：<code>nebula</code></li>
</ul>
<p>访问 Nebula Studio：</p>
<p><a class="lightgallery" href="/corp-rel-graph/studio_login.webp" title="studio_login" data-thumbnail="/corp-rel-graph/studio_login.webp">
        
    </a></p>
<p>选择图空间: Shareholding</p>
<p><a class="lightgallery" href="/corp-rel-graph/studio_space_selection.webp" title="studio_space_selection" data-thumbnail="/corp-rel-graph/studio_space_selection.webp">
        
    </a></p>
<p>之后，我们就可以在里边探索比如一个公司的三跳以内的股权穿透，具体的操作可以参考：<a href="https://nebula-graph.com.cn/demo/shared-holding/" target="_blank" rel="noopener noreferrer">股权穿透在线 Playground 的介绍</a>：</p>
<p><a class="lightgallery" href="https://nebula-website-cn.oss-cn-hangzhou.aliyuncs.com/nebula-website/images/demo/shared-holding/studio_explore_2.png" title="Studio 股权穿透" data-thumbnail="https://nebula-website-cn.oss-cn-hangzhou.aliyuncs.com/nebula-website/images/demo/shared-holding/studio_explore_2.png">
        
    </a></p>
<h2 id="构建一个图谱系统" class="headerLink">
    <a href="#%e6%9e%84%e5%bb%ba%e4%b8%80%e4%b8%aa%e5%9b%be%e8%b0%b1%e7%b3%bb%e7%bb%9f" class="header-mark"></a>5 构建一个图谱系统</h2><blockquote>
<p>这部分的代码开源在 GitHub 上：</p>
<p><a href="https://github.com/wey-gu/nebula-corp-rel-search" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/nebula-corp-rel-search</a></p>
<p>本项目的 Demo 也在 PyCon China 2021 上的演讲中有过展示：<a href="https://www.bilibili.com/video/BV12u411o7Y6" target="_blank" rel="noopener noreferrer">视频地址</a></p>
</blockquote>
<p>在此基础之上，我们可以构建一个提供给终端用户来使用的股权查询系统了，我们已经有了图数据库作为这个图谱的存储引擎，理论上，如果业务允许，我们可以直接使用或者封装 Nebula Graph Studio 来提供服务，这完全是可行也是合规的，不过，有一些情况下，我们需要自己去实现界面、或者我们需要封装出一个 API 给上游（多端）提供图谱查询的功能。</p>
<p>为此，我为大家写了一个简单的实例项目，提供这样的服务，他的架构也很直接：</p>
<ul>
<li>前端接受用户要查询的穿透法人、公司，按需发请求给后端，并用 D3.js 将返回结果渲染为关系图</li>
<li>后端接受前端的 API 请求，将请求转换为 Graph DB 的查询，并返回前端期待的结果</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">  ┌───────────────┬───────────────┐
</span></span><span class="line"><span class="cl">  │               │  Frontend     │
</span></span><span class="line"><span class="cl">  │               │               │
</span></span><span class="line"><span class="cl">  │    ┌──────────▼──────────┐    │
</span></span><span class="line"><span class="cl">  │    │ Vue.JS              │    │
</span></span><span class="line"><span class="cl">  │    │ D3.JS               │    │
</span></span><span class="line"><span class="cl">  │    └──────────┬──────────┘    │
</span></span><span class="line"><span class="cl">  │               │  Backend      │
</span></span><span class="line"><span class="cl">  │    ┌──────────┴──────────┐    │
</span></span><span class="line"><span class="cl">  │    │ Flask               │    │
</span></span><span class="line"><span class="cl">  │    │ Nebula-Python       │    │
</span></span><span class="line"><span class="cl">  │    └──────────┬──────────┘    │
</span></span><span class="line"><span class="cl">  │               │  Graph Query  │
</span></span><span class="line"><span class="cl">  │    ┌──────────▼──────────┐    │
</span></span><span class="line"><span class="cl">  │    │ Graph Database      │    │
</span></span><span class="line"><span class="cl">  │    └─────────────────────┘    │
</span></span><span class="line"><span class="cl">  │                               │
</span></span><span class="line"><span class="cl">  └───────────────────────────────┘
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="后端服务--图数据库" class="headerLink">
    <a href="#%e5%90%8e%e7%ab%af%e6%9c%8d%e5%8a%a1--%e5%9b%be%e6%95%b0%e6%8d%ae%e5%ba%93" class="header-mark"></a>5.1 后端服务&ndash;&gt;图数据库</h3><blockquote>
<p>详细的数据格式分析大家可以参考<a href="https://github.com/wey-gu/nebula-corp-rel-search#data-from-backend-side" target="_blank" rel="noopener noreferrer">这里</a></p>
</blockquote>
<h4 id="查询语句" class="headerLink">
    <a href="#%e6%9f%a5%e8%af%a2%e8%af%ad%e5%8f%a5" class="header-mark"></a>5.1.1 查询语句</h4><p>我们假设用户请求的实体是 <code>c_132</code> ，那么请求 1 到 3 步的关系穿透的语法是：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">v</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e</span><span class="p">:</span><span class="o">`</span><span class="n">hold_share</span><span class="o">`|</span><span class="p">:</span><span class="o">`</span><span class="n">is_branch_of</span><span class="o">`|</span><span class="p">:</span><span class="o">`</span><span class="n">reletive_with</span><span class="o">`|</span><span class="p">:</span><span class="o">`</span><span class="n">role_as</span><span class="o">`*</span><span class="mi">1</span><span class="p">..</span><span class="mi">3</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">v2</span><span class="p">)</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">v</span><span class="p">)</span><span class="w"> </span><span class="k">IN</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;c_132&#34;</span><span class="p">]</span><span class="w"> </span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="w"> </span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">100</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这里边 <code>()</code>包裹的是图之中的点，而<code>[]</code> 包裹的则是点之间的关系：边，所以：</p>
<p><code>(v)-[e:</code>hold_share<code>|:</code>is_branch_of<code>|:</code>reletive_with<code>|:</code>role_as<code>*1..3]-(v2)</code> 之中的：</p>
<p><code>(v)-[xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx]-(v2)</code>应该比较好理解，意思是从 <code>v</code> 到<code>v2</code> 做拓展。</p>
<p>现在我们介绍中间<code>[]</code>包裹的部分，这里，它的语义是：经由四种类型的边（<code>:</code>之后的是边的类型，<code>|</code>代表或者）通过可变的跳数：<code>*1..3</code> （一跳到三跳）。</p>
<p>所以，简单来说整理看开，我们的拓展的路径是：从点 <code>v</code> 开始，经由四种关系一到三跳拓展到点<code>v2</code>，返回整个拓展路径 <code>p</code>，限制 100 个路径结果，其中 <code>v</code> 是 <code>c_132</code>。</p>
<h4 id="nebula-python-client-sdk" class="headerLink">
    <a href="#nebula-python-client-sdk" class="header-mark"></a>5.1.2 Nebula Python Client/ SDK</h4><p>我们已经知道了查询语句的语法，那么就只需要在后端程序里根据请求、通过图数据库的客户端来发出查询请求，并处理返回结构就好了。在今天的例子中，我选择使用 Python 来实现后端的逻辑，所以我用了 Nebula-python 这个库，它是 Nebula 的 Python Client。</p>
<blockquote>
<p>你知道么？截至到现在，Nebula 在 GitHub 上有 Java，GO，Python，C++，Spark，Flink，Rust（未GA），NodeJS（未GA） 的客户端支持，更多的语言的客户端也会慢慢被发布哦。</p>
</blockquote>
<p>下边是一个 Python Client 执行一个查询并返回结果的例子，值得注意的是，在我实现这个代码的时候，Nebula Python 尚未支持返回 JSON （通过<code>session.execute_json()</code>）结果，如果你要实现自己的代码，我非常推荐试试 JSON 哈，就可以不用从对象中一点点取数据了，不过借助 iPython/IDLE 这种 <code>REPL</code>，快速了解返回对象的结构也没有那么麻烦。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="err">$</span> <span class="n">python3</span> <span class="o">-</span><span class="n">m</span> <span class="n">pip</span> <span class="n">install</span> <span class="n">nebula2</span><span class="o">-</span><span class="n">python</span><span class="o">==</span><span class="mf">2.5.0</span> <span class="c1"># 注意这里我引用旧的记录，它是 2.5.0，</span>
</span></span><span class="line"><span class="cl"><span class="err">$</span> <span class="n">ipython</span>
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="kn">from</span> <span class="nn">nebula2.gclient.net</span> <span class="kn">import</span> <span class="n">ConnectionPool</span>
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="kn">from</span> <span class="nn">nebula2.Config</span> <span class="kn">import</span> <span class="n">Config</span>
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">3</span><span class="p">]:</span> <span class="n">config</span> <span class="o">=</span> <span class="n">Config</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">   <span class="o">...</span><span class="p">:</span> <span class="n">config</span><span class="o">.</span><span class="n">max_connection_pool_size</span> <span class="o">=</span> <span class="mi">10</span>
</span></span><span class="line"><span class="cl">   <span class="o">...</span><span class="p">:</span> <span class="c1"># init connection pool</span>
</span></span><span class="line"><span class="cl">   <span class="o">...</span><span class="p">:</span> <span class="n">connection_pool</span> <span class="o">=</span> <span class="n">ConnectionPool</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">   <span class="o">...</span><span class="p">:</span> <span class="c1"># if the given servers are ok, return true, else return false</span>
</span></span><span class="line"><span class="cl">   <span class="o">...</span><span class="p">:</span> <span class="n">ok</span> <span class="o">=</span> <span class="n">connection_pool</span><span class="o">.</span><span class="n">init</span><span class="p">([(</span><span class="s1">&#39;192.168.8.137&#39;</span><span class="p">,</span> <span class="mi">9669</span><span class="p">)],</span> <span class="n">config</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="o">...</span><span class="p">:</span> <span class="n">session</span> <span class="o">=</span> <span class="n">connection_pool</span><span class="o">.</span><span class="n">get_session</span><span class="p">(</span><span class="s1">&#39;root&#39;</span><span class="p">,</span> <span class="s1">&#39;nebula&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="mi">2021</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">13</span> <span class="mi">13</span><span class="p">:</span><span class="mi">44</span><span class="p">:</span><span class="mi">24</span><span class="p">,</span><span class="mi">242</span><span class="p">]:</span><span class="n">Get</span> <span class="n">connection</span> <span class="n">to</span> <span class="p">(</span><span class="s1">&#39;192.168.8.137&#39;</span><span class="p">,</span> <span class="mi">9669</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">4</span><span class="p">]:</span> <span class="n">resp</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&#34;use shareholding&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">5</span><span class="p">]:</span> <span class="n">query</span> <span class="o">=</span> <span class="s1">&#39;&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">   ...: MATCH p=(v)-[e:`hold_share`|:`is_branch_of`|:`reletive_with`|:`role_as`*1..3]-(v2) </span><span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span><span class="s1">   ...: WHERE id(v) IN [&#34;c_132&#34;] RETURN p LIMIT 100
</span></span></span><span class="line"><span class="cl"><span class="s1">   ...: &#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">6</span><span class="p">]:</span> <span class="n">resp</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">query</span><span class="p">)</span> <span class="c1"># Note: after nebula graph 2.6.0, we could use execute_json as well</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">7</span><span class="p">]:</span> <span class="n">resp</span><span class="o">.</span><span class="n">col_size</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">Out</span><span class="p">[</span><span class="mi">7</span><span class="p">]:</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">9</span><span class="p">]:</span> <span class="n">resp</span><span class="o">.</span><span class="n">row_size</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">Out</span><span class="p">[</span><span class="mi">10</span><span class="p">]:</span> <span class="mi">100</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>我们往下分析看看，我们知道这个请求本质上结果是路径，它有一个 <code>.nodes()</code> 方法和 <code>.relationships()</code>方法来获得路径上的点和边：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">11</span><span class="p">]:</span> <span class="n">p</span><span class="o">=</span><span class="n">resp</span><span class="o">.</span><span class="n">row_values</span><span class="p">(</span><span class="mi">22</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">as_path</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">12</span><span class="p">]:</span> <span class="n">p</span><span class="o">.</span><span class="n">nodes</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">Out</span><span class="p">[</span><span class="mi">12</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl"><span class="p">[(</span><span class="s2">&#34;c_132&#34;</span> <span class="p">:</span><span class="n">corp</span><span class="p">{</span><span class="n">name</span><span class="p">:</span> <span class="s2">&#34;Chambers LLC&#34;</span><span class="p">}),</span>
</span></span><span class="line"><span class="cl"> <span class="p">(</span><span class="s2">&#34;p_4000&#34;</span> <span class="p">:</span><span class="n">person</span><span class="p">{</span><span class="n">name</span><span class="p">:</span> <span class="s2">&#34;Colton Bailey&#34;</span><span class="p">})]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">13</span><span class="p">]:</span> <span class="n">p</span><span class="o">.</span><span class="n">relationships</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">Out</span><span class="p">[</span><span class="mi">13</span><span class="p">]:</span> <span class="p">[(</span><span class="s2">&#34;p_4000&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="err">`</span><span class="n">role_as</span><span class="err">`</span><span class="o">@</span><span class="mi">0</span><span class="p">{</span><span class="n">role</span><span class="p">:</span> <span class="s2">&#34;Editorial assistant&#34;</span><span class="p">}]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;c_132&#34;</span><span class="p">)]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>对于边来说有这些方法 <code>.edge_name()</code>, <code>.properties()</code>, <code>.start_vertex_id()</code>, <code>.end_vertex_id()</code>，这里 edge_name 是获得边的类型。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">14</span><span class="p">]:</span> <span class="n">rel</span><span class="o">=</span><span class="n">p</span><span class="o">.</span><span class="n">relationships</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">15</span><span class="p">]:</span> <span class="n">rel</span>
</span></span><span class="line"><span class="cl"><span class="n">Out</span><span class="p">[</span><span class="mi">15</span><span class="p">]:</span> <span class="p">(</span><span class="s2">&#34;p_4000&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="err">`</span><span class="n">role_as</span><span class="err">`</span><span class="o">@</span><span class="mi">0</span><span class="p">{</span><span class="n">role</span><span class="p">:</span> <span class="s2">&#34;Editorial assistant&#34;</span><span class="p">}]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;c_132&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">16</span><span class="p">]:</span> <span class="n">rel</span><span class="o">.</span><span class="n">edge_name</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">Out</span><span class="p">[</span><span class="mi">16</span><span class="p">]:</span> <span class="s1">&#39;`role_as`&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">17</span><span class="p">]:</span> <span class="n">rel</span><span class="o">.</span><span class="n">properties</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">Out</span><span class="p">[</span><span class="mi">17</span><span class="p">]:</span> <span class="p">{</span><span class="s1">&#39;role&#39;</span><span class="p">:</span> <span class="s2">&#34;Editorial assistant&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">18</span><span class="p">]:</span> <span class="n">rel</span><span class="o">.</span><span class="n">start_vertex_id</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">Out</span><span class="p">[</span><span class="mi">18</span><span class="p">]:</span> <span class="s2">&#34;p_4000&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">19</span><span class="p">]:</span> <span class="n">rel</span><span class="o">.</span><span class="n">end_vertex_id</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">Out</span><span class="p">[</span><span class="mi">19</span><span class="p">]:</span> <span class="s2">&#34;c_132&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>对于点来说，可以用到这些方法 <code>.tags()</code>, <code>properties</code>, <code>get_id()</code>，这里边 tags 是获得点的类型，它在 Nebula 里叫标签<code>tag</code>。</p>
<p>这些概念可以在<a href="https://docs.nebula-graph.com.cn/2.6.1/1.introduction/2.data-model/" target="_blank" rel="noopener noreferrer">文档里</a>获得更详细的解释。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">20</span><span class="p">]:</span> <span class="n">node</span><span class="o">=</span><span class="n">p</span><span class="o">.</span><span class="n">nodes</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">21</span><span class="p">]:</span> <span class="n">node</span><span class="o">.</span><span class="n">tags</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">Out</span><span class="p">[</span><span class="mi">21</span><span class="p">]:</span> <span class="p">[</span><span class="s1">&#39;corp&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">22</span><span class="p">]:</span> <span class="n">node</span><span class="o">.</span><span class="n">properties</span><span class="p">(</span><span class="s1">&#39;corp&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">Out</span><span class="p">[</span><span class="mi">22</span><span class="p">]:</span> <span class="p">{</span><span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s2">&#34;Chambers LLC&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">23</span><span class="p">]:</span> <span class="n">node</span><span class="o">.</span><span class="n">get_id</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">Out</span><span class="p">[</span><span class="mi">23</span><span class="p">]:</span> <span class="s2">&#34;c_132&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="前端渲染点边为图" class="headerLink">
    <a href="#%e5%89%8d%e7%ab%af%e6%b8%b2%e6%9f%93%e7%82%b9%e8%be%b9%e4%b8%ba%e5%9b%be" class="header-mark"></a>5.2 前端渲染点边为图</h3><blockquote>
<p>详细的分析大家也可以参考<a href="https://github.com/wey-gu/nebula-corp-rel-search#data-visualization" target="_blank" rel="noopener noreferrer">这里</a></p>
</blockquote>
<p>为了方便实现，我们采用了 Vue.js 和 <a href="https://github.com/ChenCyl/vue-network-d3" target="_blank" rel="noopener noreferrer">vue-network-d3</a>（D3 的 Vue Binding）。</p>
<p>通过 vue-network-d3 的抽象，能看出来喂给他这样的数据，就可以把点边信息渲染成很好看的图</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">nodes</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span><span class="s2">&#34;id&#34;</span><span class="p">:</span> <span class="s2">&#34;c_132&#34;</span><span class="p">,</span> <span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Chambers LLC&#34;</span><span class="p">,</span> <span class="s2">&#34;tag&#34;</span><span class="p">:</span> <span class="s2">&#34;corp&#34;</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span><span class="s2">&#34;id&#34;</span><span class="p">:</span> <span class="s2">&#34;p_4000&#34;</span><span class="p">,</span> <span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Colton Bailey&#34;</span><span class="p">,</span> <span class="s2">&#34;tag&#34;</span><span class="p">:</span> <span class="s2">&#34;person&#34;</span><span class="p">}],</span>
</span></span><span class="line"><span class="cl"><span class="n">relationships</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span><span class="s2">&#34;source&#34;</span><span class="p">:</span> <span class="s2">&#34;p_4000&#34;</span><span class="p">,</span> <span class="s2">&#34;target&#34;</span><span class="p">:</span> <span class="s2">&#34;c_132&#34;</span><span class="p">,</span> <span class="s2">&#34;properties&#34;</span><span class="p">:</span> <span class="p">{</span> <span class="s2">&#34;role&#34;</span><span class="p">:</span> <span class="s2">&#34;Editorial assistant&#34;</span> <span class="p">},</span> <span class="s2">&#34;edge&#34;</span><span class="p">:</span> <span class="s2">&#34;`role_as`&#34;</span><span class="p">}]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><a class="lightgallery" href="/corp-rel-graph/vue-network-d3-demo.webp" title="d3-demo" data-thumbnail="/corp-rel-graph/vue-network-d3-demo.webp">
        
    </a></p>
<h3 id="前端--后端" class="headerLink">
    <a href="#%e5%89%8d%e7%ab%af--%e5%90%8e%e7%ab%af" class="header-mark"></a>5.3 前端&lt;&ndash;后端</h3><blockquote>
<p>详细信息可以参考<a href="https://github.com/wey-gu/nebula-corp-rel-search#the-data-construction-in-back-end" target="_blank" rel="noopener noreferrer">这里</a></p>
</blockquote>
<p>我们从 D3 的初步研究上可以知道，后端只需要返回如下的 JSON 格式数据就好了</p>
<p>Nodes:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">[{</span><span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="s2">&#34;c_132&#34;</span><span class="p">,</span> <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Chambers LLC&#34;</span><span class="p">,</span> <span class="nt">&#34;tag&#34;</span><span class="p">:</span> <span class="s2">&#34;corp&#34;</span><span class="p">},</span>
</span></span><span class="line"><span class="cl"> <span class="p">{</span><span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="s2">&#34;p_4000&#34;</span><span class="p">,</span> <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Colton Bailey&#34;</span><span class="p">,</span> <span class="nt">&#34;tag&#34;</span><span class="p">:</span> <span class="s2">&#34;person&#34;</span><span class="p">}]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Relationships:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">[{</span><span class="nt">&#34;source&#34;</span><span class="p">:</span> <span class="s2">&#34;p_4000&#34;</span><span class="p">,</span> <span class="nt">&#34;target&#34;</span><span class="p">:</span> <span class="s2">&#34;c_132&#34;</span><span class="p">,</span> <span class="nt">&#34;properties&#34;</span><span class="p">:</span> <span class="p">{</span> <span class="nt">&#34;role&#34;</span><span class="p">:</span> <span class="s2">&#34;Editorial assistant&#34;</span> <span class="p">},</span> <span class="nt">&#34;edge&#34;</span><span class="p">:</span> <span class="s2">&#34;`role_as`&#34;</span><span class="p">},</span>
</span></span><span class="line"><span class="cl"> <span class="p">{</span><span class="nt">&#34;source&#34;</span><span class="p">:</span> <span class="s2">&#34;p_1039&#34;</span><span class="p">,</span> <span class="nt">&#34;target&#34;</span><span class="p">:</span> <span class="s2">&#34;c_132&#34;</span><span class="p">,</span> <span class="nt">&#34;properties&#34;</span><span class="p">:</span> <span class="p">{</span> <span class="nt">&#34;share&#34;</span><span class="p">:</span> <span class="s2">&#34;3.0&#34;</span> <span class="p">},</span> <span class="nt">&#34;edge&#34;</span><span class="p">:</span> <span class="s2">&#34;hold_share&#34;</span><span class="p">}]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>于是，，结合前边我们用 iPython 分析 Python 返回结果看，这个逻辑大概是：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">make_graph_response</span><span class="p">(</span><span class="n">resp</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">dict</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">nodes</span><span class="p">,</span> <span class="n">relationships</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(),</span> <span class="nb">list</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">row_index</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">row_size</span><span class="p">()):</span>
</span></span><span class="line"><span class="cl">        <span class="n">path</span> <span class="o">=</span> <span class="n">resp</span><span class="o">.</span><span class="n">row_values</span><span class="p">(</span><span class="n">row_index</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">as_path</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">_nodes</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;id&#34;</span><span class="p">:</span> <span class="n">node</span><span class="o">.</span><span class="n">get_id</span><span class="p">(),</span> <span class="s2">&#34;tag&#34;</span><span class="p">:</span> <span class="n">node</span><span class="o">.</span><span class="n">tags</span><span class="p">()[</span><span class="mi">0</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="n">node</span><span class="o">.</span><span class="n">properties</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">tags</span><span class="p">()[</span><span class="mi">0</span><span class="p">])</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;name&#34;</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">                <span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="n">path</span><span class="o">.</span><span class="n">nodes</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">nodes</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">_nodes</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">_relationships</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;source&#34;</span><span class="p">:</span> <span class="n">rel</span><span class="o">.</span><span class="n">start_vertex_id</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;target&#34;</span><span class="p">:</span> <span class="n">rel</span><span class="o">.</span><span class="n">end_vertex_id</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;properties&#34;</span><span class="p">:</span> <span class="n">rel</span><span class="o">.</span><span class="n">properties</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;edge&#34;</span><span class="p">:</span> <span class="n">rel</span><span class="o">.</span><span class="n">edge_name</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">                <span class="k">for</span> <span class="n">rel</span> <span class="ow">in</span> <span class="n">path</span><span class="o">.</span><span class="n">relationships</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">relationships</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">_relationships</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">{</span><span class="s2">&#34;nodes&#34;</span><span class="p">:</span> <span class="n">nodes</span><span class="p">,</span> <span class="s2">&#34;relationships&#34;</span><span class="p">:</span> <span class="n">relationships</span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>前端到后端的通信是 HTTP ，所以我们可以借助 Flask，把这个函数封装成一个 RESTful API：</p>
<p>前端程序通过 HTTP POST 到 <code>/api</code></p>
<blockquote>
<p>参考<a href="https://github.com/wey-gu/nebula-corp-rel-search#the-flask-app" target="_blank" rel="noopener noreferrer">这里</a></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span> <span class="n">jsonify</span><span class="p">,</span> <span class="n">request</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="vm">__name__</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@app.route</span><span class="p">(</span><span class="s2">&#34;/&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">root</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="s2">&#34;Hey There?&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@app.route</span><span class="p">(</span><span class="s2">&#34;/api&#34;</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;POST&#34;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">api</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">request_data</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">get_json</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">entity</span> <span class="o">=</span> <span class="n">request_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;entity&#34;</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">entity</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">resp</span> <span class="o">=</span> <span class="n">query_shareholding</span><span class="p">(</span><span class="n">entity</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">data</span> <span class="o">=</span> <span class="n">make_graph_response</span><span class="p">(</span><span class="n">resp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">data</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span> <span class="c1"># tbd</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">jsonify</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">parse_nebula_graphd_endpoint</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">ng_endpoints_str</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="o">.</span><span class="n">get</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;NG_ENDPOINTS&#39;</span><span class="p">,</span> <span class="s1">&#39;127.0.0.1:9669,&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&#34;,&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">ng_endpoints</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">endpoint</span> <span class="ow">in</span> <span class="n">ng_endpoints_str</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">endpoint</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">parts</span> <span class="o">=</span> <span class="n">endpoint</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&#34;:&#34;</span><span class="p">)</span>  <span class="c1"># we dont consider IPv6 now</span>
</span></span><span class="line"><span class="cl">            <span class="n">ng_endpoints</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">parts</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nb">int</span><span class="p">(</span><span class="n">parts</span><span class="p">[</span><span class="mi">1</span><span class="p">])))</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">ng_endpoints</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">query_shareholding</span><span class="p">(</span><span class="n">entity</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">query_string</span> <span class="o">=</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="sa">f</span><span class="s2">&#34;USE shareholding; &#34;</span>
</span></span><span class="line"><span class="cl">        <span class="sa">f</span><span class="s2">&#34;MATCH p=(v)-[e:`hold_share`|:`is_branch_of`|:`reletive_with`|:`role_as`*1..3]-(v2) &#34;</span>
</span></span><span class="line"><span class="cl">        <span class="sa">f</span><span class="s2">&#34;WHERE id(v) IN [&#39;</span><span class="si">{</span> <span class="n">entity</span> <span class="si">}</span><span class="s2">&#39;] RETURN p LIMIT 100&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">session</span> <span class="o">=</span> <span class="n">connection_pool</span><span class="o">.</span><span class="n">get_session</span><span class="p">(</span><span class="s1">&#39;root&#39;</span><span class="p">,</span> <span class="s1">&#39;nebula&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">resp</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">query_string</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">resp</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这个请求的结果则是前边前端期待的 JSON，像这样：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl --header <span class="s2">&#34;Content-Type: application/json&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>     --request POST <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>     --data <span class="s1">&#39;{&#34;entity&#34;: &#34;c_132&#34;}&#39;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>     http://192.168.10.14:5000/api <span class="p">|</span> jq
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;nodes&#34;</span>: <span class="o">[</span>
</span></span><span class="line"><span class="cl">    <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;id&#34;</span>: <span class="s2">&#34;c_132&#34;</span>,
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;name&#34;</span>: <span class="s2">&#34;\&#34;Chambers LLC\&#34;&#34;</span>,
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;tag&#34;</span>: <span class="s2">&#34;corp&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>,
</span></span><span class="line"><span class="cl">    <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;id&#34;</span>: <span class="s2">&#34;c_245&#34;</span>,
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;name&#34;</span>: <span class="s2">&#34;\&#34;Thompson-King\&#34;&#34;</span>,
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;tag&#34;</span>: <span class="s2">&#34;corp&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>,
</span></span><span class="line"><span class="cl">    <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;id&#34;</span>: <span class="s2">&#34;c_132&#34;</span>,
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;name&#34;</span>: <span class="s2">&#34;\&#34;Chambers LLC\&#34;&#34;</span>,
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;tag&#34;</span>: <span class="s2">&#34;corp&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>,
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">  <span class="o">]</span>,
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;relationships&#34;</span>: <span class="o">[</span>
</span></span><span class="line"><span class="cl">    <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;edge&#34;</span>: <span class="s2">&#34;hold_share&#34;</span>,
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;properties&#34;</span>: <span class="s2">&#34;{&#39;share&#39;: 0.0}&#34;</span>,
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;source&#34;</span>: <span class="s2">&#34;c_245&#34;</span>,
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;target&#34;</span>: <span class="s2">&#34;c_132&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;edge&#34;</span>: <span class="s2">&#34;hold_share&#34;</span>,
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;properties&#34;</span>: <span class="s2">&#34;{&#39;share&#39;: 9.0}&#34;</span>,
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;source&#34;</span>: <span class="s2">&#34;p_1767&#34;</span>,
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;target&#34;</span>: <span class="s2">&#34;c_132&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>,
</span></span><span class="line"><span class="cl">    <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;edge&#34;</span>: <span class="s2">&#34;hold_share&#34;</span>,
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;properties&#34;</span>: <span class="s2">&#34;{&#39;share&#39;: 11.0}&#34;</span>,
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;source&#34;</span>: <span class="s2">&#34;p_1997&#34;</span>,
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;target&#34;</span>: <span class="s2">&#34;c_132&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>,
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">    <span class="o">}</span>,
</span></span><span class="line"><span class="cl">    <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;edge&#34;</span>: <span class="s2">&#34;reletive_with&#34;</span>,
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;properties&#34;</span>: <span class="s2">&#34;{&#39;degree&#39;: 51}&#34;</span>,
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;source&#34;</span>: <span class="s2">&#34;p_7283&#34;</span>,
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;target&#34;</span>: <span class="s2">&#34;p_4723&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">  <span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="放到一起" class="headerLink">
    <a href="#%e6%94%be%e5%88%b0%e4%b8%80%e8%b5%b7" class="header-mark"></a>5.4 放到一起</h3><p>项目的代码都在 GitHub 上，最后其实只有一两百行的代码，把所有东西拼起来之后的代码是：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">├── README.md         <span class="c1"># You could find Design Logs here</span>
</span></span><span class="line"><span class="cl">├── corp-rel-backend
</span></span><span class="line"><span class="cl">│   └── app.py        <span class="c1"># Flask App to handle Requst and calls GDB</span>
</span></span><span class="line"><span class="cl">├── corp-rel-frontend
</span></span><span class="line"><span class="cl">│   └── src
</span></span><span class="line"><span class="cl">│       ├── App.vue
</span></span><span class="line"><span class="cl">│       └── main.js   <span class="c1"># Vue App to call Flask App and Renders Graph</span>
</span></span><span class="line"><span class="cl">└── requirements.txt
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="最终效果" class="headerLink">
    <a href="#%e6%9c%80%e7%bb%88%e6%95%88%e6%9e%9c" class="header-mark"></a>5.5 最终效果</h3><p>我们做出来了一个简陋但是足够具有参考性的小系统，它接受一个用户输入的实体的 ID，再回车之后：</p>
<ul>
<li>前端程序把请求发给后端</li>
<li>后端拼接 Nebula Graph 的查询语句，通过 Nebula Python 客户端请求 Nebula Graph</li>
<li>Nebula Graph 接受请求做出穿透查询，返回结构给后端</li>
<li>后端将结果构建成前端 D3 接受的格式，传给前端</li>
<li>前端接收到图结构的数据，渲染股权穿透的数据如下：</li>
</ul>
<video width="800" controls>
  <source src="./demo.mov" type="video/mp4"> 
</video>
<h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>6 总结</h2><p>现在，我们知道得益于图数据库的设计，在它上边构建一个方便的股权分析系统非常自然、高效，我们或者利用图数据库的图探索可视化能力、或者自己搭建，可以为用户提供非常高效、直观的多跳股权穿透分析。</p>
<p>如果你想了解更多关于分布式图数据库的知识，欢迎关注 Nebula Graph 这个开源项目，它已经被国内很多团队、公司认可选为图时代数据技术存储层的利器，大家可以访问<a href="https://nebula-graph.com.cn/cases" target="_blank" rel="noopener noreferrer">这里</a>，或者<a href="https://nebula-graph.com.cn/posts/" target="_blank" rel="noopener noreferrer">这里</a>，了解更多相关的分享和文章。</p>
<p>未来，我会给大家分享更多图数据库相关的文章、视频和开源示例项目思路分享和教程，欢迎大家关注我的网站: siwei.io。</p>
<blockquote>
<p>题图版权：<a href="https://unsplash.com/photos/oyXis2kALVg" target="_blank" rel="noopener noreferrer">fabioha</a></p>
</blockquote>]]></description>
</item><item>
    <title>Nebula Graph 索引详解</title>
    <link>https://siwei.io/nebula-index-explained/</link>
    <pubDate>Sun, 20 Feb 2022 16:35:53 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/nebula-index-explained/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/nebula-index-explained/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p><code>index not found</code>？ 找不到索引？为什么我要创建 NebulaGraph 索引？什么时候要用到 Nebula Graph 原生索引，一文把这些搞清楚。</p>
</blockquote>
<p>updated:</p>
<p><code>3.x</code> 之后，缺乏索引造成的新报错是：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">need to specify a limit number, or limit number can not push down.
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<p>NebulaGraph 的索引其实和传统的关系型数据库中的索引很像，但是又有一些容易让人疑惑的区别。刚开始了解 NebulaGraph 的同学会疑惑于：</p>
<ul>
<li>不清楚 NebulaGraph 图数据库中的索引到的是什么概念</li>
<li>我应该什么时候使用 NebulaGraph 索引</li>
<li>NebulaGraph 索引怎么影响到写入性能</li>
</ul>
<p>这篇文章里，我们就把这些问题回答好。</p>
<h2 id="到底-nebulagraph-索引是什么" class="headerLink">
    <a href="#%e5%88%b0%e5%ba%95-nebulagraph-%e7%b4%a2%e5%bc%95%e6%98%af%e4%bb%80%e4%b9%88" class="header-mark"></a>1 到底 NebulaGraph 索引是什么</h2><p>简而言之，NebulaGraph 索引是用来，且只用来针对纯属性条件出发查询场景的</p>
<ul>
<li>图游走（walk）查询中的属性条件过滤不需要它</li>
<li>纯属性条件出发查询（注：非采样情况）必须创建索引</li>
</ul>
<h3 id="纯属性条件出发查询" class="headerLink">
    <a href="#%e7%ba%af%e5%b1%9e%e6%80%a7%e6%9d%a1%e4%bb%b6%e5%87%ba%e5%8f%91%e6%9f%a5%e8%af%a2" class="header-mark"></a>1.1 纯属性条件出发查询</h3><p>我们知道在传统关系型数据库中，索引是对表数据的一个或多个针对特定<strong>列</strong>重排序的副本，它用来<strong>加速特定列过滤条件的读查询</strong>并带来了额外的数据写入（加速而非这样查询的必须前提）。</p>
<p>在 NebulaGraph 图数据库里，索引则是对<strong>点、边特定属性数据</strong>重排序的副本，用来提供<strong>纯属性条件出发查询</strong>（如下边的查询：从只给定了点边属性条件，而非点的 ID 出发去获取图数据）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="o">####</span><span class="w"> </span><span class="err">必须</span><span class="w"> </span><span class="n">Nebula</span><span class="w"> </span><span class="n">Graph</span><span class="w"> </span><span class="err">索引存在的查询</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">#</span><span class="w"> </span><span class="n">query</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="err">纯属性条件出发查询</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">LOOKUP</span><span class="w"> </span><span class="k">ON</span><span class="w"> </span><span class="n">tag1</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">col1</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">col2</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;foo&#34;</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">YIELD</span><span class="w"> </span><span class="n">tag1</span><span class="p">.</span><span class="n">col1</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">col1</span><span class="p">,</span><span class="w"> </span><span class="n">tag1</span><span class="p">.</span><span class="n">col3</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">col3</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">#</span><span class="w"> </span><span class="n">query</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="err">纯属性条件出发查询</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">v</span><span class="p">:</span><span class="n">player</span><span class="w"> </span><span class="err">{</span><span class="w"> </span><span class="n">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;Tim Duncan&#39;</span><span class="w"> </span><span class="err">}</span><span class="p">)</span><span class="c1">--&gt;(v2:player) \
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">        </span><span class="k">RETURN</span><span class="w"> </span><span class="n">v2</span><span class="p">.</span><span class="n">player</span><span class="p">.</span><span class="n">name</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">Name</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>上边这两个纯属性条件出发查询就是字面意思的”根据给定的属性条件获取点或者边本身“ ，反面的例子则是给定了点的 ID：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="o">####</span><span class="w"> </span><span class="err">不基于索引的查询</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">#</span><span class="w"> </span><span class="n">query</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="err">从给定的点做的游走查询</span><span class="w"> </span><span class="n">vertex</span><span class="w"> </span><span class="n">VID</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;player100&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">GO</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="s2">&#34;player100&#34;</span><span class="w"> </span><span class="n">OVER</span><span class="w"> </span><span class="n">follow</span><span class="w"> </span><span class="n">REVERSELY</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">YIELD</span><span class="w"> </span><span class="n">src</span><span class="p">(</span><span class="n">edge</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">id</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">GO</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="err">$</span><span class="o">-</span><span class="p">.</span><span class="n">id</span><span class="w"> </span><span class="n">OVER</span><span class="w"> </span><span class="n">serve</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">WHERE</span><span class="w"> </span><span class="n">properties</span><span class="p">(</span><span class="err">$</span><span class="o">^</span><span class="p">).</span><span class="n">age</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">20</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">YIELD</span><span class="w"> </span><span class="n">properties</span><span class="p">(</span><span class="err">$</span><span class="o">^</span><span class="p">).</span><span class="n">name</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">FriendOf</span><span class="p">,</span><span class="w"> </span><span class="n">properties</span><span class="p">(</span><span class="err">$$</span><span class="p">).</span><span class="n">name</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">Team</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">#</span><span class="w"> </span><span class="n">query</span><span class="w"> </span><span class="mi">3</span><span class="p">,</span><span class="w"> </span><span class="err">从给定的点做的游走查询</span><span class="w"> </span><span class="n">vertex</span><span class="w"> </span><span class="n">VID</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;player101&#34;</span><span class="w"> </span><span class="err">或者</span><span class="w"> </span><span class="s2">&#34;player102&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">v</span><span class="p">:</span><span class="n">player</span><span class="w"> </span><span class="err">{</span><span class="w"> </span><span class="n">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;Tim Duncan&#39;</span><span class="w"> </span><span class="err">}</span><span class="p">)</span><span class="c1">--(v2) \
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">        </span><span class="k">WHERE</span><span class="w"> </span><span class="n">id</span><span class="p">(</span><span class="n">v2</span><span class="p">)</span><span class="w"> </span><span class="k">IN</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;player101&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;player102&#34;</span><span class="p">]</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">RETURN</span><span class="w"> </span><span class="n">v2</span><span class="p">.</span><span class="n">player</span><span class="p">.</span><span class="n">name</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">Name</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>我们仔细看前边的 <code>query 1</code> 和 <code>query 3</code>，尽管语句中条件都有针对 tag 为 player 的过滤： <code>{ name: 'Tim Duncan' }</code> ：</p>
<ul>
<li>
<p><code>query 3</code>之中不需要索引，因为它可以：</p>
<ul>
<li>更直接的从已知的 <code>v2</code> 顶点： <code>[&quot;player101&quot;, &quot;player102&quot;]</code></li>
<li>向外扩展、游走（GetNeighbors() 获得边的另一端的点，然后GetVertices() 得到下一跳的 <code>v</code>），根据 v.player.name 过滤掉不要的数据</li>
</ul>
</li>
<li>
<p><code>query 1</code> 则不同，它因为没有任何给定的顶点 ID：</p>
<ul>
<li>只能从属性条件入手，<code>{ name: 'Tim Duncan' }</code>，在按照 name 排序了的索引数据中先找到符合的点：IndexScan() 得到 <code>v</code></li>
<li>然后再从 <code>v</code> 做 GetNeighbors() 获得边的另一端 的 <code>v2</code> ，在通过 GetVertices() 去获得下一跳 <code>v2</code> 中的数据</li>
</ul>
</li>
</ul>
<p>其实，这里的关键就是在于是查询是否存在给定的顶点 ID（Vertex ID），下边两个查询的执行计划里更清晰地比较了他们的区别：</p>
<table>
<thead>
<tr>
<th><code>query 1</code>, 需要基于索引，纯属性条件出发查询</th>
<th><code>query 3</code>, 从已知 VID，不需要索引</th>
</tr>
</thead>
<tbody>
<tr>
<td><a class="lightgallery" href="/nebula-index-explained/query-based-on-index.webp" title="query-based-on-index" data-thumbnail="/nebula-index-explained/query-based-on-index.webp">
        
    </a></td>
<td><a class="lightgallery" href="/nebula-index-explained/query-requires-no-index.webp" title="query-requires-no-index" data-thumbnail="/nebula-index-explained/query-requires-no-index.webp">
        
    </a></td>
</tr>
</tbody>
</table>
<h3 id="为什么纯属性条件出发查询里必须要索引呢" class="headerLink">
    <a href="#%e4%b8%ba%e4%bb%80%e4%b9%88%e7%ba%af%e5%b1%9e%e6%80%a7%e6%9d%a1%e4%bb%b6%e5%87%ba%e5%8f%91%e6%9f%a5%e8%af%a2%e9%87%8c%e5%bf%85%e9%a1%bb%e8%a6%81%e7%b4%a2%e5%bc%95%e5%91%a2" class="header-mark"></a>1.2 为什么纯属性条件出发查询里必须要索引呢？</h3><p>因为 NebulaGraph 在存储数据的时候，它的结构是面向分布式与关联关系设计的，类似表结构数据库中无索引的全扫描条件搜索实际上更加昂贵，所以设计上被有意禁止了。</p>
<blockquote>
<p>注: 如果不追求全部数据，只要采样一部分，3.0 里之后是支持不强制索引 LIMIT <n> 的情况的，如下查询（有 LIMIT）不需要索引：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="c1"># sample vertex
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">v</span><span class="p">:</span><span class="o">`</span><span class="n">team</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="k">RETURN</span><span class="w"> </span><span class="n">v</span><span class="w"> </span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1"># or sample edge
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">()</span><span class="o">-</span><span class="p">[</span><span class="n">e</span><span class="p">:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">()</span><span class="w"> </span><span class="k">RETURN</span><span class="w"> </span><span class="n">e</span><span class="w"> </span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">3</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div></blockquote>
<h3 id="为什么只有纯属性条件出发查询" class="headerLink">
    <a href="#%e4%b8%ba%e4%bb%80%e4%b9%88%e5%8f%aa%e6%9c%89%e7%ba%af%e5%b1%9e%e6%80%a7%e6%9d%a1%e4%bb%b6%e5%87%ba%e5%8f%91%e6%9f%a5%e8%af%a2" class="header-mark"></a>1.3 为什么只有纯属性条件出发查询</h3><p>我们比较一下正常的图查询 <strong>graph-queries</strong> 和纯属性条件出发查询 <strong>pure-prop-condition queries</strong>：</p>
<ul>
<li>graph-queries： 如 <code>query 2</code> 、 <code>query 3</code>是沿着边一路找到特定路径条件的扩展游走</li>
<li>pure-prop-condition queries：如 <code>query 0</code> and <code>query 1</code>  是只通过一定属性条件（或者是无限制条件）找到满足的点、边</li>
</ul>
<p>而在 NebulaGraph 里，graph-queries 在扩展的时候，图的原始数据已经按照 VID（点和边都是）排序过了（或者说在数据里已经索引过了），这个排序带来连续存储（物理上临接）使得扩展游走本身就是优化、很快的。</p>
<h3 id="总结索引是什么索引不是什么" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93%e7%b4%a2%e5%bc%95%e6%98%af%e4%bb%80%e4%b9%88%e7%b4%a2%e5%bc%95%e4%b8%8d%e6%98%af%e4%bb%80%e4%b9%88" class="header-mark"></a>1.4 总结：索引是什么，索引不是什么？</h3><p>索引是什么？</p>
<ul>
<li>NebulaGraph 索引是为了从给定属性条件查点、边的一份属性数据的排序，它用写入的代价是的这种读查询模式成为可能。</li>
</ul>
<p>索引不是什么？</p>
<ul>
<li>NebulaGraph 索引不是用来加速一般图查询的：从一个点开始向外拓展的查询（即使是过滤属性条件的）不会依赖原生索引，因为 Nebula 数据自身的存储就是面向这种查询优化、排序的。</li>
</ul>
<h2 id="一些-nebula-graph-索引的设计细节" class="headerLink">
    <a href="#%e4%b8%80%e4%ba%9b-nebula-graph-%e7%b4%a2%e5%bc%95%e7%9a%84%e8%ae%be%e8%ae%a1%e7%bb%86%e8%8a%82" class="header-mark"></a>2 一些 Nebula Graph 索引的设计细节</h2><p>为了更好理解索引的限制、代价、能力，咱们来解释更多他的细节</p>
<ul>
<li>
<p>NebulaGraph 索引是在本地（不是分开、中心化）和点数据被一起存储、分片的。</p>
</li>
<li>
<p>它只支持左匹配</p>
<ul>
<li>因为底层是 RocksDB Prefix Scan</li>
</ul>
</li>
<li>
<p>性能代价:</p>
<ul>
<li>写入时候的路径：不只是多一分数据，为了保证一致性，还有昂贵的读操作</li>
<li>读路径：基于规则的优化选择索引，Fan Out 到所有 StorageD</li>
</ul>
</li>
</ul>
<p>这些信息也在我的<a href="https://www.siwei.io/sketch-notes/" target="_blank" rel="noopener noreferrer">手绘图和视频</a>里可以看到：</p>
<p><a class="lightgallery" href="https://www.siwei.io/sketches/nebula-index-demystified/nebula-index-demystified.webp" title="https://www.siwei.io/sketches/nebula-index-demystified/nebula-index-demystified.webp" data-thumbnail="https://www.siwei.io/sketches/nebula-index-demystified/nebula-index-demystified.webp">
        
    </a></p>
<blockquote>
<p>因为左匹配的设计，在有更复杂的针对纯属性条件出发查询里涉及到通配、REGEXP这样的全文搜索情况，Nebula Graph 提供了全文索引的功能，它是利用 Raft Listener 去异步将数据写到外部 Elasticsearch 集群之中，并在查询的时候去查 ES 去做到的，见<a href="https://docs.nebula-graph.com.cn/3.0.0/4.deployment-and-installation/6.deploy-text-based-index/2.deploy-es/" target="_blank" rel="noopener noreferrer">文档</a>。</p>
</blockquote>
<p>在这个手绘图中，我们还可以看出</p>
<ul>
<li>Write path
<ul>
<li>写入索引数据是同步操作的</li>
</ul>
</li>
<li>Read path
<ul>
<li>这部分画了一个 RBO 的例子，查询里的规则假设 col2 相等匹配排在左边的情况下，性能优于 col1 的大小比较匹配，所以选择了第二个索引</li>
<li>选好了索引之后，扫描索引的请求被 fan out 到存储节点上，这其中有些过滤条件比如 top n 是可以下推的</li>
</ul>
</li>
</ul>
<p>结论：</p>
<ul>
<li>因为写入的代价，只有必须用索引的时候采用，如果采样查询能满足读的要求，可以不创建索引而用 LIMIT <n>。</li>
<li>索引有左匹配的限制
<ul>
<li>符合查询的顺序要仔细设计</li>
<li>有时候需要使用全文索引 <a href="https://docs.nebula-graph.com.cn/3.0.0/4.deployment-and-installation/6.deploy-text-based-index/2.deploy-es/" target="_blank" rel="noopener noreferrer">full-text index</a>。</li>
</ul>
</li>
</ul>
<h2 id="索引的使用" class="headerLink">
    <a href="#%e7%b4%a2%e5%bc%95%e7%9a%84%e4%bd%bf%e7%94%a8" class="header-mark"></a>3 索引的使用</h2><p>具体要参考<a href="https://docs.nebula-graph.io/3.0.0/3.ngql-guide/14.native-index-statements/" target="_blank" rel="noopener noreferrer">索引文档</a>一些要点是：</p>
<ul>
<li>
<p>在 tag 或者 edge type 上针对想要被条件反查点边的属性创建索引</p>
<ul>
<li><code>CREATE INDEX</code></li>
</ul>
</li>
<li>
<p>创建索引之后的索引部分数据会同步写入，但是如果创建索引之前已经有的点边数据对应的索引是需要明确指定去创建的，这是一个异步的 job：</p>
<ul>
<li><code>REBUILD INDEX</code></li>
</ul>
</li>
<li>
<p>触发了异步的 <code>REBUILD INDEX</code> 之后，可以查询状态：</p>
<ul>
<li><code>SHOW INDEX STATUS</code></li>
</ul>
</li>
<li>
<p>利用到索引的查询可以是 LOOKUP，并且常常可以借助管道符在此之上做拓展查询（Graph Query）：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="n">LOOKUP</span><span class="w"> </span><span class="k">ON</span><span class="w"> </span><span class="n">player</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">WHERE</span><span class="w"> </span><span class="n">player</span><span class="p">.</span><span class="n">name</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;Kobe Bryant&#34;</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">YIELD</span><span class="w"> </span><span class="n">id</span><span class="p">(</span><span class="n">vertex</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">VertexID</span><span class="p">,</span><span class="w"> </span><span class="n">properties</span><span class="p">(</span><span class="n">vertex</span><span class="p">).</span><span class="n">name</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">name</span><span class="w"> </span><span class="o">|</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">GO</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="err">$</span><span class="o">-</span><span class="p">.</span><span class="n">VertexID</span><span class="w"> </span><span class="n">OVER</span><span class="w"> </span><span class="n">serve</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">YIELD</span><span class="w"> </span><span class="err">$</span><span class="o">-</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">properties</span><span class="p">(</span><span class="n">edge</span><span class="p">).</span><span class="n">start_year</span><span class="p">,</span><span class="w"> </span><span class="n">properties</span><span class="p">(</span><span class="n">edge</span><span class="p">).</span><span class="n">end_year</span><span class="p">,</span><span class="w"> </span><span class="n">properties</span><span class="p">(</span><span class="err">$$</span><span class="p">).</span><span class="n">name</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>也可以是 MATCH ，这里边 <code>v</code> 是通过索引得到的，而 <code>v2</code> 则是在数据（非索引）部分拓展查询获得的。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">v</span><span class="p">:</span><span class="o">`</span><span class="n">player</span><span class="o">`</span><span class="err">{</span><span class="n">name</span><span class="p">:</span><span class="s2">&#34;Tim Duncan&#34;</span><span class="err">}</span><span class="p">)</span><span class="o">--</span><span class="p">(</span><span class="n">v2</span><span class="p">:</span><span class="o">`</span><span class="n">player</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">RETURN</span><span class="w"> </span><span class="n">v2</span><span class="p">.</span><span class="o">`</span><span class="n">player</span><span class="o">`</span><span class="p">.</span><span class="n">name</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">Name</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>复合索引的能力与限制</p>
<p>理解原生索引的匹配是左匹配能让我们知道对于超过一个属性的索引：复合索引，并且能帮助我们理解它的能力有限制，这里说几个结论：</p>
<ul>
<li>我们创建针对多个属性的复合索引是顺序有关的
<ul>
<li>比如，我们创建一个双属性复合索引 index_a: <code>(isRisky: bool, age: int)</code>，和 index_b: <code>(age: int, isRisky: bool)</code> 在根据 <code>WHERE n.user.isRisky == true AND n.user.age &gt; 18</code> 这个条件查询时候，index_a 因为左匹配一个相等的短字段，显然效率更高。</li>
</ul>
</li>
<li>只有复合左匹配的被复合索引的属性真子集的过滤条件才能被只支持
<ul>
<li>比如，index_a: <code>(isRisky: bool, age: int)</code>，和 index_b: <code>(age: int, isRisky: bool)</code> 在查询 <code>WHERE n.user.age &gt; 18</code> 这个语句的时候, 只有 index_b 复合最左匹配，能满足这个查询。</li>
</ul>
</li>
<li>针对一些从属性作为查询的起点，找点、边的情况，原生索引是不能满足全文搜索的匹配场景的，这时候，我们应该考虑使用 Nebula 全文索引，它是 Nebula 社区支持的开箱即用的外置 Elastic Search，通过配置，创建了全文索引的数据会通过 Raft listener 异步更新到 Elastic 集群中，他的查询入口也是 <code>LOOKUP</code>，详细的信息请<a href="https://docs.nebula-graph.com.cn/3.0.1/4.deployment-and-installation/6.deploy-text-based-index/2.deploy-es/" target="_blank" rel="noopener noreferrer">参考文档</a>。</li>
</ul>
</li>
</ul>
<h2 id="回顾" class="headerLink">
    <a href="#%e5%9b%9e%e9%a1%be" class="header-mark"></a>4 回顾</h2><ul>
<li>NebulaGraph 索引在只提供属性条件情况下通过对属性的排序副本扫描查点、边</li>
<li>NebulaGraph 索引<strong>不是</strong>用来图拓展查询的</li>
<li>NebulaGraph 索引是左匹配，不是用来做模糊全文搜索的</li>
<li>NebulaGraph 索引在写入时候有性能代价</li>
<li>记得如果创建 NebulaGraph 索引之前已经有相应点边上的数据，要重建索引</li>
</ul>
<p>Happy Graphing!</p>
<p>Feature image credit to <a href="https://unsplash.com/photos/ZiQkhI7417A" target="_blank" rel="noopener noreferrer">Alina</a></p>
]]></description>
</item><item>
    <title>图数据库体操：用 Nebula Graph 搭成语图谱解汉兜</title>
    <link>https://siwei.io/resolve-wordle/</link>
    <pubDate>Mon, 28 Feb 2022 19:18:59 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/resolve-wordle/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/resolve-wordle/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>我发现用 Nebula Graph 的图查询解 Antfu 的汉兜（最好的中文成语版 wordle 👉🏻 handle.antfu.me）特别有意思，很适合每天写图库语句的体操练习，本文揭示如何用知识图谱<del>作弊</del>解汉兜😁</p>
</blockquote>
<h2 id="什么是汉兜" class="headerLink">
    <a href="#%e4%bb%80%e4%b9%88%e6%98%af%e6%b1%89%e5%85%9c" class="header-mark"></a>1 什么是汉兜？</h2><p>汉兜（https://handle.antfu.me）是由 Vue/Vite 核心团队的 Antfu 的又一个非常酷的作品，一个非常精致的汉字版的 Wordle，他是是一个每日挑战的填字游戏的中文成语版。</p>
<p>每天，汉兜会发起一个猜成语挑战，人们要在十次内才对它才能获胜，每一步之后都会收到相应的文字、声母、韵母、声调的匹配情况的提示，其中：绿色表示这个因素存在并且位置匹配、橘色表示这个元素存在但是位置不对，详细的规则可见如下的网页截图：</p>
<p><a class="lightgallery" href="/resolve-wordle/handle-intro.webp" title="/resolve-wordle/handle-intro.webp" data-thumbnail="/resolve-wordle/handle-intro.webp">
        
    </a></p>
<p>汉兜的乐趣就我们在于在有限的尝试过程中，在大脑中搜寻可能的答案，不断去逼近真理，任何试图作弊、讨巧去泄漏结果的行为都是很无趣、倒胃口的（比如从开源的汉兜代码里窃取信息），这个过程就像在做大脑的体操。</p>
<p>说到大脑的成语词汇量体操，我突然想到，为什么我们不能在大脑之外造一个汉语成语知识图谱，然后基于这个图谱去做图数据库查询语法体操呢？</p>
<h2 id="构造解决汉兜的成语知识图谱" class="headerLink">
    <a href="#%e6%9e%84%e9%80%a0%e8%a7%a3%e5%86%b3%e6%b1%89%e5%85%9c%e7%9a%84%e6%88%90%e8%af%ad%e7%9f%a5%e8%af%86%e5%9b%be%e8%b0%b1" class="header-mark"></a>2 构造解决汉兜的成语知识图谱</h2><h3 id="什么是知识图谱" class="headerLink">
    <a href="#%e4%bb%80%e4%b9%88%e6%98%af%e7%9f%a5%e8%af%86%e5%9b%be%e8%b0%b1" class="header-mark"></a>2.1 什么是知识图谱？</h3><p>简单来说，知识图谱是一个连接实体之间关联关系的网络，它最初由 Google 提出并用来满足搜索引擎中基于知识推理才可获得（而不是网页倒排索引）的搜索问题，比如：”姚明妻子的年龄？“、”火箭队得过几次总冠军？“</p>
<p>这里边，我们关注的条件。到 2022 年的现在，知识图谱已经被广泛应用在推荐系统、问答系统、安全风控等等更多搜索之外的领域。</p>
<h3 id="为什么需要用知识图谱解决汉兜" class="headerLink">
    <a href="#%e4%b8%ba%e4%bb%80%e4%b9%88%e9%9c%80%e8%a6%81%e7%94%a8%e7%9f%a5%e8%af%86%e5%9b%be%e8%b0%b1%e8%a7%a3%e5%86%b3%e6%b1%89%e5%85%9c" class="header-mark"></a>2.2 为什么需要用知识图谱解决汉兜？</h3><p><del>原因就是：because I can</del></p>
<p>实际上，我们在大脑中解决字谜游戏的过程像极了图谱网络中的信息搜寻的过程，汉兜的解谜反馈提示条件天然适合被用图谱的语义来进行表达。在本文后边，你们会发现解谜条件翻译成图语义是非常非常自然的，这个问题就像是一个天然的为图谱而存在的练习一样，我相信这和知识图谱的结构和人脑中的知识结构非常接近有很大的关系。</p>
<h3 id="如何构建面向汉兜解谜的知识图谱" class="headerLink">
    <a href="#%e5%a6%82%e4%bd%95%e6%9e%84%e5%bb%ba%e9%9d%a2%e5%90%91%e6%b1%89%e5%85%9c%e8%a7%a3%e8%b0%9c%e7%9a%84%e7%9f%a5%e8%af%86%e5%9b%be%e8%b0%b1" class="header-mark"></a>2.3 如何构建面向汉兜解谜的知识图谱？</h3><p>知识图谱是由实体（顶点）和关系（边）组成的，用图数据库管理系统（Graph Database MS）可以很方便进行知识的入库、更改、查询、甚至可视化探索。</p>
<p>在本文里，我将利用开源的分布式图数据库 Nebula Graph 开实践这个过程，具体图谱系统的搭建我都会放在文末。</p>
<p>在本章，我们只讨论图谱的建模：如何面向汉兜的解谜去设计“实体”与“关系”。</p>
<h4 id="图建模" class="headerLink">
    <a href="#%e5%9b%be%e5%bb%ba%e6%a8%a1" class="header-mark"></a>2.3.1 图建模</h4><h5 id="最初的想法" class="headerLink">
    <a href="#%e6%9c%80%e5%88%9d%e7%9a%84%e6%83%b3%e6%b3%95" class="header-mark"></a>2.3.1.1 最初的想法</h5><p>首先，一定存在的实体是：</p>
<ul>
<li>成语</li>
<li>汉字</li>
</ul>
<p>成语-[包含]-&gt;汉字，每个汉字-[读作]-&gt;读音。</p>
<p>其次，因为解谜过程中涉及到了声母、韵母以及声调的条件，考虑到图谱本身的量级非常小（千级别），而且字的读音是一对多的关系，我把读音和声母（包涵声母-initial和韵母-final）也作为实体，他们之间的关系则是顺理成章了：</p>
<p><a class="lightgallery" href="/resolve-wordle/schema_v0.webp" title="schema_v0" data-thumbnail="/resolve-wordle/schema_v0.webp">
        
    </a></p>
<h5 id="最终的版本" class="headerLink">
    <a href="#%e6%9c%80%e7%bb%88%e7%9a%84%e7%89%88%e6%9c%ac" class="header-mark"></a>2.3.1.2 最终的版本</h5><p>然而，我在后边基于图谱进行查询的时候发现最初的建模会使得(成语)&ndash;&gt;(字)&ndash;&gt;(读音)查询过程中丢失了这个字特定的读法的条件，所以我最终的建模是：</p>
<p><a class="lightgallery" href="/resolve-wordle/schema_v1.webp" title="schema_v1" data-thumbnail="/resolve-wordle/schema_v1.webp">
        
    </a></p>
<p>这样，纯文字的条件只涉及了<code>(成语)--&gt;(字)</code> 这一跳，而读音、声母、声调的条件则是另一条关系路径，既没有最初版本条件的冗余，又可以在一个路径模式匹配里带上两种条件（后边的例子里会涉及这样的表达）。</p>
<h4 id="构建成语知识图谱" class="headerLink">
    <a href="#%e6%9e%84%e5%bb%ba%e6%88%90%e8%af%ad%e7%9f%a5%e8%af%86%e5%9b%be%e8%b0%b1" class="header-mark"></a>2.3.2 构建成语知识图谱</h4><p>有了建模、这么简单的图谱的构建就剩下了数据的收集、清洗和入库。</p>
<p>对于所有成语数据和他们的读音，我一方面直接抽取了汉兜代码内部的<a href="https://github.com/antfu/handle/" target="_blank" rel="noopener noreferrer">数据</a>、另一方面利用 <a href="https://pypinyin.readthedocs.io/" target="_blank" rel="noopener noreferrer">PyPinyin</a> 这个开源的 Python 库将汉兜数据中没有读音的数据获得读音，同时，我也用到了 PyPinyin 里的很多方便的函数比如获取一个拼音的声母、韵母。</p>
<p>构建工具的代码在这里：https://github.com/wey-gu/chinese-graph</p>
<p>更多信息我也放在文末的附录之中。</p>
<h2 id="开始知识图谱查询体操" class="headerLink">
    <a href="#%e5%bc%80%e5%a7%8b%e7%9f%a5%e8%af%86%e5%9b%be%e8%b0%b1%e6%9f%a5%e8%af%a2%e4%bd%93%e6%93%8d" class="header-mark"></a>3 开始知识图谱查询体操</h2><p>至此，我假设咱们都已经有了我帮大家搭建的成语<del>作弊</del>知识图谱了，开始我们的图谱查询体操吧！</p>
<p>首先，打开汉兜 👉🏻 <a href="https://handle.antfu.me/" target="_blank" rel="noopener noreferrer">https://handle.antfu.me/</a></p>
<p>假设我们想从一个成语开始，如果你没有想法的话可以试试这个：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="o">//</span><span class="w"> </span><span class="err">匹配成语中的一个结果</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">x</span><span class="p">:</span><span class="o">`</span><span class="n">idiom</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="k">RETURN</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">返回结果</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="p">(</span><span class="s2">&#34;爱憎分明&#34;</span><span class="w"> </span><span class="p">:</span><span class="n">idiom</span><span class="err">{</span><span class="n">pinyin</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;[&#39;ai4&#39;, &#39;zeng1&#39;, &#39;fen1&#39;, &#39;ming2&#39;]&#34;</span><span class="err">}</span><span class="p">)</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>然后我们把它填到汉兜之中，获得第一次尝试的提示条件：</p>
<p><a class="lightgallery" href="/resolve-wordle/initial_word.webp" title="/resolve-wordle/initial_word.webp" data-thumbnail="/resolve-wordle/initial_word.webp">
        
    </a></p>
<p>我们运气不错，得到了三个位置上的条件！</p>
<ul>
<li>有一个非第一个位置的字，拼音是 4 声，韵母是 ai，但不是爱（爱）</li>
<li>有一个一声的字，不在第二个位置（憎）</li>
<li>有一个字韵母是 ing，不在第四个位置（明）</li>
<li>第四个字是二声（明）</li>
</ul>
<p>下面，我们开始图数据库语句体操！</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="o">//</span><span class="w"> </span><span class="err">有一个非第一个位置的字，拼音是</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="err">声，韵母是</span><span class="w"> </span><span class="n">ai</span><span class="err">，但不是爱</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">char0</span><span class="p">:</span><span class="o">`</span><span class="k">character</span><span class="o">`</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[</span><span class="n">with_char_0</span><span class="p">:</span><span class="o">`</span><span class="n">with_character</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">x</span><span class="p">:</span><span class="o">`</span><span class="n">idiom</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">with_pinyin_0</span><span class="p">:</span><span class="o">`</span><span class="n">with_pinyin</span><span class="o">`</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">pinyin_0</span><span class="p">:</span><span class="o">`</span><span class="n">character_pinyin</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">with_pinyin_part</span><span class="o">`</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="o">`</span><span class="n">final_part_0</span><span class="o">`</span><span class="p">:</span><span class="o">`</span><span class="n">pinyin_part</span><span class="o">`</span><span class="err">{</span><span class="n">part_type</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;final&#34;</span><span class="err">}</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="o">`</span><span class="n">final_part_0</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;ai&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">pinyin_0</span><span class="p">.</span><span class="o">`</span><span class="n">character_pinyin</span><span class="o">`</span><span class="p">.</span><span class="n">tone</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">with_pinyin_0</span><span class="p">.</span><span class="o">`</span><span class="n">position</span><span class="o">`</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">with_char_0</span><span class="p">.</span><span class="o">`</span><span class="n">position</span><span class="o">`</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">char0</span><span class="p">)</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="s2">&#34;爱&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">有一个一声的字，不在第二个位置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">x</span><span class="p">:</span><span class="o">`</span><span class="n">idiom</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="o">-</span><span class="p">[</span><span class="n">with_pinyin_1</span><span class="p">:</span><span class="o">`</span><span class="n">with_pinyin</span><span class="o">`</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">pinyin_1</span><span class="p">:</span><span class="o">`</span><span class="n">character_pinyin</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">pinyin_1</span><span class="p">.</span><span class="o">`</span><span class="n">character_pinyin</span><span class="o">`</span><span class="p">.</span><span class="n">tone</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">with_pinyin_1</span><span class="p">.</span><span class="o">`</span><span class="n">position</span><span class="o">`</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">有一个字韵母是</span><span class="w"> </span><span class="n">ing</span><span class="err">，不在第四个位置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">x</span><span class="p">:</span><span class="o">`</span><span class="n">idiom</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="o">-</span><span class="p">[</span><span class="n">with_pinyin_2</span><span class="p">:</span><span class="o">`</span><span class="n">with_pinyin</span><span class="o">`</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(:</span><span class="o">`</span><span class="n">character_pinyin</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">with_pinyin_part</span><span class="o">`</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">final_part_2</span><span class="p">:</span><span class="o">`</span><span class="n">pinyin_part</span><span class="o">`</span><span class="err">{</span><span class="n">part_type</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;final&#34;</span><span class="err">}</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">final_part_2</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;ing&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">with_pinyin_2</span><span class="p">.</span><span class="o">`</span><span class="n">position</span><span class="o">`</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">第四个字是二声</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">x</span><span class="p">:</span><span class="o">`</span><span class="n">idiom</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="o">-</span><span class="p">[</span><span class="n">with_pinyin_3</span><span class="p">:</span><span class="o">`</span><span class="n">with_pinyin</span><span class="o">`</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">pinyin_3</span><span class="p">:</span><span class="o">`</span><span class="n">character_pinyin</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">pinyin_3</span><span class="p">.</span><span class="o">`</span><span class="n">character_pinyin</span><span class="o">`</span><span class="p">.</span><span class="n">tone</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">with_pinyin_3</span><span class="p">.</span><span class="o">`</span><span class="n">position</span><span class="o">`</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="nf">count</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">c</span><span class="w"> </span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">c</span><span class="w"> </span><span class="k">DESC</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>在图数据库之中运行，得到了 7 个答案：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="err">(</span><span class="s2">&#34;惊愚骇俗&#34;</span> <span class="err">:idiom</span><span class="p">{</span><span class="err">pinyin:</span> <span class="nt">&#34;[&#39;jing1&#39;, &#39;yu2&#39;, &#39;hai4&#39;, &#39;su2&#39;]&#34;</span><span class="p">}</span><span class="err">)</span>
</span></span><span class="line"><span class="cl"><span class="err">(</span><span class="s2">&#34;惊世骇俗&#34;</span> <span class="err">:idiom</span><span class="p">{</span><span class="err">pinyin:</span> <span class="nt">&#34;[&#39;jing1&#39;, &#39;shi4&#39;, &#39;hai4&#39;, &#39;su2&#39;]&#34;</span><span class="p">}</span><span class="err">)</span>
</span></span><span class="line"><span class="cl"><span class="err">(</span><span class="s2">&#34;惊见骇闻&#34;</span> <span class="err">:idiom</span><span class="p">{</span><span class="err">pinyin:</span> <span class="nt">&#34;[&#39;jing1&#39;, &#39;jian4&#39;, &#39;hai4&#39;, &#39;wen2&#39;]&#34;</span><span class="p">}</span><span class="err">)</span>
</span></span><span class="line"><span class="cl"><span class="err">(</span><span class="s2">&#34;沽名卖直&#34;</span> <span class="err">:idiom</span><span class="p">{</span><span class="err">pinyin:</span> <span class="nt">&#34;[&#39;gu1&#39;, &#39;ming2&#39;, &#39;mai4&#39;, &#39;zhi2&#39;]&#34;</span><span class="p">}</span><span class="err">)</span>
</span></span><span class="line"><span class="cl"><span class="err">(</span><span class="s2">&#34;惊心骇神&#34;</span> <span class="err">:idiom</span><span class="p">{</span><span class="err">pinyin:</span> <span class="nt">&#34;[&#39;jing1&#39;, &#39;xin1&#39;, &#39;hai4&#39;, &#39;shen2&#39;]&#34;</span><span class="p">}</span><span class="err">)</span>
</span></span><span class="line"><span class="cl"><span class="err">(</span><span class="s2">&#34;荆棘载途&#34;</span> <span class="err">:idiom</span><span class="p">{</span><span class="err">pinyin:</span> <span class="nt">&#34;[&#39;jing1&#39;, &#39;ji2&#39;, &#39;zai4&#39;, &#39;tu2&#39;]&#34;</span><span class="p">}</span><span class="err">)</span>
</span></span><span class="line"><span class="cl"><span class="err">(</span><span class="s2">&#34;出卖灵魂&#34;</span> <span class="err">:idiom</span><span class="p">{</span><span class="err">pinyin:</span> <span class="nt">&#34;[&#39;chu1&#39;, &#39;mai4&#39;, &#39;ling2&#39;, &#39;hun2&#39;]&#34;</span><span class="p">}</span><span class="err">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>看起来 <code>惊世骇俗</code> 比较主流，试试！</p>
<p><a class="lightgallery" href="/resolve-wordle/D59.webp" title="汉兜 D59" data-thumbnail="/resolve-wordle/D59.webp">
        
    </a></p>
<p>我们很幸运，借助于成语<del>作弊</del>知识图谱，居然一次就找到了答案，当然这实际上得益于第一次随机选取的词带来的限制条件的个数，不过在大部分情况下，两次尝试获得最终答案的可能性还是非常大的！</p>
<blockquote>
<p>注，这中间很长的253分钟是因为我在查询中发现之前代码里构造的图谱有点 bug，是“披枷带锁”这个词引起的读音图谱的错误数据，还好后来被修复了。</p>
<p>大家知道“披枷带锁”的正确读音么？😭</p>
</blockquote>
<p>接下来，我给大家详细解释一下这个语句的意思。</p>
<h3 id="语句的含义" class="headerLink">
    <a href="#%e8%af%ad%e5%8f%a5%e7%9a%84%e5%90%ab%e4%b9%89" class="header-mark"></a>3.1 语句的含义</h3><p>我们从第一个字的条件开始，这是一个既有声音、又有字形信息的条件。</p>
<ul>
<li>声音信息：存在一个韵母为 <code>ai4</code> 的发音，位置不在第一个字</li>
<li>文字信息：这个韵母为 <code>ai4</code> 的字，不是<code>爱</code>字</li>
</ul>
<p>对于声音信息条件，转换为图模式匹配为：(成语)-一个字发音-(拼音) -包含声母-(韵母) WHERE 拼音韵母为 <code>ai4</code> AND 位置不是第一个。</p>
<p>因为建模的时候，属性名称我用的是英文（其实中文也是支持的），实际上的语句为：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="o">//</span><span class="w"> </span><span class="err">有一个非第一个位置的字，拼音是</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="err">声，韵母是</span><span class="w"> </span><span class="n">ai</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">x</span><span class="p">:</span><span class="n">idiom</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">with_pinyin_0</span><span class="p">:</span><span class="n">with_pinyin</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">pinyin_0</span><span class="p">:</span><span class="o">`</span><span class="n">character_pinyin</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">with_pinyin_part</span><span class="o">`</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="o">`</span><span class="n">final_part_0</span><span class="o">`</span><span class="p">:</span><span class="o">`</span><span class="n">pinyin_part</span><span class="o">`</span><span class="err">{</span><span class="n">part_type</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;final&#34;</span><span class="err">}</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="o">`</span><span class="n">final_part_0</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;ai&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">pinyin_0</span><span class="p">.</span><span class="o">`</span><span class="n">character_pinyin</span><span class="o">`</span><span class="p">.</span><span class="n">tone</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">with_pinyin_0</span><span class="p">.</span><span class="o">`</span><span class="n">position</span><span class="o">`</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">x</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>类似的，表示非第一个位置的字，不是<code>爱</code> 的表达是：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="o">//</span><span class="w"> </span><span class="err">有一个非第一个位置的字，拼音是</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="err">声，韵母是</span><span class="w"> </span><span class="n">ai</span><span class="err">，但不是爱</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">char0</span><span class="p">:</span><span class="o">`</span><span class="k">character</span><span class="o">`</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[</span><span class="n">with_char_0</span><span class="p">:</span><span class="o">`</span><span class="n">with_character</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">x</span><span class="p">:</span><span class="o">`</span><span class="n">idiom</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">with_char_0</span><span class="p">.</span><span class="o">`</span><span class="n">position</span><span class="o">`</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">char0</span><span class="p">)</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="s2">&#34;爱&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="nf">count</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">c</span><span class="w"> </span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">c</span><span class="w"> </span><span class="k">DESC</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>而因为这两个条件最终描述的是同一个字，所以它们是可以被写在一个路径下的：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="o">//</span><span class="w"> </span><span class="err">有一个非第一个位置的字，拼音是</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="err">声，韵母是</span><span class="w"> </span><span class="n">ai</span><span class="err">，但不是爱</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">char0</span><span class="p">:</span><span class="o">`</span><span class="k">character</span><span class="o">`</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[</span><span class="n">with_char_0</span><span class="p">:</span><span class="o">`</span><span class="n">with_character</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">x</span><span class="p">:</span><span class="o">`</span><span class="n">idiom</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">with_pinyin_0</span><span class="p">:</span><span class="o">`</span><span class="n">with_pinyin</span><span class="o">`</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">pinyin_0</span><span class="p">:</span><span class="o">`</span><span class="n">character_pinyin</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">with_pinyin_part</span><span class="o">`</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="o">`</span><span class="n">final_part_0</span><span class="o">`</span><span class="p">:</span><span class="o">`</span><span class="n">pinyin_part</span><span class="o">`</span><span class="err">{</span><span class="n">part_type</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;final&#34;</span><span class="err">}</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="o">`</span><span class="n">final_part_0</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;ai&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">pinyin_0</span><span class="p">.</span><span class="o">`</span><span class="n">character_pinyin</span><span class="o">`</span><span class="p">.</span><span class="n">tone</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">with_pinyin_0</span><span class="p">.</span><span class="o">`</span><span class="n">position</span><span class="o">`</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">with_char_0</span><span class="p">.</span><span class="o">`</span><span class="n">position</span><span class="o">`</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">char0</span><span class="p">)</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="s2">&#34;爱&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">x</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>更多的 <code>MATCH</code> 语法和例子细节，请大家参考文档：</p>
<ul>
<li>MATCH <a href="https://docs.nebula-graph.com.cn/3.0.0/3.ngql-guide/7.general-query-statements/2.match/" target="_blank" rel="noopener noreferrer">https://docs.nebula-graph.com.cn/3.0.0/3.ngql-guide/7.general-query-statements/2.match/</a></li>
<li>图模式 <a href="https://docs.nebula-graph.com.cn/3.0.0/3.ngql-guide/1.nGQL-overview/3.graph-patterns/" target="_blank" rel="noopener noreferrer">https://docs.nebula-graph.com.cn/3.0.0/3.ngql-guide/1.nGQL-overview/3.graph-patterns/</a></li>
<li>nGQL 命令 cheatsheet <a href="https://docs.nebula-graph.com.cn/3.0.0/2.quick-start/6.cheatsheet-for-ngql-command/" target="_blank" rel="noopener noreferrer">https://docs.nebula-graph.com.cn/3.0.0/2.quick-start/6.cheatsheet-for-ngql-command/</a></li>
</ul>
<h2 id="可视化展示线索" class="headerLink">
    <a href="#%e5%8f%af%e8%a7%86%e5%8c%96%e5%b1%95%e7%a4%ba%e7%ba%bf%e7%b4%a2" class="header-mark"></a>4 可视化展示线索</h2><p>我们把每一个条件的匹配路径作为输出，利用 Nebula Graph 的可视化能力，可以得到：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="o">//</span><span class="w"> </span><span class="err">有一个非第一个位置的字，拼音是</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="err">声，韵母是</span><span class="w"> </span><span class="n">ai</span><span class="err">，但不是爱</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="n">p0</span><span class="o">=</span><span class="p">(</span><span class="n">char0</span><span class="p">:</span><span class="o">`</span><span class="k">character</span><span class="o">`</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[</span><span class="n">with_char_0</span><span class="p">:</span><span class="o">`</span><span class="n">with_character</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">x</span><span class="p">:</span><span class="o">`</span><span class="n">idiom</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">with_pinyin_0</span><span class="p">:</span><span class="o">`</span><span class="n">with_pinyin</span><span class="o">`</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">pinyin_0</span><span class="p">:</span><span class="o">`</span><span class="n">character_pinyin</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">with_pinyin_part</span><span class="o">`</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="o">`</span><span class="n">final_part_0</span><span class="o">`</span><span class="p">:</span><span class="o">`</span><span class="n">pinyin_part</span><span class="o">`</span><span class="err">{</span><span class="n">part_type</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;final&#34;</span><span class="err">}</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="o">`</span><span class="n">final_part_0</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;ai&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">pinyin_0</span><span class="p">.</span><span class="o">`</span><span class="n">character_pinyin</span><span class="o">`</span><span class="p">.</span><span class="n">tone</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">with_pinyin_0</span><span class="p">.</span><span class="o">`</span><span class="n">position</span><span class="o">`</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">with_char_0</span><span class="p">.</span><span class="o">`</span><span class="n">position</span><span class="o">`</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">char0</span><span class="p">)</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="s2">&#34;爱&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">有一个一声的字，不在第二个位置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="n">p1</span><span class="o">=</span><span class="p">(</span><span class="n">x</span><span class="p">:</span><span class="o">`</span><span class="n">idiom</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="o">-</span><span class="p">[</span><span class="n">with_pinyin_1</span><span class="p">:</span><span class="o">`</span><span class="n">with_pinyin</span><span class="o">`</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">pinyin_1</span><span class="p">:</span><span class="o">`</span><span class="n">character_pinyin</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">pinyin_1</span><span class="p">.</span><span class="o">`</span><span class="n">character_pinyin</span><span class="o">`</span><span class="p">.</span><span class="n">tone</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">with_pinyin_1</span><span class="p">.</span><span class="o">`</span><span class="n">position</span><span class="o">`</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">有一个字韵母是</span><span class="w"> </span><span class="n">ing</span><span class="err">，不在第四个位置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="n">p2</span><span class="o">=</span><span class="p">(</span><span class="n">x</span><span class="p">:</span><span class="o">`</span><span class="n">idiom</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="o">-</span><span class="p">[</span><span class="n">with_pinyin_2</span><span class="p">:</span><span class="o">`</span><span class="n">with_pinyin</span><span class="o">`</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(:</span><span class="o">`</span><span class="n">character_pinyin</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">with_pinyin_part</span><span class="o">`</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">final_part_2</span><span class="p">:</span><span class="o">`</span><span class="n">pinyin_part</span><span class="o">`</span><span class="err">{</span><span class="n">part_type</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;final&#34;</span><span class="err">}</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">final_part_2</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;ing&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">with_pinyin_2</span><span class="p">.</span><span class="o">`</span><span class="n">position</span><span class="o">`</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">第四个字是二声</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="n">p3</span><span class="o">=</span><span class="p">(</span><span class="n">x</span><span class="p">:</span><span class="o">`</span><span class="n">idiom</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="o">-</span><span class="p">[</span><span class="n">with_pinyin_3</span><span class="p">:</span><span class="o">`</span><span class="n">with_pinyin</span><span class="o">`</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">pinyin_3</span><span class="p">:</span><span class="o">`</span><span class="n">character_pinyin</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">pinyin_3</span><span class="p">.</span><span class="o">`</span><span class="n">character_pinyin</span><span class="o">`</span><span class="p">.</span><span class="n">tone</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">with_pinyin_3</span><span class="p">.</span><span class="o">`</span><span class="n">position</span><span class="o">`</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p0</span><span class="p">,</span><span class="n">p1</span><span class="p">,</span><span class="n">p2</span><span class="p">,</span><span class="n">p3</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>在可视化工具的 Console 控制台里执行上边的语句之后，选择导入图探索，就可以看到</p>
<p><a class="lightgallery" href="/resolve-wordle/studio.webp" title="/resolve-wordle/studio.webp" data-thumbnail="/resolve-wordle/studio.webp">
        
    </a></p>
<h2 id="下一步" class="headerLink">
    <a href="#%e4%b8%8b%e4%b8%80%e6%ad%a5" class="header-mark"></a>5 下一步</h2><p>如果大家是从本文第一次了解到 Nebula Graph 图数据库，那么大家可以下一步从 <a href="https://github.com/vesoft-inc/nebula" target="_blank" rel="noopener noreferrer">Nebula Graph</a> 项目和 Nebula Graph 社区的官方 Bilibili 站点 👉🏻 <a href="https://space.bilibili.com/472621355" target="_blank" rel="noopener noreferrer">https://space.bilibili.com/472621355</a> 了解更多有意思的入门知识。</p>
<p>另外，<a href="https://nebula-graph.com.cn/demo/" target="_blank" rel="noopener noreferrer">这里</a>是 Nebula Graph 的官方线上试玩环境，大家可以照着<a href="https://docs.nebula-graph.com.cn/" target="_blank" rel="noopener noreferrer">文档</a>，利用试玩环境尝鲜。</p>
<p>后边，Nebula Graph 会开展每天的汉兜 nGQL 体操活动，敬请关注哈！</p>
<p>Happy Graphing!</p>
<h2 id="附录搭建成语知识图谱" class="headerLink">
    <a href="#%e9%99%84%e5%bd%95%e6%90%ad%e5%bb%ba%e6%88%90%e8%af%ad%e7%9f%a5%e8%af%86%e5%9b%be%e8%b0%b1" class="header-mark"></a>6 附录：搭建成语知识图谱</h2><h3 id="收集生成图谱数据" class="headerLink">
    <a href="#%e6%94%b6%e9%9b%86%e7%94%9f%e6%88%90%e5%9b%be%e8%b0%b1%e6%95%b0%e6%8d%ae" class="header-mark"></a>6.1 收集、生成图谱数据</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ python3 graph_data_generator.py
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="导入数据到-nebula-graph-图数据库" class="headerLink">
    <a href="#%e5%af%bc%e5%85%a5%e6%95%b0%e6%8d%ae%e5%88%b0-nebula-graph-%e5%9b%be%e6%95%b0%e6%8d%ae%e5%ba%93" class="header-mark"></a>6.2 导入数据到 Nebula Graph 图数据库</h3><h4 id="部署图数据库" class="headerLink">
    <a href="#%e9%83%a8%e7%bd%b2%e5%9b%be%e6%95%b0%e6%8d%ae%e5%ba%93" class="header-mark"></a>6.2.1 部署图数据库</h4><blockquote>
<p>借助于 Nebula-Up <a href="https://github.com/wey-gu/nebula-up/" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/nebula-up/</a> ，一行就可以了。</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ curl -fsSL nebula-up.siwei.io/install.sh <span class="p">|</span> bash -s -- v3.0.0
</span></span></code></pre></td></tr></table>
</div>
</div><p>部署成功的话，会看到这样的结果：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">┌────────────────────────────────────────┐
</span></span><span class="line"><span class="cl">│ 🌌 Nebula-Graph Playground is Up now!  │
</span></span><span class="line"><span class="cl">├────────────────────────────────────────┤
</span></span><span class="line"><span class="cl">│                                        │
</span></span><span class="line"><span class="cl">│ 🎉 Congrats! Your Nebula is Up now!    │
</span></span><span class="line"><span class="cl">│    $ <span class="nb">cd</span> ~/.nebula-up                   │
</span></span><span class="line"><span class="cl">│                                        │
</span></span><span class="line"><span class="cl">│ 🌏 You can access it from browser:     │
</span></span><span class="line"><span class="cl">│      http://127.0.0.1:7001             │
</span></span><span class="line"><span class="cl">│      http://&lt;other_interface&gt;:7001     │
</span></span><span class="line"><span class="cl">│                                        │
</span></span><span class="line"><span class="cl">│ 🔥 Or access via Nebula Console:       │
</span></span><span class="line"><span class="cl">│    $ ~/.nebula-up/console.sh           │
</span></span><span class="line"><span class="cl">│                                        │
</span></span><span class="line"><span class="cl">│    To remove the playground:           │
</span></span><span class="line"><span class="cl">│    $ ~/.nebula-up/uninstall.sh         │
</span></span><span class="line"><span class="cl">│                                        │
</span></span><span class="line"><span class="cl">│ 🚀 Have Fun!                           │
</span></span><span class="line"><span class="cl">│                                        │
</span></span><span class="line"><span class="cl">└────────────────────────────────────────┘
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="图谱入库" class="headerLink">
    <a href="#%e5%9b%be%e8%b0%b1%e5%85%a5%e5%ba%93" class="header-mark"></a>6.2.2 图谱入库</h4><blockquote>
<p>借助于 Nebula-Importer <a href="https://github.com/vesoft-inc/nebula-importer/" target="_blank" rel="noopener noreferrer">https://github.com/vesoft-inc/nebula-importer/</a> ，一行就可以了。</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker run --rm -ti <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --network<span class="o">=</span>nebula-docker-compose_nebula-net <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v <span class="si">${</span><span class="nv">PWD</span><span class="si">}</span>/importer_conf.yaml:/root/importer_conf.yaml <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v <span class="si">${</span><span class="nv">PWD</span><span class="si">}</span>/output:/root <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    vesoft/nebula-importer:v3.0.0 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --config /root/importer_conf.yaml
</span></span></code></pre></td></tr></table>
</div>
</div><p>大概一两分钟数据就导入成功了，命令也会正常退出。</p>
<blockquote>
<p>连到图数据库的 console</p>
</blockquote>
<p>进入 Console 的容器执行下边的命令：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ~/.nebula-up/console.sh
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># nebula-console -addr graphd -port 9669 -user root -p nebula</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>检查一下导入的数据：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="p">(</span><span class="n">root</span><span class="o">@</span><span class="n">nebula</span><span class="p">)</span><span class="w"> </span><span class="p">[(</span><span class="k">none</span><span class="p">)]</span><span class="o">&gt;</span><span class="w"> </span><span class="k">show</span><span class="w"> </span><span class="n">spaces</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">--------------------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="n">Name</span><span class="w">               </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">--------------------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;chinese_idiom&#34;</span><span class="w">    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">--------------------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="n">root</span><span class="o">@</span><span class="n">nebula</span><span class="p">)</span><span class="w"> </span><span class="p">[(</span><span class="k">none</span><span class="p">)]</span><span class="o">&gt;</span><span class="w"> </span><span class="n">use</span><span class="w"> </span><span class="n">chinese_idiom</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">Execution</span><span class="w"> </span><span class="n">succeeded</span><span class="w"> </span><span class="p">(</span><span class="n">time</span><span class="w"> </span><span class="n">spent</span><span class="w"> </span><span class="mi">1510</span><span class="o">/</span><span class="mi">2329</span><span class="w"> </span><span class="n">us</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">Fri</span><span class="p">,</span><span class="w"> </span><span class="mi">25</span><span class="w"> </span><span class="n">Feb</span><span class="w"> </span><span class="mi">2022</span><span class="w"> </span><span class="mi">08</span><span class="p">:</span><span class="mi">53</span><span class="p">:</span><span class="mi">11</span><span class="w"> </span><span class="n">UTC</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="n">root</span><span class="o">@</span><span class="n">nebula</span><span class="p">)</span><span class="w"> </span><span class="p">[</span><span class="n">chinese_idiom</span><span class="p">]</span><span class="o">&gt;</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="err">成语</span><span class="p">:</span><span class="o">`</span><span class="n">idiom</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="w"> </span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">------------------------------------------------------------------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="n">p</span><span class="w">                                                                </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">------------------------------------------------------------------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="o">&lt;</span><span class="p">(</span><span class="s2">&#34;一丁不识&#34;</span><span class="w"> </span><span class="p">:</span><span class="n">idiom</span><span class="err">{</span><span class="n">pinyin</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;[&#39;yi1&#39;, &#39;ding1&#39;, &#39;bu4&#39;, &#39;shi2&#39;]&#34;</span><span class="err">}</span><span class="p">)</span><span class="o">&gt;</span><span class="w"> </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="o">&lt;</span><span class="p">(</span><span class="s2">&#34;一丝不挂&#34;</span><span class="w"> </span><span class="p">:</span><span class="n">idiom</span><span class="err">{</span><span class="n">pinyin</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;[&#39;yi1&#39;, &#39;si1&#39;, &#39;bu4&#39;, &#39;gua4&#39;]&#34;</span><span class="err">}</span><span class="p">)</span><span class="o">&gt;</span><span class="w">   </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">------------------------------------------------------------------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="n">root</span><span class="o">@</span><span class="n">nebula</span><span class="p">)</span><span class="w"> </span><span class="p">[</span><span class="n">chinese_idiom</span><span class="p">]</span><span class="o">&gt;</span><span class="w"> </span><span class="n">SUBMIT</span><span class="w"> </span><span class="n">JOB</span><span class="w"> </span><span class="n">STATS</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">------------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="k">New</span><span class="w"> </span><span class="n">Job</span><span class="w"> </span><span class="n">Id</span><span class="w"> </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">------------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="mi">11</span><span class="w">         </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">------------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">(</span><span class="n">root</span><span class="o">@</span><span class="n">nebula</span><span class="p">)</span><span class="w"> </span><span class="p">[</span><span class="n">chinese_idiom</span><span class="p">]</span><span class="o">&gt;</span><span class="w"> </span><span class="k">SHOW</span><span class="w"> </span><span class="n">STATS</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">---------+--------------------+--------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="k">Type</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="n">Name</span><span class="w">               </span><span class="o">|</span><span class="w"> </span><span class="k">Count</span><span class="w">  </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">---------+--------------------+--------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Tag&#34;</span><span class="w">   </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;character&#34;</span><span class="w">        </span><span class="o">|</span><span class="w"> </span><span class="mi">4847</span><span class="w">   </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Tag&#34;</span><span class="w">   </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;character_pinyin&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="mi">1336</span><span class="w">   </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Tag&#34;</span><span class="w">   </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;idiom&#34;</span><span class="w">            </span><span class="o">|</span><span class="w"> </span><span class="mi">29503</span><span class="w">  </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Tag&#34;</span><span class="w">   </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;pinyin_part&#34;</span><span class="w">      </span><span class="o">|</span><span class="w"> </span><span class="mi">57</span><span class="w">     </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Edge&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;with_character&#34;</span><span class="w">   </span><span class="o">|</span><span class="w"> </span><span class="mi">116090</span><span class="w"> </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Edge&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;with_pinyin&#34;</span><span class="w">      </span><span class="o">|</span><span class="w"> </span><span class="mi">5943</span><span class="w">   </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Edge&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;with_pinyin_part&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="mi">3290</span><span class="w">   </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Space&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;vertices&#34;</span><span class="w">         </span><span class="o">|</span><span class="w"> </span><span class="mi">35739</span><span class="w">  </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Space&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;edges&#34;</span><span class="w">            </span><span class="o">|</span><span class="w"> </span><span class="mi">125323</span><span class="w"> </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">---------+--------------------+--------+
</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="附录图建模的-schema-ngql" class="headerLink">
    <a href="#%e9%99%84%e5%bd%95%e5%9b%be%e5%bb%ba%e6%a8%a1%e7%9a%84-schema-ngql" class="header-mark"></a>7 附录：图建模的 Schema nGQL</h2><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">SPACE</span><span class="w"> </span><span class="k">IF</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">EXISTS</span><span class="w"> </span><span class="n">chinese_idiom</span><span class="p">(</span><span class="n">partition_num</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span><span class="w"> </span><span class="n">replica_factor</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="n">vid_type</span><span class="o">=</span><span class="n">FIXED_STRING</span><span class="p">(</span><span class="mi">24</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">USE</span><span class="w"> </span><span class="n">chinese_idiom</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">创建点的类型</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="n">idiom</span><span class="p">(</span><span class="n">pinyin</span><span class="w"> </span><span class="n">string</span><span class="p">);</span><span class="w"> </span><span class="o">#</span><span class="err">成语</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="nb">character</span><span class="p">();</span><span class="w"> </span><span class="o">#</span><span class="err">汉字</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="n">character_pinyin</span><span class="p">(</span><span class="n">tone</span><span class="w"> </span><span class="nb">int</span><span class="p">);</span><span class="w"> </span><span class="o">#</span><span class="err">单字的拼音</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="n">pinyin_part</span><span class="p">(</span><span class="n">part_type</span><span class="w"> </span><span class="n">string</span><span class="p">);</span><span class="w"> </span><span class="o">#</span><span class="err">拼音的声部</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">创建边的类型</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">with_character</span><span class="p">(</span><span class="o">`</span><span class="k">position</span><span class="o">`</span><span class="w"> </span><span class="nb">int</span><span class="p">);</span><span class="w"> </span><span class="o">#</span><span class="err">包含汉字</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">with_pinyin</span><span class="p">(</span><span class="o">`</span><span class="k">position</span><span class="o">`</span><span class="w"> </span><span class="nb">int</span><span class="p">);</span><span class="w"> </span><span class="o">#</span><span class="err">读作</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">with_pinyin_part</span><span class="p">(</span><span class="n">part_type</span><span class="w"> </span><span class="n">string</span><span class="p">);</span><span class="w"> </span><span class="o">#</span><span class="err">包含声部</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>Nebula Graph on Pi</title>
    <link>https://siwei.io/nebula-graph-on-pi/</link>
    <pubDate>Wed, 23 Mar 2022 22:11:03 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/nebula-graph-on-pi/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/nebula-graph-on-pi/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>得益于 Nebula 的原生 ARM64v8 的支持，在树莓派等 ARM 单板上跑 Nebula Graph 非常容易。</p>
</blockquote>
<h2 id="背景" class="headerLink">
    <a href="#%e8%83%8c%e6%99%af" class="header-mark"></a>1 背景</h2><p>最近，在 Nebula Graph 社区 Yee 老师的（再）一次修复了 Nebula Graph 的构建依赖的 ARM 支持问题（<a href="https://github.com/vesoft-inc/nebula-third-party/pull/37" target="_blank" rel="noopener noreferrer">nebula-third-party#37</a>）之后，我们又可以愉快地在 M1 Mac 上玩这个分布式开源图数据库了。</p>
<p>苦于树莓派的价格，一直没找机会把 Nebula 跑在小板子上玩玩。至于为什么要跑在树莓派上我的回答当然是 <del>Because I can</del> 在非常非常边缘计算的场景下（这里挖个坑，我一定要找一个这样的场景分享出来）。</p>
<p>终于，一周多之前在 <a href="https://twitter.com/laixintao" target="_blank" rel="noopener noreferrer">@laixintao</a> 和 <a href="https://twitter.com/andelf/status/1504295476958404608" target="_blank" rel="noopener noreferrer">@andelf</a> 的一个讨论下我决定找一个树莓派的 alternative，最后下单了 <a href="https://wiki.radxa.com/Rock3/" target="_blank" rel="noopener noreferrer">Rock Pi 3A</a>，在因为深圳疫情影响下拖到了这个礼拜才终于发货了！</p>
<p><a class="lightgallery" href="/nebula-graph-on-pi/tweet-RPi-alternative.webp" title="tweet-RPi-alternative" data-thumbnail="/nebula-graph-on-pi/tweet-RPi-alternative.webp">
        
    </a></p>
<p>它看起来真的很棒！</p>
<p><a class="lightgallery" href="/nebula-graph-on-pi/rockspi_before.webp" title="rockspi_before" data-thumbnail="/nebula-graph-on-pi/rockspi_before.webp">
        
    </a></p>
<h2 id="在-arm64-板子上装-nebula-graph-图数据库" class="headerLink">
    <a href="#%e5%9c%a8-arm64-%e6%9d%bf%e5%ad%90%e4%b8%8a%e8%a3%85-nebula-graph-%e5%9b%be%e6%95%b0%e6%8d%ae%e5%ba%93" class="header-mark"></a>2 在 ARM64 板子上装 Nebula Graph 图数据库</h2><blockquote>
<p>实际上 Nebula Graph 在 3.0 之后提供了一个<a href="https://docs.nebula-graph.com.cn/3.0.1/4.deployment-and-installation/standalone-deployment/" target="_blank" rel="noopener noreferrer">单机版</a>，这使得 Nebula 在边缘计算情况下有了更小的 footprint，不过这次我还没有使用这个版本，下次试试再给大家分享。</p>
</blockquote>
<p>我在附录列出了安装 Ubuntu Server 的步骤，这里假设大家已经在树莓派或者其他单板 ARM 电脑里拉起来了 64 位的 Linux Server。</p>
<h3 id="第-0-步安装-docker-和-docker-compose" class="headerLink">
    <a href="#%e7%ac%ac-0-%e6%ad%a5%e5%ae%89%e8%a3%85-docker-%e5%92%8c-docker-compose" class="header-mark"></a>2.1 第 0 步，安装 Docker 和 Docker-Compose</h3><p>这里，我假设是 Debian/Ubuntu，其他分发版直接参考<a href="https://docs.docker.com/engine/install/" target="_blank" rel="noopener noreferrer">这里</a>就好。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo apt-get update
</span></span><span class="line"><span class="cl">sudo apt-get install <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    ca-certificates <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    curl <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    gnupg <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    lsb-release
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="s2">&#34;deb [arch=</span><span class="k">$(</span>dpkg --print-architecture<span class="k">)</span><span class="s2"> signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
</span></span></span><span class="line"><span class="cl"><span class="s2">  </span><span class="k">$(</span>lsb_release -cs<span class="k">)</span><span class="s2"> stable&#34;</span> <span class="p">|</span> sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo apt-get update
</span></span><span class="line"><span class="cl">sudo apt-get install docker-ce docker-ce-cli containerd.io
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># follow https://docs.docker.com/engine/install/linux-postinstall/</span>
</span></span><span class="line"><span class="cl">sudo groupadd docker
</span></span><span class="line"><span class="cl">sudo usermod -aG docker <span class="nv">$USER</span>
</span></span><span class="line"><span class="cl"><span class="nb">exit</span>
</span></span><span class="line"><span class="cl"><span class="c1"># login again</span>
</span></span><span class="line"><span class="cl">newgrp docker
</span></span></code></pre></td></tr></table>
</div>
</div><p>安装好了 Docker 之后，安装 Compose，它 Docker 官方的步骤是有问题的，因为它其实是一个 Python 的包，我们通过 PIP 去装就好了。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo apt-get install -y python3 python3-pip
</span></span><span class="line"><span class="cl">sudo pip3 install docker-compose
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="第-1-步拉起-nebula-graph" class="headerLink">
    <a href="#%e7%ac%ac-1-%e6%ad%a5%e6%8b%89%e8%b5%b7-nebula-graph" class="header-mark"></a>2.2 第 1 步，拉起 Nebula Graph</h3><p>首先，我们克隆 Nebula Docker Compose 这个 Repo，在 Master Branch，用 Compose 把服务拉起来。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone https://github.com/vesoft-inc/nebula-docker-compose.git <span class="o">&amp;&amp;</span> <span class="nb">cd</span> nebula-docker-compose
</span></span><span class="line"><span class="cl">docker-compose up -d
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后，我们下载 Console，连上 GraphD 服务。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">wget https://github.com/vesoft-inc/nebula-console/releases/download/v3.0.0/nebula-console-linux-arm64-v3.0.0
</span></span><span class="line"><span class="cl">chmod +x nebula-console-linux-arm64-v3.0.0
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">./nebula-console-linux-arm64-v3.0.0 -addr localhost -port <span class="m">9669</span> -u root -p nebula
</span></span></code></pre></td></tr></table>
</div>
</div><p>并激活 Storage 服务。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ADD HOSTS <span class="s2">&#34;storaged0&#34;</span>:9779,<span class="s2">&#34;storaged1&#34;</span>:9779,<span class="s2">&#34;storaged2&#34;</span>:9779<span class="p">;</span>
</span></span><span class="line"><span class="cl">SHOW HOSTS<span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="第-2-步玩转-nebula-graph-on-pi" class="headerLink">
    <a href="#%e7%ac%ac-2-%e6%ad%a5%e7%8e%a9%e8%bd%ac-nebula-graph-on-pi" class="header-mark"></a>2.3 第 2 步，玩转 Nebula Graph on Pi</h3><p>这时候，透过 <code>SHOW HOSTS</code> 看到三个 StorageD 服务都是 ONLINE 之后，我们可以给 Nebula 里加载进去测试数据集。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$:play basketballplayer<span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>差不多一分钟之后，数据库加载成功，我们进入这个图空间，玩一下吧！</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">USE basketballplayer<span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">GO FROM <span class="s2">&#34;player100&#34;</span> OVER follow YIELD dst<span class="o">(</span>edge<span class="o">)</span><span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Check this out and&hellip;</p>
<p>Happy Graphing!</p>
<p><a class="lightgallery" href="/nebula-graph-on-pi/Nebula-on-Pi.webp" title="Nebula-on-Pi" data-thumbnail="/nebula-graph-on-pi/Nebula-on-Pi.webp">
        
    </a></p>
<h2 id="附录安装-ubuntu-server-在-rock-pi-3a-上" class="headerLink">
    <a href="#%e9%99%84%e5%bd%95%e5%ae%89%e8%a3%85-ubuntu-server-%e5%9c%a8-rock-pi-3a-%e4%b8%8a" class="header-mark"></a>3 附录：安装 Ubuntu Server 在 Rock Pi 3A 上</h2><ul>
<li>
<p>准备一个 micro SD card，在  <a href="https://wiki.radxa.com/Rock3/downloads" target="_blank" rel="noopener noreferrer">https://wiki.radxa.com/Rock3/downloads</a> 下载镜像，解压为 <code>.img</code> 文件</p>
</li>
<li>
<p>把镜像写进 SD card，比如用 <a href="https://www.balena.io/etcher/" target="_blank" rel="noopener noreferrer">etcher</a></p>
</li>
<li>
<p>插入电源（5V，3A）启动！</p>
</li>
</ul>
<blockquote>
<p>feature image credit: <a href="https://unsplash.com/@_louisreed" target="_blank" rel="noopener noreferrer">@_louisreed</a></p>
</blockquote>]]></description>
</item><item>
    <title>基于 NebulaGraph 图数据库的欺诈检测方法与代码示例</title>
    <link>https://siwei.io/fraud-detection-with-nebulagraph/</link>
    <pubDate>Mon, 01 Aug 2022 01:15:05 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/fraud-detection-with-nebulagraph/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/fraud-detection-with-nebulagraph/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>本文是一个基于 NebulaGraph 上图算法、图数据库、机器学习、GNN 的 Fraud Detection 方法综述，除了基本方法思想的介绍之外，我还给大家弄了可以跑的 Playground。</p>
</blockquote>
<blockquote>
<p>值得一提的是，这还我第一次给大家介绍 Nebula-DGL 这个项目 😁。</p>
</blockquote>
<!--

[TOC]

-->
<h2 id="基于图数据库的欺诈检测方法" class="headerLink">
    <a href="#%e5%9f%ba%e4%ba%8e%e5%9b%be%e6%95%b0%e6%8d%ae%e5%ba%93%e7%9a%84%e6%ac%ba%e8%af%88%e6%a3%80%e6%b5%8b%e6%96%b9%e6%b3%95" class="header-mark"></a>1 基于图数据库的欺诈检测方法</h2><h3 id="建立图谱" class="headerLink">
    <a href="#%e5%bb%ba%e7%ab%8b%e5%9b%be%e8%b0%b1" class="header-mark"></a>1.1 建立图谱</h3><p>首先，对现有的历史数据、标注信息面向关联关系进行属性图建模。这种原始数据是多个表结构中的银行、电子商务或者保险行业里的交易事件记录、用户数据和风控标注，而建模过程就是抽象出我们关心的实体、实体间的关联关系、和其中有意义的属性。</p>
<p>一般来说，自然人、公司实体、电话号码、地址、设备（比如终端设备、网络地址、终端设备所连接的 WiFi SSID 等）、订单都是实体本身，其他信息比如风险标注（是否高风险、风险描述等）、自然人和公司实体的信息（职业、收入、学历等）都作为实体的属性来建模。</p>
<p>下图是一个可以参考的贷款反欺诈的示例建模，它来自一份作者开源的图结构数据生成项目。</p>
<blockquote>
<p>注，你可以访问 <a href="https://github.com/wey-gu/fraud-detection-datagen" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/fraud-detection-datagen</a> 获取这个开源的数据生成器代码和一份示例的数据。</p>
</blockquote>
<p><a class="lightgallery" href="https://github.com/wey-gu/fraud-detection-datagen/raw/main/images/fraud_detection_graph_model.svg" title="https://github.com/wey-gu/fraud-detection-datagen/raw/main/images/fraud_detection_graph_model.svg" data-thumbnail="https://github.com/wey-gu/fraud-detection-datagen/raw/main/images/fraud_detection_graph_model.svg">
        
    </a></p>
<h3 id="图数据库查询识别风险" class="headerLink">
    <a href="#%e5%9b%be%e6%95%b0%e6%8d%ae%e5%ba%93%e6%9f%a5%e8%af%a2%e8%af%86%e5%88%ab%e9%a3%8e%e9%99%a9" class="header-mark"></a>1.2 图数据库查询识别风险</h3><p>有了一张囊括了人、公司、历史贷款申请记录、电话、线上申请网络设备的图谱，我们可以挖掘一些有意思的信息。</p>
<p>事实上，很多值得被发现、并有效阻止从而止损的骗保行为是具有群体聚集性的。比如欺诈团伙可能是一小批人（比如3到5人）有组织地收集更大规模的身份证信息（比如30张），同时发起多个金融机构大量贷款，然后在放款后选择丢弃这批留下了违约记录的身份证，再进一步选择下一批身份证信息如法炮制。</p>
<p>这种团伙作案的方式因为利用了大量新的身份信息，完全利用历史记录去黑名单规避风险的方式是无效的。不过，借助于关联关系的视角，这些模式是一定程度上可以被及时识别出来的。</p>
<p>这些可以被识别出的规律我把它分成两种：</p>
<p>一种是风控专家可以直接用某种模式来描述的，例如：和已经被标注为高风险的实体有直接或者间接的关联关系（新订单申请人使用了和过往高风险记录相同的网络设备），这种模式对应到图谱中，通过一个图查询就可以实时给出结果。</p>
<p>另一种是隐含在数据的关联关系背后，需要通过图算法挖掘得出的一些风险提示，例如：尽管给定的实体与有限的标注高风险实体没有匹配的关联，但是它在图中形成了聚集性可能提示我们这可能是一个尚未得手的进行中的团伙贷款诈骗的其中一次申请，这种情况可以通过定期在历史数据中批量执行社区发现算法得出，并在高聚集社区中利用中心性算法给出核心实体，一并提示给风险专家进行后续评估和风险标注。</p>
<h4 id="基于图谱与专家图模式匹配的欺诈检测示例" class="headerLink">
    <a href="#%e5%9f%ba%e4%ba%8e%e5%9b%be%e8%b0%b1%e4%b8%8e%e4%b8%93%e5%ae%b6%e5%9b%be%e6%a8%a1%e5%bc%8f%e5%8c%b9%e9%85%8d%e7%9a%84%e6%ac%ba%e8%af%88%e6%a3%80%e6%b5%8b%e7%a4%ba%e4%be%8b" class="header-mark"></a>1.2.1 基于图谱与专家图模式匹配的欺诈检测示例</h4><p>在开始之前，我们利用 Nebula-UP 来一键部署一套 NebulaGraph 图数据库：</p>
<blockquote>
<p>更多请参考 <a href="https://github.com/wey-gu/nebula-up/" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/nebula-up/</a></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -fsSL nebula-up.siwei.io/install.sh <span class="p">|</span> bash
</span></span></code></pre></td></tr></table>
</div>
</div><p>首先，我们把前边建模的图谱加载到 NebulaGraph 里：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 克隆数据集代码仓库</span>
</span></span><span class="line"><span class="cl">git clone https://github.com/wey-gu/fraud-detection-datagen.git
</span></span><span class="line"><span class="cl">cp -r data_sample_numerical_vertex_id data
</span></span><span class="line"><span class="cl"><span class="c1"># 去掉表头</span>
</span></span><span class="line"><span class="cl">sed -i <span class="s1">&#39;1d&#39;</span> data/*.csv
</span></span><span class="line"><span class="cl">docker run --rm -ti <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --network<span class="o">=</span>nebula-net <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v <span class="si">${</span><span class="nv">PWD</span><span class="si">}</span>:/root/ <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v <span class="si">${</span><span class="nv">PWD</span><span class="si">}</span>/data/:/data <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    vesoft/nebula-importer:v3.1.0 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --config /root/nebula_graph_importer.yaml
</span></span></code></pre></td></tr></table>
</div>
</div><p>有了这样一个图谱，风控专家可以在可视化探索工具中按需探索实体之间的关系，绘制相应的风险模式：</p>
<p><a class="lightgallery" href="/fraud-detection-with-nebulagraph/viz_graph_query.webp" title="/fraud-detection-with-nebulagraph/viz_graph_query.webp" data-thumbnail="/fraud-detection-with-nebulagraph/viz_graph_query.webp">
        
    </a></p>
<p>在这个探索截图里，我们可以明显看到一个群控设备的风险模式，这个模式可以被交给图数据库开发者，抽象成可以被风控应用定期、实时查询的语句：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="c1">## 针对一笔交易申请关联查询
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;200000010265&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="n">p_shared_d</span><span class="o">=</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">used_device</span><span class="o">`</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">d</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="o">`</span><span class="n">used_device</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(:</span><span class="o">`</span><span class="n">applicant</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">with_phone_num</span><span class="o">`</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">pn</span><span class="p">:</span><span class="n">phone_num</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[</span><span class="n">e</span><span class="p">:</span><span class="o">`</span><span class="n">with_phone_num</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(:</span><span class="o">`</span><span class="n">applicant</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p_shared_d</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>我们可以很容易在此模型之上，通过修改返回的关联设备计数，作为意向指标查询的判断 API：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="c1">## 群控指标
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;200000010265&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="n">p_shared_d</span><span class="o">=</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">used_device</span><span class="o">`</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">d</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="o">`</span><span class="n">used_device</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(:</span><span class="o">`</span><span class="n">applicant</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">with_phone_num</span><span class="o">`</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">pn</span><span class="p">:</span><span class="n">phone_num</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[</span><span class="n">e</span><span class="p">:</span><span class="o">`</span><span class="n">with_phone_num</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(:</span><span class="o">`</span><span class="n">applicant</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="nf">count</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>如此，我们可以建立一个相对有效的风控系统，利用有限的标注数据和专家资源，去更高效控制团伙欺诈作案风险。</p>
<p>另一个利用标注风险节点的查询是找到相关联节点高风险属性的数量：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p_</span><span class="o">=</span><span class="p">(</span><span class="n">p</span><span class="p">:</span><span class="o">`</span><span class="n">applicant</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="o">*</span><span class="mi">1</span><span class="p">..</span><span class="mi">2</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">p2</span><span class="p">:</span><span class="o">`</span><span class="n">applicant</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">==</span><span class="s2">&#34;200000014810&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">p2</span><span class="p">.</span><span class="o">`</span><span class="n">applicant</span><span class="o">`</span><span class="p">.</span><span class="n">is_risky</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;True&#34;</span><span class="w"> </span><span class="k">RETURN</span><span class="w"> </span><span class="n">p_</span><span class="w"> </span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">100</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>可以从这个路径查询看到 <code>200000014810</code> 的相连接的申请人中有不少是高风险的（也能看出聚集的 device）。</p>
<p><a class="lightgallery" href="/fraud-detection-with-nebulagraph/is_risky_label.webp" title="/fraud-detection-with-nebulagraph/is_risky_label.webp" data-thumbnail="/fraud-detection-with-nebulagraph/is_risky_label.webp">
        
    </a></p>
<p>如此，我们可以定义相连高风险点数量为一个指标：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">p</span><span class="p">:</span><span class="o">`</span><span class="n">applicant</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="o">*</span><span class="mi">1</span><span class="p">..</span><span class="mi">2</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">p2</span><span class="p">:</span><span class="o">`</span><span class="n">applicant</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">==</span><span class="s2">&#34;200000014810&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">p2</span><span class="p">.</span><span class="o">`</span><span class="n">applicant</span><span class="o">`</span><span class="p">.</span><span class="n">is_risky</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;True&#34;</span><span class="w"> </span><span class="k">RETURN</span><span class="w"> </span><span class="nf">count</span><span class="p">(</span><span class="n">p2</span><span class="p">)</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>然而，在现实情况下，我们的大多数标注数据的获取还是过于昂贵，那么有没有什么方法是更有效利用有限的风险标注和图结构，来预测出风险呢？</p>
<h3 id="利用图扩充标注" class="headerLink">
    <a href="#%e5%88%a9%e7%94%a8%e5%9b%be%e6%89%a9%e5%85%85%e6%a0%87%e6%b3%a8" class="header-mark"></a>1.3 利用图扩充标注</h3><p>答案是肯定的， Xiaojin Z. 和 Zoubin G. 在论文：<a href="http://mlg.eng.cam.ac.uk/zoubin/papers/CMU-CALD-02-107.pdf" target="_blank" rel="noopener noreferrer">Learning from Labeled and Unlabeled Data with Label Propagation</a> （CMU-CALD-02-107）中，利用标签传播（Label Propagation）算法来把有限的标注信息在图上通过关联关系传播到更多实体中。</p>
<p>这样，在我们建立的图谱中，我们可以很容易地借助有限的高风险标注，去“传播”产生更多的标注信息。这些扩展出来的标注信息一方面可以在实时的图查询中给出更多的结果，另一方面，它还能作为风控专家重要的输入信息，帮助推进反欺诈调查行动的开展。</p>
<p>一般来说，我们可以通过定期离线地全图扫描数据，通过图算法扩充、更新标注，再将有效的更新标注写回到图谱之中。</p>
<blockquote>
<p>注，类似的方法还有 SIGNDiffusion，感兴趣的同学可以去了解一下。</p>
</blockquote>
<h4 id="图算法扩充欺诈风险标注的示例" class="headerLink">
    <a href="#%e5%9b%be%e7%ae%97%e6%b3%95%e6%89%a9%e5%85%85%e6%ac%ba%e8%af%88%e9%a3%8e%e9%99%a9%e6%a0%87%e6%b3%a8%e7%9a%84%e7%a4%ba%e4%be%8b" class="header-mark"></a>1.3.1 图算法扩充欺诈风险标注的示例</h4><p>下面，我给出一个可以跑通的案例：</p>
<p>这个例子中，我用到了 Yelp 这个欺诈识别的经典数据，这份数据不只会用在这个例子中，后边 GNN 方法中的案例我也会用到它，所以大家可以耐心把数据导入 NebulaGraph。</p>
<p>导入数据到图库</p>
<blockquote>
<p>生成导入的方法在这里，https://github.com/wey-gu/nebulagraph-yelp-frauddetection</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> ~
</span></span><span class="line"><span class="cl">git clone https://github.com/wey-gu/nebulagraph-yelp-frauddetection
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> nebulagraph-yelp-frauddetection
</span></span><span class="line"><span class="cl">python3 -m pip install -r requirements.txt
</span></span><span class="line"><span class="cl">python3 data_download.py
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 导入图库</span>
</span></span><span class="line"><span class="cl">docker run --rm -ti <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --network<span class="o">=</span>nebula-net <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v <span class="si">${</span><span class="nv">PWD</span><span class="si">}</span>/yelp_nebulagraph_importer.yaml:/root/importer.yaml <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v <span class="si">${</span><span class="nv">PWD</span><span class="si">}</span>/data:/root <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    vesoft/nebula-importer:v3.1.0 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --config /root/importer.yaml
</span></span></code></pre></td></tr></table>
</div>
</div><p>结束之后，我们可以看一下图上的统计：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">~/.nebula-up/console.sh -e <span class="s2">&#34;USE yelp; SHOW STATS&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后，我们可以看到：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>root@nebula<span class="o">)</span> <span class="o">[(</span>none<span class="o">)]</span>&gt; USE yelp<span class="p">;</span> SHOW STATS
</span></span><span class="line"><span class="cl">+---------+---------------------------------------+---------+
</span></span><span class="line"><span class="cl"><span class="p">|</span> Type    <span class="p">|</span> Name                                  <span class="p">|</span> Count   <span class="p">|</span>
</span></span><span class="line"><span class="cl">+---------+---------------------------------------+---------+
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Tag&#34;</span>   <span class="p">|</span> <span class="s2">&#34;review&#34;</span>                              <span class="p">|</span> <span class="m">45954</span>   <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Edge&#34;</span>  <span class="p">|</span> <span class="s2">&#34;shares_restaurant_in_one_month_with&#34;</span> <span class="p">|</span> <span class="m">1147232</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Edge&#34;</span>  <span class="p">|</span> <span class="s2">&#34;shares_restaurant_rating_with&#34;</span>       <span class="p">|</span> <span class="m">6805486</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Edge&#34;</span>  <span class="p">|</span> <span class="s2">&#34;shares_user_with&#34;</span>                    <span class="p">|</span> <span class="m">98630</span>   <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Space&#34;</span> <span class="p">|</span> <span class="s2">&#34;vertices&#34;</span>                            <span class="p">|</span> <span class="m">45954</span>   <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Space&#34;</span> <span class="p">|</span> <span class="s2">&#34;edges&#34;</span>                               <span class="p">|</span> <span class="m">8051348</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl">+---------+---------------------------------------+---------+
</span></span><span class="line"><span class="cl">Got <span class="m">6</span> rows <span class="o">(</span><span class="nb">time</span> spent 1911/4488 us<span class="o">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>目前，市面上的 LPA 标签传播算法都是用来做社区检测的，很少有实现是用来做标签拓展的（只有 SK-Learn 中有这个实现），这里，我们参考 <a href="https://datascience.stackexchange.com/users/77683/thibaud-m" target="_blank" rel="noopener noreferrer">Thibaud M</a> 给出来的实现。</p>
<blockquote>
<p>原始的讨论参考：https://datascience.stackexchange.com/a/55720/138720</p>
</blockquote>
<p>为了让这个算法跑的快一点，会从 NebulaGraph 里取一个点的子图，在这个小的子图上做标注的扩充：</p>
<p>首先，我们启动一个 Jupyter 的 Playground，</p>
<blockquote>
<p>参考 <a href="https://github.com/wey-gu/nebula-dgl" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/nebula-dgl</a> 中的 Playground 过程：</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone https://github.com/wey-gu/nebula-dgl.git
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> nebula-dgl
</span></span><span class="line"><span class="cl"><span class="c1"># 运行 Jupyter Notebook</span>
</span></span><span class="line"><span class="cl">docker run -it --name dgl -p 8888:8888 --network nebula-net <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v <span class="s2">&#34;</span><span class="nv">$PWD</span><span class="s2">&#34;</span>:/home/jovyan/work jupyter/datascience-notebook <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    start-notebook.sh --NotebookApp.token<span class="o">=</span><span class="s1">&#39;nebulagraph&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>访问：http://localhost:8888/lab/tree/work?token=nebulagraph</p>
<p>安装依赖（这些依赖在后边的 GNN 例子中也会被用到）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="err">!</span><span class="n">python3</span> <span class="o">-</span><span class="n">m</span> <span class="n">pip</span> <span class="n">install</span> <span class="n">git</span><span class="o">+</span><span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">vesoft</span><span class="o">-</span><span class="n">inc</span><span class="o">/</span><span class="n">nebula</span><span class="o">-</span><span class="n">python</span><span class="o">.</span><span class="n">git</span><span class="o">@</span><span class="mi">8</span><span class="n">c328c534413b04ccecfd42e64ce6491e09c6ca8</span>
</span></span><span class="line"><span class="cl"><span class="err">!</span><span class="n">python3</span> <span class="o">-</span><span class="n">m</span> <span class="n">pip</span> <span class="n">install</span> <span class="o">.</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后，我们从图中读取一个子图，从 <code>2048</code> 这个点开始探索两步内的所有边。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">torch</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">json</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">torch</span> <span class="kn">import</span> <span class="n">tensor</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">dgl</span> <span class="kn">import</span> <span class="n">DGLHeteroGraph</span><span class="p">,</span> <span class="n">heterograph</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">nebula3.gclient.net</span> <span class="kn">import</span> <span class="n">ConnectionPool</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">nebula3.Config</span> <span class="kn">import</span> <span class="n">Config</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">config</span> <span class="o">=</span> <span class="n">Config</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">config</span><span class="o">.</span><span class="n">max_connection_pool_size</span> <span class="o">=</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl"><span class="n">connection_pool</span> <span class="o">=</span> <span class="n">ConnectionPool</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">connection_pool</span><span class="o">.</span><span class="n">init</span><span class="p">([(</span><span class="s1">&#39;graphd&#39;</span><span class="p">,</span> <span class="mi">9669</span><span class="p">)],</span> <span class="n">config</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">vertex_id</span> <span class="o">=</span> <span class="mi">2048</span>
</span></span><span class="line"><span class="cl"><span class="n">client</span> <span class="o">=</span> <span class="n">connection_pool</span><span class="o">.</span><span class="n">get_session</span><span class="p">(</span><span class="s1">&#39;root&#39;</span><span class="p">,</span> <span class="s1">&#39;nebula&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">execute_json</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;USE yelp;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="sa">f</span><span class="s2">&#34;GET SUBGRAPH WITH PROP 2 STEPS FROM </span><span class="si">{</span><span class="n">vertex_id</span><span class="si">}</span><span class="s2"> YIELD VERTICES AS nodes, EDGES AS relationships;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">r</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">data</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;results&#39;</span><span class="p">,</span> <span class="p">[{}])[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">columns</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;results&#39;</span><span class="p">,</span> <span class="p">[{}])[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;columns&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># create node and nodedata</span>
</span></span><span class="line"><span class="cl"><span class="n">node_id_map</span> <span class="o">=</span> <span class="p">{}</span> <span class="c1"># key: vertex id in NebulaGraph, value: node id in dgl_graph</span>
</span></span><span class="line"><span class="cl"><span class="n">node_idx</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">features</span> <span class="o">=</span> <span class="p">[[]</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">32</span><span class="p">)]</span> <span class="o">+</span> <span class="p">[[]]</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">index</span><span class="p">,</span> <span class="n">node</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s1">&#39;meta&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">]):</span>
</span></span><span class="line"><span class="cl">        <span class="n">nodeid</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s1">&#39;meta&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="n">index</span><span class="p">][</span><span class="s1">&#39;id&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">nodeid</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">node_id_map</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">node_id_map</span><span class="p">[</span><span class="n">nodeid</span><span class="p">]</span> <span class="o">=</span> <span class="n">node_idx</span>
</span></span><span class="line"><span class="cl">            <span class="n">node_idx</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">32</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">                <span class="n">features</span><span class="p">[</span><span class="n">f</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s1">&#39;row&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="n">index</span><span class="p">][</span><span class="sa">f</span><span class="s2">&#34;review.f</span><span class="si">{</span><span class="n">f</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">            <span class="n">features</span><span class="p">[</span><span class="mi">32</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s1">&#39;row&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="n">index</span><span class="p">][</span><span class="s1">&#39;review.is_fraud&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">rur_start</span><span class="p">,</span> <span class="n">rur_end</span><span class="p">,</span> <span class="n">rsr_start</span><span class="p">,</span> <span class="n">rsr_end</span><span class="p">,</span> <span class="n">rtr_start</span><span class="p">,</span> <span class="n">rtr_end</span> <span class="o">=</span> <span class="p">[],</span> <span class="p">[],</span> <span class="p">[],</span> <span class="p">[],</span> <span class="p">[],</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">edge</span> <span class="ow">in</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s1">&#39;meta&#39;</span><span class="p">][</span><span class="mi">1</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">        <span class="n">edge</span> <span class="o">=</span> <span class="n">edge</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">edge</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;shares_user_with&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">rur_start</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node_id_map</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="s1">&#39;src&#39;</span><span class="p">]])</span>
</span></span><span class="line"><span class="cl">            <span class="n">rur_end</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node_id_map</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="s1">&#39;dst&#39;</span><span class="p">]])</span>
</span></span><span class="line"><span class="cl">        <span class="k">elif</span> <span class="n">edge</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;shares_restaurant_rating_with&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">rsr_start</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node_id_map</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="s1">&#39;src&#39;</span><span class="p">]])</span>
</span></span><span class="line"><span class="cl">            <span class="n">rsr_end</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node_id_map</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="s1">&#39;dst&#39;</span><span class="p">]])</span>
</span></span><span class="line"><span class="cl">        <span class="k">elif</span> <span class="n">edge</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;shares_restaurant_in_one_month_with&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">rtr_start</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node_id_map</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="s1">&#39;src&#39;</span><span class="p">]])</span>
</span></span><span class="line"><span class="cl">            <span class="n">rtr_end</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node_id_map</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="s1">&#39;dst&#39;</span><span class="p">]])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">data_dict</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">rur_start</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">data_dict</span><span class="p">[(</span><span class="s1">&#39;review&#39;</span><span class="p">,</span> <span class="s1">&#39;shares_user_with&#39;</span><span class="p">,</span> <span class="s1">&#39;review&#39;</span><span class="p">)]</span> <span class="o">=</span> <span class="n">tensor</span><span class="p">(</span><span class="n">rur_start</span><span class="p">),</span> <span class="n">tensor</span><span class="p">(</span><span class="n">rur_end</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">rsr_start</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">data_dict</span><span class="p">[(</span><span class="s1">&#39;review&#39;</span><span class="p">,</span> <span class="s1">&#39;shares_restaurant_rating_with&#39;</span><span class="p">,</span> <span class="s1">&#39;review&#39;</span><span class="p">)]</span> <span class="o">=</span> <span class="n">tensor</span><span class="p">(</span><span class="n">rsr_start</span><span class="p">),</span> <span class="n">tensor</span><span class="p">(</span><span class="n">rsr_end</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">rtr_start</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">data_dict</span><span class="p">[(</span><span class="s1">&#39;review&#39;</span><span class="p">,</span> <span class="s1">&#39;shares_restaurant_in_one_month_with&#39;</span><span class="p">,</span> <span class="s1">&#39;review&#39;</span><span class="p">)]</span> <span class="o">=</span> <span class="n">tensor</span><span class="p">(</span><span class="n">rtr_start</span><span class="p">),</span> <span class="n">tensor</span><span class="p">(</span><span class="n">rtr_end</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># construct a dgl_graph, ref: https://docs.dgl.ai/en/0.9.x/generated/dgl.heterograph.html</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">dgl_graph</span><span class="p">:</span> <span class="n">DGLHeteroGraph</span> <span class="o">=</span> <span class="n">heterograph</span><span class="p">(</span><span class="n">data_dict</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># load node features to dgl_graph</span>
</span></span><span class="line"><span class="cl"><span class="n">dgl_graph</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;label&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">tensor</span><span class="p">(</span><span class="n">features</span><span class="p">[</span><span class="mi">32</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># heterogeneous graph to heterogeneous graph, keep ndata and edata</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">dgl</span>
</span></span><span class="line"><span class="cl"><span class="n">hg</span> <span class="o">=</span> <span class="n">dgl</span><span class="o">.</span><span class="n">to_homogeneous</span><span class="p">(</span><span class="n">dgl_graph</span><span class="p">,</span> <span class="n">ndata</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;label&#39;</span><span class="p">])</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后，我们用上边提到的 Torch Label Spreading 实现，应用到我们的图上。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">abc</span> <span class="kn">import</span> <span class="n">abstractmethod</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">torch</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">BaseLabelPropagation</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Base class for label propagation models.
</span></span></span><span class="line"><span class="cl"><span class="s2">    
</span></span></span><span class="line"><span class="cl"><span class="s2">    Parameters
</span></span></span><span class="line"><span class="cl"><span class="s2">    ----------
</span></span></span><span class="line"><span class="cl"><span class="s2">    adj_matrix: torch.FloatTensor
</span></span></span><span class="line"><span class="cl"><span class="s2">        Adjacency matrix of the graph.
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">adj_matrix</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">norm_adj_matrix</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_normalize</span><span class="p">(</span><span class="n">adj_matrix</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">n_nodes</span> <span class="o">=</span> <span class="n">adj_matrix</span><span class="o">.</span><span class="n">size</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">one_hot_labels</span> <span class="o">=</span> <span class="kc">None</span> 
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">n_classes</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">labeled_mask</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">predictions</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@staticmethod</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@abstractmethod</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">_normalize</span><span class="p">(</span><span class="n">adj_matrix</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">raise</span> <span class="ne">NotImplementedError</span><span class="p">(</span><span class="s2">&#34;_normalize must be implemented&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@abstractmethod</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">_propagate</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">raise</span> <span class="ne">NotImplementedError</span><span class="p">(</span><span class="s2">&#34;_propagate must be implemented&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">_one_hot_encode</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">labels</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># Get the number of classes</span>
</span></span><span class="line"><span class="cl">        <span class="n">classes</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">unique</span><span class="p">(</span><span class="n">labels</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">classes</span> <span class="o">=</span> <span class="n">classes</span><span class="p">[</span><span class="n">classes</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">n_classes</span> <span class="o">=</span> <span class="n">classes</span><span class="o">.</span><span class="n">size</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1"># One-hot encode labeled data instances and zero rows corresponding to unlabeled instances</span>
</span></span><span class="line"><span class="cl">        <span class="n">unlabeled_mask</span> <span class="o">=</span> <span class="p">(</span><span class="n">labels</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">labels</span> <span class="o">=</span> <span class="n">labels</span><span class="o">.</span><span class="n">clone</span><span class="p">()</span>  <span class="c1"># defensive copying</span>
</span></span><span class="line"><span class="cl">        <span class="n">labels</span><span class="p">[</span><span class="n">unlabeled_mask</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">one_hot_labels</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="bp">self</span><span class="o">.</span><span class="n">n_nodes</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">n_classes</span><span class="p">),</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">float</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">one_hot_labels</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">one_hot_labels</span><span class="o">.</span><span class="n">scatter</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">labels</span><span class="o">.</span><span class="n">unsqueeze</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">one_hot_labels</span><span class="p">[</span><span class="n">unlabeled_mask</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">labeled_mask</span> <span class="o">=</span> <span class="o">~</span><span class="n">unlabeled_mask</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">fit</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">labels</span><span class="p">,</span> <span class="n">max_iter</span><span class="p">,</span> <span class="n">tol</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;Fits a semi-supervised learning label propagation model.
</span></span></span><span class="line"><span class="cl"><span class="s2">        
</span></span></span><span class="line"><span class="cl"><span class="s2">        labels: torch.LongTensor
</span></span></span><span class="line"><span class="cl"><span class="s2">            Tensor of size n_nodes indicating the class number of each node.
</span></span></span><span class="line"><span class="cl"><span class="s2">            Unlabeled nodes are denoted with -1.
</span></span></span><span class="line"><span class="cl"><span class="s2">        max_iter: int
</span></span></span><span class="line"><span class="cl"><span class="s2">            Maximum number of iterations allowed.
</span></span></span><span class="line"><span class="cl"><span class="s2">        tol: float
</span></span></span><span class="line"><span class="cl"><span class="s2">            Convergence tolerance: threshold to consider the system at steady state.
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">_one_hot_encode</span><span class="p">(</span><span class="n">labels</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">predictions</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">one_hot_labels</span><span class="o">.</span><span class="n">clone</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">prev_predictions</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="bp">self</span><span class="o">.</span><span class="n">n_nodes</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">n_classes</span><span class="p">),</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">float</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">max_iter</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># Stop iterations if the system is considered at a steady state</span>
</span></span><span class="line"><span class="cl">            <span class="n">variation</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">abs</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">predictions</span> <span class="o">-</span> <span class="n">prev_predictions</span><span class="p">)</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span><span class="o">.</span><span class="n">item</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">variation</span> <span class="o">&lt;</span> <span class="n">tol</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;The method stopped after </span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2"> iterations, variation=</span><span class="si">{</span><span class="n">variation</span><span class="si">:</span><span class="s2">.4f</span><span class="si">}</span><span class="s2">.&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">break</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="n">prev_predictions</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">predictions</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">_propagate</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">predict</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">predictions</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">predict_classes</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">predictions</span><span class="o">.</span><span class="n">max</span><span class="p">(</span><span class="n">dim</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">indices</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">LabelPropagation</span><span class="p">(</span><span class="n">BaseLabelPropagation</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">adj_matrix</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="fm">__init__</span><span class="p">(</span><span class="n">adj_matrix</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@staticmethod</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">_normalize</span><span class="p">(</span><span class="n">adj_matrix</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;Computes D^-1 * W&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="n">degs</span> <span class="o">=</span> <span class="n">adj_matrix</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">dim</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">degs</span><span class="p">[</span><span class="n">degs</span> <span class="o">==</span> <span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>  <span class="c1"># avoid division by 0 error</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">adj_matrix</span> <span class="o">/</span> <span class="n">degs</span><span class="p">[:,</span> <span class="kc">None</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">_propagate</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">predictions</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">matmul</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">norm_adj_matrix</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">predictions</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1"># Put back already known labels</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">predictions</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">labeled_mask</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">one_hot_labels</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">labeled_mask</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">fit</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">labels</span><span class="p">,</span> <span class="n">max_iter</span><span class="o">=</span><span class="mi">1000</span><span class="p">,</span> <span class="n">tol</span><span class="o">=</span><span class="mf">1e-3</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">labels</span><span class="p">,</span> <span class="n">max_iter</span><span class="p">,</span> <span class="n">tol</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">LabelSpreading</span><span class="p">(</span><span class="n">BaseLabelPropagation</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">adj_matrix</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="fm">__init__</span><span class="p">(</span><span class="n">adj_matrix</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@staticmethod</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">_normalize</span><span class="p">(</span><span class="n">adj_matrix</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;Computes D^-1/2 * W * D^-1/2&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="n">degs</span> <span class="o">=</span> <span class="n">adj_matrix</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">dim</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">norm</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">pow</span><span class="p">(</span><span class="n">degs</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">norm</span><span class="p">[</span><span class="n">torch</span><span class="o">.</span><span class="n">isinf</span><span class="p">(</span><span class="n">norm</span><span class="p">)]</span> <span class="o">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">adj_matrix</span> <span class="o">*</span> <span class="n">norm</span><span class="p">[:,</span> <span class="kc">None</span><span class="p">]</span> <span class="o">*</span> <span class="n">norm</span><span class="p">[</span><span class="kc">None</span><span class="p">,</span> <span class="p">:]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">_propagate</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">predictions</span> <span class="o">=</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">alpha</span> <span class="o">*</span> <span class="n">torch</span><span class="o">.</span><span class="n">matmul</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">norm_adj_matrix</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">predictions</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="o">+</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="bp">self</span><span class="o">.</span><span class="n">alpha</span><span class="p">)</span> <span class="o">*</span> <span class="bp">self</span><span class="o">.</span><span class="n">one_hot_labels</span>
</span></span><span class="line"><span class="cl">        <span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">fit</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">labels</span><span class="p">,</span> <span class="n">max_iter</span><span class="o">=</span><span class="mi">1000</span><span class="p">,</span> <span class="n">tol</span><span class="o">=</span><span class="mf">1e-3</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.5</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">        Parameters
</span></span></span><span class="line"><span class="cl"><span class="s2">        ----------
</span></span></span><span class="line"><span class="cl"><span class="s2">        alpha: float
</span></span></span><span class="line"><span class="cl"><span class="s2">            Clamping factor.
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="n">alpha</span>
</span></span><span class="line"><span class="cl">        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">labels</span><span class="p">,</span> <span class="n">max_iter</span><span class="p">,</span> <span class="n">tol</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">networkx</span> <span class="k">as</span> <span class="nn">nx</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">nx_hg</span> <span class="o">=</span> <span class="n">hg</span><span class="o">.</span><span class="n">to_networkx</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">adj_matrix</span> <span class="o">=</span> <span class="n">nx</span><span class="o">.</span><span class="n">adjacency_matrix</span><span class="p">(</span><span class="n">nx_hg</span><span class="p">)</span><span class="o">.</span><span class="n">toarray</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">labels</span> <span class="o">=</span> <span class="n">hg</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;label&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Create input tensors</span>
</span></span><span class="line"><span class="cl"><span class="n">adj_matrix_t</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">FloatTensor</span><span class="p">(</span><span class="n">adj_matrix</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">labels_t</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">LongTensor</span><span class="p">(</span><span class="n">labels</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Learn with Label Propagation</span>
</span></span><span class="line"><span class="cl"><span class="n">label_propagation</span> <span class="o">=</span> <span class="n">LabelPropagation</span><span class="p">(</span><span class="n">adj_matrix_t</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Label Propagation: &#34;</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">label_propagation</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">labels_t</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">label_propagation_output_labels</span> <span class="o">=</span> <span class="n">label_propagation</span><span class="o">.</span><span class="n">predict_classes</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Learn with Label Spreading</span>
</span></span><span class="line"><span class="cl"><span class="n">label_spreading</span> <span class="o">=</span> <span class="n">LabelSpreading</span><span class="p">(</span><span class="n">adj_matrix_t</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Label Spreading: &#34;</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">label_spreading</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">labels_t</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.8</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">label_spreading_output_labels</span> <span class="o">=</span> <span class="n">label_spreading</span><span class="o">.</span><span class="n">predict_classes</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>现在咱们看看染色的传播效果：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">color_map</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">:</span> <span class="s2">&#34;blue&#34;</span><span class="p">,</span> <span class="mi">1</span><span class="p">:</span> <span class="s2">&#34;green&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">input_labels_colors</span> <span class="o">=</span> <span class="p">[</span><span class="n">color_map</span><span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">l</span><span class="p">)]</span> <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">labels</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">lprop_labels_colors</span> <span class="o">=</span> <span class="p">[</span><span class="n">color_map</span><span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">l</span><span class="p">)]</span> <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">label_propagation_output_labels</span><span class="o">.</span><span class="n">numpy</span><span class="p">()]</span>
</span></span><span class="line"><span class="cl"><span class="n">lspread_labels_colors</span> <span class="o">=</span> <span class="p">[</span><span class="n">color_map</span><span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">l</span><span class="p">)]</span> <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">label_spreading_output_labels</span><span class="o">.</span><span class="n">numpy</span><span class="p">()]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">14</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">ax1</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ax2</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ax3</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ax1</span><span class="o">.</span><span class="n">title</span><span class="o">.</span><span class="n">set_text</span><span class="p">(</span><span class="s2">&#34;Raw data (2 classes)&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ax2</span><span class="o">.</span><span class="n">title</span><span class="o">.</span><span class="n">set_text</span><span class="p">(</span><span class="s2">&#34;Label Propagation&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ax3</span><span class="o">.</span><span class="n">title</span><span class="o">.</span><span class="n">set_text</span><span class="p">(</span><span class="s2">&#34;Label Spreading&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">pos</span> <span class="o">=</span> <span class="n">nx</span><span class="o">.</span><span class="n">spring_layout</span><span class="p">(</span><span class="n">nx_hg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">nx</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="n">nx_hg</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax1</span><span class="p">,</span> <span class="n">pos</span><span class="o">=</span><span class="n">pos</span><span class="p">,</span> <span class="n">node_color</span><span class="o">=</span><span class="n">input_labels_colors</span><span class="p">,</span> <span class="n">node_size</span><span class="o">=</span><span class="mi">50</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">nx</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="n">nx_hg</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax2</span><span class="p">,</span> <span class="n">pos</span><span class="o">=</span><span class="n">pos</span><span class="p">,</span> <span class="n">node_color</span><span class="o">=</span><span class="n">lprop_labels_colors</span><span class="p">,</span> <span class="n">node_size</span><span class="o">=</span><span class="mi">50</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">nx</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="n">nx_hg</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax3</span><span class="p">,</span> <span class="n">pos</span><span class="o">=</span><span class="n">pos</span><span class="p">,</span> <span class="n">node_color</span><span class="o">=</span><span class="n">lspread_labels_colors</span><span class="p">,</span> <span class="n">node_size</span><span class="o">=</span><span class="mi">50</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Legend</span>
</span></span><span class="line"><span class="cl"><span class="n">ax4</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ax4</span><span class="o">.</span><span class="n">axis</span><span class="p">(</span><span class="s2">&#34;off&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">legend_colors</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;orange&#34;</span><span class="p">,</span> <span class="s2">&#34;blue&#34;</span><span class="p">,</span> <span class="s2">&#34;green&#34;</span><span class="p">,</span> <span class="s2">&#34;red&#34;</span><span class="p">,</span> <span class="s2">&#34;cyan&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">legend_labels</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;unlabeled&#34;</span><span class="p">,</span> <span class="s2">&#34;class 0&#34;</span><span class="p">,</span> <span class="s2">&#34;class 1&#34;</span><span class="p">,</span> <span class="s2">&#34;class 2&#34;</span><span class="p">,</span> <span class="s2">&#34;class 3&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">dummy_legend</span> <span class="o">=</span> <span class="p">[</span><span class="n">ax4</span><span class="o">.</span><span class="n">plot</span><span class="p">([],</span> <span class="p">[],</span> <span class="n">ls</span><span class="o">=</span><span class="s1">&#39;-&#39;</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="n">c</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">legend_colors</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">legend</span><span class="p">(</span><span class="n">dummy_legend</span><span class="p">,</span> <span class="n">legend_labels</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到最后画出来的结果：</p>
<p><a class="lightgallery" href="/fraud-detection-with-nebulagraph/lpa_spread_notation_matplot.webp" title="/fraud-detection-with-nebulagraph/lpa_spread_notation_matplot.webp" data-thumbnail="/fraud-detection-with-nebulagraph/lpa_spread_notation_matplot.webp">
        
    </a></p>
<p>可以看到有一些蓝色标签被 Spread 开了，实际上我的这个例子的效果并不理想（因为这个例子李，绿色的才是重要的标签），不过我给的子图实在是太小了，也本不应该奢求有好的结果，只是为了个大家演示一下这个方法。</p>
<h3 id="带有图特征的机器学习" class="headerLink">
    <a href="#%e5%b8%a6%e6%9c%89%e5%9b%be%e7%89%b9%e5%be%81%e7%9a%84%e6%9c%ba%e5%99%a8%e5%ad%a6%e4%b9%a0" class="header-mark"></a>1.4 带有图特征的机器学习</h3><p>在风控领域开始利用图的思想和能力之前，已经有很多利用机器学习的分类算法基于历史数据预测高风险行为的方法了，这些方法把记录中领域专家认为有关的信息（例如：年龄、学历、收入）作为特征，历史标注信息作为标签去训练风险预测模型。</p>
<p>那么读到的这里，我们是否会想到在这些方法的基础之上，如果把基于图结构的属性也考虑进来，作为特征去训练的模型可能更有效呢？答案也是肯定的，已经有很多论文和工程实践揭示这样的模型比未考虑图特征的算法更加有效：这些被尝试有效的图结构特征可能是实体的 PageRank 值、Degree 值或者是某一个社区发现算法得出的社区 id。</p>
<p>在生产上，我们可以定期从图谱中获得实时的全图信息，在图计算平台中分析运算获得所需特征，经过预定的数据管道，导入机器学习模型中周期获得新的风险提示，并将部分结果写回图谱方便其他系统和专家抽取、参考。</p>
<h4 id="带有图特征的机器学习欺诈检测示例" class="headerLink">
    <a href="#%e5%b8%a6%e6%9c%89%e5%9b%be%e7%89%b9%e5%be%81%e7%9a%84%e6%9c%ba%e5%99%a8%e5%ad%a6%e4%b9%a0%e6%ac%ba%e8%af%88%e6%a3%80%e6%b5%8b%e7%a4%ba%e4%be%8b" class="header-mark"></a>1.4.1 带有图特征的机器学习欺诈检测示例</h4><p>这里，机器学习的方法我就不演示了，就是常见的分类方法，在此之上，我们可以在数据中通过图算法获得一些新的属性，这些属性再处理一下作为新的特征。我只演示一个社区发现的方法，我们可以对全图跑一个 Louvain，得出不同节点的社区归属，然后把社区的值当做一个分类处理成为数值的特征。</p>
<p>这个例子里我们还用 <a href="https://github.com/wey-gu/fraud-detection-datagen" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/fraud-detection-datagen</a> 这个数据，在此基础上，这个例子我用到了 <a href="https://github.com/vesoft-inc/nebula-algorithm/" target="_blank" rel="noopener noreferrer">Nebula-Algorithm</a> 这个项目，它是一个 Spark 应用，可以在 NebulaGraph 图库上运行很多常用的图算法。</p>
<p>首先，我们部署 Spark 和 Nebula Algorithm，还是利用 Nebula-UP，一键部署：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -fsSL nebula-up.siwei.io/all-in-one.sh <span class="p">|</span> bash -s -- v3 spark
</span></span></code></pre></td></tr></table>
</div>
</div><p>集群起来之后，因为需要的配置文件我已经放在了 Nebula-UP 内部，我们只需要一行就可以运行算法啦！</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> ~/.nebula-up/nebula-up/spark <span class="o">&amp;&amp;</span> ls -l
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">docker <span class="nb">exec</span> -it sparkmaster /spark/bin/spark-submit <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --master <span class="s2">&#34;local&#34;</span> --conf spark.rpc.askTimeout<span class="o">=</span>6000s <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --class com.vesoft.nebula.algorithm.Main <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --driver-memory 4g /root/download/nebula-algo.jar <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -p /root/louvain.conf
</span></span></code></pre></td></tr></table>
</div>
</div><p>而最终的结果就在 sparkmaster 容器内的 <code>/output</code> 里：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># docker exec -it sparkmaster bash</span>
</span></span><span class="line"><span class="cl">ls -l /output
</span></span></code></pre></td></tr></table>
</div>
</div><p>之后，我们可以对这个 Louvain 的图特征做一些处理，并开始传统的模型训练了。</p>
<h3 id="图神经网络的方法" class="headerLink">
    <a href="#%e5%9b%be%e7%a5%9e%e7%bb%8f%e7%bd%91%e7%bb%9c%e7%9a%84%e6%96%b9%e6%b3%95" class="header-mark"></a>1.5 图神经网络的方法</h3><p>然而，这些图特征的方法的问题在于：</p>
<ol>
<li>图特征并不能把关联关系，数据的局部性充分反映到我们的模型、方法里；</li>
<li>图的特征工程是很昂贵、繁琐的。</li>
</ol>
<p>在最近几年的成果中，基于 GNN 的方法通过将图结构与属性信息进行嵌入表示，使得我们能在不进行图特征抽取、特征工程、专家与工程方法的数据标注的情况下，得到相比于基于传统图特征的机器学习更好的效果。有意思的是，现在正是这些方法快速被发现、演进的时期，基于图的深度学习是之前几年最热门的机器学习研究方向之一。</p>
<p>同时，图深度学习的一些方法可以做到 Inductive Learning——模型可以在新的点、边上进行推理，这样，配合图数据库上线上的子图查询能力，在线实时的风险预测也变得很简单可行了。</p>
<h4 id="基于图表示的图神经网络欺诈检测系统示例" class="headerLink">
    <a href="#%e5%9f%ba%e4%ba%8e%e5%9b%be%e8%a1%a8%e7%a4%ba%e7%9a%84%e5%9b%be%e7%a5%9e%e7%bb%8f%e7%bd%91%e7%bb%9c%e6%ac%ba%e8%af%88%e6%a3%80%e6%b5%8b%e7%b3%bb%e7%bb%9f%e7%a4%ba%e4%be%8b" class="header-mark"></a>1.5.1 基于图表示的图神经网络欺诈检测系统示例</h4><p>利用 GNN 的方法中，图数据库并不是必须的，数据的存储可以在其他几种常见的介质之中，但是图库能够最大化助益模型训练、模型更新、线上结果的更新。当我们把图数据库作为数据的单一数据来源（single source of truth）的时候，所有的基于线上、离线、图谱的方法可以很容易被集成起来，从而组合所有方法的优势与结果，做出更有效的欺诈检测复合系统。</p>
<p>在这个示例中我们一样分为：<strong>数据处理</strong>、<strong>模型训练</strong>、<strong>构建检测系统</strong>这几部分。</p>
<blockquote>
<p>注，这里，我们使用的的工具为 Deep Graph library（DGL），NebulaGraph 图数据库和他们之间的桥梁，Nebula-DGL。</p>
<ul>
<li>DGL: <a href="https://www.dgl.ai/" target="_blank" rel="noopener noreferrer">https://www.dgl.ai/</a></li>
<li>Nebula-DGL: <a href="https://github.com/wey-gu/nebula-dgl" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/nebula-dgl</a> 我也是这个库的作者 😁</li>
</ul>
</blockquote>
<h5 id="数据集" class="headerLink">
    <a href="#%e6%95%b0%e6%8d%ae%e9%9b%86" class="header-mark"></a>1.5.1.1 数据集</h5><p>本例中，我们使用的数据集是 Yelp-Fraud，他直接来自于论文 <a href="https://paperswithcode.com/paper/enhancing-graph-neural-network-based-fraud" target="_blank" rel="noopener noreferrer">Enhancing Graph Neural Network-based Fraud Detectors against Camouflaged Fraudsters</a>。</p>
<p>这个图中有一种点，三种关系：</p>
<ul>
<li>顶点：来自 Yelp 中的餐厅、酒店的评价，有两类属性：
<ul>
<li>每一个评价中有被标注了的是否是虚假、欺诈评价的标签</li>
<li>32 个已经被处理过的数字型属性</li>
</ul>
</li>
<li>边：三类评价之间的关联关系
<ul>
<li>R-U-R：两个评价由同一个用户发出 shares_user_with</li>
<li>R-S-R：两个评价是同餐厅同评分（评分可以是1到5） shares_restaurant_rating_with</li>
<li>R-T-R：两个评价是同餐厅同提交月份 shares_restaurant_in_one_month_with</li>
</ul>
</li>
</ul>
<p>在开始之前，我们假设这个图已经在我们的 NebulaGraph 里边了。</p>
<blockquote>
<p>注，我已经帮大家提前做好了将这张图导入 NebulaGraph 的工作，长话短说就是：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 部署 NebulaGraph</span>
</span></span><span class="line"><span class="cl">curl -fsSL nebula-up.siwei.io/install.sh <span class="p">|</span> bash
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 拉取这个数据的 Repo</span>
</span></span><span class="line"><span class="cl">git clone https://github.com/wey-gu/nebulagraph-yelp-frauddetection <span class="o">&amp;&amp;</span> <span class="nb">cd</span> nebulagraph-yelp-frauddetection
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 安装依赖，执行数据下载生成</span>
</span></span><span class="line"><span class="cl">python3 -m pip install -r requirements.txt
</span></span><span class="line"><span class="cl">python3 data_download.py
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 导入到 NebulaGraph</span>
</span></span><span class="line"><span class="cl">docker run --rm -ti <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span> --network<span class="o">=</span>nebula-net <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span> -v <span class="si">${</span><span class="nv">PWD</span><span class="si">}</span>/yelp_nebulagraph_importer.yaml:/root/importer.yaml <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span> -v <span class="si">${</span><span class="nv">PWD</span><span class="si">}</span>/data:/root <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span> vesoft/nebula-importer:v3.1.0 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span> --config /root/importer.yaml
</span></span></code></pre></td></tr></table>
</div>
</div><p>详情参考：https://github.com/wey-gu/nebulagraph-yelp-frauddetection</p>
</blockquote>
<h5 id="数据处理" class="headerLink">
    <a href="#%e6%95%b0%e6%8d%ae%e5%a4%84%e7%90%86" class="header-mark"></a>1.5.1.2 数据处理</h5><p>这部分的任务是将图谱中和风险相关子图的拓扑结构表示和其中有关的特征（属性）进行工程处理，序列化成为 DGL 的图对象。</p>
<p>DGL 本身支持从点、边列表（edgelist）形式 CSV 文件，或者从 NetworkX 和 SciPy 的序列化稀疏的邻接矩阵（adjacency matrix）的数据来构造它的图对象，我们可以把原始的图数据或者图库中的数据全量导出为这些形式，不过在真实的例子中图库中的数据是实时变化的，能够直接在 NebulaGraph 中的子图上做 GNN 训练一般来说是更理想。得益于 Nebula-DGL 这个库，做这件事儿是很自然的。</p>
<blockquote>
<p>注，DGL 外部数据员导入文档：https://docs.dgl.ai/guide/graph-external.html</p>
</blockquote>
<p>现在我们开始这个数据的导入，在这之前，我先介绍一下 Nebula-DGL。</p>
<p>Nebula-DGL 可以根据给定的映射和转换规则（YAML 格式），将 NebulaGraph 中的顶点、边，和它们的属性按照规则处理成为点、边、和其中的标注（Label）与特征（Feature），从而构造为 DGL 的图对象。这其中，值得一提的是属性到特征的转换。我们知道，特征可能是某一个属性的值、一个或者多个属性的值做一定的数学变换、亦或是字符型的属性按照枚举规则输出为数字。相应的，Nebula-DGL 在规则中，我们都可以针对这几种情况利用 <code>filter</code> 进行表达：</p>
<ul>
<li>特征直接选取属性的值：</li>
</ul>
<p>这个例子里，NebulaGraph 图中 <code>follow</code> 这个边将被抽取，边上的属性 <code>degree</code> 的值将直接被作为名为 <code>degree</code> 的特征。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">edge_types</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">follow</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">start_vertex_tag</span><span class="p">:</span><span class="w"> </span><span class="l">player</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">end_vertex_tag</span><span class="p">:</span><span class="w"> </span><span class="l">player</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">features</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">degree</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">degree</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">int</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">nullable</span><span class="p">:</span><span class="w"> </span><span class="kc">False</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">filter</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">value</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>特征从属性中经过数学变换</li>
</ul>
<p>这个例子中，我们把 <code>serve</code> 边之中的两个属性进行 <code>(end_year - start_year) / 30</code> 的处理，变为 <code>service_time</code> 这样的一个特征。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">edge_types</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">serve</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">start_vertex_tag</span><span class="p">:</span><span class="w"> </span><span class="l">player</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">end_vertex_tag</span><span class="p">:</span><span class="w"> </span><span class="l">team</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">features</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">service_time</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">start_year</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">int</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">nullable</span><span class="p">:</span><span class="w"> </span><span class="kc">False</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">end_year</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">int</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">nullable</span><span class="p">:</span><span class="w"> </span><span class="kc">False</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># The variable was mapped by order of properties</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">filter</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">function</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">function</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;lambda start_year, end_year: (end_year - start_year) / 30&#34;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>枚举属性值为数字特征</li>
</ul>
<p>这个例子中，我们把 <code>team</code> 顶点中的 <code>name</code> 属性进行枚举，根据这个对于是西岸还是东岸：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">vertex_tags</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">team</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">features</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">coast</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">str</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">nullable</span><span class="p">:</span><span class="w"> </span><span class="kc">False</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">filter</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="c"># 0 stand for the east coast, 1 stand for the west coast</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">enumeration</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">enumeration</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">Celtics</span><span class="p">:</span><span class="w"> </span><span class="m">0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">Nets</span><span class="p">:</span><span class="w"> </span><span class="m">0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">Nuggets</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">Timberwolves</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">Thunder</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># ... not showing all teams here</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到这个转换规则非常简单直接，大家也可以参考 Nebula-DGL 的完整例子了解全部细节 <a href="https://github.com/wey-gu/nebula-dgl/tree/main/example" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/nebula-dgl/tree/main/example</a>。而有上边数据处理规则的了解之后，我们可以开始处理这个 Yelp 图数据了。</p>
<p>首先，定义如下规则，这里，我们把顶点 review 和三种边都对应过来了，同时，review 上的属性也按照原本的值对应了过来：</p>
<p><code>nebulagraph_yelp_dgl_mapper.yaml</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># If vertex id is string-typed, remap_vertex_id must be true.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">remap_vertex_id</span><span class="p">:</span><span class="w"> </span><span class="kc">True</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">space</span><span class="p">:</span><span class="w"> </span><span class="l">yelp</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># str or int</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">vertex_id_type</span><span class="p">:</span><span class="w"> </span><span class="l">int</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">vertex_tags</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">review</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">label</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">is_fraud</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">is_fraud</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">int</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">nullable</span><span class="p">:</span><span class="w"> </span><span class="kc">False</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">filter</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">value</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">features</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">f0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">f0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">float</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">nullable</span><span class="p">:</span><span class="w"> </span><span class="kc">False</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">filter</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">value</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">f1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">f1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">float</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">nullable</span><span class="p">:</span><span class="w"> </span><span class="kc">False</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">filter</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">value</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># ...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">f31</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">f31</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">float</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">nullable</span><span class="p">:</span><span class="w"> </span><span class="kc">False</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">filter</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">value</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">edge_types</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">shares_user_with</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">start_vertex_tag</span><span class="p">:</span><span class="w"> </span><span class="l">review</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">end_vertex_tag</span><span class="p">:</span><span class="w"> </span><span class="l">review</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">shares_restaurant_rating_with</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">start_vertex_tag</span><span class="p">:</span><span class="w"> </span><span class="l">review</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">end_vertex_tag</span><span class="p">:</span><span class="w"> </span><span class="l">review</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">shares_restaurant_in_one_month_with</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">start_vertex_tag</span><span class="p">:</span><span class="w"> </span><span class="l">review</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">end_vertex_tag</span><span class="p">:</span><span class="w"> </span><span class="l">review</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>然后，我们在安装好 Nebula-DGL 之后只需要这几行代码就可以将 NebulaGraph 中的这张图构造为 DGL 的 <code>DGLHeteroGraph</code> 图对象：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">nebula_dgl</span> <span class="kn">import</span> <span class="n">NebulaLoader</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">nebula_config</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;graph_hosts&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                <span class="p">(</span><span class="s1">&#39;graphd&#39;</span><span class="p">,</span> <span class="mi">9669</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                <span class="p">(</span><span class="s1">&#39;graphd1&#39;</span><span class="p">,</span> <span class="mi">9669</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                <span class="p">(</span><span class="s1">&#39;graphd2&#39;</span><span class="p">,</span> <span class="mi">9669</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;nebula_user&#34;</span><span class="p">:</span> <span class="s2">&#34;root&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;nebula_password&#34;</span><span class="p">:</span> <span class="s2">&#34;nebula&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># load feature_mapper from yaml file</span>
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;nebulagraph_yelp_dgl_mapper.yaml&#39;</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">feature_mapper</span> <span class="o">=</span> <span class="n">yaml</span><span class="o">.</span><span class="n">safe_load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">nebula_loader</span> <span class="o">=</span> <span class="n">NebulaLoader</span><span class="p">(</span><span class="n">nebula_config</span><span class="p">,</span> <span class="n">feature_mapper</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span> <span class="o">=</span> <span class="n">nebula_loader</span><span class="o">.</span><span class="n">load</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">g</span> <span class="o">=</span> <span class="n">g</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="s1">&#39;cpu&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">device</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">device</span><span class="p">(</span><span class="s1">&#39;cpu&#39;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h5 id="模型训练" class="headerLink">
    <a href="#%e6%a8%a1%e5%9e%8b%e8%ae%ad%e7%bb%83" class="header-mark"></a>1.5.1.3 模型训练</h5><p>这里，我用 <a href="https://cs.stanford.edu/people/jure/pubs/graphsage-nips17.pdf" target="_blank" rel="noopener noreferrer">GraphSAGE</a> 算法的点分类（Node Classification）方法来举例，GraphSAGE 的原始版本是一个归纳学习（Inductive Learning）的算法，这里，归纳学习区别于它的反面： Transductive Learning ，可以把新的数据用在完全旧的图之上习得的模型，这样训练出来的模型可以进行线上增量数据的欺诈检测（而不是需要重新加载为全图训练才可以）。</p>
<p><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/182301784-21850dac-0d47-4dd5-b66f-a28b87fe9d4d.svg" title="GraphSAGE_FraudDetection" data-thumbnail="https://user-images.githubusercontent.com/1651790/182301784-21850dac-0d47-4dd5-b66f-a28b87fe9d4d.svg">
        
    </a></p>
<p>模型训练系统（左边）：</p>
<ul>
<li>输入：带有欺诈标注的历史交易图谱</li>
<li>输出：一个 GraphSAGE 的 DGL 模型</li>
</ul>
<p>线上推理系统（右边）：</p>
<ul>
<li>
<p>模型：基于带有欺诈标注的历史交易图谱基于 GraphSAGE 训练</p>
</li>
<li>
<p>输入：一笔新的交易</p>
</li>
<li>
<p>输出：这笔交易是否涉嫌欺诈</p>
</li>
</ul>
<p><strong>分割数据集</strong></p>
<p>机器学习训练的过程需要在已经有的数据、信息中分割出用来训练、验证和测试的子集，他们可以是不相交的整体数据的真子集也可以彼此有重叠，在实际的情况中，有时候我们对数据的标注常常是不充分的，所以按照标注的比例去分割数据可能更有意义一些，下边的例子是我按照点上是否标注欺诈为标准去分割数据集。</p>
<p>这里边有两个地方值得注意：</p>
<ol>
<li><code>train_test_split</code> 中的 <code>stratify=g.ndata['is_fraud']</code> 代表保持 <code>is_fraud</code> 的值的分布去分割，符合我们前边提到的思想。</li>
<li>我们分割的是 <code>idx</code> 索引，这样，可以最终获得三个集合的索引，供训练、验证和测试时候使用。同时我们还把对应集合 mask 放到图对象 <code>g</code> 里边去了。</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># Split the graph into train, validation, and test sets</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">train_test_split</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># features are g.ndata[&#39;f0&#39;], g.ndata[&#39;f1&#39;], g.ndata[&#39;f2&#39;], ... g.ndata[&#39;f31&#39;]</span>
</span></span><span class="line"><span class="cl"><span class="c1"># label is in g.ndata[&#39;is_fraud&#39;]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># concatenate all features</span>
</span></span><span class="line"><span class="cl"><span class="n">features</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">32</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">features</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;f&#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;feat&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">stack</span><span class="p">(</span><span class="n">features</span><span class="p">,</span> <span class="n">dim</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;label&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">g</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;is_fraud&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="c1"># numpy array as an index of range n</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">idx</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">tensor</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">number_of_nodes</span><span class="p">()),</span> <span class="n">device</span><span class="o">=</span><span class="n">device</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">int64</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># split based on value distribution of label: the property &#34;is_fraud&#34;, which is a binary variable.</span>
</span></span><span class="line"><span class="cl"><span class="n">X_train_and_val_idx</span><span class="p">,</span> <span class="n">X_test_idx</span><span class="p">,</span> <span class="n">y_train_and_val</span><span class="p">,</span> <span class="n">y_test</span> <span class="o">=</span> <span class="n">train_test_split</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">idx</span><span class="p">,</span> <span class="n">g</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;is_fraud&#39;</span><span class="p">],</span> <span class="n">test_size</span><span class="o">=</span><span class="mf">0.2</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">,</span> <span class="n">stratify</span><span class="o">=</span><span class="n">g</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;is_fraud&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># split train and val</span>
</span></span><span class="line"><span class="cl"><span class="n">X_train_idx</span><span class="p">,</span> <span class="n">X_val_idx</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">y_val</span> <span class="o">=</span> <span class="n">train_test_split</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">X_train_and_val_idx</span><span class="p">,</span> <span class="n">y_train_and_val</span><span class="p">,</span> <span class="n">test_size</span><span class="o">=</span><span class="mf">0.2</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">,</span> <span class="n">stratify</span><span class="o">=</span><span class="n">y_train_and_val</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># list of index to mask</span>
</span></span><span class="line"><span class="cl"><span class="n">train_mask</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">number_of_nodes</span><span class="p">(),</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">bool</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">train_mask</span><span class="p">[</span><span class="n">X_train_idx</span><span class="p">]</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">val_mask</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">number_of_nodes</span><span class="p">(),</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">bool</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">val_mask</span><span class="p">[</span><span class="n">X_val_idx</span><span class="p">]</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">test_mask</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">number_of_nodes</span><span class="p">(),</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">bool</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">test_mask</span><span class="p">[</span><span class="n">X_test_idx</span><span class="p">]</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;train_mask&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">train_mask</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;val_mask&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">val_mask</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;test_mask&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">test_mask</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>异构图转换为同构图</strong></p>
<p>GraphSAGE 是针对同构图，且边无 feature 的算法，而我们当下的 Yelp 图谱是异构的：一类点、三类边。那么，如何才能用 GraphSAGE 去建模 Yelp 图谱呢？</p>
<p>我们除了选择用其他针对异构图的 Inductive Learning 方法之外，还可想办法把同构图转换成异构图。为了在转换中不丢失重要的边类型信息，我们可以把边类型变成数值。</p>
<p>这里我给了一维的 edge feature，当然（3-1）二维也是可以的。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># shares_restaurant_in_one_month_with: 1, b&#34;001&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># shares_restaurant_rating_with: 2, b&#34;010&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># shares_user_with: 4, b&#34;100&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>注：其实如果想用 0, 1, 2 这样的分布，转换到同构图之后的 <code>hg.edata['_TYPE']</code> 也是可以直接拿来用的，详见 <a href="https://docs.dgl.ai/en/0.9.x/generated/dgl.to_homogeneous.html" target="_blank" rel="noopener noreferrer">https://docs.dgl.ai/en/0.9.x/generated/dgl.to_homogeneous.html</a> 中的例子。</p>
</blockquote>
<p>代码如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># three types of edges</span>
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="n">g</span><span class="o">.</span><span class="n">etypes</span>
</span></span><span class="line"><span class="cl"><span class="n">Out</span><span class="p">[</span><span class="mi">1</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="s1">&#39;shares_restaurant_in_one_month_with&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"> <span class="s1">&#39;shares_restaurant_rating_with&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"> <span class="s1">&#39;shares_user_with&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">2</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">edges</span><span class="p">[</span><span class="s1">&#39;shares_restaurant_in_one_month_with&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="s1">&#39;he&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">ones</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">g</span><span class="o">.</span><span class="n">number_of_edges</span><span class="p">(</span><span class="s1">&#39;shares_restaurant_in_one_month_with&#39;</span><span class="p">),</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">int64</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">edges</span><span class="p">[</span><span class="s1">&#39;shares_restaurant_rating_with&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="s1">&#39;he&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">full</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">number_of_edges</span><span class="p">(</span><span class="s1">&#39;shares_restaurant_rating_with&#39;</span><span class="p">),),</span> <span class="mi">2</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">int64</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">edges</span><span class="p">[</span><span class="s1">&#39;shares_user_with&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="s1">&#39;he&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">full</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">number_of_edges</span><span class="p">(</span><span class="s1">&#39;shares_user_with&#39;</span><span class="p">),),</span> <span class="mi">4</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">int64</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">3</span><span class="p">]:</span> <span class="n">g</span><span class="o">.</span><span class="n">edata</span><span class="p">[</span><span class="s1">&#39;he&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">Out</span><span class="p">[</span><span class="mi">3</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl"><span class="p">{(</span><span class="s1">&#39;review&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;shares_restaurant_in_one_month_with&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;review&#39;</span><span class="p">):</span> <span class="n">tensor</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span>  <span class="o">...</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]),</span>
</span></span><span class="line"><span class="cl"> <span class="p">(</span><span class="s1">&#39;review&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;shares_restaurant_rating_with&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;review&#39;</span><span class="p">):</span> <span class="n">tensor</span><span class="p">([</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span>  <span class="o">...</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">]),</span>
</span></span><span class="line"><span class="cl"> <span class="p">(</span><span class="s1">&#39;review&#39;</span><span class="p">,</span> <span class="s1">&#39;shares_user_with&#39;</span><span class="p">,</span> <span class="s1">&#39;review&#39;</span><span class="p">):</span> <span class="n">tensor</span><span class="p">([</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span>  <span class="o">...</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">])}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>参考：https://discuss.dgl.ai/t/how-to-convert-from-a-heterogeneous-graph-to-a-homogeneous-graph-with-data/2764</p>
</blockquote>
<p>然后将它转换为同构图，把 <code>he</code> 作为要保留的 edata：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">hg</span> <span class="o">=</span> <span class="n">dgl</span><span class="o">.</span><span class="n">to_homogeneous</span><span class="p">(</span><span class="n">g</span><span class="p">,</span> <span class="n">edata</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;he&#39;</span><span class="p">],</span> <span class="n">ndata</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;feat&#39;</span><span class="p">,</span> <span class="s1">&#39;label&#39;</span><span class="p">,</span> <span class="s1">&#39;train_mask&#39;</span><span class="p">,</span> <span class="s1">&#39;val_mask&#39;</span><span class="p">,</span> <span class="s1">&#39;test_mask&#39;</span><span class="p">])</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>参考：https://docs.dgl.ai/en/latest/guide/graph-heterogeneous.html?highlight=to_homogeneous#converting-heterogeneous-graphs-to-homogeneous-graphs</p>
</blockquote>
<p>默认的 GraphSAGE 实现是没考虑 edge feature 的，我们要修改消息传递的步骤，在后边会涉及到这部分的实操。</p>
<blockquote>
<p>参考：</p>
<ul>
<li><a href="https://discuss.dgl.ai/t/frequently-asked-questions-faq/1681" target="_blank" rel="noopener noreferrer">https://discuss.dgl.ai/t/frequently-asked-questions-faq/1681</a> （问题13）</li>
<li><a href="https://discuss.dgl.ai/t/using-node-and-edge-features-in-message-passing/762" target="_blank" rel="noopener noreferrer">https://discuss.dgl.ai/t/using-node-and-edge-features-in-message-passing/762</a></li>
</ul>
</blockquote>
<p><strong>模型训练代码</strong></p>
<p>DGL 官方给出了例子在：https://github.com/dmlc/dgl/tree/master/examples/pytorch/graphsage，我在测试的时候还修复了一个小 bug。</p>
<p>因为我们处理过的同构图里是带有 edge feature 的，不能照搬官方的 GraphSAGE 例子代码，我们有两种方法来处理它：</p>
<p>a. 可以稍微改动一下 <code>SAGEConv</code>消息传递的部分，以 mean 聚合的方式为例：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl">  graph.update_all(msg_fn, fn.mean(&#39;m&#39;, &#39;neigh&#39;))
</span></span><span class="line"><span class="cl"><span class="gi">+ graph.update_all(fn.copy_e(&#39;he&#39;, &#39;m&#39;), fn.mean(&#39;m&#39;, &#39;neigh&#39;))
</span></span></span><span class="line"><span class="cl"><span class="gi"></span><span class="gd">- h_neigh = graph.dstdata[&#39;neigh&#39;]
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+ h_neigh = torch.cat((graph.dstdata[&#39;neigh&#39;], graph.dstdata[&#39;neigh_e&#39;].reshape(-1, 1)), 1)
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这个处理中，除了上边消息传递部分增加 edge feature 之外，还需要注意 feature 维度的处理。</p>
<p>b. 把边参数作为边权重 ，以 mean 聚合为例：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl"><span class="gd">- graph.update_all(msg_fn, fn.mean(&#39;m&#39;, &#39;neigh&#39;))
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+ # consdier datatype with different weight, g.edata[&#39;he&#39;] as weight here
</span></span></span><span class="line"><span class="cl"><span class="gi">+ g.update_all(fn.u_mul_e(&#39;h&#39;, &#39;he&#39;, &#39;m&#39;), fn.mean(&#39;m&#39;, &#39;h&#39;))
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>下边，我们以把边的类型作为权重的方式，<code>mean</code>作为聚合的情况为例来实操：</p>
<p>我们来继承，并覆盖<code>SAGEConv</code>：</p>
<blockquote>
<p>我们其实只是修改了 Message Passing 的部分。</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">dgl</span> <span class="kn">import</span> <span class="n">function</span> <span class="k">as</span> <span class="n">fn</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">dgl.utils</span> <span class="kn">import</span> <span class="n">check_eq_shape</span><span class="p">,</span> <span class="n">expand_as_pair</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">SAGEConv</span><span class="p">(</span><span class="n">dglnn</span><span class="o">.</span><span class="n">SAGEConv</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">graph</span><span class="p">,</span> <span class="n">feat</span><span class="p">,</span> <span class="n">edge_weight</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="sa">r</span><span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">        Description
</span></span></span><span class="line"><span class="cl"><span class="s2">        -----------
</span></span></span><span class="line"><span class="cl"><span class="s2">        Compute GraphSAGE layer.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">        Parameters
</span></span></span><span class="line"><span class="cl"><span class="s2">        ----------
</span></span></span><span class="line"><span class="cl"><span class="s2">        graph : DGLGraph
</span></span></span><span class="line"><span class="cl"><span class="s2">            The graph.
</span></span></span><span class="line"><span class="cl"><span class="s2">        feat : torch.Tensor or pair of torch.Tensor
</span></span></span><span class="line"><span class="cl"><span class="s2">            If a torch.Tensor is given, it represents the input feature of shape
</span></span></span><span class="line"><span class="cl"><span class="s2">            :math:`(N, D_</span><span class="si">{in}</span><span class="s2">)`
</span></span></span><span class="line"><span class="cl"><span class="s2">            where :math:`D_</span><span class="si">{in}</span><span class="s2">` is size of input feature, :math:`N` is the number of nodes.
</span></span></span><span class="line"><span class="cl"><span class="s2">            If a pair of torch.Tensor is given, the pair must contain two tensors of shape
</span></span></span><span class="line"><span class="cl"><span class="s2">            :math:`(N_</span><span class="si">{in}</span><span class="s2">, D_{in_</span><span class="si">{src}</span><span class="s2">})` and :math:`(N_</span><span class="si">{out}</span><span class="s2">, D_{in_</span><span class="si">{dst}</span><span class="s2">})`.
</span></span></span><span class="line"><span class="cl"><span class="s2">        edge_weight : torch.Tensor, optional
</span></span></span><span class="line"><span class="cl"><span class="s2">            Optional tensor on the edge. If given, the convolution will weight
</span></span></span><span class="line"><span class="cl"><span class="s2">            with regard to the message.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">        Returns
</span></span></span><span class="line"><span class="cl"><span class="s2">        -------
</span></span></span><span class="line"><span class="cl"><span class="s2">        torch.Tensor
</span></span></span><span class="line"><span class="cl"><span class="s2">            The output feature of shape :math:`(N_</span><span class="si">{dst}</span><span class="s2">, D_</span><span class="si">{out}</span><span class="s2">)`
</span></span></span><span class="line"><span class="cl"><span class="s2">            where :math:`N_</span><span class="si">{dst}</span><span class="s2">` is the number of destination nodes in the input graph,
</span></span></span><span class="line"><span class="cl"><span class="s2">            :math:`D_</span><span class="si">{out}</span><span class="s2">` is the size of the output feature.
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">_compatibility_check</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="k">with</span> <span class="n">graph</span><span class="o">.</span><span class="n">local_scope</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">feat</span><span class="p">,</span> <span class="nb">tuple</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">                <span class="n">feat_src</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">feat_drop</span><span class="p">(</span><span class="n">feat</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">                <span class="n">feat_dst</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">feat_drop</span><span class="p">(</span><span class="n">feat</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">feat_src</span> <span class="o">=</span> <span class="n">feat_dst</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">feat_drop</span><span class="p">(</span><span class="n">feat</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="n">graph</span><span class="o">.</span><span class="n">is_block</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="n">feat_dst</span> <span class="o">=</span> <span class="n">feat_src</span><span class="p">[:</span><span class="n">graph</span><span class="o">.</span><span class="n">number_of_dst_nodes</span><span class="p">()]</span>
</span></span><span class="line"><span class="cl">            <span class="n">msg_fn</span> <span class="o">=</span> <span class="n">fn</span><span class="o">.</span><span class="n">copy_src</span><span class="p">(</span><span class="s1">&#39;h&#39;</span><span class="p">,</span> <span class="s1">&#39;m&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">edge_weight</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">assert</span> <span class="n">edge_weight</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">graph</span><span class="o">.</span><span class="n">number_of_edges</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                <span class="n">graph</span><span class="o">.</span><span class="n">edata</span><span class="p">[</span><span class="s1">&#39;_edge_weight&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">edge_weight</span>
</span></span><span class="line"><span class="cl">                <span class="n">msg_fn</span> <span class="o">=</span> <span class="n">fn</span><span class="o">.</span><span class="n">u_mul_e</span><span class="p">(</span><span class="s1">&#39;h&#39;</span><span class="p">,</span> <span class="s1">&#39;_edge_weight&#39;</span><span class="p">,</span> <span class="s1">&#39;m&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="n">h_self</span> <span class="o">=</span> <span class="n">feat_dst</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1"># Handle the case of graphs without edges</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">graph</span><span class="o">.</span><span class="n">number_of_edges</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">graph</span><span class="o">.</span><span class="n">dstdata</span><span class="p">[</span><span class="s1">&#39;neigh&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                    <span class="n">feat_dst</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="bp">self</span><span class="o">.</span><span class="n">_in_src_feats</span><span class="p">)</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">feat_dst</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1"># Determine whether to apply linear transformation before message passing A(XW)</span>
</span></span><span class="line"><span class="cl">            <span class="n">lin_before_mp</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_in_src_feats</span> <span class="o">&gt;</span> <span class="bp">self</span><span class="o">.</span><span class="n">_out_feats</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1"># Message Passing</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">_aggre_type</span> <span class="o">==</span> <span class="s1">&#39;mean&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">graph</span><span class="o">.</span><span class="n">srcdata</span><span class="p">[</span><span class="s1">&#39;h&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">fc_neigh</span><span class="p">(</span><span class="n">feat_src</span><span class="p">)</span> <span class="k">if</span> <span class="n">lin_before_mp</span> <span class="k">else</span> <span class="n">feat_src</span>
</span></span><span class="line"><span class="cl">                <span class="c1"># graph.update_all(msg_fn, fn.mean(&#39;m&#39;, &#39;neigh&#39;))</span>
</span></span><span class="line"><span class="cl">                <span class="c1">#########################################################################</span>
</span></span><span class="line"><span class="cl">                <span class="c1"># consdier datatype with different weight, g.edata[&#39;he&#39;] as weight here</span>
</span></span><span class="line"><span class="cl">                <span class="n">g</span><span class="o">.</span><span class="n">update_all</span><span class="p">(</span><span class="n">fn</span><span class="o">.</span><span class="n">u_mul_e</span><span class="p">(</span><span class="s1">&#39;h&#39;</span><span class="p">,</span> <span class="s1">&#39;he&#39;</span><span class="p">,</span> <span class="s1">&#39;m&#39;</span><span class="p">),</span> <span class="n">fn</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="s1">&#39;m&#39;</span><span class="p">,</span> <span class="s1">&#39;h&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                <span class="c1">#########################################################################</span>
</span></span><span class="line"><span class="cl">                <span class="n">h_neigh</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">dstdata</span><span class="p">[</span><span class="s1">&#39;neigh&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="ow">not</span> <span class="n">lin_before_mp</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="n">h_neigh</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">fc_neigh</span><span class="p">(</span><span class="n">h_neigh</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">_aggre_type</span> <span class="o">==</span> <span class="s1">&#39;gcn&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">check_eq_shape</span><span class="p">(</span><span class="n">feat</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">graph</span><span class="o">.</span><span class="n">srcdata</span><span class="p">[</span><span class="s1">&#39;h&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">fc_neigh</span><span class="p">(</span><span class="n">feat_src</span><span class="p">)</span> <span class="k">if</span> <span class="n">lin_before_mp</span> <span class="k">else</span> <span class="n">feat_src</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">feat</span><span class="p">,</span> <span class="nb">tuple</span><span class="p">):</span>  <span class="c1"># heterogeneous</span>
</span></span><span class="line"><span class="cl">                    <span class="n">graph</span><span class="o">.</span><span class="n">dstdata</span><span class="p">[</span><span class="s1">&#39;h&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">fc_neigh</span><span class="p">(</span><span class="n">feat_dst</span><span class="p">)</span> <span class="k">if</span> <span class="n">lin_before_mp</span> <span class="k">else</span> <span class="n">feat_dst</span>
</span></span><span class="line"><span class="cl">                <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="k">if</span> <span class="n">graph</span><span class="o">.</span><span class="n">is_block</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                        <span class="n">graph</span><span class="o">.</span><span class="n">dstdata</span><span class="p">[</span><span class="s1">&#39;h&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">srcdata</span><span class="p">[</span><span class="s1">&#39;h&#39;</span><span class="p">][:</span><span class="n">graph</span><span class="o">.</span><span class="n">num_dst_nodes</span><span class="p">()]</span>
</span></span><span class="line"><span class="cl">                    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                        <span class="n">graph</span><span class="o">.</span><span class="n">dstdata</span><span class="p">[</span><span class="s1">&#39;h&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">srcdata</span><span class="p">[</span><span class="s1">&#39;h&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">                <span class="n">graph</span><span class="o">.</span><span class="n">update_all</span><span class="p">(</span><span class="n">msg_fn</span><span class="p">,</span> <span class="n">fn</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="s1">&#39;m&#39;</span><span class="p">,</span> <span class="s1">&#39;neigh&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                <span class="n">graph</span><span class="o">.</span><span class="n">update_all</span><span class="p">(</span><span class="n">fn</span><span class="o">.</span><span class="n">copy_e</span><span class="p">(</span><span class="s1">&#39;he&#39;</span><span class="p">,</span> <span class="s1">&#39;m&#39;</span><span class="p">),</span> <span class="n">fn</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="s1">&#39;m&#39;</span><span class="p">,</span> <span class="s1">&#39;neigh&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                <span class="c1"># divide in_degrees</span>
</span></span><span class="line"><span class="cl">                <span class="n">degs</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">in_degrees</span><span class="p">()</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">feat_dst</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">h_neigh</span> <span class="o">=</span> <span class="p">(</span><span class="n">graph</span><span class="o">.</span><span class="n">dstdata</span><span class="p">[</span><span class="s1">&#39;neigh&#39;</span><span class="p">]</span> <span class="o">+</span> <span class="n">graph</span><span class="o">.</span><span class="n">dstdata</span><span class="p">[</span><span class="s1">&#39;h&#39;</span><span class="p">])</span> <span class="o">/</span> <span class="p">(</span><span class="n">degs</span><span class="o">.</span><span class="n">unsqueeze</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="ow">not</span> <span class="n">lin_before_mp</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="n">h_neigh</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">fc_neigh</span><span class="p">(</span><span class="n">h_neigh</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">_aggre_type</span> <span class="o">==</span> <span class="s1">&#39;pool&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">graph</span><span class="o">.</span><span class="n">srcdata</span><span class="p">[</span><span class="s1">&#39;h&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">F</span><span class="o">.</span><span class="n">relu</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">fc_pool</span><span class="p">(</span><span class="n">feat_src</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                <span class="n">graph</span><span class="o">.</span><span class="n">update_all</span><span class="p">(</span><span class="n">msg_fn</span><span class="p">,</span> <span class="n">fn</span><span class="o">.</span><span class="n">max</span><span class="p">(</span><span class="s1">&#39;m&#39;</span><span class="p">,</span> <span class="s1">&#39;neigh&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                <span class="n">graph</span><span class="o">.</span><span class="n">update_all</span><span class="p">(</span><span class="n">fn</span><span class="o">.</span><span class="n">copy_e</span><span class="p">(</span><span class="s1">&#39;he&#39;</span><span class="p">,</span> <span class="s1">&#39;m&#39;</span><span class="p">),</span> <span class="n">fn</span><span class="o">.</span><span class="n">max</span><span class="p">(</span><span class="s1">&#39;m&#39;</span><span class="p">,</span> <span class="s1">&#39;neigh&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                <span class="n">h_neigh</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">fc_neigh</span><span class="p">(</span><span class="n">graph</span><span class="o">.</span><span class="n">dstdata</span><span class="p">[</span><span class="s1">&#39;neigh&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">            <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">_aggre_type</span> <span class="o">==</span> <span class="s1">&#39;lstm&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">graph</span><span class="o">.</span><span class="n">srcdata</span><span class="p">[</span><span class="s1">&#39;h&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">feat_src</span>
</span></span><span class="line"><span class="cl">                <span class="n">graph</span><span class="o">.</span><span class="n">update_all</span><span class="p">(</span><span class="n">msg_fn</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">_lstm_reducer</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">h_neigh</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">fc_neigh</span><span class="p">(</span><span class="n">graph</span><span class="o">.</span><span class="n">dstdata</span><span class="p">[</span><span class="s1">&#39;neigh&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">raise</span> <span class="ne">KeyError</span><span class="p">(</span><span class="s1">&#39;Aggregator type </span><span class="si">{}</span><span class="s1"> not recognized.&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_aggre_type</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1"># GraphSAGE GCN does not require fc_self.</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">_aggre_type</span> <span class="o">==</span> <span class="s1">&#39;gcn&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">rst</span> <span class="o">=</span> <span class="n">h_neigh</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">rst</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">fc_self</span><span class="p">(</span><span class="n">h_self</span><span class="p">)</span> <span class="o">+</span> <span class="n">h_neigh</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1"># bias term</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">bias</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">rst</span> <span class="o">=</span> <span class="n">rst</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">bias</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1"># activation</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">activation</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">rst</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">activation</span><span class="p">(</span><span class="n">rst</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># normalization</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">norm</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">rst</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">norm</span><span class="p">(</span><span class="n">rst</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">rst</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>定义模型</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">SAGE</span><span class="p">(</span><span class="n">nn</span><span class="o">.</span><span class="n">Module</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">in_size</span><span class="p">,</span> <span class="n">hid_size</span><span class="p">,</span> <span class="n">out_size</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="fm">__init__</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">layers</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">ModuleList</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># three-layer GraphSAGE-mean</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">layers</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">dglnn</span><span class="o">.</span><span class="n">SAGEConv</span><span class="p">(</span><span class="n">in_size</span><span class="p">,</span> <span class="n">hid_size</span><span class="p">,</span> <span class="s1">&#39;mean&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">layers</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">dglnn</span><span class="o">.</span><span class="n">SAGEConv</span><span class="p">(</span><span class="n">hid_size</span><span class="p">,</span> <span class="n">hid_size</span><span class="p">,</span> <span class="s1">&#39;mean&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">layers</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">dglnn</span><span class="o">.</span><span class="n">SAGEConv</span><span class="p">(</span><span class="n">hid_size</span><span class="p">,</span> <span class="n">out_size</span><span class="p">,</span> <span class="s1">&#39;mean&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">dropout</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">Dropout</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">hid_size</span> <span class="o">=</span> <span class="n">hid_size</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">out_size</span> <span class="o">=</span> <span class="n">out_size</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">blocks</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">h</span> <span class="o">=</span> <span class="n">x</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">l</span><span class="p">,</span> <span class="p">(</span><span class="n">layer</span><span class="p">,</span> <span class="n">block</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">layers</span><span class="p">,</span> <span class="n">blocks</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">            <span class="n">h</span> <span class="o">=</span> <span class="n">layer</span><span class="p">(</span><span class="n">block</span><span class="p">,</span> <span class="n">h</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">l</span> <span class="o">!=</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">layers</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">h</span> <span class="o">=</span> <span class="n">F</span><span class="o">.</span><span class="n">relu</span><span class="p">(</span><span class="n">h</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">h</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">dropout</span><span class="p">(</span><span class="n">h</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">h</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">inference</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">g</span><span class="p">,</span> <span class="n">device</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;Conduct layer-wise inference to get all the node embeddings.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="n">feat</span> <span class="o">=</span> <span class="n">g</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;feat&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">sampler</span> <span class="o">=</span> <span class="n">MultiLayerFullNeighborSampler</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">prefetch_node_feats</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;feat&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">        <span class="n">dataloader</span> <span class="o">=</span> <span class="n">DataLoader</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="n">g</span><span class="p">,</span> <span class="n">torch</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">num_nodes</span><span class="p">())</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">device</span><span class="p">),</span> <span class="n">sampler</span><span class="p">,</span> <span class="n">device</span><span class="o">=</span><span class="n">device</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="n">batch_size</span><span class="o">=</span><span class="n">batch_size</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span> <span class="n">drop_last</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="n">num_workers</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">buffer_device</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">device</span><span class="p">(</span><span class="s1">&#39;cpu&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">pin_memory</span> <span class="o">=</span> <span class="p">(</span><span class="n">buffer_device</span> <span class="o">!=</span> <span class="n">device</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">l</span><span class="p">,</span> <span class="n">layer</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">layers</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">y</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">empty</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="n">g</span><span class="o">.</span><span class="n">num_nodes</span><span class="p">(),</span> <span class="bp">self</span><span class="o">.</span><span class="n">hid_size</span> <span class="k">if</span> <span class="n">l</span> <span class="o">!=</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">layers</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span> <span class="k">else</span> <span class="bp">self</span><span class="o">.</span><span class="n">out_size</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="n">device</span><span class="o">=</span><span class="n">buffer_device</span><span class="p">,</span> <span class="n">pin_memory</span><span class="o">=</span><span class="n">pin_memory</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">feat</span> <span class="o">=</span> <span class="n">feat</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">input_nodes</span><span class="p">,</span> <span class="n">output_nodes</span><span class="p">,</span> <span class="n">blocks</span> <span class="ow">in</span> <span class="n">tqdm</span><span class="o">.</span><span class="n">tqdm</span><span class="p">(</span><span class="n">dataloader</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">                <span class="n">x</span> <span class="o">=</span> <span class="n">feat</span><span class="p">[</span><span class="n">input_nodes</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">                <span class="n">h</span> <span class="o">=</span> <span class="n">layer</span><span class="p">(</span><span class="n">blocks</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">x</span><span class="p">)</span> <span class="c1"># len(blocks) = 1</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="n">l</span> <span class="o">!=</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">layers</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="n">h</span> <span class="o">=</span> <span class="n">F</span><span class="o">.</span><span class="n">relu</span><span class="p">(</span><span class="n">h</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="n">h</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">dropout</span><span class="p">(</span><span class="n">h</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="c1"># by design, our output nodes are contiguous</span>
</span></span><span class="line"><span class="cl">                <span class="n">y</span><span class="p">[</span><span class="n">output_nodes</span><span class="p">[</span><span class="mi">0</span><span class="p">]:</span><span class="n">output_nodes</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">h</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">buffer_device</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">feat</span> <span class="o">=</span> <span class="n">y</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">y</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>定义训练、推理的函数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">evaluate</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">graph</span><span class="p">,</span> <span class="n">dataloader</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">model</span><span class="o">.</span><span class="n">eval</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">ys</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="n">y_hats</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">it</span><span class="p">,</span> <span class="p">(</span><span class="n">input_nodes</span><span class="p">,</span> <span class="n">output_nodes</span><span class="p">,</span> <span class="n">blocks</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">dataloader</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">with</span> <span class="n">torch</span><span class="o">.</span><span class="n">no_grad</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">            <span class="n">x</span> <span class="o">=</span> <span class="n">blocks</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">srcdata</span><span class="p">[</span><span class="s1">&#39;feat&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="n">ys</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">blocks</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">dstdata</span><span class="p">[</span><span class="s1">&#39;label&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">            <span class="n">y_hats</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">model</span><span class="p">(</span><span class="n">blocks</span><span class="p">,</span> <span class="n">x</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">MF</span><span class="o">.</span><span class="n">accuracy</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">cat</span><span class="p">(</span><span class="n">y_hats</span><span class="p">),</span> <span class="n">torch</span><span class="o">.</span><span class="n">cat</span><span class="p">(</span><span class="n">ys</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">layerwise_infer</span><span class="p">(</span><span class="n">device</span><span class="p">,</span> <span class="n">graph</span><span class="p">,</span> <span class="n">nid</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">model</span><span class="o">.</span><span class="n">eval</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="n">torch</span><span class="o">.</span><span class="n">no_grad</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="n">pred</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">inference</span><span class="p">(</span><span class="n">graph</span><span class="p">,</span> <span class="n">device</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">)</span> <span class="c1"># pred in buffer_device</span>
</span></span><span class="line"><span class="cl">        <span class="n">pred</span> <span class="o">=</span> <span class="n">pred</span><span class="p">[</span><span class="n">nid</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">label</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;label&#39;</span><span class="p">][</span><span class="n">nid</span><span class="p">]</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">pred</span><span class="o">.</span><span class="n">device</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">MF</span><span class="o">.</span><span class="n">accuracy</span><span class="p">(</span><span class="n">pred</span><span class="p">,</span> <span class="n">label</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">train</span><span class="p">(</span><span class="n">device</span><span class="p">,</span> <span class="n">g</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">train_idx</span><span class="p">,</span> <span class="n">val_idx</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># create sampler &amp; dataloader</span>
</span></span><span class="line"><span class="cl">    <span class="n">sampler</span> <span class="o">=</span> <span class="n">NeighborSampler</span><span class="p">([</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">],</span>  <span class="c1"># fanout for [layer-0, layer-1, layer-2]</span>
</span></span><span class="line"><span class="cl">                              <span class="n">prefetch_node_feats</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;feat&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">                              <span class="n">prefetch_labels</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;label&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="n">use_uva</span> <span class="o">=</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl">    <span class="n">train_dataloader</span> <span class="o">=</span> <span class="n">DataLoader</span><span class="p">(</span><span class="n">g</span><span class="p">,</span> <span class="n">train_idx</span><span class="p">,</span> <span class="n">sampler</span><span class="p">,</span> <span class="n">device</span><span class="o">=</span><span class="n">device</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                  <span class="n">batch_size</span><span class="o">=</span><span class="mi">1024</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                  <span class="n">drop_last</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span> <span class="n">num_workers</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                  <span class="n">use_uva</span><span class="o">=</span><span class="n">use_uva</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">val_dataloader</span> <span class="o">=</span> <span class="n">DataLoader</span><span class="p">(</span><span class="n">g</span><span class="p">,</span> <span class="n">val_idx</span><span class="p">,</span> <span class="n">sampler</span><span class="p">,</span> <span class="n">device</span><span class="o">=</span><span class="n">device</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                <span class="n">batch_size</span><span class="o">=</span><span class="mi">1024</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                <span class="n">drop_last</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span> <span class="n">num_workers</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                <span class="n">use_uva</span><span class="o">=</span><span class="n">use_uva</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">opt</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">optim</span><span class="o">.</span><span class="n">Adam</span><span class="p">(</span><span class="n">model</span><span class="o">.</span><span class="n">parameters</span><span class="p">(),</span> <span class="n">lr</span><span class="o">=</span><span class="mf">1e-3</span><span class="p">,</span> <span class="n">weight_decay</span><span class="o">=</span><span class="mf">5e-4</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">epoch</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">model</span><span class="o">.</span><span class="n">train</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">total_loss</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">it</span><span class="p">,</span> <span class="p">(</span><span class="n">input_nodes</span><span class="p">,</span> <span class="n">output_nodes</span><span class="p">,</span> <span class="n">blocks</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">train_dataloader</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">x</span> <span class="o">=</span> <span class="n">blocks</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">srcdata</span><span class="p">[</span><span class="s1">&#39;feat&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="n">y</span> <span class="o">=</span> <span class="n">blocks</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">dstdata</span><span class="p">[</span><span class="s1">&#39;label&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="n">y_hat</span> <span class="o">=</span> <span class="n">model</span><span class="p">(</span><span class="n">blocks</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">loss</span> <span class="o">=</span> <span class="n">F</span><span class="o">.</span><span class="n">cross_entropy</span><span class="p">(</span><span class="n">y_hat</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">opt</span><span class="o">.</span><span class="n">zero_grad</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="n">loss</span><span class="o">.</span><span class="n">backward</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="n">opt</span><span class="o">.</span><span class="n">step</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="n">total_loss</span> <span class="o">+=</span> <span class="n">loss</span><span class="o">.</span><span class="n">item</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">acc</span> <span class="o">=</span> <span class="n">evaluate</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">g</span><span class="p">,</span> <span class="n">val_dataloader</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Epoch </span><span class="si">{:05d}</span><span class="s2"> | Loss </span><span class="si">{:.4f}</span><span class="s2"> | Accuracy </span><span class="si">{:.4f}</span><span class="s2"> &#34;</span>
</span></span><span class="line"><span class="cl">              <span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">epoch</span><span class="p">,</span> <span class="n">total_loss</span> <span class="o">/</span> <span class="p">(</span><span class="n">it</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span> <span class="n">acc</span><span class="o">.</span><span class="n">item</span><span class="p">()))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>从 NebulaGraph 中加载图到 DGL，得到的是一个异构图（一类点、三类边）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">nebula_dgl</span> <span class="kn">import</span> <span class="n">NebulaLoader</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">nebula_config</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;graph_hosts&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                <span class="p">(</span><span class="s1">&#39;graphd&#39;</span><span class="p">,</span> <span class="mi">9669</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                <span class="p">(</span><span class="s1">&#39;graphd1&#39;</span><span class="p">,</span> <span class="mi">9669</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                <span class="p">(</span><span class="s1">&#39;graphd2&#39;</span><span class="p">,</span> <span class="mi">9669</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;nebula_user&#34;</span><span class="p">:</span> <span class="s2">&#34;root&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;nebula_password&#34;</span><span class="p">:</span> <span class="s2">&#34;nebula&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;nebulagraph_yelp_dgl_mapper.yaml&#39;</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">     <span class="n">feature_mapper</span> <span class="o">=</span> <span class="n">yaml</span><span class="o">.</span><span class="n">safe_load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">nebula_loader</span> <span class="o">=</span> <span class="n">NebulaLoader</span><span class="p">(</span><span class="n">nebula_config</span><span class="p">,</span> <span class="n">feature_mapper</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">g</span> <span class="o">=</span> <span class="n">nebula_loader</span><span class="o">.</span><span class="n">load</span><span class="p">()</span> <span class="c1"># This will take you some time</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 作为穷人，我们用 CPU</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span> <span class="o">=</span> <span class="n">g</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="s1">&#39;cpu&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">device</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">device</span><span class="p">(</span><span class="s1">&#39;cpu&#39;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>分出训练、验证、测试集，然后转换成同构图。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># Split the graph into train, validation and test sets</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">train_test_split</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># features are g.ndata[&#39;f0&#39;], g.ndata[&#39;f1&#39;], g.ndata[&#39;f2&#39;], ... g.ndata[&#39;f31&#39;]</span>
</span></span><span class="line"><span class="cl"><span class="c1"># label is in g.ndata[&#39;is_fraud&#39;]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># concatenate all features</span>
</span></span><span class="line"><span class="cl"><span class="n">features</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">32</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">features</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;f&#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;feat&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">stack</span><span class="p">(</span><span class="n">features</span><span class="p">,</span> <span class="n">dim</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;label&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">g</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;is_fraud&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="c1"># numpy array as index of range n</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">idx</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">tensor</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">number_of_nodes</span><span class="p">()),</span> <span class="n">device</span><span class="o">=</span><span class="n">device</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">int64</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># features.append(idx)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># concatenate one dim with index of node</span>
</span></span><span class="line"><span class="cl"><span class="c1"># feature_and_idx = torch.stack(features, dim=1)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># split based on value distribution of label: the property &#34;is_fraud&#34;, which is a binary variable.</span>
</span></span><span class="line"><span class="cl"><span class="n">X_train_and_val_idx</span><span class="p">,</span> <span class="n">X_test_idx</span><span class="p">,</span> <span class="n">y_train_and_val</span><span class="p">,</span> <span class="n">y_test</span> <span class="o">=</span> <span class="n">train_test_split</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">idx</span><span class="p">,</span> <span class="n">g</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;is_fraud&#39;</span><span class="p">],</span> <span class="n">test_size</span><span class="o">=</span><span class="mf">0.2</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">,</span> <span class="n">stratify</span><span class="o">=</span><span class="n">g</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;is_fraud&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># split train and val</span>
</span></span><span class="line"><span class="cl"><span class="n">X_train_idx</span><span class="p">,</span> <span class="n">X_val_idx</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">y_val</span> <span class="o">=</span> <span class="n">train_test_split</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">X_train_and_val_idx</span><span class="p">,</span> <span class="n">y_train_and_val</span><span class="p">,</span> <span class="n">test_size</span><span class="o">=</span><span class="mf">0.2</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">,</span> <span class="n">stratify</span><span class="o">=</span><span class="n">y_train_and_val</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># list of index to mask</span>
</span></span><span class="line"><span class="cl"><span class="n">train_mask</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">number_of_nodes</span><span class="p">(),</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">bool</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">train_mask</span><span class="p">[</span><span class="n">X_train_idx</span><span class="p">]</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">val_mask</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">number_of_nodes</span><span class="p">(),</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">bool</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">val_mask</span><span class="p">[</span><span class="n">X_val_idx</span><span class="p">]</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">test_mask</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">number_of_nodes</span><span class="p">(),</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">bool</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">test_mask</span><span class="p">[</span><span class="n">X_test_idx</span><span class="p">]</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;train_mask&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">train_mask</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;val_mask&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">val_mask</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;test_mask&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">test_mask</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># shares_restaurant_in_one_month_with: 1, b&#34;001&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># shares_restaurant_rating_with: 2, b&#34;010&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># shares_user_with: 4, b&#34;100&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># set edata of shares_restaurant_in_one_month_with to n of 1 tensor array</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">edges</span><span class="p">[</span><span class="s1">&#39;shares_restaurant_in_one_month_with&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="s1">&#39;he&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">ones</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">g</span><span class="o">.</span><span class="n">number_of_edges</span><span class="p">(</span><span class="s1">&#39;shares_restaurant_in_one_month_with&#39;</span><span class="p">),</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">float32</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">edges</span><span class="p">[</span><span class="s1">&#39;shares_restaurant_rating_with&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="s1">&#39;he&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">full</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">number_of_edges</span><span class="p">(</span><span class="s1">&#39;shares_restaurant_rating_with&#39;</span><span class="p">),),</span> <span class="mi">2</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">float32</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">edges</span><span class="p">[</span><span class="s1">&#39;shares_user_with&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="s1">&#39;he&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">full</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">number_of_edges</span><span class="p">(</span><span class="s1">&#39;shares_user_with&#39;</span><span class="p">),),</span> <span class="mi">4</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">float32</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># heterogeneous graph to heterogeneous graph, keep ndata and edata</span>
</span></span><span class="line"><span class="cl"><span class="n">hg</span> <span class="o">=</span> <span class="n">dgl</span><span class="o">.</span><span class="n">to_homogeneous</span><span class="p">(</span><span class="n">g</span><span class="p">,</span> <span class="n">edata</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;he&#39;</span><span class="p">],</span> <span class="n">ndata</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;feat&#39;</span><span class="p">,</span> <span class="s1">&#39;label&#39;</span><span class="p">,</span> <span class="s1">&#39;train_mask&#39;</span><span class="p">,</span> <span class="s1">&#39;val_mask&#39;</span><span class="p">,</span> <span class="s1">&#39;test_mask&#39;</span><span class="p">])</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>训练、测试模型！</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># create GraphSAGE model</span>
</span></span><span class="line"><span class="cl"><span class="n">in_size</span> <span class="o">=</span> <span class="n">hg</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;feat&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">out_size</span> <span class="o">=</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl"><span class="n">model</span> <span class="o">=</span> <span class="n">SAGE</span><span class="p">(</span><span class="n">in_size</span><span class="p">,</span> <span class="mi">256</span><span class="p">,</span> <span class="n">out_size</span><span class="p">)</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># model training</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Training...&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">train</span><span class="p">(</span><span class="n">device</span><span class="p">,</span> <span class="n">hg</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">X_train_idx</span><span class="p">,</span> <span class="n">X_val_idx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># test the model</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Testing...&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">acc</span> <span class="o">=</span> <span class="n">layerwise_infer</span><span class="p">(</span><span class="n">device</span><span class="p">,</span> <span class="n">hg</span><span class="p">,</span> <span class="n">X_test_idx</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="mi">4096</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Test Accuracy </span><span class="si">{:.4f}</span><span class="s2">&#34;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">acc</span><span class="o">.</span><span class="n">item</span><span class="p">()))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 运行结果</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Test Accuracy 0.9996</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>有了模型之后，我们可以把它序列化成文件，在需要的时候，只需要把模型的形式和这个序列化文件再加载成一个 pyTorch 就可以用它进行推理了。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># save model</span>
</span></span><span class="line"><span class="cl"><span class="n">torch</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="n">model</span><span class="o">.</span><span class="n">state_dict</span><span class="p">(),</span> <span class="s2">&#34;fraud_d.model&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># load model</span>
</span></span><span class="line"><span class="cl"><span class="n">device</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">device</span><span class="p">(</span><span class="s1">&#39;cpu&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">model</span> <span class="o">=</span> <span class="n">SAGE</span><span class="p">(</span><span class="mi">32</span><span class="p">,</span> <span class="mi">256</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">model</span><span class="o">.</span><span class="n">load_state_dict</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="s2">&#34;fraud_d.model&#34;</span><span class="p">))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>最后，我们如何把模型放到我们的线上欺诈检测系统里呢？</p>
<h5 id="推理接口" class="headerLink">
    <a href="#%e6%8e%a8%e7%90%86%e6%8e%a5%e5%8f%a3" class="header-mark"></a>1.5.1.4 推理接口</h5><p>前边提到过， GraphSAGE 是最简单的支持 Inductive Learning 的模型，而上边我们的训练推理过程实际上还不是这样的我们的测试和训练的图是同一张，虽然标注了训练的点的索引，但实际上是整张图作为输入的。为了做到Inductive Learning 我们只需要把训练和测试分成两个无交集的子图来做训练和最终测试：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># Inductive Learning, our test dataset are new nodes and new edges</span>
</span></span><span class="line"><span class="cl"><span class="n">hg_train</span> <span class="o">=</span> <span class="n">hg</span><span class="o">.</span><span class="n">subgraph</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">cat</span><span class="p">([</span><span class="n">X_train_idx</span><span class="p">,</span> <span class="n">X_val_idx</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># model training</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Training...&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">train</span><span class="p">(</span><span class="n">device</span><span class="p">,</span> <span class="n">hg_train</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">torch</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="n">X_train_idx</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span> <span class="n">torch</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="n">X_train_idx</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">hg_train</span><span class="o">.</span><span class="n">num_nodes</span><span class="p">()))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># test the model</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Testing...&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">hg_test</span> <span class="o">=</span> <span class="n">hg</span><span class="o">.</span><span class="n">subgraph</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">cat</span><span class="p">([</span><span class="n">X_test_idx</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">sg_X_test_idx</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="n">hg_test</span><span class="o">.</span><span class="n">num_nodes</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">acc</span> <span class="o">=</span> <span class="n">layerwise_infer</span><span class="p">(</span><span class="n">device</span><span class="p">,</span> <span class="n">hg_test</span><span class="p">,</span> <span class="n">sg_X_test_idx</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="mi">4096</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Test Accuracy </span><span class="si">{:.4f}</span><span class="s2">&#34;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">acc</span><span class="o">.</span><span class="n">item</span><span class="p">()))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 运行结果</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Test Accuracy 0.9990</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到，我们上边的代码里，测试所用到的图和训练的图是完全不同的两组数据，这使得我们的线上系统可以是之前完全没有遇到的数据，我们只要把对新来的一个交易请求数据写进 NebulaGraph，然后再从这个点获取一个线上系统可以返回的小子图，就可以把它作为模型推理的输入，获得子图的标签了！</p>
<p><strong>新的交易请求</strong>：</p>
<p>还记得我们前边画的线上推理系统的流程图么？</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">      ┌─────────────────────┐                          ┌─────────────────┐      
</span></span><span class="line"><span class="cl">      │                     │                          │                 │
</span></span><span class="line"><span class="cl">─────▶│ Transaction Record  ├──────2. Fraud Risk ─────▶│  Inference API  │◀────┐
</span></span><span class="line"><span class="cl">      │                     │◀────Prediction with ─────┤                 │     │
</span></span><span class="line"><span class="cl">      │                     │        Sub Graph         │                 │     │
</span></span><span class="line"><span class="cl">      └─────────────────────┘                          └─────────────────┘     │
</span></span><span class="line"><span class="cl">           │           ▲                                        │              │
</span></span><span class="line"><span class="cl">           │           │                                        │              │
</span></span><span class="line"><span class="cl">       0. Insert   1. Get New                              3.req: Node         │
</span></span><span class="line"><span class="cl">         Record    Record Sub                            Classification        │
</span></span><span class="line"><span class="cl">           │         Graph                                      │              │
</span></span><span class="line"><span class="cl">           ▼           │                                        │              │
</span></span><span class="line"><span class="cl">┌──────────────────────┴─────────────────┐ ┌────────────────────┘      3.resp: │
</span></span><span class="line"><span class="cl">│┌──────────────────────────────────────┐│ │                          Predicted│
</span></span><span class="line"><span class="cl">││   Graph of Historical Transactions   ││ │                             Risk  │
</span></span><span class="line"><span class="cl">│└──────────────────────────────────────┘│ │                                   │
</span></span><span class="line"><span class="cl">│                   .─.              .   │ │                                   │
</span></span><span class="line"><span class="cl">│                  (   )◀───────────( )  │ │                                   │
</span></span><span class="line"><span class="cl">│                   `─&#39;              &#39;   │ │      ┌──────────────────────┐     │
</span></span><span class="line"><span class="cl">│  .       .─.       ╲             ◁     │ │      │ GNN Model Λ          │     │
</span></span><span class="line"><span class="cl">│ ( )◀────(   )       ╲           ╱      │ │  ┌───┴─┐        ╱ ╲      ┌──┴──┐  │
</span></span><span class="line"><span class="cl">│  &#39;       `─&#39;         ╲       . ╱       │ │  ├─────┤       ╱   ╲     ├─────┤  │
</span></span><span class="line"><span class="cl">│  ╲       ◀            ╲     ( )        │ └─▶├─────┼─────▶▕     ─────├─────┤──┘
</span></span><span class="line"><span class="cl">│   ╲  .  ╱              ◁     &#39;         │    ├─────┤       ╲   ╱     ├─────┤   
</span></span><span class="line"><span class="cl">│    ◀( )╱               .─.         .─. │    └───┬─┘        ╲ ╱      └──┬──┘   
</span></span><span class="line"><span class="cl">│      &#39;                (   )◀──────(   )│        │           V          │      
</span></span><span class="line"><span class="cl">│                        `─&#39;         `─&#39; │        └──────────────────────┘      
</span></span><span class="line"><span class="cl">└────────────────────────────────────────┘        
</span></span></code></pre></td></tr></table>
</div>
</div><p>现在，我们假设这个新的交易请求已经发起了，这条交易记录已经被更新在图谱里了，咱们随便取一个点作为这样的请求吧</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">n</span><span class="p">:</span><span class="o">`</span><span class="n">review</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="k">RETURN</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">1</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl
</span></span><span class="line"><span class="cl">| n|
</span></span><span class="line"><span class="cl
</span></span><span class="line"><span class="cl">| (2048 :review{f0: 0.0, f1: 0.08034700155258179, f10: 0.3952670097351074, f11: 0.18671999871730804, f12: 0.2836120128631592, f13: 0.2843089997768402, f14: 0.38148200511932373, f15: 0.3816460072994232, f16: 0.9999740123748779, f17: 0.6430919766426086, f18: 0.9999740123748779, f19: 0.5051100254058838, f2: 0.12382200360298157, f20: 0.4940490126609802, f21: 0.7766339778900146, f22: 0.7705119848251343, f23: 0.9480599761009216, f24: 0.4032529890537262, f25: 0.12437800318002701, f26: 0.3184080123901367, f27: 0.5223879814147949, f28: 0.4278610050678253, f29: 0.343284010887146, f3: 0.42868199944496155, f30: 0.37313398718833923, f31: 0.328357994556427, f4: 0.9999849796295166, f5: 0.9999849796295166, f6: 0.9999849796295166, f7: 0.4850809872150421, f8: 0.454602986574173, f9: 0.8863419890403748, is_fraud: 0}) |
</span></span><span class="line"><span class="cl
</span></span></code></pre></td></tr></table>
</div>
</div><p>好，它是 2048 这个点。它的下一步是 <code>1. Get New Record Subgraph</code> 我们来获取它的子图：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-SQL" data-lang="SQL"><span class="line"><span class="cl"><span class="k">GET</span><span class="w"> </span><span class="n">SUBGRAPH</span><span class="w"> </span><span class="k">WITH</span><span class="w"> </span><span class="n">PROP</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="mi">2048</span><span class="w"> </span><span class="n">YIELD</span><span class="w"> </span><span class="n">VERTICES</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">nodes</span><span class="p">,</span><span class="w"> </span><span class="n">EDGES</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">relationships</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到返回的结果其实还是很多的，不过对于 NebulaGraph 来说，这个子图结果返回是在 10 ms 左右获取的，这里我就不贴出来了，如果我们在 NebulaGraph Studio 或者 Explorer 中可以把结果渲染出来（可视化展示的 Query 可以去掉 <code>WITH PROP</code> ，可以给浏览器省点内存），结果就更容易让人脑理解了：</p>
<p><a class="lightgallery" href="/fraud-detection-with-nebulagraph/subgraph_console_view.webp" title="/fraud-detection-with-nebulagraph/subgraph_console_view.webp" data-thumbnail="/fraud-detection-with-nebulagraph/subgraph_console_view.webp">
        
    </a></p>
<p><a class="lightgallery" href="/fraud-detection-with-nebulagraph/subgraph_viz.webp" title="/fraud-detection-with-nebulagraph/subgraph_viz.webp" data-thumbnail="/fraud-detection-with-nebulagraph/subgraph_viz.webp">
        
    </a></p>
<p>现在我们就来实现这一步的代码吧，它的输入是点的 id：<code>vertex_id</code>。输出是一个 <code>dgl_graph</code>，用来传给推理接口。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># get SUBGRAPH of one node</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">json</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">torch</span> <span class="kn">import</span> <span class="n">tensor</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">dgl</span> <span class="kn">import</span> <span class="n">DGLHeteroGraph</span><span class="p">,</span> <span class="n">heterograph</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">nebula3.gclient.net</span> <span class="kn">import</span> <span class="n">ConnectionPool</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">nebula3.Config</span> <span class="kn">import</span> <span class="n">Config</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">config</span> <span class="o">=</span> <span class="n">Config</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">config</span><span class="o">.</span><span class="n">max_connection_pool_size</span> <span class="o">=</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl"><span class="n">connection_pool</span> <span class="o">=</span> <span class="n">ConnectionPool</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">connection_pool</span><span class="o">.</span><span class="n">init</span><span class="p">([(</span><span class="s1">&#39;graphd&#39;</span><span class="p">,</span> <span class="mi">9669</span><span class="p">)],</span> <span class="n">config</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">vertex_id</span> <span class="o">=</span> <span class="mi">2048</span>
</span></span><span class="line"><span class="cl"><span class="n">client</span> <span class="o">=</span> <span class="n">connection_pool</span><span class="o">.</span><span class="n">get_session</span><span class="p">(</span><span class="s1">&#39;root&#39;</span><span class="p">,</span> <span class="s1">&#39;nebula&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">execute_json</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;USE yelp;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="sa">f</span><span class="s2">&#34;GET SUBGRAPH WITH PROP 2 STEPS FROM </span><span class="si">{</span><span class="n">vertex_id</span><span class="si">}</span><span class="s2"> YIELD VERTICES AS nodes, EDGES AS relationships;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">r</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">data</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;results&#39;</span><span class="p">,</span> <span class="p">[{}])[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这里我用到了 Nebula-Python 这个 NebulaGraph 的 Python SDK/Client，通过 <code>execute_json</code> 执行获得了这个交易的子图。下一步，咱们需要把它构造成一个 <code>dgl_graph</code>：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># create node and nodedata</span>
</span></span><span class="line"><span class="cl"><span class="n">node_id_map</span> <span class="o">=</span> <span class="p">{}</span> <span class="c1"># key: vertex id in NebulaGraph, value: node id in dgl_graph</span>
</span></span><span class="line"><span class="cl"><span class="n">node_idx</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">features</span> <span class="o">=</span> <span class="p">[[]</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">32</span><span class="p">)]</span> <span class="o">+</span> <span class="p">[[]]</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">index</span><span class="p">,</span> <span class="n">node</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s1">&#39;meta&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">]):</span>
</span></span><span class="line"><span class="cl">        <span class="n">nodeid</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s1">&#39;meta&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="n">index</span><span class="p">][</span><span class="s1">&#39;id&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">nodeid</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">node_id_map</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">node_id_map</span><span class="p">[</span><span class="n">nodeid</span><span class="p">]</span> <span class="o">=</span> <span class="n">node_idx</span>
</span></span><span class="line"><span class="cl">            <span class="n">node_idx</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">32</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">                <span class="n">features</span><span class="p">[</span><span class="n">f</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s1">&#39;row&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="n">index</span><span class="p">][</span><span class="sa">f</span><span class="s2">&#34;review.f</span><span class="si">{</span><span class="n">f</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">            <span class="n">features</span><span class="p">[</span><span class="mi">32</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s1">&#39;row&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="n">index</span><span class="p">][</span><span class="s1">&#39;review.is_fraud&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">- R-U-R：两个评价由同一个用户发出 shares_user_with
</span></span></span><span class="line"><span class="cl"><span class="s2">- R-S-R：两个评价是同餐厅同评分（评分可以是1到5） shares_restaurant_rating_with
</span></span></span><span class="line"><span class="cl"><span class="s2">- R-T-R：两个评价是同餐厅同提交月份 shares_restaurant_in_one_month_with
</span></span></span><span class="line"><span class="cl"><span class="s2">&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">rur_start</span><span class="p">,</span> <span class="n">rur_end</span><span class="p">,</span> <span class="n">rsr_start</span><span class="p">,</span> <span class="n">rsr_end</span><span class="p">,</span> <span class="n">rtr_start</span><span class="p">,</span> <span class="n">rtr_end</span> <span class="o">=</span> <span class="p">[],</span> <span class="p">[],</span> <span class="p">[],</span> <span class="p">[],</span> <span class="p">[],</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">edge</span> <span class="ow">in</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s1">&#39;meta&#39;</span><span class="p">][</span><span class="mi">1</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">        <span class="n">edge</span> <span class="o">=</span> <span class="n">edge</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">edge</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;shares_user_with&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">rur_start</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node_id_map</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="s1">&#39;src&#39;</span><span class="p">]])</span>
</span></span><span class="line"><span class="cl">            <span class="n">rur_end</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node_id_map</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="s1">&#39;dst&#39;</span><span class="p">]])</span>
</span></span><span class="line"><span class="cl">        <span class="k">elif</span> <span class="n">edge</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;shares_restaurant_rating_with&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">rsr_start</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node_id_map</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="s1">&#39;src&#39;</span><span class="p">]])</span>
</span></span><span class="line"><span class="cl">            <span class="n">rsr_end</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node_id_map</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="s1">&#39;dst&#39;</span><span class="p">]])</span>
</span></span><span class="line"><span class="cl">        <span class="k">elif</span> <span class="n">edge</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;shares_restaurant_in_one_month_with&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">rtr_start</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node_id_map</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="s1">&#39;src&#39;</span><span class="p">]])</span>
</span></span><span class="line"><span class="cl">            <span class="n">rtr_end</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node_id_map</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="s1">&#39;dst&#39;</span><span class="p">]])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">data_dict</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">rur_start</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">data_dict</span><span class="p">[(</span><span class="s1">&#39;review&#39;</span><span class="p">,</span> <span class="s1">&#39;shares_user_with&#39;</span><span class="p">,</span> <span class="s1">&#39;review&#39;</span><span class="p">)]</span> <span class="o">=</span> <span class="n">tensor</span><span class="p">(</span><span class="n">rur_start</span><span class="p">),</span> <span class="n">tensor</span><span class="p">(</span><span class="n">rur_end</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">rsr_start</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">data_dict</span><span class="p">[(</span><span class="s1">&#39;review&#39;</span><span class="p">,</span> <span class="s1">&#39;shares_restaurant_rating_with&#39;</span><span class="p">,</span> <span class="s1">&#39;review&#39;</span><span class="p">)]</span> <span class="o">=</span> <span class="n">tensor</span><span class="p">(</span><span class="n">rsr_start</span><span class="p">),</span> <span class="n">tensor</span><span class="p">(</span><span class="n">rsr_end</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">rtr_start</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">data_dict</span><span class="p">[(</span><span class="s1">&#39;review&#39;</span><span class="p">,</span> <span class="s1">&#39;shares_restaurant_in_one_month_with&#39;</span><span class="p">,</span> <span class="s1">&#39;review&#39;</span><span class="p">)]</span> <span class="o">=</span> <span class="n">tensor</span><span class="p">(</span><span class="n">rtr_start</span><span class="p">),</span> <span class="n">tensor</span><span class="p">(</span><span class="n">rtr_end</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># construct a dgl_graph</span>
</span></span><span class="line"><span class="cl"><span class="n">dgl_graph</span><span class="p">:</span> <span class="n">DGLHeteroGraph</span> <span class="o">=</span> <span class="n">heterograph</span><span class="p">(</span><span class="n">data_dict</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>实际上我就是按照 DGL 文档：https://docs.dgl.ai/en/0.9.x/generated/dgl.heterograph.html，中的方式去构造 <code>data_dict</code>，然后用 <code>heterograph()</code> 就把结果转换为想要的 dgl_graph 了，其中 <code>node_id_map</code> 是 NebulaGraph 之中 Vertex_ID 到这个对象中 node_id 的字典。</p>
<p>最后，我们再把 node feature 也加载进去。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># load node features to dgl_graph</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">32</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">dgl_graph</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="sa">f</span><span class="s2">&#34;f</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">tensor</span><span class="p">(</span><span class="n">features</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="n">dgl_graph</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;label&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">tensor</span><span class="p">(</span><span class="n">features</span><span class="p">[</span><span class="mi">32</span><span class="p">])</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在开始推理之前，我们还需要把它转换成同构图，和前边完全一样：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">torch</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># to homogeneous graph</span>
</span></span><span class="line"><span class="cl"><span class="n">features</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">32</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">features</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">dgl_graph</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="sa">f</span><span class="s2">&#34;f</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">dgl_graph</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;feat&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">stack</span><span class="p">(</span><span class="n">features</span><span class="p">,</span> <span class="n">dim</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">dgl_graph</span><span class="o">.</span><span class="n">edges</span><span class="p">[</span><span class="s1">&#39;shares_restaurant_in_one_month_with&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="s1">&#39;he&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">ones</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">dgl_graph</span><span class="o">.</span><span class="n">number_of_edges</span><span class="p">(</span><span class="s1">&#39;shares_restaurant_in_one_month_with&#39;</span><span class="p">),</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">float32</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">dgl_graph</span><span class="o">.</span><span class="n">edges</span><span class="p">[</span><span class="s1">&#39;shares_restaurant_rating_with&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="s1">&#39;he&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">full</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="n">dgl_graph</span><span class="o">.</span><span class="n">number_of_edges</span><span class="p">(</span><span class="s1">&#39;shares_restaurant_rating_with&#39;</span><span class="p">),),</span> <span class="mi">2</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">float32</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">dgl_graph</span><span class="o">.</span><span class="n">edges</span><span class="p">[</span><span class="s1">&#39;shares_user_with&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="s1">&#39;he&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">full</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="n">dgl_graph</span><span class="o">.</span><span class="n">number_of_edges</span><span class="p">(</span><span class="s1">&#39;shares_user_with&#39;</span><span class="p">),),</span> <span class="mi">4</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">float32</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># heterogeneous graph to heterogeneous graph, keep ndata and edata</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">dgl</span>
</span></span><span class="line"><span class="cl"><span class="n">hg</span> <span class="o">=</span> <span class="n">dgl</span><span class="o">.</span><span class="n">to_homogeneous</span><span class="p">(</span><span class="n">dgl_graph</span><span class="p">,</span> <span class="n">edata</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;he&#39;</span><span class="p">],</span> <span class="n">ndata</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;feat&#39;</span><span class="p">,</span> <span class="s1">&#39;label&#39;</span><span class="p">])</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>最后，我们的推理接口就是：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">do_inference</span><span class="p">(</span><span class="n">device</span><span class="p">,</span> <span class="n">graph</span><span class="p">,</span> <span class="n">node_idx</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">model</span><span class="o">.</span><span class="n">eval</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="n">torch</span><span class="o">.</span><span class="n">no_grad</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="n">pred</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">inference</span><span class="p">(</span><span class="n">graph</span><span class="p">,</span> <span class="n">device</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">)</span> <span class="c1"># pred in buffer_device</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">pred</span><span class="p">[</span><span class="n">node_idx</span><span class="p">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>我们可以调用一个一下试试推理我们这个新的点：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">node_idx</span> <span class="o">=</span> <span class="n">node_id_map</span><span class="p">[</span><span class="n">vertex_id</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">batch_size</span> <span class="o">=</span> <span class="mi">4096</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">result</span> <span class="o">=</span> <span class="n">do_inference</span><span class="p">(</span><span class="n">device</span><span class="p">,</span> <span class="n">hg</span><span class="p">,</span> <span class="n">node_idx</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>当然，我们也能在这个小子图上计算他的正确率：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">test_inference</span><span class="p">(</span><span class="n">device</span><span class="p">,</span> <span class="n">graph</span><span class="p">,</span> <span class="n">nid</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">model</span><span class="o">.</span><span class="n">eval</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="n">torch</span><span class="o">.</span><span class="n">no_grad</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="n">pred</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">inference</span><span class="p">(</span><span class="n">graph</span><span class="p">,</span> <span class="n">device</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">)</span> <span class="c1"># pred in buffer_device</span>
</span></span><span class="line"><span class="cl">        <span class="n">pred</span> <span class="o">=</span> <span class="n">pred</span><span class="p">[</span><span class="n">nid</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">label</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;label&#39;</span><span class="p">][</span><span class="n">nid</span><span class="p">]</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">pred</span><span class="o">.</span><span class="n">device</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">MF</span><span class="o">.</span><span class="n">accuracy</span><span class="p">(</span><span class="n">pred</span><span class="p">,</span> <span class="n">label</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">node_idx</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">tensor</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">node_id_map</span><span class="o">.</span><span class="n">values</span><span class="p">()))</span>
</span></span><span class="line"><span class="cl"><span class="n">acc</span> <span class="o">=</span> <span class="n">test_inference</span><span class="p">(</span><span class="n">device</span><span class="p">,</span> <span class="n">hg</span><span class="p">,</span> <span class="n">node_idx</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="mi">4096</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Test Accuracy </span><span class="si">{:.4f}</span><span class="s2">&#34;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">acc</span><span class="o">.</span><span class="n">item</span><span class="p">()))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>输出结果：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">307</span><span class="p">]:</span> <span class="k">def</span> <span class="nf">test_inference</span><span class="p">(</span><span class="n">device</span><span class="p">,</span> <span class="n">graph</span><span class="p">,</span> <span class="n">nid</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">     <span class="o">...</span><span class="p">:</span>     <span class="n">model</span><span class="o">.</span><span class="n">eval</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">     <span class="o">...</span><span class="p">:</span>     <span class="k">with</span> <span class="n">torch</span><span class="o">.</span><span class="n">no_grad</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">     <span class="o">...</span><span class="p">:</span>         <span class="n">pred</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">inference</span><span class="p">(</span><span class="n">graph</span><span class="p">,</span> <span class="n">device</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">)</span> <span class="c1"># pred in buffer</span>
</span></span><span class="line"><span class="cl">     <span class="o">...</span><span class="p">:</span> <span class="n">_device</span>
</span></span><span class="line"><span class="cl">     <span class="o">...</span><span class="p">:</span>         <span class="n">pred</span> <span class="o">=</span> <span class="n">pred</span><span class="p">[</span><span class="n">nid</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">     <span class="o">...</span><span class="p">:</span>         <span class="n">label</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;label&#39;</span><span class="p">][</span><span class="n">nid</span><span class="p">]</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">pred</span><span class="o">.</span><span class="n">device</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">     <span class="o">...</span><span class="p">:</span>         <span class="k">return</span> <span class="n">MF</span><span class="o">.</span><span class="n">accuracy</span><span class="p">(</span><span class="n">pred</span><span class="p">,</span> <span class="n">label</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">     <span class="o">...</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">     <span class="o">...</span><span class="p">:</span> <span class="n">node_idx</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">tensor</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">node_id_map</span><span class="o">.</span><span class="n">values</span><span class="p">()))</span>
</span></span><span class="line"><span class="cl">     <span class="o">...</span><span class="p">:</span> <span class="n">acc</span> <span class="o">=</span> <span class="n">test_inference</span><span class="p">(</span><span class="n">device</span><span class="p">,</span> <span class="n">hg</span><span class="p">,</span> <span class="n">node_idx</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="mi">4096</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">     <span class="o">...</span><span class="p">:</span> <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Test Accuracy </span><span class="si">{:.4f}</span><span class="s2">&#34;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">acc</span><span class="o">.</span><span class="n">item</span><span class="p">()))</span>
</span></span><span class="line"><span class="cl">     <span class="o">...</span><span class="p">:</span>
</span></span><span class="line"><span class="cl"><span class="mi">100</span><span class="o">%|</span><span class="err">████████████████████████████████████████████████</span><span class="o">|</span> <span class="mi">1</span><span class="o">/</span><span class="mi">1</span> <span class="p">[</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="o">&lt;</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">,</span> <span class="mf">130.31</span><span class="n">it</span><span class="o">/</span><span class="n">s</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="mi">100</span><span class="o">%|</span><span class="err">████████████████████████████████████████████████</span><span class="o">|</span> <span class="mi">1</span><span class="o">/</span><span class="mi">1</span> <span class="p">[</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="o">&lt;</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">,</span> <span class="mf">152.29</span><span class="n">it</span><span class="o">/</span><span class="n">s</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="mi">100</span><span class="o">%|</span><span class="err">████████████████████████████████████████████████</span><span class="o">|</span> <span class="mi">1</span><span class="o">/</span><span class="mi">1</span> <span class="p">[</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="o">&lt;</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">,</span> <span class="mf">173.55</span><span class="n">it</span><span class="o">/</span><span class="n">s</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">Test</span> <span class="n">Accuracy</span> <span class="mf">0.9688</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这个示例项目的代码在：<a href="https://github.com/wey-gu/NebulaGraph-Fraud-Detection-GNN" target="_blank" rel="noopener noreferrer">github.com/wey-gu/NebulaGraph-Fraud-Detection-GNN</a> ，如有问题欢迎留言、ISSUE。</p>
<h3 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>1.6 总结</h3><p>总结起来，欺诈检测的方法有：</p>
<ul>
<li>在一个交易历史、风控的图谱上，通过图模式查询直接获得风险提示</li>
<li>定期利用图算法扩充风险标注，写回图库</li>
<li>定期计算图谱中的图特征，和其他特征一起用传统机器学习方法离线预测风险</li>
<li>将图谱中的属性处理成为点、边特征，用图神经网络方法离线预测风险，部分可以 Inductive Learning 的方法结合图库可以实现在线风险预测</li>
</ul>
<blockquote>
<p>Feature Image credit goes to <a href="https://unsplash.com/photos/BW0vK-FA3eg" target="_blank" rel="noopener noreferrer">https://unsplash.com/photos/BW0vK-FA3eg</a></p>
</blockquote>]]></description>
</item><item>
    <title>基于 NebulaGraph 图数据库的 ID Resolution 方法与代码示例</title>
    <link>https://siwei.io/identity-resolution/</link>
    <pubDate>Sun, 14 Aug 2022 18:18:16 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/identity-resolution/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/identity-resolution/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>本文是一个基于 NebulaGraph 上的图算法、图数据库、图神经网络的 ID-Mapping 方法综述，除了基本方法思想的介绍之外，我还给大家弄了可以跑的 Playground。</p>
</blockquote>
<blockquote>
<p>本文还在撰写中，TBD 的章节还请见谅。</p>
</blockquote>
<!--

[TOC]

-->
<h2 id="基于图数据库的用户-id-识别方法" class="headerLink">
    <a href="#%e5%9f%ba%e4%ba%8e%e5%9b%be%e6%95%b0%e6%8d%ae%e5%ba%93%e7%9a%84%e7%94%a8%e6%88%b7-id-%e8%af%86%e5%88%ab%e6%96%b9%e6%b3%95" class="header-mark"></a>1 基于图数据库的用户 ID 识别方法</h2><p>用户 ID 识别，是一个很常见的图技术应用场景，在不同的语境下它可能还被叫做 Entity Correlation（实体关联）、Entity Linking（实体链接）、ID Mapping（身份映射）等等。ID 识别解决的问题是找出相同的用户在同一个系统或者不同系统中的不同账号。</p>
<p>由于 ID 识别天然地是一个关联关系问题，也是一个典型的图、图数据库应用场景。</p>
<h3 id="建立图谱" class="headerLink">
    <a href="#%e5%bb%ba%e7%ab%8b%e5%9b%be%e8%b0%b1" class="header-mark"></a>1.1 建立图谱</h3><h4 id="图建模" class="headerLink">
    <a href="#%e5%9b%be%e5%bb%ba%e6%a8%a1" class="header-mark"></a>1.1.1 图建模</h4><p>我们从一个最简单、直接的图谱开始，如下边的图结构示意显示，我们定义了点：</p>
<ul>
<li>user
<ul>
<li>Prop: [name, email, birthday, address, phone_num]</li>
</ul>
</li>
<li>phone</li>
<li>email</li>
<li>device</li>
<li>ip</li>
<li>address</li>
</ul>
<p>在他们之间有很自然的边：</p>
<ul>
<li>used_device
<ul>
<li>Prop: time</li>
</ul>
</li>
<li>logged_in_from
<ul>
<li>Prop: time</li>
</ul>
</li>
<li>has_phone</li>
<li>has_address</li>
<li>has_email</li>
</ul>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/wey-gu/identity-correlation-datagen/main/images/schema.svg?refresh=true" title="schema digram" data-thumbnail="https://raw.githubusercontent.com/wey-gu/identity-correlation-datagen/main/images/schema.svg?refresh=true">
        
    </a></p>
<h4 id="数据" class="headerLink">
    <a href="#%e6%95%b0%e6%8d%ae" class="header-mark"></a>1.1.2 数据</h4><p>这份数据是开源的，地址在 <a href="https://github.com/wey-gu/identity-correlation-datagen" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/identity-correlation-datagen</a></p>
<h4 id="写入-nebulagraph" class="headerLink">
    <a href="#%e5%86%99%e5%85%a5-nebulagraph" class="header-mark"></a>1.1.3 写入 NebulaGraph</h4><blockquote>
<p>利用 Nebula Up，一行部署 NebulaGraph</p>
<p>地址：https://github.com/wey-gu/nebula-up/</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -fsSL nebula-up.siwei.io/install.sh <span class="p">|</span> bash
</span></span></code></pre></td></tr></table>
</div>
</div></blockquote>
<p>图建模的 Schema 对应的 NebulaGraph DDL 是：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="o">#</span><span class="w"> </span><span class="err">创建一个叫做</span><span class="w"> </span><span class="n">entity_resolution</span><span class="w"> </span><span class="err">的图空间</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">SPACE</span><span class="w"> </span><span class="n">entity_resolution</span><span class="w"> </span><span class="p">(</span><span class="n">vid_type</span><span class="o">=</span><span class="n">FIXED_STRING</span><span class="p">(</span><span class="mi">30</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">USE</span><span class="w"> </span><span class="n">entity_resolution</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">#</span><span class="w"> </span><span class="err">创建点的类型</span><span class="w"> </span><span class="n">TAG</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="w"> </span><span class="p">(</span><span class="o">`</span><span class="n">name</span><span class="o">`</span><span class="w"> </span><span class="n">string</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w"> </span><span class="o">`</span><span class="n">email</span><span class="o">`</span><span class="w"> </span><span class="n">string</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w"> </span><span class="o">`</span><span class="n">phone_num</span><span class="o">`</span><span class="w"> </span><span class="n">string</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w"> </span><span class="o">`</span><span class="n">birthday</span><span class="o">`</span><span class="w"> </span><span class="nb">date</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w"> </span><span class="o">`</span><span class="n">address</span><span class="o">`</span><span class="w"> </span><span class="n">string</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="o">`</span><span class="n">address</span><span class="o">`</span><span class="w"> </span><span class="p">(</span><span class="o">`</span><span class="n">address</span><span class="o">`</span><span class="w"> </span><span class="n">string</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="o">`</span><span class="n">device</span><span class="o">`</span><span class="w"> </span><span class="p">(</span><span class="o">`</span><span class="n">uuid</span><span class="o">`</span><span class="w"> </span><span class="n">string</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="o">`</span><span class="n">email</span><span class="o">`</span><span class="w"> </span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="o">`</span><span class="n">ip</span><span class="o">`</span><span class="w"> </span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="o">`</span><span class="n">phone</span><span class="o">`</span><span class="w"> </span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">#</span><span class="w"> </span><span class="err">创建边的类型</span><span class="w"> </span><span class="n">Edge</span><span class="w"> </span><span class="k">Type</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="o">`</span><span class="n">used_device</span><span class="o">`</span><span class="w"> </span><span class="p">(</span><span class="o">`</span><span class="n">time</span><span class="o">`</span><span class="w"> </span><span class="k">timestamp</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="o">`</span><span class="n">logged_in_from</span><span class="o">`</span><span class="w"> </span><span class="p">(</span><span class="o">`</span><span class="n">time</span><span class="o">`</span><span class="w"> </span><span class="k">timestamp</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="o">`</span><span class="n">has_phone</span><span class="o">`</span><span class="w"> </span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="o">`</span><span class="n">has_address</span><span class="o">`</span><span class="w"> </span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="o">`</span><span class="n">has_email</span><span class="o">`</span><span class="w"> </span><span class="p">();</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>对于写入数据的 DML，这里只给出 <code>user</code> ，<code>email</code> 类型点、<code>has_email</code> 类型边的例子</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">INSERT</span><span class="w"> </span><span class="n">VERTEX</span><span class="w"> </span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="w"> </span><span class="p">(</span><span class="o">`</span><span class="n">email</span><span class="o">`</span><span class="p">,</span><span class="w"> </span><span class="o">`</span><span class="n">name</span><span class="o">`</span><span class="p">,</span><span class="w"> </span><span class="o">`</span><span class="n">birthday</span><span class="o">`</span><span class="p">,</span><span class="w"> </span><span class="o">`</span><span class="n">address</span><span class="o">`</span><span class="p">,</span><span class="w"> </span><span class="o">`</span><span class="n">phone_num</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="k">VALUES</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_1&#34;</span><span class="p">:(</span><span class="s2">&#34;heathermoore@johnson.com&#34;</span><span class="p">,</span><span class="s2">&#34;Miranda Miller&#34;</span><span class="p">,</span><span class="nb">date</span><span class="p">(</span><span class="s2">&#34;1957-08-27&#34;</span><span class="p">),</span><span class="s2">&#34;Brittany Forge Apt. 718 East Eric  WV 97881&#34;</span><span class="p">,</span><span class="s2">&#34;+1-652-450-5443x00562&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_2&#34;</span><span class="p">:(</span><span class="s2">&#34;holly@welch.org&#34;</span><span class="p">,</span><span class="s2">&#34;Holly Pollard&#34;</span><span class="p">,</span><span class="nb">date</span><span class="p">(</span><span class="s2">&#34;1990-10-19&#34;</span><span class="p">),</span><span class="s2">&#34;1 Amanda Freeway Lisaland  NJ 94933&#34;</span><span class="p">,</span><span class="s2">&#34;600-192-2985x041&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_3&#34;</span><span class="p">:(</span><span class="s2">&#34;julia.h.24@gmail.com&#34;</span><span class="p">,</span><span class="s2">&#34;Julia Hall&#34;</span><span class="p">,</span><span class="nb">date</span><span class="p">(</span><span class="s2">&#34;1927-08-24&#34;</span><span class="p">),</span><span class="s2">&#34;Rodriguez Track East Connorfort  NC 63144&#34;</span><span class="p">,</span><span class="s2">&#34;1248361783&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_4&#34;</span><span class="p">:(</span><span class="s2">&#34;franklin.b@gibson.biz&#34;</span><span class="p">,</span><span class="s2">&#34;Franklin Barnett&#34;</span><span class="p">,</span><span class="nb">date</span><span class="p">(</span><span class="s2">&#34;2020-03-01&#34;</span><span class="p">),</span><span class="s2">&#34;Richard Curve Kingstad  AZ 05660&#34;</span><span class="p">,</span><span class="s2">&#34;(224)497-9312&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_5&#34;</span><span class="p">:(</span><span class="s2">&#34;4kelly@yahoo.com&#34;</span><span class="p">,</span><span class="s2">&#34;April Kelly&#34;</span><span class="p">,</span><span class="nb">date</span><span class="p">(</span><span class="s2">&#34;1967-12-01&#34;</span><span class="p">),</span><span class="s2">&#34;Schmidt Key Lake Charles  AL 36174&#34;</span><span class="p">,</span><span class="s2">&#34;410.138.1816x98702&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_6&#34;</span><span class="p">:(</span><span class="s2">&#34;steven.web@johnson.com&#34;</span><span class="p">,</span><span class="s2">&#34;Steven Webb&#34;</span><span class="p">,</span><span class="nb">date</span><span class="p">(</span><span class="s2">&#34;1955-04-24&#34;</span><span class="p">),</span><span class="s2">&#34;5 Joanna Key Suite 704 Frankshire  OK 03035&#34;</span><span class="p">,</span><span class="s2">&#34;3666519376&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_7&#34;</span><span class="p">:(</span><span class="s2">&#34;Jessica_Torres@morris.com&#34;</span><span class="p">,</span><span class="s2">&#34;Jessica Torres&#34;</span><span class="p">,</span><span class="nb">date</span><span class="p">(</span><span class="s2">&#34;1958-09-03&#34;</span><span class="p">),</span><span class="s2">&#34;1 Payne Circle Mitchellfort  LA 73053&#34;</span><span class="p">,</span><span class="s2">&#34;535-357-3112x4903&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_8&#34;</span><span class="p">:(</span><span class="s2">&#34;brettglenn@gmail.com&#34;</span><span class="p">,</span><span class="s2">&#34;Brett Glenn&#34;</span><span class="p">,</span><span class="nb">date</span><span class="p">(</span><span class="s2">&#34;1992-09-03&#34;</span><span class="p">),</span><span class="s2">&#34;Weber Unions Eddieland  MT 64619&#34;</span><span class="p">,</span><span class="s2">&#34;660.391.3730&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_9&#34;</span><span class="p">:(</span><span class="s2">&#34;veronica.j@yahoo.com&#34;</span><span class="p">,</span><span class="s2">&#34;Veronica Jordan&#34;</span><span class="p">,</span><span class="nb">date</span><span class="p">(</span><span class="s2">&#34;1947-06-08&#34;</span><span class="p">),</span><span class="s2">&#34;2 Klein Mission New Annetteton  HI 05775&#34;</span><span class="p">,</span><span class="s2">&#34;810-252-6218&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_10&#34;</span><span class="p">:(</span><span class="s2">&#34;steven@phelps-craig.info&#34;</span><span class="p">,</span><span class="s2">&#34;Steven Brooks&#34;</span><span class="p">,</span><span class="nb">date</span><span class="p">(</span><span class="s2">&#34;1954-06-14&#34;</span><span class="p">),</span><span class="s2">&#34;1 Vanessa Stravenue Suite 184 Baileyville  NY 46381&#34;</span><span class="p">,</span><span class="s2">&#34;+1-665-328-8103x3448&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_11&#34;</span><span class="p">:(</span><span class="s2">&#34;ReginaldTheMan@hotmail.com&#34;</span><span class="p">,</span><span class="s2">&#34;Reginald Mccullough&#34;</span><span class="p">,</span><span class="nb">date</span><span class="p">(</span><span class="s2">&#34;1915-04-12&#34;</span><span class="p">),</span><span class="s2">&#34;John Garden Port John  LA 54602&#34;</span><span class="p">,</span><span class="s2">&#34;030.088.4523x94511&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_12&#34;</span><span class="p">:(</span><span class="s2">&#34;Jennifer.f@carroll-acosta.com&#34;</span><span class="p">,</span><span class="s2">&#34;Jennifer Foster&#34;</span><span class="p">,</span><span class="nb">date</span><span class="p">(</span><span class="s2">&#34;1988-04-30&#34;</span><span class="p">),</span><span class="s2">&#34;11 Webb Groves Tiffanyside  MN 14566&#34;</span><span class="p">,</span><span class="s2">&#34;(489)306-8558x98227&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_13&#34;</span><span class="p">:(</span><span class="s2">&#34;Philip66@yahoo.com&#34;</span><span class="p">,</span><span class="s2">&#34;Philip Garcia&#34;</span><span class="p">,</span><span class="nb">date</span><span class="p">(</span><span class="s2">&#34;1955-12-01&#34;</span><span class="p">),</span><span class="s2">&#34;70 Robinson Locks Suite 113 East Veronica  ND 87845&#34;</span><span class="p">,</span><span class="s2">&#34;490-088-7610x9437&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_14&#34;</span><span class="p">:(</span><span class="s2">&#34;Ann@hernandez.com&#34;</span><span class="p">,</span><span class="s2">&#34;Ann Williams&#34;</span><span class="p">,</span><span class="nb">date</span><span class="p">(</span><span class="s2">&#34;1947-05-28&#34;</span><span class="p">),</span><span class="s2">&#34;24 Mcknight Port Apt. 028 Sarahborough  MD 38195&#34;</span><span class="p">,</span><span class="s2">&#34;868.057.4056x4814&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_15&#34;</span><span class="p">:(</span><span class="s2">&#34;Jessica@turner.com&#34;</span><span class="p">,</span><span class="s2">&#34;Jessica Stewart&#34;</span><span class="p">,</span><span class="nb">date</span><span class="p">(</span><span class="s2">&#34;1951-11-28&#34;</span><span class="p">),</span><span class="s2">&#34;0337 Mason Corner Apt. 900 Toddmouth  FL 61464&#34;</span><span class="p">,</span><span class="s2">&#34;(335)408-3835x883&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_16&#34;</span><span class="p">:(</span><span class="s2">&#34;Sandra311@hotmail.com&#34;</span><span class="p">,</span><span class="s2">&#34;Sandra Dougherty&#34;</span><span class="p">,</span><span class="nb">date</span><span class="p">(</span><span class="s2">&#34;1908-06-03&#34;</span><span class="p">),</span><span class="s2">&#34;7 Davis Station Apt. 691 Pittmanfort  HI 29746&#34;</span><span class="p">,</span><span class="s2">&#34;+1-189-827-0744x27614&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_17&#34;</span><span class="p">:(</span><span class="s2">&#34;Sharon91@gmail.com&#34;</span><span class="p">,</span><span class="s2">&#34;Sharon Mccoy&#34;</span><span class="p">,</span><span class="nb">date</span><span class="p">(</span><span class="s2">&#34;1958-09-01&#34;</span><span class="p">),</span><span class="s2">&#34;1 Southport Street Apt. 098 Westport  KY 85907&#34;</span><span class="p">,</span><span class="s2">&#34;(814)898-9079x898&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_18&#34;</span><span class="p">:(</span><span class="s2">&#34;Sharon91+001@gmail.com&#34;</span><span class="p">,</span><span class="s2">&#34;Kathryn Miller&#34;</span><span class="p">,</span><span class="nb">date</span><span class="p">(</span><span class="s2">&#34;1958-09-01&#34;</span><span class="p">),</span><span class="s2">&#34;1 Southport Street Apt. 098 Westport  KY 85907&#34;</span><span class="p">,</span><span class="s2">&#34;(814)898-9079x898&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_19&#34;</span><span class="p">:(</span><span class="s2">&#34;brettglenn@googlemail.com&#34;</span><span class="p">,</span><span class="s2">&#34;Bretty Glenn&#34;</span><span class="p">,</span><span class="nb">date</span><span class="p">(</span><span class="s2">&#34;1991-09-03&#34;</span><span class="p">),</span><span class="s2">&#34;Weber Unions Eddieland  MT 64619&#34;</span><span class="p">,</span><span class="s2">&#34;660-391-3730&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_20&#34;</span><span class="p">:(</span><span class="s2">&#34;julia.h.24@yahoo.com&#34;</span><span class="p">,</span><span class="s2">&#34;Julia H.&#34;</span><span class="p">,</span><span class="nb">date</span><span class="p">(</span><span class="s2">&#34;1927-08-24&#34;</span><span class="p">),</span><span class="s2">&#34;Rodriguez Track East Connorfort NC 63144&#34;</span><span class="p">,</span><span class="s2">&#34;1248361783&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_21&#34;</span><span class="p">:(</span><span class="s2">&#34;holly@welch.org&#34;</span><span class="p">,</span><span class="s2">&#34;Holly&#34;</span><span class="p">,</span><span class="nb">date</span><span class="p">(</span><span class="s2">&#34;0000-10-19&#34;</span><span class="p">),</span><span class="s2">&#34;1 Amanda Freeway Lisaland  NJ 94933&#34;</span><span class="p">,</span><span class="s2">&#34;(600)-192-2985&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_22&#34;</span><span class="p">:(</span><span class="s2">&#34;veronica.j@yahoo.com&#34;</span><span class="p">,</span><span class="s2">&#34;Veronica Jordan&#34;</span><span class="p">,</span><span class="nb">date</span><span class="p">(</span><span class="s2">&#34;0000-06-08&#34;</span><span class="p">),</span><span class="s2">&#34;2 Klein HI 05775&#34;</span><span class="p">,</span><span class="s2">&#34;(810)-252-6218&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_23&#34;</span><span class="p">:(</span><span class="s2">&#34;4kelly@hotmail.com&#34;</span><span class="p">,</span><span class="s2">&#34;Kelly April&#34;</span><span class="p">,</span><span class="nb">date</span><span class="p">(</span><span class="s2">&#34;2010-01-01&#34;</span><span class="p">),</span><span class="s2">&#34;Schmidt Key Lake Charles AL 13617&#34;</span><span class="p">,</span><span class="s2">&#34;410-138-1816&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="n">VERTEX</span><span class="w"> </span><span class="o">`</span><span class="n">email</span><span class="o">`</span><span class="w"> </span><span class="p">()</span><span class="w"> </span><span class="k">VALUES</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;heathermoore@johnson.com&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;holly@welch.org&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;julia.h.24@gmail.com&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;franklin.b@gibson.biz&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;4kelly@yahoo.com&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;steven.web@johnson.com&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;Jessica_Torres@morris.com&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;brettglenn@gmail.com&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;veronica.j@yahoo.com&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;steven@phelps-craig.info&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;ReginaldTheMan@hotmail.com&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;Jennifer.f@carroll-acosta.com&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;Philip66@yahoo.com&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;Ann@hernandez.com&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;Jessica@turner.com&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;Sandra311@hotmail.com&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;Sharon91@gmail.com&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;Sharon91+001@gmail.com&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;brettglenn@googlemail.com&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;julia.h.24@yahoo.com&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;holly@welch.org&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;veronica.j@yahoo.com&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;4kelly@hotmail.com&#34;</span><span class="p">:();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="n">VERTEX</span><span class="w"> </span><span class="o">`</span><span class="n">ip</span><span class="o">`</span><span class="w"> </span><span class="p">()</span><span class="w"> </span><span class="k">VALUES</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;202.123.513.12&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;202.41.23.11&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;143.1.23.4&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;143.1.23.12&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;153.42.2.8&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;9.1.4.1&#34;</span><span class="p">:();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="n">VERTEX</span><span class="w"> </span><span class="o">`</span><span class="n">device</span><span class="o">`</span><span class="p">(</span><span class="o">`</span><span class="n">uuid</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="k">VALUES</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;device_0&#34;</span><span class="p">:(</span><span class="s2">&#34;2a8e791d-0183-4df2-aa36-5ac82151be93&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;device_1&#34;</span><span class="p">:(</span><span class="s2">&#34;f9be6a11-f74b-45f5-a9ea-bb3af5a868a2&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;device_2&#34;</span><span class="p">:(</span><span class="s2">&#34;ae083379-91f5-4cd3-b2b3-273960979dab&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;device_3&#34;</span><span class="p">:(</span><span class="s2">&#34;c0981d43-1e59-4cd5-a1e1-e88cd9e792a5&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;device_4&#34;</span><span class="p">:(</span><span class="s2">&#34;e730dd8a-fcd3-47b4-be4a-0190610e6f02&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="o">`</span><span class="n">has_email</span><span class="o">`</span><span class="w"> </span><span class="p">()</span><span class="w"> </span><span class="k">VALUES</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_1&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;heathermoore@johnson.com&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_2&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;holly@welch.org&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_3&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;julia.h.24@gmail.com&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_4&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;franklin.b@gibson.biz&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_5&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;4kelly@yahoo.com&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_6&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;steven.web@johnson.com&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_7&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;Jessica_Torres@morris.com&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_8&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;brettglenn@gmail.com&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_9&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;veronica.j@yahoo.com&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_10&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;steven@phelps-craig.info&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_11&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;ReginaldTheMan@hotmail.com&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_12&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;Jennifer.f@carroll-acosta.com&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_13&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;Philip66@yahoo.com&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_14&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;Ann@hernandez.com&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_15&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;Jessica@turner.com&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_16&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;Sandra311@hotmail.com&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_17&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;Sharon91@gmail.com&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_18&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;Sharon91+001@gmail.com&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_19&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;brettglenn@googlemail.com&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_20&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;julia.h.24@yahoo.com&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_21&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;holly@welch.org&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_22&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;veronica.j@yahoo.com&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_23&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;4kelly@hotmail.com&#34;</span><span class="p">:();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="o">`</span><span class="n">used_device</span><span class="o">`</span><span class="w"> </span><span class="p">(</span><span class="o">`</span><span class="n">time</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="k">VALUES</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_2&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;device_0&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2021-03-01T08:00:00&#34;</span><span class="p">)),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_21&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;device_0&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2021-03-01T08:01:00&#34;</span><span class="p">)),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_18&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;device_1&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2021-03-01T08:02:00&#34;</span><span class="p">)),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_17&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;device_1&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2021-03-01T08:03:00&#34;</span><span class="p">)),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_22&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;device_2&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2021-03-01T08:04:00&#34;</span><span class="p">)),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_9&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;device_3&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2021-03-01T08:05:00&#34;</span><span class="p">)),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_9&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;device_2&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2021-03-01T08:06:00&#34;</span><span class="p">)),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_23&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;device_4&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2021-03-01T08:07:00&#34;</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="o">`</span><span class="n">logged_in_from</span><span class="o">`</span><span class="w"> </span><span class="p">(</span><span class="o">`</span><span class="n">time</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="k">VALUES</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_2&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;202.123.513.12&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2021-03-01T08:00:00&#34;</span><span class="p">)),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_21&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;202.41.23.11&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2021-03-01T08:01:00&#34;</span><span class="p">)),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_18&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;143.1.23.4&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2021-03-01T08:02:00&#34;</span><span class="p">)),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_17&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;143.1.23.12&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2021-03-01T08:03:00&#34;</span><span class="p">)),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_22&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;153.42.2.8&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2021-03-01T08:04:00&#34;</span><span class="p">)),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_9&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;153.42.2.8&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2021-03-01T08:05:00&#34;</span><span class="p">)),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_9&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;153.42.2.8&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2021-03-01T08:06:00&#34;</span><span class="p">)),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_23&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;9.1.4.1&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2021-03-01T08:07:00&#34;</span><span class="p">));</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="根据确定规则获取-id-映射关系" class="headerLink">
    <a href="#%e6%a0%b9%e6%8d%ae%e7%a1%ae%e5%ae%9a%e8%a7%84%e5%88%99%e8%8e%b7%e5%8f%96-id-%e6%98%a0%e5%b0%84%e5%85%b3%e7%b3%bb" class="header-mark"></a>1.2 根据确定规则获取 ID 映射关系</h3><p>最简单、直接的方法，在特定的场景下也可能是有用的，试想像 email、IP 地址、上网设备这些有严格结构的数据，在它们成为图谱中的点的时候，简单的相等关系就足以找出这样对应关系，比如：</p>
<ul>
<li>拥有相同的 email</li>
<li>使用过相同的 IP 地址</li>
<li>使用过相同的设备</li>
</ul>
<p>在前边的图谱、图数据库中，拥有相同的 email 可以直接表达为如下的图模式（Graph Pattern）。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="p">(:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">has_email</span><span class="o">`</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(:</span><span class="o">`</span><span class="n">email</span><span class="o">`</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="o">`</span><span class="n">has_email</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">]</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>下图为顶点： user 与边：has_email 的一个图的可视化结果，可以看到这其中有两个三个点相连的串正是符合拥有相同 email 的模式的点。</p>
<blockquote>
<p>注：</p>
<ul>
<li>这个结果的数据源在 <a href="https://github.com/wey-gu/identity-correlation-datagen/tree/main/sample/hand_crafted" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/identity-correlation-datagen/tree/main/sample/hand_crafted</a></li>
<li>如果通过线上访问本文，你可以鼠标悬停（获取点上的属性）和框选放大每一个点和子图哦。</li>
</ul>
</blockquote>
<iframe src="https://datapane.com/reports/v7JN2E7/user-shared-email/embed/" width="100%" height="540px" style="border: none;">IFrame not supported</iframe>
<p>显然，在构建 ID Mapping 系统的过程中，我们就是通过在图数据库中直接查询，可视化渲染结果来看到等效的洞察，这个查询可以写成：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">has_email</span><span class="o">`</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(:</span><span class="o">`</span><span class="n">email</span><span class="o">`</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="o">`</span><span class="n">has_email</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="w"> </span><span class="k">limit</span><span class="w"> </span><span class="mi">10</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>NebulaGraph 中的查询结果</p>
</blockquote>
<p><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/186616734-31a010e3-5a0d-4072-8477-7cf753b348a1.png" title="https://user-images.githubusercontent.com/1651790/186616734-31a010e3-5a0d-4072-8477-7cf753b348a1.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/186616734-31a010e3-5a0d-4072-8477-7cf753b348a1.png">
        
    </a></p>
<blockquote>
<p>同样，在上边交互图中可以放大看到这两对拥有相同 email 关联起来的账号：</p>
</blockquote>
<p><a class="lightgallery" href="/identity-resolution/shared_email.webp" title="/identity-resolution/shared_email.webp" data-thumbnail="/identity-resolution/shared_email.webp">
        
    </a></p>
<p>然而，在更多真实世界中，这样的模式匹配往往不能解决更多稍微复杂一点的情形：</p>
<p>比如从上边的图中我们可以看到这两个匹配了的映射中，<code>holly@welch.org</code> 关联下的两个用户的姓名是不同的，而 <code>veronica.j@yahoo.com</code> 关联下的两个用户姓名是完全相同的。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">user_2,holly@welch.org,Holly Pollard,1990-10-19,1 Amanda Freeway Lisaland  NJ 94933,600-192-2985x041
</span></span><span class="line"><span class="cl">user_21,holly@welch.org,Holly,0000-10-19,1 Amanda Freeway Lisaland  NJ 94933,(600)-192-2985
</span></span></code></pre></td></tr></table>
</div>
</div><p>再比如 <code>Sharon91@gmail.com</code> 和 <code>Sharon91+001@gmail.com</code> ，这两个人的姓名不同，但是手机和地址却是相同的。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">user_17,Sharon91@gmail.com,Sharon Mccoy,1958-09-01,1 Southport Street Apt. 098 Westport  KY 85907,(814)898-9079x898
</span></span><span class="line"><span class="cl">user_18,Sharon91+001@gmail.com,Kathryn Miller,1958-09-01,1 Southport Street Apt. 098 Westport  KY 85907,(814)898-9079x898
</span></span></code></pre></td></tr></table>
</div>
</div><p>比较庆幸的是我们只需要增加类似于&quot;拥有相同邮箱&quot;、&ldquo;拥有相同地址&rdquo;、&ldquo;拥有相同电话&quot;等其他条件就可以把这种情况考虑进来了，而随之而来的问题是：</p>
<ul>
<li>不是所有的数据都至少存在某一个确定条件的相等（二元的是与否），所以不存在一条确定的边去连接它们，比如这两个账户中：</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">user_5,4kelly@yahoo.com,April Kelly,1967-12-01,Schmidt Key Lake Charles AL 36174,410.138.1816x98702
</span></span><span class="line"><span class="cl">user_23,4kelly@hotmail.com,Kelly April,2010-01-01,Schmidt Key Lake Charles AL 13617,410-138-1816
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>如何表现 <code>4kelly@yahoo.com</code> 与 <code>4kelly@hotmail.com</code> 的相似性？</li>
<li>如何将多种匹配规则的信息都纳入关联系统？</li>
</ul>
<h3 id="非确定规则基于复合条件量化方法" class="headerLink">
    <a href="#%e9%9d%9e%e7%a1%ae%e5%ae%9a%e8%a7%84%e5%88%99%e5%9f%ba%e4%ba%8e%e5%a4%8d%e5%90%88%e6%9d%a1%e4%bb%b6%e9%87%8f%e5%8c%96%e6%96%b9%e6%b3%95" class="header-mark"></a>1.3 非确定规则基于复合条件量化方法</h3><p>前边提到了几种确定规则无法处理的情况，它们可以归结为这两点：</p>
<ol>
<li>需要多因素（规则）进行综合考虑与判定</li>
<li>需要对非确定条件（属性）进行处理，挖掘隐含相等、相似的关联关系（边）</li>
</ol>
<p>对于 1. ，很自然可以想到对多种关联条件进行量化评分（score），按照多种条件的重要程度进行加权，给出认定为关联的总分的阈值。</p>
<p>有了多因素评分的机制，我们只需要考虑如何在确定的多因素基础之上，增加对不确定因素的处理，从而解决 2.的情况。这里，非确定的条件可能是：</p>
<p>a. 表现结构化数据的相似性：<code>Sharon91@gmail.com</code> 与 <code>Sharon91+001@gmail.com</code></p>
<p>b. 表现非结构化数据的相似性：</p>
<ul>
<li><code>Schmidt Key Lake Charles AL 36174</code> 与 <code>Schmidt Key Lake Charles AL 13617</code></li>
<li><code>600-192-2985x041</code> 与<code>(600)-192-2985</code></li>
</ul>
<p>对于 a. 的结构化数据中的相似性，有两个思路是可以考虑的：</p>
<ul>
<li>直接进行两个值的相似度
<ul>
<li>直接判定子字符串</li>
<li>运算 Jaccard index 等类似的相似度</li>
</ul>
</li>
<li>拆分为更细粒的多个属性
<ul>
<li>将 email <code>foo+num@bar.com</code> 拆分成三个子属性 email_handle: <code>foo</code>, email_alias: <code>num</code>, email_domain: <code>bar.com</code>
<ul>
<li>然后就可以设计详细的确定性规则：email.handle 相等、甚至再在此基础上应用其他非确定规则</li>
<li>有时候，比如对于 email_domain 字段，我们还知道 gmail.com 和 googlemail.com 是等价的，这里的处理也是可以考虑的（像是<code>user_19,brettglenn@googlemail.com</code> 与 <code>user_8,brettglenn@gmail.com</code>，但从邮箱判断背后就是同一个持有者)</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>而对于 b. 的非结构属性相似性距离，处理方式可以根据具体的 domain knowledge 千差万别：</p>
<ul>
<li>像 <code>Schmidt Key Lake Charles AL 36174</code> 与 <code>Schmidt Key Lake Charles AL 13617</code> 的地址信息，除了可以用值的相似度之外，还可以把它转换成地理类型的属性，比如一个经纬度组成的点，从而计算两个点之间的地理距离，根据给定的距离值来打分。</li>
</ul>
<blockquote>
<p>注，你知道吗？NebulaGraph 图数据库中原生支持地理类型的属性与索引，可以直接创建 Point 类型的地理属性，并计算两个 Point 之间的距离。</p>
</blockquote>
<ul>
<li>对于 <code>600-192-2985x041</code> 与<code>(600)-192-2985</code> 这种字符串形式的电话号码，则可以统一转化为<code>&lt;国家码&gt;+&lt;区域码&gt;+&lt;本地号码&gt;+&lt;分机号&gt;</code>这样的结构化数据，进一步按照结构化数据的方式处理。</li>
<li>如果账号存在图片对象 URL，可以对比其文件相似度。</li>
</ul>
<p>另外，对于非结构属性的相似性计算我们要尽量避免两两穷举运算的方式（笛卡尔积），因为这是一个指数增长的量级，一个可行的方法是只比较建立了确定性关系（比如相同邮件前缀：email_handle，地址在相同街区，IP 在同一个网段等）的实体。</p>
<p><strong>小结</strong></p>
<p>总结来看，为了解决真实世界数据的复杂情形，基于复合条件的量化方法有：</p>
<ul>
<li>
<p>通过细化结构数据（比如邮箱字段拆分为子属性或者点）、或者转变为结构化数据（处理字符串形式的电话号码）建立相似结构化数据之间的确定关联；</p>
</li>
<li>
<p>在有限存在确定性关联的点之间（避免两两穷举），运算其他量化、非确定相似性（字符距离、地理距离等、图片文件相似度）；</p>
</li>
<li>
<p>为不同关系赋予加权，计算相似度总分；</p>
</li>
</ul>
<h4 id="基于复合条件量化方法实操" class="headerLink">
    <a href="#%e5%9f%ba%e4%ba%8e%e5%a4%8d%e5%90%88%e6%9d%a1%e4%bb%b6%e9%87%8f%e5%8c%96%e6%96%b9%e6%b3%95%e5%ae%9e%e6%93%8d" class="header-mark"></a>1.3.1 基于复合条件量化方法实操</h4><p>下边，我们来给出这系列方法的实操案例。</p>
<p><strong>1. 细化结构数据</strong></p>
<blockquote>
<p>通过细化结构数据（比如邮箱字段拆分为子属性或者点）、或者转变为结构化数据（处理字符串形式的电话号码）建立相似结构化数据之间的确定关联；</p>
</blockquote>
<p>首先，我们把 email 的点拆成前缀 email_handle 与后缀 email_domain，自然地，会产生这样的边：</p>
<ul>
<li>has_email_with_handle (user -&gt; email_handle)</li>
<li>has_email_with_domain (user -&gt; email_domain)</li>
<li>with_handle (email -&gt; email_handle)</li>
<li>with_domain (email -&gt; email_domain)</li>
</ul>
<p>然而，可以想见 email_domain 是一个潜在的超级节点，并且，它的区分度在很多情况下是很小的，比如 <code>gmail.com</code> 这个公共邮箱后缀没有很大的关联性意义。我们可以只留下 email.handle 作为点，而对于 email_domain，把它留在边中作为属性：</p>
<ul>
<li>has_email_with_handle (user -&gt; email_handle)
<ul>
<li>Prop:
<ul>
<li>email_domain</li>
</ul>
</li>
</ul>
</li>
<li>with_handle (email -&gt; email_handle)
<ul>
<li>Prop:
<ul>
<li>email_domain</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>对应的新的点类型、边类型的 NebulaGraph DDL 语句：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="o">#</span><span class="w"> </span><span class="err">新的点类型</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="o">`</span><span class="n">email_handle</span><span class="o">`</span><span class="w"> </span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">#</span><span class="w"> </span><span class="err">新的边类型</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="o">`</span><span class="n">has_email_with_handle</span><span class="o">`</span><span class="w"> </span><span class="p">(</span><span class="o">`</span><span class="n">email_domain</span><span class="o">`</span><span class="w"> </span><span class="n">string</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="o">`</span><span class="n">with_handle</span><span class="o">`</span><span class="w"> </span><span class="p">(</span><span class="o">`</span><span class="n">email_domain</span><span class="o">`</span><span class="w"> </span><span class="n">string</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>对应新的点、边的 DML 语句：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">INSERT</span><span class="w"> </span><span class="n">VERTEX</span><span class="w"> </span><span class="o">`</span><span class="n">email_handle</span><span class="o">`</span><span class="w"> </span><span class="p">()</span><span class="w"> </span><span class="k">VALUES</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;4kelly&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;Ann&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;brettglenn&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;franklin.b&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;heathermoore&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;holly&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;Jennifer.f&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;Jessica&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;Jessica_Torres&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;julia.h.24&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;Philip66&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;ReginaldTheMan&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;Sandra311&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;Sharon91&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;steven&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;steven.web&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;veronica.j&#34;</span><span class="p">:();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="o">`</span><span class="n">has_email_with_handle</span><span class="o">`</span><span class="w"> </span><span class="p">(</span><span class="o">`</span><span class="n">email_domain</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="k">VALUES</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_1&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;heathermoore&#34;</span><span class="p">:(</span><span class="s2">&#34;johnson.com&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_2&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;holly&#34;</span><span class="p">:(</span><span class="s2">&#34;welch.org&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_3&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;julia.h.24&#34;</span><span class="p">:(</span><span class="s2">&#34;gmail.com&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_4&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;franklin.b&#34;</span><span class="p">:(</span><span class="s2">&#34;gibson.biz&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_5&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;4kelly&#34;</span><span class="p">:(</span><span class="s2">&#34;yahoo.com&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_6&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;steven.web&#34;</span><span class="p">:(</span><span class="s2">&#34;johnson.com&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_7&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;Jessica_Torres&#34;</span><span class="p">:(</span><span class="s2">&#34;morris.com&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_8&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;brettglenn&#34;</span><span class="p">:(</span><span class="s2">&#34;gmail.com&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_9&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;veronica.j&#34;</span><span class="p">:(</span><span class="s2">&#34;yahoo.com&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_10&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;steven&#34;</span><span class="p">:(</span><span class="s2">&#34;phelps-craig.info&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_11&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;ReginaldTheMan&#34;</span><span class="p">:(</span><span class="s2">&#34;hotmail.com&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_12&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;Jennifer.f&#34;</span><span class="p">:(</span><span class="s2">&#34;carroll-acosta.com&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_13&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;Philip66&#34;</span><span class="p">:(</span><span class="s2">&#34;yahoo.com&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_14&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;Ann&#34;</span><span class="p">:(</span><span class="s2">&#34;hernandez.com&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_15&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;Jessica&#34;</span><span class="p">:(</span><span class="s2">&#34;turner.com&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_16&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;Sandra311&#34;</span><span class="p">:(</span><span class="s2">&#34;hotmail.com&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_17&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;Sharon91&#34;</span><span class="p">:(</span><span class="s2">&#34;gmail.com&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_18&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;Sharon91&#34;</span><span class="p">:(</span><span class="s2">&#34;gmail.com&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_19&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;brettglenn&#34;</span><span class="p">:(</span><span class="s2">&#34;googlemail.com&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_20&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;julia.h.24&#34;</span><span class="p">:(</span><span class="s2">&#34;yahoo.com&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_21&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;holly&#34;</span><span class="p">:(</span><span class="s2">&#34;welch.org&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_22&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;veronica.j&#34;</span><span class="p">:(</span><span class="s2">&#34;yahoo.com&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_23&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;4kelly&#34;</span><span class="p">:(</span><span class="s2">&#34;hotmail.com&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="o">`</span><span class="n">with_handle</span><span class="o">`</span><span class="w"> </span><span class="p">(</span><span class="o">`</span><span class="n">email_domain</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="k">VALUES</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;heathermoore@johnson.com&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;heathermoore&#34;</span><span class="p">:(</span><span class="s2">&#34;johnson.com&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;holly@welch.org&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;holly&#34;</span><span class="p">:(</span><span class="s2">&#34;welch.org&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;julia.h.24@gmail.com&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;julia.h.24&#34;</span><span class="p">:(</span><span class="s2">&#34;gmail.com&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;franklin.b@gibson.biz&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;franklin.b&#34;</span><span class="p">:(</span><span class="s2">&#34;gibson.biz&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;4kelly@yahoo.com&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;4kelly&#34;</span><span class="p">:(</span><span class="s2">&#34;yahoo.com&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;steven.web@johnson.com&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;steven.web&#34;</span><span class="p">:(</span><span class="s2">&#34;johnson.com&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;Jessica_Torres@morris.com&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;Jessica_Torres&#34;</span><span class="p">:(</span><span class="s2">&#34;morris.com&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;brettglenn@gmail.com&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;brettglenn&#34;</span><span class="p">:(</span><span class="s2">&#34;gmail.com&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;veronica.j@yahoo.com&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;veronica.j&#34;</span><span class="p">:(</span><span class="s2">&#34;yahoo.com&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;steven@phelps-craig.info&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;steven&#34;</span><span class="p">:(</span><span class="s2">&#34;phelps-craig.info&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;ReginaldTheMan@hotmail.com&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;ReginaldTheMan&#34;</span><span class="p">:(</span><span class="s2">&#34;hotmail.com&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;Jennifer.f@carroll-acosta.com&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;Jennifer.f&#34;</span><span class="p">:(</span><span class="s2">&#34;carroll-acosta.com&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;Philip66@yahoo.com&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;Philip66&#34;</span><span class="p">:(</span><span class="s2">&#34;yahoo.com&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;Ann@hernandez.com&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;Ann&#34;</span><span class="p">:(</span><span class="s2">&#34;hernandez.com&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;Jessica@turner.com&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;Jessica&#34;</span><span class="p">:(</span><span class="s2">&#34;turner.com&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;Sandra311@hotmail.com&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;Sandra311&#34;</span><span class="p">:(</span><span class="s2">&#34;hotmail.com&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;Sharon91@gmail.com&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;Sharon91&#34;</span><span class="p">:(</span><span class="s2">&#34;gmail.com&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;Sharon91+001@gmail.com&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;Sharon91&#34;</span><span class="p">:(</span><span class="s2">&#34;gmail.com&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;brettglenn@googlemail.com&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;brettglenn&#34;</span><span class="p">:(</span><span class="s2">&#34;googlemail.com&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;julia.h.24@yahoo.com&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;julia.h.24&#34;</span><span class="p">:(</span><span class="s2">&#34;yahoo.com&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;holly@welch.org&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;holly&#34;</span><span class="p">:(</span><span class="s2">&#34;welch.org&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;veronica.j@yahoo.com&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;veronica.j&#34;</span><span class="p">:(</span><span class="s2">&#34;yahoo.com&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;4kelly@hotmail.com&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;4kelly&#34;</span><span class="p">:(</span><span class="s2">&#34;hotmail.com&#34;</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到，经过这个处理，我们已经得到更多关联的用户了，它可以用这个图查询表达：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">has_email_with_handle</span><span class="o">`</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(:</span><span class="o">`</span><span class="n">email_handle</span><span class="o">`</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="o">`</span><span class="n">has_email_with_handle</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="w"> </span><span class="k">limit</span><span class="w"> </span><span class="mi">10</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/186620749-d3ff1059-e6c6-4263-aa82-9fa72a6478ee.png" title="https://user-images.githubusercontent.com/1651790/186620749-d3ff1059-e6c6-4263-aa82-9fa72a6478ee.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/186620749-d3ff1059-e6c6-4263-aa82-9fa72a6478ee.png">
        
    </a></p>
<p><strong>2. 非确定性相似性</strong></p>
<blockquote>
<p>在有限存在确定性关联的点之间（避免两两穷举），运算其他量化、非确定相似性（字符距离、地理距离等、图片文件相似度）；</p>
</blockquote>
<p>这里用地址的地理距离来做为例子，我们预先处理每一个地址，将它们的经纬度导入图谱。</p>
<p>这样，我们更改地址这个点的类型 <code>address</code> 的 schema：</p>
<ul>
<li>address
<ul>
<li>Prop: geo_point（<code>geography(point)</code> 经纬度类型）</li>
</ul>
</li>
</ul>
<p>对应过来，它的 DDL 变化是：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl"><span class="gd">-CREATE TAG `address` ()
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+CREATE TAG `address`(`geo_point` geography(point));
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>在已经建立了初始的 <code>address</code> TAG 之上，可以用 <code>ALTER TAG</code> 的 DDL 去修改 <code>address</code> 的定义：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="o">`</span><span class="n">address</span><span class="o">`</span><span class="w"> </span><span class="k">ADD</span><span class="w"> </span><span class="p">(</span><span class="o">`</span><span class="n">geo_point</span><span class="o">`</span><span class="w"> </span><span class="n">geography</span><span class="p">(</span><span class="n">point</span><span class="p">));</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>可以用 <code>SHOW CREATE TAG</code> 查看修改之后的 Schema</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="p">(</span><span class="n">root</span><span class="o">@</span><span class="n">nebula</span><span class="p">)</span><span class="w"> </span><span class="p">[</span><span class="n">entity_resolution</span><span class="p">]</span><span class="o">&gt;</span><span class="w"> </span><span class="k">SHOW</span><span class="w"> </span><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="o">`</span><span class="n">address</span><span class="o">`</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">-----------+------------------------------------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="n">Tag</span><span class="w">       </span><span class="o">|</span><span class="w"> </span><span class="k">Create</span><span class="w"> </span><span class="n">Tag</span><span class="w">                         </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">-----------+------------------------------------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;address&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;CREATE TAG `address` (            |
</span></span></span><span class="line"><span class="cl"><span class="s2">|           |  `address` string NOT NULL,        |
</span></span></span><span class="line"><span class="cl"><span class="s2">|           |  `geo_point` geography(point) NULL |
</span></span></span><span class="line"><span class="cl"><span class="s2">|           | ) ttl_duration = 0, ttl_col = &#34;&#34;&#34;</span><span class="w">  </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">-----------+------------------------------------+
</span></span></span></code></pre></td></tr></table>
</div>
</div></blockquote>
<p>对应的点、边的 DML：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="o">#</span><span class="w"> </span><span class="err">插入边</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="o">`</span><span class="n">has_address</span><span class="o">`</span><span class="w"> </span><span class="p">()</span><span class="w"> </span><span class="k">VALUES</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_1&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_0&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_2&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_15&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_3&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_18&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_4&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_1&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_5&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_2&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_6&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_3&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_7&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_4&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_8&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_14&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_9&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_5&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_10&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_6&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_11&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_7&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_12&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_8&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_13&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_9&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_14&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_10&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_15&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_11&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_16&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_12&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_17&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_13&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_18&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_13&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_19&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_14&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_20&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_18&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_21&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_15&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_22&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_16&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_23&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_17&#34;</span><span class="p">:();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">#</span><span class="w"> </span><span class="err">插入点，</span><span class="n">geo_point</span><span class="w"> </span><span class="err">是地址的经纬度</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="n">VERTEX</span><span class="w"> </span><span class="o">`</span><span class="n">address</span><span class="o">`</span><span class="w"> </span><span class="p">(</span><span class="o">`</span><span class="n">address</span><span class="o">`</span><span class="p">,</span><span class="w"> </span><span class="o">`</span><span class="n">geo_point</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="k">VALUES</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_0&#34;</span><span class="p">:(</span><span class="s2">&#34;Brittany Forge Apt. 718 East Eric  WV 97881&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_1&#34;</span><span class="p">:(</span><span class="s2">&#34;Richard Curve Kingstad  AZ 05660&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">)),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_2&#34;</span><span class="p">:(</span><span class="s2">&#34;Schmidt Key Lake Charles  AL 36174&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">13</span><span class="p">.</span><span class="mi">13</span><span class="p">,</span><span class="o">-</span><span class="mi">87</span><span class="p">.</span><span class="mi">65</span><span class="p">)),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_3&#34;</span><span class="p">:(</span><span class="s2">&#34;5 Joanna Key Suite 704 Frankshire  OK 03035&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">)),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_4&#34;</span><span class="p">:(</span><span class="s2">&#34;1 Payne Circle Mitchellfort  LA 73053&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">)),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_5&#34;</span><span class="p">:(</span><span class="s2">&#34;2 Klein Mission New Annetteton  HI 05775&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="p">)),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_6&#34;</span><span class="p">:(</span><span class="s2">&#34;1 Vanessa Stravenue Suite 184 Baileyville  NY 46381&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">11</span><span class="p">,</span><span class="mi">12</span><span class="p">)),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_7&#34;</span><span class="p">:(</span><span class="s2">&#34;John Garden Port John  LA 54602&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">13</span><span class="p">,</span><span class="mi">14</span><span class="p">)),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_8&#34;</span><span class="p">:(</span><span class="s2">&#34;11 Webb Groves Tiffanyside  MN 14566&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="mi">16</span><span class="p">)),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_9&#34;</span><span class="p">:(</span><span class="s2">&#34;70 Robinson Locks Suite 113 East Veronica  ND 87845&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">17</span><span class="p">,</span><span class="mi">18</span><span class="p">)),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_10&#34;</span><span class="p">:(</span><span class="s2">&#34;24 Mcknight Port Apt. 028 Sarahborough  MD 38195&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">19</span><span class="p">,</span><span class="mi">20</span><span class="p">)),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_11&#34;</span><span class="p">:(</span><span class="s2">&#34;0337 Mason Corner Apt. 900 Toddmouth  FL 61464&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">21</span><span class="p">,</span><span class="mi">22</span><span class="p">)),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_12&#34;</span><span class="p">:(</span><span class="s2">&#34;7 Davis Station Apt. 691 Pittmanfort  HI 29746&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">23</span><span class="p">,</span><span class="mi">24</span><span class="p">)),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_13&#34;</span><span class="p">:(</span><span class="s2">&#34;1 Southport Street Apt. 098 Westport  KY 85907&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">120</span><span class="p">.</span><span class="mi">12</span><span class="p">,</span><span class="mi">30</span><span class="p">.</span><span class="mi">16</span><span class="p">)),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_14&#34;</span><span class="p">:(</span><span class="s2">&#34;Weber Unions Eddieland  MT 64619&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">25</span><span class="p">,</span><span class="mi">26</span><span class="p">)),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_15&#34;</span><span class="p">:(</span><span class="s2">&#34;1 Amanda Freeway Lisaland  NJ 94933&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">27</span><span class="p">,</span><span class="mi">28</span><span class="p">)),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_16&#34;</span><span class="p">:(</span><span class="s2">&#34;2 Klein HI 05775&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="p">)),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_17&#34;</span><span class="p">:(</span><span class="s2">&#34;Schmidt Key Lake Charles AL 13617&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">13</span><span class="p">.</span><span class="mi">12</span><span class="p">,</span><span class="w"> </span><span class="o">-</span><span class="mi">87</span><span class="p">.</span><span class="mi">60</span><span class="p">)),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_18&#34;</span><span class="p">:(</span><span class="s2">&#34;Rodriguez Track East Connorfort  NC 63144&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">29</span><span class="p">,</span><span class="mi">30</span><span class="p">));</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>有了经纬度信息，结合 NebulaGraph 原生对于 Geo Spatial 空间地理属性的处理能力，我们可以轻松获得两个点之间的距离（单位：米）</p>
<p>如下，<code>ST_Distance(ST_Point(13.13, -87.65),ST_Point(13.12, -87.60))</code> 表示两个地球上的点 <code>ST_Point(13.13, -87.65)</code> 和 <code>ST_Point(13.12, -87.60))</code> 之间的距离是 <code>5559.9459840993895</code> 米。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">RETURN</span><span class="w"> </span><span class="n">ST_Distance</span><span class="p">(</span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">13</span><span class="p">.</span><span class="mi">13</span><span class="p">,</span><span class="w"> </span><span class="o">-</span><span class="mi">87</span><span class="p">.</span><span class="mi">65</span><span class="p">),</span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">13</span><span class="p">.</span><span class="mi">12</span><span class="p">,</span><span class="w"> </span><span class="o">-</span><span class="mi">87</span><span class="p">.</span><span class="mi">60</span><span class="p">))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">distance</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">--------------------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="n">distance</span><span class="w">           </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">--------------------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="mi">5559</span><span class="p">.</span><span class="mi">9459840993895</span><span class="w"> </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">--------------------+
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>那么，我们可以用查询语句来表达”所有拥有相同邮箱前缀用户之间的距离“：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">v_start</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">has_email_with_handle</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(:</span><span class="n">email_handle</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">has_email_with_handle</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">v_end</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">v_start</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">has_address</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">a_start</span><span class="p">:</span><span class="n">address</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">v_end</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">has_address</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">a_end</span><span class="p">:</span><span class="n">address</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">v_start</span><span class="p">,</span><span class="w"> </span><span class="n">v_end</span><span class="p">,</span><span class="w"> </span><span class="nf">ST_Distance</span><span class="p">(</span><span class="n">a_start</span><span class="p">.</span><span class="n">address</span><span class="p">.</span><span class="n">geo_point</span><span class="p">,</span><span class="w"> </span><span class="n">a_end</span><span class="p">.</span><span class="n">address</span><span class="p">.</span><span class="n">geo_point</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">distance</span><span class="p">,</span><span class="w"> </span><span class="n">a_start</span><span class="p">,</span><span class="w"> </span><span class="n">a_end</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这里，为了展现出针对 ”非确定性“ 条件之间的 ”相似性”，我们可以把地址中字符串完全相同的结果过滤掉，<code>WHERE a_start.address.address != a_end.address.address</code>，如此：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">v_start</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">has_email_with_handle</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(:</span><span class="n">email_handle</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">has_email_with_handle</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">v_end</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">v_start</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">has_address</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">a_start</span><span class="p">:</span><span class="n">address</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">v_end</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">has_address</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">a_end</span><span class="p">:</span><span class="n">address</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">a_start</span><span class="p">.</span><span class="n">address</span><span class="p">.</span><span class="n">address</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">a_end</span><span class="p">.</span><span class="n">address</span><span class="p">.</span><span class="n">address</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">v_start</span><span class="p">.</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">v_end</span><span class="p">.</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="nf">ST_Distance</span><span class="p">(</span><span class="n">a_start</span><span class="p">.</span><span class="n">address</span><span class="p">.</span><span class="n">geo_point</span><span class="p">,</span><span class="w"> </span><span class="n">a_end</span><span class="p">.</span><span class="n">address</span><span class="p">.</span><span class="n">geo_point</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">distance</span><span class="p">,</span><span class="w"> </span><span class="n">a_start</span><span class="p">.</span><span class="n">address</span><span class="p">.</span><span class="n">address</span><span class="p">,</span><span class="w"> </span><span class="n">a_end</span><span class="p">.</span><span class="n">address</span><span class="p">.</span><span class="n">address</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>它的结果是：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="o">+</span><span class="c1">-------------------+-------------------+--------------------+--------------------------------------------+--------------------------------------------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="n">v_start</span><span class="p">.</span><span class="k">user</span><span class="p">.</span><span class="n">name</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">v_end</span><span class="p">.</span><span class="k">user</span><span class="p">.</span><span class="n">name</span><span class="w">   </span><span class="o">|</span><span class="w"> </span><span class="n">distance</span><span class="w">           </span><span class="o">|</span><span class="w"> </span><span class="n">a_start</span><span class="p">.</span><span class="n">address</span><span class="p">.</span><span class="n">address</span><span class="w">                    </span><span class="o">|</span><span class="w"> </span><span class="n">a_end</span><span class="p">.</span><span class="n">address</span><span class="p">.</span><span class="n">address</span><span class="w">                      </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">-------------------+-------------------+--------------------+--------------------------------------------+--------------------------------------------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;April Kelly&#34;</span><span class="w">     </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Kelly April&#34;</span><span class="w">     </span><span class="o">|</span><span class="w"> </span><span class="mi">5559</span><span class="p">.</span><span class="mi">9459840993895</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Schmidt Key Lake Charles  AL 36174&#34;</span><span class="w">       </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Schmidt Key Lake Charles AL 13617&#34;</span><span class="w">        </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Veronica Jordan&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Veronica Jordan&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="w">                </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;2 Klein Mission New Annetteton  HI 05775&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;2 Klein HI 05775&#34;</span><span class="w">                         </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Kelly April&#34;</span><span class="w">     </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;April Kelly&#34;</span><span class="w">     </span><span class="o">|</span><span class="w"> </span><span class="mi">5559</span><span class="p">.</span><span class="mi">9459840993895</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Schmidt Key Lake Charles AL 13617&#34;</span><span class="w">        </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Schmidt Key Lake Charles  AL 36174&#34;</span><span class="w">       </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Veronica Jordan&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Veronica Jordan&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="w">                </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;2 Klein HI 05775&#34;</span><span class="w">                         </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;2 Klein Mission New Annetteton  HI 05775&#34;</span><span class="w"> </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">-------------------+-------------------+--------------------+--------------------------------------------+--------------------------------------------+
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>可以看出：</p>
<ul>
<li><code>user_5</code> 与 <code>user_23</code> 之间的地址距离只相差 5559 米，因为他们的地址就在一个街区</li>
<li>而 <code>user_9</code> 与 <code>user_13</code> 之间距离相差 0 米，因为它们（&ldquo;2 Klein Mission New Annetteton  HI 05775&rdquo; 与 &ldquo;2 Klein HI 05775&rdquo;）实际上是完全相同的地址。</li>
</ul>
<p>这就是利用属性的具体含义（domain knowledge）计算的实质距离的一个最好的诠释，大家可以借助于图数据库中查询语句描述能力或者利用其他系统去运算用户间非确定性特征的量化距离/相似度。</p>
<p><strong>3. 加权评分</strong></p>
<blockquote>
<p>为不同关系赋予加权，计算相似度总分；</p>
</blockquote>
<p>下边是一个在实际应用中，可以综合考量的多种关联关系，包括但不限于：</p>
<p>确定性关系</p>
<ul>
<li>同名（精确匹配）</li>
<li>相同电话（格式化处理）</li>
<li>使用过相同设备（精确匹配）</li>
<li>同邮件前缀（精细化处理）</li>
</ul>
<p>非确定性</p>
<ul>
<li>地址距离（处理成经纬度，计算地球球面距离）</li>
<li>头像图片背景相似度（训练模型计算图像距离）</li>
</ul>
<p>一个很直觉的方法就是将多种条件按照不同的权重加权，获得两点间的总“疑似相同账号”的评分。</p>
<p>本例中，为求简洁，我们只给出考虑“同邮件前缀”、“同名”与“地理距离小于 10KM”的综合加权，并且认为两个因素的权重都是 1。</p>
<blockquote>
<p>注，为了防止两两全匹配，我们从相同邮件前缀条件作为初始匹配条件。</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">v_start</span><span class="p">:</span><span class="k">user</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">has_email_with_handle</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(:</span><span class="n">email_handle</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">has_email_with_handle</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">v_end</span><span class="p">:</span><span class="k">user</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">v_start</span><span class="p">:</span><span class="k">user</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">has_address</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">a_start</span><span class="p">:</span><span class="n">address</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">v_end</span><span class="p">:</span><span class="k">user</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">has_address</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">a_end</span><span class="p">:</span><span class="n">address</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">v_start</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">s</span><span class="p">,</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">v_end</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">e</span><span class="p">,</span><span class="w"> </span><span class="n">v_start</span><span class="p">.</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">.</span><span class="n">name</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">s_name</span><span class="p">,</span><span class="w"> </span><span class="n">v_end</span><span class="p">.</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">.</span><span class="n">name</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">e_name</span><span class="p">,</span><span class="w"> </span><span class="nf">ST_Distance</span><span class="p">(</span><span class="n">a_start</span><span class="p">.</span><span class="n">address</span><span class="p">.</span><span class="n">geo_point</span><span class="p">,</span><span class="w"> </span><span class="n">a_end</span><span class="p">.</span><span class="n">address</span><span class="p">.</span><span class="n">geo_point</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">distance</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">s</span><span class="p">,</span><span class="w"> </span><span class="n">e</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">shared_email_handle</span><span class="p">,</span><span class="w"> </span><span class="n">s_name</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">e_name</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">shared_name</span><span class="p">,</span><span class="w"> </span><span class="n">distance</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">10000</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">shared_location</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>结果是</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="o">+</span><span class="c1">-----------+-----------+---------------------+-------------+-----------------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="n">s</span><span class="w">         </span><span class="o">|</span><span class="w"> </span><span class="n">e</span><span class="w">         </span><span class="o">|</span><span class="w"> </span><span class="n">shared_email_handle</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">shared_name</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">shared_location</span><span class="w"> </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">-----------+-----------+---------------------+-------------+-----------------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_5&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_23&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="mi">1</span><span class="w">                   </span><span class="o">|</span><span class="w"> </span><span class="k">false</span><span class="w">       </span><span class="o">|</span><span class="w"> </span><span class="k">true</span><span class="w">            </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_9&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_22&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="mi">1</span><span class="w">                   </span><span class="o">|</span><span class="w"> </span><span class="k">true</span><span class="w">        </span><span class="o">|</span><span class="w"> </span><span class="k">true</span><span class="w">            </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_21&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_2&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="mi">1</span><span class="w">                   </span><span class="o">|</span><span class="w"> </span><span class="k">false</span><span class="w">       </span><span class="o">|</span><span class="w"> </span><span class="k">true</span><span class="w">            </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_2&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_21&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="mi">1</span><span class="w">                   </span><span class="o">|</span><span class="w"> </span><span class="k">false</span><span class="w">       </span><span class="o">|</span><span class="w"> </span><span class="k">true</span><span class="w">            </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_22&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_9&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="mi">1</span><span class="w">                   </span><span class="o">|</span><span class="w"> </span><span class="k">true</span><span class="w">        </span><span class="o">|</span><span class="w"> </span><span class="k">true</span><span class="w">            </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_20&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_3&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="mi">1</span><span class="w">                   </span><span class="o">|</span><span class="w"> </span><span class="k">false</span><span class="w">       </span><span class="o">|</span><span class="w"> </span><span class="k">true</span><span class="w">            </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_3&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_20&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="mi">1</span><span class="w">                   </span><span class="o">|</span><span class="w"> </span><span class="k">false</span><span class="w">       </span><span class="o">|</span><span class="w"> </span><span class="k">true</span><span class="w">            </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_18&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_17&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="mi">1</span><span class="w">                   </span><span class="o">|</span><span class="w"> </span><span class="k">false</span><span class="w">       </span><span class="o">|</span><span class="w"> </span><span class="k">true</span><span class="w">            </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_17&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_18&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="mi">1</span><span class="w">                   </span><span class="o">|</span><span class="w"> </span><span class="k">false</span><span class="w">       </span><span class="o">|</span><span class="w"> </span><span class="k">true</span><span class="w">            </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_19&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_8&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="mi">1</span><span class="w">                   </span><span class="o">|</span><span class="w"> </span><span class="k">false</span><span class="w">       </span><span class="o">|</span><span class="w"> </span><span class="k">true</span><span class="w">            </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_8&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_19&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="mi">1</span><span class="w">                   </span><span class="o">|</span><span class="w"> </span><span class="k">false</span><span class="w">       </span><span class="o">|</span><span class="w"> </span><span class="k">true</span><span class="w">            </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_23&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_5&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="mi">1</span><span class="w">                   </span><span class="o">|</span><span class="w"> </span><span class="k">false</span><span class="w">       </span><span class="o">|</span><span class="w"> </span><span class="k">true</span><span class="w">            </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">-----------+-----------+---------------------+-------------+-----------------+
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>然后，我们计算加权分数：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">v_start</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">has_email_with_handle</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(:</span><span class="n">email_handle</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">has_email_with_handle</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">v_end</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">v_start</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">has_address</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">a_start</span><span class="p">:</span><span class="n">address</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">v_end</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">has_address</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">a_end</span><span class="p">:</span><span class="n">address</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">v_start</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">s</span><span class="p">,</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">v_end</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">e</span><span class="p">,</span><span class="w"> </span><span class="n">v_start</span><span class="p">.</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">.</span><span class="n">name</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">s_name</span><span class="p">,</span><span class="w"> </span><span class="n">v_end</span><span class="p">.</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">.</span><span class="n">name</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">e_name</span><span class="p">,</span><span class="w"> </span><span class="nf">ST_Distance</span><span class="p">(</span><span class="n">a_start</span><span class="p">.</span><span class="n">address</span><span class="p">.</span><span class="n">geo_point</span><span class="p">,</span><span class="w"> </span><span class="n">a_end</span><span class="p">.</span><span class="n">address</span><span class="p">.</span><span class="n">geo_point</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">distance</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">s</span><span class="p">,</span><span class="w"> </span><span class="n">e</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">shared_email_handle</span><span class="p">,</span><span class="w"> </span><span class="k">CASE</span><span class="w"> </span><span class="k">WHEN</span><span class="w"> </span><span class="n">s_name</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">e_name</span><span class="w"> </span><span class="k">THEN</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="k">ELSE</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="n">END</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">shared_name</span><span class="p">,</span><span class="w"> </span><span class="k">CASE</span><span class="w"> </span><span class="k">WHEN</span><span class="w"> </span><span class="n">distance</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">10000</span><span class="w"> </span><span class="k">THEN</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="k">ELSE</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="n">END</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">shared_location</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">s</span><span class="p">,</span><span class="w"> </span><span class="n">e</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="n">shared_email_handle</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">shared_name</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">shared_location</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">score</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">score</span><span class="w"> </span><span class="k">DESC</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>结果是</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="o">+</span><span class="c1">-----------+-----------+-------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="n">s</span><span class="w">         </span><span class="o">|</span><span class="w"> </span><span class="n">e</span><span class="w">         </span><span class="o">|</span><span class="w"> </span><span class="n">score</span><span class="w"> </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">-----------+-----------+-------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_9&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_22&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="mi">3</span><span class="w">     </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_22&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_9&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="mi">3</span><span class="w">     </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_5&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_23&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="mi">2</span><span class="w">     </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_21&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_2&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="mi">2</span><span class="w">     </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_2&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_21&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="mi">2</span><span class="w">     </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_20&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_3&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="mi">2</span><span class="w">     </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_3&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_20&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="mi">2</span><span class="w">     </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_18&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_17&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="mi">2</span><span class="w">     </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_17&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_18&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="mi">2</span><span class="w">     </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_19&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_8&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="mi">2</span><span class="w">     </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_8&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_19&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="mi">2</span><span class="w">     </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_23&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_5&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="mi">2</span><span class="w">     </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">-----------+-----------+-------+
</span></span></span></code></pre></td></tr></table>
</div>
</div><h4 id="利用-active-learning-的方法交互式学习评分权重" class="headerLink">
    <a href="#%e5%88%a9%e7%94%a8-active-learning-%e7%9a%84%e6%96%b9%e6%b3%95%e4%ba%a4%e4%ba%92%e5%bc%8f%e5%ad%a6%e4%b9%a0%e8%af%84%e5%88%86%e6%9d%83%e9%87%8d" class="header-mark"></a>1.3.2 利用 Active Learning 的方法交互式学习评分权重</h4><p>实际应用中，不同因素的加权关系也不是那么容易轻易给出的，我们可以利用有限的人力判断进行 Active Learning 的交互训练来习得权重。</p>
<p>TBD</p>
<h3 id="利用新的边连接不同方法" class="headerLink">
    <a href="#%e5%88%a9%e7%94%a8%e6%96%b0%e7%9a%84%e8%be%b9%e8%bf%9e%e6%8e%a5%e4%b8%8d%e5%90%8c%e6%96%b9%e6%b3%95" class="header-mark"></a>1.4 利用新的边连接不同方法</h3><p>进一步，对于这些确定（是否二元的）或非确定（量化的）关系，利用图库与外部系统获得了关联关系之后，常常可以直接把它们定义为图谱中直连的边，写回图库，提供给其他算法、系统作为输入，做进一步迭代、计算。</p>
<h4 id="创建单独的直连边" class="headerLink">
    <a href="#%e5%88%9b%e5%bb%ba%e5%8d%95%e7%8b%ac%e7%9a%84%e7%9b%b4%e8%bf%9e%e8%be%b9" class="header-mark"></a>1.4.1 创建单独的直连边</h4><p>假设之前对邮件、地址、姓名的处理之后，把结果作为用户实体之前的直连边插入图谱，这些种边叫做：</p>
<ul>
<li>shared_similar_email</li>
<li>shared_similar_location</li>
<li>shared_name</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="o">#</span><span class="w"> </span><span class="n">DDL</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="o">`</span><span class="n">shared_similar_email</span><span class="o">`</span><span class="w"> </span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="o">`</span><span class="n">shared_similar_location</span><span class="o">`</span><span class="w"> </span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="o">`</span><span class="n">shared_name</span><span class="o">`</span><span class="w"> </span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">#</span><span class="w"> </span><span class="n">DML</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="o">`</span><span class="n">shared_similar_email</span><span class="o">`</span><span class="w"> </span><span class="p">()</span><span class="w"> </span><span class="k">VALUES</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_5&#34;</span><span class="w"> </span><span class="o">-&gt;</span><span class="s2">&#34;user_23&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_9&#34;</span><span class="w"> </span><span class="o">-&gt;</span><span class="s2">&#34;user_22&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_21&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;user_2&#34;</span><span class="w"> </span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_2&#34;</span><span class="w"> </span><span class="o">-&gt;</span><span class="s2">&#34;user_21&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_22&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;user_9&#34;</span><span class="w"> </span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_20&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;user_3&#34;</span><span class="w"> </span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_3&#34;</span><span class="w"> </span><span class="o">-&gt;</span><span class="s2">&#34;user_20&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_18&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;user_17&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_17&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;user_18&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_19&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;user_8&#34;</span><span class="w"> </span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_8&#34;</span><span class="w"> </span><span class="o">-&gt;</span><span class="s2">&#34;user_19&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_23&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;user_5&#34;</span><span class="w"> </span><span class="p">:();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="o">`</span><span class="n">shared_name</span><span class="o">`</span><span class="w"> </span><span class="p">()</span><span class="w"> </span><span class="k">VALUES</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_9&#34;</span><span class="w"> </span><span class="o">-&gt;</span><span class="s2">&#34;user_22&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_22&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;user_9&#34;</span><span class="w"> </span><span class="p">:();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="o">`</span><span class="n">shared_similar_location</span><span class="o">`</span><span class="w"> </span><span class="p">()</span><span class="w"> </span><span class="k">VALUES</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_5&#34;</span><span class="w"> </span><span class="o">-&gt;</span><span class="s2">&#34;user_23&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_9&#34;</span><span class="w"> </span><span class="o">-&gt;</span><span class="s2">&#34;user_22&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_21&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;user_2&#34;</span><span class="w"> </span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_2&#34;</span><span class="w"> </span><span class="o">-&gt;</span><span class="s2">&#34;user_21&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_22&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;user_9&#34;</span><span class="w"> </span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_20&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;user_3&#34;</span><span class="w"> </span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_3&#34;</span><span class="w"> </span><span class="o">-&gt;</span><span class="s2">&#34;user_20&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_18&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;user_17&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_17&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;user_18&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_19&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;user_8&#34;</span><span class="w"> </span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_8&#34;</span><span class="w"> </span><span class="o">-&gt;</span><span class="s2">&#34;user_19&#34;</span><span class="p">:(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_23&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;user_5&#34;</span><span class="w"> </span><span class="p">:();</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h4 id="创建复合评分之后的边" class="headerLink">
    <a href="#%e5%88%9b%e5%bb%ba%e5%a4%8d%e5%90%88%e8%af%84%e5%88%86%e4%b9%8b%e5%90%8e%e7%9a%84%e8%be%b9" class="header-mark"></a>1.4.2 创建复合评分之后的边</h4><p>比如，我们查询综合分数大于 2 的点：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">v_start</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">has_email_with_handle</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(:</span><span class="n">email_handle</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">has_email_with_handle</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">v_end</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">v_start</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">has_address</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">a_start</span><span class="p">:</span><span class="n">address</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">v_end</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">has_address</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">a_end</span><span class="p">:</span><span class="n">address</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">v_start</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">s</span><span class="p">,</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">v_end</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">e</span><span class="p">,</span><span class="w"> </span><span class="n">v_start</span><span class="p">.</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">.</span><span class="n">name</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">s_name</span><span class="p">,</span><span class="w"> </span><span class="n">v_end</span><span class="p">.</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">.</span><span class="n">name</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">e_name</span><span class="p">,</span><span class="w"> </span><span class="nf">ST_Distance</span><span class="p">(</span><span class="n">a_start</span><span class="p">.</span><span class="n">address</span><span class="p">.</span><span class="n">geo_point</span><span class="p">,</span><span class="w"> </span><span class="n">a_end</span><span class="p">.</span><span class="n">address</span><span class="p">.</span><span class="n">geo_point</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">distance</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">s</span><span class="p">,</span><span class="w"> </span><span class="n">e</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">shared_email_handle</span><span class="p">,</span><span class="w"> </span><span class="k">CASE</span><span class="w"> </span><span class="k">WHEN</span><span class="w"> </span><span class="n">s_name</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">e_name</span><span class="w"> </span><span class="k">THEN</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="k">ELSE</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="n">END</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">shared_name</span><span class="p">,</span><span class="w"> </span><span class="k">CASE</span><span class="w"> </span><span class="k">WHEN</span><span class="w"> </span><span class="n">distance</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">10000</span><span class="w"> </span><span class="k">THEN</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="k">ELSE</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="n">END</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">shared_location</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">s</span><span class="p">,</span><span class="w"> </span><span class="n">e</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="n">shared_email_handle</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">shared_name</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">shared_location</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">score</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">score</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">s</span><span class="p">,</span><span class="w"> </span><span class="n">e</span><span class="p">,</span><span class="w"> </span><span class="n">score</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">score</span><span class="w"> </span><span class="k">DESC</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>然后根据返回结果建立新的边：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="o">#</span><span class="w"> </span><span class="n">DDL</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="o">`</span><span class="n">is_similar_to</span><span class="o">`</span><span class="w"> </span><span class="p">(</span><span class="n">score</span><span class="w"> </span><span class="nb">int</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">#</span><span class="w"> </span><span class="n">DML</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="o">`</span><span class="n">is_similar_to</span><span class="o">`</span><span class="w"> </span><span class="p">(</span><span class="o">`</span><span class="n">score</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="k">VALUES</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_22&#34;</span><span class="w"> </span><span class="o">-&gt;</span><span class="s2">&#34;user_9&#34;</span><span class="p">:(</span><span class="mi">3</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;user_9&#34;</span><span class="w"> </span><span class="o">-&gt;</span><span class="s2">&#34;user_22&#34;</span><span class="p">:(</span><span class="mi">3</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="基于图算法的方法" class="headerLink">
    <a href="#%e5%9f%ba%e4%ba%8e%e5%9b%be%e7%ae%97%e6%b3%95%e7%9a%84%e6%96%b9%e6%b3%95" class="header-mark"></a>1.5 基于图算法的方法</h3><p>前边的方法中我们直接利用了用户的各项属性、行为事件中产生的关系，并利用各种属性、值相似度的方法建立了基于概率或者带有评分的关联关系。而在通过其他方法增加了新的边之后的图上，我们也可以利用图算法的方法来映射潜在的相同用户 ID。</p>
<h4 id="图相似性算法" class="headerLink">
    <a href="#%e5%9b%be%e7%9b%b8%e4%bc%bc%e6%80%a7%e7%ae%97%e6%b3%95" class="header-mark"></a>1.5.1 图相似性算法</h4><p>利用节点相似性图算法，比如 Jaccard Index、余弦相似度等，我们可以或者 a. 利用图库之上的图计算平台全量计算相似度，或者 b. 用图查询语句实现全图/给定的点之间的相似度，最后给相似度一定的阈值来帮助建立新的（考虑了涉及边的）映射关系。</p>
<blockquote>
<p>注，这里的 Jaccard index 和我们前边提到的比较两个字符串的方法本质是一样的，不过我们现在提及的是应用在图上的点之间存在相连点作为算法中的“交集”的实现。</p>
</blockquote>
<h4 id="社区发现算法" class="headerLink">
    <a href="#%e7%a4%be%e5%8c%ba%e5%8f%91%e7%8e%b0%e7%ae%97%e6%b3%95" class="header-mark"></a>1.5.2 社区发现算法</h4><p>自然地，还可以用社区发现的算法全图找出给定的基于边之下的社区划分，调试算法，使得目标划分社区内部点为估计的相同用户。</p>
<h4 id="基于图算法的方法-1" class="headerLink">
    <a href="#%e5%9f%ba%e4%ba%8e%e5%9b%be%e7%ae%97%e6%b3%95%e7%9a%84%e6%96%b9%e6%b3%95-1" class="header-mark"></a>1.5.3 基于图算法的方法</h4><h5 id="基于图查询的-jaccard-实现" class="headerLink">
    <a href="#%e5%9f%ba%e4%ba%8e%e5%9b%be%e6%9f%a5%e8%af%a2%e7%9a%84-jaccard-%e5%ae%9e%e7%8e%b0" class="header-mark"></a>1.5.3.1 基于图查询的 Jaccard 实现</h5><p><a href="https://en.wikipedia.org/wiki/Jaccard_index" target="_blank" rel="noopener noreferrer">Jaccard Index</a> 是一个描述两个集合距离的定义公式，非常简单、符合直觉，它的定义为：
$$
J(A,B)= \frac {|A\cap B|}{|A\cup B|}
$$
这里，我们把交集理解为 A 与 B 共同连接的点（设备、IP、邮箱前缀、地址），而并集理解为这几种关系下与 A 或者 B 直连的所有点，于是，我们用这样的 NebulaGraph OpenCypher 查询就可以算出至少包含一跳关系的点和它相关的点、以及 Jaccard Index 值，越大代表关联度越大。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">v_start</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">used_device</span><span class="o">|</span><span class="n">logged_in_from</span><span class="o">|</span><span class="n">has_email_with_handle</span><span class="o">|</span><span class="n">has_address</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">shared_components</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">used_device</span><span class="o">|</span><span class="n">logged_in_from</span><span class="o">|</span><span class="n">has_email_with_handle</span><span class="o">|</span><span class="n">has_address</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">v_end</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">v_start</span><span class="p">,</span><span class="w"> </span><span class="n">v_end</span><span class="p">,</span><span class="w"> </span><span class="nf">count</span><span class="p">(</span><span class="n">shared_components</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">intersection_size</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">v_start</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">used_device</span><span class="o">|</span><span class="n">logged_in_from</span><span class="o">|</span><span class="n">has_email_with_handle</span><span class="o">|</span><span class="n">has_address</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">shared_components</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">v_start</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">v_start</span><span class="p">,</span><span class="w"> </span><span class="n">v_end</span><span class="p">,</span><span class="w"> </span><span class="n">intersection_size</span><span class="p">,</span><span class="w"> </span><span class="nf">COLLECT</span><span class="p">(</span><span class="nf">id</span><span class="p">(</span><span class="n">shared_components</span><span class="p">))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">set_a</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">v_end</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">used_device</span><span class="o">|</span><span class="n">logged_in_from</span><span class="o">|</span><span class="n">has_email_with_handle</span><span class="o">|</span><span class="n">has_address</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">shared_components</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w">  </span><span class="n">v_start</span><span class="p">,</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">v_end</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">v_end</span><span class="p">,</span><span class="w"> </span><span class="n">intersection_size</span><span class="p">,</span><span class="w"> </span><span class="n">set_a</span><span class="p">,</span><span class="w"> </span><span class="nf">COLLECT</span><span class="p">(</span><span class="nf">id</span><span class="p">(</span><span class="n">shared_components</span><span class="p">))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">set_b</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">v_start</span><span class="p">,</span><span class="w"> </span><span class="n">v_end</span><span class="p">,</span><span class="w"> </span><span class="nf">toFloat</span><span class="p">(</span><span class="n">intersection_size</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">intersection_size</span><span class="p">,</span><span class="w"> </span><span class="nf">toSet</span><span class="p">(</span><span class="n">set_a</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">set_b</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">A_U_B</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">v_start</span><span class="p">,</span><span class="w"> </span><span class="n">v_end</span><span class="p">,</span><span class="w"> </span><span class="n">intersection_size</span><span class="o">/</span><span class="nf">size</span><span class="p">(</span><span class="n">A_U_B</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">jaccard_index</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">jaccard_index</span><span class="w"> </span><span class="k">DESC</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>我们可以看到结果里：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="o">+</span><span class="c1">-----------+-----------+---------------------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="n">v_start</span><span class="w">   </span><span class="o">|</span><span class="w"> </span><span class="n">v_end</span><span class="w">     </span><span class="o">|</span><span class="w"> </span><span class="n">jaccard_index</span><span class="w">       </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">-----------+-----------+---------------------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_8&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_19&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="w">                 </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_19&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_8&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="w">                 </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_20&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_3&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">6666666666666666</span><span class="w">  </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_3&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_20&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">6666666666666666</span><span class="w">  </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_21&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_2&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">6</span><span class="w">                 </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_18&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_17&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">6</span><span class="w">                 </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_17&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_18&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">6</span><span class="w">                 </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_2&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_21&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">6</span><span class="w">                 </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_22&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_9&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">5</span><span class="w">                 </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_9&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_22&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">5</span><span class="w">                 </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_23&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_5&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">2</span><span class="w">                 </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_5&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_23&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">2</span><span class="w">                 </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_21&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_20&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">16666666666666666</span><span class="w"> </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_20&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user_21&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">16666666666666666</span><span class="w"> </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">-----------+-----------+---------------------+
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>user_8 与 user_19 的系数是最大的的，让我们看看他们之间的连接？</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="n">FIND</span><span class="w"> </span><span class="k">ALL</span><span class="w"> </span><span class="n">PATH</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="s2">&#34;user_8&#34;</span><span class="w"> </span><span class="k">TO</span><span class="w"> </span><span class="s2">&#34;user_19&#34;</span><span class="w"> </span><span class="n">OVER</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">BIDIRECT</span><span class="w"> </span><span class="n">YIELD</span><span class="w"> </span><span class="n">path</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">p</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>果然，他们之间的相似度很大：</p>
<p><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/187080900-48994824-811f-492b-a43c-e8d781331ffa.png" title="https://user-images.githubusercontent.com/1651790/187080900-48994824-811f-492b-a43c-e8d781331ffa.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/187080900-48994824-811f-492b-a43c-e8d781331ffa.png">
        
    </a></p>
<h5 id="基于-nebulagraph-algorithm-图计算平台的-jaccard-方法" class="headerLink">
    <a href="#%e5%9f%ba%e4%ba%8e-nebulagraph-algorithm-%e5%9b%be%e8%ae%a1%e7%ae%97%e5%b9%b3%e5%8f%b0%e7%9a%84-jaccard-%e6%96%b9%e6%b3%95" class="header-mark"></a>1.5.3.2 基于 NebulaGraph Algorithm 图计算平台的 Jaccard 方法</h5><h6 id="前面方法的局限" class="headerLink">
    <a href="#%e5%89%8d%e9%9d%a2%e6%96%b9%e6%b3%95%e7%9a%84%e5%b1%80%e9%99%90" class="header-mark"></a>1.5.3.2.1 前面方法的局限</h6><p>利用图数据库查询计算 Jaccard 系数的方法有两方面局限。</p>
<p>首先，为了防止两两运算，我们假设了所有值得被运算的点之间已经存在某种确定链接（对应 MATCH 第一行），虽然这样的假设在大部分情况下是可以粗略被接受的，但是它是一种压缩和妥协。</p>
<p>其次，在数据量很大的情形里，这样的查询将不具有可操作性。</p>
<h6 id="更-scale-的方法" class="headerLink">
    <a href="#%e6%9b%b4-scale-%e7%9a%84%e6%96%b9%e6%b3%95" class="header-mark"></a>1.5.3.2.2 更 Scale 的方法</h6><p>为了能处理更大规模，我们可以利用 Spark 等并行计算平台进行算法执行；</p>
<p>在全图运算时，我们可以利用局部敏感哈希 MinHash 来对两两比对降维，庆幸的是，Spark 中提供了 MinHash 的实现供我们使用！</p>
<blockquote>
<p>参考：</p>
<ul>
<li><a href="https://aksakalli.github.io/2016/03/01/jaccard-similarity-with-minhash.html" target="_blank" rel="noopener noreferrer">https://aksakalli.github.io/2016/03/01/jaccard-similarity-with-minhash.html</a></li>
<li><a href="https://en.wikipedia.org/wiki/MinHash" target="_blank" rel="noopener noreferrer">https://en.wikipedia.org/wiki/MinHash</a></li>
<li><a href="https://spark.apache.org/docs/3.1.1/api/python/reference/api/pyspark.ml.feature.MinHashLSH.html" target="_blank" rel="noopener noreferrer">https://spark.apache.org/docs/3.1.1/api/python/reference/api/pyspark.ml.feature.MinHashLSH.html</a></li>
<li><a href="https://github.com/apache/spark/blob/master/mllib/src/main/scala/org/apache/spark/ml/feature/LSH.scala" target="_blank" rel="noopener noreferrer">https://github.com/apache/spark/blob/master/mllib/src/main/scala/org/apache/spark/ml/feature/LSH.scala</a></li>
</ul>
</blockquote>
<blockquote>
<p>MinHash 的思想：</p>
<p>这个方法是用概率去有损估计 Jaccard 系数，这里的降维体现在它用 bit map 去数字化每一个集合，随机定义不同的集合上的 shuffle（乱序）变换，取变换之后 hash 的最小值。这里，两个集合的随机变换后最小值 相等的概率是等于 Jaccard 系数的。所以，这样偷梁换柱，就把需要两两集合运算比较的算法变成只需要对每一个集合做常数次随机变换取最小的降维近似运算了。</p>
</blockquote>
<p>在图上，对于每一个点，我们认为它的邻居就是这个点的集合，那么在 Spark 中运算 Jaccard 系数的过程就是：</p>
<ol>
<li>获取每一个点的邻居集合</li>
<li>对点的邻居进行 MinHash 运算，获得 Jaccard 系数</li>
</ol>
<p>庆幸的是，开源的 NebulaGraph Algorithm 已经提供了这个算法的实现，感兴趣的同学可以访问 <a href="https://github.com/vesoft-inc/nebula-algorithm/blob/master/nebula-algorithm/src/main/scala/com/vesoft/nebula/algorithm/lib/JaccardAlgo.scala" target="_blank" rel="noopener noreferrer">nebula-algorithm/src/main/scala/com/vesoft/nebula/algorithm/lib/JaccardAlgo.scala</a> 了解它的实现，而我们只需要调用 NebulaGraph Algorithm 就可以了，使用方法参考 NebulaGraph Algorithm 文档。</p>
<blockquote>
<p>注，<a href="https://github.com/vesoft-inc/nebula-algorithm/blob/master/nebula-algorithm/src/main/resources/application.conf" target="_blank" rel="noopener noreferrer">配置</a>中 jaccard.tol 的意涵是 <a href="https://github.com/apache/spark/blob/master/mllib/src/main/scala/org/apache/spark/ml/feature/LSH.scala" target="_blank" rel="noopener noreferrer">approxSimilarityJoin</a> 中的 threshold ：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-scala" data-lang="scala"><span class="line"><span class="cl"><span class="k">def</span> <span class="n">approxSimilarityJoin</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">datasetA</span><span class="k">:</span> <span class="kt">Dataset</span><span class="o">[</span><span class="k">_</span><span class="o">],</span>
</span></span><span class="line"><span class="cl">    <span class="n">datasetB</span><span class="k">:</span> <span class="kt">Dataset</span><span class="o">[</span><span class="k">_</span><span class="o">],</span>
</span></span><span class="line"><span class="cl">    <span class="n">threshold</span><span class="k">:</span> <span class="kt">Double</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">distCol</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Dataset</span><span class="o">[</span><span class="k">_</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Filter the joined datasets where the distance are smaller than the threshold.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">joinedDatasetWithDist</span><span class="o">.</span><span class="n">filter</span><span class="o">(</span><span class="n">col</span><span class="o">(</span><span class="n">distCol</span><span class="o">)</span> <span class="o">&lt;</span> <span class="n">threshold</span><span class="o">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div></blockquote>
<p>读者到这里应该会注意到，这个方法显然是假设所有的点都是用户实体，边是他们之间的直连关系的。所以再应用这个方法之前，我们需要创建经过预处理的直连边，这个步骤正是前边章节“利用新的边连接不同方法”中的内容。</p>
<h5 id="基于-nebulagraph-algorithm-图计算平台社区发现算法" class="headerLink">
    <a href="#%e5%9f%ba%e4%ba%8e-nebulagraph-algorithm-%e5%9b%be%e8%ae%a1%e7%ae%97%e5%b9%b3%e5%8f%b0%e7%a4%be%e5%8c%ba%e5%8f%91%e7%8e%b0%e7%ae%97%e6%b3%95" class="header-mark"></a>1.5.3.3 基于 NebulaGraph Algorithm 图计算平台社区发现算法</h5><p>提到基于全图的算法，我们自然可以想到可以利用社区发现的手段去帮助识别相同用户的不同账号，弱联通分量（WCC）、Louvain 算法都是常见的手段。</p>
<p>同样，NebulaGraph Algorithm 开箱即用地提供了这两种算法，我们可以很容易在 NebulaGraph 得出社区划分，并在此基础上做复合方法的识别。</p>
<h5 id="上手基于-nebulagraph-algorithm-图计算方法" class="headerLink">
    <a href="#%e4%b8%8a%e6%89%8b%e5%9f%ba%e4%ba%8e-nebulagraph-algorithm-%e5%9b%be%e8%ae%a1%e7%ae%97%e6%96%b9%e6%b3%95" class="header-mark"></a>1.5.3.4 上手基于 NebulaGraph Algorithm 图计算方法</h5><p>因为篇幅关系，这里不展示 NebulaGraph Algorithm 方法的上手环节，类似于在之前 Fraud Detection 方法文章中的对应章节，你可以利用 Nebula-Up 的 all-in-one 模式，一行命令搭建这样的环境并亲自体验。</p>
<blockquote>
<ul>
<li>Nebula-Up 部署命令：<code>curl -fsSL nebula-up.siwei.io/all-in-one.sh | bash -s -- v3 spark</code></li>
</ul>
</blockquote>
<h3 id="基于图神经网络的方法" class="headerLink">
    <a href="#%e5%9f%ba%e4%ba%8e%e5%9b%be%e7%a5%9e%e7%bb%8f%e7%bd%91%e7%bb%9c%e7%9a%84%e6%96%b9%e6%b3%95" class="header-mark"></a>1.6 基于图神经网络的方法</h3><p>我们注意到，在讲以上不同的方法相结合的时候，会把前导方法的结果作为图上的边，进而作为后边的方法的输入，而相同用户 ID 的识别本质上就是在图上去预测用户之间链接、边。</p>
<p>在 GNN 的方法中，除了我们在欺诈检测中利用到的节点分类（属性预测）之外，链接预测（Link Prediction）也是另一个常见的算法目标和应用场景。自然地，可以想到用 GNN 的方法结合 1. 非 GNN 方法获得的、 2. 已经有的人为标注的链接，来学习、预测图上的 ID 映射。</p>
<p>值得注意的是，GNN 的方法只能利用数字型的 feature、属性，我们没办法把非数字型的属性像在分类情况里那样枚举为数值，相反，我们在真正的 GNN 之前，可以用其他的图方法去建立基于打分、或者相似度的边建立。这时候，这些前边的方法成为了 GNN 链路预测的特征工程。</p>
<h4 id="基于-gnn-的实操" class="headerLink">
    <a href="#%e5%9f%ba%e4%ba%8e-gnn-%e7%9a%84%e5%ae%9e%e6%93%8d" class="header-mark"></a>1.6.1 基于 GNN 的实操</h4><p>和在 &ldquo;<a href="https://www.siwei.io/fraud-detection-with-nebulagraph/" target="_blank" rel="noopener noreferrer">基于 NebulaGraph 图数据库的欺诈检测方法与代码示例</a>&rdquo; 的欺诈检测类似，我将给出的例子也是 GNN 结合图数据库做实时预测的例子。</p>
<h5 id="hdeicdm2021httpsieeexploreieeeorgdocument9679130" class="headerLink">
    <a href="#hdeicdm2021httpsieeexploreieeeorgdocument9679130" class="header-mark"></a>1.6.1.1 <a href="https://ieeexplore.ieee.org/document/9679130" target="_blank" rel="noopener noreferrer">HDE[ICDM2021]</a></h5><p>我们利用 <a href="http://www.shichuan.org/doc/116.pdf" target="_blank" rel="noopener noreferrer">Heterogeneous Graph Neural Network with Distance Encoding</a> 给出的方法来做 Inductive Learning 的异构 GNN 上的链路预测，同时，我们将用一个更方便的 GNN 工具，<a href="https://github.com/BUPT-GAMMA/OpenHGNN" target="_blank" rel="noopener noreferrer">OpenHGNN</a>，有了它，本例中的代码量也会大大下降。</p>
<blockquote>
<p>注：OpenHGNN 是由北邮 GAMMA Lab 开发的基于 PyTorch 和 DGL 的开源异质图神经网络工具包。</p>
</blockquote>
<h5 id="数据集" class="headerLink">
    <a href="#%e6%95%b0%e6%8d%ae%e9%9b%86" class="header-mark"></a>1.6.1.2 数据集</h5><p>本利的数据集是前边方法中建立在 NebulaGraph 中的图谱，借助于 Nebula-DGL，我们可以一行代码把 NebulaGraph 中的图加载到 DGL 之中。</p>
<blockquote>
<p>注：</p>
<ol>
<li>
<p>这里，我们使用的的工具为 Deep Graph library（DGL），NebulaGraph 图数据库和他们之间的桥梁，Nebula-DGL。</p>
<ul>
<li>
<p>DGL: <a href="https://www.dgl.ai/" target="_blank" rel="noopener noreferrer">https://www.dgl.ai/</a></p>
</li>
<li>
<p>Nebula-DGL: <a href="https://github.com/wey-gu/nebula-dgl" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/nebula-dgl</a></p>
</li>
</ul>
</li>
<li>
<p>你可以直接 load 这个 .ngql 文件到 NebulaGraph。</p>
<ul>
<li><a href="https://github.com/wey-gu/identity-correlation-datagen/raw/main/sample/hand_crafted/entity_resolution.ngql" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/identity-correlation-datagen/raw/main/sample/hand_crafted/entity_resolution.ngql</a></li>
</ul>
</li>
</ol>
</blockquote>
<h5 id="数据处理" class="headerLink">
    <a href="#%e6%95%b0%e6%8d%ae%e5%a4%84%e7%90%86" class="header-mark"></a>1.6.1.3 数据处理</h5><p>为了将 NebulaGraph 图谱进行工程处理，序列化成为 DGL 的图对象，我们要通过 Nebula-DGL 的 YAML 配置文件 API 描述所需的点、边类型以及关心的属性（特征）。</p>
<p>我们看下现在的图中有哪些点、边类型：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="p">(</span><span class="n">root</span><span class="o">@</span><span class="n">nebula</span><span class="p">)</span><span class="w"> </span><span class="p">[</span><span class="n">entity_resolution</span><span class="p">]</span><span class="o">&gt;</span><span class="w"> </span><span class="k">SHOW</span><span class="w"> </span><span class="n">TAGS</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">----------------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="n">Name</span><span class="w">           </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">----------------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;address&#34;</span><span class="w">      </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;device&#34;</span><span class="w">       </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;email&#34;</span><span class="w">        </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;email_handle&#34;</span><span class="w"> </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;ip&#34;</span><span class="w">           </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;phone&#34;</span><span class="w">        </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user&#34;</span><span class="w">         </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">----------------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Got</span><span class="w"> </span><span class="mi">7</span><span class="w"> </span><span class="k">rows</span><span class="w"> </span><span class="p">(</span><span class="n">time</span><span class="w"> </span><span class="n">spent</span><span class="w"> </span><span class="mi">1335</span><span class="o">/</span><span class="mi">7357</span><span class="w"> </span><span class="n">us</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="n">root</span><span class="o">@</span><span class="n">nebula</span><span class="p">)</span><span class="w"> </span><span class="p">[</span><span class="n">entity_resolution</span><span class="p">]</span><span class="o">&gt;</span><span class="w"> </span><span class="k">SHOW</span><span class="w"> </span><span class="n">EDGES</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">---------------------------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="n">Name</span><span class="w">                      </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">---------------------------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;has_address&#34;</span><span class="w">             </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;has_email&#34;</span><span class="w">               </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;has_email_with_handle&#34;</span><span class="w">   </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;has_phone&#34;</span><span class="w">               </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;is_similar_to&#34;</span><span class="w">           </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;logged_in_from&#34;</span><span class="w">          </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;shared_name&#34;</span><span class="w">             </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;shared_similar_email&#34;</span><span class="w">    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;shared_similar_location&#34;</span><span class="w"> </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;used_device&#34;</span><span class="w">             </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;with_handle&#34;</span><span class="w">             </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">---------------------------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Got</span><span class="w"> </span><span class="mi">11</span><span class="w"> </span><span class="k">rows</span><span class="w"> </span><span class="p">(</span><span class="n">time</span><span class="w"> </span><span class="n">spent</span><span class="w"> </span><span class="mi">1439</span><span class="o">/</span><span class="mi">30418</span><span class="w"> </span><span class="n">us</span><span class="p">)</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>在本例中，我们不考虑属性(特征)。</p>
<blockquote>
<p><code>nebulagraph_entity_resolution_dgl_mapper.yaml</code></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># If vertex id is string-typed, remap_vertex_id must be true.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">remap_vertex_id</span><span class="p">:</span><span class="w"> </span><span class="kc">True</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">space</span><span class="p">:</span><span class="w"> </span><span class="l">entity_resolution</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># str or int</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">vertex_id_type</span><span class="p">:</span><span class="w"> </span><span class="l">int</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">vertex_tags</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">user</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">address</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">device</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">email_handle</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">ip</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">edge_types</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">has_email_with_handle</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">start_vertex_tag</span><span class="p">:</span><span class="w"> </span><span class="l">user</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">end_vertex_tag</span><span class="p">:</span><span class="w"> </span><span class="l">email_handle</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">is_similar_to</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">start_vertex_tag</span><span class="p">:</span><span class="w"> </span><span class="l">user</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">end_vertex_tag</span><span class="p">:</span><span class="w"> </span><span class="l">user</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">shared_similar_location</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">start_vertex_tag</span><span class="p">:</span><span class="w"> </span><span class="l">user</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">end_vertex_tag</span><span class="p">:</span><span class="w"> </span><span class="l">user</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">has_address</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">start_vertex_tag</span><span class="p">:</span><span class="w"> </span><span class="l">user</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">end_vertex_tag</span><span class="p">:</span><span class="w"> </span><span class="l">address</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">logged_in_from</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">start_vertex_tag</span><span class="p">:</span><span class="w"> </span><span class="l">user</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">end_vertex_tag</span><span class="p">:</span><span class="w"> </span><span class="l">ip</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">used_device</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">start_vertex_tag</span><span class="p">:</span><span class="w"> </span><span class="l">user</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">end_vertex_tag</span><span class="p">:</span><span class="w"> </span><span class="l">device</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>然后，我们在安装好 Nebula-DGL 之后只需要这几行代码就可以将 NebulaGraph 中的这张图构造为 DGL 的 <code>DGLHeteroGraph</code> 图对象：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">nebula_dgl</span> <span class="kn">import</span> <span class="n">NebulaLoader</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">nebula_config</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;graph_hosts&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                <span class="p">(</span><span class="s1">&#39;graphd&#39;</span><span class="p">,</span> <span class="mi">9669</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                <span class="p">(</span><span class="s1">&#39;graphd1&#39;</span><span class="p">,</span> <span class="mi">9669</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                <span class="p">(</span><span class="s1">&#39;graphd2&#39;</span><span class="p">,</span> <span class="mi">9669</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;nebula_user&#34;</span><span class="p">:</span> <span class="s2">&#34;root&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;nebula_password&#34;</span><span class="p">:</span> <span class="s2">&#34;nebula&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># load feature_mapper from yaml file</span>
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;nebulagraph_entity_resolution_dgl_mapper.yaml&#39;</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">feature_mapper</span> <span class="o">=</span> <span class="n">yaml</span><span class="o">.</span><span class="n">safe_load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">nebula_loader</span> <span class="o">=</span> <span class="n">NebulaLoader</span><span class="p">(</span><span class="n">nebula_config</span><span class="p">,</span> <span class="n">feature_mapper</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span> <span class="o">=</span> <span class="n">nebula_loader</span><span class="o">.</span><span class="n">load</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">g</span> <span class="o">=</span> <span class="n">g</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="s1">&#39;cpu&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">device</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">device</span><span class="p">(</span><span class="s1">&#39;cpu&#39;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h5 id="模型训练" class="headerLink">
    <a href="#%e6%a8%a1%e5%9e%8b%e8%ae%ad%e7%bb%83" class="header-mark"></a>1.6.1.4 模型训练</h5><p>参考 <a href="https://github.com/BUPT-GAMMA/OpenHGNN/blob/main/examples/customization/custom_link_prediction_dataset.py" target="_blank" rel="noopener noreferrer">custom_link_prediction_dataset.py</a></p>
<blockquote>
<p><code>HDE_link_predict.py</code></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">torch</span> <span class="k">as</span> <span class="nn">th</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">openhgnn</span> <span class="kn">import</span> <span class="n">Experiment</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">openhgnn.dataset</span> <span class="kn">import</span> <span class="n">AsLinkPredictionDataset</span><span class="p">,</span> <span class="n">generate_random_hg</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">dgl</span> <span class="kn">import</span> <span class="n">transforms</span> <span class="k">as</span> <span class="n">T</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">dgl</span> <span class="kn">import</span> <span class="n">DGLHeteroGraph</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">dgl.data</span> <span class="kn">import</span> <span class="n">DGLDataset</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">dgl.dataloading.negative_sampler</span> <span class="kn">import</span> <span class="n">GlobalUniform</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">meta_paths_dict</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;APA&#39;</span><span class="p">:</span> <span class="p">[(</span><span class="s1">&#39;user&#39;</span><span class="p">,</span> <span class="s1">&#39;has_email_with_handle&#39;</span><span class="p">,</span> <span class="s1">&#39;email_handle&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s1">&#39;user&#39;</span><span class="p">,</span> <span class="s1">&#39;is_similar_to&#39;</span><span class="p">,</span> <span class="s1">&#39;user&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s1">&#39;user&#39;</span><span class="p">,</span> <span class="s1">&#39;shared_similar_location&#39;</span><span class="p">,</span> <span class="s1">&#39;user&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s1">&#39;user&#39;</span><span class="p">,</span> <span class="s1">&#39;has_address&#39;</span><span class="p">,</span> <span class="s1">&#39;address&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s1">&#39;user&#39;</span><span class="p">,</span> <span class="s1">&#39;logged_in_from&#39;</span><span class="p">,</span> <span class="s1">&#39;ip&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s1">&#39;user&#39;</span><span class="p">,</span> <span class="s1">&#39;used_device&#39;</span><span class="p">,</span> <span class="s1">&#39;device&#39;</span><span class="p">)]}</span>
</span></span><span class="line"><span class="cl"><span class="n">target_link</span> <span class="o">=</span> <span class="p">[(</span><span class="s1">&#39;user&#39;</span><span class="p">,</span> <span class="s1">&#39;is_similar_to&#39;</span><span class="p">,</span> <span class="s1">&#39;user&#39;</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl"><span class="n">target_link_r</span> <span class="o">=</span> <span class="p">[(</span><span class="s1">&#39;user&#39;</span><span class="p">,</span> <span class="s1">&#39;is_similar_to&#39;</span><span class="p">,</span> <span class="s1">&#39;user&#39;</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">MyLPDataset</span><span class="p">(</span><span class="n">DGLDataset</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">g</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="fm">__init__</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s1">&#39;entity_resolution&#39;</span><span class="p">,</span> <span class="n">force_reload</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">g</span> <span class="o">=</span> <span class="n">g</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">process</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># Generate a random heterogeneous graph with labels on target node type.</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">_g</span> <span class="o">=</span> <span class="n">transform_hg</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">g</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Some models require meta paths, you can set meta path dict for this dataset.</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@property</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">meta_paths_dict</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">meta_paths_dict</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__getitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">idx</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_g</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__len__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">transform_hg</span><span class="p">(</span><span class="n">g</span><span class="p">:</span> <span class="n">DGLHeteroGraph</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">DGLHeteroGraph</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">transform</span> <span class="o">=</span> <span class="n">T</span><span class="o">.</span><span class="n">Compose</span><span class="p">([</span><span class="n">T</span><span class="o">.</span><span class="n">ToSimple</span><span class="p">(),</span> <span class="n">T</span><span class="o">.</span><span class="n">AddReverse</span><span class="p">()])</span>
</span></span><span class="line"><span class="cl">    <span class="n">hg</span> <span class="o">=</span> <span class="n">transform</span><span class="p">(</span><span class="n">g</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">hg</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">train_with_custom_lp_dataset</span><span class="p">(</span><span class="n">dataset</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">experiment</span> <span class="o">=</span> <span class="n">Experiment</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="s1">&#39;HDE&#39;</span><span class="p">,</span> <span class="n">dataset</span><span class="o">=</span><span class="n">dataset</span><span class="p">,</span> <span class="n">task</span><span class="o">=</span><span class="s1">&#39;link_prediction&#39;</span><span class="p">,</span> <span class="n">gpu</span><span class="o">=-</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">experiment</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">myLPDataset</span> <span class="o">=</span> <span class="n">AsLinkPredictionDataset</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">MyLPDataset</span><span class="p">(</span><span class="n">g</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="n">target_link</span><span class="o">=</span><span class="n">target_link</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">target_link_r</span><span class="o">=</span><span class="n">target_link_r</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">split_ratio</span><span class="o">=</span><span class="p">[</span><span class="mf">0.8</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="n">force_reload</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">train_with_custom_lp_dataset</span><span class="p">(</span><span class="n">myLPDataset</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>TBD：尚需把 g 处理成为 MyLPDataset() 可以接受的数据。</p>
</blockquote>
<h5 id="保存模型" class="headerLink">
    <a href="#%e4%bf%9d%e5%ad%98%e6%a8%a1%e5%9e%8b" class="header-mark"></a>1.6.1.5 保存模型</h5><p>OpenHGNN 中保存自定义数据集的模型的支持，有些问题，参考 <a href="https://github.com/BUPT-GAMMA/OpenHGNN/issues/112" target="_blank" rel="noopener noreferrer">https://github.com/BUPT-GAMMA/OpenHGNN/issues/112</a></p>
<h5 id="应用落地" class="headerLink">
    <a href="#%e5%ba%94%e7%94%a8%e8%90%bd%e5%9c%b0" class="header-mark"></a>1.6.1.6 应用落地</h5><p>参考：https://github.com/wey-gu/NebulaGraph-Fraud-Detection-GNN</p>
<blockquote>
<p>Feature image credit by <a href="https://unsplash.com/photos/2fn_pxLMS9g" target="_blank" rel="noopener noreferrer">Cosmin Serbin</a></p>
</blockquote>]]></description>
</item><item>
    <title>nGQL 简明教程，第一期</title>
    <link>https://siwei.io/ngql-tutorial/</link>
    <pubDate>Mon, 15 Aug 2022 00:24:28 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/ngql-tutorial/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/ngql-tutorial/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>本文旨在让新手快速了解 nGQL，掌握方向，之后可以脚踩在地上借助文档写出任何心中的 NebulaGraph 图查询。</p>
</blockquote>
<h2 id="系列教程" class="headerLink">
    <a href="#%e7%b3%bb%e5%88%97%e6%95%99%e7%a8%8b" class="header-mark"></a>1 系列教程</h2><ul>
<li><a href="https://www.siwei.io/ngql-tutorial/" target="_blank" rel="noopener noreferrer">nGQL 简明教程，第一期，快速入门</a>，本文</li>
<li><a href="https://www.siwei.io/ngql-execution-plan/" target="_blank" rel="noopener noreferrer">nGQL 简明教程，第二期，查询计划与调优</a></li>
</ul>
<h2 id="视频" class="headerLink">
    <a href="#%e8%a7%86%e9%a2%91" class="header-mark"></a>2 视频</h2><p>本教程的视频版在<a href="https://bilibili.com/video/BV1PT411P7w8" target="_blank" rel="noopener noreferrer">这里</a>。</p>
<div class="bilibili"><iframe src="//player.bilibili.com/player.html?bvid=BV1PT411P7w8&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe></div>

<h2 id="开始之前" class="headerLink">
    <a href="#%e5%bc%80%e5%a7%8b%e4%b9%8b%e5%89%8d" class="header-mark"></a>3 开始之前</h2><p>本文假设你已经在文档看过<a href="https://docs.nebula-graph.com.cn/3.2.0/2.quick-start/1.quick-start-workflow/" target="_blank" rel="noopener noreferrer">快速入门流程</a>，部署、连接过 NebulaGraph，并且看过了<a href="https://docs.nebula-graph.com.cn/3.2.0/2.quick-start/4.nebula-graph-crud/" target="_blank" rel="noopener noreferrer">常用命令</a>。如果您还没看过这两个文档，强烈建议先快速过一遍。</p>
<h3 id="教程目标" class="headerLink">
    <a href="#%e6%95%99%e7%a8%8b%e7%9b%ae%e6%a0%87" class="header-mark"></a>3.1 教程目标</h3><p>本教程目的在于让新手大概知道了 NebulaGraph 的查询语句后，解决“不知道什么样的查询应该用什么语句”的问题。</p>
<h3 id="ngql-是什么" class="headerLink">
    <a href="#ngql-%e6%98%af%e4%bb%80%e4%b9%88" class="header-mark"></a>3.2 nGQL 是什么</h3><p>我们先强调一下概念：nGQL 是 NebulaGraph Graph Query Language 的缩写，它表示 NebulaGraph 的查询语言，而 nGQL 的语句可以不严谨地分为这几部分：</p>
<ul>
<li>NebulaGraph 独有 DQL 查询语句（Data Query Language）</li>
<li>NebulaGraph OpenCypher DQL</li>
<li>NebulaGraph DML 写语句（Data Mutation Language）</li>
<li>NebulaGraph DDL Schema 语句（Data Definition Language)</li>
<li>NebulaGraph Admin Queries 管理语句</li>
</ul>
<p>这里，作为简明教程一把梭，我们只关注前两个部分，后边的内容会在 Part 2 中介绍。</p>
<h3 id="ngql-速查表-cheatsheet" class="headerLink">
    <a href="#ngql-%e9%80%9f%e6%9f%a5%e8%a1%a8-cheatsheet" class="header-mark"></a>3.3 nGQL 速查表 Cheatsheet</h3><blockquote>
<p>大家可以报错这份单页速查表，一次了解所有 nGQL 的用法。</p>
<p><a href="/ngql-tutorial/ngql-cheatsheet-cn.png" rel="">原始文件链接</a></p>
</blockquote>
<p><a class="lightgallery" href="/ngql-tutorial/ngql-cheatsheet-cn.webp" title="ngql-cheatsheet" data-thumbnail="/ngql-tutorial/ngql-cheatsheet-cn.webp">
        
    </a></p>
<h2 id="nebulagraph-独有-dql" class="headerLink">
    <a href="#nebulagraph-%e7%8b%ac%e6%9c%89-dql" class="header-mark"></a>4 NebulaGraph 独有 DQL</h2><p>NebulaGraph 的独有读查询语句的设计非常简洁，对初学者非常友好，结合了管道的概念，做到了只涉及了几个关键词就可以描述大多数图查询模式。</p>
<p>用一句话描述来说，nGQL 的独有 DQL 一共分成四类语句：</p>
<ul>
<li>图拓展：<code>GO</code></li>
<li>索引反查：<code>LOOKUP</code></li>
<li>取属性：<code>FETCH PROP</code></li>
<li>路径与子图：<code>FIND PATH</code> 与 <code>GET SUBGRAPH</code></li>
</ul>
<p>和几个特别的元素</p>
<ul>
<li>
<p>管道：<code>|</code></p>
</li>
<li>
<p>引用属性: <code>$</code> 开头的几个符号，用来描述一些特定的上下文</p>
</li>
</ul>
<h3 id="图拓展-go" class="headerLink">
    <a href="#%e5%9b%be%e6%8b%93%e5%b1%95-go" class="header-mark"></a>4.1 图拓展 GO</h3><p><code>GO</code> 的语义非常直观：从<strong>给定的起点</strong>，向外拓展，按需<strong>返回终点</strong>、起点的信息。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="o">#</span><span class="w"> </span><span class="err">图拓展</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">GO</span><span class="w"> </span><span class="mi">3</span><span class="w"> </span><span class="n">STEPS</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="s2">&#34;player102&#34;</span><span class="w"> </span><span class="n">OVER</span><span class="w"> </span><span class="n">follow</span><span class="w"> </span><span class="n">YIELD</span><span class="w"> </span><span class="n">dst</span><span class="p">(</span><span class="n">edge</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="err">───┬───</span><span class="w">      </span><span class="err">───┬───────</span><span class="w">      </span><span class="err">─┬────</span><span class="w">       </span><span class="err">──┬──────</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="err">│</span><span class="w">            </span><span class="err">│</span><span class="w">              </span><span class="err">│</span><span class="w">   </span><span class="err">┌─────────┘</span><span class="w">       
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="err">│</span><span class="w">            </span><span class="err">│</span><span class="w">              </span><span class="err">│</span><span class="w">   </span><span class="err">│</span><span class="w">                 
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="err">│</span><span class="w">            </span><span class="err">│</span><span class="w">              </span><span class="err">│</span><span class="w">   </span><span class="err">└──</span><span class="w"> </span><span class="err">返回最后一跳边的终点</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="err">│</span><span class="w">            </span><span class="err">│</span><span class="w">              </span><span class="err">│</span><span class="w">                     
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="err">│</span><span class="w">            </span><span class="err">│</span><span class="w">              </span><span class="err">└──────</span><span class="w"> </span><span class="err">从</span><span class="w"> </span><span class="n">follow</span><span class="w"> </span><span class="err">这个边</span><span class="p">[</span><span class="err">出方向</span><span class="p">]</span><span class="err">探索</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="err">│</span><span class="w">            </span><span class="err">│</span><span class="w">                                    
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="err">│</span><span class="w">            </span><span class="err">└─────────────────────</span><span class="w"> </span><span class="err">起点是</span><span class="w"> </span><span class="s2">&#34;player102&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="err">│</span><span class="w">                                                 
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="err">└──────────────────────────────────</span><span class="w"> </span><span class="err">探索</span><span class="w"> </span><span class="mi">3</span><span class="w"> </span><span class="err">步</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>参考 <a href="https://docs.nebula-graph.com.cn/3.2.0/3.ngql-guide/7.general-query-statements/3.go/" target="_blank" rel="noopener noreferrer">GO 语句文档</a>，了解如何：</p>
<ul>
<li>指定反方向拓展、双向拓展</li>
<li>指定可变跳数拓展</li>
<li>基于所有类型边拓展</li>
<li>返回其他信息</li>
</ul>
</blockquote>
<h3 id="lookup-基于索引反查-id" class="headerLink">
    <a href="#lookup-%e5%9f%ba%e4%ba%8e%e7%b4%a2%e5%bc%95%e5%8f%8d%e6%9f%a5-id" class="header-mark"></a>4.2 LOOKUP 基于索引反查 ID</h3><p>和 <code>GO</code> 为从已知的点出发相反，<code>LOOKUP</code> 是一个类似于 SQL 里 <code>SELECT</code> 语义的关键字，它实际的作用也类似与关系型数据库中的扫表。</p>
<p><code>LOOKUP</code> 需要手动明确建立相应 TAG、边类型上索引才能允许相应的查询。</p>
<h4 id="为什么-lookup-需要索引" class="headerLink">
    <a href="#%e4%b8%ba%e4%bb%80%e4%b9%88-lookup-%e9%9c%80%e8%a6%81%e7%b4%a2%e5%bc%95" class="header-mark"></a>4.2.1 为什么 <code>LOOKUP</code> 需要索引？</h4><p>因为 NebulaGraph 中的数据默认是按照邻接表的形式存储，在分布式设计中，扫描一个类型的点、边是非常昂贵的，所以它被默认禁止了。而创建相应的索引类似于增加了类似于表结构数据库的排序数据，可以用来做类似于 <code>SELECT</code> 的查询。</p>
<p>创建索引的代价是什么（增加写入负担）？索引会加速读么（不会，它是提供了 LOOKUP 的可能性，原生图的查询不需要索引加速）？等等更详细的问题请参阅我之前的<a href="https://www.siwei.io/nebula-index-explained/" target="_blank" rel="noopener noreferrer">索引详解文章</a>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="o">#</span><span class="w"> </span><span class="err">索引反查</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">LOOKUP</span><span class="w"> </span><span class="k">ON</span><span class="w"> </span><span class="n">player</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">player</span><span class="p">.</span><span class="n">name</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;Tony Parker&#34;</span><span class="w"> </span><span class="n">YIELD</span><span class="w"> </span><span class="n">id</span><span class="p">(</span><span class="n">vertex</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="err">──┬───</span><span class="w">  </span><span class="err">──────┬──────────────────────────</span><span class="w">  </span><span class="err">──┬──────</span><span class="w">       
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="err">│</span><span class="w">           </span><span class="err">│</span><span class="w">          </span><span class="err">┌───────────────────┘</span><span class="w">             
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="err">│</span><span class="w">           </span><span class="err">│</span><span class="w">          </span><span class="err">│</span><span class="w">                                 
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="err">│</span><span class="w">           </span><span class="err">│</span><span class="w">          </span><span class="err">└────────────</span><span class="w"> </span><span class="err">返回查到点的</span><span class="w"> </span><span class="n">VID</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="err">│</span><span class="w">           </span><span class="err">│</span><span class="w">                                            
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="err">│</span><span class="w">           </span><span class="err">└───────────────────────</span><span class="w"> </span><span class="err">过滤条件是属性</span><span class="w"> </span><span class="n">name</span><span class="w"> </span><span class="err">的值</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="err">│</span><span class="w">                                                        
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="err">└───────────────────────────────────</span><span class="w"> </span><span class="err">根据点的类别</span><span class="o">/</span><span class="n">TAG</span><span class="w"> </span><span class="n">player</span><span class="w"> </span><span class="err">查询</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>进一步参考 <a href="https://docs.nebula-graph.com.cn/3.2.0/3.ngql-guide/7.general-query-statements/5.lookup/" target="_blank" rel="noopener noreferrer">LOOKUP 语句文档</a>，了解如何：</p>
<ul>
<li>返回属性</li>
<li>根据边的类型查询边</li>
<li>了解 LOOKUP 查询的前提、<a href="https://docs.nebula-graph.com.cn/3.2.0/3.ngql-guide/14.native-index-statements/" target="_blank" rel="noopener noreferrer">索引</a>，<a href="https://www.siwei.io/nebula-index-explained/" target="_blank" rel="noopener noreferrer">索引详解</a></li>
</ul>
</blockquote>
<h3 id="fetch-prop-获取属性" class="headerLink">
    <a href="#fetch-prop-%e8%8e%b7%e5%8f%96%e5%b1%9e%e6%80%a7" class="header-mark"></a>4.3 FETCH PROP 获取属性</h3><p>如字面意思，如果我们知道一个点、边的 ID，想要获取它上边的属性，这时候我们要用 <code>FETCH PROP</code> 而非 <code>LOOKUP</code>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="o">#</span><span class="w"> </span><span class="err">取属性</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FETCH</span><span class="w"> </span><span class="n">PROP</span><span class="w"> </span><span class="k">ON</span><span class="w"> </span><span class="n">player</span><span class="w"> </span><span class="s2">&#34;player100&#34;</span><span class="w"> </span><span class="n">YIELD</span><span class="w"> </span><span class="n">properties</span><span class="p">(</span><span class="n">vertex</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="err">──┬───</span><span class="w">  </span><span class="err">────┬─────</span><span class="w">       </span><span class="err">─────────┬────────</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="err">│</span><span class="w">         </span><span class="err">│</span><span class="w">         </span><span class="err">┌───────────┘</span><span class="w">         
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="err">│</span><span class="w">         </span><span class="err">│</span><span class="w">         </span><span class="err">│</span><span class="w">                     
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="err">│</span><span class="w">         </span><span class="err">│</span><span class="w">         </span><span class="err">└───────</span><span class="w"> </span><span class="err">返回点的</span><span class="w"> </span><span class="n">player</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="err">下所有属性</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="err">│</span><span class="w">         </span><span class="err">│</span><span class="w">                               
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="err">│</span><span class="w">         </span><span class="err">└─────────────────</span><span class="w"> </span><span class="err">从</span><span class="w"> </span><span class="s2">&#34;player100&#34;</span><span class="w"> </span><span class="err">这个点获取</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="err">│</span><span class="w">                                         
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="err">└───────────────────────────</span><span class="w"> </span><span class="err">获取</span><span class="w"> </span><span class="n">player</span><span class="w"> </span><span class="err">这个</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="err">下的属性</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>进一步参考 <a href="https://docs.nebula-graph.com.cn/3.2.0/3.ngql-guide/7.general-query-statements/4.fetch/" target="_blank" rel="noopener noreferrer">FETCH PROP 语句文档</a>，了解如何：</p>
<ul>
<li>返回某一个属性</li>
<li>获取给定边的属性</li>
</ul>
</blockquote>
<h3 id="路径查找-find-path" class="headerLink">
    <a href="#%e8%b7%af%e5%be%84%e6%9f%a5%e6%89%be-find-path" class="header-mark"></a>4.4 路径查找 FIND PATH</h3><p>如果我们从给定的起点、终点中，找到之间的所有路径，一定要用 <code>FIND PATH</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="o">#</span><span class="w"> </span><span class="err">起点终点间路径</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">FIND</span><span class="w"> </span><span class="n">SHORTEST</span><span class="w"> </span><span class="n">PATH</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="s2">&#34;player102&#34;</span><span class="w"> </span><span class="k">TO</span><span class="w"> </span><span class="s2">&#34;team204&#34;</span><span class="w"> </span><span class="n">OVER</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="err">\</span><span class="w">   
</span></span></span><span class="line"><span class="cl"><span class="w">     </span><span class="err">──┬─────</span><span class="w">            </span><span class="err">───────────┬───────────</span><span class="w"> </span><span class="err">───┬───</span><span class="w">    
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">YIELD</span><span class="err">│</span><span class="n">path</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">p</span><span class="p">;</span><span class="w"> </span><span class="err">┌────────────────┘</span><span class="w">               </span><span class="err">│</span><span class="w">       
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="err">│────┬────</span><span class="w">  </span><span class="err">│</span><span class="w">     </span><span class="err">┌──────────────────────────┘</span><span class="w">       
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="err">│</span><span class="w">    </span><span class="err">│</span><span class="w">      </span><span class="err">│</span><span class="w">     </span><span class="err">│</span><span class="w">                                  
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="err">│</span><span class="w">    </span><span class="err">│</span><span class="w">      </span><span class="err">│</span><span class="w">     </span><span class="err">└─────────</span><span class="w"> </span><span class="err">经由所有类型的边出向探索</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="err">│</span><span class="w">    </span><span class="err">│</span><span class="w">      </span><span class="err">│</span><span class="w">                                        
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="err">│</span><span class="w">    </span><span class="err">│</span><span class="w">      </span><span class="err">└───────────────</span><span class="w"> </span><span class="err">从给定的起点、终点</span><span class="w"> </span><span class="n">VID</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="err">│</span><span class="w">    </span><span class="err">│</span><span class="w">                                               
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="err">│</span><span class="w">    </span><span class="err">└──────────────────────</span><span class="w"> </span><span class="err">返回路径为</span><span class="w"> </span><span class="n">p</span><span class="w"> </span><span class="err">列</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="err">│</span><span class="w">                                                    
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="err">└───────────────────────────</span><span class="w"> </span><span class="err">查找最短路径</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>进一步参考 <a href="https://docs.nebula-graph.com.cn/3.2.0/3.ngql-guide/16.subgraph-and-path/2.find-path/" target="_blank" rel="noopener noreferrer">FIND PATH 语句文档</a>，了解如何：</p>
<ul>
<li>返回路径中的属性</li>
<li>设定拓展方向</li>
</ul>
</blockquote>
<h3 id="单点子图-get-subgraph" class="headerLink">
    <a href="#%e5%8d%95%e7%82%b9%e5%ad%90%e5%9b%be-get-subgraph" class="header-mark"></a>4.5 单点子图 GET SUBGRAPH</h3><p>和路径查找类似，但是我们只给定一个起点和拓展部署，用 <code>GET SUBGRAPH</code> 可以帮我们获取同样的 BFS 出去的子图</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="o">#</span><span class="w"> </span><span class="err">单点</span><span class="w"> </span><span class="n">BFS</span><span class="w"> </span><span class="err">子图</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">GET</span><span class="w"> </span><span class="n">SUBGRAPH</span><span class="w"> </span><span class="mi">5</span><span class="w"> </span><span class="n">STEPS</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="s2">&#34;player101&#34;</span><span class="w"> </span><span class="err">\</span><span class="w">           
</span></span></span><span class="line"><span class="cl"><span class="w">             </span><span class="err">───┬───</span><span class="w"> </span><span class="err">─────┬──────────</span><span class="w">             
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">YIELD</span><span class="w"> </span><span class="n">VERTICES</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">nodes</span><span class="p">,</span><span class="w"> </span><span class="n">EDGES</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">relationships</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="err">────┬───┼─────────┼───────────────────────</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="err">┌────────┘</span><span class="w">   </span><span class="err">│</span><span class="w">         </span><span class="err">│</span><span class="w">                       
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="err">│</span><span class="w">            </span><span class="err">│</span><span class="w">         </span><span class="err">└───────</span><span class="w"> </span><span class="err">从</span><span class="w"> </span><span class="s2">&#34;player101&#34;</span><span class="w"> </span><span class="err">开始触发</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="err">│</span><span class="w">            </span><span class="err">│</span><span class="w">                                 
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="err">│</span><span class="w">            </span><span class="err">└─────────────────</span><span class="w"> </span><span class="err">获取</span><span class="w"> </span><span class="mi">5</span><span class="w"> </span><span class="err">步的探索</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="err">│</span><span class="w">                                              
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="err">└──────────────────────────────</span><span class="w"> </span><span class="err">返回所有的点、边</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>进一步参考 <a href="https://docs.nebula-graph.com.cn/3.2.0/3.ngql-guide/16.subgraph-and-path/1.get-subgraph/" target="_blank" rel="noopener noreferrer">GET SUBGRAPH 语句文档</a>，了解如何：</p>
<ul>
<li>返回带有属性的点、边</li>
<li>设定拓展方向</li>
</ul>
</blockquote>
<h3 id="利用管道和属性引用符" class="headerLink">
    <a href="#%e5%88%a9%e7%94%a8%e7%ae%a1%e9%81%93%e5%92%8c%e5%b1%9e%e6%80%a7%e5%bc%95%e7%94%a8%e7%ac%a6" class="header-mark"></a>4.6 利用管道和属性引用符</h3><p>NebulaGraph 的管道设计和 Unix-Shell 的设计很像，可以将简单的几种语句结合起来，有强大的表达力。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="o">#</span><span class="w"> </span><span class="err">使用通道</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">GO</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="s2">&#34;player100&#34;</span><span class="w"> </span><span class="n">OVER</span><span class="w"> </span><span class="n">follow</span><span class="w"> </span><span class="n">YIELD</span><span class="w"> </span><span class="n">dst</span><span class="p">(</span><span class="n">edge</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">did</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="err">\</span><span class="w">  
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="err">─────┬────────────────────────────────────────────</span><span class="w"> </span><span class="err">─┬─</span><span class="w">   
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">GO</span><span class="w"> </span><span class="k">FROM</span><span class="err">│$</span><span class="o">-</span><span class="p">.</span><span class="n">did</span><span class="w"> </span><span class="n">OVER</span><span class="w"> </span><span class="n">follow</span><span class="w"> </span><span class="n">YIELD</span><span class="w"> </span><span class="n">dst</span><span class="p">(</span><span class="n">edge</span><span class="p">);</span><span class="w">           </span><span class="err">│</span><span class="w">    
</span></span></span><span class="line"><span class="cl"><span class="w">         </span><span class="err">│────┬──</span><span class="w">     </span><span class="err">┌─────────────────────────────────┘</span><span class="w">    
</span></span></span><span class="line"><span class="cl"><span class="w">         </span><span class="err">│</span><span class="w">    </span><span class="err">│</span><span class="w">       </span><span class="err">│</span><span class="w">                                      
</span></span></span><span class="line"><span class="cl"><span class="w">         </span><span class="err">│</span><span class="w">    </span><span class="err">│</span><span class="w">       </span><span class="err">└────────</span><span class="w"> </span><span class="err">管道将左边的</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="err">输出作为右边语句输入</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">         </span><span class="err">│</span><span class="w">    </span><span class="err">│</span><span class="w">                                              
</span></span></span><span class="line"><span class="cl"><span class="w">         </span><span class="err">│</span><span class="w">    </span><span class="err">└────────────────</span><span class="w"> </span><span class="err">从管道左边的</span><span class="w"> </span><span class="n">did</span><span class="w"> </span><span class="err">属性开始探索</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">         </span><span class="err">│</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">         </span><span class="err">└─────────────────────</span><span class="w"> </span><span class="err">第一个查询语句</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>进一步参考 <a href="https://docs.nebula-graph.com.cn/3.2.0/3.ngql-guide/5.operators/5.property-reference/" target="_blank" rel="noopener noreferrer">引用属性文档</a>、<a href="https://docs.nebula-graph.com.cn/3.2.0/3.ngql-guide/5.operators/4.pipe/" target="_blank" rel="noopener noreferrer">管道文档</a>了解：</p>
<ul>
<li>更多属性引用定义</li>
<li>更多例子</li>
<li>结合 LOOKUP, GO, FETCH 的语句</li>
</ul>
</blockquote>
<p>除了以上的几种表达之外，NebulaGraph 独有查询语句还有聚合的表达参考 <a href="https://docs.nebula-graph.com.cn/3.2.0/3.ngql-guide/8.clauses-and-options/group-by/" target="_blank" rel="noopener noreferrer">GROUP-BY</a>，另外在文档里还有一个 <a href="https://docs.nebula-graph.com.cn/3.2.0/2.quick-start/6.cheatsheet-for-ngql-command/" target="_blank" rel="noopener noreferrer">Cheatsheet</a> 供大家查询一些复杂一点查询的例子。</p>
<h3 id="nebulagraph-opencypher-dql" class="headerLink">
    <a href="#nebulagraph-opencypher-dql" class="header-mark"></a>4.7 NebulaGraph OpenCypher DQL</h3><p>从 2.0 起，OpenCypher 的 <code>MATCH</code> 语句也被 NebulaGraph 原生支持了，虽然这里是一个方言（有一些细节差异）。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">MATCH &lt;pattern&gt; [&lt;clause_1&gt;] RETURN &lt;output&gt;  [&lt;clause_2&gt;];
</span></span></code></pre></td></tr></table>
</div>
</div><p>MATCH 的基本表达是以 <code>(v:tag_a)</code> 包裹的点 <code>--&gt;</code> 或者 <code>&lt;-[:edge_type_1]-</code> 表达的边组成的模式，与 <code>RETURN</code> 表达的输出。</p>
<p>如果您从 Cypher 的查询语句入门图数据库，可以从下边几个例子了解到几个 NebulaGraph 里的细节差异：</p>
<ul>
<li>增加了 <code>WHERE id(v) == &quot;foo&quot;</code> 的表达</li>
<li><code>==</code> 表达相等判断而不是 <code>=</code></li>
<li>点的属性表达需要填写 TAG，例如 <code>v3.player.name</code> 而不是 <code>v3.name</code></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">v</span><span class="p">:</span><span class="o">`</span><span class="n">player</span><span class="o">`</span><span class="err">{</span><span class="n">name</span><span class="p">:</span><span class="s2">&#34;Tim Duncan&#34;</span><span class="err">}</span><span class="p">)</span><span class="o">--&gt;</span><span class="p">(</span><span class="n">v2</span><span class="p">)</span><span class="o">&lt;--</span><span class="p">(</span><span class="n">v3</span><span class="p">)</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">RETURN</span><span class="w"> </span><span class="n">v3</span><span class="p">.</span><span class="o">`</span><span class="n">player</span><span class="o">`</span><span class="p">.</span><span class="n">name</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">Name</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">v</span><span class="p">:</span><span class="o">`</span><span class="n">player</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="p">(</span><span class="n">v</span><span class="p">)</span><span class="o">--</span><span class="p">()</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">RETURN</span><span class="w"> </span><span class="n">v</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">v</span><span class="p">:</span><span class="o">`</span><span class="n">player</span><span class="o">`</span><span class="p">)</span><span class="o">--</span><span class="p">(</span><span class="n">v2</span><span class="p">)</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">v2</span><span class="p">)</span><span class="w"> </span><span class="k">IN</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;player101&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;player102&#34;</span><span class="p">]</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">RETURN</span><span class="w"> </span><span class="n">v</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">m</span><span class="p">)</span><span class="o">-</span><span class="p">[]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">m</span><span class="p">)</span><span class="o">==</span><span class="s2">&#34;player100&#34;</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="o">-</span><span class="p">[]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">l</span><span class="p">)</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="o">==</span><span class="s2">&#34;player125&#34;</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">RETURN</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">m</span><span class="p">),</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">n</span><span class="p">),</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">l</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>进一步参考 <a href="https://docs.nebula-graph.com.cn/3.2.0/3.ngql-guide/7.general-query-statements/2.match/" target="_blank" rel="noopener noreferrer">MATCH 文档</a>了解：</p>
</blockquote>
<ul>
<li>更多例子</li>
<li>可变跳数的 MATCH 表达</li>
<li>多 MATCH</li>
<li>OPTIONAL MATCH</li>
</ul>
<blockquote>
<p>题图版权：DALL·E Open-AI，<a href="/ngql-tutorial/featured-image-raw.webp" rel="">原图</a></p>
<p>The featured image was generated with keywords: learning spells of the nebula magic, with DALL·E Open-AI.</p>
</blockquote>]]></description>
</item><item>
    <title>NebulaGraph 内核贡献开发指南</title>
    <link>https://siwei.io/nebulagraph-hacking-guide/</link>
    <pubDate>Sun, 23 Oct 2022 14:57:07 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/nebulagraph-hacking-guide/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/nebulagraph-hacking-guide/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>如何 build NebulaGraph？如何为 NebulaGraph 内核做贡献？从本章作为切入点就够了。</p>
</blockquote>
<h2 id="nebulagraph-的架构简介" class="headerLink">
    <a href="#nebulagraph-%e7%9a%84%e6%9e%b6%e6%9e%84%e7%ae%80%e4%bb%8b" class="header-mark"></a>1 NebulaGraph 的架构简介</h2><p>为了方便对 NebulaGraph 尚未了解的读者也能快速直接从贡献代码为起点了解它，我把开发、贡献内核代码入手所需要的基本架构知识也在这里以最小信息量的形式总结一下，作为前导知识，请资深的 NebulaGraph 玩家直接跳过这一章节。</p>
<h3 id="服务进程" class="headerLink">
    <a href="#%e6%9c%8d%e5%8a%a1%e8%bf%9b%e7%a8%8b" class="header-mark"></a>1.1 服务、进程</h3><p>NebulaGraph 的架构和 Google Spanner，TiDB 很相似，核心部分只有三种服务、进程：Graph 服务、Meta 服务和 Storage 服务。它们之间彼此通过 TCP 之上的 Thrift RPC 协议进行通信。</p>
<p><a class="lightgallery" href="https://docs-cdn.nebula-graph.com.cn/docs-2.0/1.introduction/2.nebula-graph-architecture/nebula-graph-architecture-1.png" title="https://docs-cdn.nebula-graph.com.cn/docs-2.0/1.introduction/2.nebula-graph-architecture/nebula-graph-architecture-1.png" data-thumbnail="https://docs-cdn.nebula-graph.com.cn/docs-2.0/1.introduction/2.nebula-graph-architecture/nebula-graph-architecture-1.png">
        
    </a></p>
<h3 id="计算层与存储层" class="headerLink">
    <a href="#%e8%ae%a1%e7%ae%97%e5%b1%82%e4%b8%8e%e5%ad%98%e5%82%a8%e5%b1%82" class="header-mark"></a>1.2 计算层与存储层</h3><p>NebulaGraph 是存储与计算分离的架构，它的 Meta 服务和 Storage 服务共同组成了存储层，Graph 服务是内核提供的计算层。</p>
<p>这样的设计使得 NebulaGraph 的集群部署可以灵活按需分配计算、存储的资源，比如我们可以为同一个集群中创建不同配置的两组 Graph 服务实例、用来面向不同类型的业务。</p>
<p>同时，计算层解耦于存储层使得在 NebulaGraph 之上的构建不同的特定计算层成为可能，比如 NebulaGraph Algorithm、NebulaGraph Analytics 就是在 NebulaGraph 之上构建了异构的另一个计算层，如果需要，任何人也可以定制自己的专属计算层，从而满足统一图基础存储之上的复合、多样的计算需求。</p>
<h4 id="graph-service-nebula-graphd" class="headerLink">
    <a href="#graph-service-nebula-graphd" class="header-mark"></a>1.2.1 Graph Service: nebula-graphd</h4><p>Graph 服务是对外接受图库登录、图查询请求、集群管理操作、schema 定义所直接连接的服务，他的进程名字叫 graphd，表示 nebula graph daemon。</p>
<p>Graph 服务的每一个进程是无状态的，这使得横向扩缩 Graph 服务的实例非常灵活、简单。</p>
<p>Graph 服务也叫 Query Engine，其内部和传统的数据库系统的设计非常相似，分为：解析、校验、计划、执行几部分。</p>
<p><a class="lightgallery" href="https://docs-cdn.nebula-graph.com.cn/docs-2.0/1.introduction/2.nebula-graph-architecture/query-engine-architecture.png" title="https://docs-cdn.nebula-graph.com.cn/docs-2.0/1.introduction/2.nebula-graph-architecture/query-engine-architecture.png" data-thumbnail="https://docs-cdn.nebula-graph.com.cn/docs-2.0/1.introduction/2.nebula-graph-architecture/query-engine-architecture.png">
        
    </a></p>
<h4 id="meta-service-nebula-metad" class="headerLink">
    <a href="#meta-service-nebula-metad" class="header-mark"></a>1.2.2 Meta Service: nebula-metad</h4><p>Meta 服务顾名思义负责元数据管理，进程名字叫 metad。这些元数据包括：</p>
<ul>
<li>所有的图空间、Schema 定义</li>
<li>用户鉴权、授权信息</li>
<li>集群服务的发现与服务的分布</li>
<li>图空间中的数据分布</li>
</ul>
<p>Meta 服务的进程可以单实例部署，在非单机部署的场景下，为了数据、服务的高 SLA ，我们可以奇数多个实例的部署，通常来说 3 个 nebula-metad 就足够了，三个 nebula-metad 通过 RAFT 共识协议构成一个集群提供服务。</p>
<p><a class="lightgallery" href="https://docs-cdn.nebula-graph.com.cn/docs-2.0/1.introduction/2.nebula-graph-architecture/meta-architecture1.png" title="https://docs-cdn.nebula-graph.com.cn/docs-2.0/1.introduction/2.nebula-graph-architecture/meta-architecture1.png" data-thumbnail="https://docs-cdn.nebula-graph.com.cn/docs-2.0/1.introduction/2.nebula-graph-architecture/meta-architecture1.png">
        
    </a></p>
<h4 id="storage-service-nebula-storaged" class="headerLink">
    <a href="#storage-service-nebula-storaged" class="header-mark"></a>1.2.3 Storage Service: nebula-storaged</h4><p>Storage 服务存储所有的图数据，进程名字叫 storaged。storaged 分布式地存储图数据，为 Graph 内部的图查询执行期提供底层的图语义存储接口，方便 Storage 客户端通过 Thrift RPC 协议面向涉及的 storaged 示例进行图语义的读写。</p>
<p>当 NebulaGraph 中图空间的副本数大于 1 的时候，每一个分区都会在不同 storaged 示例上有副本，副本之间则通过 RAFT 协议协调同步与读写。</p>
<p><a class="lightgallery" href="https://www-cdn.nebula-graph.com.cn/nebula-blog/nebula-reading-storage-architecture.png" title="https://www-cdn.nebula-graph.com.cn/nebula-blog/nebula-reading-storage-architecture.png" data-thumbnail="https://www-cdn.nebula-graph.com.cn/nebula-blog/nebula-reading-storage-architecture.png">
        
    </a></p>
<blockquote>
<p>参考 <a href="https://docs.nebula-graph.com.cn/master/1.introduction/3.nebula-graph-architecture/1.architecture-overview/" target="_blank" rel="noopener noreferrer">文档：架构介绍</a>，了解更多详情；</p>
<p>推荐阅读社区官方播客的架构系列文章：<a href="https://www.nebula-graph.com.cn/tags/%E6%9E%B6%E6%9E%84%E7%B3%BB%E5%88%97" target="_blank" rel="noopener noreferrer">nebula-graph.com.cn/tags/架构系列</a>。</p>
</blockquote>
<h3 id="进程间通信服务发现机制" class="headerLink">
    <a href="#%e8%bf%9b%e7%a8%8b%e9%97%b4%e9%80%9a%e4%bf%a1%e6%9c%8d%e5%8a%a1%e5%8f%91%e7%8e%b0%e6%9c%ba%e5%88%b6" class="header-mark"></a>1.3 进程间通信、服务发现机制</h3><p>graphd、metad、storaged 之间通过 Thrift 协议进行远程调用（RPC），下边给一些例子：</p>
<p>graphd 会通过 metaclient 调用 metad</p>
<ul>
<li>将自己报告为一个正在运行的服务，以便被发现</li>
<li>为用户（使用 graphclient ）登录进行 RPC 调用</li>
<li>当它处理 nGQL 查询时，获取图形存储分布情况</li>
</ul>
<p>graphd 会通过 storageclient 调用 storaged</p>
<ul>
<li>在处理 nGQL 时，在它从 metad 获得所需的元信息后，进行图形数据的读/写</li>
</ul>
<p>storaged 会通过  metaclient调用 metad</p>
<ul>
<li>将自己报告为一个正在运行的服务，以便被发现</li>
</ul>
<p>当然有状态的存储引擎内部也有集群同步的流量与通信</p>
<ul>
<li>
<p>storaged 与其他 storaged 有 RAFT 连接</p>
</li>
<li>
<p>metad 与其他 metad 实例有 RAFT 连接</p>
</li>
</ul>
<h2 id="开发环境搭建" class="headerLink">
    <a href="#%e5%bc%80%e5%8f%91%e7%8e%af%e5%a2%83%e6%90%ad%e5%bb%ba" class="header-mark"></a>2 开发环境搭建</h2><p>接下来我们开始 NebulaGraph 的构建、开发环境的部分。</p>
<p>NebulaGraph 只支持在 GNU/Linux 分支中构建，目前来说，最方便的方式是在社区预先提供好了依赖的容器镜像的基础上在容器内部构建、调试 NebulaGraph 代码的更改和 Debug。</p>
<h3 id="创建一个容器化的-nebulagraph-集群" class="headerLink">
    <a href="#%e5%88%9b%e5%bb%ba%e4%b8%80%e4%b8%aa%e5%ae%b9%e5%99%a8%e5%8c%96%e7%9a%84-nebulagraph-%e9%9b%86%e7%be%a4" class="header-mark"></a>2.1 创建一个容器化的 NebulaGraph 集群</h3><p>为了更方便地调试代码，我习惯提前创建一个 NebulaGraph Docker 环境，我们可以使用官方的 Docker-Compose 方式部署，也可以使用我在官方 Docker-Compose 基础之上弄的一键部署工具：nebula-up.siwei.io。</p>
<p>以 nebula-up 为例：</p>
<p>在我们的 Linux 开发服务器中执行 <code>curl -fsSL nebula-up.siwei.io/install.sh | bash</code> 就可以了。</p>
<h3 id="代码获取" class="headerLink">
    <a href="#%e4%bb%a3%e7%a0%81%e8%8e%b7%e5%8f%96" class="header-mark"></a>2.2 代码获取</h3><p>NebulaGraph 的代码仓库托管在 GitHub 之上，我们可以在有互联网的地方直接克隆下来：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone git@github.com:vesoft-inc/nebula.git
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> nebula
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="创建开发容器" class="headerLink">
    <a href="#%e5%88%9b%e5%bb%ba%e5%bc%80%e5%8f%91%e5%ae%b9%e5%99%a8" class="header-mark"></a>2.3 创建开发容器</h3><p>有了 NebulaGraph 集群，我们可以借助 <a href="https://github.com/vesoft-inc/nebula-dev-docker/" target="_blank" rel="noopener noreferrer">https://github.com/vesoft-inc/nebula-dev-docker/</a> 提供的开箱即用开发容器镜像，搭建开发环境：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">TAG</span><span class="o">=</span>ubuntu2004
</span></span><span class="line"><span class="cl">docker run -ti <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --network nebula-net <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --security-opt <span class="nv">seccomp</span><span class="o">=</span>unconfined <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  -v <span class="s2">&#34;</span><span class="nv">$PWD</span><span class="s2">&#34;</span>:/home/nebula <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  -w /home/nebula <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --name nebula_dev <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  vesoft/nebula-dev:<span class="nv">$TAG</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  bash
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>这其中，<code>-v &quot;$PWD&quot;</code> 表示当前的 NebulaGraph 代码本地的路径会被映射到开发容器内部的 <code>/home/nebula</code>，而启动的容器名字是 <code>nebula_dev</code>。</p>
</blockquote>
<p>待这个容器启动之后，我们会自动进入到这个容器的 bash shell 之中，如果我们输入 <code>exit</code> 退出容器，它会被关闭，如果我们想再次启动容器，只需要执行：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker start nebula_dev
</span></span></code></pre></td></tr></table>
</div>
</div><p>之后，我们的编译、Debug、测试工作都在 <code>nebula_dev</code> 容器内部进行，在容器是运行状态的情况下，可以随时新建一个容器内部的 bash shell 进程：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker <span class="nb">exec</span> -ti nebula_dev bash
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>注，为了保持编译环境是最新的，我们可以定期删除、拉取、重建这个开发容器，以保持环境与代码相匹配。</p>
</blockquote>
<h3 id="编译环境" class="headerLink">
    <a href="#%e7%bc%96%e8%af%91%e7%8e%af%e5%a2%83" class="header-mark"></a>2.4 编译环境</h3><p>在 <code>nebula_dev</code> 这个容器内部，我们可以进行代码编译：</p>
<p>进入编译容器</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker <span class="nb">exec</span> -ti nebula_dev bash
</span></span></code></pre></td></tr></table>
</div>
</div><p>用 CMake 准备 makefile，第一次构建的时候，为了节省时间、内存，我关闭了测试（<code>-DENABLE_TESTING=OFF</code>）：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkdir build <span class="o">&amp;&amp;</span> <span class="nb">cd</span> build
</span></span><span class="line"><span class="cl">cmake -DCMAKE_CXX_COMPILER<span class="o">=</span><span class="nv">$TOOLSET_CLANG_DIR</span>/bin/g++ -DCMAKE_C_COMPILER<span class="o">=</span><span class="nv">$TOOLSET_CLANG_DIR</span>/bin/gcc -DENABLE_WERROR<span class="o">=</span>OFF -DCMAKE_BUILD_TYPE<span class="o">=</span>Debug -DENABLE_TESTING<span class="o">=</span>OFF ..
</span></span></code></pre></td></tr></table>
</div>
</div><p>开始编译，根据服务器的空闲 CPU 个数和内存量力而行，比如我在自己 72 核心的服务器上准备允许同时运行 64 个 job，则运行：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">make -j64
</span></span></code></pre></td></tr></table>
</div>
</div><p>第一次构建的时间会慢一些，在 make 成功之后，我们也可以执行 <code>make install</code> 把二进制安装到像生产安装时候一样的路径：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">root@1827b82e88bf:/home/nebula/build# make install
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">root@1827b82e88bf:/home/nebula/build# ls /usr/local/nebula/bin
</span></span><span class="line"><span class="cl">db_dump  db_upgrader  meta_dump  nebula-graphd  nebula-metad  nebula-storaged
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">root@1827b82e88bf:/home/nebula/build# ls /usr/local/nebula/
</span></span><span class="line"><span class="cl">bin  etc  pids  scripts  share
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="调试-nebulagraph" class="headerLink">
    <a href="#%e8%b0%83%e8%af%95-nebulagraph" class="header-mark"></a>3 调试 NebulaGraph</h2><p>以 GraphD 调试为例。</p>
<h3 id="安装依赖" class="headerLink">
    <a href="#%e5%ae%89%e8%a3%85%e4%be%9d%e8%b5%96" class="header-mark"></a>3.1 安装依赖</h3><p>安装一些后边会方便 Debug 额外用到的依赖</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 装一个 ping，测试一下 nebula-up 安装的集群可以访问</span>
</span></span><span class="line"><span class="cl">apt update <span class="o">&amp;&amp;</span> apt install iputils-ping -y
</span></span><span class="line"><span class="cl"><span class="c1"># ping graphd 试试看</span>
</span></span><span class="line"><span class="cl">ping graphd -c <span class="m">4</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 安装 gdb gdb-dashboard</span>
</span></span><span class="line"><span class="cl">apt install gdb -y
</span></span><span class="line"><span class="cl">wget -P ~ https://git.io/.gdbinit
</span></span><span class="line"><span class="cl">pip install pygments
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="准备客户端" class="headerLink">
    <a href="#%e5%87%86%e5%a4%87%e5%ae%a2%e6%88%b7%e7%ab%af" class="header-mark"></a>3.2 准备客户端</h3><p>准备一个 NebulaGraph 的命令行客户端：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 新开一个 nebula_dev 的 shell</span>
</span></span><span class="line"><span class="cl">docker <span class="nb">exec</span> -ti nebula_dev bash
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 下载 nebula-console 二进制文件，并赋予可执行权限，命名为 nebula-console 并安装到 /usr/bin/ 下</span>
</span></span><span class="line"><span class="cl">wget https://github.com/vesoft-inc/nebula-console/releases/download/v3.2.0/nebula-console-linux-amd64-v3.2.0
</span></span><span class="line"><span class="cl">chmod +x nebula-console*
</span></span><span class="line"><span class="cl">mv nebula-console* /usr/bin/nebula-console
</span></span></code></pre></td></tr></table>
</div>
</div><p>连接到前边我们 nebula-up 准备的集群之上，加载 basketballplayer 这个测试数据：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">nebula-console -u root -p nebula --address<span class="o">=</span>graphd --port<span class="o">=</span><span class="m">9669</span>
</span></span><span class="line"><span class="cl">:play basketballplayer<span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nb">exit</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="gdb-运行-graphd" class="headerLink">
    <a href="#gdb-%e8%bf%90%e8%a1%8c-graphd" class="header-mark"></a>3.3 gdb 运行 graphd</h3><p>我们用 gdb 执行刚刚编译的 nebula-graphd 二进制，让他成为一个新的 graphd 服务，名字就叫 <code>nebula_dev</code>。</p>
<p>首先启动 gdb</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 新开一个 nebula_dev 的 shell</span>
</span></span><span class="line"><span class="cl">docker <span class="nb">exec</span> -ti nebula_dev bash
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> /usr/local/nebula/
</span></span><span class="line"><span class="cl">mkdir -p /home/nebula/build/log
</span></span><span class="line"><span class="cl">gdb bin/nebula-graphd
</span></span></code></pre></td></tr></table>
</div>
</div><p>在 gdb 内部执行设置必要的参数</p>
<p>跟随 fork 的子进程</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-makefile" data-lang="makefile"><span class="line"><span class="cl"><span class="err">set</span> <span class="err">follow-fork-mode</span> <span class="err">child</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>设置待调试 graphd 的启动参数（配置）：</p>
<ul>
<li>meta_server_addrs 填已经启动的集群的所有 metad 的地址</li>
<li>local_ip 和 ws_ip 填本容器的域名，port 是 graphd 监听端口</li>
<li>log_dir 是输出日志的目录，v 和 minloglevel 是日志的输出等级</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-makefile" data-lang="makefile"><span class="line"><span class="cl"><span class="err">set</span> <span class="err">args</span> <span class="nv">--flagfile</span><span class="o">=</span>/usr/local/nebula/etc/nebula-graphd.conf.default <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --meta_server_addrs<span class="o">=</span>metad0:9559,metad1:9559,metad2:9559 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --port<span class="o">=</span><span class="m">9669</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --local_ip<span class="o">=</span>nebula_dev <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --ws_ip<span class="o">=</span>nebula_dev <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --ws_http_port<span class="o">=</span><span class="m">19669</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --log_dir<span class="o">=</span>/home/nebula/build/log <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --v<span class="o">=</span><span class="m">4</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --minloglevel<span class="o">=</span><span class="m">0</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果我们想加断点在 <code>src/common/function/FunctionManager.cpp</code> 2783 行，可以再执行：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-makefile" data-lang="makefile"><span class="line"><span class="cl"><span class="nf">b /home/nebula/src/common/function/FunctionManager.cpp</span><span class="o">:</span>2783
</span></span></code></pre></td></tr></table>
</div>
</div><p>配置前边安装的 gdb-dashboard，一个开源的 gdb 界面插件。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-makefile" data-lang="makefile"><span class="line"><span class="cl"><span class="c"># 设定在 gdb 界面上展示 代码、历史、回调栈、变量、表达几个部分，详细参考 https://github.com/cyrus-and/gdb-dashboard
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="err">dashboard</span> <span class="err">-layout</span> <span class="err">source</span> <span class="err">history</span> <span class="err">stack</span> <span class="err">variables</span> <span class="err">expressions</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>最后我们让进程通过 gdb 跑起来吧：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-makefile" data-lang="makefile"><span class="line"><span class="cl"><span class="err">run</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>之后，我们就可以在这个窗口/shell 会话下调试 graphd 程序了。</p>
<h2 id="修改-nebulagraph-代码" class="headerLink">
    <a href="#%e4%bf%ae%e6%94%b9-nebulagraph-%e4%bb%a3%e7%a0%81" class="header-mark"></a>4 修改 NebulaGraph 代码</h2><p>这里，我以 <a href="https://github.com/vesoft-inc/nebula/issues/3513" target="_blank" rel="noopener noreferrer">#3513</a> 这个 issue 为例子，快速介绍一下代码修改的过程。</p>
<h3 id="读代码" class="headerLink">
    <a href="#%e8%af%bb%e4%bb%a3%e7%a0%81" class="header-mark"></a>4.1 读代码</h3><p>这个 issue 表达的内容是在有一小部分用户决定把 JSON 以 String 的形式存储在 NebulaGraph 中的属性里，因为这种方式比较罕见且不被推崇，NebulaGraph 没有直接支持对 JSON String 直接解析的方法。</p>
<p>本来这个功能是等到很希望得到支持的同学过来亲自去实现的，而在 Issue 中，刚好有一位新手贡献者在里边回复求助如何能开始参与这个贡献。接着这个契机，我去参与讨论看了一下这个功能可以实现成什么样子，最终讨论的结果是可以做成和 MySQL 中的 <code>JSON_EXTRACT</code> 函数那样，但是改为只接受 JSON String，无需处理输出路径参数。</p>
<p>这个任务一句话来说就是为 NebulaGraph 引入一个解析 JSON String 为 Map 的函数。那么，应该大概如何实现这个功能呢？</p>
<h4 id="在哪里修改" class="headerLink">
    <a href="#%e5%9c%a8%e5%93%aa%e9%87%8c%e4%bf%ae%e6%94%b9" class="header-mark"></a>4.1.1 在哪里修改</h4><p>很自然，引入新的函数的更改肯定有很多，所以我们只需要找到之前增加新函数的 PR 就可以快速知道在哪些地方修改了。</p>
<blockquote>
<p>当然我们可以自底向上去了解 NebulaGraph 整体的代码结构，然后一点点找到函数处理的位置，事实上有的时候我们也不得不这么做，这时候除了代码本身，一些面向贡献者的文章可能会帮助我们事半功倍对整体有一个了解，NebulaGraph 官方博客里就有这样的一个系列文章，推荐大家在贡献的时候也去通读一下：<a href="https://www.nebula-graph.com.cn/posts/nebula-graph-source-code-reading-00" target="_blank" rel="noopener noreferrer">nebula-graph.com.cn/posts/nebula-graph-source-code-reading-00</a>。</p>
</blockquote>
<p>于是，我从 <a href="https://github.com/vesoft-inc/nebula/pull/4526" target="_blank" rel="noopener noreferrer">#4526</a> 这个 PR 里了解到所有函数入口都被统一管理在 <a href="https://github.com/vesoft-inc/nebula/blob/master/src/common/function/FunctionManager.cpp" target="_blank" rel="noopener noreferrer">src/common/function/FunctionManager.cpp</a> 之中，通过搜索、理解其中其他某一个函数的关键词之后可以很容易理解一个函数实体的关键词、输入输出数据类型、以及它的处理逻辑的代码在哪里实现。</p>
<p>同时，我注意到在同一个目录下，<code>src/common/function/test/FunctionManagerTest.cpp</code> 之中则是所有这些函数的单元测试代码，用同样的方式也可以知道新加的一个函数需要如何在里边实现基于 gtest 的单元测试。</p>
<h3 id="开始改代码" class="headerLink">
    <a href="#%e5%bc%80%e5%a7%8b%e6%94%b9%e4%bb%a3%e7%a0%81" class="header-mark"></a>4.2 开始改代码</h3><blockquote>
<p>注：在修改代码之前，请确保自己在最新的 master 分支之上创建一个单独的分支，这里的例子中，我把分支名字叫 <code>fn_JSON_EXTRACT</code>：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git checkout master
</span></span><span class="line"><span class="cl">git pull
</span></span><span class="line"><span class="cl">git checkout -b fn_JSON_EXTRACT
</span></span></code></pre></td></tr></table>
</div>
</div></blockquote>
<p>通过 Google 了解与交叉验证 NebulaGraph 内部使用的 utils 库，我知道我应该用 <code>folly::parseJson</code> 把字符串读成 <code>folly::dynamic</code> 然后再 cast 成 NebulaGraph 内置的 Map() 类型，然后，借助于 StackOverflow/GitHub Copilot，我终于完成了第一个版本的代码修改。</p>
<h3 id="调试代码" class="headerLink">
    <a href="#%e8%b0%83%e8%af%95%e4%bb%a3%e7%a0%81" class="header-mark"></a>4.3 调试代码</h3><p>接下来，我兴冲冲地改好了第一版的代码，信心满满地开始编译！实际上因为是 CPP 新手，即使在 Copilot 的加持下，我的代码还是花了好几次修改才通过编译。</p>
<p>然后，我开始用 GDB 把修改了的 GraphD 启动起来，用 console 发起 <code>JSON_EXTRACT</code> 的函数调用，先调通了期待中的效果，并试着跑几种异常的输入，在发现新问题、修改、编译、调试的几轮循环下让代码达到了期望的状态，这时候，我知道我要把代码提交到 GitHub 请项目的资深贡献者帮忙 review 啦！</p>
<h2 id="提交-pr" class="headerLink">
    <a href="#%e6%8f%90%e4%ba%a4-pr" class="header-mark"></a>5 提交 PR</h2><p>PR（Pull Request）是 GitHub 中方便多人代码协作、代码审查中的一种方式，它通过把一个 repo 下的分支与这个审查协作的实例（PR）做映射，得到一个项目下唯一的 PR 号码之后，生成单独的网页，在这个网页下，我们可以做不同贡献者之间的交流和后续的代码更新，这个过程中代码提交者们可以一直在这个分支上不断提交代码直到代码的状态被各方同意之后，就可以合并（merge）到目的分支中。</p>
<p>这个过程可以分为：</p>
<ul>
<li>创建 GitHub 上远程的个人开发分支</li>
<li>基于分支创建目标项目仓库中的 PR</li>
<li>在 PR 中协作、讨论、不断再次提交到开发分支直到多方达到合并、或者关闭的共识</li>
</ul>
<h3 id="提交到个人远程分支" class="headerLink">
    <a href="#%e6%8f%90%e4%ba%a4%e5%88%b0%e4%b8%aa%e4%ba%ba%e8%bf%9c%e7%a8%8b%e5%88%86%e6%94%af" class="header-mark"></a>5.1 提交到个人远程分支</h3><p>这一步骤里，我们要把当前的本地提交的 commit，提交到自己的 GitHub 分叉之中。</p>
<h4 id="commit-本地修改" class="headerLink">
    <a href="#commit-%e6%9c%ac%e5%9c%b0%e4%bf%ae%e6%94%b9" class="header-mark"></a>5.1.1 commit 本地修改</h4><p>首先，我们确认一下本地的修改是否都是期待中的：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 先确定修改的文件</span>
</span></span><span class="line"><span class="cl">$ git status
</span></span><span class="line"><span class="cl"><span class="c1"># 再看看修改的内容</span>
</span></span><span class="line"><span class="cl">$ git diff
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后，把它们 commit（提交在本地仓库）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 添加所有当前目录（. 这个点表示当前目录）修改过的文件为待 commit</span>
</span></span><span class="line"><span class="cl">$ git add .
</span></span><span class="line"><span class="cl"><span class="c1"># 然后我们可以看一下状态，这些修改的文件状态已经不同了</span>
</span></span><span class="line"><span class="cl">$ git status
</span></span><span class="line"><span class="cl"><span class="c1"># 最后，提交在本地仓库，并用 -m 参数指定单行的 commit message</span>
</span></span><span class="line"><span class="cl">$ git commit -m <span class="s2">&#34;feat: introduce function JSON_EXTRACT&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="提交到自己远程的分支" class="headerLink">
    <a href="#%e6%8f%90%e4%ba%a4%e5%88%b0%e8%87%aa%e5%b7%b1%e8%bf%9c%e7%a8%8b%e7%9a%84%e5%88%86%e6%94%af" class="header-mark"></a>5.1.2 提交到自己远程的分支</h4><p>在提交之前，要确保自己的 GitHub 账号之下确实存在 NebulaGraph 代码仓库的分叉（fork），比如我的 GitHub 账号是 wey-gu，我访问，那么我对 <a href="https://github.com/vesoft-inc/nebula" target="_blank" rel="noopener noreferrer">https://github.com/vesoft-inc/nebula</a> 的分叉应该就是 <a href="https://github.com/wey-gu/nebula" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/nebula</a> 。</p>
<p>如果还没有自己的分叉，可以直接在  <a href="https://github.com/vesoft-inc/nebula" target="_blank" rel="noopener noreferrer">https://github.com/vesoft-inc/nebula</a> 上点击右上角的 Fork，创建自己的分叉仓库。</p>
<p>当远程的个人分叉存在之后，我们可以把代码提交上去了</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 添加一个新的远程仓库叫 wey</span>
</span></span><span class="line"><span class="cl">git remote add wey git@github.com:wey-gu/nebula.git
</span></span><span class="line"><span class="cl"><span class="c1"># 提交 JSON_EXTRACT 分支到 wey 这个 remote 仓库</span>
</span></span><span class="line"><span class="cl">git push wey JSON_EXTRACT
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="在个人远程分叉分支上创建-pr" class="headerLink">
    <a href="#%e5%9c%a8%e4%b8%aa%e4%ba%ba%e8%bf%9c%e7%a8%8b%e5%88%86%e5%8f%89%e5%88%86%e6%94%af%e4%b8%8a%e5%88%9b%e5%bb%ba-pr" class="header-mark"></a>5.1.3 在个人远程分叉分支上创建 PR</h4><p>这时候，我们访问这个远程分支：https://github.com/wey-gu/nebula/tree/fn_JSON_EXTRACT ，就能找到 Open PR 的入口：</p>
<p><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/197544575-c04a06cf-b867-409c-832e-f3d893fea784.png" title="https://user-images.githubusercontent.com/1651790/197544575-c04a06cf-b867-409c-832e-f3d893fea784.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/197544575-c04a06cf-b867-409c-832e-f3d893fea784.png">
        
    </a></p>
<p>然后点击 Open pull request 按钮，就进入到创建 PR 的界面了，这和在一般的论坛里提交一个帖子是很类似的：</p>
<p><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/197545824-93706cc7-32a9-4638-84eb-26573106aa28.png" title="https://user-images.githubusercontent.com/1651790/197545824-93706cc7-32a9-4638-84eb-26573106aa28.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/197545824-93706cc7-32a9-4638-84eb-26573106aa28.png">
        
    </a></p>
<p>提交之后，我们可以等待、或者邀请其他人来做代码的审查（review），往往其他的贡献者都能从他们的角度给出一些代码修改的建议和提示，我们需要经过几轮的代码修改、讨论之后使得代码达到最佳的状态。</p>
<p>而这些审查者中除了社区的贡献者（人类）之外，还有一些自动化的机器人，他们会在代码库中自动化的通过持续集成（CI）的方式运行一些自动化的审查工作，可能包括以下几种：</p>
<ul>
<li>CLA：Contributor License Agreement（贡献者许可协议），这是一个要 PR 作者在首次提交代码到项目时签署的协议，因为代码将被提交到公共空间，这份协议的签署意味着作者同意代码被分享、复用、修改这件事情。</li>
<li>lint：代码风格检查，这也是最常见的 CI 任务</li>
<li>test：各种层面的测试检查任务</li>
</ul>
<p>通常来说，这些所有的自动化审查机器人所代表的任务也需要全都通过，代码的状态才能被认为是可以合并的，而不出意外，我首次提交的代码果然有测试的失败。</p>
<p><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/197549538-4bba79b5-6b0a-42f4-b287-55061c08cbe8.png" title="https://user-images.githubusercontent.com/1651790/197549538-4bba79b5-6b0a-42f4-b287-55061c08cbe8.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/197549538-4bba79b5-6b0a-42f4-b287-55061c08cbe8.png">
        
    </a></p>
<h3 id="调试-ci-测试代码" class="headerLink">
    <a href="#%e8%b0%83%e8%af%95-ci-%e6%b5%8b%e8%af%95%e4%bb%a3%e7%a0%81" class="header-mark"></a>5.2 调试 CI 测试代码</h3><p>NebulaGraph 里所有的 CI 测试代码也都能在本地被触发，并且（显然）都有被单独触发的方式，我们需要掌握它们而不是在每次修改一个小的测试修复之后提交到服务器上等着 CI 做全量的运行（这样常常几十分钟就这么浪费掉了）。</p>
<h4 id="ctest" class="headerLink">
    <a href="#ctest" class="header-mark"></a>5.2.1 CTest</h4><p>在这个距离的 PR 提交中，我修改的函数代码同一层级下的单元测试 CTest 就有问题，问题可能是测试代码本身造成、我们的修改破坏了原来的测试用例导致、亦或者是我们自己的测试用例发现了代码修改本身的问题。</p>
<p>这次，我们要根据 CTest 失败的报错进行排查和代码修改，然后编译代码，在本地运行一下这个失败的用例：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 我们需要进入到我们的编译容器内部的 build 目录下</span>
</span></span><span class="line"><span class="cl">$ docker <span class="nb">exec</span> -ti nebula_dev bash
</span></span><span class="line"><span class="cl">$ <span class="nb">cd</span> build
</span></span><span class="line"><span class="cl"><span class="c1"># 在 -DENABLE_TESTING=ON 之中编译，如果之前的编译 job 数下内存已经跑满了的话，这次可以把 job 数调小一点，因为开启测试会占用更多内存</span>
</span></span><span class="line"><span class="cl">$ cmake -DCMAKE_CXX_COMPILER<span class="o">=</span><span class="nv">$TOOLSET_CLANG_DIR</span>/bin/g++ -DCMAKE_C_COMPILER<span class="o">=</span><span class="nv">$TOOLSET_CLANG_DIR</span>/bin/gcc -DENABLE_WERROR<span class="o">=</span>OFF -DCMAKE_BUILD_TYPE<span class="o">=</span>Debug -DENABLE_TESTING<span class="o">=</span>ON ..
</span></span><span class="line"><span class="cl">$ make -j <span class="m">48</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 可以看到编译成功了 CTest 的单元测试二进制可执行文件</span>
</span></span><span class="line"><span class="cl"><span class="c1"># [100%] Linking CXX executable ../../../../bin/test/function_manager_test</span>
</span></span><span class="line"><span class="cl"><span class="c1"># [100%] Built target function_manager_test</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 执行重新修改过的单元测试！</span>
</span></span><span class="line"><span class="cl">$ bin/test/function_manager_test
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[==========]</span> Running <span class="m">11</span> tests from <span class="m">1</span> <span class="nb">test</span> suite.
</span></span><span class="line"><span class="cl"><span class="o">[</span>----------<span class="o">]</span> Global <span class="nb">test</span> environment set-up.
</span></span><span class="line"><span class="cl"><span class="o">[</span>----------<span class="o">]</span> <span class="m">11</span> tests from FunctionManagerTest
</span></span><span class="line"><span class="cl"><span class="o">[</span> RUN      <span class="o">]</span> FunctionManagerTest.testNull
</span></span><span class="line"><span class="cl"><span class="o">[</span>       OK <span class="o">]</span> FunctionManagerTest.testNull <span class="o">(</span><span class="m">0</span> ms<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span> RUN      <span class="o">]</span> FunctionManagerTest.functionCall
</span></span><span class="line"><span class="cl">W20221020 23:35:18.579897 <span class="m">28679</span> Map.cpp:77<span class="o">]</span> JSON_EXTRACT nested layer 1: Map can be populated only by Bool, Double, Int, String value and null, now trying to parse from: object
</span></span><span class="line"><span class="cl"><span class="o">[</span>       OK <span class="o">]</span> FunctionManagerTest.functionCall <span class="o">(</span><span class="m">2</span> ms<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span> RUN      <span class="o">]</span> FunctionManagerTest.time
</span></span><span class="line"><span class="cl"><span class="o">[</span>       OK <span class="o">]</span> FunctionManagerTest.time <span class="o">(</span><span class="m">0</span> ms<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span> RUN      <span class="o">]</span> FunctionManagerTest.returnType
</span></span><span class="line"><span class="cl"><span class="o">[</span>       OK <span class="o">]</span> FunctionManagerTest.returnType <span class="o">(</span><span class="m">0</span> ms<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span> RUN      <span class="o">]</span> FunctionManagerTest.SchemaRelated
</span></span><span class="line"><span class="cl"><span class="o">[</span>       OK <span class="o">]</span> FunctionManagerTest.SchemaRelated <span class="o">(</span><span class="m">0</span> ms<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span> RUN      <span class="o">]</span> FunctionManagerTest.ScalarFunctionTest
</span></span><span class="line"><span class="cl"><span class="o">[</span>       OK <span class="o">]</span> FunctionManagerTest.ScalarFunctionTest <span class="o">(</span><span class="m">0</span> ms<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span> RUN      <span class="o">]</span> FunctionManagerTest.ListFunctionTest
</span></span><span class="line"><span class="cl"><span class="o">[</span>       OK <span class="o">]</span> FunctionManagerTest.ListFunctionTest <span class="o">(</span><span class="m">0</span> ms<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span> RUN      <span class="o">]</span> FunctionManagerTest.duplicateEdgesORVerticesInPath
</span></span><span class="line"><span class="cl"><span class="o">[</span>       OK <span class="o">]</span> FunctionManagerTest.duplicateEdgesORVerticesInPath <span class="o">(</span><span class="m">0</span> ms<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span> RUN      <span class="o">]</span> FunctionManagerTest.ReversePath
</span></span><span class="line"><span class="cl"><span class="o">[</span>       OK <span class="o">]</span> FunctionManagerTest.ReversePath <span class="o">(</span><span class="m">0</span> ms<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span> RUN      <span class="o">]</span> FunctionManagerTest.DataSetRowCol
</span></span><span class="line"><span class="cl"><span class="o">[</span>       OK <span class="o">]</span> FunctionManagerTest.DataSetRowCol <span class="o">(</span><span class="m">0</span> ms<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span> RUN      <span class="o">]</span> FunctionManagerTest.PurityTest
</span></span><span class="line"><span class="cl"><span class="o">[</span>       OK <span class="o">]</span> FunctionManagerTest.PurityTest <span class="o">(</span><span class="m">0</span> ms<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>----------<span class="o">]</span> <span class="m">11</span> tests from FunctionManagerTest <span class="o">(</span><span class="m">5</span> ms total<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>----------<span class="o">]</span> Global <span class="nb">test</span> environment tear-down
</span></span><span class="line"><span class="cl"><span class="o">[==========]</span> <span class="m">11</span> tests from <span class="m">1</span> <span class="nb">test</span> suite ran. <span class="o">(</span><span class="m">5</span> ms total<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>  PASSED  <span class="o">]</span> <span class="m">11</span> tests.
</span></span></code></pre></td></tr></table>
</div>
</div><p>成功！</p>
<p>于是，我把新的更改提交到远程分支上，在 PR 的网页中，可以看到 CI 已经在新的提交的触发下重新编译、执行了，过一会儿果然都 pass 了，于是我兴高采烈地等待着两位以上的审查者帮忙批准代码，然后合并它！</p>
<p>但是，我收到了新的建议：</p>
<p><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/197553025-82f1e7e5-b8a8-4729-a9b8-0f13a34adfed.png" title="https://user-images.githubusercontent.com/1651790/197553025-82f1e7e5-b8a8-4729-a9b8-0f13a34adfed.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/197553025-82f1e7e5-b8a8-4729-a9b8-0f13a34adfed.png">
        
    </a></p>
<p>另一位贡献者请我添加 TCK 的测试用例。</p>
<h4 id="tck" class="headerLink">
    <a href="#tck" class="header-mark"></a>5.2.2 TCK</h4><p>TCK 的全称是 The Cypher Technology Compatibility Kit，它是 NebulaGraph 从 OpenCypher 社区继承演进而来的一套测试框架，我们用 Python 做了测试用例格式兼容的实现。</p>
<p>它的优雅在于，我们可以像写英语一样去描述我们想实现的端到端功能测试用例，像这样！</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-tcl" data-lang="tcl"><span class="line"><span class="cl"><span class="c"># tests/tck/features/function/json_extract.feature
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nv">Feature</span><span class="o">:</span> json_extract Function
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nv">Background</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="nv">Test</span> json_extract function
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nv">Scenario</span><span class="o">:</span> Test Positive Cases
</span></span><span class="line"><span class="cl">    <span class="nv">When</span> executing query:
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">      YIELD JSON_EXTRACT(&#39;{&#34;</span><span class="nv">a</span><span class="s2">&#34;: &#34;</span>foo<span class="s2">&#34;, &#34;</span>b<span class="s2">&#34;: 0.2, &#34;</span>c<span class="s2">&#34;: true}&#39;) AS result;
</span></span></span><span class="line"><span class="cl"><span class="s2">      &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nv">Then</span> the result should be<span class="err">,</span> <span class="ow">in</span> any order:
</span></span><span class="line"><span class="cl">      <span class="o">|</span> <span class="nv">result</span>                      <span class="o">|</span>
</span></span><span class="line"><span class="cl">      <span class="o">|</span> <span class="k">{</span><span class="nv">a</span><span class="o">:</span> <span class="s2">&#34;foo&#34;</span><span class="err">,</span> b: <span class="mf">0.2</span><span class="err">,</span> c: true<span class="k">}</span> <span class="o">|</span>
</span></span><span class="line"><span class="cl">    <span class="nv">When</span> executing query:
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">      YIELD JSON_EXTRACT(&#39;{&#34;</span><span class="nv">a</span><span class="s2">&#34;: 1, &#34;</span>b<span class="s2">&#34;: {}, &#34;</span>c<span class="s2">&#34;: {&#34;</span>d<span class="s2">&#34;: true}}&#39;) AS result;
</span></span></span><span class="line"><span class="cl"><span class="s2">      &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nv">Then</span> the result should be<span class="err">,</span> <span class="ow">in</span> any order:
</span></span><span class="line"><span class="cl">      <span class="o">|</span> <span class="nv">result</span>                      <span class="o">|</span>
</span></span><span class="line"><span class="cl">      <span class="o">|</span> <span class="k">{</span><span class="nv">a</span><span class="o">:</span> <span class="mi">1</span><span class="err">,</span> b: <span class="k">{}</span><span class="err">,</span> c: <span class="k">{</span><span class="nv">d</span><span class="o">:</span> true<span class="k">}}</span> <span class="o">|</span>
</span></span><span class="line"><span class="cl">    <span class="nv">When</span> executing query:
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">      YIELD JSON_EXTRACT(&#39;{}&#39;) AS result;
</span></span></span><span class="line"><span class="cl"><span class="s2">      &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nv">Then</span> the result should be<span class="err">,</span> <span class="ow">in</span> any order:
</span></span><span class="line"><span class="cl">      <span class="o">|</span> <span class="nv">result</span> <span class="o">|</span>
</span></span><span class="line"><span class="cl">      <span class="o">|</span> <span class="k">{}</span>     <span class="o">|</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在添加了自己的一个新的 tck 测试用例文本文件之后，我们只需要在测试文件中临时增加标签，并在执行的时候指定标签，就可以单独执行新增的 tck 测试用例了：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 还是在编译容器内部，进入到 tests 目录下</span>
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> ../tests
</span></span><span class="line"><span class="cl"><span class="c1"># 安装 tck 测试所需依赖</span>
</span></span><span class="line"><span class="cl">python3 -m pip install -r requirements.txt
</span></span><span class="line"><span class="cl">python3 -m pip install nebula3-python<span class="o">==</span>3.1.0
</span></span><span class="line"><span class="cl"><span class="c1"># 运行一个单独为 tck 测试准备的集群</span>
</span></span><span class="line"><span class="cl">make <span class="nv">CONTAINERIZED</span><span class="o">=</span><span class="nb">true</span> <span class="nv">ENABLE_SSL</span><span class="o">=</span><span class="nb">true</span> <span class="nv">CA_SIGNED</span><span class="o">=</span><span class="nb">true</span> up
</span></span><span class="line"><span class="cl"><span class="c1"># 给 tests/tck/features/function/json_extract.feature 以@开头第一行加上标签，比如 @wey</span>
</span></span><span class="line"><span class="cl">vi tests/tck/features/function/json_extract.feature
</span></span><span class="line"><span class="cl"><span class="c1"># 执行 pytest (包含 tck 用例)，因为制定了 -m &#34;wey&#34;，只有 tests/tck/features/function/json_extract.feature 会被执行</span>
</span></span><span class="line"><span class="cl">python3 -m pytest -m <span class="s2">&#34;wey&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 关闭 pytest 所依赖的集群</span>
</span></span><span class="line"><span class="cl">make <span class="nv">CONTAINERIZED</span><span class="o">=</span><span class="nb">true</span> <span class="nv">ENABLE_SSL</span><span class="o">=</span><span class="nb">true</span> <span class="nv">CA_SIGNED</span><span class="o">=</span><span class="nb">true</span> down
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>延伸阅读：</p>
<ul>
<li>基于 BDD 理论的 Nebula 集成测试框架重构，https://nebula-graph.com.cn/posts/bdd-testing-practice</li>
<li>如何向 NebulaGraph 增加一个测试用例，https://nebula-graph.com.cn/posts/bdd-testing-practice-add-test-case</li>
</ul>
</blockquote>
<h3 id="邀请再次-review" class="headerLink">
    <a href="#%e9%82%80%e8%af%b7%e5%86%8d%e6%ac%a1-review" class="header-mark"></a>5.3 邀请再次 review</h3><p>待我们把需要的测试调通、再次提交 PR 并且 CI 用例全都通过之后，我们可以再次邀请之前帮助审查代码的同学做做最后的查看，如果一切都顺利，代码就会被合并了！</p>
<p><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/197557709-2c851a03-d001-4fc9-bc5a-b858219fbded.png" title="https://user-images.githubusercontent.com/1651790/197557709-2c851a03-d001-4fc9-bc5a-b858219fbded.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/197557709-2c851a03-d001-4fc9-bc5a-b858219fbded.png">
        
    </a></p>
<blockquote>
<p>题图来自 <a href="https://unsplash.com/photos/TGEWJXylgJk" target="_blank" rel="noopener noreferrer">Jon</a></p>
</blockquote>]]></description>
</item></channel>
</rss>
