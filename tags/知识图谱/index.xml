<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>知识图谱 - 标签 - siwei.io</title>
        <link>https://siwei.io/tags/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/</link>
        <description>知识图谱 - 标签 - siwei.io</description>
        <generator>Hugo -- gohugo.io</generator><managingEditor>weyl.gu@gmail.com (Wey Gu)</managingEditor>
            <webMaster>weyl.gu@gmail.com (Wey Gu)</webMaster><lastBuildDate>Wed, 19 Jul 2023 16:38:34 &#43;0800</lastBuildDate><atom:link href="https://siwei.io/tags/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/" rel="self" type="application/rss+xml" /><item>
    <title>Demo：NebulaGraph 的 Graph RAG</title>
    <link>https://siwei.io/demos/graph-rag/</link>
    <pubDate>Wed, 19 Jul 2023 16:38:34 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/demos/graph-rag/</guid>
    <description><![CDATA[<iframe
  src="https://graph-rag.streamlit.app/?embed=true"
  height="900"
  style="width:100%;border:none;"
></iframe>
]]></description>
</item><item>
    <title>Demo：NebulaGraph 的知识图谱构建与 Text2Cypher</title>
    <link>https://siwei.io/demos/text2cypher/</link>
    <pubDate>Wed, 19 Jul 2023 16:28:34 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/demos/text2cypher/</guid>
    <description><![CDATA[<iframe
  src="https://demo-kg-build-cn.streamlit.app/?embed=true"
  height="900"
  style="width:100%;border:none;"
></iframe>
]]></description>
</item><item>
    <title>Text2Cypher：大语言模型驱动的图谱查询生成</title>
    <link>https://siwei.io/llm-text-to-nebulagraph-query/</link>
    <pubDate>Mon, 17 Jul 2023 20:30:04 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/llm-text-to-nebulagraph-query/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/llm-text-to-nebulagraph-query/featured-image.webp" referrerpolicy="no-referrer">
            </div><p>从 GPT-3 开始展现出超出预期的”理解能力“开始，我们一直在做 Graph + LLM 技术组合、互补的研究、探索和阜分享，截止到现在 NebulaGraph 已经在 LlamaIndex 与 Langchain 项目做出了不少领先的贡献，从本文开始，我们就把其中一些阶段性的成功、方法单独分享给大家。</p>
<p>本文的主题是我们认为这个领域最低垂的果实，text2cypher：自然语言生成图查询。</p>
<h2 id="text2cypher" class="headerLink">
    <a href="#text2cypher" class="header-mark"></a>1 Text2Cypher</h2><p>顾名思义， Text2Cypher 做的就是把自然语言的文本转换成 Cypher 查询语句的这件事儿，和另一个大家可能已经比较熟悉的场景 Text2SQL：文本转换 SQL 在形式上没有什么区别。而本质上，大多数知识图谱、图数据库的应用都是在图上按照人类意愿进行查询，我们在图数据库上构造方便的可视化工具、封装方便的 API 的工作都是为这个目标服务的。</p>
<p>一直以来，阻碍图数据库、知识图谱被更广泛应用的主要因素可能就是查询图数据库的门槛了。那么，在没有大语言模型的时候，我们是怎么做的呢？</p>
<h2 id="传统的-text2cypher" class="headerLink">
    <a href="#%e4%bc%a0%e7%bb%9f%e7%9a%84-text2cypher" class="header-mark"></a>2 传统的 Text2Cypher</h2><p>文本到查询的这个领域在大语言模型之前就一直存在这样的需求，一直是知识图谱最常见的应用之一，比如 KBQA（基于知识库的问答系统）的系统内部本质上就是 text2cypher。</p>
<p>这里以我之前写的项目 <a href="https://www.siwei.io/siwi" target="_blank" rel="noopener noreferrer">Siwi</a> （发音：/ˈsɪwi/， 一个基于篮球运动员数据集的问答应用）为例，了解一下它的后端架构：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">┌─────────────┬───────────────────────────────────┐
│      Speech │  Frontend                         │
│  ┌──────────▼──────────┐ Siwi, /ˈsɪwi/          │
│  │ Web_Speech_API      │ A PoC of Dialog System │
│  │ Vue.JS              │ With Graph Database    │
│  │                     │ Backed Knowledge Graph │
│  └──────────┬──────────┘                        │
│             │  Sentence  Backend                │
│┌────────────┼────────────────────────────┐      │
││ ┌──────────▼──────────┐                 │      │
││ │ Web API, Flask      │ ./app/          │      │
││ └──────────┬──────────┘                 │      │
││            │  Sentence  ./bot/          │      │
││ ┌──────────▼──────────┐                 │      │
││ │ Intent Matching,    │ ./bot/classifier│      │
││ │ Symentic Processing │                 │      │
││ └──────────┬──────────┘                 │      │
││            │  Intent, Enties            │      │
││ ┌──────────▼──────────┐                 │      │
││ │ Intent Actor        │ ./bot/actions   │      │
│└─┴──────────┬──────────┴─────────────────┘      │
│             │  Graph Query                      │
│  ┌──────────▼──────────┐                        │
│  │ Graph Database      │  NebulaGraph           │
│  └─────────────────────┘                        │
└─────────────────────────────────────────────────┘
</code></pre></td></tr></table>
</div>
</div><p>当一个问题语句发送过来之后，它首先要做意图识别（Intent）、实体识别（Entity），然后再利用 NLP 模型或者代码把相应的意图和实体构造成知识图谱的查询语句，最终查询图数据库，并根据返回结构构造答案。</p>
<p>可以想象，让程序能够：</p>
<ul>
<li>从自然语言中理解意图：对应到哪一类支持回答的问题</li>
<li>找出实体：问题中涉及到的主要个体</li>
<li>从意图和实体构造查询语句</li>
</ul>
<p>不可能是一个容易的开发工作，一个真正能够落地的实现要训练的模型或者实现的规则代码所考虑的边界条件可能非常多。</p>
<h2 id="用语言模型做-text2cypher" class="headerLink">
    <a href="#%e7%94%a8%e8%af%ad%e8%a8%80%e6%a8%a1%e5%9e%8b%e5%81%9a-text2cypher" class="header-mark"></a>3 用语言模型做 Text2Cypher</h2><p>而在”后大语言模型“时代，这种从前需要专门训练或者写规则的”智能“应用场景成了通用模型+提示工程（Prompt Engineering）就能完成的任务。</p>
<blockquote>
<p>注：提示工程指通过自然语言描述，让生成模型、语言模型完成”智能“任务的方法。</p>
</blockquote>
<p>事实上，在 GPT-3 刚发布之后，我就开始利用它帮助我写很多非常复杂的 Cypher 查询语句了，我发现它可以写很多非常复杂的模式匹配、多步条件那种之前我需要一点点调试半天才能写出来的语句，通常在它的答案之上，我只需要稍微修改就可以了，而且往往我还能从它的答案里知道我之前没了解到的 Cypher 语法盲区。</p>
<p>后来，在今年二月份的时候，我就试着实现了一个基于 GPT-3 （因为那时候还没有 GPT-3.5）的项目：<a href="https://ngql-gpt.siwei.io/" target="_blank" rel="noopener noreferrer">ngql-GPT</a>（<a href="https://github.com/wey-gu/NebulaGraph-GPT" target="_blank" rel="noopener noreferrer">代码仓库</a>）。</p>
<iframe width="800" height="450" src="https://user-images.githubusercontent.com/1651790/218627408-995b81e1-9b01-423c-ba90-849faaad6f5d.mp4"> </iframe>
<p>它的工作原理非常简单，和 Text2SQL 没有区别，语言模型已经通过公共领域学习了 Cypher 的语法表达，我们在提出任务的时候，只需要让大模型知道我们要查询的图的 Schema 作为上下文就可以了。</p>
<p>所以，基本上 Prompt 就是：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">你是一位 NebulaGraph Cypher 专家，请根据给定的图 Schema 和问题，写出查询语句。
schema 如下：
---
{schema}
---
问题如下：
---
{question}
---
下面写出查询语句：
</code></pre></td></tr></table>
</div>
</div><p>然而，真实世界的 prompt 往往还需要增加额外的要求：</p>
<ul>
<li>只返回语句，不用给出解释，不用道歉</li>
<li>强调不要写超出 schema 之外的点、边类型</li>
</ul>
<p>感兴趣的同学可以参考我在 LlamaIndex 的 <a href="https://github.com/jerryjliu/llama_index/blob/71919f9dfa09e9628af8b3a59d497ad02a7a82f8/llama_index/query_engine/knowledge_graph_query_engine.py#L24" target="_blank" rel="noopener noreferrer">KnowlegeGraph Query Engine 中的实现</a>。</p>
<p>在真实场景中，我们想快速学习、构建大语言模型应用的时候，常常会用到 Langchain 或者 LlamaIndex 这样的编排（Orchestrator）工具，它们可以帮我们做很多合理的抽象，从而避免从头去实现很多通用的脚手架代码：</p>
<ul>
<li>和不同语言模型交互</li>
<li>和不同向量数据库交互</li>
<li>数据分割</li>
</ul>
<p>而且，这些编排工具还内置了很多工程方法的最佳实践，这样，我们常常调用一个方法就可以用到最新最好用的大语言模型研究论文的方法了，比如 <a href="https://github.com/jerryjliu/llama_index/tree/main/llama_index/query_engine/flare" target="_blank" rel="noopener noreferrer">FLARE</a>、<a href="https://github.com/jerryjliu/llama_index/blob/main/docs/community/integrations/guidance.md" target="_blank" rel="noopener noreferrer">Guidence</a>。</p>
<p>为此，我在 LlamaIndex 和 Langchain 中都贡献了可以方便进行 NebulaGraph 上 Text2Cypher 的工具，真正做到 3 行代码，Text2Cypher。</p>
<h2 id="nebulagraph-上的-text2cypher" class="headerLink">
    <a href="#nebulagraph-%e4%b8%8a%e7%9a%84-text2cypher" class="header-mark"></a>4 NebulaGraph 上的 Text2Cypher</h2><p>在 LlamaIndex 的 <code>KnowledgeQueryEngine</code> 和 LangChain 的 <code>NebulaGraphQAChain</code> 中：NebulaGraph 图数据库的 Schema 获取、Cypher 语句生成的 Prompt、各种 LLM 的调用、结果的处理、衔接我们可以全都不用关心，开箱即用！</p>
<h3 id="使用-llamaindex" class="headerLink">
    <a href="#%e4%bd%bf%e7%94%a8-llamaindex" class="header-mark"></a>4.1 使用 LlamaIndex</h3><p>用 LlamaIndex，我们只需要：</p>
<ul>
<li>创建一个 <code>NebulaGraphStore</code> 实例</li>
<li>创建一个 <code>KnowledgeQueryEngine</code></li>
</ul>
<p>就可以直接进行问答了，是不是超级简单？</p>
<blockquote>
<p>参考文档：https://gpt-index.readthedocs.io/en/latest/examples/query_engine/knowledge_graph_query_engine.html</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">llama_index.query_engine</span> <span class="kn">import</span> <span class="n">KnowledgeGraphQueryEngine</span>
<span class="kn">from</span> <span class="nn">llama_index.storage.storage_context</span> <span class="kn">import</span> <span class="n">StorageContext</span>
<span class="kn">from</span> <span class="nn">llama_index.graph_stores</span> <span class="kn">import</span> <span class="n">NebulaGraphStore</span>

<span class="n">graph_store</span> <span class="o">=</span> <span class="n">NebulaGraphStore</span><span class="p">(</span>
  <span class="n">space_name</span><span class="o">=</span><span class="n">space_name</span><span class="p">,</span> <span class="n">edge_types</span><span class="o">=</span><span class="n">edge_types</span><span class="p">,</span> <span class="n">rel_prop_names</span><span class="o">=</span><span class="n">rel_prop_names</span><span class="p">,</span> <span class="n">tags</span><span class="o">=</span><span class="n">tags</span><span class="p">)</span>
<span class="n">storage_context</span> <span class="o">=</span> <span class="n">StorageContext</span><span class="o">.</span><span class="n">from_defaults</span><span class="p">(</span><span class="n">graph_store</span><span class="o">=</span><span class="n">graph_store</span><span class="p">)</span>

<span class="n">nl2kg_query_engine</span> <span class="o">=</span> <span class="n">KnowledgeGraphQueryEngine</span><span class="p">(</span>
    <span class="n">storage_context</span><span class="o">=</span><span class="n">storage_context</span><span class="p">,</span>
    <span class="n">service_context</span><span class="o">=</span><span class="n">service_context</span><span class="p">,</span>
    <span class="n">llm</span><span class="o">=</span><span class="n">llm</span><span class="p">,</span>
    <span class="n">verbose</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
<span class="p">)</span>
<span class="c1"># 问答</span>
<span class="n">response</span> <span class="o">=</span> <span class="n">nl2kg_query_engine</span><span class="o">.</span><span class="n">query</span><span class="p">(</span>
    <span class="s2">&#34;Tell me about Peter Quill?&#34;</span><span class="p">,</span>
<span class="p">)</span>
<span class="c1"># 只生成语句</span>
<span class="n">graph_query</span> <span class="o">=</span> <span class="n">nl2kg_query_engine</span><span class="o">.</span><span class="n">generate_query</span><span class="p">(</span>
    <span class="s2">&#34;Tell me about Peter Quill?&#34;</span><span class="p">,</span>
<span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="使用-langchain" class="headerLink">
    <a href="#%e4%bd%bf%e7%94%a8-langchain" class="header-mark"></a>4.2 使用 Langchain</h3><p>类似的，在 Langchain 里，我们只需要：</p>
<ul>
<li>创建一个 <code>NebulaGraph</code>实例</li>
<li>创建一个 <code>NebulaGraphQAChain</code> 实例</li>
</ul>
<p>就可以直接提问了。</p>
<blockquote>
<p>参考文档：https://python.langchain.com/docs/modules/chains/additional/graph_nebula_qa</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">langchain.chat_models</span> <span class="kn">import</span> <span class="n">ChatOpenAI</span>
<span class="kn">from</span> <span class="nn">langchain.chains</span> <span class="kn">import</span> <span class="n">NebulaGraphQAChain</span>
<span class="kn">from</span> <span class="nn">langchain.graphs</span> <span class="kn">import</span> <span class="n">NebulaGraph</span>

<span class="n">graph</span> <span class="o">=</span> <span class="n">NebulaGraph</span><span class="p">(</span>
    <span class="n">space</span><span class="o">=</span><span class="n">space_name</span><span class="p">,</span>
    <span class="n">username</span><span class="o">=</span><span class="s2">&#34;root&#34;</span><span class="p">,</span>
    <span class="n">password</span><span class="o">=</span><span class="s2">&#34;nebula&#34;</span><span class="p">,</span>
    <span class="n">address</span><span class="o">=</span><span class="s2">&#34;127.0.0.1&#34;</span><span class="p">,</span>
    <span class="n">port</span><span class="o">=</span><span class="mi">9669</span><span class="p">,</span>
    <span class="n">session_pool_size</span><span class="o">=</span><span class="mi">30</span><span class="p">,</span>
<span class="p">)</span>

<span class="n">chain</span> <span class="o">=</span> <span class="n">NebulaGraphQAChain</span><span class="o">.</span><span class="n">from_llm</span><span class="p">(</span>
    <span class="n">llm</span><span class="p">,</span> <span class="n">graph</span><span class="o">=</span><span class="n">graph</span><span class="p">,</span> <span class="n">verbose</span><span class="o">=</span><span class="kc">True</span>
<span class="p">)</span>

<span class="n">chain</span><span class="o">.</span><span class="n">run</span><span class="p">(</span>
    <span class="s2">&#34;Tell me about Peter Quill?&#34;</span><span class="p">,</span>
<span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="demo" class="headerLink">
    <a href="#demo" class="header-mark"></a>5 Demo</h2><p><a href="https://www.siwei.io/demos/text2cypher/" target="_blank" rel="noopener noreferrer">demo 地址</a></p>
<iframe width="800" height="857" src="https://user-images.githubusercontent.com/1651790/254521700-6de6aadf-4b62-495a-9276-ef866ebb4add.mp4"> </iframe>
<p>这个 Demo 展示了如何利用 LLM 从不同类型的信息源（以维基百科为例）中抽取知识三元组，并存储到图数据库 NebulaGraph 中。</p>
<p>本 Demo 中，我们先抽取了维基百科中关于《银河护卫队3》的信息，然后利用 LLM 生成的知识三元组，构建了一个图谱。 然后利用 Cypher 查询图谱，最后利用 LlamaIndex 和 Langchain 中的 Text2Cypher，实现了自然语言查询图谱的功能。</p>
<p>您可以点击其他标签亲自试玩图谱的可视化、Cypher 查询、自然语言查询（Text2Cypher）等功能。</p>
<p>这里可以<a href="https://www.siwei.io/demo-dumps/kg-llm/KG_Building.ipynb" target="_blank" rel="noopener noreferrer">下载</a> 完整的 Notebook。</p>
<h2 id="结论" class="headerLink">
    <a href="#%e7%bb%93%e8%ae%ba" class="header-mark"></a>6 结论</h2><p>有了 LLM，知识图谱、NebulaGraph 图数据库中的的数据中进行 Text2Cypher 从来没有这么简单过。</p>
<p>一个具有更强人机、机器接入的知识图谱可以代表了全新的时代，我们可能不需要从前那样高额成本去实现图库之上的后端服务，也不再需要培训才能让领域专家从图中获取重要的洞察了。</p>
<p>利用 LlamaIndex 或者 Langchain 中的生态集成，我们可以几乎没有开发成本地几行代码把自己的应用、图数据智能化。</p>
<p>然而，Text2Cypher 只是一个开始，请大家关注我们后续的文章，展现更多知识图谱、图数据库为大语言模型生态带来的变革。</p>
<blockquote>
<p>题图 <strong>prompt</strong>：</p>
<p><em>In an artful fusion of language and AI, this minimalist oil painting captures the essence of technological advancement. Delicate brushstrokes depict a harmony of binary code and flowing words, converging into a central point. With a refined color palette and clean composition, the artwork represents the symbiotic relationship between language and artificial intelligence, inviting contemplation and appreciation.</em></p>
</blockquote>]]></description>
</item><item>
    <title>图数据库体操：用 Nebula Graph 搭成语图谱解汉兜</title>
    <link>https://siwei.io/resolve-wordle/</link>
    <pubDate>Mon, 28 Feb 2022 19:18:59 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/resolve-wordle/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/resolve-wordle/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>我发现用 Nebula Graph 的图查询解 Antfu 的汉兜（最好的中文成语版 wordle 👉🏻 handle.antfu.me）特别有意思，很适合每天写图库语句的体操练习，本文揭示如何用知识图谱<del>作弊</del>解汉兜😁</p>
</blockquote>
<h2 id="什么是汉兜" class="headerLink">
    <a href="#%e4%bb%80%e4%b9%88%e6%98%af%e6%b1%89%e5%85%9c" class="header-mark"></a>1 什么是汉兜？</h2><p>汉兜（https://handle.antfu.me）是由 Vue/Vite 核心团队的 Antfu 的又一个非常酷的作品，一个非常精致的汉字版的 Wordle，他是是一个每日挑战的填字游戏的中文成语版。</p>
<p>每天，汉兜会发起一个猜成语挑战，人们要在十次内才对它才能获胜，每一步之后都会收到相应的文字、声母、韵母、声调的匹配情况的提示，其中：绿色表示这个因素存在并且位置匹配、橘色表示这个元素存在但是位置不对，详细的规则可见如下的网页截图：</p>
<p><figure><a class="lightgallery" href="/resolve-wordle/handle-intro.webp" title="/resolve-wordle/handle-intro.webp" data-thumbnail="/resolve-wordle/handle-intro.webp">
        <img
            
            loading="lazy"
            src="/resolve-wordle/handle-intro.webp"
            srcset="/resolve-wordle/handle-intro.webp, /resolve-wordle/handle-intro.webp 1.5x, /resolve-wordle/handle-intro.webp 2x"
            sizes="auto"
            alt="/resolve-wordle/handle-intro.webp" height="1800"  width="1284" >
    </a></figure></p>
<p>汉兜的乐趣就我们在于在有限的尝试过程中，在大脑中搜寻可能的答案，不断去逼近真理，任何试图作弊、讨巧去泄漏结果的行为都是很无趣、倒胃口的（比如从开源的汉兜代码里窃取信息），这个过程就像在做大脑的体操。</p>
<p>说到大脑的成语词汇量体操，我突然想到，为什么我们不能在大脑之外造一个汉语成语知识图谱，然后基于这个图谱去做图数据库查询语法体操呢？</p>
<h2 id="构造解决汉兜的成语知识图谱" class="headerLink">
    <a href="#%e6%9e%84%e9%80%a0%e8%a7%a3%e5%86%b3%e6%b1%89%e5%85%9c%e7%9a%84%e6%88%90%e8%af%ad%e7%9f%a5%e8%af%86%e5%9b%be%e8%b0%b1" class="header-mark"></a>2 构造解决汉兜的成语知识图谱</h2><h3 id="什么是知识图谱" class="headerLink">
    <a href="#%e4%bb%80%e4%b9%88%e6%98%af%e7%9f%a5%e8%af%86%e5%9b%be%e8%b0%b1" class="header-mark"></a>2.1 什么是知识图谱？</h3><p>简单来说，知识图谱是一个连接实体之间关联关系的网络，它最初由 Google 提出并用来满足搜索引擎中基于知识推理才可获得（而不是网页倒排索引）的搜索问题，比如：”姚明妻子的年龄？“、”火箭队得过几次总冠军？“</p>
<p>这里边，我们关注的条件。到 2022 年的现在，知识图谱已经被广泛应用在推荐系统、问答系统、安全风控等等更多搜索之外的领域。</p>
<h3 id="为什么需要用知识图谱解决汉兜" class="headerLink">
    <a href="#%e4%b8%ba%e4%bb%80%e4%b9%88%e9%9c%80%e8%a6%81%e7%94%a8%e7%9f%a5%e8%af%86%e5%9b%be%e8%b0%b1%e8%a7%a3%e5%86%b3%e6%b1%89%e5%85%9c" class="header-mark"></a>2.2 为什么需要用知识图谱解决汉兜？</h3><p><del>原因就是：because I can</del></p>
<p>实际上，我们在大脑中解决字谜游戏的过程像极了图谱网络中的信息搜寻的过程，汉兜的解谜反馈提示条件天然适合被用图谱的语义来进行表达。在本文后边，你们会发现解谜条件翻译成图语义是非常非常自然的，这个问题就像是一个天然的为图谱而存在的练习一样，我相信这和知识图谱的结构和人脑中的知识结构非常接近有很大的关系。</p>
<h3 id="如何构建面向汉兜解谜的知识图谱" class="headerLink">
    <a href="#%e5%a6%82%e4%bd%95%e6%9e%84%e5%bb%ba%e9%9d%a2%e5%90%91%e6%b1%89%e5%85%9c%e8%a7%a3%e8%b0%9c%e7%9a%84%e7%9f%a5%e8%af%86%e5%9b%be%e8%b0%b1" class="header-mark"></a>2.3 如何构建面向汉兜解谜的知识图谱？</h3><p>知识图谱是由实体（顶点）和关系（边）组成的，用图数据库管理系统（Graph Database MS）可以很方便进行知识的入库、更改、查询、甚至可视化探索。</p>
<p>在本文里，我将利用开源的分布式图数据库 Nebula Graph 开实践这个过程，具体图谱系统的搭建我都会放在文末。</p>
<p>在本章，我们只讨论图谱的建模：如何面向汉兜的解谜去设计“实体”与“关系”。</p>
<h4 id="图建模" class="headerLink">
    <a href="#%e5%9b%be%e5%bb%ba%e6%a8%a1" class="header-mark"></a>2.3.1 图建模</h4><h5 id="最初的想法" class="headerLink">
    <a href="#%e6%9c%80%e5%88%9d%e7%9a%84%e6%83%b3%e6%b3%95" class="header-mark"></a>2.3.1.1 最初的想法</h5><p>首先，一定存在的实体是：</p>
<ul>
<li>成语</li>
<li>汉字</li>
</ul>
<p>成语-[包含]-&gt;汉字，每个汉字-[读作]-&gt;读音。</p>
<p>其次，因为解谜过程中涉及到了声母、韵母以及声调的条件，考虑到图谱本身的量级非常小（千级别），而且字的读音是一对多的关系，我把读音和声母（包涵声母-initial和韵母-final）也作为实体，他们之间的关系则是顺理成章了：</p>
<p><figure><a class="lightgallery" href="/resolve-wordle/schema_v0.webp" title="schema_v0" data-thumbnail="/resolve-wordle/schema_v0.webp">
        <img
            
            loading="lazy"
            src="/resolve-wordle/schema_v0.webp"
            srcset="/resolve-wordle/schema_v0.webp, /resolve-wordle/schema_v0.webp 1.5x, /resolve-wordle/schema_v0.webp 2x"
            sizes="auto"
            alt="schema_v0" height="958"  width="2200" >
    </a></figure></p>
<h5 id="最终的版本" class="headerLink">
    <a href="#%e6%9c%80%e7%bb%88%e7%9a%84%e7%89%88%e6%9c%ac" class="header-mark"></a>2.3.1.2 最终的版本</h5><p>然而，我在后边基于图谱进行查询的时候发现最初的建模会使得(成语)&ndash;&gt;(字)&ndash;&gt;(读音)查询过程中丢失了这个字特定的读法的条件，所以我最终的建模是：</p>
<p><figure><a class="lightgallery" href="/resolve-wordle/schema_v1.webp" title="schema_v1" data-thumbnail="/resolve-wordle/schema_v1.webp">
        <img
            
            loading="lazy"
            src="/resolve-wordle/schema_v1.webp"
            srcset="/resolve-wordle/schema_v1.webp, /resolve-wordle/schema_v1.webp 1.5x, /resolve-wordle/schema_v1.webp 2x"
            sizes="auto"
            alt="schema_v1" height="1198"  width="1916" >
    </a></figure></p>
<p>这样，纯文字的条件只涉及了<code>(成语)--&gt;(字)</code> 这一跳，而读音、声母、声调的条件则是另一条关系路径，既没有最初版本条件的冗余，又可以在一个路径模式匹配里带上两种条件（后边的例子里会涉及这样的表达）。</p>
<h4 id="构建成语知识图谱" class="headerLink">
    <a href="#%e6%9e%84%e5%bb%ba%e6%88%90%e8%af%ad%e7%9f%a5%e8%af%86%e5%9b%be%e8%b0%b1" class="header-mark"></a>2.3.2 构建成语知识图谱</h4><p>有了建模、这么简单的图谱的构建就剩下了数据的收集、清洗和入库。</p>
<p>对于所有成语数据和他们的读音，我一方面直接抽取了汉兜代码内部的<a href="https://github.com/antfu/handle/" target="_blank" rel="noopener noreferrer">数据</a>、另一方面利用 <a href="https://pypinyin.readthedocs.io/" target="_blank" rel="noopener noreferrer">PyPinyin</a> 这个开源的 Python 库将汉兜数据中没有读音的数据获得读音，同时，我也用到了 PyPinyin 里的很多方便的函数比如获取一个拼音的声母、韵母。</p>
<p>构建工具的代码在这里：https://github.com/wey-gu/chinese-graph</p>
<p>更多信息我也放在文末的附录之中。</p>
<h2 id="开始知识图谱查询体操" class="headerLink">
    <a href="#%e5%bc%80%e5%a7%8b%e7%9f%a5%e8%af%86%e5%9b%be%e8%b0%b1%e6%9f%a5%e8%af%a2%e4%bd%93%e6%93%8d" class="header-mark"></a>3 开始知识图谱查询体操</h2><p>至此，我假设咱们都已经有了我帮大家搭建的成语<del>作弊</del>知识图谱了，开始我们的图谱查询体操吧！</p>
<p>首先，打开汉兜 👉🏻 <a href="https://handle.antfu.me/" target="_blank" rel="noopener noreferrer">https://handle.antfu.me/</a></p>
<p>假设我们想从一个成语开始，如果你没有想法的话可以试试这个：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="o">//</span><span class="w"> </span><span class="err">匹配成语中的一个结果</span><span class="w">
</span><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">x</span><span class="p">:</span><span class="o">`</span><span class="n">idiom</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="k">RETURN</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">1</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">返回结果</span><span class="w">
</span><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="p">(</span><span class="s2">&#34;爱憎分明&#34;</span><span class="w"> </span><span class="p">:</span><span class="n">idiom</span><span class="err">{</span><span class="n">pinyin</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;[&#39;ai4&#39;, &#39;zeng1&#39;, &#39;fen1&#39;, &#39;ming2&#39;]&#34;</span><span class="err">}</span><span class="p">)</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>然后我们把它填到汉兜之中，获得第一次尝试的提示条件：</p>
<p><figure><a class="lightgallery" href="/resolve-wordle/initial_word.webp" title="/resolve-wordle/initial_word.webp" data-thumbnail="/resolve-wordle/initial_word.webp">
        <img
            
            loading="lazy"
            src="/resolve-wordle/initial_word.webp"
            srcset="/resolve-wordle/initial_word.webp, /resolve-wordle/initial_word.webp 1.5x, /resolve-wordle/initial_word.webp 2x"
            sizes="auto"
            alt="/resolve-wordle/initial_word.webp" height="202"  width="722" >
    </a></figure></p>
<p>我们运气不错，得到了三个位置上的条件！</p>
<ul>
<li>有一个非第一个位置的字，拼音是 4 声，韵母是 ai，但不是爱（爱）</li>
<li>有一个一声的字，不在第二个位置（憎）</li>
<li>有一个字韵母是 ing，不在第四个位置（明）</li>
<li>第四个字是二声（明）</li>
</ul>
<p>下面，我们开始图数据库语句体操！</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="o">//</span><span class="w"> </span><span class="err">有一个非第一个位置的字，拼音是</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="err">声，韵母是</span><span class="w"> </span><span class="n">ai</span><span class="err">，但不是爱</span><span class="w">
</span><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">char0</span><span class="p">:</span><span class="o">`</span><span class="k">character</span><span class="o">`</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[</span><span class="n">with_char_0</span><span class="p">:</span><span class="o">`</span><span class="n">with_character</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">x</span><span class="p">:</span><span class="o">`</span><span class="n">idiom</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">with_pinyin_0</span><span class="p">:</span><span class="o">`</span><span class="n">with_pinyin</span><span class="o">`</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">pinyin_0</span><span class="p">:</span><span class="o">`</span><span class="n">character_pinyin</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">with_pinyin_part</span><span class="o">`</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="o">`</span><span class="n">final_part_0</span><span class="o">`</span><span class="p">:</span><span class="o">`</span><span class="n">pinyin_part</span><span class="o">`</span><span class="err">{</span><span class="n">part_type</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;final&#34;</span><span class="err">}</span><span class="p">)</span><span class="w">
</span><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="o">`</span><span class="n">final_part_0</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;ai&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">pinyin_0</span><span class="p">.</span><span class="o">`</span><span class="n">character_pinyin</span><span class="o">`</span><span class="p">.</span><span class="n">tone</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">with_pinyin_0</span><span class="p">.</span><span class="o">`</span><span class="n">position</span><span class="o">`</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">with_char_0</span><span class="p">.</span><span class="o">`</span><span class="n">position</span><span class="o">`</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">char0</span><span class="p">)</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="s2">&#34;爱&#34;</span><span class="w">
</span><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">有一个一声的字，不在第二个位置</span><span class="w">
</span><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">x</span><span class="p">:</span><span class="o">`</span><span class="n">idiom</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="o">-</span><span class="p">[</span><span class="n">with_pinyin_1</span><span class="p">:</span><span class="o">`</span><span class="n">with_pinyin</span><span class="o">`</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">pinyin_1</span><span class="p">:</span><span class="o">`</span><span class="n">character_pinyin</span><span class="o">`</span><span class="p">)</span><span class="w">
</span><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">pinyin_1</span><span class="p">.</span><span class="o">`</span><span class="n">character_pinyin</span><span class="o">`</span><span class="p">.</span><span class="n">tone</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">with_pinyin_1</span><span class="p">.</span><span class="o">`</span><span class="n">position</span><span class="o">`</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">1</span><span class="w">
</span><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">有一个字韵母是</span><span class="w"> </span><span class="n">ing</span><span class="err">，不在第四个位置</span><span class="w">
</span><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">x</span><span class="p">:</span><span class="o">`</span><span class="n">idiom</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="o">-</span><span class="p">[</span><span class="n">with_pinyin_2</span><span class="p">:</span><span class="o">`</span><span class="n">with_pinyin</span><span class="o">`</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(:</span><span class="o">`</span><span class="n">character_pinyin</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">with_pinyin_part</span><span class="o">`</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">final_part_2</span><span class="p">:</span><span class="o">`</span><span class="n">pinyin_part</span><span class="o">`</span><span class="err">{</span><span class="n">part_type</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;final&#34;</span><span class="err">}</span><span class="p">)</span><span class="w">
</span><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">final_part_2</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;ing&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">with_pinyin_2</span><span class="p">.</span><span class="o">`</span><span class="n">position</span><span class="o">`</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">3</span><span class="w">
</span><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">第四个字是二声</span><span class="w">
</span><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">x</span><span class="p">:</span><span class="o">`</span><span class="n">idiom</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="o">-</span><span class="p">[</span><span class="n">with_pinyin_3</span><span class="p">:</span><span class="o">`</span><span class="n">with_pinyin</span><span class="o">`</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">pinyin_3</span><span class="p">:</span><span class="o">`</span><span class="n">character_pinyin</span><span class="o">`</span><span class="p">)</span><span class="w">
</span><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">pinyin_3</span><span class="p">.</span><span class="o">`</span><span class="n">character_pinyin</span><span class="o">`</span><span class="p">.</span><span class="n">tone</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">with_pinyin_3</span><span class="p">.</span><span class="o">`</span><span class="n">position</span><span class="o">`</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">3</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="nf">count</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">c</span><span class="w"> </span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">c</span><span class="w"> </span><span class="k">DESC</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>在图数据库之中运行，得到了 7 个答案：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="err">(</span><span class="s2">&#34;惊愚骇俗&#34;</span> <span class="err">:idiom</span><span class="p">{</span><span class="err">pinyin:</span> <span class="nt">&#34;[&#39;jing1&#39;, &#39;yu2&#39;, &#39;hai4&#39;, &#39;su2&#39;]&#34;</span><span class="p">}</span><span class="err">)</span>
<span class="err">(</span><span class="s2">&#34;惊世骇俗&#34;</span> <span class="err">:idiom</span><span class="p">{</span><span class="err">pinyin:</span> <span class="nt">&#34;[&#39;jing1&#39;, &#39;shi4&#39;, &#39;hai4&#39;, &#39;su2&#39;]&#34;</span><span class="p">}</span><span class="err">)</span>
<span class="err">(</span><span class="s2">&#34;惊见骇闻&#34;</span> <span class="err">:idiom</span><span class="p">{</span><span class="err">pinyin:</span> <span class="nt">&#34;[&#39;jing1&#39;, &#39;jian4&#39;, &#39;hai4&#39;, &#39;wen2&#39;]&#34;</span><span class="p">}</span><span class="err">)</span>
<span class="err">(</span><span class="s2">&#34;沽名卖直&#34;</span> <span class="err">:idiom</span><span class="p">{</span><span class="err">pinyin:</span> <span class="nt">&#34;[&#39;gu1&#39;, &#39;ming2&#39;, &#39;mai4&#39;, &#39;zhi2&#39;]&#34;</span><span class="p">}</span><span class="err">)</span>
<span class="err">(</span><span class="s2">&#34;惊心骇神&#34;</span> <span class="err">:idiom</span><span class="p">{</span><span class="err">pinyin:</span> <span class="nt">&#34;[&#39;jing1&#39;, &#39;xin1&#39;, &#39;hai4&#39;, &#39;shen2&#39;]&#34;</span><span class="p">}</span><span class="err">)</span>
<span class="err">(</span><span class="s2">&#34;荆棘载途&#34;</span> <span class="err">:idiom</span><span class="p">{</span><span class="err">pinyin:</span> <span class="nt">&#34;[&#39;jing1&#39;, &#39;ji2&#39;, &#39;zai4&#39;, &#39;tu2&#39;]&#34;</span><span class="p">}</span><span class="err">)</span>
<span class="err">(</span><span class="s2">&#34;出卖灵魂&#34;</span> <span class="err">:idiom</span><span class="p">{</span><span class="err">pinyin:</span> <span class="nt">&#34;[&#39;chu1&#39;, &#39;mai4&#39;, &#39;ling2&#39;, &#39;hun2&#39;]&#34;</span><span class="p">}</span><span class="err">)</span>
</code></pre></td></tr></table>
</div>
</div><p>看起来 <code>惊世骇俗</code> 比较主流，试试！</p>
<p><figure><a class="lightgallery" href="/resolve-wordle/D59.webp" title="汉兜 D59" data-thumbnail="/resolve-wordle/D59.webp">
        <img
            
            loading="lazy"
            src="/resolve-wordle/D59.webp"
            srcset="/resolve-wordle/D59.webp, /resolve-wordle/D59.webp 1.5x, /resolve-wordle/D59.webp 2x"
            sizes="auto"
            alt="汉兜 D59" height="620"  width="784" >
    </a></figure></p>
<p>我们很幸运，借助于成语<del>作弊</del>知识图谱，居然一次就找到了答案，当然这实际上得益于第一次随机选取的词带来的限制条件的个数，不过在大部分情况下，两次尝试获得最终答案的可能性还是非常大的！</p>
<blockquote>
<p>注，这中间很长的253分钟是因为我在查询中发现之前代码里构造的图谱有点 bug，是“披枷带锁”这个词引起的读音图谱的错误数据，还好后来被修复了。</p>
<p>大家知道“披枷带锁”的正确读音么？😭</p>
</blockquote>
<p>接下来，我给大家详细解释一下这个语句的意思。</p>
<h3 id="语句的含义" class="headerLink">
    <a href="#%e8%af%ad%e5%8f%a5%e7%9a%84%e5%90%ab%e4%b9%89" class="header-mark"></a>3.1 语句的含义</h3><p>我们从第一个字的条件开始，这是一个既有声音、又有字形信息的条件。</p>
<ul>
<li>声音信息：存在一个韵母为 <code>ai4</code> 的发音，位置不在第一个字</li>
<li>文字信息：这个韵母为 <code>ai4</code> 的字，不是<code>爱</code>字</li>
</ul>
<p>对于声音信息条件，转换为图模式匹配为：(成语)-一个字发音-(拼音) -包含声母-(韵母) WHERE 拼音韵母为 <code>ai4</code> AND 位置不是第一个。</p>
<p>因为建模的时候，属性名称我用的是英文（其实中文也是支持的），实际上的语句为：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="o">//</span><span class="w"> </span><span class="err">有一个非第一个位置的字，拼音是</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="err">声，韵母是</span><span class="w"> </span><span class="n">ai</span><span class="w">
</span><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">x</span><span class="p">:</span><span class="n">idiom</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">with_pinyin_0</span><span class="p">:</span><span class="n">with_pinyin</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">pinyin_0</span><span class="p">:</span><span class="o">`</span><span class="n">character_pinyin</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">with_pinyin_part</span><span class="o">`</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="o">`</span><span class="n">final_part_0</span><span class="o">`</span><span class="p">:</span><span class="o">`</span><span class="n">pinyin_part</span><span class="o">`</span><span class="err">{</span><span class="n">part_type</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;final&#34;</span><span class="err">}</span><span class="p">)</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="o">`</span><span class="n">final_part_0</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;ai&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">pinyin_0</span><span class="p">.</span><span class="o">`</span><span class="n">character_pinyin</span><span class="o">`</span><span class="p">.</span><span class="n">tone</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">with_pinyin_0</span><span class="p">.</span><span class="o">`</span><span class="n">position</span><span class="o">`</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="p">...</span><span class="w">
</span><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">x</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>类似的，表示非第一个位置的字，不是<code>爱</code> 的表达是：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="o">//</span><span class="w"> </span><span class="err">有一个非第一个位置的字，拼音是</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="err">声，韵母是</span><span class="w"> </span><span class="n">ai</span><span class="err">，但不是爱</span><span class="w">
</span><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">char0</span><span class="p">:</span><span class="o">`</span><span class="k">character</span><span class="o">`</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[</span><span class="n">with_char_0</span><span class="p">:</span><span class="o">`</span><span class="n">with_character</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">x</span><span class="p">:</span><span class="o">`</span><span class="n">idiom</span><span class="o">`</span><span class="p">)</span><span class="w">
</span><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">with_char_0</span><span class="p">.</span><span class="o">`</span><span class="n">position</span><span class="o">`</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">char0</span><span class="p">)</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="s2">&#34;爱&#34;</span><span class="w">
</span><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="p">...</span><span class="w">
</span><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="nf">count</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">c</span><span class="w"> </span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">c</span><span class="w"> </span><span class="k">DESC</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>而因为这两个条件最终描述的是同一个字，所以它们是可以被写在一个路径下的：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="o">//</span><span class="w"> </span><span class="err">有一个非第一个位置的字，拼音是</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="err">声，韵母是</span><span class="w"> </span><span class="n">ai</span><span class="err">，但不是爱</span><span class="w">
</span><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">char0</span><span class="p">:</span><span class="o">`</span><span class="k">character</span><span class="o">`</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[</span><span class="n">with_char_0</span><span class="p">:</span><span class="o">`</span><span class="n">with_character</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">x</span><span class="p">:</span><span class="o">`</span><span class="n">idiom</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">with_pinyin_0</span><span class="p">:</span><span class="o">`</span><span class="n">with_pinyin</span><span class="o">`</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">pinyin_0</span><span class="p">:</span><span class="o">`</span><span class="n">character_pinyin</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">with_pinyin_part</span><span class="o">`</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="o">`</span><span class="n">final_part_0</span><span class="o">`</span><span class="p">:</span><span class="o">`</span><span class="n">pinyin_part</span><span class="o">`</span><span class="err">{</span><span class="n">part_type</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;final&#34;</span><span class="err">}</span><span class="p">)</span><span class="w">
</span><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="o">`</span><span class="n">final_part_0</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;ai&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">pinyin_0</span><span class="p">.</span><span class="o">`</span><span class="n">character_pinyin</span><span class="o">`</span><span class="p">.</span><span class="n">tone</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">with_pinyin_0</span><span class="p">.</span><span class="o">`</span><span class="n">position</span><span class="o">`</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">with_char_0</span><span class="p">.</span><span class="o">`</span><span class="n">position</span><span class="o">`</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">char0</span><span class="p">)</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="s2">&#34;爱&#34;</span><span class="w">
</span><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="p">...</span><span class="w">
</span><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">x</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>更多的 <code>MATCH</code> 语法和例子细节，请大家参考文档：</p>
<ul>
<li>MATCH <a href="https://docs.nebula-graph.com.cn/3.0.0/3.ngql-guide/7.general-query-statements/2.match/" target="_blank" rel="noopener noreferrer">https://docs.nebula-graph.com.cn/3.0.0/3.ngql-guide/7.general-query-statements/2.match/</a></li>
<li>图模式 <a href="https://docs.nebula-graph.com.cn/3.0.0/3.ngql-guide/1.nGQL-overview/3.graph-patterns/" target="_blank" rel="noopener noreferrer">https://docs.nebula-graph.com.cn/3.0.0/3.ngql-guide/1.nGQL-overview/3.graph-patterns/</a></li>
<li>nGQL 命令 cheatsheet <a href="https://docs.nebula-graph.com.cn/3.0.0/2.quick-start/6.cheatsheet-for-ngql-command/" target="_blank" rel="noopener noreferrer">https://docs.nebula-graph.com.cn/3.0.0/2.quick-start/6.cheatsheet-for-ngql-command/</a></li>
</ul>
<h2 id="可视化展示线索" class="headerLink">
    <a href="#%e5%8f%af%e8%a7%86%e5%8c%96%e5%b1%95%e7%a4%ba%e7%ba%bf%e7%b4%a2" class="header-mark"></a>4 可视化展示线索</h2><p>我们把每一个条件的匹配路径作为输出，利用 Nebula Graph 的可视化能力，可以得到：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="o">//</span><span class="w"> </span><span class="err">有一个非第一个位置的字，拼音是</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="err">声，韵母是</span><span class="w"> </span><span class="n">ai</span><span class="err">，但不是爱</span><span class="w">
</span><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="n">p0</span><span class="o">=</span><span class="p">(</span><span class="n">char0</span><span class="p">:</span><span class="o">`</span><span class="k">character</span><span class="o">`</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[</span><span class="n">with_char_0</span><span class="p">:</span><span class="o">`</span><span class="n">with_character</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">x</span><span class="p">:</span><span class="o">`</span><span class="n">idiom</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">with_pinyin_0</span><span class="p">:</span><span class="o">`</span><span class="n">with_pinyin</span><span class="o">`</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">pinyin_0</span><span class="p">:</span><span class="o">`</span><span class="n">character_pinyin</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">with_pinyin_part</span><span class="o">`</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="o">`</span><span class="n">final_part_0</span><span class="o">`</span><span class="p">:</span><span class="o">`</span><span class="n">pinyin_part</span><span class="o">`</span><span class="err">{</span><span class="n">part_type</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;final&#34;</span><span class="err">}</span><span class="p">)</span><span class="w">
</span><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="o">`</span><span class="n">final_part_0</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;ai&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">pinyin_0</span><span class="p">.</span><span class="o">`</span><span class="n">character_pinyin</span><span class="o">`</span><span class="p">.</span><span class="n">tone</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">with_pinyin_0</span><span class="p">.</span><span class="o">`</span><span class="n">position</span><span class="o">`</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">with_char_0</span><span class="p">.</span><span class="o">`</span><span class="n">position</span><span class="o">`</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">char0</span><span class="p">)</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="s2">&#34;爱&#34;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">有一个一声的字，不在第二个位置</span><span class="w">
</span><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="n">p1</span><span class="o">=</span><span class="p">(</span><span class="n">x</span><span class="p">:</span><span class="o">`</span><span class="n">idiom</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="o">-</span><span class="p">[</span><span class="n">with_pinyin_1</span><span class="p">:</span><span class="o">`</span><span class="n">with_pinyin</span><span class="o">`</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">pinyin_1</span><span class="p">:</span><span class="o">`</span><span class="n">character_pinyin</span><span class="o">`</span><span class="p">)</span><span class="w">
</span><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">pinyin_1</span><span class="p">.</span><span class="o">`</span><span class="n">character_pinyin</span><span class="o">`</span><span class="p">.</span><span class="n">tone</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">with_pinyin_1</span><span class="p">.</span><span class="o">`</span><span class="n">position</span><span class="o">`</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">1</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">有一个字韵母是</span><span class="w"> </span><span class="n">ing</span><span class="err">，不在第四个位置</span><span class="w">
</span><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="n">p2</span><span class="o">=</span><span class="p">(</span><span class="n">x</span><span class="p">:</span><span class="o">`</span><span class="n">idiom</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="o">-</span><span class="p">[</span><span class="n">with_pinyin_2</span><span class="p">:</span><span class="o">`</span><span class="n">with_pinyin</span><span class="o">`</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(:</span><span class="o">`</span><span class="n">character_pinyin</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">with_pinyin_part</span><span class="o">`</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">final_part_2</span><span class="p">:</span><span class="o">`</span><span class="n">pinyin_part</span><span class="o">`</span><span class="err">{</span><span class="n">part_type</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;final&#34;</span><span class="err">}</span><span class="p">)</span><span class="w">
</span><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">final_part_2</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;ing&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">with_pinyin_2</span><span class="p">.</span><span class="o">`</span><span class="n">position</span><span class="o">`</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">3</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">第四个字是二声</span><span class="w">
</span><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="n">p3</span><span class="o">=</span><span class="p">(</span><span class="n">x</span><span class="p">:</span><span class="o">`</span><span class="n">idiom</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="o">-</span><span class="p">[</span><span class="n">with_pinyin_3</span><span class="p">:</span><span class="o">`</span><span class="n">with_pinyin</span><span class="o">`</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">pinyin_3</span><span class="p">:</span><span class="o">`</span><span class="n">character_pinyin</span><span class="o">`</span><span class="p">)</span><span class="w">
</span><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">pinyin_3</span><span class="p">.</span><span class="o">`</span><span class="n">character_pinyin</span><span class="o">`</span><span class="p">.</span><span class="n">tone</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">with_pinyin_3</span><span class="p">.</span><span class="o">`</span><span class="n">position</span><span class="o">`</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">3</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p0</span><span class="p">,</span><span class="n">p1</span><span class="p">,</span><span class="n">p2</span><span class="p">,</span><span class="n">p3</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>在可视化工具的 Console 控制台里执行上边的语句之后，选择导入图探索，就可以看到</p>
<p><figure><a class="lightgallery" href="/resolve-wordle/studio.webp" title="/resolve-wordle/studio.webp" data-thumbnail="/resolve-wordle/studio.webp">
        <img
            
            loading="lazy"
            src="/resolve-wordle/studio.webp"
            srcset="/resolve-wordle/studio.webp, /resolve-wordle/studio.webp 1.5x, /resolve-wordle/studio.webp 2x"
            sizes="auto"
            alt="/resolve-wordle/studio.webp" height="2334"  width="4064" >
    </a></figure></p>
<h2 id="下一步" class="headerLink">
    <a href="#%e4%b8%8b%e4%b8%80%e6%ad%a5" class="header-mark"></a>5 下一步</h2><p>如果大家是从本文第一次了解到 Nebula Graph 图数据库，那么大家可以下一步从 <a href="https://github.com/vesoft-inc/nebula" target="_blank" rel="noopener noreferrer">Nebula Graph</a> 项目和 Nebula Graph 社区的官方 Bilibili 站点 👉🏻 <a href="https://space.bilibili.com/472621355" target="_blank" rel="noopener noreferrer">https://space.bilibili.com/472621355</a> 了解更多有意思的入门知识。</p>
<p>另外，<a href="https://nebula-graph.com.cn/demo/" target="_blank" rel="noopener noreferrer">这里</a>是 Nebula Graph 的官方线上试玩环境，大家可以照着<a href="https://docs.nebula-graph.com.cn/" target="_blank" rel="noopener noreferrer">文档</a>，利用试玩环境尝鲜。</p>
<p>后边，Nebula Graph 会开展每天的汉兜 nGQL 体操活动，敬请关注哈！</p>
<p>Happy Graphing!</p>
<h2 id="附录搭建成语知识图谱" class="headerLink">
    <a href="#%e9%99%84%e5%bd%95%e6%90%ad%e5%bb%ba%e6%88%90%e8%af%ad%e7%9f%a5%e8%af%86%e5%9b%be%e8%b0%b1" class="header-mark"></a>6 附录：搭建成语知识图谱</h2><h3 id="收集生成图谱数据" class="headerLink">
    <a href="#%e6%94%b6%e9%9b%86%e7%94%9f%e6%88%90%e5%9b%be%e8%b0%b1%e6%95%b0%e6%8d%ae" class="header-mark"></a>6.1 收集、生成图谱数据</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ python3 graph_data_generator.py
</code></pre></td></tr></table>
</div>
</div><h3 id="导入数据到-nebula-graph-图数据库" class="headerLink">
    <a href="#%e5%af%bc%e5%85%a5%e6%95%b0%e6%8d%ae%e5%88%b0-nebula-graph-%e5%9b%be%e6%95%b0%e6%8d%ae%e5%ba%93" class="header-mark"></a>6.2 导入数据到 Nebula Graph 图数据库</h3><h4 id="部署图数据库" class="headerLink">
    <a href="#%e9%83%a8%e7%bd%b2%e5%9b%be%e6%95%b0%e6%8d%ae%e5%ba%93" class="header-mark"></a>6.2.1 部署图数据库</h4><blockquote>
<p>借助于 Nebula-Up <a href="https://github.com/wey-gu/nebula-up/" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/nebula-up/</a> ，一行就可以了。</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ curl -fsSL nebula-up.siwei.io/install.sh <span class="p">|</span> bash -s -- v3.0.0
</code></pre></td></tr></table>
</div>
</div><p>部署成功的话，会看到这样的结果：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">┌────────────────────────────────────────┐
│ 🌌 Nebula-Graph Playground is Up now!  │
├────────────────────────────────────────┤
│                                        │
│ 🎉 Congrats! Your Nebula is Up now!    │
│    $ <span class="nb">cd</span> ~/.nebula-up                   │
│                                        │
│ 🌏 You can access it from browser:     │
│      http://127.0.0.1:7001             │
│      http://&lt;other_interface&gt;:7001     │
│                                        │
│ 🔥 Or access via Nebula Console:       │
│    $ ~/.nebula-up/console.sh           │
│                                        │
│    To remove the playground:           │
│    $ ~/.nebula-up/uninstall.sh         │
│                                        │
│ 🚀 Have Fun!                           │
│                                        │
└────────────────────────────────────────┘
</code></pre></td></tr></table>
</div>
</div><h4 id="图谱入库" class="headerLink">
    <a href="#%e5%9b%be%e8%b0%b1%e5%85%a5%e5%ba%93" class="header-mark"></a>6.2.2 图谱入库</h4><blockquote>
<p>借助于 Nebula-Importer <a href="https://github.com/vesoft-inc/nebula-importer/" target="_blank" rel="noopener noreferrer">https://github.com/vesoft-inc/nebula-importer/</a> ，一行就可以了。</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ docker run --rm -ti <span class="se">\
</span><span class="se"></span>    --network<span class="o">=</span>nebula-docker-compose_nebula-net <span class="se">\
</span><span class="se"></span>    -v <span class="si">${</span><span class="nv">PWD</span><span class="si">}</span>/importer_conf.yaml:/root/importer_conf.yaml <span class="se">\
</span><span class="se"></span>    -v <span class="si">${</span><span class="nv">PWD</span><span class="si">}</span>/output:/root <span class="se">\
</span><span class="se"></span>    vesoft/nebula-importer:v3.0.0 <span class="se">\
</span><span class="se"></span>    --config /root/importer_conf.yaml
</code></pre></td></tr></table>
</div>
</div><p>大概一两分钟数据就导入成功了，命令也会正常退出。</p>
<blockquote>
<p>连到图数据库的 console</p>
</blockquote>
<p>进入 Console 的容器执行下边的命令：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ ~/.nebula-up/console.sh

<span class="c1"># nebula-console -addr graphd -port 9669 -user root -p nebula</span>
</code></pre></td></tr></table>
</div>
</div><p>检查一下导入的数据：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="p">(</span><span class="n">root</span><span class="o">@</span><span class="n">nebula</span><span class="p">)</span><span class="w"> </span><span class="p">[(</span><span class="k">none</span><span class="p">)]</span><span class="o">&gt;</span><span class="w"> </span><span class="k">show</span><span class="w"> </span><span class="n">spaces</span><span class="w">
</span><span class="w"></span><span class="o">+</span><span class="c1">--------------------+
</span><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="n">Name</span><span class="w">               </span><span class="o">|</span><span class="w">
</span><span class="w"></span><span class="o">+</span><span class="c1">--------------------+
</span><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;chinese_idiom&#34;</span><span class="w">    </span><span class="o">|</span><span class="w">
</span><span class="w"></span><span class="o">+</span><span class="c1">--------------------+
</span><span class="c1"></span><span class="w">
</span><span class="w"></span><span class="p">(</span><span class="n">root</span><span class="o">@</span><span class="n">nebula</span><span class="p">)</span><span class="w"> </span><span class="p">[(</span><span class="k">none</span><span class="p">)]</span><span class="o">&gt;</span><span class="w"> </span><span class="n">use</span><span class="w"> </span><span class="n">chinese_idiom</span><span class="w">
</span><span class="w"></span><span class="n">Execution</span><span class="w"> </span><span class="n">succeeded</span><span class="w"> </span><span class="p">(</span><span class="n">time</span><span class="w"> </span><span class="n">spent</span><span class="w"> </span><span class="mi">1510</span><span class="o">/</span><span class="mi">2329</span><span class="w"> </span><span class="n">us</span><span class="p">)</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="n">Fri</span><span class="p">,</span><span class="w"> </span><span class="mi">25</span><span class="w"> </span><span class="n">Feb</span><span class="w"> </span><span class="mi">2022</span><span class="w"> </span><span class="mi">08</span><span class="p">:</span><span class="mi">53</span><span class="p">:</span><span class="mi">11</span><span class="w"> </span><span class="n">UTC</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="p">(</span><span class="n">root</span><span class="o">@</span><span class="n">nebula</span><span class="p">)</span><span class="w"> </span><span class="p">[</span><span class="n">chinese_idiom</span><span class="p">]</span><span class="o">&gt;</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="err">成语</span><span class="p">:</span><span class="o">`</span><span class="n">idiom</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="w"> </span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">2</span><span class="w">
</span><span class="w"></span><span class="o">+</span><span class="c1">------------------------------------------------------------------+
</span><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="n">p</span><span class="w">                                                                </span><span class="o">|</span><span class="w">
</span><span class="w"></span><span class="o">+</span><span class="c1">------------------------------------------------------------------+
</span><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="o">&lt;</span><span class="p">(</span><span class="s2">&#34;一丁不识&#34;</span><span class="w"> </span><span class="p">:</span><span class="n">idiom</span><span class="err">{</span><span class="n">pinyin</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;[&#39;yi1&#39;, &#39;ding1&#39;, &#39;bu4&#39;, &#39;shi2&#39;]&#34;</span><span class="err">}</span><span class="p">)</span><span class="o">&gt;</span><span class="w"> </span><span class="o">|</span><span class="w">
</span><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="o">&lt;</span><span class="p">(</span><span class="s2">&#34;一丝不挂&#34;</span><span class="w"> </span><span class="p">:</span><span class="n">idiom</span><span class="err">{</span><span class="n">pinyin</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;[&#39;yi1&#39;, &#39;si1&#39;, &#39;bu4&#39;, &#39;gua4&#39;]&#34;</span><span class="err">}</span><span class="p">)</span><span class="o">&gt;</span><span class="w">   </span><span class="o">|</span><span class="w">
</span><span class="w"></span><span class="o">+</span><span class="c1">------------------------------------------------------------------+
</span><span class="c1"></span><span class="w">
</span><span class="w"></span><span class="p">(</span><span class="n">root</span><span class="o">@</span><span class="n">nebula</span><span class="p">)</span><span class="w"> </span><span class="p">[</span><span class="n">chinese_idiom</span><span class="p">]</span><span class="o">&gt;</span><span class="w"> </span><span class="n">SUBMIT</span><span class="w"> </span><span class="n">JOB</span><span class="w"> </span><span class="n">STATS</span><span class="w">
</span><span class="w"></span><span class="o">+</span><span class="c1">------------+
</span><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="k">New</span><span class="w"> </span><span class="n">Job</span><span class="w"> </span><span class="n">Id</span><span class="w"> </span><span class="o">|</span><span class="w">
</span><span class="w"></span><span class="o">+</span><span class="c1">------------+
</span><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="mi">11</span><span class="w">         </span><span class="o">|</span><span class="w">
</span><span class="w"></span><span class="o">+</span><span class="c1">------------+
</span><span class="c1"></span><span class="p">(</span><span class="n">root</span><span class="o">@</span><span class="n">nebula</span><span class="p">)</span><span class="w"> </span><span class="p">[</span><span class="n">chinese_idiom</span><span class="p">]</span><span class="o">&gt;</span><span class="w"> </span><span class="k">SHOW</span><span class="w"> </span><span class="n">STATS</span><span class="w">
</span><span class="w"></span><span class="o">+</span><span class="c1">---------+--------------------+--------+
</span><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="k">Type</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="n">Name</span><span class="w">               </span><span class="o">|</span><span class="w"> </span><span class="k">Count</span><span class="w">  </span><span class="o">|</span><span class="w">
</span><span class="w"></span><span class="o">+</span><span class="c1">---------+--------------------+--------+
</span><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Tag&#34;</span><span class="w">   </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;character&#34;</span><span class="w">        </span><span class="o">|</span><span class="w"> </span><span class="mi">4847</span><span class="w">   </span><span class="o">|</span><span class="w">
</span><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Tag&#34;</span><span class="w">   </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;character_pinyin&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="mi">1336</span><span class="w">   </span><span class="o">|</span><span class="w">
</span><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Tag&#34;</span><span class="w">   </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;idiom&#34;</span><span class="w">            </span><span class="o">|</span><span class="w"> </span><span class="mi">29503</span><span class="w">  </span><span class="o">|</span><span class="w">
</span><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Tag&#34;</span><span class="w">   </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;pinyin_part&#34;</span><span class="w">      </span><span class="o">|</span><span class="w"> </span><span class="mi">57</span><span class="w">     </span><span class="o">|</span><span class="w">
</span><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Edge&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;with_character&#34;</span><span class="w">   </span><span class="o">|</span><span class="w"> </span><span class="mi">116090</span><span class="w"> </span><span class="o">|</span><span class="w">
</span><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Edge&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;with_pinyin&#34;</span><span class="w">      </span><span class="o">|</span><span class="w"> </span><span class="mi">5943</span><span class="w">   </span><span class="o">|</span><span class="w">
</span><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Edge&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;with_pinyin_part&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="mi">3290</span><span class="w">   </span><span class="o">|</span><span class="w">
</span><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Space&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;vertices&#34;</span><span class="w">         </span><span class="o">|</span><span class="w"> </span><span class="mi">35739</span><span class="w">  </span><span class="o">|</span><span class="w">
</span><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Space&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;edges&#34;</span><span class="w">            </span><span class="o">|</span><span class="w"> </span><span class="mi">125323</span><span class="w"> </span><span class="o">|</span><span class="w">
</span><span class="w"></span><span class="o">+</span><span class="c1">---------+--------------------+--------+
</span></code></pre></td></tr></table>
</div>
</div><h2 id="附录图建模的-schema-ngql" class="headerLink">
    <a href="#%e9%99%84%e5%bd%95%e5%9b%be%e5%bb%ba%e6%a8%a1%e7%9a%84-schema-ngql" class="header-mark"></a>7 附录：图建模的 Schema nGQL</h2><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="k">CREATE</span><span class="w"> </span><span class="k">SPACE</span><span class="w"> </span><span class="k">IF</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">EXISTS</span><span class="w"> </span><span class="n">chinese_idiom</span><span class="p">(</span><span class="n">partition_num</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span><span class="w"> </span><span class="n">replica_factor</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="n">vid_type</span><span class="o">=</span><span class="n">FIXED_STRING</span><span class="p">(</span><span class="mi">24</span><span class="p">));</span><span class="w">
</span><span class="w"></span><span class="n">USE</span><span class="w"> </span><span class="n">chinese_idiom</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">创建点的类型</span><span class="w">
</span><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="n">idiom</span><span class="p">(</span><span class="n">pinyin</span><span class="w"> </span><span class="n">string</span><span class="p">);</span><span class="w"> </span><span class="o">#</span><span class="err">成语</span><span class="w">
</span><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="nb">character</span><span class="p">();</span><span class="w"> </span><span class="o">#</span><span class="err">汉字</span><span class="w">
</span><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="n">character_pinyin</span><span class="p">(</span><span class="n">tone</span><span class="w"> </span><span class="nb">int</span><span class="p">);</span><span class="w"> </span><span class="o">#</span><span class="err">单字的拼音</span><span class="w">
</span><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="n">pinyin_part</span><span class="p">(</span><span class="n">part_type</span><span class="w"> </span><span class="n">string</span><span class="p">);</span><span class="w"> </span><span class="o">#</span><span class="err">拼音的声部</span><span class="w">
</span><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">创建边的类型</span><span class="w">
</span><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">with_character</span><span class="p">(</span><span class="o">`</span><span class="k">position</span><span class="o">`</span><span class="w"> </span><span class="nb">int</span><span class="p">);</span><span class="w"> </span><span class="o">#</span><span class="err">包含汉字</span><span class="w">
</span><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">with_pinyin</span><span class="p">(</span><span class="o">`</span><span class="k">position</span><span class="o">`</span><span class="w"> </span><span class="nb">int</span><span class="p">);</span><span class="w"> </span><span class="o">#</span><span class="err">读作</span><span class="w">
</span><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">with_pinyin_part</span><span class="p">(</span><span class="n">part_type</span><span class="w"> </span><span class="n">string</span><span class="p">);</span><span class="w"> </span><span class="o">#</span><span class="err">包含声部</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>从零到一：如何构建一个企业股权图谱系统？</title>
    <link>https://siwei.io/corp-rel-graph/</link>
    <pubDate>Wed, 24 Nov 2021 13:59:58 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/corp-rel-graph/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/corp-rel-graph/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>如何构建一个具有股权分析的图谱与线上系统呢？本文里，我将利用图数据库从零到一带你构建一个简易版的股权穿透图谱系统。</p>
</blockquote>
<p>我们知道无论是监管部门、企业还是个人，都有需求去针对一个企业、法人做一些背景调查，这些调查可以是法律诉讼、公开持股、企业任职等等多种多样的信息。这些背景信息可以辅助我们做商业上的重要决策，规避风险：比如根据公司的股权关系，了解是否存在利益冲突比如是否选择与一家公司进行商业往来。</p>
<p>在满足这样的关系分析需求的时候，我们往往面临一些挑战，比如：</p>
<ol>
<li>如何将这些数据的关联关系体现在系统之中？使得它们可以被挖掘、利用</li>
<li>多种异构数据、数据源之间的关系可能随着业务的发展引申出更多的变化，在结构数据库中，这意味着 Schema 变更</li>
<li>分析系统需要尽可能实时获取需要的查询结果，这通常涉及到多跳关系查询</li>
<li>领域专家能否快速灵活、可视化获取分享信息</li>
</ol>
<p>那么如何构建这样一个系统解决以上挑战呢？</p>
<h2 id="数据存在哪里" class="headerLink">
    <a href="#%e6%95%b0%e6%8d%ae%e5%ad%98%e5%9c%a8%e5%93%aa%e9%87%8c" class="header-mark"></a>1 数据存在哪里？</h2><blockquote>
<p>前提：数据集准备，为了更好的给大家演示解决这个问题，我写了一个轮子能随机生成股权结构相关的数据，生成的数据的例子在<a href="https://github.com/wey-gu/nebula-shareholding-example/tree/main/data_sample" target="_blank" rel="noopener noreferrer">这里</a>。</p>
<p>这里，我们有<a href="https://github.com/wey-gu/nebula-shareholding-example/blob/main/data_sample/person.csv" target="_blank" rel="noopener noreferrer">法人</a>、<a href="https://github.com/wey-gu/nebula-shareholding-example/blob/main/data_sample/corp.csv" target="_blank" rel="noopener noreferrer">公司</a>的数据，更有<a href="https://github.com/wey-gu/nebula-shareholding-example/blob/main/data_sample/corp_rel.csv" target="_blank" rel="noopener noreferrer">公司与子公司之间的关系</a>，<a href="https://github.com/wey-gu/nebula-shareholding-example/blob/main/data_sample/corp_share.csv" target="_blank" rel="noopener noreferrer">公司持有公司股份</a>，<a href="https://github.com/wey-gu/nebula-shareholding-example/blob/main/data_sample/person_corp_role.csv" target="_blank" rel="noopener noreferrer">法人任职公司</a>，<a href="https://github.com/wey-gu/nebula-shareholding-example/blob/main/data_sample/person_corp_share.csv" target="_blank" rel="noopener noreferrer">法人持有公司股份</a>和<a href="https://github.com/wey-gu/nebula-shareholding-example/blob/main/data_sample/person_rel.csv" target="_blank" rel="noopener noreferrer">法人之间亲密度</a>的关系数据。</p>
</blockquote>
<p>数据存在哪里？这是一个关键的问题，这里我们剧透一下，答案是：图数据库。然后我们再简单解释一下为什么这样一个股权图谱系统跑在图数据库上是更好的。</p>
<p>在这样一个简单的数据模型之下，我们可以很直接的在关系型数据库中这么建模：</p>
<p><figure><a class="lightgallery" href="/corp-rel-graph/why_0_tabular.webp" title="why_0_tabular" data-thumbnail="/corp-rel-graph/why_0_tabular.webp">
        <img
            
            loading="lazy"
            src="/corp-rel-graph/why_0_tabular.webp"
            srcset="/corp-rel-graph/why_0_tabular.webp, /corp-rel-graph/why_0_tabular.webp 1.5x, /corp-rel-graph/why_0_tabular.webp 2x"
            sizes="auto"
            alt="why_0_tabular" height="1068"  width="1556" >
    </a></figure></p>
<p>而这么建模的问题在于：这种逻辑关联的方式使得无论数据的关联关系查询表达、存储、还是引入新的关联关系都不是很高效。</p>
<ul>
<li><strong>查询表达不高效</strong>是因为关系型数据库是面向表结构设计的，这决定了关系查询要写嵌套的 JOIN。
<ul>
<li>这就是前边提到的<strong>挑战 1</strong>：能够表达，但是比较勉强，遇到稍微复杂的情况就变得很难。</li>
</ul>
</li>
<li><strong>存储不高效</strong>是因为表结构被设计的模式是面向数据记录，而非数据之间的关系：我们虽然习惯了将数据中实体（比如法人）和实体关联（比如持有股权 <code>hold_sharing_relationship</code>）以另外一个表中的记录来表达、存储起来，这逻辑上完全行得通，但是到了多跳、大量需要请求数据关系跳转的情况下，这样跨表 JOIN 的代价就成为了瓶颈。
<ul>
<li>这就是前边提到的<strong>挑战 3</strong>：无法应对多条查询的性能需要。</li>
</ul>
</li>
<li><strong>引入新的关联关系</strong>代价大，还是前边提到的，表结构下，用新的表来表达持有股权 <code>hold_sharing_relationship</code>这个关联关系是可行的，但是这非常不灵活、而且昂贵，它意味着我们在引入这个关系的时候限定了起点终点的类型，比如股权持有的关系可能是法人-&gt;公司，也可能是公司-&gt;公司，随着业务的演进，我们可能还需要引入政府-&gt;公司的新关系，而这些变化都需要做有不小代价的工作：改动 Schema。
<ul>
<li>这就是前边提到的<strong>挑战 2</strong>：无法应对业务上对数据关系上灵活多变的要求。</li>
</ul>
</li>
</ul>
<p>当一个通用系统无法满足不可忽视的具体需求的时候，一个新的系统就会诞生，这就是图数据库，针对这样的场景，图数据库很自然地特别针对关联关系场景去设计整个数据库：</p>
<ul>
<li>面向关联关系表达的语义。（挑战 1）
<ul>
<li>如下表，我列举了一个等价的一跳查询在表结构数据库与图数据库中，查询语句的区别。大家应该可以看出“找到所有持有和 p_100 共同持有公司股份的人”这样的查询表达可以在图数据库如何自然表达，这仅仅是一条查询的区别，如果是多跳的话，他们的复杂度区分还会更明显一些。</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>表结构数据库</th>
<th>图数据库（属性图）</th>
</tr>
</thead>
<tbody>
<tr>
<td><figure><a class="lightgallery" href="/corp-rel-graph/why_1_sql_join.webp" title="why_1_sql_join" data-thumbnail="/corp-rel-graph/why_1_sql_join.webp">
        <img
            
            loading="lazy"
            src="/corp-rel-graph/why_1_sql_join.webp"
            srcset="/corp-rel-graph/why_1_sql_join.webp, /corp-rel-graph/why_1_sql_join.webp 1.5x, /corp-rel-graph/why_1_sql_join.webp 2x"
            sizes="auto"
            alt="why_1_sql_join" height="1412"  width="1848" >
    </a></figure></td>
<td><figure><a class="lightgallery" href="/corp-rel-graph/why_1_ngql.webp" title="why_1_ngql" data-thumbnail="/corp-rel-graph/why_1_ngql.webp">
        <img
            
            loading="lazy"
            src="/corp-rel-graph/why_1_ngql.webp"
            srcset="/corp-rel-graph/why_1_ngql.webp, /corp-rel-graph/why_1_ngql.webp 1.5x, /corp-rel-graph/why_1_ngql.webp 2x"
            sizes="auto"
            alt="why_1_ngql" height="892"  width="3400" >
    </a></figure></td>
</tr>
</tbody>
</table>
<ul>
<li>将关联关系存储为物理连接，从而使得跳转查询代价最小。（挑战 3、2）
<ul>
<li>图数据之中，从点拓展（找到一个或者多个关系的另一头）出去的代价是非常小的，这因为图数据库是一个专有的系统，得益于它主要关心“图”结构的设计，查找确定的实体（比如和一个法人 A ）所有关联（可能是任职、亲戚、持有、等等关系）其他所有实体（公司、法人）这个查找的代价是 O(1) 的，因为它们在图数据库的数据机构里是真的链接在一起的。</li>
<li>大家可以从下表的定量参考数据一窥图数据库在这种查询下的优势，这种优势在多跳高并发情况下的区别是“能”与”不能“作为线上系统的区别，是“实时”与“离线”的区别。</li>
<li>在面向关联关系的数据建模和数据结构之下，引入新的实体、关联关系的代价要小很多，还是前边提到的例子：
在 Nebula Graph 图数据中引入一个新的“政府机构”类型的实体，并增加政府机构-&gt;公司的“持有股份”的关联关系相比于在非图模型的数据库中的代价小很多。</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>表结构数据库</th>
<th>图数据库（属性图）</th>
</tr>
</thead>
<tbody>
<tr>
<td>4 跳查询时延 1544 秒</td>
<td>4 跳查询时延 1.36 秒</td>
</tr>
</tbody>
</table>
<ul>
<li>建模符合直觉；图数据库有面向数据连接的数据可视化能力（挑战 4）
<ul>
<li>大家在下表第二列中可以对比我们本文中进行的股权分析数据在两种数据库之中的建模的区别，尤其是在关心关联关系的场景下，我们可以感受到属性图的模型建立是很符合人类大脑直觉的，而这和大脑之中<a href="https://zh.wikipedia.org/zh/%E7%A5%9E%E7%B6%93%E5%85%83" target="_blank" rel="noopener noreferrer">神经元</a>的结构可能也有一些关系。</li>
<li>图数据库中内置的可视化工具提供了一般用户便捷理解数据关系的能力，也给领域专家用户提供了表达请求复杂数据关系的直观接口。</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>表结构数据库</th>
<th>图数据库（属性图）</th>
</tr>
</thead>
<tbody>
<tr>
<td><figure><a class="lightgallery" href="/corp-rel-graph/why_0_tabular.webp" title="why_0_tabular" data-thumbnail="/corp-rel-graph/why_0_tabular.webp">
        <img
            
            loading="lazy"
            src="/corp-rel-graph/why_0_tabular.webp"
            srcset="/corp-rel-graph/why_0_tabular.webp, /corp-rel-graph/why_0_tabular.webp 1.5x, /corp-rel-graph/why_0_tabular.webp 2x"
            sizes="auto"
            alt="why_0_tabular" height="1068"  width="1556" >
    </a></figure></td>
<td><figure><a class="lightgallery" href="/corp-rel-graph/why_0_graph_based.webp" title="why_0_graph_based" data-thumbnail="/corp-rel-graph/why_0_graph_based.webp">
        <img
            
            loading="lazy"
            src="/corp-rel-graph/why_0_graph_based.webp"
            srcset="/corp-rel-graph/why_0_graph_based.webp, /corp-rel-graph/why_0_graph_based.webp 1.5x, /corp-rel-graph/why_0_graph_based.webp 2x"
            sizes="auto"
            alt="why_0_graph_based" height="1336"  width="3348" >
    </a></figure></td>
</tr>
</tbody>
</table>
<blockquote>
<p>表结构数据库与图数据库的总体比较：</p>
</blockquote>
<!---
```ngql
GO FROM "p_100" OVER hold_share YIELD dst(edge) AS corp_with_share |\
GO FROM $-.corp_with_share OVER hold_share REVERSELY YIELD properties(vertex).name;
```

```sql
SELECT a.id, a.name, c.name
FROM person a
JOIN hold_share b ON a.id=b.person_id
JOIN corp c ON c.id=b.corp_id
WHERE c.name IN (SELECT c.name
FROM person a
JOIN hold_share b ON a.id=b.person_id
JOIN corp c ON c.id=b.corp_id
WHERE a.id = 'p_100')
```
-->
<table>
<thead>
<tr>
<th></th>
<th>表结构数据库</th>
<th>图数据库（属性图）</th>
</tr>
</thead>
<tbody>
<tr>
<td>查询</td>
<td><figure><a class="lightgallery" href="/corp-rel-graph/why_1_sql_join.webp" title="why_1_sql_join" data-thumbnail="/corp-rel-graph/why_1_sql_join.webp">
        <img
            
            loading="lazy"
            src="/corp-rel-graph/why_1_sql_join.webp"
            srcset="/corp-rel-graph/why_1_sql_join.webp, /corp-rel-graph/why_1_sql_join.webp 1.5x, /corp-rel-graph/why_1_sql_join.webp 2x"
            sizes="auto"
            alt="why_1_sql_join" height="1412"  width="1848" >
    </a></figure></td>
<td><figure><a class="lightgallery" href="/corp-rel-graph/why_1_ngql.webp" title="why_1_ngql" data-thumbnail="/corp-rel-graph/why_1_ngql.webp">
        <img
            
            loading="lazy"
            src="/corp-rel-graph/why_1_ngql.webp"
            srcset="/corp-rel-graph/why_1_ngql.webp, /corp-rel-graph/why_1_ngql.webp 1.5x, /corp-rel-graph/why_1_ngql.webp 2x"
            sizes="auto"
            alt="why_1_ngql" height="892"  width="3400" >
    </a></figure></td>
</tr>
<tr>
<td>建模</td>
<td><figure><a class="lightgallery" href="/corp-rel-graph/why_0_tabular.webp" title="why_0_tabular" data-thumbnail="/corp-rel-graph/why_0_tabular.webp">
        <img
            
            loading="lazy"
            src="/corp-rel-graph/why_0_tabular.webp"
            srcset="/corp-rel-graph/why_0_tabular.webp, /corp-rel-graph/why_0_tabular.webp 1.5x, /corp-rel-graph/why_0_tabular.webp 2x"
            sizes="auto"
            alt="why_0_tabular" height="1068"  width="1556" >
    </a></figure></td>
<td><figure><a class="lightgallery" href="/corp-rel-graph/why_0_graph_based.webp" title="why_0_graph_based" data-thumbnail="/corp-rel-graph/why_0_graph_based.webp">
        <img
            
            loading="lazy"
            src="/corp-rel-graph/why_0_graph_based.webp"
            srcset="/corp-rel-graph/why_0_graph_based.webp, /corp-rel-graph/why_0_graph_based.webp 1.5x, /corp-rel-graph/why_0_graph_based.webp 2x"
            sizes="auto"
            alt="why_0_graph_based" height="1336"  width="3348" >
    </a></figure></td>
</tr>
<tr>
<td>性能</td>
<td>4 跳查询时延 1544 秒</td>
<td>4 跳查询时延 1.36 秒</td>
</tr>
</tbody>
</table>
<p>综上，在本教程里，我们将利用图数据库来进行数据存储。</p>
<h2 id="图数据建模" class="headerLink">
    <a href="#%e5%9b%be%e6%95%b0%e6%8d%ae%e5%bb%ba%e6%a8%a1" class="header-mark"></a>2 图数据建模</h2><p>前面在讨论数据存在哪里的时候，我们已经揭示了在图数据库中建模的方式：本质上，在这张图中，将会有两种实体：</p>
<ul>
<li>人</li>
<li>公司</li>
</ul>
<p>四种关系：</p>
<ul>
<li><code>人</code> –<code>作为亲人</code>–&gt;<code>人</code></li>
<li><code>人</code> –<code>作为角色</code>–&gt; <code>公司</code></li>
<li><code>人</code> 或者 <code>公司</code> –<code>持有股份</code>–&gt; <code>公司</code></li>
<li><code>公司</code> –<code>作为子机构</code>–&gt; <code>公司</code></li>
</ul>
<p>这里面，实体与关系本身都可以包含更多的信息，这些信息在图数据库里就是实体、关系自身的属性。如下图表示：</p>
<ul>
<li><code>人</code>的属性包括 <code>name</code>，<code>age</code></li>
<li><code>公司</code>的属性包括 <code>name</code>，<code>location</code></li>
<li><code>持有股份</code> 这个关系有属性 <code>share</code>(份额)</li>
<li><code>任职</code>这个关系有属性 <code>role</code>，<code>level</code></li>
</ul>
<p><figure><a class="lightgallery" href="/corp-rel-graph/why_0_graph_based.webp" title="why_0_graph_based" data-thumbnail="/corp-rel-graph/why_0_graph_based.webp">
        <img
            
            loading="lazy"
            src="/corp-rel-graph/why_0_graph_based.webp"
            srcset="/corp-rel-graph/why_0_graph_based.webp, /corp-rel-graph/why_0_graph_based.webp 1.5x, /corp-rel-graph/why_0_graph_based.webp 2x"
            sizes="auto"
            alt="why_0_graph_based" height="1336"  width="3348" >
    </a></figure></p>
<h2 id="数据入库" class="headerLink">
    <a href="#%e6%95%b0%e6%8d%ae%e5%85%a5%e5%ba%93" class="header-mark"></a>3 数据入库</h2><p>本教程中，我们使用的图数据库叫做 Nebula Graph（星云图数据库），它是一个以 Apache 2.0 许可证开源的分布式图数据库。</p>
<blockquote>
<p>Nebula Graph in Github: <a href="https://github.com/vesoft-inc/nebula" target="_blank" rel="noopener noreferrer">https://github.com/vesoft-inc/nebula</a></p>
</blockquote>
<p>在向 Nebula Graph 导入数据的时候，关于如何选择工具，请参考<a href="https://docs.nebula-graph.com.cn/2.6.1/20.appendix/write-tools/" target="_blank" rel="noopener noreferrer">这篇文档</a>和<a href="https://www.siwei.io/sketches/nebula-data-import-options/" target="_blank" rel="noopener noreferrer">这个视频</a>。</p>
<p>这里，由于数据格式是 csv 文件并且利用单机的客户端资源就足够了，我们可以选择使用 nebula-importer 来完成这个工作。</p>
<blockquote>
<p>提示：在导入数据之前，请先部署一个 Nebula Graph 集群，最简便的部署方式是使用 nebula-up 这个小工具，只需要一行命令就能在 Linux 机器上同时启动一个 Nebula Graph 核心和可视化图探索工具  <a href="https://docs.nebula-graph.com.cn/2.6.1/nebula-studio/about-studio/st-ug-what-is-graph-studio/" target="_blank" rel="noopener noreferrer">Nebula Graph Studio</a>。如果你更愿意用 Docker 部署，请参考<a href="https://docs.nebula-graph.com.cn/2.6.1/4.deployment-and-installation/2.compile-and-install-nebula-graph/3.deploy-nebula-graph-with-docker-compose/" target="_blank" rel="noopener noreferrer">这个文档</a>。</p>
<p>本文假设我们使用 <a href="https://siwei.io/nebula-up/" target="_blank" rel="noopener noreferrer">Nebula-UP</a> 来部署：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">curl -fsSL nebula-up.siwei.io/install.sh <span class="p">|</span> bash
</code></pre></td></tr></table>
</div>
</div></blockquote>
<p>这里的数据是<a href="https://github.com/wey-gu/nebula-shareholding-example" target="_blank" rel="noopener noreferrer">生成器</a>生成的，你可以按需生成任意规模随机数据集，或者选择一份生成好了的数据在<a href="https://github.com/wey-gu/nebula-shareholding-example/tree/main/data_sample" target="_blank" rel="noopener noreferrer">这里</a></p>
<p>有了这些<a href="https://github.com/wey-gu/nebula-shareholding-example/tree/main/data_sample" target="_blank" rel="noopener noreferrer">数据</a>，我们可以开始导入了。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ pip install <span class="nv">Faker</span><span class="o">==</span>2.0.5 <span class="nv">pydbgen</span><span class="o">==</span>1.0.5
$ python3 data_generator.py
$ ls -l data
total <span class="m">1688</span>
-rw-r--r--  <span class="m">1</span> weyl  staff   <span class="m">23941</span> Jul <span class="m">14</span> 13:28 corp.csv
-rw-r--r--  <span class="m">1</span> weyl  staff    <span class="m">1277</span> Jul <span class="m">14</span> 13:26 corp_rel.csv
-rw-r--r--  <span class="m">1</span> weyl  staff    <span class="m">3048</span> Jul <span class="m">14</span> 13:26 corp_share.csv
-rw-r--r--  <span class="m">1</span> weyl  staff  <span class="m">211661</span> Jul <span class="m">14</span> 13:26 person.csv
-rw-r--r--  <span class="m">1</span> weyl  staff  <span class="m">179770</span> Jul <span class="m">14</span> 13:26 person_corp_role.csv
-rw-r--r--  <span class="m">1</span> weyl  staff  <span class="m">322965</span> Jul <span class="m">14</span> 13:26 person_corp_share.csv
-rw-r--r--  <span class="m">1</span> weyl  staff   <span class="m">17689</span> Jul <span class="m">14</span> 13:26 person_rel.csv
</code></pre></td></tr></table>
</div>
</div><p>导入工具 <a href="https://github.com/vesoft-inc/nebula-importer" target="_blank" rel="noopener noreferrer">nebula-importer</a> 是一个 golang 的二进制文件，使用方式就是将导入的 Nebula Graph 连接信息、数据源中字段的含义的信息写进 YAML 格式的配置文件里，然后通过命令行调用它。可以参考<a href="https://docs.nebula-graph.com.cn/2.6.1/nebula-importer/use-importer/" target="_blank" rel="noopener noreferrer">文档</a>或者它的 GitHub 仓库里的例子。</p>
<p>这里我已经写好了准备好了一份 nebula-importer 的配置文件，在数据生成器同一个 repo 之下的<a href="https://github.com/wey-gu/nebula-shareholding-example/blob/main/nebula-importer.yaml" target="_blank" rel="noopener noreferrer">这里</a>。</p>
<p>最后，只需要执行如下命令就可以开始数据导入了：</p>
<blockquote>
<p>注意，在写本文的时候，nebula 的新版本是 2.6.1，这里对应的 nebula-importer 是 v2.6.0，如果您出现导入错误可能是版本不匹配，可以相应调整下边命令中的版本号。</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">git clone https://github.com/wey-gu/nebula-shareholding-example
cp -r data_sample /tmp/data
cp nebula-importer.yaml /tmp/data/
docker run --rm -ti <span class="se">\
</span><span class="se"></span>    --network<span class="o">=</span>nebula-docker-compose_nebula-net <span class="se">\
</span><span class="se"></span>    -v /tmp/data:/root <span class="se">\
</span><span class="se"></span>    vesoft/nebula-importer:v2.6.0 <span class="se">\
</span><span class="se"></span>    --config /root/nebula-importer.yaml
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>你知道吗？TL;DR</p>
<p>实际上，这份 importer 的<a href="https://github.com/wey-gu/nebula-shareholding-example/blob/main/nebula-importer.yaml" target="_blank" rel="noopener noreferrer">配置</a>里帮我们做了 Nebula Graph 之中的图建模的操作，它们的指令在下边，我们不需要手动去执行了。</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="k">CREATE</span><span class="w"> </span><span class="k">SPACE</span><span class="w"> </span><span class="k">IF</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">EXISTS</span><span class="w"> </span><span class="n">shareholding</span><span class="p">(</span><span class="n">partition_num</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span><span class="w"> </span><span class="n">replica_factor</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="n">vid_type</span><span class="o">=</span><span class="n">FIXED_STRING</span><span class="p">(</span><span class="mi">10</span><span class="p">));</span><span class="w">
</span><span class="w"></span><span class="n">USE</span><span class="w"> </span><span class="n">shareholding</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="n">person</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="n">string</span><span class="p">);</span><span class="w">
</span><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="n">corp</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="n">string</span><span class="p">);</span><span class="w">
</span><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="k">INDEX</span><span class="w"> </span><span class="n">person_name</span><span class="w"> </span><span class="k">on</span><span class="w"> </span><span class="n">person</span><span class="p">(</span><span class="n">name</span><span class="p">(</span><span class="mi">20</span><span class="p">));</span><span class="w">
</span><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="k">INDEX</span><span class="w"> </span><span class="n">corp_name</span><span class="w"> </span><span class="k">on</span><span class="w"> </span><span class="n">corp</span><span class="p">(</span><span class="n">name</span><span class="p">(</span><span class="mi">20</span><span class="p">));</span><span class="w">
</span><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="o">`</span><span class="n">role_as</span><span class="o">`</span><span class="p">(</span><span class="k">role</span><span class="w"> </span><span class="n">string</span><span class="p">);</span><span class="w">
</span><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">is_branch_of</span><span class="p">();</span><span class="w">
</span><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">hold_share</span><span class="p">(</span><span class="k">share</span><span class="w"> </span><span class="nb">float</span><span class="p">);</span><span class="w">
</span><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">reletive_with</span><span class="p">(</span><span class="n">degree</span><span class="w"> </span><span class="nb">int</span><span class="p">);</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><h2 id="图库中查询数据" class="headerLink">
    <a href="#%e5%9b%be%e5%ba%93%e4%b8%ad%e6%9f%a5%e8%af%a2%e6%95%b0%e6%8d%ae" class="header-mark"></a>4 图库中查询数据</h2><blockquote>
<p>Tips: 你知道吗，你也可以无需部署安装，通过 <a href="https://nebula-graph.com.cn/demo/" target="_blank" rel="noopener noreferrer">Nebula-Playground</a> 之中，找到股权穿透来在线访问同一份数据集。</p>
</blockquote>
<p>我们可以借助  <a href="https://docs.nebula-graph.com.cn/2.6.1/nebula-studio/about-studio/st-ug-what-is-graph-studio/" target="_blank" rel="noopener noreferrer">Nebula Graph Studio</a> 来访问数据，访问我们部署 Nebula-UP 的服务器地址的 7001 端口就可以了：</p>
<p>假设服务器地址为 <code>192.168.8.127</code>，则有：</p>
<ul>
<li>Nebula Studio 地址：<code>192.168.8.127:7001</code></li>
<li>Nebula Graph 地址：<code>192.168.8.127:9669</code></li>
<li>默认用户名：<code>root</code></li>
<li>默认密码：<code>nebula</code></li>
</ul>
<p>访问 Nebula Studio：</p>
<p><figure><a class="lightgallery" href="/corp-rel-graph/studio_login.webp" title="studio_login" data-thumbnail="/corp-rel-graph/studio_login.webp">
        <img
            
            loading="lazy"
            src="/corp-rel-graph/studio_login.webp"
            srcset="/corp-rel-graph/studio_login.webp, /corp-rel-graph/studio_login.webp 1.5x, /corp-rel-graph/studio_login.webp 2x"
            sizes="auto"
            alt="studio_login" height="1936"  width="2958" >
    </a></figure></p>
<p>选择图空间: Shareholding</p>
<p><figure><a class="lightgallery" href="/corp-rel-graph/studio_space_selection.webp" title="studio_space_selection" data-thumbnail="/corp-rel-graph/studio_space_selection.webp">
        <img
            
            loading="lazy"
            src="/corp-rel-graph/studio_space_selection.webp"
            srcset="/corp-rel-graph/studio_space_selection.webp, /corp-rel-graph/studio_space_selection.webp 1.5x, /corp-rel-graph/studio_space_selection.webp 2x"
            sizes="auto"
            alt="studio_space_selection" height="1936"  width="2958" >
    </a></figure></p>
<p>之后，我们就可以在里边探索比如一个公司的三跳以内的股权穿透，具体的操作可以参考：<a href="https://nebula-graph.com.cn/demo/shared-holding/" target="_blank" rel="noopener noreferrer">股权穿透在线 Playground 的介绍</a>：</p>
<p><figure><a class="lightgallery" href="https://nebula-website-cn.oss-cn-hangzhou.aliyuncs.com/nebula-website/images/demo/shared-holding/studio_explore_2.png" title="Studio 股权穿透" data-thumbnail="https://nebula-website-cn.oss-cn-hangzhou.aliyuncs.com/nebula-website/images/demo/shared-holding/studio_explore_2.png">
        <img
            
            loading="lazy"
            src="https://nebula-website-cn.oss-cn-hangzhou.aliyuncs.com/nebula-website/images/demo/shared-holding/studio_explore_2.png"
            srcset="https://nebula-website-cn.oss-cn-hangzhou.aliyuncs.com/nebula-website/images/demo/shared-holding/studio_explore_2.png, https://nebula-website-cn.oss-cn-hangzhou.aliyuncs.com/nebula-website/images/demo/shared-holding/studio_explore_2.png 1.5x, https://nebula-website-cn.oss-cn-hangzhou.aliyuncs.com/nebula-website/images/demo/shared-holding/studio_explore_2.png 2x"
            sizes="auto"
            alt="Studio 股权穿透">
    </a></figure></p>
<h2 id="构建一个图谱系统" class="headerLink">
    <a href="#%e6%9e%84%e5%bb%ba%e4%b8%80%e4%b8%aa%e5%9b%be%e8%b0%b1%e7%b3%bb%e7%bb%9f" class="header-mark"></a>5 构建一个图谱系统</h2><blockquote>
<p>这部分的代码开源在 GitHub 上：</p>
<p><a href="https://github.com/wey-gu/nebula-corp-rel-search" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/nebula-corp-rel-search</a></p>
<p>本项目的 Demo 也在 PyCon China 2021 上的演讲中有过展示：<a href="https://www.bilibili.com/video/BV12u411o7Y6" target="_blank" rel="noopener noreferrer">视频地址</a></p>
</blockquote>
<p>在此基础之上，我们可以构建一个提供给终端用户来使用的股权查询系统了，我们已经有了图数据库作为这个图谱的存储引擎，理论上，如果业务允许，我们可以直接使用或者封装 Nebula Graph Studio 来提供服务，这完全是可行也是合规的，不过，有一些情况下，我们需要自己去实现界面、或者我们需要封装出一个 API 给上游（多端）提供图谱查询的功能。</p>
<p>为此，我为大家写了一个简单的实例项目，提供这样的服务，他的架构也很直接：</p>
<ul>
<li>前端接受用户要查询的穿透法人、公司，按需发请求给后端，并用 D3.js 将返回结果渲染为关系图</li>
<li>后端接受前端的 API 请求，将请求转换为 Graph DB 的查询，并返回前端期待的结果</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">  ┌───────────────┬───────────────┐
  │               │  Frontend     │
  │               │               │
  │    ┌──────────▼──────────┐    │
  │    │ Vue.JS              │    │
  │    │ D3.JS               │    │
  │    └──────────┬──────────┘    │
  │               │  Backend      │
  │    ┌──────────┴──────────┐    │
  │    │ Flask               │    │
  │    │ Nebula-Python       │    │
  │    └──────────┬──────────┘    │
  │               │  Graph Query  │
  │    ┌──────────▼──────────┐    │
  │    │ Graph Database      │    │
  │    └─────────────────────┘    │
  │                               │
  └───────────────────────────────┘
</code></pre></td></tr></table>
</div>
</div><h3 id="后端服务--图数据库" class="headerLink">
    <a href="#%e5%90%8e%e7%ab%af%e6%9c%8d%e5%8a%a1--%e5%9b%be%e6%95%b0%e6%8d%ae%e5%ba%93" class="header-mark"></a>5.1 后端服务&ndash;&gt;图数据库</h3><blockquote>
<p>详细的数据格式分析大家可以参考<a href="https://github.com/wey-gu/nebula-corp-rel-search#data-from-backend-side" target="_blank" rel="noopener noreferrer">这里</a></p>
</blockquote>
<h4 id="查询语句" class="headerLink">
    <a href="#%e6%9f%a5%e8%af%a2%e8%af%ad%e5%8f%a5" class="header-mark"></a>5.1.1 查询语句</h4><p>我们假设用户请求的实体是 <code>c_132</code> ，那么请求 1 到 3 步的关系穿透的语法是：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">v</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e</span><span class="p">:</span><span class="o">`</span><span class="n">hold_share</span><span class="o">`|</span><span class="p">:</span><span class="o">`</span><span class="n">is_branch_of</span><span class="o">`|</span><span class="p">:</span><span class="o">`</span><span class="n">reletive_with</span><span class="o">`|</span><span class="p">:</span><span class="o">`</span><span class="n">role_as</span><span class="o">`*</span><span class="mi">1</span><span class="p">..</span><span class="mi">3</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">v2</span><span class="p">)</span><span class="w"> </span><span class="err">\</span><span class="w">
</span><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">v</span><span class="p">)</span><span class="w"> </span><span class="k">IN</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;c_132&#34;</span><span class="p">]</span><span class="w"> </span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="w"> </span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">100</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>这里边 <code>()</code>包裹的是图之中的点，而<code>[]</code> 包裹的则是点之间的关系：边，所以：</p>
<p><code>(v)-[e:</code>hold_share<code>|:</code>is_branch_of<code>|:</code>reletive_with<code>|:</code>role_as<code>*1..3]-(v2)</code> 之中的：</p>
<p><code>(v)-[xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx]-(v2)</code>应该比较好理解，意思是从 <code>v</code> 到<code>v2</code> 做拓展。</p>
<p>现在我们介绍中间<code>[]</code>包裹的部分，这里，它的语义是：经由四种类型的边（<code>:</code>之后的是边的类型，<code>|</code>代表或者）通过可变的跳数：<code>*1..3</code> （一跳到三跳）。</p>
<p>所以，简单来说整理看开，我们的拓展的路径是：从点 <code>v</code> 开始，经由四种关系一到三跳拓展到点<code>v2</code>，返回整个拓展路径 <code>p</code>，限制 100 个路径结果，其中 <code>v</code> 是 <code>c_132</code>。</p>
<h4 id="nebula-python-client-sdk" class="headerLink">
    <a href="#nebula-python-client-sdk" class="header-mark"></a>5.1.2 Nebula Python Client/ SDK</h4><p>我们已经知道了查询语句的语法，那么就只需要在后端程序里根据请求、通过图数据库的客户端来发出查询请求，并处理返回结构就好了。在今天的例子中，我选择使用 Python 来实现后端的逻辑，所以我用了 Nebula-python 这个库，它是 Nebula 的 Python Client。</p>
<blockquote>
<p>你知道么？截至到现在，Nebula 在 GitHub 上有 Java，GO，Python，C++，Spark，Flink，Rust（未GA），NodeJS（未GA） 的客户端支持，更多的语言的客户端也会慢慢被发布哦。</p>
</blockquote>
<p>下边是一个 Python Client 执行一个查询并返回结果的例子，值得注意的是，在我实现这个代码的时候，Nebula Python 尚未支持返回 JSON （通过<code>session.execute_json()</code>）结果，如果你要实现自己的代码，我非常推荐试试 JSON 哈，就可以不用从对象中一点点取数据了，不过借助 iPython/IDLE 这种 <code>REPL</code>，快速了解返回对象的结构也没有那么麻烦。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">$</span> <span class="n">python3</span> <span class="o">-</span><span class="n">m</span> <span class="n">pip</span> <span class="n">install</span> <span class="n">nebula2</span><span class="o">-</span><span class="n">python</span><span class="o">==</span><span class="mf">2.5.0</span> <span class="c1"># 注意这里我引用旧的记录，它是 2.5.0，</span>
<span class="err">$</span> <span class="n">ipython</span>
<span class="n">In</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="kn">from</span> <span class="nn">nebula2.gclient.net</span> <span class="kn">import</span> <span class="n">ConnectionPool</span>
<span class="n">In</span> <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="kn">from</span> <span class="nn">nebula2.Config</span> <span class="kn">import</span> <span class="n">Config</span>
<span class="n">In</span> <span class="p">[</span><span class="mi">3</span><span class="p">]:</span> <span class="n">config</span> <span class="o">=</span> <span class="n">Config</span><span class="p">()</span>
   <span class="o">...</span><span class="p">:</span> <span class="n">config</span><span class="o">.</span><span class="n">max_connection_pool_size</span> <span class="o">=</span> <span class="mi">10</span>
   <span class="o">...</span><span class="p">:</span> <span class="c1"># init connection pool</span>
   <span class="o">...</span><span class="p">:</span> <span class="n">connection_pool</span> <span class="o">=</span> <span class="n">ConnectionPool</span><span class="p">()</span>
   <span class="o">...</span><span class="p">:</span> <span class="c1"># if the given servers are ok, return true, else return false</span>
   <span class="o">...</span><span class="p">:</span> <span class="n">ok</span> <span class="o">=</span> <span class="n">connection_pool</span><span class="o">.</span><span class="n">init</span><span class="p">([(</span><span class="s1">&#39;192.168.8.137&#39;</span><span class="p">,</span> <span class="mi">9669</span><span class="p">)],</span> <span class="n">config</span><span class="p">)</span>
   <span class="o">...</span><span class="p">:</span> <span class="n">session</span> <span class="o">=</span> <span class="n">connection_pool</span><span class="o">.</span><span class="n">get_session</span><span class="p">(</span><span class="s1">&#39;root&#39;</span><span class="p">,</span> <span class="s1">&#39;nebula&#39;</span><span class="p">)</span>
<span class="p">[</span><span class="mi">2021</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">13</span> <span class="mi">13</span><span class="p">:</span><span class="mi">44</span><span class="p">:</span><span class="mi">24</span><span class="p">,</span><span class="mi">242</span><span class="p">]:</span><span class="n">Get</span> <span class="n">connection</span> <span class="n">to</span> <span class="p">(</span><span class="s1">&#39;192.168.8.137&#39;</span><span class="p">,</span> <span class="mi">9669</span><span class="p">)</span>

<span class="n">In</span> <span class="p">[</span><span class="mi">4</span><span class="p">]:</span> <span class="n">resp</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&#34;use shareholding&#34;</span><span class="p">)</span>
<span class="n">In</span> <span class="p">[</span><span class="mi">5</span><span class="p">]:</span> <span class="n">query</span> <span class="o">=</span> <span class="s1">&#39;&#39;&#39;
</span><span class="s1">   ...: MATCH p=(v)-[e:`hold_share`|:`is_branch_of`|:`reletive_with`|:`role_as`*1..3]-(v2) </span><span class="se">\
</span><span class="se"></span><span class="s1">   ...: WHERE id(v) IN [&#34;c_132&#34;] RETURN p LIMIT 100
</span><span class="s1">   ...: &#39;&#39;&#39;</span>
<span class="n">In</span> <span class="p">[</span><span class="mi">6</span><span class="p">]:</span> <span class="n">resp</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">query</span><span class="p">)</span> <span class="c1"># Note: after nebula graph 2.6.0, we could use execute_json as well</span>

<span class="n">In</span> <span class="p">[</span><span class="mi">7</span><span class="p">]:</span> <span class="n">resp</span><span class="o">.</span><span class="n">col_size</span><span class="p">()</span>
<span class="n">Out</span><span class="p">[</span><span class="mi">7</span><span class="p">]:</span> <span class="mi">1</span>

<span class="n">In</span> <span class="p">[</span><span class="mi">9</span><span class="p">]:</span> <span class="n">resp</span><span class="o">.</span><span class="n">row_size</span><span class="p">()</span>
<span class="n">Out</span><span class="p">[</span><span class="mi">10</span><span class="p">]:</span> <span class="mi">100</span>
</code></pre></td></tr></table>
</div>
</div><p>我们往下分析看看，我们知道这个请求本质上结果是路径，它有一个 <code>.nodes()</code> 方法和 <code>.relationships()</code>方法来获得路径上的点和边：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">In</span> <span class="p">[</span><span class="mi">11</span><span class="p">]:</span> <span class="n">p</span><span class="o">=</span><span class="n">resp</span><span class="o">.</span><span class="n">row_values</span><span class="p">(</span><span class="mi">22</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">as_path</span><span class="p">()</span>

<span class="n">In</span> <span class="p">[</span><span class="mi">12</span><span class="p">]:</span> <span class="n">p</span><span class="o">.</span><span class="n">nodes</span><span class="p">()</span>
<span class="n">Out</span><span class="p">[</span><span class="mi">12</span><span class="p">]:</span>
<span class="p">[(</span><span class="s2">&#34;c_132&#34;</span> <span class="p">:</span><span class="n">corp</span><span class="p">{</span><span class="n">name</span><span class="p">:</span> <span class="s2">&#34;Chambers LLC&#34;</span><span class="p">}),</span>
 <span class="p">(</span><span class="s2">&#34;p_4000&#34;</span> <span class="p">:</span><span class="n">person</span><span class="p">{</span><span class="n">name</span><span class="p">:</span> <span class="s2">&#34;Colton Bailey&#34;</span><span class="p">})]</span>

<span class="n">In</span> <span class="p">[</span><span class="mi">13</span><span class="p">]:</span> <span class="n">p</span><span class="o">.</span><span class="n">relationships</span><span class="p">()</span>
<span class="n">Out</span><span class="p">[</span><span class="mi">13</span><span class="p">]:</span> <span class="p">[(</span><span class="s2">&#34;p_4000&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="err">`</span><span class="n">role_as</span><span class="err">`</span><span class="o">@</span><span class="mi">0</span><span class="p">{</span><span class="n">role</span><span class="p">:</span> <span class="s2">&#34;Editorial assistant&#34;</span><span class="p">}]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;c_132&#34;</span><span class="p">)]</span>
</code></pre></td></tr></table>
</div>
</div><p>对于边来说有这些方法 <code>.edge_name()</code>, <code>.properties()</code>, <code>.start_vertex_id()</code>, <code>.end_vertex_id()</code>，这里 edge_name 是获得边的类型。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">In</span> <span class="p">[</span><span class="mi">14</span><span class="p">]:</span> <span class="n">rel</span><span class="o">=</span><span class="n">p</span><span class="o">.</span><span class="n">relationships</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>

<span class="n">In</span> <span class="p">[</span><span class="mi">15</span><span class="p">]:</span> <span class="n">rel</span>
<span class="n">Out</span><span class="p">[</span><span class="mi">15</span><span class="p">]:</span> <span class="p">(</span><span class="s2">&#34;p_4000&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="err">`</span><span class="n">role_as</span><span class="err">`</span><span class="o">@</span><span class="mi">0</span><span class="p">{</span><span class="n">role</span><span class="p">:</span> <span class="s2">&#34;Editorial assistant&#34;</span><span class="p">}]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;c_132&#34;</span><span class="p">)</span>

<span class="n">In</span> <span class="p">[</span><span class="mi">16</span><span class="p">]:</span> <span class="n">rel</span><span class="o">.</span><span class="n">edge_name</span><span class="p">()</span>
<span class="n">Out</span><span class="p">[</span><span class="mi">16</span><span class="p">]:</span> <span class="s1">&#39;`role_as`&#39;</span>

<span class="n">In</span> <span class="p">[</span><span class="mi">17</span><span class="p">]:</span> <span class="n">rel</span><span class="o">.</span><span class="n">properties</span><span class="p">()</span>
<span class="n">Out</span><span class="p">[</span><span class="mi">17</span><span class="p">]:</span> <span class="p">{</span><span class="s1">&#39;role&#39;</span><span class="p">:</span> <span class="s2">&#34;Editorial assistant&#34;</span><span class="p">}</span>

<span class="n">In</span> <span class="p">[</span><span class="mi">18</span><span class="p">]:</span> <span class="n">rel</span><span class="o">.</span><span class="n">start_vertex_id</span><span class="p">()</span>
<span class="n">Out</span><span class="p">[</span><span class="mi">18</span><span class="p">]:</span> <span class="s2">&#34;p_4000&#34;</span>

<span class="n">In</span> <span class="p">[</span><span class="mi">19</span><span class="p">]:</span> <span class="n">rel</span><span class="o">.</span><span class="n">end_vertex_id</span><span class="p">()</span>
<span class="n">Out</span><span class="p">[</span><span class="mi">19</span><span class="p">]:</span> <span class="s2">&#34;c_132&#34;</span>
</code></pre></td></tr></table>
</div>
</div><p>对于点来说，可以用到这些方法 <code>.tags()</code>, <code>properties</code>, <code>get_id()</code>，这里边 tags 是获得点的类型，它在 Nebula 里叫标签<code>tag</code>。</p>
<p>这些概念可以在<a href="https://docs.nebula-graph.com.cn/2.6.1/1.introduction/2.data-model/" target="_blank" rel="noopener noreferrer">文档里</a>获得更详细的解释。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">In</span> <span class="p">[</span><span class="mi">20</span><span class="p">]:</span> <span class="n">node</span><span class="o">=</span><span class="n">p</span><span class="o">.</span><span class="n">nodes</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>

<span class="n">In</span> <span class="p">[</span><span class="mi">21</span><span class="p">]:</span> <span class="n">node</span><span class="o">.</span><span class="n">tags</span><span class="p">()</span>
<span class="n">Out</span><span class="p">[</span><span class="mi">21</span><span class="p">]:</span> <span class="p">[</span><span class="s1">&#39;corp&#39;</span><span class="p">]</span>

<span class="n">In</span> <span class="p">[</span><span class="mi">22</span><span class="p">]:</span> <span class="n">node</span><span class="o">.</span><span class="n">properties</span><span class="p">(</span><span class="s1">&#39;corp&#39;</span><span class="p">)</span>
<span class="n">Out</span><span class="p">[</span><span class="mi">22</span><span class="p">]:</span> <span class="p">{</span><span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s2">&#34;Chambers LLC&#34;</span><span class="p">}</span>

<span class="n">In</span> <span class="p">[</span><span class="mi">23</span><span class="p">]:</span> <span class="n">node</span><span class="o">.</span><span class="n">get_id</span><span class="p">()</span>
<span class="n">Out</span><span class="p">[</span><span class="mi">23</span><span class="p">]:</span> <span class="s2">&#34;c_132&#34;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="前端渲染点边为图" class="headerLink">
    <a href="#%e5%89%8d%e7%ab%af%e6%b8%b2%e6%9f%93%e7%82%b9%e8%be%b9%e4%b8%ba%e5%9b%be" class="header-mark"></a>5.2 前端渲染点边为图</h3><blockquote>
<p>详细的分析大家也可以参考<a href="https://github.com/wey-gu/nebula-corp-rel-search#data-visualization" target="_blank" rel="noopener noreferrer">这里</a></p>
</blockquote>
<p>为了方便实现，我们采用了 Vue.js 和 <a href="https://github.com/ChenCyl/vue-network-d3" target="_blank" rel="noopener noreferrer">vue-network-d3</a>（D3 的 Vue Binding）。</p>
<p>通过 vue-network-d3 的抽象，能看出来喂给他这样的数据，就可以把点边信息渲染成很好看的图</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">nodes</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">{</span><span class="s2">&#34;id&#34;</span><span class="p">:</span> <span class="s2">&#34;c_132&#34;</span><span class="p">,</span> <span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Chambers LLC&#34;</span><span class="p">,</span> <span class="s2">&#34;tag&#34;</span><span class="p">:</span> <span class="s2">&#34;corp&#34;</span><span class="p">},</span>
        <span class="p">{</span><span class="s2">&#34;id&#34;</span><span class="p">:</span> <span class="s2">&#34;p_4000&#34;</span><span class="p">,</span> <span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Colton Bailey&#34;</span><span class="p">,</span> <span class="s2">&#34;tag&#34;</span><span class="p">:</span> <span class="s2">&#34;person&#34;</span><span class="p">}],</span>
<span class="n">relationships</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">{</span><span class="s2">&#34;source&#34;</span><span class="p">:</span> <span class="s2">&#34;p_4000&#34;</span><span class="p">,</span> <span class="s2">&#34;target&#34;</span><span class="p">:</span> <span class="s2">&#34;c_132&#34;</span><span class="p">,</span> <span class="s2">&#34;properties&#34;</span><span class="p">:</span> <span class="p">{</span> <span class="s2">&#34;role&#34;</span><span class="p">:</span> <span class="s2">&#34;Editorial assistant&#34;</span> <span class="p">},</span> <span class="s2">&#34;edge&#34;</span><span class="p">:</span> <span class="s2">&#34;`role_as`&#34;</span><span class="p">}]</span>
</code></pre></td></tr></table>
</div>
</div><p><figure><a class="lightgallery" href="/corp-rel-graph/vue-network-d3-demo.webp" title="d3-demo" data-thumbnail="/corp-rel-graph/vue-network-d3-demo.webp">
        <img
            
            loading="lazy"
            src="/corp-rel-graph/vue-network-d3-demo.webp"
            srcset="/corp-rel-graph/vue-network-d3-demo.webp, /corp-rel-graph/vue-network-d3-demo.webp 1.5x, /corp-rel-graph/vue-network-d3-demo.webp 2x"
            sizes="auto"
            alt="d3-demo" height="725"  width="960" >
    </a></figure></p>
<h3 id="前端--后端" class="headerLink">
    <a href="#%e5%89%8d%e7%ab%af--%e5%90%8e%e7%ab%af" class="header-mark"></a>5.3 前端&lt;&ndash;后端</h3><blockquote>
<p>详细信息可以参考<a href="https://github.com/wey-gu/nebula-corp-rel-search#the-data-construction-in-back-end" target="_blank" rel="noopener noreferrer">这里</a></p>
</blockquote>
<p>我们从 D3 的初步研究上可以知道，后端只需要返回如下的 JSON 格式数据就好了</p>
<p>Nodes:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="p">[{</span><span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="s2">&#34;c_132&#34;</span><span class="p">,</span> <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Chambers LLC&#34;</span><span class="p">,</span> <span class="nt">&#34;tag&#34;</span><span class="p">:</span> <span class="s2">&#34;corp&#34;</span><span class="p">},</span>
 <span class="p">{</span><span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="s2">&#34;p_4000&#34;</span><span class="p">,</span> <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Colton Bailey&#34;</span><span class="p">,</span> <span class="nt">&#34;tag&#34;</span><span class="p">:</span> <span class="s2">&#34;person&#34;</span><span class="p">}]</span>
</code></pre></td></tr></table>
</div>
</div><p>Relationships:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="p">[{</span><span class="nt">&#34;source&#34;</span><span class="p">:</span> <span class="s2">&#34;p_4000&#34;</span><span class="p">,</span> <span class="nt">&#34;target&#34;</span><span class="p">:</span> <span class="s2">&#34;c_132&#34;</span><span class="p">,</span> <span class="nt">&#34;properties&#34;</span><span class="p">:</span> <span class="p">{</span> <span class="nt">&#34;role&#34;</span><span class="p">:</span> <span class="s2">&#34;Editorial assistant&#34;</span> <span class="p">},</span> <span class="nt">&#34;edge&#34;</span><span class="p">:</span> <span class="s2">&#34;`role_as`&#34;</span><span class="p">},</span>
 <span class="p">{</span><span class="nt">&#34;source&#34;</span><span class="p">:</span> <span class="s2">&#34;p_1039&#34;</span><span class="p">,</span> <span class="nt">&#34;target&#34;</span><span class="p">:</span> <span class="s2">&#34;c_132&#34;</span><span class="p">,</span> <span class="nt">&#34;properties&#34;</span><span class="p">:</span> <span class="p">{</span> <span class="nt">&#34;share&#34;</span><span class="p">:</span> <span class="s2">&#34;3.0&#34;</span> <span class="p">},</span> <span class="nt">&#34;edge&#34;</span><span class="p">:</span> <span class="s2">&#34;hold_share&#34;</span><span class="p">}]</span>
</code></pre></td></tr></table>
</div>
</div><p>于是，，结合前边我们用 iPython 分析 Python 返回结果看，这个逻辑大概是：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">make_graph_response</span><span class="p">(</span><span class="n">resp</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">dict</span><span class="p">:</span>
    <span class="n">nodes</span><span class="p">,</span> <span class="n">relationships</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(),</span> <span class="nb">list</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">row_index</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">row_size</span><span class="p">()):</span>
        <span class="n">path</span> <span class="o">=</span> <span class="n">resp</span><span class="o">.</span><span class="n">row_values</span><span class="p">(</span><span class="n">row_index</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">as_path</span><span class="p">()</span>
        <span class="n">_nodes</span> <span class="o">=</span> <span class="p">[</span>
            <span class="p">{</span>
                <span class="s2">&#34;id&#34;</span><span class="p">:</span> <span class="n">node</span><span class="o">.</span><span class="n">get_id</span><span class="p">(),</span> <span class="s2">&#34;tag&#34;</span><span class="p">:</span> <span class="n">node</span><span class="o">.</span><span class="n">tags</span><span class="p">()[</span><span class="mi">0</span><span class="p">],</span>
                <span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="n">node</span><span class="o">.</span><span class="n">properties</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">tags</span><span class="p">()[</span><span class="mi">0</span><span class="p">])</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;name&#34;</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">)</span>
                <span class="p">}</span>
                <span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="n">path</span><span class="o">.</span><span class="n">nodes</span><span class="p">()</span>
        <span class="p">]</span>
        <span class="n">nodes</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">_nodes</span><span class="p">)</span>
        <span class="n">_relationships</span> <span class="o">=</span> <span class="p">[</span>
            <span class="p">{</span>
                <span class="s2">&#34;source&#34;</span><span class="p">:</span> <span class="n">rel</span><span class="o">.</span><span class="n">start_vertex_id</span><span class="p">(),</span>
                <span class="s2">&#34;target&#34;</span><span class="p">:</span> <span class="n">rel</span><span class="o">.</span><span class="n">end_vertex_id</span><span class="p">(),</span>
                <span class="s2">&#34;properties&#34;</span><span class="p">:</span> <span class="n">rel</span><span class="o">.</span><span class="n">properties</span><span class="p">(),</span>
                <span class="s2">&#34;edge&#34;</span><span class="p">:</span> <span class="n">rel</span><span class="o">.</span><span class="n">edge_name</span><span class="p">()</span>
                <span class="p">}</span>
                <span class="k">for</span> <span class="n">rel</span> <span class="ow">in</span> <span class="n">path</span><span class="o">.</span><span class="n">relationships</span><span class="p">()</span>
        <span class="p">]</span>
        <span class="n">relationships</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">_relationships</span><span class="p">)</span>
    <span class="k">return</span> <span class="p">{</span><span class="s2">&#34;nodes&#34;</span><span class="p">:</span> <span class="n">nodes</span><span class="p">,</span> <span class="s2">&#34;relationships&#34;</span><span class="p">:</span> <span class="n">relationships</span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>前端到后端的通信是 HTTP ，所以我们可以借助 Flask，把这个函数封装成一个 RESTful API：</p>
<p>前端程序通过 HTTP POST 到 <code>/api</code></p>
<blockquote>
<p>参考<a href="https://github.com/wey-gu/nebula-corp-rel-search#the-flask-app" target="_blank" rel="noopener noreferrer">这里</a></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span> <span class="n">jsonify</span><span class="p">,</span> <span class="n">request</span>



<span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="vm">__name__</span><span class="p">)</span>


<span class="nd">@app</span><span class="o">.</span><span class="n">route</span><span class="p">(</span><span class="s2">&#34;/&#34;</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">root</span><span class="p">():</span>
    <span class="k">return</span> <span class="s2">&#34;Hey There?&#34;</span>


<span class="nd">@app</span><span class="o">.</span><span class="n">route</span><span class="p">(</span><span class="s2">&#34;/api&#34;</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;POST&#34;</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">api</span><span class="p">():</span>
    <span class="n">request_data</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">get_json</span><span class="p">()</span>
    <span class="n">entity</span> <span class="o">=</span> <span class="n">request_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;entity&#34;</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">entity</span><span class="p">:</span>
        <span class="n">resp</span> <span class="o">=</span> <span class="n">query_shareholding</span><span class="p">(</span><span class="n">entity</span><span class="p">)</span>
        <span class="n">data</span> <span class="o">=</span> <span class="n">make_graph_response</span><span class="p">(</span><span class="n">resp</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">data</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span> <span class="c1"># tbd</span>
    <span class="k">return</span> <span class="n">jsonify</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">parse_nebula_graphd_endpoint</span><span class="p">():</span>
    <span class="n">ng_endpoints_str</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="o">.</span><span class="n">get</span><span class="p">(</span>
        <span class="s1">&#39;NG_ENDPOINTS&#39;</span><span class="p">,</span> <span class="s1">&#39;127.0.0.1:9669,&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&#34;,&#34;</span><span class="p">)</span>
    <span class="n">ng_endpoints</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">endpoint</span> <span class="ow">in</span> <span class="n">ng_endpoints_str</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">endpoint</span><span class="p">:</span>
            <span class="n">parts</span> <span class="o">=</span> <span class="n">endpoint</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&#34;:&#34;</span><span class="p">)</span>  <span class="c1"># we dont consider IPv6 now</span>
            <span class="n">ng_endpoints</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">parts</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nb">int</span><span class="p">(</span><span class="n">parts</span><span class="p">[</span><span class="mi">1</span><span class="p">])))</span>
    <span class="k">return</span> <span class="n">ng_endpoints</span>

<span class="k">def</span> <span class="nf">query_shareholding</span><span class="p">(</span><span class="n">entity</span><span class="p">):</span>
    <span class="n">query_string</span> <span class="o">=</span> <span class="p">(</span>
        <span class="sa">f</span><span class="s2">&#34;USE shareholding; &#34;</span>
        <span class="sa">f</span><span class="s2">&#34;MATCH p=(v)-[e:`hold_share`|:`is_branch_of`|:`reletive_with`|:`role_as`*1..3]-(v2) &#34;</span>
        <span class="sa">f</span><span class="s2">&#34;WHERE id(v) IN [&#39;</span><span class="si">{</span> <span class="n">entity</span> <span class="si">}</span><span class="s2">&#39;] RETURN p LIMIT 100&#34;</span>
    <span class="p">)</span>
    <span class="n">session</span> <span class="o">=</span> <span class="n">connection_pool</span><span class="o">.</span><span class="n">get_session</span><span class="p">(</span><span class="s1">&#39;root&#39;</span><span class="p">,</span> <span class="s1">&#39;nebula&#39;</span><span class="p">)</span>
    <span class="n">resp</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">query_string</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">resp</span>
</code></pre></td></tr></table>
</div>
</div><p>这个请求的结果则是前边前端期待的 JSON，像这样：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">curl --header <span class="s2">&#34;Content-Type: application/json&#34;</span> <span class="se">\
</span><span class="se"></span>     --request POST <span class="se">\
</span><span class="se"></span>     --data <span class="s1">&#39;{&#34;entity&#34;: &#34;c_132&#34;}&#39;</span> <span class="se">\
</span><span class="se"></span>     http://192.168.10.14:5000/api <span class="p">|</span> jq

<span class="o">{</span>
  <span class="s2">&#34;nodes&#34;</span>: <span class="o">[</span>
    <span class="o">{</span>
      <span class="s2">&#34;id&#34;</span>: <span class="s2">&#34;c_132&#34;</span>,
      <span class="s2">&#34;name&#34;</span>: <span class="s2">&#34;\&#34;Chambers LLC\&#34;&#34;</span>,
      <span class="s2">&#34;tag&#34;</span>: <span class="s2">&#34;corp&#34;</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">&#34;id&#34;</span>: <span class="s2">&#34;c_245&#34;</span>,
      <span class="s2">&#34;name&#34;</span>: <span class="s2">&#34;\&#34;Thompson-King\&#34;&#34;</span>,
      <span class="s2">&#34;tag&#34;</span>: <span class="s2">&#34;corp&#34;</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">&#34;id&#34;</span>: <span class="s2">&#34;c_132&#34;</span>,
      <span class="s2">&#34;name&#34;</span>: <span class="s2">&#34;\&#34;Chambers LLC\&#34;&#34;</span>,
      <span class="s2">&#34;tag&#34;</span>: <span class="s2">&#34;corp&#34;</span>
    <span class="o">}</span>,
...
    <span class="o">}</span>
  <span class="o">]</span>,
  <span class="s2">&#34;relationships&#34;</span>: <span class="o">[</span>
    <span class="o">{</span>
      <span class="s2">&#34;edge&#34;</span>: <span class="s2">&#34;hold_share&#34;</span>,
      <span class="s2">&#34;properties&#34;</span>: <span class="s2">&#34;{&#39;share&#39;: 0.0}&#34;</span>,
      <span class="s2">&#34;source&#34;</span>: <span class="s2">&#34;c_245&#34;</span>,
      <span class="s2">&#34;target&#34;</span>: <span class="s2">&#34;c_132&#34;</span>
    <span class="o">{</span>
      <span class="s2">&#34;edge&#34;</span>: <span class="s2">&#34;hold_share&#34;</span>,
      <span class="s2">&#34;properties&#34;</span>: <span class="s2">&#34;{&#39;share&#39;: 9.0}&#34;</span>,
      <span class="s2">&#34;source&#34;</span>: <span class="s2">&#34;p_1767&#34;</span>,
      <span class="s2">&#34;target&#34;</span>: <span class="s2">&#34;c_132&#34;</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">&#34;edge&#34;</span>: <span class="s2">&#34;hold_share&#34;</span>,
      <span class="s2">&#34;properties&#34;</span>: <span class="s2">&#34;{&#39;share&#39;: 11.0}&#34;</span>,
      <span class="s2">&#34;source&#34;</span>: <span class="s2">&#34;p_1997&#34;</span>,
      <span class="s2">&#34;target&#34;</span>: <span class="s2">&#34;c_132&#34;</span>
    <span class="o">}</span>,
...
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">&#34;edge&#34;</span>: <span class="s2">&#34;reletive_with&#34;</span>,
      <span class="s2">&#34;properties&#34;</span>: <span class="s2">&#34;{&#39;degree&#39;: 51}&#34;</span>,
      <span class="s2">&#34;source&#34;</span>: <span class="s2">&#34;p_7283&#34;</span>,
      <span class="s2">&#34;target&#34;</span>: <span class="s2">&#34;p_4723&#34;</span>
    <span class="o">}</span>
  <span class="o">]</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="放到一起" class="headerLink">
    <a href="#%e6%94%be%e5%88%b0%e4%b8%80%e8%b5%b7" class="header-mark"></a>5.4 放到一起</h3><p>项目的代码都在 GitHub 上，最后其实只有一两百行的代码，把所有东西拼起来之后的代码是：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">├── README.md         <span class="c1"># You could find Design Logs here</span>
├── corp-rel-backend
│   └── app.py        <span class="c1"># Flask App to handle Requst and calls GDB</span>
├── corp-rel-frontend
│   └── src
│       ├── App.vue
│       └── main.js   <span class="c1"># Vue App to call Flask App and Renders Graph</span>
└── requirements.txt
</code></pre></td></tr></table>
</div>
</div><h3 id="最终效果" class="headerLink">
    <a href="#%e6%9c%80%e7%bb%88%e6%95%88%e6%9e%9c" class="header-mark"></a>5.5 最终效果</h3><p>我们做出来了一个简陋但是足够具有参考性的小系统，它接受一个用户输入的实体的 ID，再回车之后：</p>
<ul>
<li>前端程序把请求发给后端</li>
<li>后端拼接 Nebula Graph 的查询语句，通过 Nebula Python 客户端请求 Nebula Graph</li>
<li>Nebula Graph 接受请求做出穿透查询，返回结构给后端</li>
<li>后端将结果构建成前端 D3 接受的格式，传给前端</li>
<li>前端接收到图结构的数据，渲染股权穿透的数据如下：</li>
</ul>
<video width="800" controls>
  <source src="./demo.mov" type="video/mp4"> 
</video>
<h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>6 总结</h2><p>现在，我们知道得益于图数据库的设计，在它上边构建一个方便的股权分析系统非常自然、高效，我们或者利用图数据库的图探索可视化能力、或者自己搭建，可以为用户提供非常高效、直观的多跳股权穿透分析。</p>
<p>如果你想了解更多关于分布式图数据库的知识，欢迎关注 Nebula Graph 这个开源项目，它已经被国内很多团队、公司认可选为图时代数据技术存储层的利器，大家可以访问<a href="https://nebula-graph.com.cn/cases" target="_blank" rel="noopener noreferrer">这里</a>，或者<a href="https://nebula-graph.com.cn/posts/" target="_blank" rel="noopener noreferrer">这里</a>，了解更多相关的分享和文章。</p>
<p>未来，我会给大家分享更多图数据库相关的文章、视频和开源示例项目思路分享和教程，欢迎大家关注我的网站: siwei.io。</p>
<blockquote>
<p>题图版权：<a href="https://unsplash.com/photos/oyXis2kALVg" target="_blank" rel="noopener noreferrer">fabioha</a></p>
</blockquote>]]></description>
</item></channel>
</rss>
