<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - siwei.io</title>
        <link>https://siwei.io/en/posts/</link>
        <description>All Posts | siwei.io</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>weyl.gu@gmail.com (Wey Gu)</managingEditor>
            <webMaster>weyl.gu@gmail.com (Wey Gu)</webMaster><lastBuildDate>Thu, 09 Jun 2022 16:31:43 &#43;0800</lastBuildDate><atom:link href="https://siwei.io/en/posts/" rel="self" type="application/rss+xml" /><item>
    <title>A Data Lineage OSS Reference Solution</title>
    <link>https://siwei.io/en/data-lineage-oss-ref-solution/</link>
    <pubDate>Thu, 09 Jun 2022 16:31:43 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/en/data-lineage-oss-ref-solution/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>Do I have to create my own graph model and everything to set up a Data Lineage system? Thanks to many great open-source projects, the answer is: No!</p>
<p>Today, I would like to share my opinionated reference data infra stack with some of those best open-source projects with modern ETL, Dashboard, Metadata Governance, and Data Lineage Management.</p>
</blockquote>
<h2 id="metadata-governance-system" class="headerLink">
    <a href="#metadata-governance-system" class="header-mark"></a>1 Metadata Governance system</h2><p>A Metadata Governance system is a system providing a single view of where and how all the data are formatted, generated, transformed, consumed, presented, and owned.</p>
<p>Metadata Governance is like a catalog of all of the data warehouses, databases, tables, dashboards, ETL jobs, etc so that people don&rsquo;t have to broadcast their queries on &ldquo;Hi everyone, could I change the schema of this table?&rdquo;, &ldquo;Hey, anyone who knows how I could find the raw data of table-view-foo-bar?&rdquo;, which, explains why we need a Metadata Governance system in a mature data stack with a relatively large scale of data and team(or one to be grown to).</p>
<p>For the other term, Data Lineage, is one of the Metadata that needs to be managed, for example, some dashboard is the downstream of a table view, which has an upstream as two other tables from different databases. That information should be managed at best when possible, too, to enable a trust chain on a data-driven team.</p>
<h2 id="the-reference-solution" class="headerLink">
    <a href="#the-reference-solution" class="header-mark"></a>2 The reference solution</h2><h3 id="motivation" class="headerLink">
    <a href="#motivation" class="header-mark"></a>2.1 Motivation</h3><p>The metadata and data lineage are by nature fitting to the graph model/graph database well, and the relationship-oriented queries, for instance, &ldquo;finding all n-depth data lineage per given component(i.e. a table)&rdquo; is a <code>FIND ALL PATH</code> query in a graph database.</p>
<p>This also explains one observation of mine as an OSS contributor of Nebula Graph, a distributed graph database: (from their queries/graph modeling in discussions I could tell) a bunch of teams who are already levering Nebula Graph on their tech stack, are setting up a data lineage system on their own, from scratch.</p>
<p>A Metadata Governance system needs some of the following components:</p>
<ul>
<li>Metadata Extractor
<ul>
<li>This part is needed to either pull or be pushed from the different parties of the data stack like databases, data warehouses, dashboards, or even from ETL pipeline and applications, etc.</li>
</ul>
</li>
<li>Metadata Storage
<ul>
<li>This could be either a database or even large JSON manifest files</li>
</ul>
</li>
<li>Metadata Catalog
<ul>
<li>This could be a system providing API and/or a GUI interface to read/write the metadata and data lineage</li>
</ul>
</li>
</ul>
<p>In Nebula Graph community, I had been seeing many graph database users were building their in-house data lineage system. It’s itching witnessing this entropy increase situation not be standarized or jointly contributed instead, as most of their work are parsing metadata from well-known big-data projects, and persistent into a graph database, which, I consider high probability that the work is common.</p>
<p>Then I came to create an opinionated reference data infra stack with some of those best open-source projects put together. Hopefully, those who were gonna define and iterate their own fashion of Graph Model on Nebula Graph and create in-house Metadata and data linage extracting pipelines can benefit from this project to have a relatively polished, beautifully designed, Metadata Governance system out of the box with a fully evolved graph model.</p>
<p>To make the reference project self-contained and runnable, I tried to put layers of data infra stack more than just pure metadata related ones, thus, maybe it will help new data engineers who would like to try and see how far had open-source pushed a modern data lab to.</p>
<p>This is a diagram of all the components in this reference data stack, where I see most of them as Metadata Sources:</p>
<p></p>
<h3 id="the-data-stack" class="headerLink">
    <a href="#the-data-stack" class="header-mark"></a>2.2 The Data Stack</h3><p>Then, let&rsquo;s introduce the components.</p>
<h4 id="database-and-data-warehouse" class="headerLink">
    <a href="#database-and-data-warehouse" class="header-mark"></a>2.2.1 Database and Data Warehouse</h4><p>For processing and consuming raw and intermediate data, one or more databases and/or warehouses should be used.</p>
<p>It could be any DB/DW like Hive, Apache Delta, TiDB, Cassandra, MySQL, or Postgres, in this reference project, we simply choose one of the most popular ones: Postgres. And our reference lab comes with the first service:</p>
<p>✅ - Data warehouse: Postgres</p>
<h4 id="dataops" class="headerLink">
    <a href="#dataops" class="header-mark"></a>2.2.2 DataOps</h4><p>We should have some sort of DataOps setup to enable pipelines and environments to be repeatable, testable, and version-controlled.</p>
<p>Here, we used <a href="https://gitlab.com/meltano/meltano" target="_blank" rel="noopener noreffer">Meltano</a> created by GitLab.</p>
<p>Meltano is a just-work DataOps platform that connected <a href="https://singer.io/" target="_blank" rel="noopener noreffer">Singer</a> as the EL and <a href="https://getdbt.com/" target="_blank" rel="noopener noreffer">dbt</a> as the T in a magically elegant way, it is also connected to some other dataInfra utilities such as Apache Superset and Apache Airflow, etc.</p>
<p>Thus, we have one more thing to be included:</p>
<p>✅ - GitOps: Meltano</p>
<h4 id="etl" class="headerLink">
    <a href="#etl" class="header-mark"></a>2.2.3 ETL</h4><p>And under the hood, we will E(extract) and L(load) data from many different data sources to data targets leveraging <a href="https://singer.io/" target="_blank" rel="noopener noreffer">Singer</a> together with Meltano, and do T(transformation) with <a href="https://getdbt.com/" target="_blank" rel="noopener noreffer">dbt</a>.</p>
<p>✅ - EL: Singer</p>
<p>✅ - T: dbt</p>
<h4 id="data-visualization" class="headerLink">
    <a href="#data-visualization" class="header-mark"></a>2.2.4 Data Visualization</h4><p>How about creating dashboards, charts, and tables for getting the insights into all the data?</p>
<p></p>
<p><a href="https://superset.apache.org/" target="_blank" rel="noopener noreffer">Apache Superset</a> is one of the greatest visualization platforms we could choose from, and we just add it to our packet!</p>
<p>✅ - Dashboard: Apache Superset</p>
<h4 id="job-orchestration" class="headerLink">
    <a href="#job-orchestration" class="header-mark"></a>2.2.5 Job Orchestration</h4><p>In most cases, our DataOps jobs grow to the scale to be executed in a long time that needs to be orchestrated, and here comes the <a href="https://airflow.apache.org/" target="_blank" rel="noopener noreffer">Apache Airflow</a>.</p>
<p>✅ - DAG: Apache Airflow</p>
<h4 id="metadata-governance" class="headerLink">
    <a href="#metadata-governance" class="header-mark"></a>2.2.6 Metadata governance</h4><p>With more components and data being introduced to a data infra, there will be massive metadata in all lifecycle of databases, tables, schemas, dashboards, DAGs, applications, and their administrators and teams could be collectively managed, connected, and discovered.</p>
<p><a href="https://www.amundsen.io/amundsen/" target="_blank" rel="noopener noreffer">Linux Foundation Amundsen</a> is one of the best projects solving this problem.</p>
<p></p>
<p>✅ - Data Discovery: Linux Foundation Amundsen</p>
<p>With a graph database as the source of truth to accelerate the multi-hop queries together with elasticsearch as the full-text search engine, Amundsen indexes all the metadata and their lineage smoothly, and beautifully in the next level.</p>
<p>By default, <a href="https://neo4j.org/" target="_blank" rel="noopener noreffer">neo4j</a> was used as the graph database, while I will be using <a href="http://nebula-graph.io/" target="_blank" rel="noopener noreffer">Nebula Graph</a> instead in this project due to I am more familiar with the latter.</p>
<p>✅ - Full-text Search: elasticsearch</p>
<p>✅ - Graph Database: Nebula Graph</p>
<p>Now, with the components in our stack being revealed, let&rsquo;s have them assembled.</p>
<h2 id="environment-bootstrap-component-overview" class="headerLink">
    <a href="#environment-bootstrap-component-overview" class="header-mark"></a>3 Environment Bootstrap, Component overview</h2><p>The reference runnable project is open-source and you could find it here:</p>
<ul>
<li><a href="https://github.com/wey-gu/data-lineage-ref-solution" target="_blank" rel="noopener noreffer">https://github.com/wey-gu/data-lineage-ref-solution</a></li>
</ul>
<p>I will try my best to make things clean and isolated. It&rsquo;s assumed you are running on a UNIX-like system with internet and Docker Compose being installed.</p>
<blockquote>
<p>Please refer <a href="https://docs.docker.com/compose/install/" target="_blank" rel="noopener noreffer">here</a> to install Docker and Docker Compose before moving forward.</p>
</blockquote>
<p>I am running it on Ubuntu 20.04 LTS X86_64, but there shouldn&rsquo;t be issues on other distros or versions of Linux.</p>
<h3 id="run-a-data-warehouse-database" class="headerLink">
    <a href="#run-a-data-warehouse-database" class="header-mark"></a>3.1 Run a Data Warehouse/ Database</h3><p>First, let&rsquo;s install Postgres as our data warehouse.</p>
<p>This oneliner will help create a Postgres running in the background with docker, and when being stopped it will be cleaned up(<code>--rm</code>).</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run --rm --name postgres <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -e <span class="nv">POSTGRES_PASSWORD</span><span class="o">=</span>lineage_ref <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -e <span class="nv">POSTGRES_USER</span><span class="o">=</span>lineage_ref <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -e <span class="nv">POSTGRES_DB</span><span class="o">=</span>warehouse -d <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -p 5432:5432 postgres
</span></span></code></pre></td></tr></table>
</div>
</div><p>Then we could verify it with Postgres CLI or GUI clients.</p>
<blockquote>
<p>Hint: You could use VS Code extension: <a href="https://marketplace.visualstudio.com/items?itemName=mtxr.sqltools" target="_blank" rel="noopener noreffer">SQL tools</a> to quickly connect to multiple RDBMS(MariaDB, Postgres, etc.) or even Non-SQL DBMS like Cassandra in a GUI fashion.</p>
</blockquote>
<h3 id="setup-dataops-toolchain-for-etl" class="headerLink">
    <a href="#setup-dataops-toolchain-for-etl" class="header-mark"></a>3.2 Setup DataOps toolchain for ETL</h3><p>Then, let&rsquo;s get Meltano with Singler and dbt installed.</p>
<p>Meltano helps us manage ETL utilities(as plugins) and all of their configurations(the pipelines). Those meta-information sits in meltano configurations and its <a href="https://docs.meltano.com/concepts/project#system-database" target="_blank" rel="noopener noreffer">system database</a>, where the configurations are file-based(could be managed with git) and by default the system database is SQLite.</p>
<h4 id="installation-of-meltano" class="headerLink">
    <a href="#installation-of-meltano" class="header-mark"></a>3.2.1 Installation of Meltano</h4><p>The workflow using Meltano is to initiate a <code>meltano project</code> and start to add E, L, and T into the configuration files. The initiation of a project just requires a CLI command call: <code>meltano init yourprojectname</code> and to do that, we could install Meltano either with Python&rsquo;s package manager: pip or via a Docker image:</p>
<ul>
<li>Install Meltano with pip in a python virtual env:</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkdir .venv
</span></span><span class="line"><span class="cl"><span class="c1"># example in a debian flavor Linux distro</span>
</span></span><span class="line"><span class="cl">sudo apt-get install python3-dev python3-pip python3-venv python3-wheel -y
</span></span><span class="line"><span class="cl">python3 -m venv .venv/meltano
</span></span><span class="line"><span class="cl"><span class="nb">source</span> .venv/meltano/bin/activate
</span></span><span class="line"><span class="cl">python3 -m pip install wheel
</span></span><span class="line"><span class="cl">python3 -m pip install meltano
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># init a project</span>
</span></span><span class="line"><span class="cl">mkdir meltano_projects <span class="o">&amp;&amp;</span> <span class="nb">cd</span> meltano_projects
</span></span><span class="line"><span class="cl"><span class="c1"># replace &lt;yourprojectname&gt; with your own one</span>
</span></span><span class="line"><span class="cl">touch .env
</span></span><span class="line"><span class="cl">meltano init &lt;yourprojectname&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>&ldquo;Install&rdquo; Meltano via Docker</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker pull meltano/meltano:latest
</span></span><span class="line"><span class="cl">docker run --rm meltano/meltano --version
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># init a project</span>
</span></span><span class="line"><span class="cl">mkdir meltano_projects <span class="o">&amp;&amp;</span> <span class="nb">cd</span> meltano_projects
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># replace &lt;yourprojectname&gt; with your own one</span>
</span></span><span class="line"><span class="cl">touch .env
</span></span><span class="line"><span class="cl">docker run --rm -v <span class="s2">&#34;</span><span class="k">$(</span><span class="nb">pwd</span><span class="k">)</span><span class="s2">&#34;</span>:/projects <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>             -w /projects --env-file .env <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>             meltano/meltano init &lt;yourprojectname&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p>Apart from <code>meltano init</code>, there are a couple of other commands like <code>meltano etl</code> to perform ETL executions, and <code>meltano invoke &lt;plugin&gt;</code> to call plugins&rsquo; command, always check the <a href="https://docs.meltano.com/reference/command-line-interface" target="_blank" rel="noopener noreffer">cheatsheet</a> for quick referencing.</p>
<h4 id="the-meltano-ui" class="headerLink">
    <a href="#the-meltano-ui" class="header-mark"></a>3.2.2 The Meltano UI</h4><p>Meltano also comes with a web-based UI, to start it, just run:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">meltano ui
</span></span></code></pre></td></tr></table>
</div>
</div><p>Then it&rsquo;s listening to http://localhost:5000.</p>
<p>For Docker, just run the container with the 5000 port exposed, here we didn&rsquo;t provide <code>ui</code> in the end due to the container&rsquo;s default command being <code>meltano ui</code> already.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run -v <span class="s2">&#34;</span><span class="k">$(</span><span class="nb">pwd</span><span class="k">)</span><span class="s2">&#34;</span>:/project <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>             -w /project <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>             -p 5000:5000 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>             meltano/meltano
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="example-meltano-projects" class="headerLink">
    <a href="#example-meltano-projects" class="header-mark"></a>3.2.3 Example Meltano projects</h4><p>When writing this article, I noticed that <a href="https://github.com/pnadolny13" target="_blank" rel="noopener noreffer">Pat Nadolny</a> had created <a href="https://github.com/pnadolny13/meltano_example_implementations/tree/main/meltano_projects/singer_dbt_jaffle" target="_blank" rel="noopener noreffer">great examples</a> on an example dataset for Meltano with dbt(And with <a href="https://github.com/pnadolny13/meltano_example_implementations/tree/main/meltano_projects/dbt_orchestration" target="_blank" rel="noopener noreffer">Airflow</a> and <a href="https://github.com/pnadolny13/meltano_example_implementations/tree/main/meltano_projects/jaffle_superset" target="_blank" rel="noopener noreffer">Superset</a>, too!). We will not recreate the examples and use Pat&rsquo;s great ones.</p>
<blockquote>
<p>Note that Andrew Stewart had created another one with a slightly older version of configuration files.</p>
</blockquote>
<p>You could follow <a href="https://github.com/pnadolny13/meltano_example_implementations/tree/main/meltano_projects/singer_dbt_jaffle" target="_blank" rel="noopener noreffer">here</a> to run a pipeline of:</p>
<ul>
<li><a href="https://hub.meltano.com/taps/csv" target="_blank" rel="noopener noreffer">tap-CSV</a>(Singer), extracting data from CSV files</li>
<li><a href="https://hub.meltano.com/targets/postgres" target="_blank" rel="noopener noreffer">target-postgres</a>(Singer), loading data to Postgres</li>
<li><a href="https://hub.meltano.com/transformers/dbt" target="_blank" rel="noopener noreffer">dbt</a>, transform the data into aggregated tables or views</li>
</ul>
<blockquote>
<p>You should omit the step of running the local Postgres with docker as we had already created one, be sure to change the Postgres user and password in <code>.env</code>.</p>
<p>And it&rsquo;s basically as this(with meltano being installed as above):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone https://github.com/pnadolny13/meltano_example_implementations.git
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> meltano_example_implementations/meltano_projects/singer_dbt_jaffle/
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">meltano install
</span></span><span class="line"><span class="cl">touch .env
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="nv">PG_PASSWORD</span><span class="o">=</span><span class="s2">&#34;lineage_ref&#34;</span> &gt;&gt; .env
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="nv">PG_USERNAME</span><span class="o">=</span><span class="s2">&#34;lineage_ref&#34;</span> &gt;&gt; .env
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Extract and Load(with Singer)</span>
</span></span><span class="line"><span class="cl">meltano run tap-csv target-postgres
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Trasnform(with dbt)</span>
</span></span><span class="line"><span class="cl">meltano run dbt:run
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Generate dbt docs</span>
</span></span><span class="line"><span class="cl">meltano invoke dbt docs generate
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Serve generated dbt docs</span>
</span></span><span class="line"><span class="cl">meltano invoke dbt docs to serve
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Then visit http://localhost:8080</span>
</span></span></code></pre></td></tr></table>
</div>
</div></blockquote>
<p>Now, I assumed you had finished trying out <code>singer_dbt_jaffle</code> following its <a href="https://github.com/pnadolny13/meltano_example_implementations/tree/main/meltano_projects/singer_dbt_jaffle" target="_blank" rel="noopener noreffer">README.md</a>, and we could connect to the Postgres to see the loaded and transformed data being reflected as follow, the screenshot is from the SQLTool of VS Code:</p>
<p></p>
<h3 id="setup-a-bi-platform-for-dashboard" class="headerLink">
    <a href="#setup-a-bi-platform-for-dashboard" class="header-mark"></a>3.3 Setup a BI Platform for Dashboard</h3><p>Now, we have the data in data warehouses, with ETL toolchains to pipe different data sources into it. How could those data be consumed?</p>
<p>BI tools like the dashboard could be one way to help us get insights from the data.</p>
<p>With Apache Superset, dashboards, and charts based on those data sources could be created and managed smoothly and beautifully.</p>
<p>The focus of this project was not on Apache Superset itself, thus, we simply reuse examples that <a href="https://github.com/pnadolny13" target="_blank" rel="noopener noreffer">Pat Nadolny</a> had created in <a href="https://github.com/pnadolny13/meltano_example_implementations/tree/main/meltano_projects/jaffle_superset" target="_blank" rel="noopener noreffer">Superset as a utility if meltano Example</a>.</p>
<h4 id="bootstrap-meltano-and-superset" class="headerLink">
    <a href="#bootstrap-meltano-and-superset" class="header-mark"></a>3.3.1 Bootstrap Meltano and Superset</h4><p>Create a python venv with Meltano installed:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkdir .venv
</span></span><span class="line"><span class="cl">python3 -m venv .venv/meltano
</span></span><span class="line"><span class="cl"><span class="nb">source</span> .venv/meltano/bin/activate
</span></span><span class="line"><span class="cl">python3 -m pip install wheel
</span></span><span class="line"><span class="cl">python3 -m pip install meltano
</span></span></code></pre></td></tr></table>
</div>
</div><p>Following <a href="https://github.com/pnadolny13/meltano_example_implementations/tree/main/meltano_projects/jaffle_superset" target="_blank" rel="noopener noreffer">Pat&rsquo;s guide</a>, with tiny modifications:</p>
<ul>
<li>Clone the repo, enter the <code>jaffle_superset</code> project</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone https://github.com/pnadolny13/meltano_example_implementations.git
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> meltano_example_implementations/meltano_projects/jaffle_superset/
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>Modify the meltano configuration files to let Superset connect to the Postgres we created:</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">vim meltano_projects/jaffle_superset/meltano.yml
</span></span></code></pre></td></tr></table>
</div>
</div><p>In my example, I changed the hostname to <code>10.1.1.111</code>, which is the IP of my current host, while if you are running it on your macOS machine, this should be fine to leave with it, the diff before and after the change would be:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl"><span class="gd">--- a/meltano_projects/jaffle_superset/meltano.yml
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+++ b/meltano_projects/jaffle_superset/meltano.yml
</span></span></span><span class="line"><span class="cl"><span class="gi"></span><span class="gu">@@ -71,7 +71,7 @@ plugins:
</span></span></span><span class="line"><span class="cl"><span class="gu"></span>               A list of database driver dependencies can be found here https://superset.apache.org/docs/databases/installing-database-drivers
</span></span><span class="line"><span class="cl">     config:
</span></span><span class="line"><span class="cl">       database_name: my_postgres
</span></span><span class="line"><span class="cl"><span class="gd">-      sqlalchemy_uri: postgresql+psycopg2://${PG_USERNAME}:${PG_PASSWORD}@host.docker.internal:${PG_PORT}/${PG_DATABASE}
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+      sqlalchemy_uri: postgresql+psycopg2://${PG_USERNAME}:${PG_PASSWORD}@10.1.1.168:${PG_PORT}/${PG_DATABASE}
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>       tables:
</span></span><span class="line"><span class="cl">       - model.my_meltano_project.customers
</span></span><span class="line"><span class="cl">       - model.my_meltano_project.orders
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>Add Postgres credential to <code>.env</code> file:</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">echo</span> <span class="nv">PG_USERNAME</span><span class="o">=</span>lineage_ref &gt;&gt; .env
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="nv">PG_PASSWORD</span><span class="o">=</span>lineage_ref &gt;&gt; .env
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>Install the Meltano project, run ETL pipeline</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">meltano install
</span></span><span class="line"><span class="cl">meltano run tap-csv target-postgres dbt:run
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>Start Superset, please note that the <code>ui</code> is not a meltano command but a user-defined action in the configuration file.</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">meltano invoke superset:ui
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>In another terminal, run the defined command <code>load_datasources</code></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">meltano invoke superset:load_datasources
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>Access Superset in a web browser via http://localhost:8088/</li>
</ul>
<p>We should now see Superset Web Interface:</p>
<p></p>
<h4 id="create-a-dashboard" class="headerLink">
    <a href="#create-a-dashboard" class="header-mark"></a>3.3.2 Create a Dashboard!</h4><p>Let&rsquo;s try to create a Dashboard on the ETL data in Postgres defined in this Meltano project:</p>
<ul>
<li>Click <code>+ DASHBOARD</code>, fill a dashboard name, then click <code>SAVE</code>, then clieck <code>+ CREATE A NEW CHART</code></li>
</ul>
<p></p>
<ul>
<li>In new chart view, we should select a chart type and DATASET. Here, I selected <code>orders</code> table as the data source and <code>Pie Chart</code> chart type:</li>
</ul>
<p></p>
<ul>
<li>After clicking <code>CREATE NEW CHART</code>, we are in the chart defination view, where, I selected <code>Query</code> of <code>status</code> as <code>DIMENSIONS</code>, and <code>COUNT(amount)</code> as <code>METRIC</code>. Thus, we could see a Pie Chart per order status&rsquo;s distribution.</li>
</ul>
<p></p>
<ul>
<li>Click <code>SAVE</code> , it will ask which dashboard this chart should be added to, after it&rsquo;s selected, click <code>SAVE &amp; GO TO DASHBOARD</code>.</li>
</ul>
<p></p>
<ul>
<li>Then, in the dashboard, we coulds see all charts there. You could see that I added another chart showing customer order count distribution, too:</li>
</ul>
<p></p>
<ul>
<li>We could set the refresh inteval, or download the dashboard as you wish by clicking the <code>···</code> button.</li>
</ul>
<p></p>
<p>It&rsquo;s quite cool, ah? For now, we have a simple but typical data stack like any hobby data lab with everything open-source!</p>
<p>Imagine we have 100 datasets in CSV, 200 tables in Data warehouse and a couple of data engineers running different projects that consume, generate different application, dashboard, and databases. When someone would like to discovery some of those table, dataset, dashboard and pipelines running across them, and then even modify some of them, it&rsquo;s proven to be quite costly in both communicationand engineering.</p>
<p>Here comes the main part of our reference project: Metadata Discovery.</p>
<h3 id="metadata-discovery" class="headerLink">
    <a href="#metadata-discovery" class="header-mark"></a>3.4 Metadata Discovery</h3><p>Then, we are stepping to deploy the Amundsen with Nebula Graph and Elasticsearch.</p>
<blockquote>
<p>Note: For the time being, the <a href="https://github.com/amundsen-io/amundsen/pull/1817" target="_blank" rel="noopener noreffer">PR Nebula Graph as the Amundsen backend</a> is not yet merged, I am <a href="https://github.com/amundsen-io/rfcs/pull/48" target="_blank" rel="noopener noreffer">working with the Amundsen team</a> to make it happen.</p>
</blockquote>
<p>With Amundsen, we could have all metadata of the whole data stack being discovered and managed in one place. And there are mainly two parts of Amundsen:</p>
<ul>
<li>Metadata Ingestion
<ul>
<li><a href="https://www.amundsen.io/amundsen/databuilder/" target="_blank" rel="noopener noreffer">Amundsen Data builder</a></li>
</ul>
</li>
<li>Metadata Catalog
<ul>
<li><a href="https://www.amundsen.io/amundsen/frontend/" target="_blank" rel="noopener noreffer">Amundsen Frontend service</a></li>
<li><a href="https://www.amundsen.io/amundsen/metadata/" target="_blank" rel="noopener noreffer">Amundsen Metadata service</a></li>
<li><a href="https://www.amundsen.io/amundsen/search/" target="_blank" rel="noopener noreffer">Amundsen Search service</a></li>
</ul>
</li>
</ul>
<p>We will be leveraging <code>Data builder</code> to pull metadata from different sources, and persist metadata into the backend storage of the <code>Meta service</code> and the backend storage of the <code>Search service</code>, then we could search, discover and manage them from the <code>Frontend service</code> or through the API of the <code>Metadata service</code>.</p>
<h4 id="deploy-amundsen" class="headerLink">
    <a href="#deploy-amundsen" class="header-mark"></a>3.4.1 Deploy Amundsen</h4><h5 id="metadata-service" class="headerLink">
    <a href="#metadata-service" class="header-mark"></a>3.4.1.1 Metadata service</h5><p>We are going to deploy a cluster of Amundsen with its docker-compose file. As the Nebula Graph backend support is not yet merged, we are referring to my fork.</p>
<p>First, let&rsquo;s clone the repo with all submodules:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone -b amundsen_nebula_graph --recursive git@github.com:wey-gu/amundsen.git
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> amundsen
</span></span></code></pre></td></tr></table>
</div>
</div><p>Then, start all catalog services and their backend storage:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker-compose -f docker-amundsen-nebula.yml up
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>You could add <code>-d</code> to put the containers running in the background:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker-compose -f docker-amundsen-nebula.yml up -d
</span></span></code></pre></td></tr></table>
</div>
</div><p>And this will stop the cluster:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker-compose -f docker-amundsen-nebula.yml stop
</span></span></code></pre></td></tr></table>
</div>
</div><p>This will remove the cluster:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker-compose -f docker-amundsen-nebula.yml down
</span></span></code></pre></td></tr></table>
</div>
</div></blockquote>
<p>Due to this docker-compose file is for developers to play and hack Amundsen easily rather than for production deployment, it&rsquo;s building images from the codebase, which, will take some time for the very first time.</p>
<p>After it&rsquo;s being deployed, please hold on a second before we load some dummy data into its storage with Data builder.</p>
<h5 id="data-builder" class="headerLink">
    <a href="#data-builder" class="header-mark"></a>3.4.1.2 Data builder</h5><p>Amundsen Data builder is just like a Meltano but for ETL of Metadata to <code>Metadata service</code> and <code>Search service</code>‘s backend storage: Nebula Graph and Elasticsearch. The Data builder here is only a python module and the ETL job could be either run as a script or orchestrated with a DAG platform like Apache Airflow.</p>
<p>With <a href="https://github.com/amundsen-io/amundsen/tree/main/databuilder" target="_blank" rel="noopener noreffer">Amundsen Data builder</a> being installed:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> databuilder
</span></span><span class="line"><span class="cl">python3 -m venv .venv
</span></span><span class="line"><span class="cl"><span class="nb">source</span> .venv/bin/activate
</span></span><span class="line"><span class="cl">python3 -m pip install wheel
</span></span><span class="line"><span class="cl">python3 -m pip install -r requirements.txt
</span></span><span class="line"><span class="cl">python3 setup.py install
</span></span></code></pre></td></tr></table>
</div>
</div><p>Let&rsquo;s call this sample Data builder ETL script to have some dummy data filled in.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">python3 example/scripts/sample_data_loader_nebula.py
</span></span></code></pre></td></tr></table>
</div>
</div><h5 id="verify-amundsen" class="headerLink">
    <a href="#verify-amundsen" class="header-mark"></a>3.4.1.3 Verify Amundsen</h5><p>Before accessing Amundsen, we need to create a test user:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># run a container with curl attached to amundsenfrontend</span>
</span></span><span class="line"><span class="cl">docker run -it --rm --net container:amundsenfrontend nicolaka/netshoot
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Create a user with id test_user_id</span>
</span></span><span class="line"><span class="cl">curl -X PUT -v http://amundsenmetadata:5002/user <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -H <span class="s2">&#34;Content-Type: application/json&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --data <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="s1">&#39;{&#34;user_id&#34;:&#34;test_user_id&#34;,&#34;first_name&#34;:&#34;test&#34;,&#34;last_name&#34;:&#34;user&#34;, &#34;email&#34;:&#34;test_user_id@mail.com&#34;}&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">exit</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Then we could view UI at <a href="http://localhost:5000/" target="_blank" rel="noopener noreffer"><code>http://localhost:5000</code></a> and try to search <code>test</code>, it should return some results.</p>
<p></p>
<p>Then you could click and explore those dummy metadata loaded to Amundsen during the <code>sample_data_loader_nebula.py</code> on your own.</p>
<p>Additionally, you could access the Graph Database with Nebula Studio(http://localhost:7001).</p>
<blockquote>
<p>Note in Nebula Studio, the default fields to log in will be:</p>
<ul>
<li>Hosts: <code>graphd:9669</code></li>
<li>User: <code>root</code></li>
<li>Password: <code>nebula</code></li>
</ul>
</blockquote>
<p>This diagram shows some more details on the components of Amundsen:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">       ┌────────────────────────┐ ┌────────────────────────────────────────┐
</span></span><span class="line"><span class="cl">       │ Frontend:5000          │ │ Metadata Sources                       │
</span></span><span class="line"><span class="cl">       ├────────────────────────┤ │ ┌────────┐ ┌─────────┐ ┌─────────────┐ │
</span></span><span class="line"><span class="cl">       │ Metaservice:5001       │ │ │        │ │         │ │             │ │
</span></span><span class="line"><span class="cl">       │ ┌──────────────┐       │ │ │ Foo DB │ │ Bar App │ │ X Dashboard │ │
</span></span><span class="line"><span class="cl">  ┌────┼─┤ Nebula Proxy │       │ │ │        │ │         │ │             │ │
</span></span><span class="line"><span class="cl">  │    │ └──────────────┘       │ │ │        │ │         │ │             │ │
</span></span><span class="line"><span class="cl">  │    ├────────────────────────┤ │ └────────┘ └─────┬───┘ └─────────────┘ │
</span></span><span class="line"><span class="cl">┌─┼────┤ Search searvice:5002   │ │                  │                     │
</span></span><span class="line"><span class="cl">│ │    └────────────────────────┘ └──────────────────┼─────────────────────┘
</span></span><span class="line"><span class="cl">│ │    ┌─────────────────────────────────────────────┼───────────────────────┐
</span></span><span class="line"><span class="cl">│ │    │                                             │                       │
</span></span><span class="line"><span class="cl">│ │    │ Databuilder     ┌───────────────────────────┘                       │
</span></span><span class="line"><span class="cl">│ │    │                 │                                                   │
</span></span><span class="line"><span class="cl">│ │    │ ┌───────────────▼────────────────┐ ┌──────────────────────────────┐ │
</span></span><span class="line"><span class="cl">│ │ ┌──┼─► Extractor of Sources           ├─► nebula_search_data_extractor │ │
</span></span><span class="line"><span class="cl">│ │ │  │ └───────────────┬────────────────┘ └──────────────┬───────────────┘ │
</span></span><span class="line"><span class="cl">│ │ │  │ ┌───────────────▼────────────────┐ ┌──────────────▼───────────────┐ │
</span></span><span class="line"><span class="cl">│ │ │  │ │ Loader filesystem_csv_nebula   │ │ Loader Elastic FS loader     │ │
</span></span><span class="line"><span class="cl">│ │ │  │ └───────────────┬────────────────┘ └──────────────┬───────────────┘ │
</span></span><span class="line"><span class="cl">│ │ │  │ ┌───────────────▼────────────────┐ ┌──────────────▼───────────────┐ │
</span></span><span class="line"><span class="cl">│ │ │  │ │ Publisher nebula_csv_publisher │ │ Publisher Elasticsearch      │ │
</span></span><span class="line"><span class="cl">│ │ │  │ └───────────────┬────────────────┘ └──────────────┬───────────────┘ │
</span></span><span class="line"><span class="cl">│ │ │  └─────────────────┼─────────────────────────────────┼─────────────────┘
</span></span><span class="line"><span class="cl">│ │ └────────────────┐   │                                 │
</span></span><span class="line"><span class="cl">│ │    ┌─────────────┼───►─────────────────────────┐ ┌─────▼─────┐
</span></span><span class="line"><span class="cl">│ │    │ Nebula Graph│   │                         │ │           │
</span></span><span class="line"><span class="cl">│ └────┼─────┬───────┴───┼───────────┐     ┌─────┐ │ │           │
</span></span><span class="line"><span class="cl">│      │     │           │           │     │MetaD│ │ │           │
</span></span><span class="line"><span class="cl">│      │ ┌───▼──┐    ┌───▼──┐    ┌───▼──┐  └─────┘ │ │           │
</span></span><span class="line"><span class="cl">│ ┌────┼─►GraphD│    │GraphD│    │GraphD│          │ │           │
</span></span><span class="line"><span class="cl">│ │    │ └──────┘    └──────┘    └──────┘  ┌─────┐ │ │           │
</span></span><span class="line"><span class="cl">│ │    │ :9669                             │MetaD│ │ │  Elastic  │
</span></span><span class="line"><span class="cl">│ │    │ ┌────────┐ ┌────────┐ ┌────────┐  └─────┘ │ │  Search   │
</span></span><span class="line"><span class="cl">│ │    │ │        │ │        │ │        │          │ │  Cluster  │
</span></span><span class="line"><span class="cl">│ │    │ │StorageD│ │StorageD│ │StorageD│  ┌─────┐ │ │  :9200    │
</span></span><span class="line"><span class="cl">│ │    │ │        │ │        │ │        │  │MetaD│ │ │           │
</span></span><span class="line"><span class="cl">│ │    │ └────────┘ └────────┘ └────────┘  └─────┘ │ │           │
</span></span><span class="line"><span class="cl">│ │    ├───────────────────────────────────────────┤ │           │
</span></span><span class="line"><span class="cl">│ └────┤ Nebula Studio:7001                        │ │           │
</span></span><span class="line"><span class="cl">│      └───────────────────────────────────────────┘ └─────▲─────┘
</span></span><span class="line"><span class="cl">└──────────────────────────────────────────────────────────┘
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="connecting-the-dots-metadata-discovery" class="headerLink">
    <a href="#connecting-the-dots-metadata-discovery" class="header-mark"></a>4 Connecting the dots, Metadata Discovery</h2><p>With the basic environment being set up, let&rsquo;s put everything together.</p>
<p>Remember we had ELT some data to PostgreSQL as this?</p>
<p></p>
<p>How could we let Amundsen discover metadata regarding those data and ETL?</p>
<h3 id="extracting-postgres-metadata" class="headerLink">
    <a href="#extracting-postgres-metadata" class="header-mark"></a>4.1 Extracting Postgres metadata</h3><p>We started on the data source: Postgres, first.</p>
<p>We install the Postgres Client for python3:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo apt-get install libpq-dev
</span></span><span class="line"><span class="cl">pip3 install Psycopg2
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="execution-of-postgres-metadata-etl" class="headerLink">
    <a href="#execution-of-postgres-metadata-etl" class="header-mark"></a>4.1.1 Execution of Postgres metadata ETL</h4><p>Run a script to parse Postgres Metadata:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">CREDENTIALS_POSTGRES_USER</span><span class="o">=</span>lineage_ref
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">CREDENTIALS_POSTGRES_PASSWORD</span><span class="o">=</span>lineage_ref
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">CREDENTIALS_POSTGRES_DATABASE</span><span class="o">=</span>warehouse
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">python3 example/scripts/sample_postgres_loader_nebula.py
</span></span></code></pre></td></tr></table>
</div>
</div><p>If you look into the code of the sample script for loading Postgres metadata to Nebula, the main lines are quite straightforward:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># part 1: PostgressMetadata --&gt; CSV --&gt; Nebula Graph</span>
</span></span><span class="line"><span class="cl"><span class="n">job</span> <span class="o">=</span> <span class="n">DefaultJob</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">      <span class="n">conf</span><span class="o">=</span><span class="n">job_config</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">task</span><span class="o">=</span><span class="n">DefaultTask</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">          <span class="n">extractor</span><span class="o">=</span><span class="n">PostgresMetadataExtractor</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">          <span class="n">loader</span><span class="o">=</span><span class="n">FsNebulaCSVLoader</span><span class="p">()),</span>
</span></span><span class="line"><span class="cl">      <span class="n">publisher</span><span class="o">=</span><span class="n">NebulaCsvPublisher</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="c1"># part 2: Metadata stored in NebulaGraph --&gt; Elasticsearch</span>
</span></span><span class="line"><span class="cl"><span class="n">extractor</span> <span class="o">=</span> <span class="n">NebulaSearchDataExtractor</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">task</span> <span class="o">=</span> <span class="n">SearchMetadatatoElasticasearchTask</span><span class="p">(</span><span class="n">extractor</span><span class="o">=</span><span class="n">extractor</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">job</span> <span class="o">=</span> <span class="n">DefaultJob</span><span class="p">(</span><span class="n">conf</span><span class="o">=</span><span class="n">job_config</span><span class="p">,</span> <span class="n">task</span><span class="o">=</span><span class="n">task</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>The first job was to load data in path:<code>PostgressMetadata --&gt; CSV --&gt; Nebula Graph</code></p>
<ul>
<li><code>PostgresMetadataExtractor</code> was used to extract/pull metadata from Postgres, refer <a href="https://www.amundsen.io/amundsen/databuilder/#postgresmetadataextractor" target="_blank" rel="noopener noreffer">here</a> for its documentation.</li>
<li><code>FsNebulaCSVLoader</code> was used to put extracted data intermediately as CSV files</li>
<li><code>NebulaCsvPublisher</code> was used to publish metadata in form of CSV to Nebula Graph</li>
</ul>
<p>The second job was to load in the path: <code>Metadata stored in NebulaGraph --&gt; Elasticsearch</code></p>
<ul>
<li><code>NebulaSearchDataExtractor</code> was used to fetch metadata stored in Nebula Graph</li>
<li><code>SearchMetadatatoElasticasearchTask</code> was used to make metadata indexed with Elasticsearch.</li>
</ul>
<blockquote>
<p>Note, in production, we could trigger those jobs either in scripts or with an orchestration platform like Apache Airflow.</p>
</blockquote>
<h4 id="verify-the-postgres-extraction" class="headerLink">
    <a href="#verify-the-postgres-extraction" class="header-mark"></a>4.1.2 Verify the Postgres Extraction</h4><p>Search <code>payments</code> or directly visit http://localhost:5000/table_detail/warehouse/postgres/public/payments, you could see the metadata from our Postgres like:</p>
<p></p>
<p>Then, metadata management actions like adding tags, owners, and descriptions could be done easily as it was in the above screen capture, too.</p>
<h3 id="extracting-dbt-metadata" class="headerLink">
    <a href="#extracting-dbt-metadata" class="header-mark"></a>4.2 Extracting dbt metadata</h3><p>Actually, we could also pull metadata from <a href="https://www.getdbt.com/" target="_blank" rel="noopener noreffer">dbt</a> itself.</p>
<p>The Amundsen <a href="https://www.amundsen.io/amundsen/databuilder/#dbtextractor" target="_blank" rel="noopener noreffer">DbtExtractor</a>, will parse the <code>catalog.json</code> or <code>manifest.json</code> file to load metadata to Amundsen storage(Nebula Graph and Elasticsearch).</p>
<p>In above meltano chapter, we had already generated that file with <code>meltano invoke dbt docs generate</code>, and the output like the following is telling us the <code>catalog.json</code> file:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">14:23:15  Done.
</span></span><span class="line"><span class="cl">14:23:15  Building catalog
</span></span><span class="line"><span class="cl">14:23:15  Catalog written to /home/ubuntu/ref-data-lineage/meltano_example_implementations/meltano_projects/singer_dbt_jaffle/.meltano/transformers/dbt/target/catalog.json
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="execution-of-dbt-metadata-etl" class="headerLink">
    <a href="#execution-of-dbt-metadata-etl" class="header-mark"></a>4.2.1 Execution of dbt metadata ETL</h4><p>There is an example script with a sample dbt output files:</p>
<p>The sample dbt files:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ls -l example/sample_data/dbt/
</span></span><span class="line"><span class="cl">total <span class="m">184</span>
</span></span><span class="line"><span class="cl">-rw-rw-r-- <span class="m">1</span> w w   <span class="m">5320</span> May <span class="m">15</span> 07:17 catalog.json
</span></span><span class="line"><span class="cl">-rw-rw-r-- <span class="m">1</span> w w <span class="m">177163</span> May <span class="m">15</span> 07:17 manifest.json
</span></span></code></pre></td></tr></table>
</div>
</div><p>We could load this sample dbt manifest with:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">python3 example/scripts/sample_dbt_loader_nebula.py
</span></span></code></pre></td></tr></table>
</div>
</div><p>From this lines of python code, we could tell those process as:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># part 1: Dbt manifest --&gt; CSV --&gt; Nebula Graph</span>
</span></span><span class="line"><span class="cl"><span class="n">job</span> <span class="o">=</span> <span class="n">DefaultJob</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">      <span class="n">conf</span><span class="o">=</span><span class="n">job_config</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">task</span><span class="o">=</span><span class="n">DefaultTask</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">          <span class="n">extractor</span><span class="o">=</span><span class="n">DbtExtractor</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">          <span class="n">loader</span><span class="o">=</span><span class="n">FsNebulaCSVLoader</span><span class="p">()),</span>
</span></span><span class="line"><span class="cl">      <span class="n">publisher</span><span class="o">=</span><span class="n">NebulaCsvPublisher</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="c1"># part 2: Metadata stored in NebulaGraph --&gt; Elasticsearch</span>
</span></span><span class="line"><span class="cl"><span class="n">extractor</span> <span class="o">=</span> <span class="n">NebulaSearchDataExtractor</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">task</span> <span class="o">=</span> <span class="n">SearchMetadatatoElasticasearchTask</span><span class="p">(</span><span class="n">extractor</span><span class="o">=</span><span class="n">extractor</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">job</span> <span class="o">=</span> <span class="n">DefaultJob</span><span class="p">(</span><span class="n">conf</span><span class="o">=</span><span class="n">job_config</span><span class="p">,</span> <span class="n">task</span><span class="o">=</span><span class="n">task</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>And the only differences from the Postgres meta ETL is the <code>extractor=DbtExtractor()</code>, where it comes with following confiugrations to get below information regarding dbt projects:</p>
<ul>
<li>databases_name</li>
<li>catalog_json</li>
<li>manifest_json</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">job_config</span> <span class="o">=</span> <span class="n">ConfigFactory</span><span class="o">.</span><span class="n">from_dict</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;extractor.dbt.database_name&#39;</span><span class="p">:</span> <span class="n">database_name</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;extractor.dbt.catalog_json&#39;</span><span class="p">:</span> <span class="n">catalog_file_loc</span><span class="p">,</span>  <span class="c1"># File</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;extractor.dbt.manifest_json&#39;</span><span class="p">:</span> <span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">manifest_data</span><span class="p">),</span>  <span class="c1"># JSON Dumped objecy</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;extractor.dbt.source_url&#39;</span><span class="p">:</span> <span class="n">source_url</span><span class="p">})</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="verify-the-dbt-extraction" class="headerLink">
    <a href="#verify-the-dbt-extraction" class="header-mark"></a>4.2.2 Verify the dbt Extraction</h4><p>Search <code>dbt_demo</code> or visit http://localhost:5000/table_detail/dbt_demo/snowflake/public/raw_inventory_value to see:</p>
<p></p>
<blockquote>
<p>Tips: we could optionally enable debug logging to see what had been sent to Elasticsearch and Nebula Graph!</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl"><span class="gd">- logging.basicConfig(level=logging.INFO)
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+ logging.basicConfig(level=logging.DEBUG)
</span></span></span></code></pre></td></tr></table>
</div>
</div></blockquote>
<p>Or, alternatively, explore the imported data in Nebula Studio:</p>
<p>First, click &ldquo;Start with Vertices&rdquo;, fill in the vertex id: <code>snowflake://dbt_demo.public/fact_warehouse_inventory</code></p>
<p></p>
<p>Then, we could see the vertex being shown as the pink dot. Let&rsquo;s modify the <code>Expand</code> options with:</p>
<ul>
<li>Direction: Bidirect</li>
<li>Steps: Single with 3</li>
</ul>
<p></p>
<p>And double click the vertex(dot), it will expand 3 steps in bidirection:</p>
<p></p>
<p>From this graph view, the insight of the metadata is extremely easy to be explored, right?</p>
<blockquote>
<p>Tips, you may like to click the 👁 icon to select some properties to be shown, which was done by me before capturing the screen as above.</p>
</blockquote>
<p>And, what we had seen in the Nebula Studio echoes the data model of Amundsen metadata service, too:</p>
<p></p>
<p>Finally, remember we had leveraged dbt to transform some data in meltano, and the menifest file path is <code>.meltano/transformers/dbt/target/catalog.json</code>, you can try create a databuilder job to import it.</p>
<h3 id="extracting-superset-metadata" class="headerLink">
    <a href="#extracting-superset-metadata" class="header-mark"></a>4.3 Extracting Superset metadata</h3><p><a href="https://www.amundsen.io/amundsen/databuilder/databuilder/extractor/dashboard/apache_superset/apache_superset_metadata_extractor.py" target="_blank" rel="noopener noreffer">Dashboards</a>, <a href="https://www.amundsen.io/amundsen/databuilder/databuilder/extractor/dashboard/apache_superset/apache_superset_chart_extractor.py" target="_blank" rel="noopener noreffer">Charts</a> and the <a href="https://www.amundsen.io/amundsen/databuilder/databuilder/extractor/dashboard/apache_superset/apache_superset_table_extractor.py" target="_blank" rel="noopener noreffer">relationships with Tables</a> can be extracted by Amundsen data builder, as we already setup a Superset Dashboard, let&rsquo;s try ingesting its metadata.</p>
<h4 id="execution-of-superset-metadata-etl" class="headerLink">
    <a href="#execution-of-superset-metadata-etl" class="header-mark"></a>4.3.1 Execution of Superset metadata ETL</h4><p>The sample superset script will fetch data from Superset and load metadata into Nebula Graph and Elasticsearch.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">python3</span> <span class="n">sample_superset_data_loader_nebula</span><span class="o">.</span><span class="n">py</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>If we set the logging level to <code>DEBUG</code>, we could actually see lines like:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># fetching metadata from superset</span>
</span></span><span class="line"><span class="cl"><span class="n">DEBUG</span><span class="p">:</span><span class="n">urllib3</span><span class="o">.</span><span class="n">connectionpool</span><span class="p">:</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">localhost</span><span class="p">:</span><span class="mi">8088</span> <span class="s2">&#34;POST /api/v1/security/login HTTP/1.1&#34;</span> <span class="mi">200</span> <span class="mi">280</span>
</span></span><span class="line"><span class="cl"><span class="n">INFO</span><span class="p">:</span><span class="n">databuilder</span><span class="o">.</span><span class="n">task</span><span class="o">.</span><span class="n">task</span><span class="p">:</span><span class="n">Running</span> <span class="n">a</span> <span class="n">task</span>
</span></span><span class="line"><span class="cl"><span class="n">DEBUG</span><span class="p">:</span><span class="n">urllib3</span><span class="o">.</span><span class="n">connectionpool</span><span class="p">:</span><span class="n">Starting</span> <span class="n">new</span> <span class="n">HTTP</span> <span class="n">connection</span> <span class="p">(</span><span class="mi">1</span><span class="p">):</span> <span class="n">localhost</span><span class="p">:</span><span class="mi">8088</span>
</span></span><span class="line"><span class="cl"><span class="n">DEBUG</span><span class="p">:</span><span class="n">urllib3</span><span class="o">.</span><span class="n">connectionpool</span><span class="p">:</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">localhost</span><span class="p">:</span><span class="mi">8088</span> <span class="s2">&#34;GET /api/v1/dashboard?q=(page_size:20,page:0,order_direction:desc) HTTP/1.1&#34;</span> <span class="mi">308</span> <span class="mi">374</span>
</span></span><span class="line"><span class="cl"><span class="n">DEBUG</span><span class="p">:</span><span class="n">urllib3</span><span class="o">.</span><span class="n">connectionpool</span><span class="p">:</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">localhost</span><span class="p">:</span><span class="mi">8088</span> <span class="s2">&#34;GET /api/v1/dashboard/?q=(page_size:20,page:0,order_direction:desc) HTTP/1.1&#34;</span> <span class="mi">200</span> <span class="mi">1058</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># insert Dashboard</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">DEBUG</span><span class="p">:</span><span class="n">databuilder</span><span class="o">.</span><span class="n">publisher</span><span class="o">.</span><span class="n">nebula_csv_publisher</span><span class="p">:</span><span class="n">Query</span><span class="p">:</span> <span class="n">INSERT</span> <span class="n">VERTEX</span> <span class="err">`</span><span class="n">Dashboard</span><span class="err">`</span> <span class="p">(</span><span class="err">`</span><span class="n">dashboard_url</span><span class="err">`</span><span class="p">,</span> <span class="err">`</span><span class="n">name</span><span class="err">`</span><span class="p">,</span> <span class="n">published_tag</span><span class="p">,</span> <span class="n">publisher_last_updated_epoch_ms</span><span class="p">)</span> <span class="n">VALUES</span>  <span class="s2">&#34;superset_dashboard://my_cluster.1/3&#34;</span><span class="p">:(</span><span class="s2">&#34;http://localhost:8088/superset/dashboard/3/&#34;</span><span class="p">,</span><span class="s2">&#34;my_dashboard&#34;</span><span class="p">,</span><span class="s2">&#34;unique_tag&#34;</span><span class="p">,</span><span class="n">timestamp</span><span class="p">());</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># insert a DASHBOARD_WITH_TABLE relationship/edge</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">INFO</span><span class="p">:</span><span class="n">databuilder</span><span class="o">.</span><span class="n">publisher</span><span class="o">.</span><span class="n">nebula_csv_publisher</span><span class="p">:</span><span class="n">Importing</span> <span class="n">data</span> <span class="ow">in</span> <span class="n">edge</span> <span class="n">files</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;/tmp/amundsen/dashboard/relationships/Dashboard_Table_DASHBOARD_WITH_TABLE.csv&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">DEBUG</span><span class="p">:</span><span class="n">databuilder</span><span class="o">.</span><span class="n">publisher</span><span class="o">.</span><span class="n">nebula_csv_publisher</span><span class="p">:</span><span class="n">Query</span><span class="p">:</span>
</span></span><span class="line"><span class="cl"><span class="n">INSERT</span> <span class="n">edge</span> <span class="err">`</span><span class="n">DASHBOARD_WITH_TABLE</span><span class="err">`</span> <span class="p">(</span><span class="err">`</span><span class="n">END_LABEL</span><span class="err">`</span><span class="p">,</span> <span class="err">`</span><span class="n">START_LABEL</span><span class="err">`</span><span class="p">,</span> <span class="n">published_tag</span><span class="p">,</span> <span class="n">publisher_last_updated_epoch_ms</span><span class="p">)</span> <span class="n">VALUES</span> <span class="s2">&#34;superset_dashboard://my_cluster.1/3&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;postgresql+psycopg2://my_cluster.warehouse/orders&#34;</span><span class="p">:(</span><span class="s2">&#34;Table&#34;</span><span class="p">,</span><span class="s2">&#34;Dashboard&#34;</span><span class="p">,</span><span class="s2">&#34;unique_tag&#34;</span><span class="p">,</span> <span class="n">timestamp</span><span class="p">()),</span> <span class="s2">&#34;superset_dashboard://my_cluster.1/3&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;postgresql+psycopg2://my_cluster.warehouse/customers&#34;</span><span class="p">:(</span><span class="s2">&#34;Table&#34;</span><span class="p">,</span><span class="s2">&#34;Dashboard&#34;</span><span class="p">,</span><span class="s2">&#34;unique_tag&#34;</span><span class="p">,</span> <span class="n">timestamp</span><span class="p">());</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="verify-the-superset-dashboard-extraction" class="headerLink">
    <a href="#verify-the-superset-dashboard-extraction" class="header-mark"></a>4.3.2 Verify the Superset Dashboard Extraction</h4><p>By searching it in Amundsen, we could the Dashboard info now. And we could verify it from Nebula Studio, too.</p>
<p></p>
<blockquote>
<p>Note, see also the Dashboard&rsquo;s model in Amundsen from <a href="https://www.amundsen.io/amundsen/databuilder/docs/dashboard_ingestion_guide/" target="_blank" rel="noopener noreffer">the dashboard ingestion guide</a>:</p>
<p></p>
</blockquote>
<h3 id="preview-data-with-superset" class="headerLink">
    <a href="#preview-data-with-superset" class="header-mark"></a>4.4 Preview data with Superset</h3><p>Superset could be used to preview Table Data like this. Corresponding documentation could be referred <a href="https://www.amundsen.io/amundsen/frontend/docs/configuration/#preview-client" target="_blank" rel="noopener noreffer">here</a>, where the API of <code>/superset/sql_json/</code> will be called by Amundsen Frontend.</p>
<p></p>
<h3 id="enable-data-lineage" class="headerLink">
    <a href="#enable-data-lineage" class="header-mark"></a>4.5 Enable Data lineage</h3><p>By default, data lineage was not enabled, we could enable it by:</p>
<ol start="0">
<li>Go to the Amundsen repo, that&rsquo;s also where we run the <code>docker-compose -f docker-amundsen-nebula.yml up</code> command</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> amundsen
</span></span></code></pre></td></tr></table>
</div>
</div><ol>
<li>Modify frontend  JS configuration:</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl"><span class="gd">--- a/frontend/amundsen_application/static/js/config/config-default.ts
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+++ b/frontend/amundsen_application/static/js/config/config-default.ts
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>   tableLineage: {
</span></span><span class="line"><span class="cl"><span class="gd">-    inAppListEnabled: false,
</span></span></span><span class="line"><span class="cl"><span class="gd">-    inAppPageEnabled: false,
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+    inAppListEnabled: true,
</span></span></span><span class="line"><span class="cl"><span class="gi">+    inAppPageEnabled: true,
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>     externalEnabled: false,
</span></span><span class="line"><span class="cl">     iconPath: &#39;PATH_TO_ICON&#39;,
</span></span><span class="line"><span class="cl">     isBeta: false,
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="2">
<li>Now let&rsquo;s run again build for docker image, where the frontend image will be rebuilt.</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker-compose -f docker-amundsen-nebula.yml build
</span></span></code></pre></td></tr></table>
</div>
</div><p>Then, rerun the <code>up -d</code> to ensure frontend container to be recreated with new configuration:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker-compose -f docker-amundsen-nebula.yml up -d
</span></span></code></pre></td></tr></table>
</div>
</div><p>We could see something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker-compose -f docker-amundsen-nebula.yml up -d
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">Recreating amundsenfrontend           ... <span class="k">done</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>After that, we could visit http://localhost:5000/lineage/table/gold/hive/test_schema/test_table1 to see the <code>Lineage</code> is shown as:</p>
<p></p>
<p>We could click <code>Downstream</code>(if there is) to see downstream resources of this table:</p>
<p></p>
<p>Or click Lineage to see the graph:</p>
<p></p>
<p>There are API for lineage query, too. Here is an example to query that with cURL, where we leverage the netshoot container as we did before for user creation.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run -it --rm --net container:amundsenfrontend nicolaka/netshoot
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">curl <span class="s2">&#34;http://amundsenmetadata:5002/table/snowflake://dbt_demo.public/raw_inventory_value/lineage?depth=3&amp;direction=both&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>The above API call was to query linage on both upstream and downstream direction, with depth 3 for table <code>snowflake://dbt_demo.public/raw_inventory_value</code>.</p>
<p>And the result should be like:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;depth&#34;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;downstream_entities&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;level&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;usage&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;key&#34;</span><span class="p">:</span> <span class="s2">&#34;snowflake://dbt_demo.public/fact_daily_expenses&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;parent&#34;</span><span class="p">:</span> <span class="s2">&#34;snowflake://dbt_demo.public/fact_warehouse_inventory&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;badges&#34;</span><span class="p">:</span> <span class="p">[],</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;source&#34;</span><span class="p">:</span> <span class="s2">&#34;snowflake&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;level&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;usage&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;key&#34;</span><span class="p">:</span> <span class="s2">&#34;snowflake://dbt_demo.public/fact_warehouse_inventory&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;parent&#34;</span><span class="p">:</span> <span class="s2">&#34;snowflake://dbt_demo.public/raw_inventory_value&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;badges&#34;</span><span class="p">:</span> <span class="p">[],</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;source&#34;</span><span class="p">:</span> <span class="s2">&#34;snowflake&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;key&#34;</span><span class="p">:</span> <span class="s2">&#34;snowflake://dbt_demo.public/raw_inventory_value&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;direction&#34;</span><span class="p">:</span> <span class="s2">&#34;both&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;upstream_entities&#34;</span><span class="p">:</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>In fact, this lineage data was just extracted and loaded during our <a href="https://github.com/amundsen-io/amundsen/blob/main/databuilder/databuilder/extractor/dbt_extractor.py" target="_blank" rel="noopener noreffer">DbtExtractor</a> execution, where <code>extractor.dbt.{DbtExtractor.EXTRACT_LINEAGE}</code> by default was <code>True</code>, thus lineage metadata were created and loaded to Amundsen.</p>
<h4 id="get-lineage-in-nebula-graph" class="headerLink">
    <a href="#get-lineage-in-nebula-graph" class="header-mark"></a>4.5.1 Get lineage in Nebula Graph</h4><p>Two of the advantages to use a Graph Database as Metadata Storage are:</p>
<ul>
<li>The graph query itself is a flexible DSL for lineage API, for example, this query helps us do the equivalent query of the Amundsen metadata API for fetching lineage:</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">MATCH p=(t:Table) -[:HAS_UPSTREAM|:HAS_DOWNSTREAM *1..3]-&gt;(x)
</span></span><span class="line"><span class="cl">WHERE id(t) == &#34;snowflake://dbt_demo.public/raw_inventory_value&#34; RETURN p
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>We could now even query it in Nebula Graph Studio&rsquo;s console, and click <code>View Subgraphs</code> to make it rendered in a graph view then.</li>
</ul>
<p></p>
<p></p>
<h4 id="extract-data-lineage" class="headerLink">
    <a href="#extract-data-lineage" class="header-mark"></a>4.5.2 Extract Data Lineage</h4><h5 id="dbt" class="headerLink">
    <a href="#dbt" class="header-mark"></a>4.5.2.1 Dbt</h5><p>As mentioned above, <a href="https://www.amundsen.io/amundsen/databuilder/#dbtextractor" target="_blank" rel="noopener noreffer">DbtExtractor</a> will extract table level lineage, together with other information defined in the dbt ETL pipeline.</p>
<h5 id="open-lineage" class="headerLink">
    <a href="#open-lineage" class="header-mark"></a>4.5.2.2 Open Lineage</h5><p>The other linage extractor out-of-the-box in Amundsen is <a href="https://www.amundsen.io/amundsen/databuilder/#openlineagetablelineageextractor" target="_blank" rel="noopener noreffer">OpenLineageTableLineageExtractor</a>.</p>
<p><a href="https://openlineage.io/" target="_blank" rel="noopener noreffer">Open Lineage</a> is an open framework to collect lineage data from different sources in one place, which can output linage information as JSON files to be extracted by <a href="https://www.amundsen.io/amundsen/databuilder/#openlineagetablelineageextractor" target="_blank" rel="noopener noreffer">OpenLineageTableLineageExtractor</a>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">dict_config</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">    <span class="sa">f</span><span class="s1">&#39;extractor.openlineage_tablelineage.</span><span class="si">{</span><span class="n">OpenLineageTableLineageExtractor</span><span class="o">.</span><span class="n">CLUSTER_NAME</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">:</span> <span class="s1">&#39;datalab&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="sa">f</span><span class="s1">&#39;extractor.openlineage_tablelineage.</span><span class="si">{</span><span class="n">OpenLineageTableLineageExtractor</span><span class="o">.</span><span class="n">OL_DATASET_NAMESPACE_OVERRIDE</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">:</span> <span class="s1">&#39;hive_table&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="sa">f</span><span class="s1">&#39;extractor.openlineage_tablelineage.</span><span class="si">{</span><span class="n">OpenLineageTableLineageExtractor</span><span class="o">.</span><span class="n">TABLE_LINEAGE_FILE_LOCATION</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">:</span> <span class="s1">&#39;input_dir/openlineage_nd.json&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">task</span> <span class="o">=</span> <span class="n">DefaultTask</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">extractor</span><span class="o">=</span><span class="n">OpenLineageTableLineageExtractor</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">    <span class="n">loader</span><span class="o">=</span><span class="n">FsNebulaCSVLoader</span><span class="p">())</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="recap" class="headerLink">
    <a href="#recap" class="header-mark"></a>5 Recap</h2><p>The whole idea of Metadata Governance/Discovery is to:</p>
<ul>
<li>Put all components in the stack as Metadata Sources(from any DB or DW to dbt, Airflow, Openlineage, Superset, etc.)</li>
<li>Run metadata ETL with Databuilder(as a script, or DAG) to store and index with Nebula Graph(or other Graph Database) and Elasticsearch</li>
<li>Consume, manage, and discover metadata from Frontend UI(with Superset for preview) or API</li>
<li>Have more possibilities, flexibility, and insights on Nebula Graph from queries and UI</li>
</ul>
<p></p>
<h3 id="upstream-projects" class="headerLink">
    <a href="#upstream-projects" class="header-mark"></a>5.1 Upstream Projects</h3><p>All projects used in this reference project are listed below in lexicographic order.</p>
<ul>
<li>Amundsen</li>
<li>Apache Airflow</li>
<li>Apache Superset</li>
<li>dbt</li>
<li>Elasticsearch</li>
<li>meltano</li>
<li>Nebula Graph</li>
<li>Open Lineage</li>
<li>singer</li>
</ul>
<blockquote>
<p>Feature Image credit to <a href="https://unsplash.com/photos/PhnJhjH9Y9s" target="_blank" rel="noopener noreffer">Phil Hearing</a></p>
</blockquote>]]></description>
</item><item>
    <title>Nebula-Up, oneliner installer for Nebula Graph Playground</title>
    <link>https://siwei.io/en/nebula-up/</link>
    <pubDate>Mon, 26 Apr 2021 11:11:04 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/en/nebula-up/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>Update: the All-in-one mode is introduced! Check <a href="#all-in-one-mode" rel="">here</a> and try it!</p>
</blockquote>
<p><a href="https://asciinema.org/a/407151" title="Nebula Up Demo" target="_blank" rel="noopener noreffer"></a></p>
<p><code>Nebula-Up</code> is PoC utility to enable developer to bootstrap an nebula-graph cluster with nebula-graph-studio(Web UI) + nebula-graph-console(Command UI) ready out of box in an oneliner run. All required packages will handled with <code>nebula-up</code> as well, including Docker on Linux(Ubuntu/CentOS), Docker Desktop on macOS(including both Intel and M1 chip based), and Docker Desktop Windows.</p>
<p>Also, it&rsquo;s optimized to leverage China Repo Mirrors(docker, brew, gitee, etc&hellip;) in case needed enable a smooth deployment for both Mainland China users and others.</p>
<p>macOS and Linux with Shell:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -fsSL nebula-up.siwei.io/install.sh <span class="p">|</span> bash
</span></span></code></pre></td></tr></table>
</div>
</div><p></p>
<p>Note: you could specify the version of Nebula Graph like:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -fsSL nebula-up.siwei.io/install.sh <span class="p">|</span> bash -s -- v2.6
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="all-in-one-mode" class="headerLink">
    <a href="#all-in-one-mode" class="header-mark"></a>1 All-in-one mode</h2><p>With all-in-one mode, you could play with many Nebula Tools in one command, too:</p>
<p></p>
<p>Supported tools:</p>
<ul>
<li><i class="far fa-check-square fa-fw"></i> Nebula Dashboard</li>
<li><i class="far fa-check-square fa-fw"></i> Nebula Graph Studio</li>
<li><i class="far fa-check-square fa-fw"></i> Nebula Graph Console</li>
<li><i class="far fa-check-square fa-fw"></i> Nebula BR(backup &amp; restore)</li>
<li><i class="far fa-check-square fa-fw"></i> Nebula Graph Spark utils
<ul>
<li><i class="far fa-check-square fa-fw"></i> Nebula Graph Spark Connector/PySpark</li>
<li><i class="far fa-check-square fa-fw"></i> Nebula Graph Algorithm</li>
<li><i class="far fa-check-square fa-fw"></i> Nebula Graph Exchange</li>
</ul>
</li>
<li><i class="far fa-square fa-fw"></i> Nebula Graph Importer</li>
<li><i class="far fa-square fa-fw"></i> Nebula Graph Fulltext Search</li>
<li><i class="far fa-square fa-fw"></i> Nebula Bench</li>
</ul>
<h3 id="install-all-in-one" class="headerLink">
    <a href="#install-all-in-one" class="header-mark"></a>1.1 Install all in one</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># Install Nebula Core with all-in-one mode</span>
</span></span><span class="line"><span class="cl">curl -fsSL nebula-up.siwei.io/all-in-one.sh <span class="p">|</span> bash
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="install-nebula-core-and-one-of-the-coponent" class="headerLink">
    <a href="#install-nebula-core-and-one-of-the-coponent" class="header-mark"></a>1.2 Install Nebula Core and One of the coponent:</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># Install Core with Backup and Restore with MinIO</span>
</span></span><span class="line"><span class="cl">curl -fsSL nebula-up.siwei.io/all-in-one.sh <span class="p">|</span> bash -s -- v3 br
</span></span><span class="line"><span class="cl"><span class="c1"># Install Core with Spark Connector, Nebula Algorithm, Nebula Exchange</span>
</span></span><span class="line"><span class="cl">curl -fsSL nebula-up.siwei.io/all-in-one.sh <span class="p">|</span> bash -s -- v3 spark
</span></span><span class="line"><span class="cl"><span class="c1"># Install Core with Dashboard</span>
</span></span><span class="line"><span class="cl">curl -fsSL nebula-up.siwei.io/all-in-one.sh <span class="p">|</span> bash -s -- v3 dashboard
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="how-to-play-with-all-in-one-mode" class="headerLink">
    <a href="#how-to-play-with-all-in-one-mode" class="header-mark"></a>1.3 How to play with all-in-one mode:</h3><h4 id="console-and-basketballplayer-dataset-loading" class="headerLink">
    <a href="#console-and-basketballplayer-dataset-loading" class="header-mark"></a>1.3.1 Console and Basketballplayer Dataset Loading</h4><p>Then you could call Nebula Console like:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># Connect to nebula with console</span>
</span></span><span class="line"><span class="cl">~/.nebula-up/console.sh
</span></span><span class="line"><span class="cl"><span class="c1"># Execute queryies like</span>
</span></span><span class="line"><span class="cl">~/.nebula-up/console.sh -e <span class="s2">&#34;SHOW HOSTS&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Load the sample dataset</span>
</span></span><span class="line"><span class="cl">~/.nebula-up/load-basketballplayer-dataset.sh
</span></span><span class="line"><span class="cl"><span class="c1"># Make a Graph Query the sample dataset</span>
</span></span><span class="line"><span class="cl">~/.nebula-up/console.sh -e <span class="s1">&#39;USE basketballplayer; FIND ALL PATH FROM &#34;player100&#34; TO &#34;team204&#34; OVER * WHERE follow.degree is EMPTY or follow.degree &gt;=0 YIELD path AS p;&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="monitor-the-whole-cluster-with-nebula-dashboard" class="headerLink">
    <a href="#monitor-the-whole-cluster-with-nebula-dashboard" class="header-mark"></a>1.3.2 Monitor the whole cluster with Nebula Dashboard</h4><p>Visit http://127.0.0.1:7003 with user: <code>root</code>, password: <code>nebula</code>.</p>
<blockquote>
<p>Note, thanks to the sponsorship of Microsoft, we have a demo site of Nebula-UP on Azure: you could visit the dashboard here: <a href="http://nebula-demo.siwei.io:7003" target="_blank" rel="noopener noreffer">http://nebula-demo.siwei.io:7003</a> .</p>
</blockquote>
<h4 id="access-nebula-graph-studio" class="headerLink">
    <a href="#access-nebula-graph-studio" class="header-mark"></a>1.3.3 Access Nebula Graph Studio</h4><p>Visit http://127.0.0.1:7001 with user: <code>root</code>, password: <code>nebula</code>, host: <code>graphd:9669</code>(for non-all-in-one case, this should be <code>&lt;host-ip&gt;:9669</code>).</p>
<blockquote>
<p>Note, thanks to the sponsorship of Microsoft, we have a demo site of Nebula-UP on Azure: you could visit the studio here: <a href="http://nebula-demo.siwei.io:7001" target="_blank" rel="noopener noreffer">http://nebula-demo.siwei.io:7001</a> .</p>
</blockquote>
<h4 id="query-data-with-nebula-spark-connector-in-pyspark-shell" class="headerLink">
    <a href="#query-data-with-nebula-spark-connector-in-pyspark-shell" class="header-mark"></a>1.3.4 Query Data with Nebula Spark Connector in PySpark Shell</h4><p>Or play in PySpark like:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">~/.nebula-up/nebula-pyspark.sh
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># call Nebula Spark Connector Reader</span>
</span></span><span class="line"><span class="cl"><span class="nv">df</span> <span class="o">=</span> spark.read.format<span class="o">(</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;com.vesoft.nebula.connector.NebulaDataSource&#34;</span><span class="o">)</span>.option<span class="o">(</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;type&#34;</span>, <span class="s2">&#34;vertex&#34;</span><span class="o">)</span>.option<span class="o">(</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;spaceName&#34;</span>, <span class="s2">&#34;basketballplayer&#34;</span><span class="o">)</span>.option<span class="o">(</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;label&#34;</span>, <span class="s2">&#34;player&#34;</span><span class="o">)</span>.option<span class="o">(</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;returnCols&#34;</span>, <span class="s2">&#34;name,age&#34;</span><span class="o">)</span>.option<span class="o">(</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;metaAddress&#34;</span>, <span class="s2">&#34;metad0:9559&#34;</span><span class="o">)</span>.option<span class="o">(</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;partitionNumber&#34;</span>, 1<span class="o">)</span>.load<span class="o">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># show the dataframe with limit 2</span>
</span></span><span class="line"><span class="cl">df.show<span class="o">(</span><span class="nv">n</span><span class="o">=</span>2<span class="o">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>The output may look like:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">      <span class="n">____</span>              <span class="n">__</span>
</span></span><span class="line"><span class="cl">     <span class="o">/</span> <span class="n">__</span><span class="o">/</span><span class="n">__</span>  <span class="n">___</span> <span class="n">_____</span><span class="o">/</span> <span class="o">/</span><span class="n">__</span>
</span></span><span class="line"><span class="cl">    <span class="n">_</span>\ \<span class="o">/</span> <span class="n">_</span> \<span class="o">/</span> <span class="n">_</span> <span class="err">`</span><span class="o">/</span> <span class="n">__</span><span class="o">/</span>  <span class="s1">&#39;_/</span>
</span></span><span class="line"><span class="cl">   <span class="o">/</span><span class="n">__</span> <span class="o">/</span> <span class="o">.</span><span class="n">__</span><span class="o">/</span>\<span class="n">_</span><span class="p">,</span><span class="n">_</span><span class="o">/</span><span class="n">_</span><span class="o">/</span> <span class="o">/</span><span class="n">_</span><span class="o">/</span>\<span class="n">_</span>\   <span class="n">version</span> <span class="mf">2.4.5</span>
</span></span><span class="line"><span class="cl">      <span class="o">/</span><span class="n">_</span><span class="o">/</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Using</span> <span class="n">Python</span> <span class="n">version</span> <span class="mf">2.7.16</span> <span class="p">(</span><span class="n">default</span><span class="p">,</span> <span class="n">Jan</span> <span class="mi">14</span> <span class="mi">2020</span> <span class="mi">07</span><span class="p">:</span><span class="mi">22</span><span class="p">:</span><span class="mi">06</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">SparkSession</span> <span class="n">available</span> <span class="k">as</span> <span class="s1">&#39;spark&#39;</span><span class="o">.</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">df</span> <span class="o">=</span> <span class="n">spark</span><span class="o">.</span><span class="n">read</span><span class="o">.</span><span class="n">format</span><span class="p">(</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>   <span class="s2">&#34;com.vesoft.nebula.connector.NebulaDataSource&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">option</span><span class="p">(</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="s2">&#34;type&#34;</span><span class="p">,</span> <span class="s2">&#34;vertex&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">option</span><span class="p">(</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="s2">&#34;spaceName&#34;</span><span class="p">,</span> <span class="s2">&#34;basketballplayer&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">option</span><span class="p">(</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="s2">&#34;label&#34;</span><span class="p">,</span> <span class="s2">&#34;player&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">option</span><span class="p">(</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="s2">&#34;returnCols&#34;</span><span class="p">,</span> <span class="s2">&#34;name,age&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">option</span><span class="p">(</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="s2">&#34;metaAddress&#34;</span><span class="p">,</span> <span class="s2">&#34;metad0:9559&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">option</span><span class="p">(</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="s2">&#34;partitionNumber&#34;</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">load</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">df</span><span class="o">.</span><span class="n">show</span><span class="p">(</span><span class="n">n</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">+---------+--------------+---+</span>
</span></span><span class="line"><span class="cl"><span class="o">|</span><span class="n">_vertexId</span><span class="o">|</span>          <span class="n">name</span><span class="o">|</span><span class="n">age</span><span class="o">|</span>
</span></span><span class="line"><span class="cl"><span class="o">+---------+--------------+---+</span>
</span></span><span class="line"><span class="cl"><span class="o">|</span><span class="n">player105</span><span class="o">|</span>   <span class="n">Danny</span> <span class="n">Green</span><span class="o">|</span> <span class="mi">31</span><span class="o">|</span>
</span></span><span class="line"><span class="cl"><span class="o">|</span><span class="n">player109</span><span class="o">|</span><span class="n">Tiago</span> <span class="n">Splitter</span><span class="o">|</span> <span class="mi">34</span><span class="o">|</span>
</span></span><span class="line"><span class="cl"><span class="o">+---------+--------------+---+</span>
</span></span><span class="line"><span class="cl"><span class="n">only</span> <span class="n">showing</span> <span class="n">top</span> <span class="mi">2</span> <span class="n">rows</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="run-nebula-exchange" class="headerLink">
    <a href="#run-nebula-exchange" class="header-mark"></a>1.3.5 Run Nebula Exchange</h4><p>Or run an example Nebula Exchange job to import data from CSV file:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">~/.nebula-up/nebula-exchange-example.sh
</span></span></code></pre></td></tr></table>
</div>
</div><p>You could check the example configuration file in <code>~/.nebula-up/nebula-up/spark/exchange.conf</code></p>
<h4 id="run-nebula-graph-algorithm" class="headerLink">
    <a href="#run-nebula-graph-algorithm" class="header-mark"></a>1.3.6 Run Nebula Graph Algorithm</h4><blockquote>
<p>Reference: <a href="https://github.com/wey-gu/nebula-livejournal" target="_blank" rel="noopener noreffer">https://github.com/wey-gu/nebula-livejournal</a></p>
</blockquote>
<p>Load LiveJournal dataset with Nebula Importer:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">~/.nebula-up/load-LiveJournal-dataset.sh
</span></span></code></pre></td></tr></table>
</div>
</div><p>Run Nebula Algorithm like:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">~/.nebula-up/nebula-algo-pagerank-example.sh
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="try-backup-and-restore-with-minio-as-storage" class="headerLink">
    <a href="#try-backup-and-restore-with-minio-as-storage" class="header-mark"></a>1.3.7 Try Backup and Restore with MinIO as Storage</h4><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># Create a full backup to MinIO(Be sure to run load-basketballplayer-dataset.sh before doing so)</span>
</span></span><span class="line"><span class="cl">~/.nebula-up/nebula-br-backup-full.sh
</span></span><span class="line"><span class="cl"><span class="c1"># Show all backups</span>
</span></span><span class="line"><span class="cl">~/.nebula-up/nebula-br-show.sh
</span></span><span class="line"><span class="cl"><span class="c1"># Restore to a backup named BACKUP_2022_05_08_11_38_08</span>
</span></span><span class="line"><span class="cl">~/.nebula-up/nebula-br-restore-full.sh BACKUP_2022_05_08_11_38_08
</span></span></code></pre></td></tr></table>
</div>
</div><p>Note, you could also browser files in MinIO with from http://127.0.0.1:9001 with user: <code>minioadmin</code>, password: <code>minioadmin</code>.</p>
<blockquote>
<p>Note, thanks to the sponsorship of Microsoft, we have a demo site of Nebula-UP on Azure: you could visit the MinIO site here: <a href="http://nebula-demo.siwei.io:9001" target="_blank" rel="noopener noreffer">http://nebula-demo.siwei.io:9001</a> .</p>
</blockquote>
<hr>
<p><del>Windows with PowerShell</del>(Working In Progress):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="nb">iwr nebula-up</span><span class="p">.</span><span class="n">siwei</span><span class="p">.</span><span class="n">io</span><span class="p">/</span><span class="n">install</span><span class="p">.</span><span class="n">ps1</span> <span class="n">-useb</span> <span class="p">|</span> <span class="nb">iex
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>TBD:</p>
<ul>
<li><i class="far fa-square fa-fw"></i> Finished Windows(Docker Desktop instead of the WSL 1&amp;2 in initial phase) part, leveraging chocolatey package manager as homebrew was used in macOS</li>
<li><i class="far fa-square fa-fw"></i> Fully optimized for CN users, for now, git/apt/yum repo were not optimised, newly installed docker repo, brew repo were automatically optimised for CN internet access</li>
<li><i class="far fa-square fa-fw"></i> Packaging similar content into homebrew/chocolatey?</li>
<li><i class="far fa-square fa-fw"></i> CI/UT</li>
</ul>]]></description>
</item><item>
    <title>Spark on Nebula Graph</title>
    <link>https://siwei.io/en/spark-on-nebula-graph/</link>
    <pubDate>Tue, 19 Apr 2022 17:19:11 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/en/spark-on-nebula-graph/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>What could be done with Spark and PySpark on top of Nebula Graph, this post covers everything we should know.</p>
</blockquote>
<p>In this article, I am trying to walk you through all three Spark projects of Nebula Graph with some runnable hands-on examples. Also, I managed to make PySpark usable with Nebula Graph Spark Connector, which will be contributed to the Docs later.</p>
<h2 id="the-three-spark-projects-for-nebula-graph" class="headerLink">
    <a href="#the-three-spark-projects-for-nebula-graph" class="header-mark"></a>1 The three Spark projects for Nebula Graph</h2><p>I used to draw a sketch around all data importing methods of Nebula Graph <a href="https://www.siwei.io/sketches/nebula-data-import-options/" target="_blank" rel="noopener noreffer">here</a>, where all three of the Spark-based Nebula Graph projects were already briefly introduced. Instead, in this article, a slightly deeper dive into all of them will be made based on my recent work on them.</p>
<p>TL;DR</p>
<ul>
<li>Nebula Spark Connector is a Spark Lib to enable spark application reading from and writing to Nebula Graph in form of a dataframe.</li>
<li>Nebula Exchange, built on top of Nebula Spark Connector, is a Spark Lib and Application to exchange(for the Open Source version, it&rsquo;s one way: write, whereas for the enterprise version it&rsquo;s bidirectional) different data sources like(MySQL, Neo4j, PostgreSQL, Clickhouse, Hive, etc.). Besides writing directly to Nebula Graph, it could optionally generate SST files to be ingested into Nebula Graph to offload the storage computation outside of the Nebula Graph cluster.</li>
<li>Nebula Algorithm, built on top of Nebula Spark Connector and GraphX, is a Spark Lib and Application to run de facto graph algorithms(PageRank, LPA, etc&hellip;) on a graph from Nebula Graph.</li>
</ul>
<p>Then let&rsquo;s have the long version of those spark projects more on how-to perspectives.</p>
<h2 id="spark-connector" class="headerLink">
    <a href="#spark-connector" class="header-mark"></a>2 Spark-Connector</h2><ul>
<li>Codebase: <a href="https://github.com/vesoft-inc/nebula-spark-connector" target="_blank" rel="noopener noreffer">https://github.com/vesoft-inc/nebula-spark-connector</a></li>
<li>Documentation: <a href="https://docs.nebula-graph.io/3.0.2/nebula-spark-connector/" target="_blank" rel="noopener noreffer">https://docs.nebula-graph.io/3.0.2/nebula-spark-connector/</a> (it&rsquo;s versioned, as for now, I put the latest released version 3.0.2 here)</li>
<li>Jar Package: <a href="https://repo1.maven.org/maven2/com/vesoft/nebula-spark-connector/" target="_blank" rel="noopener noreffer">https://repo1.maven.org/maven2/com/vesoft/nebula-spark-connector/</a></li>
<li>Code Examples: <a href="https://github.com/vesoft-inc/nebula-spark-connector/tree/master/example" target="_blank" rel="noopener noreffer">example</a></li>
</ul>
<h3 id="nebula-graph-spark-reader" class="headerLink">
    <a href="#nebula-graph-spark-reader" class="header-mark"></a>2.1 Nebula Graph Spark Reader</h3><p>To read data from Nebula Graph, i.e. vertex, Nebula Spark Connector will scan all storage instances that hold the given label(TAG): <code>withLabel(&quot;player&quot;)</code>, and we could optionally specify the properties of the vertex: <code>withReturnCols(List(&quot;name&quot;, &quot;age&quot;))</code>.</p>
<p>With needed configuration being provided, a call of <code>spark.read.nebula.loadVerticesToDF</code> will return dataframe of the Vertex Scan call towards Nebula Graph:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-scala" data-lang="scala"><span class="line"><span class="cl">  <span class="k">def</span> <span class="n">readVertex</span><span class="o">(</span><span class="n">spark</span><span class="k">:</span> <span class="kt">SparkSession</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nc">LOG</span><span class="o">.</span><span class="n">info</span><span class="o">(</span><span class="s">&#34;start to read nebula vertices&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">val</span> <span class="n">config</span> <span class="k">=</span>
</span></span><span class="line"><span class="cl">      <span class="nc">NebulaConnectionConfig</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="n">builder</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="n">withMetaAddress</span><span class="o">(</span><span class="s">&#34;metad0:9559,metad1:9559,metad2:9559&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="n">withConenctionRetry</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="n">build</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">val</span> <span class="n">nebulaReadVertexConfig</span><span class="k">:</span> <span class="kt">ReadNebulaConfig</span> <span class="o">=</span> <span class="nc">ReadNebulaConfig</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="n">builder</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="n">withSpace</span><span class="o">(</span><span class="s">&#34;basketballplayer&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="n">withLabel</span><span class="o">(</span><span class="s">&#34;player&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="n">withNoColumn</span><span class="o">(</span><span class="kc">false</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="n">withReturnCols</span><span class="o">(</span><span class="nc">List</span><span class="o">(</span><span class="s">&#34;name&#34;</span><span class="o">,</span> <span class="s">&#34;age&#34;</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="n">withLimit</span><span class="o">(</span><span class="mi">10</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="n">withPartitionNum</span><span class="o">(</span><span class="mi">10</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="n">build</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">val</span> <span class="n">vertex</span> <span class="k">=</span> <span class="n">spark</span><span class="o">.</span><span class="n">read</span><span class="o">.</span><span class="n">nebula</span><span class="o">(</span><span class="n">config</span><span class="o">,</span> <span class="n">nebulaReadVertexConfig</span><span class="o">).</span><span class="n">loadVerticesToDF</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">vertex</span><span class="o">.</span><span class="n">printSchema</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">vertex</span><span class="o">.</span><span class="n">show</span><span class="o">(</span><span class="mi">20</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">println</span><span class="o">(</span><span class="s">&#34;vertex count: &#34;</span> <span class="o">+</span> <span class="n">vertex</span><span class="o">.</span><span class="n">count</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>It&rsquo;s similar for the writer part and one big difference here is the writing path is done via GraphD as the underlying Spark Connector is shooting nGQL <code>INSERT</code> queries.</p>
<p>Then let&rsquo;s do the hands-on end-to-end practice.</p>
<h3 id="hands-on-spark-connector" class="headerLink">
    <a href="#hands-on-spark-connector" class="header-mark"></a>2.2 Hands-on Spark Connector</h3><p>Prerequisites: it&rsquo;s assumed below the procedure is being run on a Linux Machine with an internet connection, ideally with Docker and Docker-Compose preinstalled.</p>
<h4 id="bootstrap-a-nebula-graph-cluster" class="headerLink">
    <a href="#bootstrap-a-nebula-graph-cluster" class="header-mark"></a>2.2.1 Bootstrap a Nebula Graph Cluster</h4><p>Firstly, let&rsquo;s deploy Nebula Graph Core v3.0 and Nebula Studio with <a href="https://github.com/wey-gu/nebula-up/" target="_blank" rel="noopener noreffer">Nebula-Up</a>, it will try to install Docker and Docker-Compose for us, in case it failed, please try to install Docker and Docker-Compose on your own first.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -fsSL nebula-up.siwei.io/install.sh <span class="p">|</span> bash -s -- v3.0
</span></span></code></pre></td></tr></table>
</div>
</div><p>After the above script is executed, let&rsquo;s connect to it with Nebula-Console, the command line client for Nebula Graph.</p>
<ul>
<li>Enter the container with the console</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">~/.nebula-up/console.sh
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>Connect to the Nebula Graph</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">nebula-console -addr graphd -port <span class="m">9669</span> -user root -p nebula
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>Activate Storage Instances, and check the hosts status</p>
<blockquote>
<p>ref: <a href="https://docs.nebula-graph.io/3.0.2/4.deployment-and-installation/manage-storage-host/" target="_blank" rel="noopener noreffer">https://docs.nebula-graph.io/3.0.2/4.deployment-and-installation/manage-storage-host/</a></p>
</blockquote>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ADD HOSTS <span class="s2">&#34;storaged0&#34;</span>:9779,<span class="s2">&#34;storaged1&#34;</span>:9779,<span class="s2">&#34;storaged2&#34;</span>:9779<span class="p">;</span>
</span></span><span class="line"><span class="cl">SHOW HOSTS<span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>Load the <a href="https://docs.nebula-graph.io/3.0.2/3.ngql-guide/1.nGQL-overview/1.overview/#example_data_basketballplayer" target="_blank" rel="noopener noreffer">test graph data</a>, which will take one or two minutes to finish.</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">:play basketballplayer<span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="create-a-spark-playground" class="headerLink">
    <a href="#create-a-spark-playground" class="header-mark"></a>2.2.2 Create a Spark playground</h4><p>Thanks to <a href="https://github.com/big-data-europe/docker-spark" target="_blank" rel="noopener noreffer">Big data europe</a>, it&rsquo;s quite handly to do so:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run --name spark-master-0 --network nebula-docker-compose_nebula-net <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -h spark-master-0 -e <span class="nv">ENABLE_INIT_DAEMON</span><span class="o">=</span><span class="nb">false</span> -d <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v <span class="si">${</span><span class="nv">PWD</span><span class="si">}</span>/:/root <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    bde2020/spark-master:2.4.5-hadoop2.7
</span></span></code></pre></td></tr></table>
</div>
</div><p>In the above one line command, we created a container named <code>spark-master-0</code> with a built-in Hadoop 2.7 and spark 2.4.5, connected to the Nebula Graph cluster in its docker network named <code>nebula-docker-compose_nebula-net</code>, and it mapped the current path to <code>/root</code> of the spark container.</p>
<p>Then, we could access the spark env container with:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker <span class="nb">exec</span> -it spark-master-0 bash
</span></span></code></pre></td></tr></table>
</div>
</div><p>Optionally, we could install <code>mvn</code> inside the container:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker <span class="nb">exec</span> -it spark-master-0 bash
</span></span><span class="line"><span class="cl"><span class="c1"># in the container shell</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">MAVEN_VERSION</span><span class="o">=</span>3.5.4
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">MAVEN_HOME</span><span class="o">=</span>/usr/lib/mvn
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">PATH</span><span class="o">=</span><span class="nv">$MAVEN_HOME</span>/bin:<span class="nv">$PATH</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">wget http://archive.apache.org/dist/maven/maven-3/<span class="nv">$MAVEN_VERSION</span>/binaries/apache-maven-<span class="nv">$MAVEN_VERSION</span>-bin.tar.gz <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  tar -zxvf apache-maven-<span class="nv">$MAVEN_VERSION</span>-bin.tar.gz <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  rm apache-maven-<span class="nv">$MAVEN_VERSION</span>-bin.tar.gz <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  mv apache-maven-<span class="nv">$MAVEN_VERSION</span> /usr/lib/mvn
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="run-spark-connector-example" class="headerLink">
    <a href="#run-spark-connector-example" class="header-mark"></a>2.2.3 Run spark connector example</h4><p>Let&rsquo;s clone the connector and the example code base, and build(or place the connector Jar package) the connector:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone https://github.com/vesoft-inc/nebula-spark-connector.git
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">docker <span class="nb">exec</span> -it spark-master-0 bash
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> /root/nebula-spark-connector
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/usr/lib/mvn/bin/mvn install -Dgpg.skip -Dmaven.javadoc.skip<span class="o">=</span><span class="nb">true</span> -Dmaven.test.skip<span class="o">=</span><span class="nb">true</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Then we replace the example code:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">vi example/src/main/scala/com/vesoft/nebula/examples/connector/NebulaSparkReaderExample.scala
</span></span></code></pre></td></tr></table>
</div>
</div><p>We put the code as the following, where two functions <code>readVertex</code> and <code>readEdges</code> was created on the <code>basketballplayer</code> graph space:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-scala" data-lang="scala"><span class="line"><span class="cl"><span class="k">package</span> <span class="nn">com.vesoft.nebula.examples.connector</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">import</span> <span class="nn">com.facebook.thrift.protocol.TCompactProtocol</span>
</span></span><span class="line"><span class="cl"><span class="k">import</span> <span class="nn">com.vesoft.nebula.connector.connector.NebulaDataFrameReader</span>
</span></span><span class="line"><span class="cl"><span class="k">import</span> <span class="nn">com.vesoft.nebula.connector.</span><span class="o">{</span><span class="nc">NebulaConnectionConfig</span><span class="o">,</span> <span class="nc">ReadNebulaConfig</span><span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="k">import</span> <span class="nn">org.apache.spark.SparkConf</span>
</span></span><span class="line"><span class="cl"><span class="k">import</span> <span class="nn">org.apache.spark.sql.SparkSession</span>
</span></span><span class="line"><span class="cl"><span class="k">import</span> <span class="nn">org.slf4j.LoggerFactory</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">object</span> <span class="nc">NebulaSparkReaderExample</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">private</span> <span class="k">val</span> <span class="nc">LOG</span> <span class="k">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="n">getLogger</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="n">getClass</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">def</span> <span class="n">main</span><span class="o">(</span><span class="n">args</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">val</span> <span class="n">sparkConf</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">SparkConf</span>
</span></span><span class="line"><span class="cl">    <span class="n">sparkConf</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="n">set</span><span class="o">(</span><span class="s">&#34;spark.serializer&#34;</span><span class="o">,</span> <span class="s">&#34;org.apache.spark.serializer.KryoSerializer&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="n">registerKryoClasses</span><span class="o">(</span><span class="nc">Array</span><span class="o">[</span><span class="kt">Class</span><span class="o">[</span><span class="k">_</span><span class="o">]](</span><span class="n">classOf</span><span class="o">[</span><span class="kt">TCompactProtocol</span><span class="o">]))</span>
</span></span><span class="line"><span class="cl">    <span class="k">val</span> <span class="n">spark</span> <span class="k">=</span> <span class="nc">SparkSession</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="n">builder</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="n">master</span><span class="o">(</span><span class="s">&#34;local&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="n">config</span><span class="o">(</span><span class="n">sparkConf</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="n">getOrCreate</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">readVertex</span><span class="o">(</span><span class="n">spark</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">readEdges</span><span class="o">(</span><span class="n">spark</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">spark</span><span class="o">.</span><span class="n">close</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">def</span> <span class="n">readVertex</span><span class="o">(</span><span class="n">spark</span><span class="k">:</span> <span class="kt">SparkSession</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nc">LOG</span><span class="o">.</span><span class="n">info</span><span class="o">(</span><span class="s">&#34;start to read nebula vertices&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">val</span> <span class="n">config</span> <span class="k">=</span>
</span></span><span class="line"><span class="cl">      <span class="nc">NebulaConnectionConfig</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="n">builder</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="n">withMetaAddress</span><span class="o">(</span><span class="s">&#34;metad0:9559,metad1:9559,metad2:9559&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="n">withConenctionRetry</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="n">build</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">val</span> <span class="n">nebulaReadVertexConfig</span><span class="k">:</span> <span class="kt">ReadNebulaConfig</span> <span class="o">=</span> <span class="nc">ReadNebulaConfig</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="n">builder</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="n">withSpace</span><span class="o">(</span><span class="s">&#34;basketballplayer&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="n">withLabel</span><span class="o">(</span><span class="s">&#34;player&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="n">withNoColumn</span><span class="o">(</span><span class="kc">false</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="n">withReturnCols</span><span class="o">(</span><span class="nc">List</span><span class="o">(</span><span class="s">&#34;name&#34;</span><span class="o">,</span> <span class="s">&#34;age&#34;</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="n">withLimit</span><span class="o">(</span><span class="mi">10</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="n">withPartitionNum</span><span class="o">(</span><span class="mi">10</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="n">build</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">val</span> <span class="n">vertex</span> <span class="k">=</span> <span class="n">spark</span><span class="o">.</span><span class="n">read</span><span class="o">.</span><span class="n">nebula</span><span class="o">(</span><span class="n">config</span><span class="o">,</span> <span class="n">nebulaReadVertexConfig</span><span class="o">).</span><span class="n">loadVerticesToDF</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">vertex</span><span class="o">.</span><span class="n">printSchema</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">vertex</span><span class="o">.</span><span class="n">show</span><span class="o">(</span><span class="mi">20</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">println</span><span class="o">(</span><span class="s">&#34;vertex count: &#34;</span> <span class="o">+</span> <span class="n">vertex</span><span class="o">.</span><span class="n">count</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">def</span> <span class="n">readEdges</span><span class="o">(</span><span class="n">spark</span><span class="k">:</span> <span class="kt">SparkSession</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nc">LOG</span><span class="o">.</span><span class="n">info</span><span class="o">(</span><span class="s">&#34;start to read nebula edges&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">val</span> <span class="n">config</span> <span class="k">=</span>
</span></span><span class="line"><span class="cl">      <span class="nc">NebulaConnectionConfig</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="n">builder</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="n">withMetaAddress</span><span class="o">(</span><span class="s">&#34;metad0:9559,metad1:9559,metad2:9559&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="n">withTimeout</span><span class="o">(</span><span class="mi">6000</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="n">withConenctionRetry</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="n">build</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">val</span> <span class="n">nebulaReadEdgeConfig</span><span class="k">:</span> <span class="kt">ReadNebulaConfig</span> <span class="o">=</span> <span class="nc">ReadNebulaConfig</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="n">builder</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="n">withSpace</span><span class="o">(</span><span class="s">&#34;basketballplayer&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="n">withLabel</span><span class="o">(</span><span class="s">&#34;follow&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="n">withNoColumn</span><span class="o">(</span><span class="kc">false</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="n">withReturnCols</span><span class="o">(</span><span class="nc">List</span><span class="o">(</span><span class="s">&#34;degree&#34;</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="n">withLimit</span><span class="o">(</span><span class="mi">10</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="n">withPartitionNum</span><span class="o">(</span><span class="mi">10</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="n">build</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">val</span> <span class="n">edge</span> <span class="k">=</span> <span class="n">spark</span><span class="o">.</span><span class="n">read</span><span class="o">.</span><span class="n">nebula</span><span class="o">(</span><span class="n">config</span><span class="o">,</span> <span class="n">nebulaReadEdgeConfig</span><span class="o">).</span><span class="n">loadEdgesToDF</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">edge</span><span class="o">.</span><span class="n">printSchema</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">edge</span><span class="o">.</span><span class="n">show</span><span class="o">(</span><span class="mi">20</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">println</span><span class="o">(</span><span class="s">&#34;edge count: &#34;</span> <span class="o">+</span> <span class="n">edge</span><span class="o">.</span><span class="n">count</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Then build it:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> example
</span></span><span class="line"><span class="cl">/usr/lib/mvn/bin/mvn install -Dgpg.skip -Dmaven.javadoc.skip<span class="o">=</span><span class="nb">true</span> -Dmaven.test.skip<span class="o">=</span><span class="nb">true</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Execute it on spark:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">/spark/bin/spark-submit --master <span class="s2">&#34;local&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --class com.vesoft.nebula.examples.connector.NebulaSparkReaderExample <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --driver-memory 16g target/example-3.0-SNAPSHOT.jar
</span></span></code></pre></td></tr></table>
</div>
</div><p>And the result should include:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">22/04/19 07:29:34 INFO DAGScheduler: Job 1 finished: show at NebulaSparkReaderExample.scala:57, took 0.199310 s
</span></span><span class="line"><span class="cl">+---------+------------------+---+
</span></span><span class="line"><span class="cl">|_vertexId|              name|age|
</span></span><span class="line"><span class="cl">+---------+------------------+---+
</span></span><span class="line"><span class="cl">|player105|       Danny Green| 31|
</span></span><span class="line"><span class="cl">|player109|    Tiago Splitter| 34|
</span></span><span class="line"><span class="cl">|player111|        David West| 38|
</span></span><span class="line"><span class="cl">|player118| Russell Westbrook| 30|
</span></span><span class="line"><span class="cl">|player143|Kristaps Porzingis| 23|
</span></span><span class="line"><span class="cl">|player114|     Tracy McGrady| 39|
</span></span><span class="line"><span class="cl">|player150|       Luka Doncic| 20|
</span></span><span class="line"><span class="cl">|player103|          Rudy Gay| 32|
</span></span><span class="line"><span class="cl">|player113|   Dejounte Murray| 29|
</span></span><span class="line"><span class="cl">|player121|        Chris Paul| 33|
</span></span><span class="line"><span class="cl">|player128|   Carmelo Anthony| 34|
</span></span><span class="line"><span class="cl">|player130|       Joel Embiid| 25|
</span></span><span class="line"><span class="cl">|player136|        Steve Nash| 45|
</span></span><span class="line"><span class="cl">|player108|        Boris Diaw| 36|
</span></span><span class="line"><span class="cl">|player122|    DeAndre Jordan| 30|
</span></span><span class="line"><span class="cl">|player123|       Ricky Rubio| 28|
</span></span><span class="line"><span class="cl">|player139|        Marc Gasol| 34|
</span></span><span class="line"><span class="cl">|player142|     Klay Thompson| 29|
</span></span><span class="line"><span class="cl">|player145|      JaVale McGee| 31|
</span></span><span class="line"><span class="cl">|player102| LaMarcus Aldridge| 33|
</span></span><span class="line"><span class="cl">+---------+------------------+---+
</span></span><span class="line"><span class="cl">only showing top 20 rows
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">22/04/19 07:29:36 INFO DAGScheduler: Job 4 finished: show at NebulaSparkReaderExample.scala:82, took 0.135543 s
</span></span><span class="line"><span class="cl">+---------+---------+-----+------+
</span></span><span class="line"><span class="cl">|   _srcId|   _dstId|_rank|degree|
</span></span><span class="line"><span class="cl">+---------+---------+-----+------+
</span></span><span class="line"><span class="cl">|player105|player100|    0|    70|
</span></span><span class="line"><span class="cl">|player105|player104|    0|    83|
</span></span><span class="line"><span class="cl">|player105|player116|    0|    80|
</span></span><span class="line"><span class="cl">|player109|player100|    0|    80|
</span></span><span class="line"><span class="cl">|player109|player125|    0|    90|
</span></span><span class="line"><span class="cl">|player118|player120|    0|    90|
</span></span><span class="line"><span class="cl">|player118|player131|    0|    90|
</span></span><span class="line"><span class="cl">|player143|player150|    0|    90|
</span></span><span class="line"><span class="cl">|player114|player103|    0|    90|
</span></span><span class="line"><span class="cl">|player114|player115|    0|    90|
</span></span><span class="line"><span class="cl">|player114|player140|    0|    90|
</span></span><span class="line"><span class="cl">|player150|player120|    0|    80|
</span></span><span class="line"><span class="cl">|player150|player137|    0|    90|
</span></span><span class="line"><span class="cl">|player150|player143|    0|    90|
</span></span><span class="line"><span class="cl">|player103|player102|    0|    70|
</span></span><span class="line"><span class="cl">|player113|player100|    0|    99|
</span></span><span class="line"><span class="cl">|player113|player101|    0|    99|
</span></span><span class="line"><span class="cl">|player113|player104|    0|    99|
</span></span><span class="line"><span class="cl">|player113|player105|    0|    99|
</span></span><span class="line"><span class="cl">|player113|player106|    0|    99|
</span></span><span class="line"><span class="cl">+---------+---------+-----+------+
</span></span><span class="line"><span class="cl">only showing top 20 rows
</span></span></code></pre></td></tr></table>
</div>
</div><p>And there are more examples under the repo, especially one for GraphX, you could try exploring yourself for that part. Please be noted in GraphX assumed vertex ID to be in numeric type, thus for string typed vertex ID case a conversion on the fly is needed, please refer to <a href="https://github.com/vesoft-inc/nebula-algorithm/blob/a82d7092d928a2f3abc45a727c24afb888ff8e4f/example/src/main/scala/com/vesoft/nebula/algorithm/PageRankExample.scala#L31" target="_blank" rel="noopener noreffer">the example in Nebula Algorithom</a> on how to mitigate that.</p>
<h2 id="exchange" class="headerLink">
    <a href="#exchange" class="header-mark"></a>3 Exchange</h2><ul>
<li>Codebase: <a href="https://github.com/vesoft-inc/nebula-exchange/" target="_blank" rel="noopener noreffer">https://github.com/vesoft-inc/nebula-exchange/</a></li>
<li>Documentation: <a href="https://docs.nebula-graph.io/3.0.2/nebula-exchange/about-exchange/ex-ug-what-is-exchange/" target="_blank" rel="noopener noreffer">https://docs.nebula-graph.io/3.0.2/nebula-exchange/about-exchange/ex-ug-what-is-exchange/</a> (it&rsquo;s versioned, as for now, I put the latest released version 3.0.2 here)</li>
<li>Jar Package: <a href="https://github.com/vesoft-inc/nebula-exchange/releases" target="_blank" rel="noopener noreffer">https://github.com/vesoft-inc/nebula-exchange/releases</a></li>
<li>Configuration Examples: <a href="https://github.com/vesoft-inc/nebula-exchange/blob/master/exchange-common/src/test/resources/application.conf" target="_blank" rel="noopener noreffer">exchange-common/src/test/resources/application.conf</a></li>
</ul>
<p>Nebula Exchange is a Spark Lib/App to read data from multiple sources, then, write to either Nebula Graph directly or into Nebula Graph <a href="https://docs.nebula-graph.io/3.0.2/nebula-exchange/use-exchange/ex-ug-import-from-sst/#step_5_import_the_sst_file" target="_blank" rel="noopener noreffer">SST Files</a>.</p>
<p></p>
<p>The way to leverage Nebula Exchange is only to firstly create the configuration files to let the exchange know how data should be fetched and written, then call the exchange package with the conf file specified.</p>
<p>Now let&rsquo;s do a hands-on test with the same environment created in the last chapter.</p>
<h3 id="hands-on-exchange" class="headerLink">
    <a href="#hands-on-exchange" class="header-mark"></a>3.1 Hands-on Exchange</h3><p>Here, we are using Exchange to consume data source from a CSV file, where the first column is Vertex ID, and the second, and third to be properties of &ldquo;name&rdquo; and &ldquo;age&rdquo;.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">player800,<span class="s2">&#34;Foo Bar&#34;</span>,23
</span></span><span class="line"><span class="cl">player801,<span class="s2">&#34;Another Name&#34;</span>,21
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>Let&rsquo;s get into the spark container created in the last chapter, and download the Jar package of Nebula Exchange:</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker <span class="nb">exec</span> -it spark-master bash
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> /root/
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">wget https://github.com/vesoft-inc/nebula-exchange/releases/download/v3.0.0/nebula-exchange_spark_2.4-3.0.0.jar
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>Create a conf file named <code>exchange.conf</code> in format <code>HOCON</code>, where:
<ul>
<li>under <code>.nebula</code>, information regarding Nebula Graph Cluster was configured</li>
<li>under <code>.tags</code>, information regarding Vertices like how required fields are reflected our data source(here it&rsquo;s CSV file) was configured</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span><span class="lnt">88
</span><span class="lnt">89
</span><span class="lnt">90
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-zed" data-lang="zed"><span class="line"><span class="cl"><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="err">#</span><span class="w"> </span><span class="n">Spark</span><span class="w"> </span><span class="kn">relation</span><span class="w"> </span><span class="n">config</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">spark</span><span class="o">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">app</span><span class="o">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">name</span><span class="o">:</span><span class="w"> </span><span class="n">Nebula</span><span class="w"> </span><span class="n">Exchange</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">master</span><span class="o">:</span><span class="n">local</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">driver</span><span class="o">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">cores</span><span class="o">:</span><span class="w"> </span><span class="err">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">maxResultSize</span><span class="o">:</span><span class="w"> </span><span class="err">1</span><span class="n">G</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">executor</span><span class="o">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">memory</span><span class="o">:</span><span class="w"> </span><span class="err">1</span><span class="n">G</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">cores</span><span class="o">:</span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">max</span><span class="o">:</span><span class="w"> </span><span class="err">16</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="err">#</span><span class="w"> </span><span class="n">Nebula</span><span class="w"> </span><span class="n">Graph</span><span class="w"> </span><span class="kn">relation</span><span class="w"> </span><span class="n">config</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">nebula</span><span class="o">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">address</span><span class="o">:</span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">graph</span><span class="o">:</span><span class="p">[</span><span class="err">&#34;</span><span class="n">graphd</span><span class="o">:</span><span class="err">9669&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">meta</span><span class="o">:</span><span class="p">[</span><span class="err">&#34;</span><span class="n">metad0</span><span class="o">:</span><span class="err">9559&#34;</span><span class="p">,</span><span class="w"> </span><span class="err">&#34;</span><span class="n">metad1</span><span class="o">:</span><span class="err">9559&#34;</span><span class="p">,</span><span class="w"> </span><span class="err">&#34;</span><span class="n">metad2</span><span class="o">:</span><span class="err">9559&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">user</span><span class="o">:</span><span class="w"> </span><span class="n">root</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">pswd</span><span class="o">:</span><span class="w"> </span><span class="n">nebula</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">space</span><span class="o">:</span><span class="w"> </span><span class="n">basketballplayer</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="err">#</span><span class="w"> </span><span class="n">parameters</span><span class="w"> </span><span class="n">for</span><span class="w"> </span><span class="n">SST</span><span class="w"> </span><span class="n">import</span><span class="p">,</span><span class="w"> </span><span class="n">not</span><span class="w"> </span><span class="n">required</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">path</span><span class="o">:</span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">local</span><span class="o">:</span><span class="err">&#34;</span><span class="o">/</span><span class="n">tmp</span><span class="err">&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">remote</span><span class="o">:</span><span class="err">&#34;</span><span class="o">/</span><span class="n">sst</span><span class="err">&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">hdfs</span><span class="p">.</span><span class="n">namenode</span><span class="o">:</span><span class="w"> </span><span class="err">&#34;</span><span class="n">hdfs</span><span class="o">:</span><span class="c1">//localhost:9000&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="err">#</span><span class="w"> </span><span class="n">nebula</span><span class="w"> </span><span class="n">client</span><span class="w"> </span><span class="n">connection</span><span class="w"> </span><span class="n">parameters</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">connection</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="err">#</span><span class="w"> </span><span class="n">socket</span><span class="w"> </span><span class="n">connect</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="n">execute</span><span class="w"> </span><span class="n">timeout</span><span class="p">,</span><span class="w"> </span><span class="n">unit</span><span class="o">:</span><span class="w"> </span><span class="n">millisecond</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">timeout</span><span class="o">:</span><span class="w"> </span><span class="err">30000</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">error</span><span class="o">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="err">#</span><span class="w"> </span><span class="n">max</span><span class="w"> </span><span class="n">number</span><span class="w"> </span><span class="n">of</span><span class="w"> </span><span class="n">failures</span><span class="p">,</span><span class="w"> </span><span class="n">if</span><span class="w"> </span><span class="n">the</span><span class="w"> </span><span class="n">number</span><span class="w"> </span><span class="n">of</span><span class="w"> </span><span class="n">failures</span><span class="w"> </span><span class="n">is</span><span class="w"> </span><span class="n">bigger</span><span class="w"> </span><span class="n">than</span><span class="w"> </span><span class="n">max</span><span class="p">,</span><span class="w"> </span><span class="n">then</span><span class="w"> </span><span class="n">exit</span><span class="w"> </span><span class="n">the</span><span class="w"> </span><span class="n">application</span><span class="p">.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">max</span><span class="o">:</span><span class="w"> </span><span class="err">32</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="err">#</span><span class="w"> </span><span class="n">failed</span><span class="w"> </span><span class="n">import</span><span class="w"> </span><span class="n">job</span><span class="w"> </span><span class="n">will</span><span class="w"> </span><span class="n">be</span><span class="w"> </span><span class="n">recorded</span><span class="w"> </span><span class="n">in</span><span class="w"> </span><span class="n">output</span><span class="w"> </span><span class="n">path</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">output</span><span class="o">:</span><span class="w"> </span><span class="o">/</span><span class="nn">tmp/</span><span class="n">errors</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="err">#</span><span class="w"> </span><span class="n">use</span><span class="w"> </span><span class="n">google</span><span class="err">&#39;</span><span class="n">s</span><span class="w"> </span><span class="n">RateLimiter</span><span class="w"> </span><span class="n">to</span><span class="w"> </span><span class="n">limit</span><span class="w"> </span><span class="n">the</span><span class="w"> </span><span class="n">requests</span><span class="w"> </span><span class="n">send</span><span class="w"> </span><span class="n">to</span><span class="w"> </span><span class="n">NebulaGraph</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">rate</span><span class="o">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="err">#</span><span class="w"> </span><span class="n">the</span><span class="w"> </span><span class="n">stable</span><span class="w"> </span><span class="n">throughput</span><span class="w"> </span><span class="n">of</span><span class="w"> </span><span class="n">RateLimiter</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">limit</span><span class="o">:</span><span class="w"> </span><span class="err">1024</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="err">#</span><span class="w"> </span><span class="n">Acquires</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="n">permit</span><span class="w"> </span><span class="n">from</span><span class="w"> </span><span class="n">RateLimiter</span><span class="p">,</span><span class="w"> </span><span class="n">unit</span><span class="o">:</span><span class="w"> </span><span class="n">MILLISECONDS</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="err">#</span><span class="w"> </span><span class="n">if</span><span class="w"> </span><span class="n">it</span><span class="w"> </span><span class="n">can</span><span class="err">&#39;</span><span class="n">t</span><span class="w"> </span><span class="n">be</span><span class="w"> </span><span class="n">obtained</span><span class="w"> </span><span class="n">within</span><span class="w"> </span><span class="n">the</span><span class="w"> </span><span class="n">specified</span><span class="w"> </span><span class="n">timeout</span><span class="p">,</span><span class="w"> </span><span class="n">then</span><span class="w"> </span><span class="n">give</span><span class="w"> </span><span class="n">up</span><span class="w"> </span><span class="n">the</span><span class="w"> </span><span class="n">request</span><span class="p">.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">timeout</span><span class="o">:</span><span class="w"> </span><span class="err">1000</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="err">#</span><span class="w"> </span><span class="n">Processing</span><span class="w"> </span><span class="n">tags</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="err">#</span><span class="w"> </span><span class="n">There</span><span class="w"> </span><span class="n">are</span><span class="w"> </span><span class="n">tag</span><span class="w"> </span><span class="n">config</span><span class="w"> </span><span class="n">examples</span><span class="w"> </span><span class="n">for</span><span class="w"> </span><span class="n">different</span><span class="w"> </span><span class="n">data</span><span class="w"> </span><span class="n">Sources</span><span class="p">.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">tags</span><span class="o">:</span><span class="w"> </span><span class="p">[</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="err">#</span><span class="w"> </span><span class="n">HDFS</span><span class="w"> </span><span class="n">CSV</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="err">#</span><span class="w"> </span><span class="n">Import</span><span class="w"> </span><span class="n">mode</span><span class="w"> </span><span class="n">is</span><span class="w"> </span><span class="n">client</span><span class="p">,</span><span class="w"> </span><span class="n">just</span><span class="w"> </span><span class="n">change</span><span class="w"> </span><span class="n">type</span><span class="p">.</span><span class="n">sink</span><span class="w"> </span><span class="n">to</span><span class="w"> </span><span class="n">sst</span><span class="w"> </span><span class="n">if</span><span class="w"> </span><span class="n">you</span><span class="w"> </span><span class="n">want</span><span class="w"> </span><span class="n">to</span><span class="w"> </span><span class="n">use</span><span class="w"> </span><span class="n">client</span><span class="w"> </span><span class="n">import</span><span class="w"> </span><span class="n">mode</span><span class="p">.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">name</span><span class="o">:</span><span class="w"> </span><span class="n">player</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">type</span><span class="o">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">source</span><span class="o">:</span><span class="w"> </span><span class="n">csv</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">sink</span><span class="o">:</span><span class="w"> </span><span class="n">client</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">path</span><span class="o">:</span><span class="w"> </span><span class="err">&#34;</span><span class="n">file</span><span class="o">:</span><span class="c1">///root/player.csv&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">      </span><span class="err">#</span><span class="w"> </span><span class="n">if</span><span class="w"> </span><span class="n">your</span><span class="w"> </span><span class="n">csv</span><span class="w"> </span><span class="n">file</span><span class="w"> </span><span class="n">has</span><span class="w"> </span><span class="n">no</span><span class="w"> </span><span class="n">header</span><span class="p">,</span><span class="w"> </span><span class="n">then</span><span class="w"> </span><span class="n">use</span><span class="w"> </span><span class="n">_c0</span><span class="p">,</span><span class="n">_c1</span><span class="p">,</span><span class="n">_c2</span><span class="p">,..</span><span class="w"> </span><span class="n">to</span><span class="w"> </span><span class="n">indicate</span><span class="w"> </span><span class="n">fields</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">fields</span><span class="o">:</span><span class="w"> </span><span class="p">[</span><span class="n">_c1</span><span class="p">,</span><span class="w"> </span><span class="n">_c2</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">nebula</span><span class="p">.</span><span class="n">fields</span><span class="o">:</span><span class="w"> </span><span class="p">[</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">age</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">vertex</span><span class="o">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">field</span><span class="o">:</span><span class="n">_c0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">separator</span><span class="o">:</span><span class="w"> </span><span class="err">&#34;</span><span class="p">,</span><span class="err">&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">header</span><span class="o">:</span><span class="w"> </span><span class="n">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">batch</span><span class="o">:</span><span class="w"> </span><span class="err">256</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">partition</span><span class="o">:</span><span class="w"> </span><span class="err">32</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>Finally, let&rsquo;s create <code>player.csv</code> and <code>exchange.conf</code>, it should be listed as the following:</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># ls -l</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">-rw-r--r--    <span class="m">1</span> root     root          <span class="m">1912</span> Apr <span class="m">19</span> 08:21 exchange.conf
</span></span><span class="line"><span class="cl">-rw-r--r--    <span class="m">1</span> root     root     <span class="m">157814140</span> Apr <span class="m">19</span> 08:17 nebula-exchange_spark_2.4-3.0.0.jar
</span></span><span class="line"><span class="cl">-rw-r--r--    <span class="m">1</span> root     root            <span class="m">52</span> Apr <span class="m">19</span> 08:06 player.csv
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>And we could call the exchange as:</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">/spark/bin/spark-submit --master <span class="nb">local</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --class com.vesoft.nebula.exchange.Exchange nebula-exchange_spark_2.4-3.0.0.jar <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -c exchange.conf
</span></span></code></pre></td></tr></table>
</div>
</div><p>And the result should be like</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">22/04/19 08:22:08 INFO Exchange$: import for tag player cost time: 1.32 s
</span></span><span class="line"><span class="cl">22/04/19 08:22:08 INFO Exchange$: Client-Import: batchSuccess.player: 2
</span></span><span class="line"><span class="cl">22/04/19 08:22:08 INFO Exchange$: Client-Import: batchFailure.player: 0
</span></span><span class="line"><span class="cl">...
</span></span></code></pre></td></tr></table>
</div>
</div><p>Please refer to the documentation and conf examples for more data sources. For hands-on Exchange writing to SST Files, you could refer to both Documentation and <a href="https://www.siwei.io/nebula-exchange-sst-2.x/" target="_blank" rel="noopener noreffer">Nebula Exchange SST 2.x Hands-on Guide</a>.</p>
<h2 id="algorithm" class="headerLink">
    <a href="#algorithm" class="header-mark"></a>4 Algorithm</h2><ul>
<li>Codebase: <a href="https://github.com/vesoft-inc/nebula-algorithm" target="_blank" rel="noopener noreffer">https://github.com/vesoft-inc/nebula-algorithm</a></li>
<li>Documentation: <a href="https://docs.nebula-graph.io/3.0.2/nebula-algorithm/" target="_blank" rel="noopener noreffer">https://docs.nebula-graph.io/3.0.2/nebula-algorithm/</a> (it&rsquo;s versioned, as for now, I put the latest released version 3.0.2 here)</li>
<li>Jar Package: <a href="https://repo1.maven.org/maven2/com/vesoft/nebula-algorithm/" target="_blank" rel="noopener noreffer">https://repo1.maven.org/maven2/com/vesoft/nebula-algorithm/</a></li>
<li>Code Examples: <a href="example/src/main/scala/com/vesoft/nebula/algorithm" rel="">example/src/main/scala/com/vesoft/nebula/algorithm</a></li>
</ul>
<h3 id="calling-with-spark-submit" class="headerLink">
    <a href="#calling-with-spark-submit" class="header-mark"></a>4.1 Calling with spark-submit</h3><p>When we call Nebula Algorithm with spark-submit, on how to use perspective, it is quite similar to Exchange. <a href="https://www.siwei.io/en/nebula-livejournal/" target="_blank" rel="noopener noreffer">This post</a> already showed us how to do that in action.</p>
<h3 id="calling-as-a-lib-in-code" class="headerLink">
    <a href="#calling-as-a-lib-in-code" class="header-mark"></a>4.2 Calling as a lib in code</h3><p>On the other hand, we could call Nebula Algorithm in spark as a Spark Lib, the gain will be:</p>
<ol>
<li>More control/customization on the output format of the algorithm</li>
<li>Possible to perform algorithm for non-numerical vertex ID cases, see <a href="https://github.com/vesoft-inc/nebula-algorithm/blob/a82d7092d928a2f3abc45a727c24afb888ff8e4f/example/src/main/scala/com/vesoft/nebula/algorithm/PageRankExample.scala#L48" target="_blank" rel="noopener noreffer">here</a></li>
</ol>
<h2 id="pyspark-for-nebula-graph" class="headerLink">
    <a href="#pyspark-for-nebula-graph" class="header-mark"></a>5 PySpark for Nebula Graph</h2><p>PySpark comes with the capability to call java/scala packages inside python, thus it&rsquo;s also quite easy to use Spark Connector with Python.</p>
<p>Here I am doing this from the pyspark entrypoint in <code>/spark/bin/pyspark</code>, with the connector&rsquo;s Jar package specified with <code>--driver-class-path</code> and <code>--jars</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">docker</span> <span class="n">exec</span> <span class="o">-</span><span class="n">it</span> <span class="n">spark</span><span class="o">-</span><span class="n">master</span><span class="o">-</span><span class="mi">0</span> <span class="n">bash</span>
</span></span><span class="line"><span class="cl"><span class="n">cd</span> <span class="n">root</span>
</span></span><span class="line"><span class="cl"><span class="n">wget</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">repo1</span><span class="o">.</span><span class="n">maven</span><span class="o">.</span><span class="n">org</span><span class="o">/</span><span class="n">maven2</span><span class="o">/</span><span class="n">com</span><span class="o">/</span><span class="n">vesoft</span><span class="o">/</span><span class="n">nebula</span><span class="o">-</span><span class="n">spark</span><span class="o">-</span><span class="n">connector</span><span class="o">/</span><span class="mf">3.0.0</span><span class="o">/</span><span class="n">nebula</span><span class="o">-</span><span class="n">spark</span><span class="o">-</span><span class="n">connector</span><span class="o">-</span><span class="mf">3.0.0</span><span class="o">.</span><span class="n">jar</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">/</span><span class="n">spark</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">pyspark</span> <span class="o">--</span><span class="n">driver</span><span class="o">-</span><span class="n">class</span><span class="o">-</span><span class="n">path</span> <span class="n">nebula</span><span class="o">-</span><span class="n">spark</span><span class="o">-</span><span class="n">connector</span><span class="o">-</span><span class="mf">3.0.0</span><span class="o">.</span><span class="n">jar</span> <span class="o">--</span><span class="n">jars</span> <span class="n">nebula</span><span class="o">-</span><span class="n">spark</span><span class="o">-</span><span class="n">connector</span><span class="o">-</span><span class="mf">3.0.0</span><span class="o">.</span><span class="n">jar</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Then, rather than pass <code>NebulaConnectionConfig</code> and <code>ReadNebulaConfig</code> to <code>spark.read.nebula</code>, we should instead call <code>spark.read.format(&quot;com.vesoft.nebula.connector.NebulaDataSource&quot;)</code>.</p>
<p>Voilà!</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">df</span> <span class="o">=</span> <span class="n">spark</span><span class="o">.</span><span class="n">read</span><span class="o">.</span><span class="n">format</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;com.vesoft.nebula.connector.NebulaDataSource&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">option</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;type&#34;</span><span class="p">,</span> <span class="s2">&#34;vertex&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">option</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;spaceName&#34;</span><span class="p">,</span> <span class="s2">&#34;basketballplayer&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">option</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;label&#34;</span><span class="p">,</span> <span class="s2">&#34;player&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">option</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;returnCols&#34;</span><span class="p">,</span> <span class="s2">&#34;name,age&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">option</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;metaAddress&#34;</span><span class="p">,</span> <span class="s2">&#34;metad0:9559&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">option</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;partitionNumber&#34;</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">load</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">df</span><span class="o">.</span><span class="n">show</span><span class="p">(</span><span class="n">n</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">+---------+--------------+---+</span>
</span></span><span class="line"><span class="cl"><span class="o">|</span><span class="n">_vertexId</span><span class="o">|</span>          <span class="n">name</span><span class="o">|</span><span class="n">age</span><span class="o">|</span>
</span></span><span class="line"><span class="cl"><span class="o">+---------+--------------+---+</span>
</span></span><span class="line"><span class="cl"><span class="o">|</span><span class="n">player105</span><span class="o">|</span>   <span class="n">Danny</span> <span class="n">Green</span><span class="o">|</span> <span class="mi">31</span><span class="o">|</span>
</span></span><span class="line"><span class="cl"><span class="o">|</span><span class="n">player109</span><span class="o">|</span><span class="n">Tiago</span> <span class="n">Splitter</span><span class="o">|</span> <span class="mi">34</span><span class="o">|</span>
</span></span><span class="line"><span class="cl"><span class="o">+---------+--------------+---+</span>
</span></span><span class="line"><span class="cl"><span class="n">only</span> <span class="n">showing</span> <span class="n">top</span> <span class="mi">2</span> <span class="n">rows</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Below are how I figured out how to make this work with almost zero scala knowledge:-P.</p>
<ul>
<li><a href="https://github.com/vesoft-inc/nebula-spark-connector/blob/master/nebula-spark-connector/src/main/scala/com/vesoft/nebula/connector/package.scala" target="_blank" rel="noopener noreffer">How reader should be called</a></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-scala" data-lang="scala"><span class="line"><span class="cl">      <span class="k">def</span> <span class="n">loadVerticesToDF</span><span class="o">()</span><span class="k">:</span> <span class="kt">DataFrame</span> <span class="o">=</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">assert</span><span class="o">(</span><span class="n">connectionConfig</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">readConfig</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">               <span class="s">&#34;nebula config is not set, please call nebula() before loadVerticesToDF&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">val</span> <span class="n">dfReader</span> <span class="k">=</span> <span class="n">reader</span>
</span></span><span class="line"><span class="cl">          <span class="o">.</span><span class="n">format</span><span class="o">(</span><span class="n">classOf</span><span class="o">[</span><span class="kt">NebulaDataSource</span><span class="o">].</span><span class="n">getName</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">.</span><span class="n">option</span><span class="o">(</span><span class="nc">NebulaOptions</span><span class="o">.</span><span class="nc">TYPE</span><span class="o">,</span> <span class="nc">DataTypeEnum</span><span class="o">.</span><span class="nc">VERTEX</span><span class="o">.</span><span class="n">toString</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">.</span><span class="n">option</span><span class="o">(</span><span class="nc">NebulaOptions</span><span class="o">.</span><span class="nc">SPACE_NAME</span><span class="o">,</span> <span class="n">readConfig</span><span class="o">.</span><span class="n">getSpace</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">.</span><span class="n">option</span><span class="o">(</span><span class="nc">NebulaOptions</span><span class="o">.</span><span class="nc">LABEL</span><span class="o">,</span> <span class="n">readConfig</span><span class="o">.</span><span class="n">getLabel</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">.</span><span class="n">option</span><span class="o">(</span><span class="nc">NebulaOptions</span><span class="o">.</span><span class="nc">PARTITION_NUMBER</span><span class="o">,</span> <span class="n">readConfig</span><span class="o">.</span><span class="n">getPartitionNum</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">.</span><span class="n">option</span><span class="o">(</span><span class="nc">NebulaOptions</span><span class="o">.</span><span class="nc">RETURN_COLS</span><span class="o">,</span> <span class="n">readConfig</span><span class="o">.</span><span class="n">getReturnCols</span><span class="o">.</span><span class="n">mkString</span><span class="o">(</span><span class="s">&#34;,&#34;</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">          <span class="o">.</span><span class="n">option</span><span class="o">(</span><span class="nc">NebulaOptions</span><span class="o">.</span><span class="nc">NO_COLUMN</span><span class="o">,</span> <span class="n">readConfig</span><span class="o">.</span><span class="n">getNoColumn</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">.</span><span class="n">option</span><span class="o">(</span><span class="nc">NebulaOptions</span><span class="o">.</span><span class="nc">LIMIT</span><span class="o">,</span> <span class="n">readConfig</span><span class="o">.</span><span class="n">getLimit</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">.</span><span class="n">option</span><span class="o">(</span><span class="nc">NebulaOptions</span><span class="o">.</span><span class="nc">META_ADDRESS</span><span class="o">,</span> <span class="n">connectionConfig</span><span class="o">.</span><span class="n">getMetaAddress</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">.</span><span class="n">option</span><span class="o">(</span><span class="nc">NebulaOptions</span><span class="o">.</span><span class="nc">TIMEOUT</span><span class="o">,</span> <span class="n">connectionConfig</span><span class="o">.</span><span class="n">getTimeout</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">.</span><span class="n">option</span><span class="o">(</span><span class="nc">NebulaOptions</span><span class="o">.</span><span class="nc">CONNECTION_RETRY</span><span class="o">,</span> <span class="n">connectionConfig</span><span class="o">.</span><span class="n">getConnectionRetry</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">.</span><span class="n">option</span><span class="o">(</span><span class="nc">NebulaOptions</span><span class="o">.</span><span class="nc">EXECUTION_RETRY</span><span class="o">,</span> <span class="n">connectionConfig</span><span class="o">.</span><span class="n">getExecRetry</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">.</span><span class="n">option</span><span class="o">(</span><span class="nc">NebulaOptions</span><span class="o">.</span><span class="nc">ENABLE_META_SSL</span><span class="o">,</span> <span class="n">connectionConfig</span><span class="o">.</span><span class="n">getEnableMetaSSL</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">.</span><span class="n">option</span><span class="o">(</span><span class="nc">NebulaOptions</span><span class="o">.</span><span class="nc">ENABLE_STORAGE_SSL</span><span class="o">,</span> <span class="n">connectionConfig</span><span class="o">.</span><span class="n">getEnableStorageSSL</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">connectionConfig</span><span class="o">.</span><span class="n">getEnableStorageSSL</span> <span class="o">||</span> <span class="n">connectionConfig</span><span class="o">.</span><span class="n">getEnableMetaSSL</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">          <span class="n">dfReader</span><span class="o">.</span><span class="n">option</span><span class="o">(</span><span class="nc">NebulaOptions</span><span class="o">.</span><span class="nc">SSL_SIGN_TYPE</span><span class="o">,</span> <span class="n">connectionConfig</span><span class="o">.</span><span class="n">getSignType</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="nc">SSLSignType</span><span class="o">.</span><span class="n">withName</span><span class="o">(</span><span class="n">connectionConfig</span><span class="o">.</span><span class="n">getSignType</span><span class="o">)</span> <span class="k">match</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">case</span> <span class="nc">SSLSignType</span><span class="o">.</span><span class="nc">CA</span> <span class="k">=&gt;</span>
</span></span><span class="line"><span class="cl">              <span class="n">dfReader</span><span class="o">.</span><span class="n">option</span><span class="o">(</span><span class="nc">NebulaOptions</span><span class="o">.</span><span class="nc">CA_SIGN_PARAM</span><span class="o">,</span> <span class="n">connectionConfig</span><span class="o">.</span><span class="n">getCaSignParam</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">case</span> <span class="nc">SSLSignType</span><span class="o">.</span><span class="nc">SELF</span> <span class="k">=&gt;</span>
</span></span><span class="line"><span class="cl">              <span class="n">dfReader</span><span class="o">.</span><span class="n">option</span><span class="o">(</span><span class="nc">NebulaOptions</span><span class="o">.</span><span class="nc">SELF_SIGN_PARAM</span><span class="o">,</span> <span class="n">connectionConfig</span><span class="o">.</span><span class="n">getSelfSignParam</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">        <span class="n">dfReader</span><span class="o">.</span><span class="n">load</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">      <span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><a href="https://github.com/vesoft-inc/nebula-spark-connector/blob/master/nebula-spark-connector/src/main/scala/com/vesoft/nebula/connector/NebulaOptions.scala" target="_blank" rel="noopener noreffer">How Option String should be like</a></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-scala" data-lang="scala"><span class="line"><span class="cl"><span class="k">#</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">object</span> <span class="nc">NebulaOptions</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="cm">/** nebula common config */</span>
</span></span><span class="line"><span class="cl">  <span class="k">val</span> <span class="nc">SPACE_NAME</span><span class="k">:</span> <span class="kt">String</span>    <span class="o">=</span> <span class="s">&#34;spaceName&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="k">val</span> <span class="nc">META_ADDRESS</span><span class="k">:</span> <span class="kt">String</span>  <span class="o">=</span> <span class="s">&#34;metaAddress&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="k">val</span> <span class="nc">GRAPH_ADDRESS</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">&#34;graphAddress&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="k">val</span> <span class="nc">TYPE</span><span class="k">:</span> <span class="kt">String</span>          <span class="o">=</span> <span class="s">&#34;type&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="k">val</span> <span class="nc">LABEL</span><span class="k">:</span> <span class="kt">String</span>         <span class="o">=</span> <span class="s">&#34;label&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="cm">/** connection config */</span>
</span></span><span class="line"><span class="cl">  <span class="k">val</span> <span class="nc">TIMEOUT</span><span class="k">:</span> <span class="kt">String</span>            <span class="o">=</span> <span class="s">&#34;timeout&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="k">val</span> <span class="nc">CONNECTION_RETRY</span><span class="k">:</span> <span class="kt">String</span>   <span class="o">=</span> <span class="s">&#34;connectionRetry&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="k">val</span> <span class="nc">EXECUTION_RETRY</span><span class="k">:</span> <span class="kt">String</span>    <span class="o">=</span> <span class="s">&#34;executionRetry&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="k">val</span> <span class="nc">RATE_TIME_OUT</span><span class="k">:</span> <span class="kt">String</span>      <span class="o">=</span> <span class="s">&#34;reteTimeOut&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="k">val</span> <span class="nc">USER_NAME</span><span class="k">:</span> <span class="kt">String</span>          <span class="o">=</span> <span class="s">&#34;user&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="k">val</span> <span class="nc">PASSWD</span><span class="k">:</span> <span class="kt">String</span>             <span class="o">=</span> <span class="s">&#34;passwd&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="k">val</span> <span class="nc">ENABLE_GRAPH_SSL</span><span class="k">:</span> <span class="kt">String</span>   <span class="o">=</span> <span class="s">&#34;enableGraphSSL&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="k">val</span> <span class="nc">ENABLE_META_SSL</span><span class="k">:</span> <span class="kt">String</span>    <span class="o">=</span> <span class="s">&#34;enableMetaSSL&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="k">val</span> <span class="nc">ENABLE_STORAGE_SSL</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">&#34;enableStorageSSL&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="k">val</span> <span class="nc">SSL_SIGN_TYPE</span><span class="k">:</span> <span class="kt">String</span>      <span class="o">=</span> <span class="s">&#34;sslSignType&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="k">val</span> <span class="nc">CA_SIGN_PARAM</span><span class="k">:</span> <span class="kt">String</span>      <span class="o">=</span> <span class="s">&#34;caSignParam&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="k">val</span> <span class="nc">SELF_SIGN_PARAM</span><span class="k">:</span> <span class="kt">String</span>    <span class="o">=</span> <span class="s">&#34;selfSignParam&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="cm">/** read config */</span>
</span></span><span class="line"><span class="cl">  <span class="k">val</span> <span class="nc">RETURN_COLS</span><span class="k">:</span> <span class="kt">String</span>      <span class="o">=</span> <span class="s">&#34;returnCols&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="k">val</span> <span class="nc">NO_COLUMN</span><span class="k">:</span> <span class="kt">String</span>        <span class="o">=</span> <span class="s">&#34;noColumn&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="k">val</span> <span class="nc">PARTITION_NUMBER</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">&#34;partitionNumber&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="k">val</span> <span class="nc">LIMIT</span><span class="k">:</span> <span class="kt">String</span>            <span class="o">=</span> <span class="s">&#34;limit&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="cm">/** write config */</span>
</span></span><span class="line"><span class="cl">  <span class="k">val</span> <span class="nc">RATE_LIMIT</span><span class="k">:</span> <span class="kt">String</span>   <span class="o">=</span> <span class="s">&#34;rateLimit&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="k">val</span> <span class="nc">VID_POLICY</span><span class="k">:</span> <span class="kt">String</span>   <span class="o">=</span> <span class="s">&#34;vidPolicy&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="k">val</span> <span class="nc">SRC_POLICY</span><span class="k">:</span> <span class="kt">String</span>   <span class="o">=</span> <span class="s">&#34;srcPolicy&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="k">val</span> <span class="nc">DST_POLICY</span><span class="k">:</span> <span class="kt">String</span>   <span class="o">=</span> <span class="s">&#34;dstPolicy&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="k">val</span> <span class="nc">VERTEX_FIELD</span>         <span class="k">=</span> <span class="s">&#34;vertexField&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="k">val</span> <span class="nc">SRC_VERTEX_FIELD</span>     <span class="k">=</span> <span class="s">&#34;srcVertexField&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="k">val</span> <span class="nc">DST_VERTEX_FIELD</span>     <span class="k">=</span> <span class="s">&#34;dstVertexField&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="k">val</span> <span class="nc">RANK_FIELD</span>           <span class="k">=</span> <span class="s">&#34;rankFiled&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="k">val</span> <span class="nc">BATCH</span><span class="k">:</span> <span class="kt">String</span>        <span class="o">=</span> <span class="s">&#34;batch&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="k">val</span> <span class="nc">VID_AS_PROP</span><span class="k">:</span> <span class="kt">String</span>  <span class="o">=</span> <span class="s">&#34;vidAsProp&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="k">val</span> <span class="nc">SRC_AS_PROP</span><span class="k">:</span> <span class="kt">String</span>  <span class="o">=</span> <span class="s">&#34;srcAsProp&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="k">val</span> <span class="nc">DST_AS_PROP</span><span class="k">:</span> <span class="kt">String</span>  <span class="o">=</span> <span class="s">&#34;dstAsProp&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="k">val</span> <span class="nc">RANK_AS_PROP</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">&#34;rankAsProp&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="k">val</span> <span class="nc">WRITE_MODE</span><span class="k">:</span> <span class="kt">String</span>   <span class="o">=</span> <span class="s">&#34;writeMode&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">val</span> <span class="nc">DEFAULT_TIMEOUT</span><span class="k">:</span> <span class="kt">Int</span>            <span class="o">=</span> <span class="mi">3000</span>
</span></span><span class="line"><span class="cl">  <span class="k">val</span> <span class="nc">DEFAULT_CONNECTION_TIMEOUT</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">3000</span>
</span></span><span class="line"><span class="cl">  <span class="k">val</span> <span class="nc">DEFAULT_CONNECTION_RETRY</span><span class="k">:</span> <span class="kt">Int</span>   <span class="o">=</span> <span class="mi">3</span>
</span></span><span class="line"><span class="cl">  <span class="k">val</span> <span class="nc">DEFAULT_EXECUTION_RETRY</span><span class="k">:</span> <span class="kt">Int</span>    <span class="o">=</span> <span class="mi">3</span>
</span></span><span class="line"><span class="cl">  <span class="k">val</span> <span class="nc">DEFAULT_USER_NAME</span><span class="k">:</span> <span class="kt">String</span>       <span class="o">=</span> <span class="s">&#34;root&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="k">val</span> <span class="nc">DEFAULT_PASSWD</span><span class="k">:</span> <span class="kt">String</span>          <span class="o">=</span> <span class="s">&#34;nebula&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">val</span> <span class="nc">DEFAULT_ENABLE_GRAPH_SSL</span><span class="k">:</span> <span class="kt">Boolean</span>   <span class="o">=</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">  <span class="k">val</span> <span class="nc">DEFAULT_ENABLE_META_SSL</span><span class="k">:</span> <span class="kt">Boolean</span>    <span class="o">=</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">  <span class="k">val</span> <span class="nc">DEFAULT_ENABLE_STORAGE_SSL</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">val</span> <span class="nc">DEFAULT_LIMIT</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">1000</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">val</span> <span class="nc">DEFAULT_RATE_LIMIT</span><span class="k">:</span> <span class="kt">Long</span>    <span class="o">=</span> <span class="mi">1024L</span>
</span></span><span class="line"><span class="cl">  <span class="k">val</span> <span class="nc">DEFAULT_RATE_TIME_OUT</span><span class="k">:</span> <span class="kt">Long</span> <span class="o">=</span> <span class="mi">100</span>
</span></span><span class="line"><span class="cl">  <span class="k">val</span> <span class="nc">DEFAULT_POLICY</span><span class="k">:</span> <span class="kt">String</span>      <span class="o">=</span> <span class="kc">null</span>
</span></span><span class="line"><span class="cl">  <span class="k">val</span> <span class="nc">DEFAULT_BATCH</span><span class="k">:</span> <span class="kt">Int</span>          <span class="o">=</span> <span class="mi">1000</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">val</span> <span class="nc">DEFAULT_WRITE_MODE</span> <span class="k">=</span> <span class="nc">WriteMode</span><span class="o">.</span><span class="nc">INSERT</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">val</span> <span class="nc">EMPTY_STRING</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">&#34;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><a href="https://databricks.com/session/how-to-connect-spark-to-your-own-datasource" target="_blank" rel="noopener noreffer">https://databricks.com/session/how-to-connect-spark-to-your-own-datasource</a></li>
</ul>
<blockquote>
<p>feature image credit: <a href="https://unsplash.com/photos/KABfjuSOx74" target="_blank" rel="noopener noreffer">Sander</a></p>
</blockquote>]]></description>
</item></channel>
</rss>
