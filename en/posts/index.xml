<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - siwei.io</title>
        <link>https://siwei.io/en/posts/</link>
        <description>All Posts | siwei.io</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>weyl.gu@gmail.com (Wey Gu)</managingEditor>
            <webMaster>weyl.gu@gmail.com (Wey Gu)</webMaster><lastBuildDate>Tue, 19 Apr 2022 17:19:11 &#43;0800</lastBuildDate><atom:link href="https://siwei.io/en/posts/" rel="self" type="application/rss+xml" /><item>
    <title>Explore Chia Network in a Visualized Way</title>
    <link>https://siwei.io/en/nebula-chia/</link>
    <pubDate>Wed, 26 May 2021 21:17:04 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/en/nebula-chia/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>本文分析了 Chia Network 的全链数据，并做了将全链数据导入图数据库：Nebula Graph 之中的尝试，从而可视化地探索了 Chia 图中数据之间的关联关系。</p>
<p>我把涉及的代码开源在了这里：https://github.com/wey-gu/nebula-chia</p>
</blockquote>
<h2 id="what-is-chia-network" class="headerLink">
    <a href="#what-is-chia-network" class="header-mark"></a>1 What is Chia Network?</h2><p>Chia Network 是由 BitTorrent 的作者 Bram Cohen 的团队在 2017 年创建的区块链项目。</p>
<h3 id="why-yet-another-blockchain-为什么再搞一个区块链" class="headerLink">
    <a href="#why-yet-another-blockchain-%e4%b8%ba%e4%bb%80%e4%b9%88%e5%86%8d%e6%90%9e%e4%b8%80%e4%b8%aa%e5%8c%ba%e5%9d%97%e9%93%be" class="header-mark"></a>1.1 Why yet another Blockchain? 为什么再搞一个区块链?</h3><p>Chia 用了全新的中本聪共识算法，这个算法通过不允许并行计算，让挖矿（Proof of Work）所需算力和能耗降到非常低，这使得超大组织、玩家没法像在其他的区块链项目那样有算力的绝对优势，也一定程度上规避了能源的浪费。</p>
<h3 id="how-can-i-access-chia-network-如何连接chia" class="headerLink">
    <a href="#how-can-i-access-chia-network-%e5%a6%82%e4%bd%95%e8%bf%9e%e6%8e%a5chia" class="header-mark"></a>1.2 How Can I access Chia Network? 如何连接Chia?</h3><p>我们可以通过 Chia Network 的客户端来访问它，这个客户端是 Electron + Python 的程序，天然跨平台，既有 GUI 又有 CLI 的方式。</p>
<h4 id="安装" class="headerLink">
    <a href="#%e5%ae%89%e8%a3%85" class="header-mark"></a>1.2.1 安装</h4><p>只需要按照官方的 Guide 来下载安装就好， <a href="https://github.com/Chia-Network/chia-blockchain/wiki/INSTALL" target="_blank" rel="noopener noreffer">https://github.com/Chia-Network/chia-blockchain/wiki/INSTALL</a>，我在 M1 Mac 下安装的时候脚本出了点小问题，大概是因为拉取二进制 wheel 文件网络出问题走到了编译 wheel的逻辑，而那里是依赖 <code>cargo</code>的，如果大家遇到了这个问题，可以提前手动安装一下 rust，或者 cherry-pick 我的这个 <a href="https://github.com/Chia-Network/chia-blockchain/pull/3789" target="_blank" rel="noopener noreffer">PR</a> 。</p>
<h4 id="运行" class="headerLink">
    <a href="#%e8%bf%90%e8%a1%8c" class="header-mark"></a>1.2.2 运行</h4><ul>
<li>按照官方 guide，比如 macOS 来说，最后一步执行<code>npm run electron &amp;</code> 就是运行它的GUI客户端。</li>
<li>如果大家像我一样喜欢 CLI，直接在执行完 <code>. ./activate</code> 之后就可以 <code>chia --help</code>了哈☺，里边有只启动部分服务的方式（相比 GUI 启动所有来说)。</li>
</ul>
<p>在运行之后，如果你的网络不是多层 NAT 的那种，理论上您可以连到 <code>mainnet</code> 并且自动和主链同步数据了，如果您是第二次运行，连接主链，一开始可能有一阵子同步的<code>block</code> 数是不变的，也没有 <code>peer</code> 连过来，不必惊慌，等一下就好了。</p>
<blockquote>
<p>Tips:</p>
<ul>
<li>第一次连到 Chia Network 的同学们，客户端会自动生成一个钱包，及的保存那一串词，它们就是你的私钥哦。</li>
<li>万一，如果真的连不上的话，可能需要在路由上配置，<a href="https://www.homenethowto.com/ports-and-nat/upnp-automatic-port-forward/" target="_blank" rel="noopener noreffer">UPnP</a>，防火墙要允许 8444。</li>
</ul>
</blockquote>
<h4 id="访问-chia-的数据" class="headerLink">
    <a href="#%e8%ae%bf%e9%97%ae-chia-%e7%9a%84%e6%95%b0%e6%8d%ae" class="header-mark"></a>1.2.3 访问 Chia 的数据</h4><p>Chia 的客户端把数据存在了几个 SQLite 数据库里，它们的路径是我们安装客户端的用户的家目录：<code>~/.chia/mainnet</code></p>
<p>下边就是运行起来 Chia 之后生成的主要的两个数据库的二进制文件：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">~/.chia/mainnet/db 
❯ ll -h
total 4350416
-rw-r--r--  1 weyl  staff   2.0G May  6 12:06 blockchain_v1_mainnet.sqlite
-rw-r--r--  1 weyl  staff    64K May  6 11:17 blockchain_v1_mainnet.sqlite-shm
-rw-r--r--  1 weyl  staff    20M May  6 12:10 blockchain_v1_mainnet.sqlite-wal
-rw-r--r--  1 weyl  staff   1.8M May  6 11:46 peer_table_node.sqlite
-rw-r--r--  1 weyl  staff    32K May  5 17:30 peer_table_node.sqlite-shm
-rw-r--r--  1 weyl  staff   5.4M May  6 11:46 peer_table_node.sqlite-wal

~/.chia/mainnet/wallet/db
❯ ll -h 
total 3055848
-rw-r--r--  1 weyl  staff   1.4G May  7 15:32 blockchain_wallet_v1_mainnet_903996200.sqlite
-rw-r--r--  1 weyl  staff    32K May  7 15:24 blockchain_wallet_v1_mainnet_903996200.sqlite-shm
-rw-r--r--  1 weyl  staff   4.0M May  7 15:32 blockchain_wallet_v1_mainnet_903996200.sqlite-wal
-rw-r--r--  1 weyl  staff    16K May  7 15:24 wallet_peers.sqlite
</code></pre></td></tr></table>
</div>
</div><p>然后，我们可以先用 SQLite Browser，一个 SQlite 数据库（文件）的浏览器来看看它。</p>
<p>SQlite 浏览器的官网是 <a href="https://sqlitebrowser.org/" target="_blank" rel="noopener noreffer">https://sqlitebrowser.org/</a> 。在下载，安装之后，我们可以通过点击 <code>Open Database/打开数据库</code> 选择浏览上边列出来的两个 <code>.sqlite</code> 扩展名的数据库文件。</p>
<p>打开数据库之后，我们可以选择第一个标签 <code>Database Schema</code> 来看看表的结构。</p>
<p></p>
<p>我们还能像类似于 Excel 一样去看表的数据，还可以 Filter/过滤、Sort/排序任意列。</p>
<p></p>
<p>下一部分，我们来简单看看表里的数据。</p>
<blockquote>
<p>Tips:</p>
<ul>
<li>这里边，<code>~/.chia/mainnet/wallet</code> 和裸目录 <code>~/.chia/mainnet </code> 下边的 <code>db</code> 里分别都有表文件，他们的信息是有重复的，大家可以分别打开看看哦，即使是相同的表的名字，比如 <code>block_record</code> 内里的信息也略有差别，如果大家知道为什么有这样的差别，欢迎浏览告诉大家哈，可能要仔细研究一下客户端、钱包等代码才行，幸运的是，它们相对比较好阅读，是 Python 写的： <a href="https://github.com/Chia-Network/chia-blockchain" target="_blank" rel="noopener noreffer">https://github.com/Chia-Network/chia-blockchain</a> 。</li>
</ul>
</blockquote>
<h2 id="inspect-the-chia-network-分析-chia-的数据" class="headerLink">
    <a href="#inspect-the-chia-network-%e5%88%86%e6%9e%90-chia-%e7%9a%84%e6%95%b0%e6%8d%ae" class="header-mark"></a>2 Inspect the Chia Network, 分析 Chia 的数据</h2><p>如果大家仔细看了上边表结构定义的截图，就能注意到一些表的主要信息是嵌套二进制 KV Byte，所以只从 SQLite 并不能看到所有 Chia 的数据，所以我们需要（用一个编程语言来）读取表里的 Byte。</p>
<p>幸运的是，这件事儿因为 Chia 是开源的，而且是 Python 的代码，使得我们可以直接交互式的做。</p>
<p>我花了一点点时间在 Chia 客户端代码里找到了需要的封装类，借助它，可以比较方便的分析 Chia 客户端在本地的全链数据。</p>
<p>如果您不感兴趣细节，可以直接看我分析的结论。</p>
<p>结论之后，我也给大家演示一下是怎么读取它们的。</p>
<h3 id="tldr-结论" class="headerLink">
    <a href="#tldr-%e7%bb%93%e8%ae%ba" class="header-mark"></a>2.1 TL;DR, 结论</h3><p>我们可以从表中读取到区块链记录（Block Record ），Chia 币记录（Coin Record）。</p>
<p>从区块记录中，我们可以看到关键的涉及交易的信息：</p>
<ul>
<li>关联的 Coin ，关联的 Puzzle（地址），Coin 的值(Amount)</li>
</ul>
<p>从币记录中，我们可以看到关键的涉及区块的信息：</p>
<ul>
<li>生成这个 Coin 所在区块链里的索引高度（Confirmed Index）</li>
<li>如果这个记录是花费 Coin 的，花费它的索引高度（Spent Index）</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">                                                   ┌──────────────────────┐
┌────────────────────────────────────────┐         │                      │
│                                        │         │    Coin Record       │
│   Block Record                         │         │                      │
│                                        │         │     Coin Name        │
│    Height ◄────────────────────────────┼─┐       │                      │
│                                        │ │     ┌─┼───► Puzzle           │
│    Header                              │ │     │ │                      │
│                                        │ │     ├─┼───► Coin Parent      │
│    Prev Header                         │ │     │ │                      │
│                                        │ │     ├─┼───► Amount           │
│    Block Body                          │ │     │ │                      │
│      farmer_puzzle_hash                │ │     │ │     Time Stamp       │
│      fees                              │ │     │ │                      │
│      pool_puzzle_hash                  │ └─────┼─┼─┬─  Confirmed Index  │
│      prev_transaction_block_hash       │       │ │ │                    │
│      prev_transaction_block_height     │       │ │ └─  Spent Index      │
│      transactions_info  ───────────────┼───────┘ │                      │
│ ┌─── is_transaction_block              │         │     Coinbase         │
│ │    sub_epoch_summary ────────────────┼───────┐ │                      │
│ │                                      │       │ └─ ────────────────────┘
│ │  is Peak                             │       │
│ └──is Block                            │       │ ┌─────────────────────┐
│                                        │       │ │                     │
└────────────────────────────────────────┘       └─┼─► Sub Epoch Segment │
                                                   │                     │
                                                   └─────────────────────┘
</code></pre></td></tr></table>
</div>
</div><h3 id="preperation-准备" class="headerLink">
    <a href="#preperation-%e5%87%86%e5%a4%87" class="header-mark"></a>2.2 Preperation, 准备</h3><p>因为安装客户端之后，我们本地实际上已经有了相关的 Python 环境和依赖，只需要在里边跑起来就好。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># 注意，我们要 cd 到之前安装客户端时候克隆的仓库。</span>
<span class="nb">cd</span> chia-blockchain
<span class="c1"># source activate 脚本来切换到仓库安装时候创建的 Python 虚拟环境，并进到 IPython 里。</span>
<span class="nb">source</span> venv/bin/activate <span class="o">&amp;&amp;</span> pip install ipython <span class="o">&amp;&amp;</span> ipython
</code></pre></td></tr></table>
</div>
</div><p>然后试着导入客户端里边带有的 Python 的 Chia 的封装类试试看。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">In</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="kn">import</span> <span class="nn">sqlite3</span>
   <span class="o">...</span><span class="p">:</span> <span class="kn">from</span> <span class="nn">chia.consensus.block_record</span> <span class="kn">import</span> <span class="n">BlockRecord</span>
<span class="c1"># 导入成功，没有报错</span>
<span class="n">In</span> <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="err">!</span><span class="n">pwd</span>
<span class="c1"># 我的安装克隆目录</span>
<span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">weyl</span><span class="o">/</span><span class="n">chia</span><span class="o">-</span><span class="n">blockchain</span>
</code></pre></td></tr></table>
</div>
</div><p>恭喜你做好了准备，我们看看 Block Record 里都有什么。</p>
<h3 id="block-record-chain区块记录" class="headerLink">
    <a href="#block-record-chain%e5%8c%ba%e5%9d%97%e8%ae%b0%e5%bd%95" class="header-mark"></a>2.3 Block Record Chain，区块记录</h3><p>在上一步的 <code>IPython</code> 窗口下。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># 注意，这里的路径的前缀是我们自己的家目录，不同操作系统，不同的用户都会有所不同。</span>
<span class="n">chia_db_path</span> <span class="o">=</span> <span class="s2">&#34;/Users/weyl/.chia/mainnet/db/blockchain_v1_mainnet.sqlite&#34;</span>

<span class="n">cur</span> <span class="o">=</span> <span class="n">con</span><span class="o">.</span><span class="n">cursor</span><span class="p">()</span>
<span class="c1"># 这里我们取第 201645 高的区块</span>
<span class="n">rows</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">cur</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s1">&#39;SELECT * FROM block_records WHERE height = 201645&#39;</span><span class="p">))</span>
<span class="c1"># 这里 0 表示 SELECT 结果的第一行，3 表示在 BlockRecord 这个表里边，Block 的二进制 BLOB 是第四列，参考本章底部的表定义部分</span>
<span class="n">block_records_201645</span> <span class="o">=</span> <span class="n">BlockRecord</span><span class="o">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="n">rows</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">3</span><span class="p">])</span>
<span class="nb">dir</span><span class="p">(</span><span class="n">block_records_201645</span><span class="p">)</span>
<span class="c1"># 可以查看一些属性 is_transaction_block，timestamp，reward_claims_incorporated</span>
<span class="n">In</span> <span class="p">[</span><span class="mi">174</span><span class="p">]:</span> <span class="n">block_records_201645</span><span class="o">.</span><span class="n">is_transaction_block</span>
<span class="n">Out</span><span class="p">[</span><span class="mi">174</span><span class="p">]:</span> <span class="kc">True</span>

<span class="n">In</span> <span class="p">[</span><span class="mi">182</span><span class="p">]:</span> <span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>
<span class="n">In</span> <span class="p">[</span><span class="mi">183</span><span class="p">]:</span> <span class="n">datetime</span><span class="o">.</span><span class="n">fromtimestamp</span><span class="p">(</span><span class="n">block_records_201645</span><span class="o">.</span><span class="n">timestamp</span><span class="p">)</span>
<span class="n">Out</span><span class="p">[</span><span class="mi">183</span><span class="p">]:</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2021</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">29</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>

<span class="n">In</span> <span class="p">[</span><span class="mi">190</span><span class="p">]:</span> <span class="n">block_records_201645</span><span class="o">.</span><span class="n">reward_claims_incorporated</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">to_json_dict</span><span class="p">()</span>
<span class="n">Out</span><span class="p">[</span><span class="mi">190</span><span class="p">]:</span>
<span class="p">{</span><span class="s1">&#39;parent_coin_info&#39;</span><span class="p">:</span> <span class="s1">&#39;0xccd5bb71183532bff220ba46c268991a000000000000000000000000000313ab&#39;</span><span class="p">,</span>
 <span class="s1">&#39;puzzle_hash&#39;</span><span class="p">:</span> <span class="s1">&#39;0xbbb014f41d88c74b78501b36e4863d3382bfda9ae3c4d30a1b6df72b962502b6&#39;</span><span class="p">,</span>
 <span class="s1">&#39;amount&#39;</span><span class="p">:</span> <span class="mi">1750000000000</span><span class="p">}</span>

<span class="c1"># 可以快速 print 看大部分信息</span>
<span class="nb">print</span><span class="p">(</span><span class="n">block_records_201645</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p><code>block_records_201645</code> 的打印结果如下。</p>
<blockquote>
<p>这里我截断了一些数据</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span><span class="err">&#39;challenge_block_info_hash&#39;:</span> <span class="err">&#39;0x4a562f1ffa7a06fe76b1df74dbdd6bdcfbf63139a6f1fc3291c606d7c976abf6&#39;,</span>
 <span class="err">&#39;challenge_vdf_output&#39;:</span> <span class="err">{&#39;data&#39;:</span> <span class="err">&#39;0x0200a6b38d6b58d17129d71737088772561f22a44ef302fe45a70a763b878f998abfe35946df720bcb5d78e214b667bce801d597b46c867928c4b8926c342375a961f36cd63ec698bc25e5ce48c45d9a2074eded0e42d24dd1b50a59e699f671f0900100&#39;</span><span class="p">}</span><span class="err">,</span>
 <span class="err">&#39;deficit&#39;:</span> <span class="mi">16</span><span class="err">,</span>
 <span class="err">&#39;farmer_puzzle_hash&#39;:</span> <span class="err">&#39;</span><span class="mi">0</span><span class="err">x</span><span class="mi">4</span><span class="err">bc</span><span class="mi">6435</span><span class="err">b</span><span class="mi">409</span><span class="err">bcbabe</span><span class="mi">53870</span><span class="err">dae</span><span class="mi">0</span><span class="err">f</span><span class="mi">03755</span><span class="err">f</span><span class="mi">6</span><span class="err">aabb</span><span class="mi">4594</span><span class="err">c</span><span class="mi">5915</span><span class="err">ec</span><span class="mi">983</span><span class="err">acf</span><span class="mi">12</span><span class="err">a</span><span class="mi">5</span><span class="err">d</span><span class="mi">1</span><span class="err">fba&#39;,</span>
 <span class="err">&#39;fees&#39;:</span> <span class="mi">0</span><span class="err">,</span>
 <span class="err">&#39;finished_challenge_slot_hashes&#39;:</span> <span class="p">[</span><span class="err">&#39;</span><span class="mi">0</span><span class="err">x</span><span class="mi">2</span><span class="err">b</span><span class="mi">1</span><span class="err">a</span><span class="mi">7</span><span class="err">b</span><span class="mi">4859</span><span class="err">a</span><span class="mi">8</span><span class="err">d</span><span class="mi">3597</span><span class="err">b</span><span class="mf">8e6</span><span class="err">cbe</span><span class="mi">3</span><span class="err">b</span><span class="mi">27</span><span class="err">ab</span><span class="mi">97212</span><span class="err">be</span><span class="mi">8</span><span class="err">b</span><span class="mf">19e6867</span><span class="err">f</span><span class="mi">2</span><span class="err">a</span><span class="mi">4</span><span class="err">d</span><span class="mi">0</span><span class="err">eef</span><span class="mi">26</span><span class="err">c</span><span class="mi">36340</span><span class="err">f&#39;</span><span class="p">]</span><span class="err">,</span>
 <span class="err">&#39;finished_infused_challenge_slot_hashes&#39;:</span> <span class="p">[</span><span class="err">&#39;</span><span class="mi">0</span><span class="err">xd</span><span class="mi">0185</span><span class="err">a</span><span class="mi">6493</span><span class="err">b</span><span class="mi">10</span><span class="err">d</span><span class="mf">84e696</span><span class="err">c</span><span class="mi">6</span><span class="err">fc</span><span class="mi">55</span><span class="err">ec</span><span class="mf">1920e8</span><span class="err">a</span><span class="mi">96791</span><span class="err">a</span><span class="mi">604</span><span class="err">dedfe</span><span class="mi">77635</span><span class="err">da</span><span class="mi">460</span><span class="err">f</span><span class="mi">354</span><span class="err">d&#39;</span><span class="p">]</span><span class="err">,</span>
 <span class="err">&#39;finished_reward_slot_hashes&#39;:</span> <span class="p">[</span><span class="err">&#39;</span><span class="mi">0</span><span class="err">xe</span><span class="mi">2</span><span class="err">bcbf</span><span class="mi">560471131</span><span class="err">a</span><span class="mi">7</span><span class="err">fb</span><span class="mi">87</span><span class="err">ffe</span><span class="mi">3</span><span class="err">f</span><span class="mi">9</span><span class="err">ddde</span><span class="mi">03166</span><span class="err">a</span><span class="mi">9</span><span class="err">b</span><span class="mi">0092</span><span class="err">a</span><span class="mi">50</span><span class="err">f</span><span class="mi">1</span><span class="err">ed</span><span class="mi">1599715857</span><span class="err">c</span><span class="mi">365</span><span class="err">&#39;</span><span class="p">]</span><span class="err">,</span>
 <span class="err">&#39;header_hash&#39;:</span> <span class="err">&#39;</span><span class="mi">0</span><span class="err">x</span><span class="mf">2791729e1</span><span class="err">c</span><span class="mi">914</span><span class="err">f</span><span class="mi">9</span><span class="err">c</span><span class="mi">3908</span><span class="err">a</span><span class="mi">0</span><span class="err">ad</span><span class="mi">895</span><span class="err">b</span><span class="mi">5846</span><span class="err">c</span><span class="mi">86</span><span class="err">fc</span><span class="mf">4e207</span><span class="err">cc</span><span class="mf">463820123e9</span><span class="err">a</span><span class="mi">299</span><span class="err">c</span><span class="mi">39</span><span class="err">f</span><span class="mi">3</span><span class="err">&#39;,</span>
 <span class="err">&#39;height&#39;:</span> <span class="mi">201645</span><span class="err">,</span>
 <span class="err">&#39;infused_challenge_vdf_output&#39;:</span> <span class="err">None,</span>
 <span class="err">&#39;overflow&#39;:</span> <span class="err">True,</span>
 <span class="err">&#39;pool_puzzle_hash&#39;:</span> <span class="err">&#39;</span><span class="mi">0</span><span class="err">x</span><span class="mi">4</span><span class="err">bc</span><span class="mi">6435</span><span class="err">b</span><span class="mi">409</span><span class="err">bcbabe</span><span class="mi">53870</span><span class="err">dae</span><span class="mi">0</span><span class="err">f</span><span class="mi">03755</span><span class="err">f</span><span class="mi">6</span><span class="err">aabb</span><span class="mi">4594</span><span class="err">c</span><span class="mi">5915</span><span class="err">ec</span><span class="mi">983</span><span class="err">acf</span><span class="mi">12</span><span class="err">a</span><span class="mi">5</span><span class="err">d</span><span class="mi">1</span><span class="err">fba&#39;,</span>
 <span class="err">&#39;prev_hash&#39;:</span> <span class="err">&#39;</span><span class="mi">0</span><span class="err">xf</span><span class="mi">126</span><span class="err">ecf</span><span class="mi">64473</span><span class="err">beb</span><span class="mi">9</span><span class="err">ae</span><span class="mi">5</span><span class="err">b</span><span class="mi">84137788100</span><span class="err">feb</span><span class="mi">9</span><span class="err">d</span><span class="mi">731</span><span class="err">c</span><span class="mi">604877</span><span class="err">c</span><span class="mi">0744</span><span class="err">cdc</span><span class="mi">6025</span><span class="err">f</span><span class="mi">4</span><span class="err">cbeb&#39;,</span>
 <span class="err">&#39;prev_transaction_block_hash&#39;:</span> <span class="err">&#39;</span><span class="mi">0</span><span class="err">x</span><span class="mi">7103</span><span class="err">fe</span><span class="mi">2</span><span class="err">f</span><span class="mi">1</span><span class="err">aa</span><span class="mi">96998</span><span class="err">f</span><span class="mi">9</span><span class="err">ccf</span><span class="mi">6</span><span class="err">fc</span><span class="mi">98561</span><span class="err">b</span><span class="mi">64</span><span class="err">c</span><span class="mi">5</span><span class="err">f</span><span class="mi">7</span><span class="err">a</span><span class="mi">98</span><span class="err">cf</span><span class="mi">942335</span><span class="err">c</span><span class="mi">4</span><span class="err">c</span><span class="mi">927</span><span class="err">fb</span><span class="mi">2</span><span class="err">eaa</span><span class="mi">9325</span><span class="err">a&#39;,</span>
 <span class="err">&#39;prev_transaction_block_height&#39;:</span> <span class="mi">201643</span><span class="err">,</span>
 <span class="err">&#39;required_iters&#39;:</span> <span class="mi">95752</span><span class="err">,</span>
 <span class="err">&#39;reward_claims_incorporated&#39;:</span> <span class="p">[{</span><span class="err">&#39;amount&#39;:</span> <span class="err">1750000000000,</span>
                                 <span class="err">&#39;parent_coin_info&#39;:</span> <span class="err">&#39;0xccd5bb71183532bff220ba46c268991a000000000000000000000000000313ab&#39;,</span>
                                 <span class="err">&#39;puzzle_hash&#39;:</span> <span class="err">&#39;0xbbb014f41d88c74b78501b36e4863d3382bfda9ae3c4d30a1b6df72b962502b6&#39;</span><span class="p">},</span>
                                <span class="p">{</span><span class="err">&#39;amount&#39;:</span> <span class="err">250000000000,</span>
                                 <span class="err">&#39;parent_coin_info&#39;:</span> <span class="err">&#39;0x3ff07eb358e8255a65c30a2dce0e5fbb000000000000000000000000000313ab&#39;,</span>
                                 <span class="err">&#39;puzzle_hash&#39;:</span> <span class="err">&#39;0xbbb014f41d88c74b78501b36e4863d3382bfda9ae3c4d30a1b6df72b962502b6&#39;</span><span class="p">},</span>
                                <span class="p">{</span><span class="err">&#39;amount&#39;:</span> <span class="err">1750000000000,</span>
                                 <span class="err">&#39;parent_coin_info&#39;:</span> <span class="err">&#39;0xccd5bb71183532bff220ba46c268991a000000000000000000000000000313aa&#39;,</span>
                                 <span class="err">&#39;puzzle_hash&#39;:</span> <span class="err">&#39;0x4bc6435b409bcbabe53870dae0f03755f6aabb4594c5915ec983acf12a5d1fba&#39;</span><span class="p">},</span>
                                <span class="p">{</span><span class="err">&#39;amount&#39;:</span> <span class="err">250000000000,</span>
                                 <span class="err">&#39;parent_coin_info&#39;:</span> <span class="err">&#39;0x3ff07eb358e8255a65c30a2dce0e5fbb000000000000000000000000000313a8&#39;,</span>
                                 <span class="err">&#39;puzzle_hash&#39;:</span> <span class="err">&#39;0xcf178071f6aa6cb1c92f00943424bcc8cb774449bd60058fc08e9894f49a1ca4&#39;</span><span class="p">}]</span><span class="err">,</span>
 <span class="err">&#39;reward_infusion_new_challenge&#39;:</span> <span class="err">&#39;</span><span class="mi">0</span><span class="err">x</span><span class="mi">660886</span><span class="err">f</span><span class="mi">4</span><span class="err">ab</span><span class="mi">030</span><span class="err">c</span><span class="mi">07755</span><span class="err">f</span><span class="mi">53362</span><span class="err">ae</span><span class="mi">4253</span><span class="err">dfa</span><span class="mi">93</span><span class="err">ea</span><span class="mi">853</span><span class="err">cbc</span><span class="mi">321218</span><span class="err">f</span><span class="mi">58</span><span class="err">f</span><span class="mi">159</span><span class="err">c</span><span class="mi">75</span><span class="err">adaa&#39;,</span>
 <span class="err">&#39;signage_point_index&#39;:</span> <span class="mi">63</span><span class="err">,</span>
 <span class="err">&#39;sub_epoch_summary_included&#39;:</span> <span class="err">None,</span>
 <span class="err">&#39;sub_slot_iters&#39;:</span> <span class="mi">99614720</span><span class="err">,</span>
 <span class="err">&#39;timestamp&#39;:</span> <span class="mi">1619662081</span><span class="err">,</span>
 <span class="err">&#39;total_iters&#39;:</span> <span class="mi">660123219464</span><span class="err">,</span>
 <span class="err">&#39;weight&#39;:</span> <span class="mi">4121254</span><span class="err">}</span>
</code></pre></td></tr></table>
</div>
</div><p>另外，我们取的这个表的定义如下。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="nf">block_records</span><span class="p">(</span><span class="w">
</span><span class="w">  </span><span class="n">header_hash</span><span class="w"> </span><span class="kt">text</span><span class="w"> </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="p">,</span><span class="w"> 
</span><span class="w">  </span><span class="n">prev_hash</span><span class="w"> </span><span class="kt">text</span><span class="p">,</span><span class="w"> 
</span><span class="w">  </span><span class="n">height</span><span class="w"> </span><span class="kt">bigint</span><span class="p">,</span><span class="w">
</span><span class="w">  </span><span class="n">block</span><span class="w"> </span><span class="kt">blob</span><span class="p">,</span><span class="w"> </span><span class="c1">#&lt;----
</span><span class="c1"></span><span class="w">  </span><span class="n">sub_epoch_summary</span><span class="w"> </span><span class="kt">blob</span><span class="p">,</span><span class="w"> 
</span><span class="w">  </span><span class="n">is_peak</span><span class="w"> </span><span class="kt">tinyint</span><span class="p">,</span><span class="w"> 
</span><span class="w">  </span><span class="n">is_block</span><span class="w"> </span><span class="kt">tinyint</span><span class="p">)</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><h3 id="coin-record-chainchia-币记录" class="headerLink">
    <a href="#coin-record-chainchia-%e5%b8%81%e8%ae%b0%e5%bd%95" class="header-mark"></a>2.4 Coin Record Chain，Chia 币记录</h3><p>类似的，我们可以获取一个 Coin 的记录，这里边，从表的定义可以看到，唯一二进制（不能直接从数据库查询中被人读懂）的字段就是是币值，不存在嵌套的结构，所以也并不需要封装的类才能看清楚里边的信息。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="nf">coin_record</span><span class="p">(</span><span class="w">
</span><span class="w">  </span><span class="n">coin_name</span><span class="w"> </span><span class="kt">text</span><span class="w"> </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="p">,</span><span class="w">
</span><span class="w">  </span><span class="n">confirmed_index</span><span class="w"> </span><span class="kt">bigint</span><span class="p">,</span><span class="w">
</span><span class="w">  </span><span class="n">spent_index</span><span class="w"> </span><span class="kt">bigint</span><span class="p">,</span><span class="w">
</span><span class="w">  </span><span class="n">spent</span><span class="w"> </span><span class="kt">int</span><span class="p">,</span><span class="w">
</span><span class="w">  </span><span class="n">coinbase</span><span class="w"> </span><span class="kt">int</span><span class="p">,</span><span class="w">
</span><span class="w">  </span><span class="n">puzzle_hash</span><span class="w"> </span><span class="kt">text</span><span class="p">,</span><span class="w">
</span><span class="w">  </span><span class="n">coin_parent</span><span class="w"> </span><span class="kt">text</span><span class="p">,</span><span class="w">
</span><span class="w">  </span><span class="n">amount</span><span class="w"> </span><span class="kt">blob</span><span class="p">,</span><span class="w">
</span><span class="w">  </span><span class="kt">timestamp</span><span class="w"> </span><span class="kt">bigint</span><span class="p">)</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>这里值得注意的信息主要是 <code>spent_index</code> 和 <code>confirmed_index</code>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">chia.util.ints</span> <span class="kn">import</span> <span class="n">uint64</span>

<span class="n">chia_db_path</span> <span class="o">=</span> <span class="s2">&#34;/Users/weyl/.chia/mainnet/db/blockchain_v1_mainnet.sqlite&#34;</span>
<span class="n">con</span> <span class="o">=</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">chia_db_path</span><span class="p">)</span>
<span class="n">cur</span> <span class="o">=</span> <span class="n">con</span><span class="o">.</span><span class="n">cursor</span><span class="p">()</span>
<span class="n">rows</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">cur</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s1">&#39;SELECT * FROM coin_record WHERE confirmed_index = 201645&#39;</span><span class="p">))</span>
<span class="n">coin_amount</span> <span class="o">=</span> <span class="n">uint64</span><span class="o">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="n">rows</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">7</span><span class="p">])</span>

<span class="n">In</span> <span class="p">[</span><span class="mi">201</span><span class="p">]:</span> <span class="n">rows</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="n">Out</span><span class="p">[</span><span class="mi">201</span><span class="p">]:</span>
<span class="p">(</span><span class="s1">&#39;cf35da0f595b49dde626d676b511ee62bce886f2216751aa51bb8ff851563d35&#39;</span><span class="p">,</span> <span class="c1"># coin_name</span>
 <span class="mi">201645</span><span class="p">,</span> <span class="c1"># confirmed_index</span>
 <span class="mi">0</span><span class="p">,</span> <span class="c1"># spent_index，这里没有spent，所以值无效</span>
 <span class="mi">0</span><span class="p">,</span> <span class="c1"># spent，其实是 bool</span>
 <span class="mi">1</span><span class="p">,</span> <span class="c1"># coinbase，bool</span>
 <span class="s1">&#39;bbb014f41d88c74b78501b36e4863d3382bfda9ae3c4d30a1b6df72b962502b6&#39;</span><span class="p">,</span> <span class="c1"># puzzle_hash 对应到地址</span>
 <span class="s1">&#39;ccd5bb71183532bff220ba46c268991a000000000000000000000000000313ab&#39;</span><span class="p">,</span>
 <span class="sa">b</span><span class="s1">&#39;</span><span class="se">\x00\x00\x01\x97</span><span class="s1">t </span><span class="se">\xdc\x00</span><span class="s1">&#39;</span><span class="p">,</span> <span class="c1"># uint64</span>
 <span class="mi">1619662081</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="puzzles-address地址" class="headerLink">
    <a href="#puzzles-address%e5%9c%b0%e5%9d%80" class="header-mark"></a>2.5 Puzzles/ Address，地址</h3><p>我们可以把 Chia 中的 Puzzle 理解成为交易中的地址，为了方便使用，通常会把 Puzzle 的 hash 用<a href="https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki" target="_blank" rel="noopener noreffer">bech32m</a> 转换成地址。</p>
<blockquote>
<p>Tips:</p>
<p>这里有一个在线双向转换的在线工具推荐一下: <a href="https://www.chiaexplorer.com/tools/address-puzzlehash-converter" target="_blank" rel="noopener noreffer">https://www.chiaexplorer.com/tools/address-puzzlehash-converter</a></p>
</blockquote>
<h2 id="how-to-explore-chia-network-如何探索-chia-链" class="headerLink">
    <a href="#how-to-explore-chia-network-%e5%a6%82%e4%bd%95%e6%8e%a2%e7%b4%a2-chia-%e9%93%be" class="header-mark"></a>3 How to explore Chia Network? 如何探索 Chia 链</h2><p>随着我们之前分析的信息，自然地，我们可以把 Chia 区块链中的信息取出来，用图（Graph）来表示，这里的图并不是（Graphic）图形、图画的意思，是数学、图论中的图。</p>
<p>在图的语境下，最主要的两个元素就是顶点（Vertex）和边（Edge）。</p>
<p>顶点表示一个实体，而边表示实体之间的某种关系，这种关系可以是对等的（无方向的）也可以是有方向的。</p>
<p>这里我们可以把这里的信息抽象映射到如图的图模型里：</p>
<ul>
<li>Block 顶点</li>
<li>Coin 顶点</li>
<li>Puzzle 顶点</li>
<li>spends 边（Block 到 Coin）</li>
<li>confirms 边 （Block 到 Coin）</li>
<li>belongs_to 边（Coin 到 Puzzle）</li>
</ul>
<p></p>
<p>这里，我们应用的图是一种叫做属性图的形式，除了点和边的关系之外。这两种实体（点、边）还有其他信息只和它们的一个实例相关，所以再定义为顶点、边就不是很适合，这些信息就作为点、边的属性（preperty）存在。</p>
<p>这种为了处理实体之间关联、涉及实体、关联的属性信息的，也就是&quot;属性图&quot;的存储信息的方式在计算机领域越来越流行，甚至有专门为此结构而原生开发的数据库——图数据库（Graph Database）。</p>
<p>这里，我们用的就是一个叫做 Nebula Graph 的图数据库，它是一个现代的、为超大规模分部署架构设计的、原生存储、查询、计算图数据的项目，更棒的是，它是产生于社区的开源产品。</p>
<blockquote>
<p>Tips:</p>
<p><strong>安装 Nebula Graph</strong></p>
<p>一般来说，面向超大规模数据的分布式系统，天然的都是不容易轻量部署的，大家如果第一次使用的话可以试试我写的一个叫做 nebula-up 的小工具，可以一行指令部署一个用来试用、学习的 Nebula Graph 集群，地址在这里： <a href="https://github.com/wey-gu/nebula-up/" target="_blank" rel="noopener noreffer">https://github.com/wey-gu/nebula-up/</a> 。</p>
</blockquote>
<h3 id="import-the-chia-to-a-graph-database-nebula-graph-导入-chia-数据到图数据库" class="headerLink">
    <a href="#import-the-chia-to-a-graph-database-nebula-graph-%e5%af%bc%e5%85%a5-chia-%e6%95%b0%e6%8d%ae%e5%88%b0%e5%9b%be%e6%95%b0%e6%8d%ae%e5%ba%93" class="header-mark"></a>3.1 Import the Chia to a Graph Database, Nebula Graph 导入 Chia 数据到图数据库</h3><p>我们分两步走，第一步这把 Chia Network 数据转换成 CSV 文件，第二步使用 Nebula 的 <a href="https://github.com/vesoft-inc/nebula-importer/" target="_blank" rel="noopener noreffer">Nebula-Importer</a> 把数据导入 Nebula Graph。</p>
<h4 id="data-conversion-数据转换" class="headerLink">
    <a href="#data-conversion-%e6%95%b0%e6%8d%ae%e8%bd%ac%e6%8d%a2" class="header-mark"></a>3.1.1 Data conversion 数据转换</h4><p>这部分的代码我开源在这里了:</p>
<p><a href="https://github.com/wey-gu/nebula-chia" target="_blank" rel="noopener noreffer">https://github.com/wey-gu/nebula-chia</a></p>
<p>使用它只需要在 Chia Network 的 python venv 下安装它:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">python3 -m pip install nebula-chia
</code></pre></td></tr></table>
</div>
</div><p>然后调用 <code>ChaiBatchConvertor</code> 就可以在当前目录下生成两个 CSV 文件。</p>
<p>这里边有一些可以配置的参数，具体可以参考代码 <code>nebulachia/convertor.py</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">nebulachia.convertor</span> <span class="kn">import</span> <span class="n">ChiaBatchConvertor</span>
<span class="n">c</span> <span class="o">=</span> <span class="n">ChaiBatchConvertor</span><span class="p">(</span>
    <span class="n">block_record_limit</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">coin_record_limit</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">write_batch_size</span><span class="o">=</span><span class="mi">10000</span><span class="p">)</span>
<span class="n">c</span><span class="o">.</span><span class="n">convert_block_record</span><span class="p">()</span>
<span class="n">c</span><span class="o">.</span><span class="n">convert_coin_record</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p>生成的文件：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ ls -lth

-rw-r--r--   <span class="m">1</span> weyl  staff   173M May <span class="m">19</span> 13:01 coin_record.csv
-rw-r--r--   <span class="m">1</span> weyl  staff    77M May <span class="m">19</span> 12:59 block_record.csv
</code></pre></td></tr></table>
</div>
</div><p>这里边字段的含义和类型，可以参考代码中 <code>block_record_row</code> 和 <code>coin_record_row</code> 的 <code>__doc__</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">In</span> <span class="p">[</span><span class="mi">466</span><span class="p">]:</span> <span class="nb">print</span><span class="p">(</span><span class="n">c</span><span class="o">.</span><span class="n">coin_record_row</span><span class="o">.</span><span class="vm">__doc__</span><span class="p">)</span>

        <span class="n">Parse</span> <span class="n">row</span> <span class="ow">and</span> <span class="k">return</span> <span class="n">a</span> <span class="n">CSV</span> <span class="n">block</span> <span class="n">coin</span> <span class="n">row</span> <span class="nb">list</span><span class="o">.</span>

        <span class="n">CREATE</span> <span class="n">TABLE</span> <span class="n">coin_record</span><span class="p">(</span>
          <span class="n">coin_name</span> <span class="n">text</span> <span class="n">PRIMARY</span> <span class="n">KEY</span><span class="p">,</span>
          <span class="n">confirmed_index</span> <span class="n">bigint</span><span class="p">,</span>
          <span class="n">spent_index</span> <span class="n">bigint</span><span class="p">,</span>
          <span class="n">spent</span> <span class="nb">int</span><span class="p">,</span>
          <span class="n">coinbase</span> <span class="nb">int</span><span class="p">,</span>
          <span class="n">puzzle_hash</span> <span class="n">text</span><span class="p">,</span>
          <span class="n">coin_parent</span> <span class="n">text</span><span class="p">,</span>
          <span class="n">amount</span> <span class="n">blob</span><span class="p">,</span>
          <span class="n">timestamp</span> <span class="n">bigint</span><span class="p">)</span>

        <span class="n">Coin</span> <span class="n">Record</span> <span class="n">CSV</span> <span class="n">Head</span><span class="p">:</span>
            <span class="mi">0</span>         <span class="mi">1</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>          <span class="mi">2</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>      <span class="mi">3</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>
            <span class="n">coin_name</span><span class="o">|</span><span class="n">confirmed_index</span><span class="o">|</span><span class="n">spent_index</span><span class="o">|</span><span class="n">spent</span><span class="o">|</span>

            <span class="mi">4</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>  <span class="mi">5</span>           <span class="mi">6</span>           <span class="mi">7</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
            <span class="n">coinbase</span><span class="o">|</span><span class="n">puzzle_hash</span><span class="o">|</span><span class="n">coin_parent</span><span class="o">|</span><span class="n">amount</span><span class="o">|</span>

            <span class="mi">8</span><span class="p">(</span><span class="n">timestamp</span><span class="p">)</span>
            <span class="n">timestamp</span><span class="o">|</span>

            <span class="mi">9</span>              <span class="mi">10</span>
            <span class="n">confirmed_hash</span><span class="o">|</span><span class="n">spent_hash</span>

<span class="n">In</span> <span class="p">[</span><span class="mi">467</span><span class="p">]:</span> <span class="nb">print</span><span class="p">(</span><span class="n">c</span><span class="o">.</span><span class="n">block_record_row</span><span class="o">.</span><span class="vm">__doc__</span><span class="p">)</span>

        <span class="n">Parse</span> <span class="n">row</span> <span class="ow">and</span> <span class="k">return</span> <span class="n">a</span> <span class="n">CSV</span> <span class="n">block</span> <span class="n">record</span> <span class="n">row</span> <span class="nb">list</span><span class="o">.</span>

        <span class="n">CREATE</span> <span class="n">TABLE</span> <span class="n">block_records</span><span class="p">(</span>
          <span class="n">header_hash</span> <span class="n">text</span> <span class="n">PRIMARY</span> <span class="n">KEY</span><span class="p">,</span>
          <span class="n">prev_hash</span> <span class="n">text</span><span class="p">,</span>
          <span class="n">height</span> <span class="n">bigint</span><span class="p">,</span>
          <span class="n">block</span> <span class="n">blob</span><span class="p">,</span>
          <span class="n">sub_epoch_summary</span> <span class="n">blob</span><span class="p">,</span>
          <span class="n">is_peak</span> <span class="n">tinyint</span><span class="p">,</span>
          <span class="n">is_block</span> <span class="n">tinyint</span><span class="p">)</span>

        <span class="n">Block</span> <span class="n">Record</span> <span class="n">CSV</span> <span class="n">Head</span><span class="p">:</span>
            <span class="mi">0</span>           <span class="mi">1</span>         <span class="mi">2</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span> <span class="mi">3</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span> <span class="mi">4</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>
            <span class="n">header_hash</span><span class="o">|</span><span class="n">prev_hash</span><span class="o">|</span><span class="n">height</span><span class="o">|</span><span class="n">is_peak</span><span class="o">|</span><span class="n">is_block</span><span class="o">|</span>

            <span class="mi">5</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
            <span class="n">deficit</span><span class="o">|</span>

            <span class="mi">6</span>
            <span class="n">challenge_block_info_hash</span><span class="o">|</span>

            <span class="mi">7</span>
            <span class="n">farmer_puzzle_hash</span><span class="o">|</span>

            <span class="mi">8</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
            <span class="n">fees</span><span class="o">|</span>

            <span class="mi">9</span>
            <span class="n">prev_transaction_block_hash</span><span class="o">|</span>

            <span class="mi">10</span>
            <span class="n">prev_transaction_block_height</span><span class="o">|</span>

            <span class="mi">11</span>             <span class="mi">12</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
            <span class="n">required_iters</span><span class="o">|</span><span class="n">signage_point_index</span><span class="o">|</span>

            <span class="mi">13</span><span class="p">(</span><span class="n">timestamp</span><span class="p">)</span>
            <span class="n">timestamp</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="data-import-数据导入" class="headerLink">
    <a href="#data-import-%e6%95%b0%e6%8d%ae%e5%af%bc%e5%85%a5" class="header-mark"></a>3.1.2 Data import 数据导入</h4><p>有了 CSV 文件，我们可以借助 <a href="https://github.com/vesoft-inc/nebula-importer/" target="_blank" rel="noopener noreffer">Nebula-Importer</a> 导入数据到图数据库中。</p>
<p>这里，我们写好了 nebula-importer 的配置文件，其中包涵了如下信息:</p>
<ul>
<li>在 Nebula Graph 中创建需要的数据模型 Schema，这和我们前边做的图映射的信息是等价的</li>
<li>描述 CSV 文件之中的 Column 的数据到图模型（点，边，点或边的属性）映射关系</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># 这里，我的 csv 文件和 配置文件都放在 /home/wei.gu/chia 之下</span>
<span class="c1"># 我使用 docker-compose 默认配置部署的 Nebula Graph,</span>
<span class="c1"># 它创建了叫 nebula-docker-compose_nebula-net 的 docker 网络</span>
docker run --rm -ti <span class="se">\
</span><span class="se"></span>    --network<span class="o">=</span>nebula-docker-compose_nebula-net <span class="se">\
</span><span class="se"></span>    -v /home/wei.gu/chia/nebula-chia.yaml:/root/nebula-chia.yaml <span class="se">\
</span><span class="se"></span>    -v /home/wei.gu/chia:/root <span class="se">\
</span><span class="se"></span>    vesoft/nebula-importer:v2 <span class="se">\
</span><span class="se"></span>    --config /root/nebula-chia.yaml
</code></pre></td></tr></table>
</div>
</div><p>这里我展示一个导入的结果示例，我在单机部署的 Nebula Graph 里导入了我一两周之前取的全量 Chia Network 数据的结果。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">...
2021/05/19 09:55:09 <span class="o">[</span>INFO<span class="o">]</span> reader.go:180: Total lines of file<span class="o">(</span>/root/coin_record.csv<span class="o">)</span> is: 547557, error lines: <span class="m">0</span>
2021/05/19 09:55:09 <span class="o">[</span>INFO<span class="o">]</span> statsmgr.go:61: Done<span class="o">(</span>/root/coin_record.csv<span class="o">)</span>: Time<span class="o">(</span>4385.88s<span class="o">)</span>, Finished<span class="o">(</span>4512927<span class="o">)</span>, Failed<span class="o">(</span>0<span class="o">)</span>, Latency AVG<span class="o">(</span>1305us<span class="o">)</span>, Batches Req AVG<span class="o">(</span>2015us<span class="o">)</span>, Rows AVG<span class="o">(</span>1028.42/s<span class="o">)</span>
2021/05/19 09:55:10 --- END OF NEBULA IMPORTER ---
</code></pre></td></tr></table>
</div>
</div><h3 id="explore-the-chia-graph-探索-chia-的数据" class="headerLink">
    <a href="#explore-the-chia-graph-%e6%8e%a2%e7%b4%a2-chia-%e7%9a%84%e6%95%b0%e6%8d%ae" class="header-mark"></a>3.2 Explore the Chia Graph 探索 Chia 的数据</h3><h4 id="graph-db-queries" class="headerLink">
    <a href="#graph-db-queries" class="header-mark"></a>3.2.1 Graph DB Queries</h4><p>导入 Chia 链的网络到 Nebula Graph 之后，我们可以在里边快速查询数据之间的关联。</p>
<p>比如这个查询表示从区块 <code>524aa2013781ff4cd9d2b5dc...</code> 查起，经过三种边 <code>farmer_puzzle, spends, confirms</code> 双向遍历的结果。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="k">GO</span><span class="w"> </span><span class="mi">5</span><span class="w"> </span><span class="n">STEPS</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="err">\</span><span class="w">
</span><span class="w">   </span><span class="s2">&#34;524aa2013781ff4cd9d2b5dce40647b670d722e2de25bd2e2b79970a8ec435ee&#34;</span><span class="w"> </span><span class="err">\</span><span class="w">
</span><span class="w">   </span><span class="n">OVER</span><span class="w"> </span><span class="n">farmer_puzzle</span><span class="p">,</span><span class="n">spends</span><span class="p">,</span><span class="n">confirms</span><span class="w"> </span><span class="n">BIDIRECT</span><span class="w">
</span><span class="w"></span><span class="p">...</span><span class="w">
</span><span class="w"></span><span class="n">Got</span><span class="w"> </span><span class="mi">419437</span><span class="w"> </span><span class="k">rows</span><span class="w"> </span><span class="p">(</span><span class="n">time</span><span class="w"> </span><span class="n">spent</span><span class="w"> </span><span class="mi">735120</span><span class="o">/</span><span class="mi">1170946</span><span class="w"> </span><span class="n">us</span><span class="p">)</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="n">Wed</span><span class="p">,</span><span class="w"> </span><span class="mi">19</span><span class="w"> </span><span class="n">May</span><span class="w"> </span><span class="mi">2021</span><span class="w"> </span><span class="mi">10</span><span class="p">:</span><span class="mi">11</span><span class="p">:</span><span class="mi">28</span><span class="w"> </span><span class="n">UTC</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>再比如，计算一个 Puzzle 地址上的余额（所有 coin 的总价值）比如这个puzzle <code>bbe39134ccc32c08fdeff...</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="k">GO</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="n">STEP</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="s2">&#34;bbe39134ccc32c08fdeff4d2c19d1d1f4f7e48cdaf79d37397bc3136ce9b3cb7&#34;</span><span class="w"> </span><span class="err">\</span><span class="w">
</span><span class="w">   </span><span class="n">OVER</span><span class="w"> </span><span class="n">belongs_to</span><span class="w"> </span><span class="n">REVERSELY</span><span class="w"> </span><span class="err">\</span><span class="w">
</span><span class="w">   </span><span class="n">YIELD</span><span class="w"> </span><span class="k">CASE</span><span class="w"> </span><span class="err">$$</span><span class="p">.</span><span class="n">coin</span><span class="p">.</span><span class="n">is_spent</span><span class="w"> </span><span class="err">\</span><span class="w">
</span><span class="w">         </span><span class="k">WHEN</span><span class="w"> </span><span class="k">true</span><span class="w"> </span><span class="k">THEN</span><span class="w"> </span><span class="err">$$</span><span class="p">.</span><span class="n">coin</span><span class="p">.</span><span class="n">amount</span><span class="w"> </span><span class="err">\</span><span class="w">
</span><span class="w">         </span><span class="k">WHEN</span><span class="w"> </span><span class="k">false</span><span class="w"> </span><span class="k">THEN</span><span class="w"> </span><span class="o">-</span><span class="err">$$</span><span class="p">.</span><span class="n">coin</span><span class="p">.</span><span class="n">amount</span><span class="w"> </span><span class="err">\</span><span class="w">
</span><span class="w">         </span><span class="k">END</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">Amount</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">YIELD</span><span class="w"> </span><span class="k">sum</span><span class="p">(</span><span class="err">$</span><span class="o">-</span><span class="p">.</span><span class="n">Amount</span><span class="p">)</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><h4 id="the-visulized-way-with-nebula-studio" class="headerLink">
    <a href="#the-visulized-way-with-nebula-studio" class="header-mark"></a>3.2.2 The Visulized way with Nebula Studio</h4><p>Nebula Graph 为我们提供了图形化界面，有了它，我们可以用更符合人脑的方式地查看 Chia Network 中的数据。</p>
<p>比如，我们还是回到上边的那个区块，从这里查询。</p>
<p></p>
<p>我们就获得了这个 block 类型的一个点/ vertex。我们可以从他开始进一步探索，先鼠标单击这个点，在拓展条件里把方向选择双向，默认的边类型是所有的边类型，这样我们就可以把所有 <code>步数</code>内相关联的数据一下子全都找出来。</p>
<p>选择好拓展条件之后，点击拓展就可以。</p>
<p></p>
<p>这里，我们选择了步数为 <code>1</code>，点击拓展（或者双击要拓展的点），之后，我们可以快速双击其他的点继续拓展，这是我鼠标点了几次之后看到的样子：</p>
<p></p>
<p>我们接下来再试试拓展的步数为 <code>2</code>，点击拓展（或者双击要拓展的点），看起来找到了有意思的信息。</p>
<p>我们看到了一个有很多边的黑色的点。</p>
<p></p>
<p>通过查看这个点和我们开始查看的 block 之间的边，我们知道这个点正是 farm 这个 block 的地址，这个地址下边有非常多的 coin。</p>
<p></p>
<p>这只是一个开始，有了这个导入到 Nebula Graph 图数据的基础，我们可以做很多有意思的分析和洞察，大家可以自己试试看，得到更有意思的结果分享给其他同学。</p>
<h2 id="summary-总结" class="headerLink">
    <a href="#summary-%e6%80%bb%e7%bb%93" class="header-mark"></a>4 Summary 总结</h2><p>这篇文章里，在我们简单介绍了 Chia Network 之后，我们首次的带大家一起从安装一个 Chia 终端，到分析终端同步到本地的 Chia 全网数据，借助于 Chia 终端开源的 Python 代码库，我们分析了全网数据里的重要信息。</p>
<p>之后，我们开源了一个小工具 Nebula-Chia，有了它，就可以把 Chia 的全网数据转换成 CSV 格式，这样，就可以借助 nebula-importer 把所有的数据导入到一个先进的图数据库（Nebula Graph）中。</p>
<p>Nebula Graph 的项目地址是 <a href="https://github.com/vesoft-inc/nebula-graph" target="_blank" rel="noopener noreffer">https://github.com/vesoft-inc/nebula-graph</a></p>
<p>Nebula-Chia 我也开源在 <a href="https://github.com/wey-gu/nebula-chia" target="_blank" rel="noopener noreffer">https://github.com/wey-gu/nebula-chia</a></p>
<p>在图数据库中，我们展示了做基本 Query 的例子和借助图数据库自带的可视化工具，我们可以轻易地获取 Chia 全网数据之间关联关系，有了这个作为基础，这些数据中洞察的潜力和可以尝试的有意思事情可以比较直观和高效地进一步探索了！</p>
<p>是不是很酷？</p>
<p></p>
<h2 id="references" class="headerLink">
    <a href="#references" class="header-mark"></a>5 References</h2><ul>
<li><a href="https://www.chia.net/faq/" target="_blank" rel="noopener noreffer">https://www.chia.net/faq/</a></li>
<li><a href="https://chialisp.com/docs/" target="_blank" rel="noopener noreffer">https://chialisp.com/docs/</a></li>
<li><a href="https://www.chiaexplorer.com/chia-coins" target="_blank" rel="noopener noreffer">https://www.chiaexplorer.com/chia-coins</a></li>
<li><a href="https://docs.google.com/document/d/1tmRIb7lgi4QfKkNaxuKOBHRmwbVlGL4f7EsBDr_5xZE" target="_blank" rel="noopener noreffer">https://docs.google.com/document/d/1tmRIb7lgi4QfKkNaxuKOBHRmwbVlGL4f7EsBDr_5xZE</a></li>
<li><a href="https://github.com/sipa/bech32/tree/master/ref/python" target="_blank" rel="noopener noreffer">https://github.com/sipa/bech32/tree/master/ref/python</a></li>
<li><a href="https://github.com/Chia-Network/chia-blockchain/blob/main/README.md" target="_blank" rel="noopener noreffer">https://github.com/Chia-Network/chia-blockchain/blob/main/README.md</a></li>
<li><a href="https://www.chia.net/assets/ChiaGreenPaper.pdf" target="_blank" rel="noopener noreffer">https://www.chia.net/assets/ChiaGreenPaper.pdf</a></li>
<li><a href="https://docs.nebula-graph.com.cn" target="_blank" rel="noopener noreffer">https://docs.nebula-graph.com.cn</a></li>
</ul>
<blockquote>
<p>Banner Picture Credit: <a href="https://unsplash.com/photos/Ph5_4TnXXYE?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditShareLink" target="_blank" rel="noopener noreffer">Icons8 Team</a></p>
</blockquote>]]></description>
</item><item>
    <title>Nebula Exchange SST 2.x Hands-on Guide</title>
    <link>https://siwei.io/en/nebula-exchange-sst-2.x/</link>
    <pubDate>Wed, 18 Aug 2021 15:21:00 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/en/nebula-exchange-sst-2.x/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featured-image.webp" referrerpolicy="no-referrer">
            </div><p>这篇文章带大家以最小方式，快速趟一下 Nebula Exchange 中 SST 写入方式的步骤。</p>
<h2 id="什么是-nebula-exchange-" class="headerLink">
    <a href="#%e4%bb%80%e4%b9%88%e6%98%af-nebula-exchange-" class="header-mark"></a>1 什么是 Nebula Exchange ?</h2><p>之前我在 <a href="https://siwei.io/sketches/nebula-data-import-options/" target="_blank" rel="noopener noreffer">Nebula Data Import Options</a> 之中介绍过，<a href="https://github.com/vesoft-inc/nebula-spark-utils/tree/master/nebula-exchange" target="_blank" rel="noopener noreffer">Nebula Exchange</a> 是一个 Nebula Graph 社区开源的 Spark Applicaiton，它专门用来支持批量或者流式地把数据导入 Nebula Graph Database 之中。</p>
<p>Nebula Exchange 支持多种多样的数据源（从 Apache Parquet, ORC, JSON, CSV, HBase, Hive MaxCompute 到 Neo4j, MySQL, ClickHouse, 再有 Kafka, Pulsar，更多的数据源也在不断增加之中）。</p>
<p></p>
<p>如上图所示，在 Exchange 内部，从除了不同 Reader 可以读取不同数据源之外，在数据经过 Processor 处理之后通过 Writer写入（sink） Nebula Graph 图数据库的时候，除了走正常的 ServerBaseWriter 的写入流程之外，它还可以绕过整个写入流程，利用 Spark 的计算能力并行生成底层 RocksDB 的 SST 文件，从而实现超高性能的数据导入，这个 SST 文件导入的场景就是本文带大家上手熟悉的部分。</p>
<blockquote>
<p>详细信息请参阅：<a href="https://docs.nebula-graph.com.cn/master/nebula-exchange/about-exchange/ex-ug-what-is-exchange/" target="_blank" rel="noopener noreffer">Nebula Graph 手册:什么是 Nebula Exchange</a></p>
<p><a href="https://nebula-graph.com.cn/posts/" target="_blank" rel="noopener noreffer">Nebula Graph 官方博客</a>也有更多 Nebula Exchange 的实践文章</p>
</blockquote>
<h2 id="步骤概观" class="headerLink">
    <a href="#%e6%ad%a5%e9%aa%a4%e6%a6%82%e8%a7%82" class="header-mark"></a>2 步骤概观</h2><ul>
<li><a href="#%e5%ae%9e%e9%aa%8c%e7%8e%af%e5%a2%83%e5%87%86%e5%a4%87" rel="">实验环境</a></li>
<li><a href="#%e9%85%8d%e7%bd%aeExchange" rel="">配置 Exchange</a></li>
<li><a href="#%e7%94%9f%e6%88%90SST%e6%96%87%e4%bb%b6" rel="">生成 SST 文件</a></li>
<li><a href="#%e5%86%99%e5%85%a5SST%e6%96%87%e4%bb%b6%e5%88%b0NebulaGraph" rel="">写入 SST 文件到 Nebula Graph</a></li>
</ul>
<h2 id="实验环境准备" class="headerLink">
    <a href="#%e5%ae%9e%e9%aa%8c%e7%8e%af%e5%a2%83%e5%87%86%e5%a4%87" class="header-mark"></a>3 实验环境准备</h2><p>为了最小化使用 Nebula Exchange 的 SST 功能，我们需要：</p>
<ul>
<li>搭建一个 Nebula Graph 集群，创建导入数据的 Schema，我们选择使用 Docker-Compose 方式、利用 <a href="https://github.com/wey-gu/nebula-up/" target="_blank" rel="noopener noreffer">Nebula-Up</a> 快速部署，并简单修改其网络，以方便同样容器化的 Exchange 程序对其访问。</li>
<li>搭建容器化的 Spark 运行环境</li>
<li>搭建容器化的 HDFS</li>
</ul>
<h3 id="搭建-nebula-graph-集群" class="headerLink">
    <a href="#%e6%90%ad%e5%bb%ba-nebula-graph-%e9%9b%86%e7%be%a4" class="header-mark"></a>3.1 搭建 Nebula Graph 集群</h3><p>借助于 <a href="https://github.com/wey-gu/nebula-up/" target="_blank" rel="noopener noreffer">Nebula-Up</a> 我们可以在 Linux 环境下一键部署一套 Nebula Graph 集群：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">curl -fsSL nebula-up.siwei.io/install.sh <span class="p">|</span> bash
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>待部署成功之后，我们需要对环境做一些修改，这里我做的修改其实就是两点：</p>
<ol>
<li>只保留一个 metaD 服务</li>
<li>起用 Docker 的外部网络</li>
</ol>
<p>详细修改的部分参考<a href="#%e9%99%84%e5%bd%95%e4%b8%80" rel="">附录一</a></p>
<p>应用 docker-compose 的修改：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">cd</span> ~/.nebula-up/nebula-docker-compose
vim docker-compose.yaml <span class="c1"># 参考附录一</span>
docker network create nebula-net <span class="c1"># 需要创建外部网络</span>
docker-compose up -d --remove-orphans
</code></pre></td></tr></table>
</div>
</div><p>之后，我们来创建要测试的图空间，并创建图的 Schema，为此，我们可以利用 nebula-console ，同样，Nebula-Up 里自带了容器化的 nebula-console。</p>
<ul>
<li>进入 Nebula-Console 所在的容器</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">~/.nebula-up/console.sh
/ <span class="c1">#</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>在 console 容器里发起链接到图数据库，其中 <code>192.168.x.y</code> 是我所在的 Linux VM 的第一个网卡地址，请换成您的</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">/ # nebula-console -addr 192.168.x.y -port 9669 -user root -p password
[INFO] connection pool is initialized successfully

Welcome to Nebula Graph!
</code></pre></td></tr></table>
</div>
</div><ul>
<li>创建图空间（我们起名字叫 <code>sst</code> ），以及 schema</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="k">create</span><span class="w"> </span><span class="k">space</span><span class="w"> </span><span class="n">sst</span><span class="p">(</span><span class="n">partition_num</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span><span class="n">replica_factor</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">vid_type</span><span class="o">=</span><span class="n">fixed_string</span><span class="p">(</span><span class="mi">32</span><span class="p">));</span><span class="w">
</span><span class="w"></span><span class="p">:</span><span class="n">sleep</span><span class="w"> </span><span class="mi">20</span><span class="w">
</span><span class="w"></span><span class="n">use</span><span class="w"> </span><span class="n">sst</span><span class="w">
</span><span class="w"></span><span class="k">create</span><span class="w"> </span><span class="n">tag</span><span class="w"> </span><span class="n">player</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="n">string</span><span class="p">,</span><span class="w"> </span><span class="n">age</span><span class="w"> </span><span class="nb">int</span><span class="p">);</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>示例输出</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="p">(</span><span class="n">root</span><span class="o">@</span><span class="n">nebula</span><span class="p">)</span><span class="w"> </span><span class="p">[(</span><span class="k">none</span><span class="p">)]</span><span class="o">&gt;</span><span class="w"> </span><span class="k">create</span><span class="w"> </span><span class="k">space</span><span class="w"> </span><span class="n">sst</span><span class="p">(</span><span class="n">partition_num</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span><span class="n">replica_factor</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">vid_type</span><span class="o">=</span><span class="n">fixed_string</span><span class="p">(</span><span class="mi">32</span><span class="p">));</span><span class="w">
</span><span class="w"></span><span class="n">Execution</span><span class="w"> </span><span class="n">succeeded</span><span class="w"> </span><span class="p">(</span><span class="n">time</span><span class="w"> </span><span class="n">spent</span><span class="w"> </span><span class="mi">1468</span><span class="o">/</span><span class="mi">1918</span><span class="w"> </span><span class="n">us</span><span class="p">)</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="p">(</span><span class="n">root</span><span class="o">@</span><span class="n">nebula</span><span class="p">)</span><span class="w"> </span><span class="p">[(</span><span class="k">none</span><span class="p">)]</span><span class="o">&gt;</span><span class="w"> </span><span class="p">:</span><span class="n">sleep</span><span class="w"> </span><span class="mi">20</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="p">(</span><span class="n">root</span><span class="o">@</span><span class="n">nebula</span><span class="p">)</span><span class="w"> </span><span class="p">[(</span><span class="k">none</span><span class="p">)]</span><span class="o">&gt;</span><span class="w"> </span><span class="n">use</span><span class="w"> </span><span class="n">sst</span><span class="w">
</span><span class="w"></span><span class="n">Execution</span><span class="w"> </span><span class="n">succeeded</span><span class="w"> </span><span class="p">(</span><span class="n">time</span><span class="w"> </span><span class="n">spent</span><span class="w"> </span><span class="mi">1253</span><span class="o">/</span><span class="mi">1566</span><span class="w"> </span><span class="n">us</span><span class="p">)</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="n">Wed</span><span class="p">,</span><span class="w"> </span><span class="mi">18</span><span class="w"> </span><span class="n">Aug</span><span class="w"> </span><span class="mi">2021</span><span class="w"> </span><span class="mi">08</span><span class="p">:</span><span class="mi">18</span><span class="p">:</span><span class="mi">13</span><span class="w"> </span><span class="n">UTC</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="p">(</span><span class="n">root</span><span class="o">@</span><span class="n">nebula</span><span class="p">)</span><span class="w"> </span><span class="p">[</span><span class="n">sst</span><span class="p">]</span><span class="o">&gt;</span><span class="w"> </span><span class="k">create</span><span class="w"> </span><span class="n">tag</span><span class="w"> </span><span class="n">player</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="n">string</span><span class="p">,</span><span class="w"> </span><span class="n">age</span><span class="w"> </span><span class="nb">int</span><span class="p">);</span><span class="w">
</span><span class="w"></span><span class="n">Execution</span><span class="w"> </span><span class="n">succeeded</span><span class="w"> </span><span class="p">(</span><span class="n">time</span><span class="w"> </span><span class="n">spent</span><span class="w"> </span><span class="mi">1312</span><span class="o">/</span><span class="mi">1735</span><span class="w"> </span><span class="n">us</span><span class="p">)</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="n">Wed</span><span class="p">,</span><span class="w"> </span><span class="mi">18</span><span class="w"> </span><span class="n">Aug</span><span class="w"> </span><span class="mi">2021</span><span class="w"> </span><span class="mi">08</span><span class="p">:</span><span class="mi">18</span><span class="p">:</span><span class="mi">23</span><span class="w"> </span><span class="n">UTC</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><h3 id="搭建容器化的-spark-环境" class="headerLink">
    <a href="#%e6%90%ad%e5%bb%ba%e5%ae%b9%e5%99%a8%e5%8c%96%e7%9a%84-spark-%e7%8e%af%e5%a2%83" class="header-mark"></a>3.2 搭建容器化的 Spark 环境</h3><p>利用 big data europe 做的工作，这个过程非常容易。</p>
<p>值得注意的是：</p>
<ul>
<li>现在的 Nebula Exchange 对 Spark 的版本有要求，在现在的 2021 年 8 月，我是用了 spark-2.4.5-hadoop-2.7 的版本。</li>
<li>为了方便，我让 Spark 运行在 Nebula Graph 相同的机器上，并且指定了运行在同一个 Docker 网络下</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">docker run --name spark-master --network nebula-net <span class="se">\
</span><span class="se"></span>    -h spark-master -e <span class="nv">ENABLE_INIT_DAEMON</span><span class="o">=</span><span class="nb">false</span> -d <span class="se">\
</span><span class="se"></span>    bde2020/spark-master:2.4.5-hadoop2.7
</code></pre></td></tr></table>
</div>
</div><p>然后，我们就可以进入到环境中了：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">docker <span class="nb">exec</span> -it spark-master bash
</code></pre></td></tr></table>
</div>
</div><p>进到 Spark 容器中之后，可以像这样安装 maven:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">export</span> <span class="nv">MAVEN_VERSION</span><span class="o">=</span>3.5.4
<span class="nb">export</span> <span class="nv">MAVEN_HOME</span><span class="o">=</span>/usr/lib/mvn
<span class="nb">export</span> <span class="nv">PATH</span><span class="o">=</span><span class="nv">$MAVEN_HOME</span>/bin:<span class="nv">$PATH</span>

wget http://archive.apache.org/dist/maven/maven-3/<span class="nv">$MAVEN_VERSION</span>/binaries/apache-maven-<span class="nv">$MAVEN_VERSION</span>-bin.tar.gz <span class="o">&amp;&amp;</span> <span class="se">\
</span><span class="se"></span>  tar -zxvf apache-maven-<span class="nv">$MAVEN_VERSION</span>-bin.tar.gz <span class="o">&amp;&amp;</span> <span class="se">\
</span><span class="se"></span>  rm apache-maven-<span class="nv">$MAVEN_VERSION</span>-bin.tar.gz <span class="o">&amp;&amp;</span> <span class="se">\
</span><span class="se"></span>  mv apache-maven-<span class="nv">$MAVEN_VERSION</span> /usr/lib/mvn
</code></pre></td></tr></table>
</div>
</div><p>还可以这样在容器里下载 nebula-exchange 的 <code>jar</code> 包：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">cd</span> ~
wget https://repo1.maven.org/maven2/com/vesoft/nebula-exchange/2.1.0/nebula-exchange-2.1.0.jar
</code></pre></td></tr></table>
</div>
</div><h3 id="搭建容器化的-hdfs" class="headerLink">
    <a href="#%e6%90%ad%e5%bb%ba%e5%ae%b9%e5%99%a8%e5%8c%96%e7%9a%84-hdfs" class="header-mark"></a>3.3 搭建容器化的 HDFS</h3><p>同样借助 big-data-euroupe 的工作，这非常简单，不过我们要做一点修改，让它的 <code>docker-compose.yml</code> 文件里使用 <code>nebula-net</code> 这个之前创建的 Docker 网络。</p>
<p>详细修改的部分参考<a href="#%e9%99%84%e5%bd%95%e4%ba%8c" rel="">附录二</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">git clone https://github.com/big-data-europe/docker-hadoop.git
<span class="nb">cd</span> docker-hadoop
vim docker-compose.yml
docker-compose up -d
</code></pre></td></tr></table>
</div>
</div><h2 id="配置exchange" class="headerLink">
    <a href="#%e9%85%8d%e7%bd%aeexchange" class="header-mark"></a>4 配置Exchange</h2><p>这个配置主要填入的信息就是 Nebula Graph 集群本身和将要写入数据的 Space Name，以及数据源相关的配置（这里我们用 <code>csv</code> 作为例子），最后再配置输出（sink）为 <code>sst</code></p>
<ul>
<li>Nebula Graph
<ul>
<li>GraphD 地址</li>
<li>MetaD 地址</li>
<li>credential</li>
<li>Space Name</li>
</ul>
</li>
<li>数据源
<ul>
<li><code>source: csv</code>
<ul>
<li><code>path</code></li>
<li><code>fields</code> etc.</li>
</ul>
</li>
<li><code>ink: sst</code></li>
</ul>
</li>
</ul>
<p>详细的配置参考<a href="#%e9%99%84%e5%bd%95%e4%ba%8c" rel="">附录二</a></p>
<p>注意，这里 metaD 的地址可以这样获取，可以看到 <code>0.0.0.0:49377-&gt;9559</code> 表示 <code>49377</code> 是外部的地址。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ docker ps <span class="p">|</span> grep meta
887740c15750   vesoft/nebula-metad:v2.0.0                               <span class="s2">&#34;./bin/nebula-metad …&#34;</span>   <span class="m">6</span> hours ago    Up <span class="m">6</span> hours <span class="o">(</span>healthy<span class="o">)</span>    9560/tcp, 0.0.0.0:49377-&gt;9559/tcp, :::49377-&gt;9559/tcp, 0.0.0.0:49376-&gt;19559/tcp, :::49376-&gt;19559/tcp, 0.0.0.0:49375-&gt;19560/tcp, :::49375-&gt;19560/tcp                  nebula-docker-compose_metad0_1
</code></pre></td></tr></table>
</div>
</div><h2 id="生成sst文件" class="headerLink">
    <a href="#%e7%94%9f%e6%88%90sst%e6%96%87%e4%bb%b6" class="header-mark"></a>5 生成SST文件</h2><h3 id="准备源文件配置文件" class="headerLink">
    <a href="#%e5%87%86%e5%a4%87%e6%ba%90%e6%96%87%e4%bb%b6%e9%85%8d%e7%bd%ae%e6%96%87%e4%bb%b6" class="header-mark"></a>5.1 准备源文件、配置文件</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">docker cp exchange-sst.conf spark-master:/root/
docker cp player.csv spark-master:/root/
</code></pre></td></tr></table>
</div>
</div><p>其中 <code>player.csv</code> 的例子：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">1100,Tim Duncan,42
1101,Tony Parker,36
1102,LaMarcus Aldridge,33
1103,Rudy Gay,32
1104,Marco Belinelli,32
1105,Danny Green,31
1106,Kyle Anderson,25
1107,Aron Baynes,32
1108,Boris Diaw,36
1109,Tiago Splitter,34
1110,Cory Joseph,27
1111,David West,38
</code></pre></td></tr></table>
</div>
</div><h3 id="执行-exchange-程序" class="headerLink">
    <a href="#%e6%89%a7%e8%a1%8c-exchange-%e7%a8%8b%e5%ba%8f" class="header-mark"></a>5.2 执行 exchange 程序</h3><p>进入 <code>spark-master</code> 容器，提交执行 <code>exchange</code> 应用。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">docker <span class="nb">exec</span> -it spark-master bash
<span class="nb">cd</span> /root/
/spark/bin/spark-submit --master <span class="nb">local</span> <span class="se">\
</span><span class="se"></span>    --class com.vesoft.nebula.exchange.Exchange nebula-exchange-2.1.0.jar<span class="se">\
</span><span class="se"></span>    -c exchange-sst.conf
</code></pre></td></tr></table>
</div>
</div><p>检查执行结果：</p>
<p><code>spark-submit</code> 输出：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">21/08/17 03:37:43 INFO TaskSetManager: Finished task 31.0 in stage 2.0 <span class="o">(</span>TID 33<span class="o">)</span> in <span class="m">1093</span> ms on localhost <span class="o">(</span>executor driver<span class="o">)</span> <span class="o">(</span>32/32<span class="o">)</span>
21/08/17 03:37:43 INFO TaskSchedulerImpl: Removed TaskSet 2.0, whose tasks have all completed, from pool
21/08/17 03:37:43 INFO DAGScheduler: ResultStage <span class="m">2</span> <span class="o">(</span>foreachPartition at VerticesProcessor.scala:179<span class="o">)</span> finished in 22.336 s
21/08/17 03:37:43 INFO DAGScheduler: Job <span class="m">1</span> finished: foreachPartition at VerticesProcessor.scala:179, took 22.500639 s
21/08/17 03:37:43 INFO Exchange$: SST-Import: failure.player: <span class="m">0</span>
21/08/17 03:37:43 WARN Exchange$: Edge is not defined
21/08/17 03:37:43 INFO SparkUI: Stopped Spark web UI at http://spark-master:4040
21/08/17 03:37:43 INFO MapOutputTrackerMasterEndpoint: MapOutputTrackerMasterEndpoint stopped!
</code></pre></td></tr></table>
</div>
</div><p>验证 HDFS 上生成的 SST 文件：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">docker <span class="nb">exec</span> -it namenode /bin/bash

root@2db58903fb53:/# hdfs dfs -ls /sst
Found <span class="m">10</span> items
drwxr-xr-x   - root supergroup          <span class="m">0</span> 2021-08-17 03:37 /sst/1
drwxr-xr-x   - root supergroup          <span class="m">0</span> 2021-08-17 03:37 /sst/10
drwxr-xr-x   - root supergroup          <span class="m">0</span> 2021-08-17 03:37 /sst/2
drwxr-xr-x   - root supergroup          <span class="m">0</span> 2021-08-17 03:37 /sst/3
drwxr-xr-x   - root supergroup          <span class="m">0</span> 2021-08-17 03:37 /sst/4
drwxr-xr-x   - root supergroup          <span class="m">0</span> 2021-08-17 03:37 /sst/5
drwxr-xr-x   - root supergroup          <span class="m">0</span> 2021-08-17 03:37 /sst/6
drwxr-xr-x   - root supergroup          <span class="m">0</span> 2021-08-17 03:37 /sst/7
drwxr-xr-x   - root supergroup          <span class="m">0</span> 2021-08-17 03:37 /sst/8
drwxr-xr-x   - root supergroup          <span class="m">0</span> 2021-08-17 03:37 /sst/9
</code></pre></td></tr></table>
</div>
</div><h2 id="写入sst到nebulagraph" class="headerLink">
    <a href="#%e5%86%99%e5%85%a5sst%e5%88%b0nebulagraph" class="header-mark"></a>6 写入SST到NebulaGraph</h2><p>这里的操作实际上都是参考文档：<a href="https://docs.nebula-graph.com.cn/master/nebula-exchange/use-exchange/ex-ug-import-from-sst/" target="_blank" rel="noopener noreffer">SST 导入</a>，得来。其中就是从 console 之中执行了两步操作：</p>
<ul>
<li>Download</li>
<li>Ingest</li>
</ul>
<p>其中 Download 实际上是触发 Nebula Graph 从服务端发起 HDFS Client 的 download，获取 HDFS 上的 SST 文件，然后放到 storageD 能访问的本地路径下，这里，需要我们在服务端部署 HDFS 的依赖。因为我们是最小实践，我就偷懒手动做了这个 Download 的操作。</p>
<h3 id="手动下载" class="headerLink">
    <a href="#%e6%89%8b%e5%8a%a8%e4%b8%8b%e8%bd%bd" class="header-mark"></a>6.1 手动下载</h3><p>这里边手动下载我们就要知道 Nebula Graph 服务端下载的路径，实际上是 <code>/data/storage/nebula/&lt;space_id&gt;/download/</code>，这里的 Space ID 需要手动获取一下：</p>
<p>这个例子里，我们的 Space Name 是 <code>sst</code>，而 Space ID 是 <code>49</code>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="p">(</span><span class="n">root</span><span class="o">@</span><span class="n">nebula</span><span class="p">)</span><span class="w"> </span><span class="p">[</span><span class="n">sst</span><span class="p">]</span><span class="o">&gt;</span><span class="w"> </span><span class="k">DESC</span><span class="w"> </span><span class="k">space</span><span class="w"> </span><span class="n">sst</span><span class="w">
</span><span class="w"></span><span class="o">+</span><span class="c1">----+-------+------------------+----------------+---------+------------+--------------------+-------------+-----------+
</span><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="n">ID</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Name</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="n">Partition</span><span class="w"> </span><span class="nb">Number</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Replica</span><span class="w"> </span><span class="n">Factor</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Charset</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="k">Collate</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="n">Vid</span><span class="w"> </span><span class="k">Type</span><span class="w">           </span><span class="o">|</span><span class="w"> </span><span class="k">Atomic</span><span class="w"> </span><span class="n">Edge</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="k">Group</span><span class="w">     </span><span class="o">|</span><span class="w">
</span><span class="w"></span><span class="o">+</span><span class="c1">----+-------+------------------+----------------+---------+------------+--------------------+-------------+-----------+
</span><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="mi">49</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;sst&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="mi">10</span><span class="w">               </span><span class="o">|</span><span class="w"> </span><span class="mi">1</span><span class="w">              </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;utf8&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;utf8_bin&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;FIXED_STRING(32)&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;false&#34;</span><span class="w">     </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;default&#34;</span><span class="w"> </span><span class="o">|</span><span class="w">
</span><span class="w"></span><span class="o">+</span><span class="c1">----+-------+------------------+----------------+---------+------------+--------------------+-------------+-----------+
</span></code></pre></td></tr></table>
</div>
</div><p>于是，下边的操作就是手动把 SST 文件从 HDFS 之中 <code>get</code> 下来，再拷贝到 storageD 之中。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">docker <span class="nb">exec</span> -it namenode /bin/bash

$ hdfs dfs -get /sst /sst
<span class="nb">exit</span>
docker cp namenode:/sst .
docker <span class="nb">exec</span> -it nebula-docker-compose_storaged0_1 mkdir -p /data/storage/nebula/49/download/
docker <span class="nb">exec</span> -it nebula-docker-compose_storaged1_1 mkdir -p /data/storage/nebula/49/download/
docker <span class="nb">exec</span> -it nebula-docker-compose_storaged2_1 mkdir -p /data/storage/nebula/49/download/
docker cp sst nebula-docker-compose_storaged0_1:/data/storage/nebula/49/download/
docker cp sst nebula-docker-compose_storaged1_1:/data/storage/nebula/49/download/
docker cp sst nebula-docker-compose_storaged2_1:/data/storage/nebula/49/download/
</code></pre></td></tr></table>
</div>
</div><h3 id="sst-文件导入" class="headerLink">
    <a href="#sst-%e6%96%87%e4%bb%b6%e5%af%bc%e5%85%a5" class="header-mark"></a>6.2 SST 文件导入</h3><ul>
<li>进入 Nebula-Console 所在的容器</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">~/.nebula-up/console.sh
/ <span class="c1">#</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>在 console 容器里发起链接到图数据库，其中 <code>192.168.x.y</code> 是我所在的 Linux VM 的第一个网卡地址，请换成您的</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">/ # nebula-console -addr 192.168.x.y -port 9669 -user root -p password
[INFO] connection pool is initialized successfully

Welcome to Nebula Graph!
</code></pre></td></tr></table>
</div>
</div><ul>
<li>执行 <code>INGEST</code> 开始让 StorageD 读取 SST 文件</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="o">(</span>root@nebula<span class="o">)</span> <span class="o">[(</span>none<span class="o">)]</span>&gt; use sst
<span class="o">(</span>root@nebula<span class="o">)</span> <span class="o">[</span>sst<span class="o">]</span>&gt; INGEST<span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><p>我们可以用如下方法实时查看 Nebula Graph 服务端的日志</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">tail -f ~/.nebula-up/nebula-docker-compose/logs/*/*
</code></pre></td></tr></table>
</div>
</div><p>成功的 INGEST 日志：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">I0817 08:03:28.611877   <span class="m">169</span> EventListner.h:96<span class="o">]</span> Ingest external SST file: column family default, the external file path /data/storage/nebula/49/download/8/8-6.sst, the internal file path /data/storage/nebula/49/data/000023.sst, the properties of the table: <span class="c1"># data blocks=1; # entries=1; # deletions=0; # merge operands=0; # range deletions=0; raw key size=48; raw average key size=48.000000; raw value size=40; raw average value size=40.000000; data block size=75; index block size (user-key? 0, delta-value? 0)=66; filter block size=0; (estimated) table size=141; filter policy name=N/A; prefix extractor name=nullptr; column family ID=N/A; column family name=N/A; comparator name=leveldb.BytewiseComparator; merge operator name=nullptr; property collectors names=[]; SST file compression algo=Snappy; SST file compression options=window_bits=-14; level=32767; strategy=0; max_dict_bytes=0; zstd_max_train_bytes=0; enabled=0; ; creation time=0; time stamp of earliest key=0; file creation time=0;</span>
E0817 08:03:28.611912   <span class="m">169</span> StorageHttpIngestHandler.cpp:63<span class="o">]</span> SSTFile ingest successfully
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>题图版权：<a href="https://unsplash.com/photos/n6B49lTx7NM" target="_blank" rel="noopener noreffer">Pietro Jeng</a></p>
</blockquote>
<h2 id="附录" class="headerLink">
    <a href="#%e9%99%84%e5%bd%95" class="header-mark"></a>7 附录</h2><h3 id="附录一" class="headerLink">
    <a href="#%e9%99%84%e5%bd%95%e4%b8%80" class="header-mark"></a>7.1 附录一</h3><p><code>docker-compose.yaml</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span><span class="lnt">150
</span><span class="lnt">151
</span><span class="lnt">152
</span><span class="lnt">153
</span><span class="lnt">154
</span><span class="lnt">155
</span><span class="lnt">156
</span><span class="lnt">157
</span><span class="lnt">158
</span><span class="lnt">159
</span><span class="lnt">160
</span><span class="lnt">161
</span><span class="lnt">162
</span><span class="lnt">163
</span><span class="lnt">164
</span><span class="lnt">165
</span><span class="lnt">166
</span><span class="lnt">167
</span><span class="lnt">168
</span><span class="lnt">169
</span><span class="lnt">170
</span><span class="lnt">171
</span><span class="lnt">172
</span><span class="lnt">173
</span><span class="lnt">174
</span><span class="lnt">175
</span><span class="lnt">176
</span><span class="lnt">177
</span><span class="lnt">178
</span><span class="lnt">179
</span><span class="lnt">180
</span><span class="lnt">181
</span><span class="lnt">182
</span><span class="lnt">183
</span><span class="lnt">184
</span><span class="lnt">185
</span><span class="lnt">186
</span><span class="lnt">187
</span><span class="lnt">188
</span><span class="lnt">189
</span><span class="lnt">190
</span><span class="lnt">191
</span><span class="lnt">192
</span><span class="lnt">193
</span><span class="lnt">194
</span><span class="lnt">195
</span><span class="lnt">196
</span><span class="lnt">197
</span><span class="lnt">198
</span><span class="lnt">199
</span><span class="lnt">200
</span><span class="lnt">201
</span><span class="lnt">202
</span><span class="lnt">203
</span><span class="lnt">204
</span><span class="lnt">205
</span><span class="lnt">206
</span><span class="lnt">207
</span><span class="lnt">208
</span><span class="lnt">209
</span><span class="lnt">210
</span><span class="lnt">211
</span><span class="lnt">212
</span><span class="lnt">213
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="gh">diff --git a/docker-compose.yaml b/docker-compose.yaml
</span><span class="gh">index 48854de..cfeaedb 100644
</span><span class="gh"></span><span class="gd">--- a/docker-compose.yaml
</span><span class="gd"></span><span class="gi">+++ b/docker-compose.yaml
</span><span class="gi"></span><span class="gu">@@ -6,11 +6,13 @@ services:
</span><span class="gu"></span>       USER: root
       TZ:   &#34;${TZ}&#34;
     command:
<span class="gd">-      - --meta_server_addrs=metad0:9559,metad1:9559,metad2:9559
</span><span class="gd"></span><span class="gi">+      - --meta_server_addrs=metad0:9559
</span><span class="gi"></span>       - --local_ip=metad0
       - --ws_ip=metad0
       - --port=9559
       - --ws_http_port=19559
<span class="gi">+      - --ws_storage_http_port=19779
</span><span class="gi"></span>       - --data_path=/data/meta
       - --log_dir=/logs
       - --v=0
<span class="gu">@@ -34,81 +36,14 @@ services:
</span><span class="gu"></span>     cap_add:
       - SYS_PTRACE

<span class="gd">-  metad1:
</span><span class="gd">-    image: vesoft/nebula-metad:v2.0.0
</span><span class="gd">-    environment:
</span><span class="gd">-      USER: root
</span><span class="gd">-      TZ:   &#34;${TZ}&#34;
</span><span class="gd">-    command:
</span><span class="gd">-      - --meta_server_addrs=metad0:9559,metad1:9559,metad2:9559
</span><span class="gd">-      - --local_ip=metad1
</span><span class="gd">-      - --ws_ip=metad1
</span><span class="gd">-      - --port=9559
</span><span class="gd">-      - --ws_http_port=19559
</span><span class="gd">-      - --data_path=/data/meta
</span><span class="gd">-      - --log_dir=/logs
</span><span class="gd">-      - --v=0
</span><span class="gd">-      - --minloglevel=0
</span><span class="gd">-    healthcheck:
</span><span class="gd">-      test: [&#34;CMD&#34;, &#34;curl&#34;, &#34;-sf&#34;, &#34;http://metad1:19559/status&#34;]
</span><span class="gd">-      interval: 30s
</span><span class="gd">-      timeout: 10s
</span><span class="gd">-      retries: 3
</span><span class="gd">-      start_period: 20s
</span><span class="gd">-    ports:
</span><span class="gd">-      - 9559
</span><span class="gd">-      - 19559
</span><span class="gd">-      - 19560
</span><span class="gd">-    volumes:
</span><span class="gd">-      - ./data/meta1:/data/meta
</span><span class="gd">-      - ./logs/meta1:/logs
</span><span class="gd">-    networks:
</span><span class="gd">-      - nebula-net
</span><span class="gd">-    restart: on-failure
</span><span class="gd">-    cap_add:
</span><span class="gd">-      - SYS_PTRACE
</span><span class="gd">-
</span><span class="gd">-  metad2:
</span><span class="gd">-    image: vesoft/nebula-metad:v2.0.0
</span><span class="gd">-    environment:
</span><span class="gd">-      USER: root
</span><span class="gd">-      TZ:   &#34;${TZ}&#34;
</span><span class="gd">-    command:
</span><span class="gd">-      - --meta_server_addrs=metad0:9559,metad1:9559,metad2:9559
</span><span class="gd">-      - --local_ip=metad2
</span><span class="gd">-      - --ws_ip=metad2
</span><span class="gd">-      - --port=9559
</span><span class="gd">-      - --ws_http_port=19559
</span><span class="gd">-      - --data_path=/data/meta
</span><span class="gd">-      - --log_dir=/logs
</span><span class="gd">-      - --v=0
</span><span class="gd">-      - --minloglevel=0
</span><span class="gd">-    healthcheck:
</span><span class="gd">-      test: [&#34;CMD&#34;, &#34;curl&#34;, &#34;-sf&#34;, &#34;http://metad2:19559/status&#34;]
</span><span class="gd">-      interval: 30s
</span><span class="gd">-      timeout: 10s
</span><span class="gd">-      retries: 3
</span><span class="gd">-      start_period: 20s
</span><span class="gd">-    ports:
</span><span class="gd">-      - 9559
</span><span class="gd">-      - 19559
</span><span class="gd">-      - 19560
</span><span class="gd">-    volumes:
</span><span class="gd">-      - ./data/meta2:/data/meta
</span><span class="gd">-      - ./logs/meta2:/logs
</span><span class="gd">-    networks:
</span><span class="gd">-      - nebula-net
</span><span class="gd">-    restart: on-failure
</span><span class="gd">-    cap_add:
</span><span class="gd">-      - SYS_PTRACE
</span><span class="gd">-
</span><span class="gd"></span>   storaged0:
     image: vesoft/nebula-storaged:v2.0.0
     environment:
       USER: root
       TZ:   &#34;${TZ}&#34;
     command:
<span class="gd">-      - --meta_server_addrs=metad0:9559,metad1:9559,metad2:9559
</span><span class="gd"></span><span class="gi">+      - --meta_server_addrs=metad0:9559
</span><span class="gi"></span>       - --local_ip=storaged0
       - --ws_ip=storaged0
       - --port=9779
<span class="gu">@@ -119,8 +54,8 @@ services:
</span><span class="gu"></span>       - --minloglevel=0
     depends_on:
       - metad0
<span class="gd">-      - metad1
</span><span class="gd">-      - metad2
</span><span class="gd"></span>     healthcheck:
       test: [&#34;CMD&#34;, &#34;curl&#34;, &#34;-sf&#34;, &#34;http://storaged0:19779/status&#34;]
       interval: 30s
<span class="gu">@@ -146,7 +81,7 @@ services:
</span><span class="gu"></span>       USER: root
       TZ:   &#34;${TZ}&#34;
     command:
<span class="gd">-      - --meta_server_addrs=metad0:9559,metad1:9559,metad2:9559
</span><span class="gd"></span><span class="gi">+      - --meta_server_addrs=metad0:9559
</span><span class="gi"></span>       - --local_ip=storaged1
       - --ws_ip=storaged1
       - --port=9779
<span class="gu">@@ -157,8 +92,8 @@ services:
</span><span class="gu"></span>       - --minloglevel=0
     depends_on:
       - metad0
<span class="gd">-      - metad1
</span><span class="gd">-      - metad2
</span><span class="gd"></span>     healthcheck:
       test: [&#34;CMD&#34;, &#34;curl&#34;, &#34;-sf&#34;, &#34;http://storaged1:19779/status&#34;]
       interval: 30s
<span class="gu">@@ -184,7 +119,7 @@ services:
</span><span class="gu"></span>       USER: root
       TZ:   &#34;${TZ}&#34;
     command:
<span class="gd">-      - --meta_server_addrs=metad0:9559,metad1:9559,metad2:9559
</span><span class="gd"></span><span class="gi">+      - --meta_server_addrs=metad0:9559
</span><span class="gi"></span>       - --local_ip=storaged2
       - --ws_ip=storaged2
       - --port=9779
<span class="gu">@@ -195,8 +130,8 @@ services:
</span><span class="gu"></span>       - --minloglevel=0
     depends_on:
       - metad0
<span class="gd">-      - metad1
</span><span class="gd">-      - metad2
</span><span class="gd"></span>     healthcheck:
       test: [&#34;CMD&#34;, &#34;curl&#34;, &#34;-sf&#34;, &#34;http://storaged2:19779/status&#34;]
       interval: 30s
<span class="gu">@@ -222,17 +157,19 @@ services:
</span><span class="gu"></span>       USER: root
       TZ:   &#34;${TZ}&#34;
     command:
<span class="gd">-      - --meta_server_addrs=metad0:9559,metad1:9559,metad2:9559
</span><span class="gd"></span><span class="gi">+      - --meta_server_addrs=metad0:9559
</span><span class="gi"></span>       - --port=9669
       - --ws_ip=graphd
       - --ws_http_port=19669
<span class="gi">+      - --ws_meta_http_port=19559
</span><span class="gi"></span>       - --log_dir=/logs
       - --v=0
       - --minloglevel=0
     depends_on:
       - metad0
<span class="gd">-      - metad1
</span><span class="gd">-      - metad2
</span><span class="gd"></span>     healthcheck:
       test: [&#34;CMD&#34;, &#34;curl&#34;, &#34;-sf&#34;, &#34;http://graphd:19669/status&#34;]
       interval: 30s
<span class="gu">@@ -257,17 +194,19 @@ services:
</span><span class="gu"></span>       USER: root
       TZ:   &#34;${TZ}&#34;
     command:
<span class="gd">-      - --meta_server_addrs=metad0:9559,metad1:9559,metad2:9559
</span><span class="gd"></span><span class="gi">+      - --meta_server_addrs=metad0:9559
</span><span class="gi"></span>       - --port=9669
       - --ws_ip=graphd1
       - --ws_http_port=19669
<span class="gi">+      - --ws_meta_http_port=19559
</span><span class="gi"></span>       - --log_dir=/logs
       - --v=0
       - --minloglevel=0
     depends_on:
       - metad0
<span class="gd">-      - metad1
</span><span class="gd">-      - metad2
</span><span class="gd"></span>     healthcheck:
       test: [&#34;CMD&#34;, &#34;curl&#34;, &#34;-sf&#34;, &#34;http://graphd1:19669/status&#34;]
       interval: 30s
<span class="gu">@@ -292,17 +231,21 @@ services:
</span><span class="gu"></span>       USER: root
       TZ:   &#34;${TZ}&#34;
     command:
<span class="gd">-      - --meta_server_addrs=metad0:9559,metad1:9559,metad2:9559
</span><span class="gd"></span><span class="gi">+      - --meta_server_addrs=metad0:9559
</span><span class="gi"></span>       - --port=9669
       - --ws_ip=graphd2
       - --ws_http_port=19669
<span class="gi">+      - --ws_meta_http_port=19559
</span><span class="gi"></span>       - --log_dir=/logs
       - --v=0
       - --minloglevel=0
<span class="gi">+      - --storage_client_timeout_ms=60000
</span><span class="gi">+      - --local_config=true
</span><span class="gi"></span>     depends_on:
       - metad0
<span class="gd">-      - metad1
</span><span class="gd">-      - metad2
</span><span class="gd"></span>     healthcheck:
       test: [&#34;CMD&#34;, &#34;curl&#34;, &#34;-sf&#34;, &#34;http://graphd2:19669/status&#34;]
       interval: 30s
<span class="gu">@@ -323,3 +266,4 @@ services:
</span><span class="gu"></span>
 networks:
   nebula-net:
<span class="gi">+    external: true
</span></code></pre></td></tr></table>
</div>
</div><h3 id="附录二" class="headerLink">
    <a href="#%e9%99%84%e5%bd%95%e4%ba%8c" class="header-mark"></a>7.2 附录二</h3><p><a href="https://github.com/big-data-europe/docker-hadoop" target="_blank" rel="noopener noreffer">https://github.com/big-data-europe/docker-hadoop</a> 的 <code>docker-compose.yml</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="gh">diff --git a/docker-compose.yml b/docker-compose.yml
</span><span class="gh">index ed40dc6..66ff1f4 100644
</span><span class="gh"></span><span class="gd">--- a/docker-compose.yml
</span><span class="gd"></span><span class="gi">+++ b/docker-compose.yml
</span><span class="gi"></span><span class="gu">@@ -14,6 +14,8 @@ services:
</span><span class="gu"></span>       - CLUSTER_NAME=test
     env_file:
       - ./hadoop.env
<span class="gi">+    networks:
</span><span class="gi">+      - nebula-net
</span><span class="gi"></span>
   datanode:
     image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
<span class="gu">@@ -25,6 +27,8 @@ services:
</span><span class="gu"></span>       SERVICE_PRECONDITION: &#34;namenode:9870&#34;
     env_file:
       - ./hadoop.env
<span class="gi">+    networks:
</span><span class="gi">+      - nebula-net
</span><span class="gi"></span>
   resourcemanager:
     image: bde2020/hadoop-resourcemanager:2.0.0-hadoop3.2.1-java8
<span class="gu">@@ -34,6 +38,8 @@ services:
</span><span class="gu"></span>       SERVICE_PRECONDITION: &#34;namenode:9000 namenode:9870 datanode:9864&#34;
     env_file:
       - ./hadoop.env
<span class="gi">+    networks:
</span><span class="gi">+      - nebula-net
</span><span class="gi"></span>
   nodemanager1:
     image: bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8
<span class="gu">@@ -43,6 +49,8 @@ services:
</span><span class="gu"></span>       SERVICE_PRECONDITION: &#34;namenode:9000 namenode:9870 datanode:9864 resourcemanager:8088&#34;
     env_file:
       - ./hadoop.env
<span class="gi">+    networks:
</span><span class="gi">+      - nebula-net
</span><span class="gi"></span>
   historyserver:
     image: bde2020/hadoop-historyserver:2.0.0-hadoop3.2.1-java8
<span class="gu">@@ -54,8 +62,14 @@ services:
</span><span class="gu"></span>       - hadoop_historyserver:/hadoop/yarn/timeline
     env_file:
       - ./hadoop.env
<span class="gi">+    networks:
</span><span class="gi">+      - nebula-net
</span><span class="gi"></span>
 volumes:
   hadoop_namenode:
   hadoop_datanode:
   hadoop_historyserver:
<span class="gi">+
</span><span class="gi">+networks:
</span><span class="gi">+  nebula-net:
</span><span class="gi">+    external: true
</span></code></pre></td></tr></table>
</div>
</div><h3 id="附录三" class="headerLink">
    <a href="#%e9%99%84%e5%bd%95%e4%b8%89" class="header-mark"></a>7.3 附录三</h3><p><code>nebula-exchange-sst.conf</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span><span class="lnt">88
</span><span class="lnt">89
</span><span class="lnt">90
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="p">{</span>
  <span class="c"># Spark relation config</span>
  <span class="nx">spark</span><span class="err">:</span> <span class="p">{</span>
    <span class="nx">app</span><span class="err">:</span> <span class="p">{</span>
      <span class="nx">name</span><span class="err">:</span> <span class="nx">Nebula</span> <span class="nx">Exchange</span> <span class="mf">2.1</span>
    <span class="p">}</span>

    <span class="nx">master</span><span class="err">:</span><span class="nx">local</span>

    <span class="nx">driver</span><span class="err">:</span> <span class="p">{</span>
      <span class="nx">cores</span><span class="err">:</span> <span class="mi">1</span>
      <span class="nx">maxResultSize</span><span class="err">:</span> <span class="mi">1</span><span class="nx">G</span>
    <span class="p">}</span>

    <span class="nx">executor</span><span class="err">:</span> <span class="p">{</span>
        <span class="nx">memory</span><span class="err">:</span><span class="mi">1</span><span class="nx">G</span>
    <span class="p">}</span>

    <span class="nx">cores</span><span class="err">:</span><span class="p">{</span>
      <span class="nx">max</span><span class="err">:</span> <span class="mi">16</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="c"># Nebula Graph relation config</span>
  <span class="nx">nebula</span><span class="err">:</span> <span class="p">{</span>
    <span class="nx">address</span><span class="err">:</span><span class="p">{</span>
      <span class="nx">graph</span><span class="err">:</span><span class="p">[</span><span class="s2">&#34;192.168.8.128:9669&#34;</span><span class="p">]</span>
      <span class="nx">meta</span><span class="err">:</span><span class="p">[</span><span class="s2">&#34;192.168.8.128:49377&#34;</span><span class="p">]</span>
    <span class="p">}</span>
    <span class="nx">user</span><span class="err">:</span> <span class="nx">root</span>
    <span class="nx">pswd</span><span class="err">:</span> <span class="nx">nebula</span>
    <span class="nx">space</span><span class="err">:</span> <span class="nx">sst</span>

    <span class="c"># parameters for SST import, not required</span>
    <span class="nx">path</span><span class="err">:</span><span class="p">{</span>
        <span class="nx">local</span><span class="err">:</span><span class="s2">&#34;/tmp&#34;</span>
        <span class="nx">remote</span><span class="err">:</span><span class="s2">&#34;/sst&#34;</span>
        <span class="nx">hdfs</span><span class="p">.</span><span class="nx">namenode</span><span class="err">:</span> <span class="s2">&#34;hdfs://192.168.8.128:9000&#34;</span>
    <span class="p">}</span>

    <span class="c"># nebula client connection parameters</span>
    <span class="nx">connection</span> <span class="p">{</span>
      <span class="c"># socket connect &amp; execute timeout, unit: millisecond</span>
      <span class="nx">timeout</span><span class="err">:</span> <span class="mi">30000</span>
    <span class="p">}</span>

    <span class="nx">error</span><span class="err">:</span> <span class="p">{</span>
      <span class="c"># max number of failures, if the number of failures is bigger than max, then exit the application.</span>
      <span class="nx">max</span><span class="err">:</span> <span class="mi">32</span>
      <span class="c"># failed import job will be recorded in output path</span>
      <span class="nx">output</span><span class="err">:</span> <span class="err">/</span><span class="nx">tmp</span><span class="err">/</span><span class="nx">errors</span>
    <span class="p">}</span>

    <span class="c"># use google&#39;s RateLimiter to limit the requests send to NebulaGraph</span>
    <span class="nx">rate</span><span class="err">:</span> <span class="p">{</span>
      <span class="c"># the stable throughput of RateLimiter</span>
      <span class="nx">limit</span><span class="err">:</span> <span class="mi">1024</span>
      <span class="c"># Acquires a permit from RateLimiter, unit: MILLISECONDS</span>
      <span class="c"># if it can&#39;t be obtained within the specified timeout, then give up the request.</span>
      <span class="nx">timeout</span><span class="err">:</span> <span class="mi">1000</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="c"># Processing tags</span>
  <span class="c"># There are tag config examples for different dataSources.</span>
  <span class="nx">tags</span><span class="err">:</span> <span class="p">[</span>

    <span class="c"># HDFS csv</span>
    <span class="c"># Import mode is sst, just change type.sink to client if you want to use client import mode.</span>
    <span class="p">{</span>
      <span class="nx">name</span><span class="err">:</span> <span class="nx">player</span>
      <span class="nx">type</span><span class="err">:</span> <span class="p">{</span>
        <span class="nx">source</span><span class="err">:</span> <span class="nx">csv</span>
        <span class="nx">sink</span><span class="err">:</span> <span class="nx">sst</span>
      <span class="p">}</span>
      <span class="nx">path</span><span class="err">:</span> <span class="s2">&#34;file:///root/player.csv&#34;</span>
      <span class="c"># if your csv file has no header, then use _c0,_c1,_c2,.. to indicate fields</span>
      <span class="nx">fields</span><span class="err">:</span> <span class="p">[</span><span class="nx">_c1</span><span class="p">,</span> <span class="nx">_c2</span><span class="p">]</span>
      <span class="nx">nebula</span><span class="p">.</span><span class="nx">fields</span><span class="err">:</span> <span class="p">[</span><span class="nx">name</span><span class="p">,</span> <span class="nx">age</span><span class="p">]</span>
      <span class="nx">vertex</span><span class="err">:</span> <span class="p">{</span>
        <span class="nx">field</span><span class="err">:</span><span class="nx">_c0</span>
      <span class="p">}</span>
      <span class="nx">separator</span><span class="err">:</span> <span class="s2">&#34;,&#34;</span>
      <span class="nx">header</span><span class="err">:</span> <span class="kc">false</span>
      <span class="nx">batch</span><span class="err">:</span> <span class="mi">256</span>
      <span class="nx">partition</span><span class="err">:</span> <span class="mi">32</span>
    <span class="p">}</span>

  <span class="p">]</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>Spark on Nebula Graph</title>
    <link>https://siwei.io/en/spark-on-nebula-graph/</link>
    <pubDate>Tue, 19 Apr 2022 17:19:11 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/en/spark-on-nebula-graph/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>What could be done with Spark and PySpark on top of Nebula Graph, this post covers everything we should know.</p>
</blockquote>
<p>In this article, I am trying walk you through all three Spark projects of Nebula Graph with some runnable hands-on examples. Also, I managed to make PySpark usable with Nebula Graph Spark Connector, which will be contributed to the Docs later.</p>
<h2 id="the-three-spark-projects-for-nebula-graph" class="headerLink">
    <a href="#the-three-spark-projects-for-nebula-graph" class="header-mark"></a>1 The three Spark projects for Nebula Graph</h2><p>I used to draw a sketch around all data importing methods of Nebula Graph <a href="https://www.siwei.io/sketches/nebula-data-import-options/" target="_blank" rel="noopener noreffer">here</a>, where all three of the Spark based Nebula Graph projects were already briefly introduced. In this article, instead, a slightly deeper dive on all of them will be made based on my recent work on them.</p>
<p>TL;DR</p>
<ul>
<li>Nebula Spark Connector is a Spark Lib to enable spark application reading from and writing to Nebula Graph in form of dataframe.</li>
<li>Nebula Exchange, built on top of Nebula Spark Connector, is a Spark Lib and Application to exchange(for Open Source version, it&rsquo;s one way: write, whereas for enterprise version it&rsquo;s bidirectional) different data sources like(MySQL, Neo4j, PostgreSQL, Clickhouse, Hive etc.). Besides write directly to Nebula Graph, it could optionally generate SST files to be ingested into Nebula Graph to off load the storage computation outside of the Nebula Graph cluster.</li>
<li>Nebula Algorithm, built on top of Nebula Spark Connector and GraphX, is an Spark Lib and Application to run de facto graph algorithms(pagerank, LPA etc&hellip;) on a graph from Nebula Graph.</li>
</ul>
<p>Then let&rsquo;s have the long verson of those spark projects more on how-to perspectives.</p>
<h2 id="spark-connector" class="headerLink">
    <a href="#spark-connector" class="header-mark"></a>2 Spark-Connector</h2><ul>
<li>Codebase: <a href="https://github.com/vesoft-inc/nebula-algorithm" target="_blank" rel="noopener noreffer">https://github.com/vesoft-inc/nebula-algorithm</a></li>
<li>Documentation: <a href="https://docs.nebula-graph.io/3.0.2/nebula-algorithm/" target="_blank" rel="noopener noreffer">https://docs.nebula-graph.io/3.0.2/nebula-algorithm/</a> (it&rsquo;s versioned, as for now, I put the lastest released version 3.0.2 here)</li>
<li>Jar Package: <a href="https://repo1.maven.org/maven2/com/vesoft/nebula-algorithm/" target="_blank" rel="noopener noreffer">https://repo1.maven.org/maven2/com/vesoft/nebula-algorithm/</a></li>
<li>Code Examples: <a href="example/src/main/scala/com/vesoft/nebula/algorithm" rel="">example/src/main/scala/com/vesoft/nebula/algorithm</a></li>
</ul>
<h3 id="nebula-graph-spark-reader" class="headerLink">
    <a href="#nebula-graph-spark-reader" class="header-mark"></a>2.1 Nebula Graph Spark Reader</h3><p>To read data from Nebula Graph, i.e. vertex, Nebula Spark Connector will scan all storage instances who hold given label(TAG): <code>withLabel(&quot;player&quot;)</code>, and we could optionally specify the properties of the vertex: <code>withReturnCols(List(&quot;name&quot;, &quot;age&quot;))</code>.</p>
<p>With needed configuration being provided, a call of <code>spark.read.nebula.loadVerticesToDF</code> will return dataframe of the Vertex Scan call towards Nebula Graph:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-scala" data-lang="scala">  <span class="k">def</span> <span class="n">readVertex</span><span class="o">(</span><span class="n">spark</span><span class="k">:</span> <span class="kt">SparkSession</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
    <span class="nc">LOG</span><span class="o">.</span><span class="n">info</span><span class="o">(</span><span class="s">&#34;start to read nebula vertices&#34;</span><span class="o">)</span>
    <span class="k">val</span> <span class="n">config</span> <span class="k">=</span>
      <span class="nc">NebulaConnectionConfig</span>
        <span class="o">.</span><span class="n">builder</span><span class="o">()</span>
        <span class="o">.</span><span class="n">withMetaAddress</span><span class="o">(</span><span class="s">&#34;metad0:9559,metad1:9559,metad2:9559&#34;</span><span class="o">)</span>
        <span class="o">.</span><span class="n">withConenctionRetry</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span>
        <span class="o">.</span><span class="n">build</span><span class="o">()</span>
    <span class="k">val</span> <span class="n">nebulaReadVertexConfig</span><span class="k">:</span> <span class="kt">ReadNebulaConfig</span> <span class="o">=</span> <span class="nc">ReadNebulaConfig</span>
      <span class="o">.</span><span class="n">builder</span><span class="o">()</span>
      <span class="o">.</span><span class="n">withSpace</span><span class="o">(</span><span class="s">&#34;basketballplayer&#34;</span><span class="o">)</span>
      <span class="o">.</span><span class="n">withLabel</span><span class="o">(</span><span class="s">&#34;player&#34;</span><span class="o">)</span>
      <span class="o">.</span><span class="n">withNoColumn</span><span class="o">(</span><span class="kc">false</span><span class="o">)</span>
      <span class="o">.</span><span class="n">withReturnCols</span><span class="o">(</span><span class="nc">List</span><span class="o">(</span><span class="s">&#34;name&#34;</span><span class="o">,</span> <span class="s">&#34;age&#34;</span><span class="o">))</span>
      <span class="o">.</span><span class="n">withLimit</span><span class="o">(</span><span class="mi">10</span><span class="o">)</span>
      <span class="o">.</span><span class="n">withPartitionNum</span><span class="o">(</span><span class="mi">10</span><span class="o">)</span>
      <span class="o">.</span><span class="n">build</span><span class="o">()</span>
    <span class="k">val</span> <span class="n">vertex</span> <span class="k">=</span> <span class="n">spark</span><span class="o">.</span><span class="n">read</span><span class="o">.</span><span class="n">nebula</span><span class="o">(</span><span class="n">config</span><span class="o">,</span> <span class="n">nebulaReadVertexConfig</span><span class="o">).</span><span class="n">loadVerticesToDF</span><span class="o">()</span>
    <span class="n">vertex</span><span class="o">.</span><span class="n">printSchema</span><span class="o">()</span>
    <span class="n">vertex</span><span class="o">.</span><span class="n">show</span><span class="o">(</span><span class="mi">20</span><span class="o">)</span>
    <span class="n">println</span><span class="o">(</span><span class="s">&#34;vertex count: &#34;</span> <span class="o">+</span> <span class="n">vertex</span><span class="o">.</span><span class="n">count</span><span class="o">())</span>
  <span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>It&rsquo;s similar for the writor part and one big difference here is the wrinting path is done via GraphD as underlying Spark Connector is shooting nGQL <code>INSERT</code> queries.</p>
<p>Then let&rsquo;s do a hands-on end to end practise.</p>
<h3 id="hands-on-spark-connector" class="headerLink">
    <a href="#hands-on-spark-connector" class="header-mark"></a>2.2 Hands-on Spark Connector</h3><p>Prerequisites: it&rsquo;s assumed below procedure being run on a Linux Machine with internet connection, ideally with Docker and Docker-Compose preinstalled.</p>
<h4 id="bootstrap-a-nebula-graph-cluster" class="headerLink">
    <a href="#bootstrap-a-nebula-graph-cluster" class="header-mark"></a>2.2.1 Bootstrap a Nebula Graph Cluster</h4><p>Firstly, let&rsquo;s deploy Nebula Graph Core v3.0 and Nebula Studio with <a href="https://github.com/wey-gu/nebula-up/" target="_blank" rel="noopener noreffer">Nebula-Up</a>, it will try to install Docker and Docker-Compose for us, in case it failed, please try install Docker and Docker-Compose on your own first.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">curl -fsSL nebula-up.siwei.io/install.sh <span class="p">|</span> bash -s -- v3.0
</code></pre></td></tr></table>
</div>
</div><p>After the above script being executed, let&rsquo;s connect to it with Nebula-Console, the command line client for Nebula Graph.</p>
<ul>
<li>Enter the container with console</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">~/.nebula-up/console.sh
</code></pre></td></tr></table>
</div>
</div><ul>
<li>Connect to the Nebula Graph</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">nebula-console -addr graphd -port <span class="m">9669</span> -user root -p nebula
</code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>Activate Storage Instances, and check hosts status</p>
<blockquote>
<p>ref: <a href="https://docs.nebula-graph.io/3.0.2/4.deployment-and-installation/manage-storage-host/" target="_blank" rel="noopener noreffer">https://docs.nebula-graph.io/3.0.2/4.deployment-and-installation/manage-storage-host/</a></p>
</blockquote>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">ADD HOSTS <span class="s2">&#34;storaged0&#34;</span>:9779,<span class="s2">&#34;storaged1&#34;</span>:9779,<span class="s2">&#34;storaged2&#34;</span>:9779<span class="p">;</span>
SHOW HOSTS<span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>Load the <a href="https://docs.nebula-graph.io/3.0.2/3.ngql-guide/1.nGQL-overview/1.overview/#example_data_basketballplayer" target="_blank" rel="noopener noreffer">test graph data</a>, which will take one or two minitues to finish.</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">:play basketballplayer<span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="create-a-spark-playground" class="headerLink">
    <a href="#create-a-spark-playground" class="header-mark"></a>2.2.2 Create a Spark playground</h4><p>Thanks to <a href="https://github.com/big-data-europe/docker-spark" target="_blank" rel="noopener noreffer">Big data europe</a>, it&rsquo;s quite handly to do so:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">docker run --name spark-master-0 --network nebula-docker-compose_nebula-net <span class="se">\
</span><span class="se"></span>    -h spark-master-0 -e <span class="nv">ENABLE_INIT_DAEMON</span><span class="o">=</span><span class="nb">false</span> -d <span class="se">\
</span><span class="se"></span>    -v <span class="si">${</span><span class="nv">PWD</span><span class="si">}</span>/:/root <span class="se">\
</span><span class="se"></span>    bde2020/spark-master:2.4.5-hadoop2.7
</code></pre></td></tr></table>
</div>
</div><p>In above one line command, we created a container named <code>spark-master-0</code> with a built-in hadoop 2.7 and spark 2.4.5, connected to the Nebula Graph cluster in its docker network named <code>nebula-docker-compose_nebula-net</code>, and it mapped the current path to <code>/root</code> of the spark container.</p>
<p>Then, we could access to the spark env container with:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">docker <span class="nb">exec</span> -it spark-master-0 bash
</code></pre></td></tr></table>
</div>
</div><p>Optionally, we could install <code>mvn</code> inside the container:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">docker <span class="nb">exec</span> -it spark-master-0 bash
<span class="c1"># in the container shell</span>

<span class="nb">export</span> <span class="nv">MAVEN_VERSION</span><span class="o">=</span>3.5.4
<span class="nb">export</span> <span class="nv">MAVEN_HOME</span><span class="o">=</span>/usr/lib/mvn
<span class="nb">export</span> <span class="nv">PATH</span><span class="o">=</span><span class="nv">$MAVEN_HOME</span>/bin:<span class="nv">$PATH</span>

wget http://archive.apache.org/dist/maven/maven-3/<span class="nv">$MAVEN_VERSION</span>/binaries/apache-maven-<span class="nv">$MAVEN_VERSION</span>-bin.tar.gz <span class="o">&amp;&amp;</span> <span class="se">\
</span><span class="se"></span>  tar -zxvf apache-maven-<span class="nv">$MAVEN_VERSION</span>-bin.tar.gz <span class="o">&amp;&amp;</span> <span class="se">\
</span><span class="se"></span>  rm apache-maven-<span class="nv">$MAVEN_VERSION</span>-bin.tar.gz <span class="o">&amp;&amp;</span> <span class="se">\
</span><span class="se"></span>  mv apache-maven-<span class="nv">$MAVEN_VERSION</span> /usr/lib/mvn

which /usr/lib/mvn/bin/mvn
</code></pre></td></tr></table>
</div>
</div><h4 id="run-spark-connector-example" class="headerLink">
    <a href="#run-spark-connector-example" class="header-mark"></a>2.2.3 Run spark connector example</h4><p>Let&rsquo;s clone the connector and the example code base, and build(or place the connector Jar package) the connector:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">git clone https://github.com/vesoft-inc/nebula-spark-connector.git

docker <span class="nb">exec</span> -it spark-master-0 bash
<span class="nb">cd</span> /root/nebula-spark-connector

/usr/lib/mvn/bin/mvn install -Dgpg.skip -Dmaven.javadoc.skip<span class="o">=</span><span class="nb">true</span> -Dmaven.test.skip<span class="o">=</span><span class="nb">true</span>
</code></pre></td></tr></table>
</div>
</div><p>Then we replace the example code:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">vi example/src/main/scala/com/vesoft/nebula/examples/connector/NebulaSparkReaderExample.scala
</code></pre></td></tr></table>
</div>
</div><p>We put the code as the following, where two functions <code>readVertex</code> and <code>readEdges</code> was created on the <code>basketballplayer</code> graph space:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-scala" data-lang="scala"><span class="k">package</span> <span class="nn">com.vesoft.nebula.examples.connector</span>

<span class="k">import</span> <span class="nn">com.facebook.thrift.protocol.TCompactProtocol</span>
<span class="k">import</span> <span class="nn">com.vesoft.nebula.connector.connector.NebulaDataFrameReader</span>
<span class="k">import</span> <span class="nn">com.vesoft.nebula.connector.</span><span class="o">{</span><span class="nc">NebulaConnectionConfig</span><span class="o">,</span> <span class="nc">ReadNebulaConfig</span><span class="o">}</span>
<span class="k">import</span> <span class="nn">org.apache.spark.SparkConf</span>
<span class="k">import</span> <span class="nn">org.apache.spark.sql.SparkSession</span>
<span class="k">import</span> <span class="nn">org.slf4j.LoggerFactory</span>

<span class="k">object</span> <span class="nc">NebulaSparkReaderExample</span> <span class="o">{</span>

  <span class="k">private</span> <span class="k">val</span> <span class="nc">LOG</span> <span class="k">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="n">getLogger</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="n">getClass</span><span class="o">)</span>

  <span class="k">def</span> <span class="n">main</span><span class="o">(</span><span class="n">args</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>

    <span class="k">val</span> <span class="n">sparkConf</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">SparkConf</span>
    <span class="n">sparkConf</span>
      <span class="o">.</span><span class="n">set</span><span class="o">(</span><span class="s">&#34;spark.serializer&#34;</span><span class="o">,</span> <span class="s">&#34;org.apache.spark.serializer.KryoSerializer&#34;</span><span class="o">)</span>
      <span class="o">.</span><span class="n">registerKryoClasses</span><span class="o">(</span><span class="nc">Array</span><span class="o">[</span><span class="kt">Class</span><span class="o">[</span><span class="k">_</span><span class="o">]](</span><span class="n">classOf</span><span class="o">[</span><span class="kt">TCompactProtocol</span><span class="o">]))</span>
    <span class="k">val</span> <span class="n">spark</span> <span class="k">=</span> <span class="nc">SparkSession</span>
      <span class="o">.</span><span class="n">builder</span><span class="o">()</span>
      <span class="o">.</span><span class="n">master</span><span class="o">(</span><span class="s">&#34;local&#34;</span><span class="o">)</span>
      <span class="o">.</span><span class="n">config</span><span class="o">(</span><span class="n">sparkConf</span><span class="o">)</span>
      <span class="o">.</span><span class="n">getOrCreate</span><span class="o">()</span>

    <span class="n">readVertex</span><span class="o">(</span><span class="n">spark</span><span class="o">)</span>
    <span class="n">readEdges</span><span class="o">(</span><span class="n">spark</span><span class="o">)</span>

    <span class="n">spark</span><span class="o">.</span><span class="n">close</span><span class="o">()</span>
    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="o">()</span>
  <span class="o">}</span>

  <span class="k">def</span> <span class="n">readVertex</span><span class="o">(</span><span class="n">spark</span><span class="k">:</span> <span class="kt">SparkSession</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
    <span class="nc">LOG</span><span class="o">.</span><span class="n">info</span><span class="o">(</span><span class="s">&#34;start to read nebula vertices&#34;</span><span class="o">)</span>
    <span class="k">val</span> <span class="n">config</span> <span class="k">=</span>
      <span class="nc">NebulaConnectionConfig</span>
        <span class="o">.</span><span class="n">builder</span><span class="o">()</span>
        <span class="o">.</span><span class="n">withMetaAddress</span><span class="o">(</span><span class="s">&#34;metad0:9559,metad1:9559,metad2:9559&#34;</span><span class="o">)</span>
        <span class="o">.</span><span class="n">withConenctionRetry</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span>
        <span class="o">.</span><span class="n">build</span><span class="o">()</span>
    <span class="k">val</span> <span class="n">nebulaReadVertexConfig</span><span class="k">:</span> <span class="kt">ReadNebulaConfig</span> <span class="o">=</span> <span class="nc">ReadNebulaConfig</span>
      <span class="o">.</span><span class="n">builder</span><span class="o">()</span>
      <span class="o">.</span><span class="n">withSpace</span><span class="o">(</span><span class="s">&#34;basketballplayer&#34;</span><span class="o">)</span>
      <span class="o">.</span><span class="n">withLabel</span><span class="o">(</span><span class="s">&#34;player&#34;</span><span class="o">)</span>
      <span class="o">.</span><span class="n">withNoColumn</span><span class="o">(</span><span class="kc">false</span><span class="o">)</span>
      <span class="o">.</span><span class="n">withReturnCols</span><span class="o">(</span><span class="nc">List</span><span class="o">(</span><span class="s">&#34;name&#34;</span><span class="o">,</span> <span class="s">&#34;age&#34;</span><span class="o">))</span>
      <span class="o">.</span><span class="n">withLimit</span><span class="o">(</span><span class="mi">10</span><span class="o">)</span>
      <span class="o">.</span><span class="n">withPartitionNum</span><span class="o">(</span><span class="mi">10</span><span class="o">)</span>
      <span class="o">.</span><span class="n">build</span><span class="o">()</span>
    <span class="k">val</span> <span class="n">vertex</span> <span class="k">=</span> <span class="n">spark</span><span class="o">.</span><span class="n">read</span><span class="o">.</span><span class="n">nebula</span><span class="o">(</span><span class="n">config</span><span class="o">,</span> <span class="n">nebulaReadVertexConfig</span><span class="o">).</span><span class="n">loadVerticesToDF</span><span class="o">()</span>
    <span class="n">vertex</span><span class="o">.</span><span class="n">printSchema</span><span class="o">()</span>
    <span class="n">vertex</span><span class="o">.</span><span class="n">show</span><span class="o">(</span><span class="mi">20</span><span class="o">)</span>
    <span class="n">println</span><span class="o">(</span><span class="s">&#34;vertex count: &#34;</span> <span class="o">+</span> <span class="n">vertex</span><span class="o">.</span><span class="n">count</span><span class="o">())</span>
  <span class="o">}</span>

  <span class="k">def</span> <span class="n">readEdges</span><span class="o">(</span><span class="n">spark</span><span class="k">:</span> <span class="kt">SparkSession</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
    <span class="nc">LOG</span><span class="o">.</span><span class="n">info</span><span class="o">(</span><span class="s">&#34;start to read nebula edges&#34;</span><span class="o">)</span>

    <span class="k">val</span> <span class="n">config</span> <span class="k">=</span>
      <span class="nc">NebulaConnectionConfig</span>
        <span class="o">.</span><span class="n">builder</span><span class="o">()</span>
        <span class="o">.</span><span class="n">withMetaAddress</span><span class="o">(</span><span class="s">&#34;metad0:9559,metad1:9559,metad2:9559&#34;</span><span class="o">)</span>
        <span class="o">.</span><span class="n">withTimeout</span><span class="o">(</span><span class="mi">6000</span><span class="o">)</span>
        <span class="o">.</span><span class="n">withConenctionRetry</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span>
        <span class="o">.</span><span class="n">build</span><span class="o">()</span>
    <span class="k">val</span> <span class="n">nebulaReadEdgeConfig</span><span class="k">:</span> <span class="kt">ReadNebulaConfig</span> <span class="o">=</span> <span class="nc">ReadNebulaConfig</span>
      <span class="o">.</span><span class="n">builder</span><span class="o">()</span>
      <span class="o">.</span><span class="n">withSpace</span><span class="o">(</span><span class="s">&#34;basketballplayer&#34;</span><span class="o">)</span>
      <span class="o">.</span><span class="n">withLabel</span><span class="o">(</span><span class="s">&#34;follow&#34;</span><span class="o">)</span>
      <span class="o">.</span><span class="n">withNoColumn</span><span class="o">(</span><span class="kc">false</span><span class="o">)</span>
      <span class="o">.</span><span class="n">withReturnCols</span><span class="o">(</span><span class="nc">List</span><span class="o">(</span><span class="s">&#34;degree&#34;</span><span class="o">))</span>
      <span class="o">.</span><span class="n">withLimit</span><span class="o">(</span><span class="mi">10</span><span class="o">)</span>
      <span class="o">.</span><span class="n">withPartitionNum</span><span class="o">(</span><span class="mi">10</span><span class="o">)</span>
      <span class="o">.</span><span class="n">build</span><span class="o">()</span>
    <span class="k">val</span> <span class="n">edge</span> <span class="k">=</span> <span class="n">spark</span><span class="o">.</span><span class="n">read</span><span class="o">.</span><span class="n">nebula</span><span class="o">(</span><span class="n">config</span><span class="o">,</span> <span class="n">nebulaReadEdgeConfig</span><span class="o">).</span><span class="n">loadEdgesToDF</span><span class="o">()</span>
    <span class="n">edge</span><span class="o">.</span><span class="n">printSchema</span><span class="o">()</span>
    <span class="n">edge</span><span class="o">.</span><span class="n">show</span><span class="o">(</span><span class="mi">20</span><span class="o">)</span>
    <span class="n">println</span><span class="o">(</span><span class="s">&#34;edge count: &#34;</span> <span class="o">+</span> <span class="n">edge</span><span class="o">.</span><span class="n">count</span><span class="o">())</span>
  <span class="o">}</span>

<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Then build it:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">cd</span> example
/usr/lib/mvn/bin/mvn install -Dgpg.skip -Dmaven.javadoc.skip<span class="o">=</span><span class="nb">true</span> -Dmaven.test.skip<span class="o">=</span><span class="nb">true</span>
</code></pre></td></tr></table>
</div>
</div><p>Execute it on spark:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">/spark/bin/spark-submit --master <span class="s2">&#34;local&#34;</span> <span class="se">\
</span><span class="se"></span>    --class com.vesoft.nebula.examples.connector.NebulaSparkReaderExample <span class="se">\
</span><span class="se"></span>    --driver-memory 16g target/example-3.0-SNAPSHOT.jar
</code></pre></td></tr></table>
</div>
</div><p>And the result should include:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">22/04/19 07:29:34 INFO DAGScheduler: Job 1 finished: show at NebulaSparkReaderExample.scala:57, took 0.199310 s
+---------+------------------+---+
|_vertexId|              name|age|
+---------+------------------+---+
|player105|       Danny Green| 31|
|player109|    Tiago Splitter| 34|
|player111|        David West| 38|
|player118| Russell Westbrook| 30|
|player143|Kristaps Porzingis| 23|
|player114|     Tracy McGrady| 39|
|player150|       Luka Doncic| 20|
|player103|          Rudy Gay| 32|
|player113|   Dejounte Murray| 29|
|player121|        Chris Paul| 33|
|player128|   Carmelo Anthony| 34|
|player130|       Joel Embiid| 25|
|player136|        Steve Nash| 45|
|player108|        Boris Diaw| 36|
|player122|    DeAndre Jordan| 30|
|player123|       Ricky Rubio| 28|
|player139|        Marc Gasol| 34|
|player142|     Klay Thompson| 29|
|player145|      JaVale McGee| 31|
|player102| LaMarcus Aldridge| 33|
+---------+------------------+---+
only showing top 20 rows

22/04/19 07:29:36 INFO DAGScheduler: Job 4 finished: show at NebulaSparkReaderExample.scala:82, took 0.135543 s
+---------+---------+-----+------+
|   _srcId|   _dstId|_rank|degree|
+---------+---------+-----+------+
|player105|player100|    0|    70|
|player105|player104|    0|    83|
|player105|player116|    0|    80|
|player109|player100|    0|    80|
|player109|player125|    0|    90|
|player118|player120|    0|    90|
|player118|player131|    0|    90|
|player143|player150|    0|    90|
|player114|player103|    0|    90|
|player114|player115|    0|    90|
|player114|player140|    0|    90|
|player150|player120|    0|    80|
|player150|player137|    0|    90|
|player150|player143|    0|    90|
|player103|player102|    0|    70|
|player113|player100|    0|    99|
|player113|player101|    0|    99|
|player113|player104|    0|    99|
|player113|player105|    0|    99|
|player113|player106|    0|    99|
+---------+---------+-----+------+
only showing top 20 rows
</code></pre></td></tr></table>
</div>
</div><p>And actually there are more examples under the repo, especially one for GraphX, you could try exploring youself for that part. Please be noted in GraphX it assumed vertex ID to be in numeric type, thus for string typed vertex ID case a convertion on the fly is needed, please refer to <a href="https://github.com/vesoft-inc/nebula-algorithm/blob/a82d7092d928a2f3abc45a727c24afb888ff8e4f/example/src/main/scala/com/vesoft/nebula/algorithm/PageRankExample.scala#L31" target="_blank" rel="noopener noreffer">the example in Nebula Algorithom</a> on how to mitigate that.</p>
<h2 id="exchange" class="headerLink">
    <a href="#exchange" class="header-mark"></a>3 Exchange</h2><ul>
<li>Codebase: <a href="https://github.com/vesoft-inc/nebula-exchange/" target="_blank" rel="noopener noreffer">https://github.com/vesoft-inc/nebula-exchange/</a></li>
<li>Documentation: <a href="https://docs.nebula-graph.io/3.0.2/nebula-exchange/about-exchange/ex-ug-what-is-exchange/" target="_blank" rel="noopener noreffer">https://docs.nebula-graph.io/3.0.2/nebula-exchange/about-exchange/ex-ug-what-is-exchange/</a> (it&rsquo;s versioned, as for now, I put the lastest released version 3.0.2 here)</li>
<li>Jar Package: <a href="https://github.com/vesoft-inc/nebula-exchange/releases" target="_blank" rel="noopener noreffer">https://github.com/vesoft-inc/nebula-exchange/releases</a></li>
<li>Configuration Examples: <a href="https://github.com/vesoft-inc/nebula-exchange/blob/master/exchange-common/src/test/resources/application.conf" target="_blank" rel="noopener noreffer">exchange-common/src/test/resources/application.conf</a></li>
</ul>
<p>Nebula Exchange is a Spark Lib/App to read data from multiple sources, then, write to either Nebula Graph directly or into Nebula Graph <a href="https://docs.nebula-graph.io/3.0.2/nebula-exchange/use-exchange/ex-ug-import-from-sst/#step_5_import_the_sst_file" target="_blank" rel="noopener noreffer">SST Files</a>.</p>
<p></p>
<p>The way to leverage Nebula Exchange is only to firstly create the configuration files to let exchange know how data should be fetched and written, then call the exchange package with the conf file specified.</p>
<p>Now let&rsquo;s do a hands on test with the same envrioment created in last chapter.</p>
<h3 id="hands-on-exchange" class="headerLink">
    <a href="#hands-on-exchange" class="header-mark"></a>3.1 Hands-on Exchange</h3><p>Here, we are using Exchange to consume data source from a CSV file, where first column is Vertex ID, and second, third to be properties of &ldquo;name&rdquo; and &ldquo;age&rdquo;.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">player800,<span class="s2">&#34;Foo Bar&#34;</span>,23
player801,<span class="s2">&#34;Another Name&#34;</span>,21
</code></pre></td></tr></table>
</div>
</div><ul>
<li>Let&rsquo;s get into the spark container created in last chapter, and download the Jar package of Nebula Exchange:</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">docker <span class="nb">exec</span> -it spark-master bash
<span class="nb">cd</span> /root/

wget https://github.com/vesoft-inc/nebula-exchange/releases/download/v3.0.0/nebula-exchange_spark_2.4-3.0.0.jar

</code></pre></td></tr></table>
</div>
</div><ul>
<li>Create a conf file named <code>exchange.conf</code> in format <code>HOCON</code>, where:
<ul>
<li>under <code>.nebula</code>, information regarding Nebula Graph Cluster were configured</li>
<li>under <code>.tags</code>, information regarding Vertecies like how required fields are reflected to our data source(here it&rsquo;s CSV file) were configured</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span><span class="lnt">88
</span><span class="lnt">89
</span><span class="lnt">90
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">{
  # Spark relation config
  spark: {
    app: {
      name: Nebula Exchange
    }

    master:local

    driver: {
      cores: 1
      maxResultSize: 1G
    }

    executor: {
        memory: 1G
    }

    cores:{
      max: 16
    }
  }

  # Nebula Graph relation config
  nebula: {
    address:{
      graph:[&#34;graphd:9669&#34;]
      meta:[&#34;metad0:9559&#34;, &#34;metad1:9559&#34;, &#34;metad2:9559&#34;]
    }
    user: root
    pswd: nebula
    space: basketballplayer

    # parameters for SST import, not required
    path:{
        local:&#34;/tmp&#34;
        remote:&#34;/sst&#34;
        hdfs.namenode: &#34;hdfs://localhost:9000&#34;
    }

    # nebula client connection parameters
    connection {
      # socket connect &amp; execute timeout, unit: millisecond
      timeout: 30000
    }

    error: {
      # max number of failures, if the number of failures is bigger than max, then exit the application.
      max: 32
      # failed import job will be recorded in output path
      output: /tmp/errors
    }

    # use google&#39;s RateLimiter to limit the requests send to NebulaGraph
    rate: {
      # the stable throughput of RateLimiter
      limit: 1024
      # Acquires a permit from RateLimiter, unit: MILLISECONDS
      # if it can&#39;t be obtained within the specified timeout, then give up the request.
      timeout: 1000
    }
  }

  # Processing tags
  # There are tag config examples for different dataSources.
  tags: [

    # HDFS csv
    # Import mode is client, just change type.sink to sst if you want to use client import mode.
    {
      name: player
      type: {
        source: csv
        sink: client
      }
      path: &#34;file:///root/player.csv&#34;
      # if your csv file has no header, then use _c0,_c1,_c2,.. to indicate fields
      fields: [_c1, _c2]
      nebula.fields: [name, age]
      vertex: {
        field:_c0
      }
      separator: &#34;,&#34;
      header: false
      batch: 256
      partition: 32
    }

  ]
}
</code></pre></td></tr></table>
</div>
</div><ul>
<li>Finally, let&rsquo;s create <code>player.csv</code> and <code>exchange.conf</code>, it should be listed as the following:</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># ls -l</span>

-rw-r--r--    <span class="m">1</span> root     root          <span class="m">1912</span> Apr <span class="m">19</span> 08:21 exchange.conf
-rw-r--r--    <span class="m">1</span> root     root     <span class="m">157814140</span> Apr <span class="m">19</span> 08:17 nebula-exchange_spark_2.4-3.0.0.jar
-rw-r--r--    <span class="m">1</span> root     root            <span class="m">52</span> Apr <span class="m">19</span> 08:06 player.csv
</code></pre></td></tr></table>
</div>
</div><ul>
<li>And we could call the exchange as:</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">/spark/bin/spark-submit --master <span class="nb">local</span> <span class="se">\
</span><span class="se"></span>    --class com.vesoft.nebula.exchange.Exchange nebula-exchange_spark_2.4-3.0.0.jar <span class="se">\
</span><span class="se"></span>    -c exchange.conf
</code></pre></td></tr></table>
</div>
</div><p>And the result should be like</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">...
22/04/19 08:22:08 INFO Exchange$: import for tag player cost time: 1.32 s
22/04/19 08:22:08 INFO Exchange$: Client-Import: batchSuccess.player: 2
22/04/19 08:22:08 INFO Exchange$: Client-Import: batchFailure.player: 0
...
</code></pre></td></tr></table>
</div>
</div><p>Please refer to documentation and conf examples for more datasources. For hands on Exchange writing to SST Files, you could refer to both Documentation and <a href="https://www.siwei.io/nebula-exchange-sst-2.x/" target="_blank" rel="noopener noreffer">Nebula Exchange SST 2.x Hands-on Guide</a>.</p>
<h2 id="algorithm" class="headerLink">
    <a href="#algorithm" class="header-mark"></a>4 Algorithm</h2><ul>
<li>Codebase: <a href="https://github.com/vesoft-inc/nebula-exchange/" target="_blank" rel="noopener noreffer">https://github.com/vesoft-inc/nebula-exchange/</a></li>
<li>Documentation: <a href="https://docs.nebula-graph.io/3.0.2/nebula-exchange/about-exchange/ex-ug-what-is-exchange/" target="_blank" rel="noopener noreffer">https://docs.nebula-graph.io/3.0.2/nebula-exchange/about-exchange/ex-ug-what-is-exchange/</a> (it&rsquo;s versioned, as for now, I put the lastest released version 3.0.2 here)</li>
<li>Jar Package: <a href="https://github.com/vesoft-inc/nebula-exchange/releases" target="_blank" rel="noopener noreffer">https://github.com/vesoft-inc/nebula-exchange/releases</a></li>
<li>Calling Algorithm in code examples: <a href="https://github.com/vesoft-inc/nebula-exchange/blob/master/exchange-common/src/test/resources/application.conf" target="_blank" rel="noopener noreffer">exchange-common/src/test/resources/application.conf</a></li>
<li>Conf exampls for calling with submit: <a href="https://github.com/vesoft-inc/nebula-algorithm/blob/master/nebula-algorithm/src/main/resources/application.conf" target="_blank" rel="noopener noreffer">nebula-algorithm/src/main/resources/application.conf</a></li>
</ul>
<h3 id="calling-with-spark-submit" class="headerLink">
    <a href="#calling-with-spark-submit" class="header-mark"></a>4.1 Calling with spark submit</h3><p>When we call Nebula Algorithm with spark submit, on how to use perspective, it is quite similar to Exchange. <a href="https://www.siwei.io/en/nebula-livejournal/" target="_blank" rel="noopener noreffer">This post</a> already showed us how to do that in actions.</p>
<h3 id="calling-as-a-lib-in-code" class="headerLink">
    <a href="#calling-as-a-lib-in-code" class="header-mark"></a>4.2 Calling as a lib in code</h3><p>On the other hands, we could call Nebula Algorithm in spark as a Spark Lib, the gain will be:</p>
<ol>
<li>More control/customization on the output format of the algorithm</li>
<li>Possbile to perform algorithm for non-numerical vertex ID cases, see <a href="https://github.com/vesoft-inc/nebula-algorithm/blob/a82d7092d928a2f3abc45a727c24afb888ff8e4f/example/src/main/scala/com/vesoft/nebula/algorithm/PageRankExample.scala#L48" target="_blank" rel="noopener noreffer">here</a></li>
</ol>
<h2 id="pyspark-for-nebula-graph" class="headerLink">
    <a href="#pyspark-for-nebula-graph" class="header-mark"></a>5 PySpark for Nebula Graph</h2><p>PySpark comes with capability to call java/scala packages inside python, thus it&rsquo;s also quite easy to use Spark Connector with Python.</p>
<p>Here I am doing this from the pyspark entrypoint in <code>/spark/bin/pyspark</code>, with connector&rsquo;s Jar package specified with <code>--driver-class-path</code> and <code>--jars</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">docker</span> <span class="n">exec</span> <span class="o">-</span><span class="n">it</span> <span class="n">spark</span><span class="o">-</span><span class="n">master</span><span class="o">-</span><span class="mi">0</span> <span class="n">bash</span>
<span class="n">cd</span> <span class="n">root</span>
<span class="n">wget</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">repo1</span><span class="o">.</span><span class="n">maven</span><span class="o">.</span><span class="n">org</span><span class="o">/</span><span class="n">maven2</span><span class="o">/</span><span class="n">com</span><span class="o">/</span><span class="n">vesoft</span><span class="o">/</span><span class="n">nebula</span><span class="o">-</span><span class="n">spark</span><span class="o">-</span><span class="n">connector</span><span class="o">/</span><span class="mf">3.0.0</span><span class="o">/</span><span class="n">nebula</span><span class="o">-</span><span class="n">spark</span><span class="o">-</span><span class="n">connector</span><span class="o">-</span><span class="mf">3.0.0</span><span class="o">.</span><span class="n">jar</span>

<span class="o">/</span><span class="n">spark</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">pyspark</span> <span class="o">--</span><span class="n">driver</span><span class="o">-</span><span class="n">class</span><span class="o">-</span><span class="n">path</span> <span class="n">nebula</span><span class="o">-</span><span class="n">spark</span><span class="o">-</span><span class="n">connector</span><span class="o">-</span><span class="mf">3.0.0</span><span class="o">.</span><span class="n">jar</span> <span class="o">--</span><span class="n">jars</span> <span class="n">nebula</span><span class="o">-</span><span class="n">spark</span><span class="o">-</span><span class="n">connector</span><span class="o">-</span><span class="mf">3.0.0</span><span class="o">.</span><span class="n">jar</span>
</code></pre></td></tr></table>
</div>
</div><p>Then, rather than pass <code>NebulaConnectionConfig</code> and <code>ReadNebulaConfig</code> to <code>spark.read.nebula</code>, we should instead call <code>spark.read.format(&quot;com.vesoft.nebula.connector.NebulaDataSource&quot;)</code>.</p>
<p>Voilà!</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">spark</span><span class="o">.</span><span class="n">read</span><span class="o">.</span><span class="n">format</span><span class="p">(</span>
  <span class="s2">&#34;com.vesoft.nebula.connector.NebulaDataSource&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">option</span><span class="p">(</span>
    <span class="s2">&#34;type&#34;</span><span class="p">,</span> <span class="s2">&#34;vertex&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">option</span><span class="p">(</span>
    <span class="s2">&#34;spaceName&#34;</span><span class="p">,</span> <span class="s2">&#34;basketballplayer&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">option</span><span class="p">(</span>
    <span class="s2">&#34;label&#34;</span><span class="p">,</span> <span class="s2">&#34;player&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">option</span><span class="p">(</span>
    <span class="s2">&#34;returnCols&#34;</span><span class="p">,</span> <span class="s2">&#34;name,age&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">option</span><span class="p">(</span>
    <span class="s2">&#34;metaAddress&#34;</span><span class="p">,</span> <span class="s2">&#34;metad0:9559&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">option</span><span class="p">(</span>
    <span class="s2">&#34;partitionNumber&#34;</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">load</span><span class="p">()</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">df</span><span class="o">.</span><span class="n">show</span><span class="p">(</span><span class="n">n</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="o">+---------+--------------+---+</span>
<span class="o">|</span><span class="n">_vertexId</span><span class="o">|</span>          <span class="n">name</span><span class="o">|</span><span class="n">age</span><span class="o">|</span>
<span class="o">+---------+--------------+---+</span>
<span class="o">|</span><span class="n">player105</span><span class="o">|</span>   <span class="n">Danny</span> <span class="n">Green</span><span class="o">|</span> <span class="mi">31</span><span class="o">|</span>
<span class="o">|</span><span class="n">player109</span><span class="o">|</span><span class="n">Tiago</span> <span class="n">Splitter</span><span class="o">|</span> <span class="mi">34</span><span class="o">|</span>
<span class="o">+---------+--------------+---+</span>
<span class="n">only</span> <span class="n">showing</span> <span class="n">top</span> <span class="mi">2</span> <span class="n">rows</span>
</code></pre></td></tr></table>
</div>
</div><p>Below are how I figured out how to make this work with almost zero scala knowledge :-P.</p>
<ul>
<li><a href="https://github.com/vesoft-inc/nebula-spark-connector/blob/master/nebula-spark-connector/src/main/scala/com/vesoft/nebula/connector/package.scala" target="_blank" rel="noopener noreffer">How reader should be called</a></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-scala" data-lang="scala">      <span class="k">def</span> <span class="n">loadVerticesToDF</span><span class="o">()</span><span class="k">:</span> <span class="kt">DataFrame</span> <span class="o">=</span> <span class="o">{</span>
        <span class="n">assert</span><span class="o">(</span><span class="n">connectionConfig</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">readConfig</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">,</span>
               <span class="s">&#34;nebula config is not set, please call nebula() before loadVerticesToDF&#34;</span><span class="o">)</span>
        <span class="k">val</span> <span class="n">dfReader</span> <span class="k">=</span> <span class="n">reader</span>
          <span class="o">.</span><span class="n">format</span><span class="o">(</span><span class="n">classOf</span><span class="o">[</span><span class="kt">NebulaDataSource</span><span class="o">].</span><span class="n">getName</span><span class="o">)</span>
          <span class="o">.</span><span class="n">option</span><span class="o">(</span><span class="nc">NebulaOptions</span><span class="o">.</span><span class="nc">TYPE</span><span class="o">,</span> <span class="nc">DataTypeEnum</span><span class="o">.</span><span class="nc">VERTEX</span><span class="o">.</span><span class="n">toString</span><span class="o">)</span>
          <span class="o">.</span><span class="n">option</span><span class="o">(</span><span class="nc">NebulaOptions</span><span class="o">.</span><span class="nc">SPACE_NAME</span><span class="o">,</span> <span class="n">readConfig</span><span class="o">.</span><span class="n">getSpace</span><span class="o">)</span>
          <span class="o">.</span><span class="n">option</span><span class="o">(</span><span class="nc">NebulaOptions</span><span class="o">.</span><span class="nc">LABEL</span><span class="o">,</span> <span class="n">readConfig</span><span class="o">.</span><span class="n">getLabel</span><span class="o">)</span>
          <span class="o">.</span><span class="n">option</span><span class="o">(</span><span class="nc">NebulaOptions</span><span class="o">.</span><span class="nc">PARTITION_NUMBER</span><span class="o">,</span> <span class="n">readConfig</span><span class="o">.</span><span class="n">getPartitionNum</span><span class="o">)</span>
          <span class="o">.</span><span class="n">option</span><span class="o">(</span><span class="nc">NebulaOptions</span><span class="o">.</span><span class="nc">RETURN_COLS</span><span class="o">,</span> <span class="n">readConfig</span><span class="o">.</span><span class="n">getReturnCols</span><span class="o">.</span><span class="n">mkString</span><span class="o">(</span><span class="s">&#34;,&#34;</span><span class="o">))</span>
          <span class="o">.</span><span class="n">option</span><span class="o">(</span><span class="nc">NebulaOptions</span><span class="o">.</span><span class="nc">NO_COLUMN</span><span class="o">,</span> <span class="n">readConfig</span><span class="o">.</span><span class="n">getNoColumn</span><span class="o">)</span>
          <span class="o">.</span><span class="n">option</span><span class="o">(</span><span class="nc">NebulaOptions</span><span class="o">.</span><span class="nc">LIMIT</span><span class="o">,</span> <span class="n">readConfig</span><span class="o">.</span><span class="n">getLimit</span><span class="o">)</span>
          <span class="o">.</span><span class="n">option</span><span class="o">(</span><span class="nc">NebulaOptions</span><span class="o">.</span><span class="nc">META_ADDRESS</span><span class="o">,</span> <span class="n">connectionConfig</span><span class="o">.</span><span class="n">getMetaAddress</span><span class="o">)</span>
          <span class="o">.</span><span class="n">option</span><span class="o">(</span><span class="nc">NebulaOptions</span><span class="o">.</span><span class="nc">TIMEOUT</span><span class="o">,</span> <span class="n">connectionConfig</span><span class="o">.</span><span class="n">getTimeout</span><span class="o">)</span>
          <span class="o">.</span><span class="n">option</span><span class="o">(</span><span class="nc">NebulaOptions</span><span class="o">.</span><span class="nc">CONNECTION_RETRY</span><span class="o">,</span> <span class="n">connectionConfig</span><span class="o">.</span><span class="n">getConnectionRetry</span><span class="o">)</span>
          <span class="o">.</span><span class="n">option</span><span class="o">(</span><span class="nc">NebulaOptions</span><span class="o">.</span><span class="nc">EXECUTION_RETRY</span><span class="o">,</span> <span class="n">connectionConfig</span><span class="o">.</span><span class="n">getExecRetry</span><span class="o">)</span>
          <span class="o">.</span><span class="n">option</span><span class="o">(</span><span class="nc">NebulaOptions</span><span class="o">.</span><span class="nc">ENABLE_META_SSL</span><span class="o">,</span> <span class="n">connectionConfig</span><span class="o">.</span><span class="n">getEnableMetaSSL</span><span class="o">)</span>
          <span class="o">.</span><span class="n">option</span><span class="o">(</span><span class="nc">NebulaOptions</span><span class="o">.</span><span class="nc">ENABLE_STORAGE_SSL</span><span class="o">,</span> <span class="n">connectionConfig</span><span class="o">.</span><span class="n">getEnableStorageSSL</span><span class="o">)</span>
  
        <span class="k">if</span> <span class="o">(</span><span class="n">connectionConfig</span><span class="o">.</span><span class="n">getEnableStorageSSL</span> <span class="o">||</span> <span class="n">connectionConfig</span><span class="o">.</span><span class="n">getEnableMetaSSL</span><span class="o">)</span> <span class="o">{</span>
          <span class="n">dfReader</span><span class="o">.</span><span class="n">option</span><span class="o">(</span><span class="nc">NebulaOptions</span><span class="o">.</span><span class="nc">SSL_SIGN_TYPE</span><span class="o">,</span> <span class="n">connectionConfig</span><span class="o">.</span><span class="n">getSignType</span><span class="o">)</span>
          <span class="nc">SSLSignType</span><span class="o">.</span><span class="n">withName</span><span class="o">(</span><span class="n">connectionConfig</span><span class="o">.</span><span class="n">getSignType</span><span class="o">)</span> <span class="k">match</span> <span class="o">{</span>
            <span class="k">case</span> <span class="nc">SSLSignType</span><span class="o">.</span><span class="nc">CA</span> <span class="k">=&gt;</span>
              <span class="n">dfReader</span><span class="o">.</span><span class="n">option</span><span class="o">(</span><span class="nc">NebulaOptions</span><span class="o">.</span><span class="nc">CA_SIGN_PARAM</span><span class="o">,</span> <span class="n">connectionConfig</span><span class="o">.</span><span class="n">getCaSignParam</span><span class="o">)</span>
            <span class="k">case</span> <span class="nc">SSLSignType</span><span class="o">.</span><span class="nc">SELF</span> <span class="k">=&gt;</span>
              <span class="n">dfReader</span><span class="o">.</span><span class="n">option</span><span class="o">(</span><span class="nc">NebulaOptions</span><span class="o">.</span><span class="nc">SELF_SIGN_PARAM</span><span class="o">,</span> <span class="n">connectionConfig</span><span class="o">.</span><span class="n">getSelfSignParam</span><span class="o">)</span>
          <span class="o">}</span>
        <span class="o">}</span>
  
        <span class="n">dfReader</span><span class="o">.</span><span class="n">load</span><span class="o">()</span>
      <span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li><a href="https://github.com/vesoft-inc/nebula-spark-connector/blob/master/nebula-spark-connector/src/main/scala/com/vesoft/nebula/connector/NebulaOptions.scala" target="_blank" rel="noopener noreffer">How Option String should be like</a></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-scala" data-lang="scala"><span class="k">#</span> 

<span class="k">object</span> <span class="nc">NebulaOptions</span> <span class="o">{</span>

  <span class="cm">/** nebula common config */</span>
  <span class="k">val</span> <span class="nc">SPACE_NAME</span><span class="k">:</span> <span class="kt">String</span>    <span class="o">=</span> <span class="s">&#34;spaceName&#34;</span>
  <span class="k">val</span> <span class="nc">META_ADDRESS</span><span class="k">:</span> <span class="kt">String</span>  <span class="o">=</span> <span class="s">&#34;metaAddress&#34;</span>
  <span class="k">val</span> <span class="nc">GRAPH_ADDRESS</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">&#34;graphAddress&#34;</span>
  <span class="k">val</span> <span class="nc">TYPE</span><span class="k">:</span> <span class="kt">String</span>          <span class="o">=</span> <span class="s">&#34;type&#34;</span>
  <span class="k">val</span> <span class="nc">LABEL</span><span class="k">:</span> <span class="kt">String</span>         <span class="o">=</span> <span class="s">&#34;label&#34;</span>

  <span class="cm">/** connection config */</span>
  <span class="k">val</span> <span class="nc">TIMEOUT</span><span class="k">:</span> <span class="kt">String</span>            <span class="o">=</span> <span class="s">&#34;timeout&#34;</span>
  <span class="k">val</span> <span class="nc">CONNECTION_RETRY</span><span class="k">:</span> <span class="kt">String</span>   <span class="o">=</span> <span class="s">&#34;connectionRetry&#34;</span>
  <span class="k">val</span> <span class="nc">EXECUTION_RETRY</span><span class="k">:</span> <span class="kt">String</span>    <span class="o">=</span> <span class="s">&#34;executionRetry&#34;</span>
  <span class="k">val</span> <span class="nc">RATE_TIME_OUT</span><span class="k">:</span> <span class="kt">String</span>      <span class="o">=</span> <span class="s">&#34;reteTimeOut&#34;</span>
  <span class="k">val</span> <span class="nc">USER_NAME</span><span class="k">:</span> <span class="kt">String</span>          <span class="o">=</span> <span class="s">&#34;user&#34;</span>
  <span class="k">val</span> <span class="nc">PASSWD</span><span class="k">:</span> <span class="kt">String</span>             <span class="o">=</span> <span class="s">&#34;passwd&#34;</span>
  <span class="k">val</span> <span class="nc">ENABLE_GRAPH_SSL</span><span class="k">:</span> <span class="kt">String</span>   <span class="o">=</span> <span class="s">&#34;enableGraphSSL&#34;</span>
  <span class="k">val</span> <span class="nc">ENABLE_META_SSL</span><span class="k">:</span> <span class="kt">String</span>    <span class="o">=</span> <span class="s">&#34;enableMetaSSL&#34;</span>
  <span class="k">val</span> <span class="nc">ENABLE_STORAGE_SSL</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">&#34;enableStorageSSL&#34;</span>
  <span class="k">val</span> <span class="nc">SSL_SIGN_TYPE</span><span class="k">:</span> <span class="kt">String</span>      <span class="o">=</span> <span class="s">&#34;sslSignType&#34;</span>
  <span class="k">val</span> <span class="nc">CA_SIGN_PARAM</span><span class="k">:</span> <span class="kt">String</span>      <span class="o">=</span> <span class="s">&#34;caSignParam&#34;</span>
  <span class="k">val</span> <span class="nc">SELF_SIGN_PARAM</span><span class="k">:</span> <span class="kt">String</span>    <span class="o">=</span> <span class="s">&#34;selfSignParam&#34;</span>

  <span class="cm">/** read config */</span>
  <span class="k">val</span> <span class="nc">RETURN_COLS</span><span class="k">:</span> <span class="kt">String</span>      <span class="o">=</span> <span class="s">&#34;returnCols&#34;</span>
  <span class="k">val</span> <span class="nc">NO_COLUMN</span><span class="k">:</span> <span class="kt">String</span>        <span class="o">=</span> <span class="s">&#34;noColumn&#34;</span>
  <span class="k">val</span> <span class="nc">PARTITION_NUMBER</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">&#34;partitionNumber&#34;</span>
  <span class="k">val</span> <span class="nc">LIMIT</span><span class="k">:</span> <span class="kt">String</span>            <span class="o">=</span> <span class="s">&#34;limit&#34;</span>

  <span class="cm">/** write config */</span>
  <span class="k">val</span> <span class="nc">RATE_LIMIT</span><span class="k">:</span> <span class="kt">String</span>   <span class="o">=</span> <span class="s">&#34;rateLimit&#34;</span>
  <span class="k">val</span> <span class="nc">VID_POLICY</span><span class="k">:</span> <span class="kt">String</span>   <span class="o">=</span> <span class="s">&#34;vidPolicy&#34;</span>
  <span class="k">val</span> <span class="nc">SRC_POLICY</span><span class="k">:</span> <span class="kt">String</span>   <span class="o">=</span> <span class="s">&#34;srcPolicy&#34;</span>
  <span class="k">val</span> <span class="nc">DST_POLICY</span><span class="k">:</span> <span class="kt">String</span>   <span class="o">=</span> <span class="s">&#34;dstPolicy&#34;</span>
  <span class="k">val</span> <span class="nc">VERTEX_FIELD</span>         <span class="k">=</span> <span class="s">&#34;vertexField&#34;</span>
  <span class="k">val</span> <span class="nc">SRC_VERTEX_FIELD</span>     <span class="k">=</span> <span class="s">&#34;srcVertexField&#34;</span>
  <span class="k">val</span> <span class="nc">DST_VERTEX_FIELD</span>     <span class="k">=</span> <span class="s">&#34;dstVertexField&#34;</span>
  <span class="k">val</span> <span class="nc">RANK_FIELD</span>           <span class="k">=</span> <span class="s">&#34;rankFiled&#34;</span>
  <span class="k">val</span> <span class="nc">BATCH</span><span class="k">:</span> <span class="kt">String</span>        <span class="o">=</span> <span class="s">&#34;batch&#34;</span>
  <span class="k">val</span> <span class="nc">VID_AS_PROP</span><span class="k">:</span> <span class="kt">String</span>  <span class="o">=</span> <span class="s">&#34;vidAsProp&#34;</span>
  <span class="k">val</span> <span class="nc">SRC_AS_PROP</span><span class="k">:</span> <span class="kt">String</span>  <span class="o">=</span> <span class="s">&#34;srcAsProp&#34;</span>
  <span class="k">val</span> <span class="nc">DST_AS_PROP</span><span class="k">:</span> <span class="kt">String</span>  <span class="o">=</span> <span class="s">&#34;dstAsProp&#34;</span>
  <span class="k">val</span> <span class="nc">RANK_AS_PROP</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">&#34;rankAsProp&#34;</span>
  <span class="k">val</span> <span class="nc">WRITE_MODE</span><span class="k">:</span> <span class="kt">String</span>   <span class="o">=</span> <span class="s">&#34;writeMode&#34;</span>

  <span class="k">val</span> <span class="nc">DEFAULT_TIMEOUT</span><span class="k">:</span> <span class="kt">Int</span>            <span class="o">=</span> <span class="mi">3000</span>
  <span class="k">val</span> <span class="nc">DEFAULT_CONNECTION_TIMEOUT</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">3000</span>
  <span class="k">val</span> <span class="nc">DEFAULT_CONNECTION_RETRY</span><span class="k">:</span> <span class="kt">Int</span>   <span class="o">=</span> <span class="mi">3</span>
  <span class="k">val</span> <span class="nc">DEFAULT_EXECUTION_RETRY</span><span class="k">:</span> <span class="kt">Int</span>    <span class="o">=</span> <span class="mi">3</span>
  <span class="k">val</span> <span class="nc">DEFAULT_USER_NAME</span><span class="k">:</span> <span class="kt">String</span>       <span class="o">=</span> <span class="s">&#34;root&#34;</span>
  <span class="k">val</span> <span class="nc">DEFAULT_PASSWD</span><span class="k">:</span> <span class="kt">String</span>          <span class="o">=</span> <span class="s">&#34;nebula&#34;</span>

  <span class="k">val</span> <span class="nc">DEFAULT_ENABLE_GRAPH_SSL</span><span class="k">:</span> <span class="kt">Boolean</span>   <span class="o">=</span> <span class="kc">false</span>
  <span class="k">val</span> <span class="nc">DEFAULT_ENABLE_META_SSL</span><span class="k">:</span> <span class="kt">Boolean</span>    <span class="o">=</span> <span class="kc">false</span>
  <span class="k">val</span> <span class="nc">DEFAULT_ENABLE_STORAGE_SSL</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="kc">false</span>

  <span class="k">val</span> <span class="nc">DEFAULT_LIMIT</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">1000</span>

  <span class="k">val</span> <span class="nc">DEFAULT_RATE_LIMIT</span><span class="k">:</span> <span class="kt">Long</span>    <span class="o">=</span> <span class="mi">1024L</span>
  <span class="k">val</span> <span class="nc">DEFAULT_RATE_TIME_OUT</span><span class="k">:</span> <span class="kt">Long</span> <span class="o">=</span> <span class="mi">100</span>
  <span class="k">val</span> <span class="nc">DEFAULT_POLICY</span><span class="k">:</span> <span class="kt">String</span>      <span class="o">=</span> <span class="kc">null</span>
  <span class="k">val</span> <span class="nc">DEFAULT_BATCH</span><span class="k">:</span> <span class="kt">Int</span>          <span class="o">=</span> <span class="mi">1000</span>

  <span class="k">val</span> <span class="nc">DEFAULT_WRITE_MODE</span> <span class="k">=</span> <span class="nc">WriteMode</span><span class="o">.</span><span class="nc">INSERT</span>

  <span class="k">val</span> <span class="nc">EMPTY_STRING</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">&#34;&#34;</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li><a href="https://databricks.com/session/how-to-connect-spark-to-your-own-datasource" target="_blank" rel="noopener noreffer">https://databricks.com/session/how-to-connect-spark-to-your-own-datasource</a></li>
</ul>
<blockquote>
<p>feature image credit: <a href="https://unsplash.com/photos/KABfjuSOx74" target="_blank" rel="noopener noreffer">Sander</a></p>
</blockquote>]]></description>
</item><item>
    <title>Nebula Graph on Pi</title>
    <link>https://siwei.io/en/nebula-graph-on-pi/</link>
    <pubDate>Wed, 23 Mar 2022 22:11:03 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/en/nebula-graph-on-pi/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>With the ARM64 Docker Image of Nebula Graph, it&rsquo;s actually quite easy to run it on SBC/Respberry Pi!</p>
</blockquote>
<h2 id="background" class="headerLink">
    <a href="#background" class="header-mark"></a>1 Background</h2><p>Recently, after Yee from Nebula Graph Community fixed ARM build on <a href="https://github.com/vesoft-inc/nebula-third-party/pull/37" target="_blank" rel="noopener noreffer">nebula-third-party#37</a>, we could play with Nebula Graph on M1 Chip Macbook. While, I didn&rsquo;t get the chance to run it on a SBC/Pi.</p>
<p>A couple of weeks before, in a twitter thread with <a href="https://twitter.com/laixintao" target="_blank" rel="noopener noreffer">@laixintao</a> and <a href="https://twitter.com/andelf/status/1504295476958404608" target="_blank" rel="noopener noreffer">@andelf</a> I decided to purchase a <a href="https://wiki.radxa.com/Rock3/" target="_blank" rel="noopener noreffer">Rock Pi 3A</a>:</p>
<p></p>
<p>And it looks nice!(Even come with a NPU inside)</p>
<p></p>
<h2 id="the-guide-of-running-nebula-graph-on-a-pi-sbc" class="headerLink">
    <a href="#the-guide-of-running-nebula-graph-on-a-pi-sbc" class="header-mark"></a>2 The Guide of running Nebula Graph on a Pi SBC</h2><blockquote>
<p>Actually, since v3.0.0, Nebula comes with a <a href="https://docs.nebula-graph.io/3.0.1/4.deployment-and-installation/standalone-deployment/" target="_blank" rel="noopener noreffer">standalone version</a>, which suits the deep edge deployment more, but today, I will only setup the cluster version as the Docker Image is out of box to be used. I will share more on standalone version in upcoming weeks.</p>
</blockquote>
<p>I put the Ubuntu Server installation steps in the appendix, and now I assumed we already have an ARM64 Linux up and running on a Pi SBC.</p>
<h3 id="step-0-install-docker-compose-on-pi" class="headerLink">
    <a href="#step-0-install-docker-compose-on-pi" class="header-mark"></a>2.1 Step 0, Install Docker-Compose on Pi</h3><p>I am using debian/ubuntu here, while it should be the same for other distros, referring to <a href="https://docs.docker.com/engine/install/" target="_blank" rel="noopener noreffer">https://docs.docker.com/engine/install/</a>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">sudo apt-get update
sudo apt-get install <span class="se">\
</span><span class="se"></span>    ca-certificates <span class="se">\
</span><span class="se"></span>    curl <span class="se">\
</span><span class="se"></span>    gnupg <span class="se">\
</span><span class="se"></span>    lsb-release

<span class="nb">echo</span> <span class="se">\
</span><span class="se"></span>  <span class="s2">&#34;deb [arch=</span><span class="k">$(</span>dpkg --print-architecture<span class="k">)</span><span class="s2"> signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
</span><span class="s2">  </span><span class="k">$(</span>lsb_release -cs<span class="k">)</span><span class="s2"> stable&#34;</span> <span class="p">|</span> sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null

sudo apt-get update
sudo apt-get install docker-ce docker-ce-cli containerd.io

<span class="c1"># follow https://docs.docker.com/engine/install/linux-postinstall/</span>
sudo groupadd docker
sudo usermod -aG docker <span class="nv">$USER</span>
<span class="nb">exit</span>
<span class="c1"># login again</span>
newgrp docker
</code></pre></td></tr></table>
</div>
</div><p>After Docker being installed, we install compose here, there could be issues encounterred from the Docker website on Compose installation. While, due to compose is just a python package, let&rsquo;s do it via python3-pip install:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">sudo apt-get install -y python3 python3-pip
sudo pip3 install docker-compose
</code></pre></td></tr></table>
</div>
</div><h3 id="step-1-bootstrap-nebula-graph-cluster-on-pi" class="headerLink">
    <a href="#step-1-bootstrap-nebula-graph-cluster-on-pi" class="header-mark"></a>2.2 Step 1, bootstrap Nebula Graph Cluster on Pi</h3><p>We clone the compose file for nebula cluster first:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">git clone https://github.com/vesoft-inc/nebula-docker-compose.git <span class="o">&amp;&amp;</span> <span class="nb">cd</span> nebula-docker-compose
docker-compose up -d
</code></pre></td></tr></table>
</div>
</div><p>Then, let&rsquo;s download the client: nebula-console, and connect to the GraphD service:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">wget https://github.com/vesoft-inc/nebula-console/releases/download/v3.0.0/nebula-console-linux-arm64-v3.0.0
chmod +x nebula-console-linux-arm64-v3.0.0

./nebula-console-linux-arm64-v3.0.0 -addr localhost -port <span class="m">9669</span> -u root -p nebula
</code></pre></td></tr></table>
</div>
</div><p>Activate the storageD services:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">ADD HOSTS <span class="s2">&#34;storaged0&#34;</span>:9779,<span class="s2">&#34;storaged1&#34;</span>:9779,<span class="s2">&#34;storaged2&#34;</span>:9779<span class="p">;</span>
SHOW HOSTS<span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="step-2-play-nebula-graph-on-pi" class="headerLink">
    <a href="#step-2-play-nebula-graph-on-pi" class="header-mark"></a>2.3 Step 2, Play Nebula Graph on Pi</h3><p>WIth the <code>SHOW HOSTS</code> we should see StorageD services are all ONLINE, then we could run this from the console session to load the test dataset.</p>
<blockquote>
<p>Referennce: <a href="https://docs.nebula-graph.io/3.0.1/nebula-console/#import_a_testing_dataset" target="_blank" rel="noopener noreffer">https://docs.nebula-graph.io/3.0.1/nebula-console/#import_a_testing_dataset</a></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$:play basketballplayer<span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><p>The test data will be loaded in around 1 minute. Then, we could query something like:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">USE basketballplayer<span class="p">;</span>

GO FROM <span class="s2">&#34;player100&#34;</span> OVER follow YIELD dst<span class="o">(</span>edge<span class="o">)</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><p>Check this out and&hellip;</p>
<p>Happy Graphing!</p>
<p></p>
<h2 id="appendix-installing-ubuntu-server-on-rock-pi-3a-sbc" class="headerLink">
    <a href="#appendix-installing-ubuntu-server-on-rock-pi-3a-sbc" class="header-mark"></a>3 Appendix: Installing Ubuntu Server on Rock Pi 3A SBC</h2><ul>
<li>
<p>Get the image from <a href="https://wiki.radxa.com/Rock3/downloads" target="_blank" rel="noopener noreffer">https://wiki.radxa.com/Rock3/downloads</a> decompressing the file into <code>.img</code></p>
</li>
<li>
<p>Write the image to a micro SD card with <a href="https://www.balena.io/etcher/" target="_blank" rel="noopener noreffer">etcher</a></p>
</li>
<li>
<p>Boot it!</p>
</li>
</ul>
<blockquote>
<p>feature image credit: <a href="https://unsplash.com/@_louisreed" target="_blank" rel="noopener noreffer">@_louisreed</a></p>
</blockquote>]]></description>
</item><item>
    <title>What happens to Wordle and Chinese idiom Knowledge Graph?</title>
    <link>https://siwei.io/en/resolve-wordle/</link>
    <pubDate>Mon, 28 Feb 2022 19:18:59 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/en/resolve-wordle/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>Could I create something between the human brain and the game-cheater/ruiner to make it more of fun? With Knowledge Graph?</p>
</blockquote>
<h2 id="background" class="headerLink">
    <a href="#background" class="header-mark"></a>1 Background</h2><p>You may have seen tweets like this in past months, where the color dots in emoji was shared in SNS randomly.</p>
<blockquote>
<p>Feel free to <a href="https://www.google.com/search?q=wordle" target="_blank" rel="noopener noreffer">Google Wordle</a> first if you don&rsquo;t know its meaning yet.</p>
</blockquote>
<p></p>
<h3 id="wordle-solver" class="headerLink">
    <a href="#wordle-solver" class="header-mark"></a>1.1 Wordle Solver</h3><p>For all magics being used to solve wordle, I am impressed by <a href="https://www.3blue1brown.com/about" target="_blank" rel="noopener noreffer">Grant Sanderson</a>, who explained us the information theory when solving wordle, <a href="https://www.3blue1brown.com/lessons/wordle" target="_blank" rel="noopener noreffer">in an elegent and delightful way</a>.</p>
<h3 id="chinese-wordle-handle" class="headerLink">
    <a href="#chinese-wordle-handle" class="header-mark"></a>1.2 Chinese wordle: &amp;ldquo;handle&amp;rdquo;</h3><p>I am not going create yet another wordle-solver today, instead, it&rsquo;s more about an intresting variant of wordle.</p>
<p>To truly enjoy the fun of wordle, mostly we should be a native speaker, and it is not surprising that there is a <a href="https://twitter.com/search?q=wordle%20es" target="_blank" rel="noopener noreffer">Spanish wordle</a> out there, and still tweets on wordle(es) are being shared literially every second now.</p>
<p>While for non alphabetic languages like Chineses, do we have the luck to have fun with wordling? The answer is yes, while it&rsquo;s a bit different.</p>
<p>For the reason <a href="https://en.wikipedia.org/wiki/Chinese_characters" target="_blank" rel="noopener noreffer">Chinese charactors</a>, also called Hanzi or Han chactors are in from of <a href="https://en.wikipedia.org/wiki/Logogram" target="_blank" rel="noopener noreffer">Logogram</a>, each charactor in Chinese is made up of radicals in quite different forms, each Chinese word can be 2/3/4 charactors. Most of the crossword games in Chinese are idiom, proverb or ancient poetry based: the slot to be filled are one Chinese.</p>
<p></p>
<p>ref: <a href="https://chinese.stackexchange.com/questions/42416/chinese-idiom-puzzle-14-%E4%B8%AD%E6%96%87%E5%A1%AB%E5%AD%97%E9%81%8A%E6%88%B2" target="_blank" rel="noopener noreffer">Chinese idiom puzzle</a></p>
<p>Thus, a wordle but in Chinese idiom will be quite strange, or even hilarious as <a href="https://cheeaun.com/blog/2022/02/chengyu-wordle-is-not-a-love-story/" target="_blank" rel="noopener noreffer">Chee</a> and JinGen discussed in this <a href="https://twitter.com/jg_lim/status/1484506430711697412" target="_blank" rel="noopener noreffer">tweet thread</a>, where you could see the candidate characters are counted in thousands: there is no chance to guess the idiom in 10 attempts!</p>
<p></p>
<p>As one of the fun on playing wordle could be the feedback loop of <code>guess --&gt; result</code> in limited attempts, while the scale of Chinese Charactor had pushed the Chinese wordle variant creators leveraging other aspects of the charactor: pronunciation.</p>
<p>Each charactor in Chinease is monosyllabic without exceptions, and when it comes to its pronunciation, they are all made up from two parts(initial and final, and they could be <a href="https://en.wikipedia.org/wiki/Pinyin" target="_blank" rel="noopener noreffer">written in roman letters</a>), which comes in tens level of possbilities.</p>
<p>There are bounch of Chinese wordle varients asking player to guess idiom leveraging pinyin:</p>
<ul>
<li><a href="https://pinyincaichengyu.com/" target="_blank" rel="noopener noreffer">https://pinyincaichengyu.com/</a></li>
<li><a href="https://cheeaun.github.io/chengyu-wordle/" target="_blank" rel="noopener noreffer">https://cheeaun.github.io/chengyu-wordle/</a></li>
<li><a href="https://apps.apple.com/cn/app/id1606194420" target="_blank" rel="noopener noreffer">https://apps.apple.com/cn/app/id1606194420</a></li>
</ul>
<p>While, to me, a native Chinese speaker, it&rsquo;s either too hard to play with condtions of pronunciation parts(pinyin) or too easy to guess on given around 20 Chinese charactors. Then, the varient stands out here is the &ldquo;<a href="handle/%e6%b1%89%e5%85%9c" rel="">handle/汉兜</a>&quot;(Hanzi-Wordle) created by <a href="https://antfu.me/" target="_blank" rel="noopener noreffer">Antfu</a>.</p>
<p>&ldquo;Handle&rdquo; introduced the tones with genius to add an extra dimension of all charactors per each guess attempt, which helped player to have more information on filtering the knowledge in the brain.</p>
<blockquote>
<p>Note, for each Chinese charactor, there will be a tone in 1 of <a href="https://en.wikipedia.org/wiki/Four_tones_%28Middle_Chinese%29" target="_blank" rel="noopener noreffer">4 tones</a> in its pronunciation.</p>
</blockquote>
<p>Let&rsquo;s see what it&rsquo;s like to play the &ldquo;Handle&rdquo;:</p>
<ul>
<li>There will be 4 Chinese Charactors to be filled in 10 times of guess</li>
<li>Not only the charactor self will be colored in result:
<ul>
<li>For example in first line, the green &ldquo;门&rdquo; in position 2 is correct whereas in second line, the orange &ldquo;仓&rdquo; is corret while the possition should be all but not the first slot.</li>
</ul>
</li>
<li>There will be extra hints on:
<ul>
<li>Pinyin parts for both part1(initial) and part2(final)
<ul>
<li>In third line of the boxes, the green &ldquo;qiao&rdquo; refers to the first charactor is ponouced in &ldquo;qiao&rdquo; with initial:&ldquo;q&rdquo; and final:&ldquo;iao&rdquo;, although we filled the wrong charactor in the writing dimension.</li>
<li>In third line, the orange &ldquo;uo&rdquo; refers to there is one chacarctor in other poisition with the final part of the pinyin as &ldquo;uo&rdquo;.</li>
</ul>
</li>
<li>Tones of the charactor:
<ul>
<li>In third line, the green &ldquo;-&rdquo; stands for the third charactor is in tone-1.</li>
</ul>
</li>
</ul>
</li>
</ul>
<p></p>
<h3 id="the-chinese-wordle-helper" class="headerLink">
    <a href="#the-chinese-wordle-helper" class="header-mark"></a>1.3 The Chinese Wordle Helper</h3><p>As a non-native English speaker, the way I was playing wordle is to <del>cheating</del> relying on helpers:</p>
<p>After knowing on the third letter to be &ldquo;O&rdquo;, I googled and got this: <a href="https://uppolice.org/5-letter-words-with-o-in-the-middle/" target="_blank" rel="noopener noreffer">5-letter-words-with-o-in-the-middle</a> and do the searching 😁.</p>
<p></p>
<p>The way to play with helpers works for me to have fun yet not ruin it by an automated cheat resolver(it&rsquo;s only simulating my brain as a native-speaker!), so that I could somehow experience the same as Millions of people out there without cheating.</p>
<p>While for Chinese &ldquo;Handle&rdquo; players, from my perspective, it&rsquo;s still a bit harder(to find answers in 10 guesses), and the way my wife and I were playing &ldquo;Handle&rdquo; when lining up at the restaurant door ended up googling: idiom list with word &lsquo;foo&rsquo;, yet still having a lot of fun.</p>
<h2 id="chinese-idiom-knowledge-graph" class="headerLink">
    <a href="#chinese-idiom-knowledge-graph" class="header-mark"></a>2 Chinese idiom Knowledge Graph</h2><p>Could I create something between the human brain and the game-cheater/ruiner to make it more of fun?</p>
<p>The answer is yes: a game extension as a secondary brain. For this helper/secondary brain, the solution for &ldquo;handle&rdquo; differenciates from the English wordle, unlike the auto-solver, similar algorithms could help on both cases:</p>
<ul>
<li>
<p>In wordle(English), player searches in their brain or from a helper like the web page: <a href="https://uppolice.org/5-letter-words-with-o-in-the-middle/" target="_blank" rel="noopener noreffer">5-letter-words-with-o-in-the-middle</a>.</p>
</li>
<li>
<p>In handle(Chinese), it&rsquo;s harder to be searching based on hints like tones/initial parts of pinyin in fulltext webpage searching anymore, the reason hehind is that the multidimensional filter condtions are not indexed by normal webpages. As I mentioned, the key of the helper to be leveraged to (not ruining the game) is to be the extension of the brain, then the question is: how does our brain work on handling the knowledge of &ldquo;handle&rdquo;(yes, I was preparing for this pun for so long!)?</p>
</li>
</ul>
<p>Thus, why not do it in a graph/neural network way? And here we go, let&rsquo;s create a knowledge graph of Chinese idiom and see how it goes with the &ldquo;handle&rdquo; game.</p>
<h3 id="tldr" class="headerLink">
    <a href="#tldr" class="header-mark"></a>2.1 TL;DR</h3><p>It&rsquo;s indeed entertaining to me, and I could write Graph Queries[*] by hand or via Visualization tools[**] to help explore things in this graph, because <del>I can</del> we&rsquo;re doing the &ldquo;thinking&rdquo; process the similar way in our own brain, but not so well-informed.</p>
<ul>
<li>
<ul>
<li></li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"># There is one Character not in 1st position, with tone-4, final part as &#34;ai&#34;, but is not &#34;爱&#34;
MATCH (char0:character)&lt;-[with_char_0:with_character]-(x:idiom)-[with_pinyin_0:with_pinyin]-&gt;(pinyin_0:character_pinyin)-[:with_pinyin_part]-&gt;(final_part_0:pinyin_part{part_type: &#34;final&#34;})
WHERE id(final_part_0) == &#34;ai&#34; AND pinyin_0.character_pinyin.tone == 4 AND with_pinyin_0.position != 0 AND with_char_0.position != 0 AND id(char0) != &#34;爱&#34;

# There is one Character in tone-1 not in 2nd position
MATCH (x:idiom) -[with_pinyin_1:with_pinyin]-&gt;(pinyin_1:character_pinyin)
WHERE pinyin_1.character_pinyin.tone == 1 AND with_pinyin_1.position != 1

# There is one Character with final part as &#34;ing&#34;, not in 4th position
MATCH (x:idiom) -[with_pinyin_2:with_pinyin]-&gt;(:character_pinyin)-[:with_pinyin_part]-&gt;(final_part_2:pinyin_part{part_type: &#34;final&#34;})
WHERE id(final_part_2) == &#34;ing&#34; AND with_pinyin_2.position != 3

# The 4th Character is tone-2
MATCH (x:idiom) -[with_pinyin_3:with_pinyin]-&gt;(pinyin_3:character_pinyin)
WHERE pinyin_3.character_pinyin.tone == 2 AND with_pinyin_3.position == 3

RETURN x, count(x) as c ORDER BY c DESC
</code></pre></td></tr></table>
</div>
</div><ul>
<li>**</li>
</ul>
<p></p>
<h3 id="the-long-version-of-playing-with-knowledge-graph" class="headerLink">
    <a href="#the-long-version-of-playing-with-knowledge-graph" class="header-mark"></a>2.2 The long version of playing with Knowledge Graph</h3><p>If you are intrested in how you could do it from your side, here are some details. Before getting started, if you would like to hands-on do it, please refer to appendix chapter on getting your own Nebula Graph Database cluster ready, which are a couple of lines commands to be run.</p>
<h4 id="play-handle-with-knowledge-graph" class="headerLink">
    <a href="#play-handle-with-knowledge-graph" class="header-mark"></a>2.2.1 Play Handle with Knowledge Graph</h4><p>So, if we visit the &ldquo;handle&rdquo; game 👉🏻 <a href="https://handle.antfu.me/" target="_blank" rel="noopener noreffer">https://handle.antfu.me/</a>. We could start with one guess i.e. &ldquo;爱憎分明&rdquo;.</p>
<p>We will get hint of the first guess as:</p>
<p></p>
<p>Not bad, we have three of the charactor with informative hints!</p>
<ul>
<li>There is one Character not in 1st position, with tone-4, final part as &ldquo;ai&rdquo;, but is not &ldquo;爱&rdquo;</li>
<li>There is one Character in tone-1 not in 2nd position</li>
<li>There is one Character with final part as &ldquo;ing&rdquo;, not in 4th position</li>
<li>The 4th Character is tone-2</li>
</ul>
<p>Then we just query it from Nebula Graph:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"># There is one Character not in 1st position, with tone-4, final part as &#34;ai&#34;, but is not &#34;爱&#34;
MATCH (char0:character)&lt;-[with_char_0:with_character]-(x:idiom)-[with_pinyin_0:with_pinyin]-&gt;(pinyin_0:character_pinyin)-[:with_pinyin_part]-&gt;(final_part_0:pinyin_part{part_type: &#34;final&#34;})
WHERE id(final_part_0) == &#34;ai&#34; AND pinyin_0.character_pinyin.tone == 4 AND with_pinyin_0.position != 0 AND with_char_0.position != 0 AND id(char0) != &#34;爱&#34;

# There is one Character in tone-1 not in 2nd position
MATCH (x:idiom) -[with_pinyin_1:with_pinyin]-&gt;(pinyin_1:character_pinyin)
WHERE pinyin_1.character_pinyin.tone == 1 AND with_pinyin_1.position != 1

# There is one Character with final part as &#34;ing&#34;, not in 4th position
MATCH (x:idiom) -[with_pinyin_2:with_pinyin]-&gt;(:character_pinyin)-[:with_pinyin_part]-&gt;(final_part_2:pinyin_part{part_type: &#34;final&#34;})
WHERE id(final_part_2) == &#34;ing&#34; AND with_pinyin_2.position != 3

# The 4th Character is tone-2
MATCH (x:idiom) -[with_pinyin_3:with_pinyin]-&gt;(pinyin_3:character_pinyin)
WHERE pinyin_3.character_pinyin.tone == 2 AND with_pinyin_3.position == 3

RETURN x, count(x) as c ORDER BY c DESC
</code></pre></td></tr></table>
</div>
</div><p>And there are 7 results left in this single guess for us!</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="err">(</span><span class="s2">&#34;惊愚骇俗&#34;</span> <span class="err">:idiom</span><span class="p">{</span><span class="err">pinyin:</span> <span class="nt">&#34;[&#39;jing1&#39;, &#39;yu2&#39;, &#39;hai4&#39;, &#39;su2&#39;]&#34;</span><span class="p">}</span><span class="err">)</span>
<span class="err">(</span><span class="s2">&#34;惊世骇俗&#34;</span> <span class="err">:idiom</span><span class="p">{</span><span class="err">pinyin:</span> <span class="nt">&#34;[&#39;jing1&#39;, &#39;shi4&#39;, &#39;hai4&#39;, &#39;su2&#39;]&#34;</span><span class="p">}</span><span class="err">)</span>
<span class="err">(</span><span class="s2">&#34;惊见骇闻&#34;</span> <span class="err">:idiom</span><span class="p">{</span><span class="err">pinyin:</span> <span class="nt">&#34;[&#39;jing1&#39;, &#39;jian4&#39;, &#39;hai4&#39;, &#39;wen2&#39;]&#34;</span><span class="p">}</span><span class="err">)</span>
<span class="err">(</span><span class="s2">&#34;沽名卖直&#34;</span> <span class="err">:idiom</span><span class="p">{</span><span class="err">pinyin:</span> <span class="nt">&#34;[&#39;gu1&#39;, &#39;ming2&#39;, &#39;mai4&#39;, &#39;zhi2&#39;]&#34;</span><span class="p">}</span><span class="err">)</span>
<span class="err">(</span><span class="s2">&#34;惊心骇神&#34;</span> <span class="err">:idiom</span><span class="p">{</span><span class="err">pinyin:</span> <span class="nt">&#34;[&#39;jing1&#39;, &#39;xin1&#39;, &#39;hai4&#39;, &#39;shen2&#39;]&#34;</span><span class="p">}</span><span class="err">)</span>
<span class="err">(</span><span class="s2">&#34;荆棘载途&#34;</span> <span class="err">:idiom</span><span class="p">{</span><span class="err">pinyin:</span> <span class="nt">&#34;[&#39;jing1&#39;, &#39;ji2&#39;, &#39;zai4&#39;, &#39;tu2&#39;]&#34;</span><span class="p">}</span><span class="err">)</span>
<span class="err">(</span><span class="s2">&#34;出卖灵魂&#34;</span> <span class="err">:idiom</span><span class="p">{</span><span class="err">pinyin:</span> <span class="nt">&#34;[&#39;chu1&#39;, &#39;mai4&#39;, &#39;ling2&#39;, &#39;hun2&#39;]&#34;</span><span class="p">}</span><span class="err">)</span>
</code></pre></td></tr></table>
</div>
</div><p>And as a Chinese native speaker, the common one would be &ldquo;惊世骇俗&rdquo;, and let&rsquo;s give a try!</p>
<p></p>
<h4 id="the-visualization-of-the-query" class="headerLink">
    <a href="#the-visualization-of-the-query" class="header-mark"></a>2.2.2 The Visualization of the Query</h4><p>We could modify our query to make every part of the subquery returned, thus, they could also be renderred visually:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"># There is one Character not in 1st position, with tone-4, final part as &#34;ai&#34;, but is not &#34;爱&#34;
MATCH p0=(char0:character)&lt;-[with_char_0:with_character]-(x:idiom)-[with_pinyin_0:with_pinyin]-&gt;(pinyin_0:character_pinyin)-[:with_pinyin_part]-&gt;(final_part_0:pinyin_part{part_type: &#34;final&#34;})
WHERE id(final_part_0) == &#34;ai&#34; AND pinyin_0.character_pinyin.tone == 4 AND with_pinyin_0.position != 0 AND with_char_0.position != 0 AND id(char0) != &#34;爱&#34;

# There is one Character in tone-1 not in 2nd position
MATCH p1=(x:idiom) -[with_pinyin_1:with_pinyin]-&gt;(pinyin_1:character_pinyin)
WHERE pinyin_1.character_pinyin.tone == 1 AND with_pinyin_1.position != 1

# There is one Character with final part as &#34;ing&#34;, not in 4th position
MATCH p2=(x:idiom) -[with_pinyin_2:with_pinyin]-&gt;(:character_pinyin)-[:with_pinyin_part]-&gt;(final_part_2:pinyin_part{part_type: &#34;final&#34;})
WHERE id(final_part_2) == &#34;ing&#34; AND with_pinyin_2.position != 3

# The 4th Character is tone-2
MATCH p3=(x:idiom) -[with_pinyin_3:with_pinyin]-&gt;(pinyin_3:character_pinyin)
WHERE pinyin_3.character_pinyin.tone == 2 AND with_pinyin_3.position == 3

RETURN p0,p1,p2,p3
</code></pre></td></tr></table>
</div>
</div><p>And then we query it in Nebula-Studio-Console, and click &ldquo;View Subgraphs&rdquo; to see how the searching was done like it was in our own brains:</p>
<p></p>
<h2 id="whats-next" class="headerLink">
    <a href="#whats-next" class="header-mark"></a>3 What&amp;rsquo;s Next</h2><p>If you happened to get hands dirty(or being intrested to) on Graph Database, you could checkout the <a href="https://github.com/vesoft-inc/nebula" target="_blank" rel="noopener noreffer">Nebula Graph</a> project now and its <a href="https://docs.nebula-graph.io/" target="_blank" rel="noopener noreffer">Docs</a> to have more fun of it! Also, <a href="https://nebula-graph.io/demo/" target="_blank" rel="noopener noreffer">here</a> are some only playgrounds if you prefer to try it without deployment on your own envrioment.</p>
<p>If you are intrested in the <code>MATCH</code> query syntax and would like to actually do exersices with each daily handle challenge, check below Documents:</p>
<ul>
<li>MATCH <a href="https://docs.nebula-graph.io/3.0.1/3.ngql-guide/7.general-query-statements/2.match/" target="_blank" rel="noopener noreffer">https://docs.nebula-graph.io/3.0.1/3.ngql-guide/7.general-query-statements/2.match/</a></li>
<li>Graph Patterns <a href="https://docs.nebula-graph.io/3.0.1/3.ngql-guide/1.nGQL-overview/3.graph-patterns/" target="_blank" rel="noopener noreffer">https://docs.nebula-graph.io/3.0.1/3.ngql-guide/1.nGQL-overview/3.graph-patterns/</a></li>
<li>nGQL command cheatsheet <a href="https://docs.nebula-graph.io/3.0.1/2.quick-start/6.cheatsheet-for-ngql/" target="_blank" rel="noopener noreffer">https://docs.nebula-graph.io/3.0.1/2.quick-start/6.cheatsheet-for-ngql/</a></li>
</ul>
<p>Happy Graphing!</p>
<h2 id="appendix-setting-up-the-knowledge-graph" class="headerLink">
    <a href="#appendix-setting-up-the-knowledge-graph" class="header-mark"></a>4 Appendix: Setting up the Knowledge Graph</h2><p>I put the code and process here: <a href="https://github.com/wey-gu/chinese-graph" target="_blank" rel="noopener noreffer">https://github.com/wey-gu/chinese-graph</a>, feel free to check that out.</p>
<h3 id="build-the-knowledge-graph" class="headerLink">
    <a href="#build-the-knowledge-graph" class="header-mark"></a>4.1 Build the Knowledge Graph</h3><p>The process would be:</p>
<ul>
<li>Modeling the Knowledge</li>
<li>Preprocessing the data</li>
<li>ETL data to a Graph Database: Nebula Graph</li>
<li>Have fun on Nebula Graph</li>
</ul>
<h3 id="modeling-the-knowledge-graph" class="headerLink">
    <a href="#modeling-the-knowledge-graph" class="header-mark"></a>4.2 Modeling the Knowledge Graph</h3><p>For Graph Modeling, it&rsquo;s actually quite straight forward, the mind model for me was to put the knowledge I cares as vertcies and connect them with their relationships first.</p>
<p>You will come back to iterate or optimize the modeling when you are actually playing with the data afterwards, thus, if you could imagine how the graph will be queried in the first place, the graph modeling could be adopted accordingly. Otherwise, don&rsquo;t over design it, just do it the intuitive way.</p>
<p>Here, I put the vertices with properties as:</p>
<ul>
<li>idiom</li>
<li>character</li>
<li>pinyin
<ul>
<li>tone</li>
</ul>
</li>
<li>pinyin_part
<ul>
<li>type</li>
</ul>
</li>
</ul>
<p>The edges with properteis as:</p>
<ul>
<li>with_character</li>
<li>with_pinyin</li>
<li>with_pinyin_part</li>
</ul>
<p></p>
<h3 id="deploy-nebula-graph" class="headerLink">
    <a href="#deploy-nebula-graph" class="header-mark"></a>4.3 Deploy Nebula Graph</h3><blockquote>
<p>With <a href="https://github.com/wey-gu/nebula-up/" target="_blank" rel="noopener noreffer">Nebula-UP</a>, it&rsquo;s an onliner call</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">curl -fsSL nebula-up.siwei.io/install.sh <span class="p">|</span> bash -s -- v3.0.0
</code></pre></td></tr></table>
</div>
</div><h3 id="load-data" class="headerLink">
    <a href="#load-data" class="header-mark"></a>4.4 Load data</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># clone the code for data genration and data loading</span>
git clone https://github.com/wey-gu/chinese-graph.git <span class="o">&amp;&amp;</span> <span class="nb">cd</span> chinese-graph

python3 graph_data_generator.py <span class="c1"># generate data</span>

<span class="c1"># load data with Nebula-Importer</span>
docker run --rm -ti <span class="se">\
</span><span class="se"></span>    --network<span class="o">=</span>nebula-docker-compose_nebula-net <span class="se">\
</span><span class="se"></span>    -v <span class="si">${</span><span class="nv">PWD</span><span class="si">}</span>/importer_conf.yaml:/root/importer_conf.yaml <span class="se">\
</span><span class="se"></span>    -v <span class="si">${</span><span class="nv">PWD</span><span class="si">}</span>/output:/root <span class="se">\
</span><span class="se"></span>    vesoft/nebula-importer:v3.0.0 <span class="se">\
</span><span class="se"></span>    --config /root/importer_conf.yaml
</code></pre></td></tr></table>
</div>
</div>]]></description>
</item></channel>
</rss>
