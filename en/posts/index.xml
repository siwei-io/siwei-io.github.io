<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - siwei.io</title>
        <link>https://siwei.io/en/posts/</link>
        <description>All Posts | siwei.io</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>weyl.gu@gmail.com (Wey Gu)</managingEditor>
            <webMaster>weyl.gu@gmail.com (Wey Gu)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 06 Jun 2023 13:34:52 &#43;0800</lastBuildDate><atom:link href="https://siwei.io/en/posts/" rel="self" type="application/rss+xml" /><item>
    <title>Graph Enabled Llama Index</title>
    <link>https://siwei.io/en/graph-enabled-llama-index/</link>
    <pubDate>Thu, 01 Jun 2023 14:52:53 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/en/graph-enabled-llama-index/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/en/graph-enabled-llama-index/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>How Graph could help build better In-context Learning LLM Applications.</p>
</blockquote>
<h2 id="llm-app-paradigms" class="headerLink">
    <a href="#llm-app-paradigms" class="header-mark"></a>1 LLM App Paradigms</h2><p>As a big improvement in Cognitive intelligence, LLM had changed many industries, in a way that we didn&rsquo;t expect to automate, accelerate or enable. Seeing new LLM-enabled applications being created every day, we are all still exploring new methods and use cases for leveraging this magic.</p>
<p>One of the most typical patterns to bring LLM into the loop is to ask LLM to understand things based on proprietory/ certain domain knowledge. For now, there are two paradigms we could add that knowledge to LLM: fine-tuning and <a href="https://en.wikipedia.org/wiki/In-context_learning_%28natural_language_processing%29" target="_blank" rel="noopener noreferrer">in-context learning</a>.</p>
<p>Fine-tuning refers to performing add-on training on LLM models with extra knowledge, whereas in-context learning is to adding some extra piece of knowledge to the query prompt. What we observe now is that <a href="https://arxiv.org/abs/2305.16938" target="_blank" rel="noopener noreferrer">in-context learning has gained popularity over Fine-tuning due to its simplicity</a>.</p>
<p>And in this blog, I&rsquo;ll share what we had been doing around the in-context learning approach.</p>
<h2 id="llama-index-interface-between-data-and-llm" class="headerLink">
    <a href="#llama-index-interface-between-data-and-llm" class="header-mark"></a>2 Llama Index: Interface between data and LLM</h2><h3 id="in-context-learning" class="headerLink">
    <a href="#in-context-learning" class="header-mark"></a>2.1 In-context learning</h3><p>The basic idea of in-context learning is to use existing LLM(not updated) to handle special tasks toward specific knowledge datasets.</p>
<p>For instance, to build an application to answer any questions about one person, or even act as one&rsquo;s digital avatar, we can apply in-context learning to an autobiography book with LLM. In practice, the application will construct a prompt with the question from the user and some information &ldquo;searched&rdquo; from the book, then query the LLM for an answer.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">┌───────┐         ┌─────────────────┐         ┌─────────┐
</span></span><span class="line"><span class="cl">│       │         │ Docs/Knowledge  │         │         │
</span></span><span class="line"><span class="cl">│       │         └─────────────────┘         │         │
</span></span><span class="line"><span class="cl">│ User  │─────────────────────────────────────▶   LLM   │
</span></span><span class="line"><span class="cl">│       │                                     │         │
</span></span><span class="line"><span class="cl">│       │                                     │         │
</span></span><span class="line"><span class="cl">└───────┘                                     └─────────┘
</span></span></code></pre></td></tr></table>
</div>
</div><p>One of the most performant ways to enable this searching approach to get the related info from the Docs/Knowledge(the book in the above example) for the special task, is to leverage Embeddings.</p>
<h3 id="embedding" class="headerLink">
    <a href="#embedding" class="header-mark"></a>2.2 Embedding</h3><p>The embedding normally refers to a way to map real word things into a vector in a multidimensional space, for instance, we could map images into a space of (64 x 64) dimension, and if we are doing it well enough, the distance between the two images can reflect the similarity of them.</p>
<p>Another example of embedding is the word2vec algorithm, which literally maps every word into a vector, for instance, and if the embedding is good enough, we could have addition and subtraction on them, we may have:</p>
<ul>
<li><code>vec(apple) + vec(pie) =~ vec(&quot;apple apie&quot;)</code></li>
</ul>
<p>Or the vector measure of <code>vec(apple) + vec(pie) - vec(&quot;apple apie&quot;)</code> tends to be 0:</p>
<ul>
<li><code>|vec(apple) + vec(pie) - vec(&quot;apple apie&quot;)| =~ 0</code></li>
</ul>
<p>Similarly, we could have &ldquo;pear&rdquo; should be closer than &ldquo;dinosaur&rdquo; to &ldquo;apple&rdquo;:</p>
<ul>
<li><code>|vec(apple) - vec(pear)| &lt; |vec(apple) - vec(dinosaur)|</code></li>
</ul>
<p>With that, we could in theory search for pieces of the book which are more related to a given question. And the basic process is:</p>
<ul>
<li>Split the book into small pieces, create the embedding per each piece, and store them</li>
<li>When a question comes, compute the embedding of the question</li>
<li>Find top-K similar embeddings of pieces of the book by calculating the distance</li>
<li>Construct the prompt with both the question and the pieces of the book</li>
<li>Query the LLM with the prompt</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">                  ┌────┬────┬────┬────┐                  
</span></span><span class="line"><span class="cl">                  │ 1  │ 2  │ 3  │ 4  │                  
</span></span><span class="line"><span class="cl">                  ├────┴────┴────┴────┤                  
</span></span><span class="line"><span class="cl">                  │  Docs/Knowledge   │                  
</span></span><span class="line"><span class="cl">┌───────┐         │        ...        │       ┌─────────┐
</span></span><span class="line"><span class="cl">│       │         ├────┬────┬────┬────┤       │         │
</span></span><span class="line"><span class="cl">│       │         │ 95 │ 96 │    │    │       │         │
</span></span><span class="line"><span class="cl">│       │         └────┴────┴────┴────┘       │         │
</span></span><span class="line"><span class="cl">│ User  │─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─▶   LLM   │
</span></span><span class="line"><span class="cl">│       │                                     │         │
</span></span><span class="line"><span class="cl">│       │                                     │         │
</span></span><span class="line"><span class="cl">└───────┘    ┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐  └─────────┘
</span></span><span class="line"><span class="cl">    │          ┌──────────────────────────┐        ▲     
</span></span><span class="line"><span class="cl">    └────────┼▶│  Tell me ....., please   │├───────┘     
</span></span><span class="line"><span class="cl">               └──────────────────────────┘              
</span></span><span class="line"><span class="cl">             │ ┌────┐ ┌────┐               │             
</span></span><span class="line"><span class="cl">               │ 3  │ │ 96 │                             
</span></span><span class="line"><span class="cl">             │ └────┘ └────┘               │             
</span></span><span class="line"><span class="cl">              ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ 
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="llama-index" class="headerLink">
    <a href="#llama-index" class="header-mark"></a>2.3 Llama Index</h3><p>Llama Index is such an open-source toolkit to help in-context learning in best practice:</p>
<ul>
<li>It comes with <a href="https://llamahub.ai/" target="_blank" rel="noopener noreferrer">a bunch of data loaders</a> to serialize docs/knowledge in a unified format, think of PDF, Wikipedia Page, notion, Twitter, etc, and we don&rsquo;t have to deal with the preprocessing, split the data into pieces, etc, on our own.</li>
<li>It helps create the Embedding(and some other form of the index) for us and stores the embeddings(in memory or <a href="https://github.com/openai/openai-cookbook/blob/main/examples/vector_databases/Using_vector_databases_for_embeddings_search.ipynb" target="_blank" rel="noopener noreferrer">vector databases</a>), too, with one line of code.</li>
<li>It comes out of the box with prompts and other engineering points, so that we don&rsquo;t have to create and study from scratch, for instance, <a href="https://twitter.com/jerryjliu0/status/1663213212932902913" target="_blank" rel="noopener noreferrer">create a chatbot on existing data with 4 lines of code</a>.</li>
</ul>
<h2 id="the-problem-of-doc-split-and-embeddings" class="headerLink">
    <a href="#the-problem-of-doc-split-and-embeddings" class="header-mark"></a>3 The problem of doc split and embeddings</h2><p>The embedding and vector search worked well in many cases, while there are still challenges in some cases, and one of them is it could lose global context/cross-node context.</p>
<p>Think of we are asking &ldquo;Please tell me things about the author and foo.&rdquo;, and in this book, the piece with numbers: 1, 3, 6, 19~25, 30~44, and 96~99 are all about the topic of foo. In this case, the simple way of searching top-k embedding of the pieces of the book may not work well because we normally only take a few top-related pieces, which loses many contexts.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">┌────┬────┬────┬────┐
</span></span><span class="line"><span class="cl">│ 1  │ 2  │ 3  │ 4  │
</span></span><span class="line"><span class="cl">├────┴────┴────┴────┤
</span></span><span class="line"><span class="cl">│  Docs/Knowledge   │
</span></span><span class="line"><span class="cl">│        ...        │
</span></span><span class="line"><span class="cl">├────┬────┬────┬────┤
</span></span><span class="line"><span class="cl">│ 95 │ 96 │    │    │
</span></span><span class="line"><span class="cl">└────┴────┴────┴────┘
</span></span></code></pre></td></tr></table>
</div>
</div><p>The mitigation for that, for instance with Llama Index is to create <a href="https://gpt-index.readthedocs.io/en/latest/how_to/index_structs/composability.html" target="_blank" rel="noopener noreferrer">composite</a> <a href="https://gpt-index.readthedocs.io/en/latest/guides/primer/index_guide.html" target="_blank" rel="noopener noreferrer">indices</a>, where the VectorStore is only part of it, combining with that, we could define a summary index and/or a tree index, etc to <a href="https://gpt-index.readthedocs.io/en/latest/guides/tutorials/unified_query.html" target="_blank" rel="noopener noreferrer">route different types of questions to different indices</a>, thus to avoid risking the loss of global context when the question required it.</p>
<p>Or, with the help of Knowledge Graph, we could do something differently.</p>
<h2 id="knowledge-graph" class="headerLink">
    <a href="#knowledge-graph" class="header-mark"></a>4 Knowledge Graph</h2><p>The term Knowledge Graph was initially coined by <a href="https://blog.google/products/search/introducing-knowledge-graph-things-not/" target="_blank" rel="noopener noreferrer">Google in May 2012</a> as part of its efforts to enhance search results and provide more contextual information to users. The Knowledge Graph was designed to understand the relationships between entities and provide direct answers to queries rather than just returning a list of relevant web pages.</p>
<p>A knowledge graph is a way of organizing and connecting information in a graph format, where nodes represent entities, and edges represent the relationships between those entities. The graph structure allows for efficient storage, retrieval, and analysis of data.</p>
<p>It looks like this:</p>
<iframe src="harry_potter_graph.html" style="height:500px;width:800px" title="Graph"></iframe>
<p>But how could Knowledge Graph help?</p>
<h2 id="combination-of-embeddings-and-knowledge-graph" class="headerLink">
    <a href="#combination-of-embeddings-and-knowledge-graph" class="header-mark"></a>5 Combination of embeddings and Knowledge Graph</h2><p>The general idea here is a knowledge graph, as the refined format of the information, can be queried/searched in way smaller granularity than the split we could do on raw data/docs. Thus, by not replacing the large pieces of the data, but combining the two, we can search queries that require global/cross-node context better.</p>
<p>See the following diagram, assume the question is about <code>x</code>, and 20 of all the pieces of the data are highly related to it. We could now still get the top 3 pieces of the doc(say, no. 1, 2, and 96) as the main context to be sent, apart from that, we ask for two hops of graph traversal around <code>x</code> from the knowledge graph, then the full context will be:</p>
<ul>
<li>The question &ldquo;Tell me things about the author and x&rdquo;</li>
<li>Raw doc from piece number 1, 2, and 96, in Llama Index, it&rsquo;s called node 1, node 2, and node 96.</li>
<li>Knowledge 10 triplets contain &ldquo;x&rdquo; in two-depths graph traversal:
<ul>
<li>x -&gt; y(from node 1)</li>
<li>x -&gt; a(from node 2)</li>
<li>x -&gt; m(from <strong>node 4</strong>)</li>
<li>x &lt;- b-&gt; c(from <strong>node 95</strong>)</li>
<li>x -&gt; d(from node 96)</li>
<li>n -&gt; x(from <strong>node 98</strong>)</li>
<li>x &lt;- z &lt;- i(from <strong>node 1 and node 3</strong>)</li>
<li>x &lt;- z &lt;- b(from <strong>node 1 and node 95</strong>)</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">┌──────────────────┬──────────────────┬──────────────────┬──────────────────┐
</span></span><span class="line"><span class="cl">│ .─.       .─.    │  .─.       .─.   │            .─.   │  .─.       .─.   │
</span></span><span class="line"><span class="cl">│( x )─────▶ y )   │ ( x )─────▶ a )  │           ( j )  │ ( m )◀────( x )  │
</span></span><span class="line"><span class="cl">│ `▲&#39;       `─&#39;    │  `─&#39;       `─&#39;   │            `─&#39;   │  `─&#39;       `─&#39;   │
</span></span><span class="line"><span class="cl">│  │     1         │        2         │        3    │    │        4         │
</span></span><span class="line"><span class="cl">│ .─.              │                  │            .▼.   │                  │
</span></span><span class="line"><span class="cl">│( z )─────────────┼──────────────────┼──────────▶( i )─┐│                  │
</span></span><span class="line"><span class="cl">│ `◀────┐          │                  │            `─&#39;  ││                  │
</span></span><span class="line"><span class="cl">├───────┼──────────┴──────────────────┴─────────────────┼┴──────────────────┤
</span></span><span class="line"><span class="cl">│       │                      Docs/Knowledge           │                   │
</span></span><span class="line"><span class="cl">│       │                            ...                │                   │
</span></span><span class="line"><span class="cl">│       │                                               │                   │
</span></span><span class="line"><span class="cl">├───────┼──────────┬──────────────────┬─────────────────┼┬──────────────────┤
</span></span><span class="line"><span class="cl">│  .─.  └──────.   │  .─.             │                 ││  .─.             │
</span></span><span class="line"><span class="cl">│ ( x ◀─────( b )  │ ( x )            │                 └┼▶( n )            │
</span></span><span class="line"><span class="cl">│  `─&#39;       `─&#39;   │  `─&#39;             │                  │  `─&#39;             │
</span></span><span class="line"><span class="cl">│        95   │    │   │    96        │                  │   │    98        │
</span></span><span class="line"><span class="cl">│            .▼.   │  .▼.             │                  │   ▼              │
</span></span><span class="line"><span class="cl">│           ( c )  │ ( d )            │                  │  .─.             │
</span></span><span class="line"><span class="cl">│            `─&#39;   │  `─&#39;             │                  │ ( x )            │
</span></span><span class="line"><span class="cl">└──────────────────┴──────────────────┴──────────────────┴──`─&#39;─────────────┘
</span></span></code></pre></td></tr></table>
</div>
</div><p>And clearly, the refined information related to topic <code>x</code> that comes from both other nodes and across the nodes is included in the context to build the prompt of in-context learning.</p>
<h2 id="progress-of-knowledge-graph-in-llama-index" class="headerLink">
    <a href="#progress-of-knowledge-graph-in-llama-index" class="header-mark"></a>6 Progress of Knowledge Graph in Llama Index</h2><p>The Knowledge Graph abstraction was initially introduced to Llama Index by <a href="https://github.com/jerryjliu/llama_index/pull/433" target="_blank" rel="noopener noreferrer">William F.H.</a> where the triplets in the knowledge graph were associated with the docs with keywords and stored in memory, then <a href="https://github.com/jerryjliu/llama_index/pull/487" target="_blank" rel="noopener noreferrer">Logan Markewich</a> enhanced it by adding embedding per triplets, too.</p>
<p>Recently, in the last couple of weeks, I had been <a href="https://github.com/jerryjliu/llama_index/issues/1318" target="_blank" rel="noopener noreferrer">working with the community</a> on bringing the &ldquo;GraphStore&rdquo; storage context to Llama Index and thus introducing external storage of Knowledge Graph, the first implementation is NebulaGraph the Open-Source Distributed Graph Database that I had been working on since 2021.</p>
<p>During the implementation of this, the option to traverse multiple hops of the graph, and the option to collect more key entities on top-k nodes(to search in the knowledge graph to enable more global context) was introduced, and we are still refining the changes.</p>
<p>With GraphStore introduced, it also makes it possible to perform in-context learning from an existing knowledge graph, combined with other indices, this is also quite promising due to the knowledge graph being considered with high Information density than other structured data.</p>
<p>I will be updating the knowledge graph-related work on Llama Index in this blog in the upcoming weeks, and will then create end-to-end demo projects and tutorials, after the PR is merged, stay tuned!</p>]]></description>
</item><item>
    <title>Nebulagraph Artificial Intelligence Suite</title>
    <link>https://siwei.io/en/nebulagraph-ai-suite/</link>
    <pubDate>Tue, 02 May 2023 16:37:28 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/en/nebulagraph-ai-suite/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/en/nebulagraph-ai-suite/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>Introducing a new project! ng_ai: NebulaGraph&rsquo;s graph algorithm suite, a user-friendly high-level Python Algorithm API for NebulaGraph. Its goal is to enable data scientist users of NebulaGraph to perform graph-related algorithmic tasks with minimal code.</p>
</blockquote>
<h2 id="nebulagraph-ai-suite" class="headerLink">
    <a href="#nebulagraph-ai-suite" class="header-mark"></a>1 Nebulagraph AI Suite</h2><p>This week, NebulaGraph 3.5.0 <a href="https://docs.nebula-graph.io/3.5.0/20.appendix/release-notes/nebula-comm-release-note/" target="_blank" rel="noopener noreferrer">has been released</a>, and @<strong><a href="https://github.com/whitewum" target="_blank" rel="noopener noreferrer">whitewum</a></strong> suggested that we make the new project <a href="https://github.com/wey-gu/nebulagraph-ai" target="_blank" rel="noopener noreferrer">ng_ai</a> that has been launched in the NebulaGraph community public. This blog is the first one to introduce ng_ai!</p>
<h3 id="what-is-ng_ai" class="headerLink">
    <a href="#what-is-ng_ai" class="header-mark"></a>1.1 What is ng_ai</h3><p>Nebulagraph AI Suite. As the name suggests, it is a Python suite for running algorithms on NebulaGraph. Its goal is to provide data scientist users of NebulaGraph with a natural, concise high-level API to perform graph-related algorithmic tasks with minimal code.</p>
<h3 id="features" class="headerLink">
    <a href="#features" class="header-mark"></a>1.2 Features</h3><blockquote>
<p>Simplifying things in surprising ways.</p>
</blockquote>
<p>To provide a smooth algorithmic experience for NebulaGraph community users, ng_ai has the following features:</p>
<ul>
<li>Tight integration with NebulaGraph</li>
<li>Support for multiple engines and backends, currently supporting Spark (NebulaGraph Algorithm) and NetworkX, with plans to support DGL and PyG in the future.</li>
<li>User-friendly and intuitive API design.</li>
<li>Seamless integration with NebulaGraph&rsquo;s UDF, allowing ng_ai tasks to be called from queries.</li>
<li>Friendly custom algorithm interface, making it easy for users to implement their own algorithms (WIP).</li>
<li>One-click playground setup (based on Docker Extension).</li>
</ul>
<h2 id="demos" class="headerLink">
    <a href="#demos" class="header-mark"></a>2 Demos</h2><h3 id="run-pagerank" class="headerLink">
    <a href="#run-pagerank" class="header-mark"></a>2.1 Run PageRank</h3><p>We could run distributed PageRank with Nebula-Algorithms(spark) backend:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">ng_ai</span> <span class="kn">import</span> <span class="n">NebulaReader</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># read data with spark engine, scan mode</span>
</span></span><span class="line"><span class="cl"><span class="n">reader</span> <span class="o">=</span> <span class="n">NebulaReader</span><span class="p">(</span><span class="n">engine</span><span class="o">=</span><span class="s2">&#34;spark&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">reader</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="n">edge</span><span class="o">=</span><span class="s2">&#34;follow&#34;</span><span class="p">,</span> <span class="n">props</span><span class="o">=</span><span class="s2">&#34;degree&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">df</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># run pagerank algorithm</span>
</span></span><span class="line"><span class="cl"><span class="n">pr_result</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">algo</span><span class="o">.</span><span class="n">pagerank</span><span class="p">(</span><span class="n">reset_prob</span><span class="o">=</span><span class="mf">0.15</span><span class="p">,</span> <span class="n">max_iter</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="write-algo-result-to-nebulagraph" class="headerLink">
    <a href="#write-algo-result-to-nebulagraph" class="header-mark"></a>2.2 Write Algo Result to NebulaGraph</h3><p>Assuming we want to run a label propagation algorithm and write the results back to NebulaGraph, we can do the following:</p>
<p>First, make sure that the schema of the TAG to be written back has been created, and write it to the label_propagation.cluster_id field:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="k">IF</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">EXISTS</span><span class="w"> </span><span class="n">label_propagation</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">cluster_id</span><span class="w"> </span><span class="n">string</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>The algorithm is run as follows:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">df_result</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">algo</span><span class="o">.</span><span class="n">label_propagation</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>We could see its schema:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">df_result</span><span class="o">.</span><span class="n">printSchema</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># result</span>
</span></span><span class="line"><span class="cl"><span class="n">root</span>
</span></span><span class="line"><span class="cl"> <span class="o">|--</span> <span class="n">_id</span><span class="p">:</span> <span class="n">string</span> <span class="p">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="n">false</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"> <span class="o">|--</span> <span class="n">lpa</span><span class="p">:</span> <span class="n">string</span> <span class="p">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="n">false</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Then, we write the result back to the cluster_id field in NebulaGraph (<code>{&quot;lpa&quot;: &quot;cluster_id&quot;}</code>):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">ng_ai</span> <span class="kn">import</span> <span class="n">NebulaWriter</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">ng_ai.config</span> <span class="kn">import</span> <span class="n">NebulaGraphConfig</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">config</span> <span class="o">=</span> <span class="n">NebulaGraphConfig</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">writer</span> <span class="o">=</span> <span class="n">NebulaWriter</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">data</span><span class="o">=</span><span class="n">df_result</span><span class="p">,</span> <span class="n">sink</span><span class="o">=</span><span class="s2">&#34;nebulagraph_vertex&#34;</span><span class="p">,</span> <span class="n">config</span><span class="o">=</span><span class="n">config</span><span class="p">,</span> <span class="n">engine</span><span class="o">=</span><span class="s2">&#34;spark&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># map column louvain into property cluster_id</span>
</span></span><span class="line"><span class="cl"><span class="n">properties</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;lpa&#34;</span><span class="p">:</span> <span class="s2">&#34;cluster_id&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">writer</span><span class="o">.</span><span class="n">set_options</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">tag</span><span class="o">=</span><span class="s2">&#34;label_propagation&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">vid_field</span><span class="o">=</span><span class="s2">&#34;_id&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">properties</span><span class="o">=</span><span class="n">properties</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">batch_size</span><span class="o">=</span><span class="mi">256</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">write_mode</span><span class="o">=</span><span class="s2">&#34;insert&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># write back to NebulaGraph</span>
</span></span><span class="line"><span class="cl"><span class="n">writer</span><span class="o">.</span><span class="n">write</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Finally, we can verify the results:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">USE basketballplayer;
</span></span><span class="line"><span class="cl">MATCH (v:label_propagation)
</span></span><span class="line"><span class="cl">RETURN id(v), v.label_propagation.cluster_id LIMIT 3;
</span></span></code></pre></td></tr></table>
</div>
</div><p>The results are as follows:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-SQL" data-lang="SQL"><span class="line"><span class="cl"><span class="o">+</span><span class="c1">-------------+--------------------------------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="n">id</span><span class="p">(</span><span class="n">v</span><span class="p">)</span><span class="w">       </span><span class="o">|</span><span class="w"> </span><span class="n">v</span><span class="p">.</span><span class="n">label_propagation</span><span class="p">.</span><span class="n">cluster_id</span><span class="w"> </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">-------------+--------------------------------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;player103&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;player101&#34;</span><span class="w">                    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;player113&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;player129&#34;</span><span class="w">                    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;player121&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;player129&#34;</span><span class="w">                    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">-------------+--------------------------------+
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>See more examples: <a href="https://github.com/wey-gu/nebulagraph-ai/blob/main/examples/spark_engine.ipynb" target="_blank" rel="noopener noreferrer">ng_ai/examples</a></p>
<h4 id="call-ng_ai-from-ngql-udf" class="headerLink">
    <a href="#call-ng_ai-from-ngql-udf" class="header-mark"></a>2.2.1 Call ng_ai from nGQL UDF</h4><p>Since NebulaGraph 3.5.0, we can write our own UDF to call our own functions from nGQL. ng_ai also uses this capability to implement an ng_ai function that can call ng_ai algorithms from nGQL, for example:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- Prepare the write schema
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">USE</span><span class="w"> </span><span class="n">basketballplayer</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="k">IF</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">EXISTS</span><span class="w"> </span><span class="n">pagerank</span><span class="p">(</span><span class="n">pagerank</span><span class="w"> </span><span class="n">string</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">:</span><span class="n">sleep</span><span class="w"> </span><span class="mi">20</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">-- Call with ng_ai()
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">ng_ai</span><span class="p">(</span><span class="s2">&#34;pagerank&#34;</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;follow&#34;</span><span class="p">],</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;degree&#34;</span><span class="p">],</span><span class="w"> </span><span class="s2">&#34;spark&#34;</span><span class="p">,</span><span class="w"> </span><span class="err">{</span><span class="k">space</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;basketballplayer&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">max_iter</span><span class="p">:</span><span class="w"> </span><span class="mi">10</span><span class="err">}</span><span class="p">,</span><span class="w"> </span><span class="err">{</span><span class="n">write_mode</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;insert&#34;</span><span class="err">}</span><span class="p">)</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>See more examples: <a href="https://github.com/wey-gu/nebulagraph-ai/blob/main/examples/ng_ai_from_ngql_udf.ipynb" target="_blank" rel="noopener noreferrer">ng_ai/examples</a></p>
<h4 id="example-with-networkx-engine" class="headerLink">
    <a href="#example-with-networkx-engine" class="header-mark"></a>2.2.2 Example with NetworkX Engine</h4><p>In a local environment, ng_ai supports running algorithms based on NetworkX, for example:</p>
<p>Read the graph as an ng_ai object:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">ng_ai</span> <span class="kn">import</span> <span class="n">NebulaReader</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">ng_ai.config</span> <span class="kn">import</span> <span class="n">NebulaGraphConfig</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># read data with nebula/networkx engine, query mode</span>
</span></span><span class="line"><span class="cl"><span class="n">config_dict</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;graphd_hosts&#34;</span><span class="p">:</span> <span class="s2">&#34;graphd:9669&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;user&#34;</span><span class="p">:</span> <span class="s2">&#34;root&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;password&#34;</span><span class="p">:</span> <span class="s2">&#34;nebula&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;space&#34;</span><span class="p">:</span> <span class="s2">&#34;basketballplayer&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">config</span> <span class="o">=</span> <span class="n">NebulaGraphConfig</span><span class="p">(</span><span class="o">**</span><span class="n">config_dict</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">reader</span> <span class="o">=</span> <span class="n">NebulaReader</span><span class="p">(</span><span class="n">engine</span><span class="o">=</span><span class="s2">&#34;nebula&#34;</span><span class="p">,</span> <span class="n">config</span><span class="o">=</span><span class="n">config</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">reader</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">edges</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;follow&#34;</span><span class="p">,</span> <span class="s2">&#34;serve&#34;</span><span class="p">],</span> <span class="n">props</span><span class="o">=</span><span class="p">[[</span><span class="s2">&#34;degree&#34;</span><span class="p">],</span> <span class="p">[]])</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Show and draw the graph:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">show</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">draw</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Run PageRank:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">pr_result</span> <span class="o">=</span> <span class="n">g</span><span class="o">.</span><span class="n">algo</span><span class="o">.</span><span class="n">pagerank</span><span class="p">(</span><span class="n">reset_prob</span><span class="o">=</span><span class="mf">0.15</span><span class="p">,</span> <span class="n">max_iter</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Write the result back to NebulaGraph:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">ng_ai</span> <span class="kn">import</span> <span class="n">NebulaWriter</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">writer</span> <span class="o">=</span> <span class="n">NebulaWriter</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">data</span><span class="o">=</span><span class="n">pr_result</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">sink</span><span class="o">=</span><span class="s2">&#34;nebulagraph_vertex&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">config</span><span class="o">=</span><span class="n">config</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">engine</span><span class="o">=</span><span class="s2">&#34;nebula&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># properties to write</span>
</span></span><span class="line"><span class="cl"><span class="n">properties</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;pagerank&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">writer</span><span class="o">.</span><span class="n">set_options</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">tag</span><span class="o">=</span><span class="s2">&#34;pagerank&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">properties</span><span class="o">=</span><span class="n">properties</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">batch_size</span><span class="o">=</span><span class="mi">256</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">write_mode</span><span class="o">=</span><span class="s2">&#34;insert&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># write back to NebulaGraph</span>
</span></span><span class="line"><span class="cl"><span class="n">writer</span><span class="o">.</span><span class="n">write</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Other algorithms are similar, for example:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># get all algorithms</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">algo</span><span class="o">.</span><span class="n">get_all_algo</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># get help of each algo</span>
</span></span><span class="line"><span class="cl"><span class="n">help</span><span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">algo</span><span class="o">.</span><span class="n">node2vec</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># call the algo</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">algo</span><span class="o">.</span><span class="n">node2vec</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>See more examples: <a href="https://github.com/wey-gu/nebulagraph-ai/blob/main/examples/networkx_engine.ipynb" target="_blank" rel="noopener noreferrer">ng_ai/examples</a></p>
<h4 id="plotting-with-networkx-engine" class="headerLink">
    <a href="#plotting-with-networkx-engine" class="header-mark"></a>2.2.3 Plotting with NetworkX Engine</h4><p>We could also run Louvain and PageRank and visualize the results with NetworkX engine:</p>
<p>First, we read the graph and run the algorithm:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">pr_result</span> <span class="o">=</span> <span class="n">g</span><span class="o">.</span><span class="n">algo</span><span class="o">.</span><span class="n">pagerank</span><span class="p">(</span><span class="n">reset_prob</span><span class="o">=</span><span class="mf">0.15</span><span class="p">,</span> <span class="n">max_iter</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">louvain_result</span> <span class="o">=</span> <span class="n">g</span><span class="o">.</span><span class="n">algo</span><span class="o">.</span><span class="n">louvain</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Now we create a fancy function to draw the graph:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">matplotlib.colors</span> <span class="kn">import</span> <span class="n">ListedColormap</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">draw_graph_louvain_pr</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">pr_result</span><span class="p">,</span> <span class="n">louvain_result</span><span class="p">,</span> <span class="n">colors</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;#1984c5&#34;</span><span class="p">,</span> <span class="s2">&#34;#22a7f0&#34;</span><span class="p">,</span> <span class="s2">&#34;#63bff0&#34;</span><span class="p">,</span> <span class="s2">&#34;#a7d5ed&#34;</span><span class="p">,</span> <span class="s2">&#34;#e2e2e2&#34;</span><span class="p">,</span> <span class="s2">&#34;#e1a692&#34;</span><span class="p">,</span> <span class="s2">&#34;#de6e56&#34;</span><span class="p">,</span> <span class="s2">&#34;#e14b31&#34;</span><span class="p">,</span> <span class="s2">&#34;#c23728&#34;</span><span class="p">]):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Define positions for the nodes</span>
</span></span><span class="line"><span class="cl">    <span class="n">pos</span> <span class="o">=</span> <span class="n">nx</span><span class="o">.</span><span class="n">spring_layout</span><span class="p">(</span><span class="n">G</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Create a figure and set the axis limits</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">35</span><span class="p">,</span> <span class="mi">15</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">ax</span><span class="o">.</span><span class="n">set_xlim</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">ax</span><span class="o">.</span><span class="n">set_ylim</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Create a colormap from the colors list</span>
</span></span><span class="line"><span class="cl">    <span class="n">cmap</span> <span class="o">=</span> <span class="n">ListedColormap</span><span class="p">(</span><span class="n">colors</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Draw the nodes and edges of the graph</span>
</span></span><span class="line"><span class="cl">    <span class="n">node_colors</span> <span class="o">=</span> <span class="p">[</span><span class="n">louvain_result</span><span class="p">[</span><span class="n">node</span><span class="p">]</span> <span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="n">G</span><span class="o">.</span><span class="n">nodes</span><span class="p">()]</span>
</span></span><span class="line"><span class="cl">    <span class="n">node_sizes</span> <span class="o">=</span> <span class="p">[</span><span class="mi">70000</span> <span class="o">*</span> <span class="n">pr_result</span><span class="p">[</span><span class="n">node</span><span class="p">]</span> <span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="n">G</span><span class="o">.</span><span class="n">nodes</span><span class="p">()]</span>
</span></span><span class="line"><span class="cl">    <span class="n">nx</span><span class="o">.</span><span class="n">draw_networkx_nodes</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">pos</span><span class="o">=</span><span class="n">pos</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span> <span class="n">node_color</span><span class="o">=</span><span class="n">node_colors</span><span class="p">,</span> <span class="n">node_size</span><span class="o">=</span><span class="n">node_sizes</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="n">cmap</span><span class="p">,</span> <span class="n">vmin</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">vmax</span><span class="o">=</span><span class="nb">max</span><span class="p">(</span><span class="n">louvain_result</span><span class="o">.</span><span class="n">values</span><span class="p">()))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">nx</span><span class="o">.</span><span class="n">draw_networkx_edges</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">pos</span><span class="o">=</span><span class="n">pos</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span> <span class="n">edge_color</span><span class="o">=</span><span class="s1">&#39;gray&#39;</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">connectionstyle</span><span class="o">=</span><span class="s1">&#39;arc3, rad=0.2&#39;</span><span class="p">,</span> <span class="n">arrowstyle</span><span class="o">=</span><span class="s1">&#39;-|&gt;&#39;</span><span class="p">,</span> <span class="n">arrows</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Extract edge labels as a dictionary</span>
</span></span><span class="line"><span class="cl">    <span class="n">edge_labels</span> <span class="o">=</span> <span class="n">nx</span><span class="o">.</span><span class="n">get_edge_attributes</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="s1">&#39;label&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Add edge labels to the graph</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">edge</span><span class="p">,</span> <span class="n">label</span> <span class="ow">in</span> <span class="n">edge_labels</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="n">ax</span><span class="o">.</span><span class="n">text</span><span class="p">((</span><span class="n">pos</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="mi">0</span><span class="p">]][</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">pos</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="mi">1</span><span class="p">]][</span><span class="mi">0</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="p">(</span><span class="n">pos</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="mi">0</span><span class="p">]][</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">pos</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="mi">1</span><span class="p">]][</span><span class="mi">1</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="n">label</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">12</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;black&#39;</span><span class="p">,</span> <span class="n">ha</span><span class="o">=</span><span class="s1">&#39;center&#39;</span><span class="p">,</span> <span class="n">va</span><span class="o">=</span><span class="s1">&#39;center&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Add node labels to the graph</span>
</span></span><span class="line"><span class="cl">    <span class="n">node_labels</span> <span class="o">=</span> <span class="p">{</span><span class="n">n</span><span class="p">:</span> <span class="n">G</span><span class="o">.</span><span class="n">nodes</span><span class="p">[</span><span class="n">n</span><span class="p">][</span><span class="s1">&#39;label&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="s1">&#39;label&#39;</span> <span class="ow">in</span> <span class="n">G</span><span class="o">.</span><span class="n">nodes</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="k">else</span> <span class="n">n</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">G</span><span class="o">.</span><span class="n">nodes</span><span class="p">()}</span>
</span></span><span class="line"><span class="cl">    <span class="n">nx</span><span class="o">.</span><span class="n">draw_networkx_labels</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">pos</span><span class="o">=</span><span class="n">pos</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span> <span class="n">labels</span><span class="o">=</span><span class="n">node_labels</span><span class="p">,</span> <span class="n">font_size</span><span class="o">=</span><span class="mi">12</span><span class="p">,</span> <span class="n">font_color</span><span class="o">=</span><span class="s1">&#39;black&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Add colorbar for community colors</span>
</span></span><span class="line"><span class="cl">    <span class="n">sm</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">cm</span><span class="o">.</span><span class="n">ScalarMappable</span><span class="p">(</span><span class="n">cmap</span><span class="o">=</span><span class="n">cmap</span><span class="p">,</span> <span class="n">norm</span><span class="o">=</span><span class="n">plt</span><span class="o">.</span><span class="n">Normalize</span><span class="p">(</span><span class="n">vmin</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">vmax</span><span class="o">=</span><span class="nb">max</span><span class="p">(</span><span class="n">louvain_result</span><span class="o">.</span><span class="n">values</span><span class="p">())))</span>
</span></span><span class="line"><span class="cl">    <span class="n">sm</span><span class="o">.</span><span class="n">set_array</span><span class="p">([])</span>
</span></span><span class="line"><span class="cl">    <span class="n">cbar</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">colorbar</span><span class="p">(</span><span class="n">sm</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span> <span class="n">ticks</span><span class="o">=</span><span class="nb">range</span><span class="p">(</span><span class="nb">max</span><span class="p">(</span><span class="n">louvain_result</span><span class="o">.</span><span class="n">values</span><span class="p">())</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span> <span class="n">shrink</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">cbar</span><span class="o">.</span><span class="n">ax</span><span class="o">.</span><span class="n">set_yticklabels</span><span class="p">([</span><span class="sa">f</span><span class="s1">&#39;Community </span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s1">&#39;</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">max</span><span class="p">(</span><span class="n">louvain_result</span><span class="o">.</span><span class="n">values</span><span class="p">())</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Show the figure</span>
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">draw_graph_louvain_pr</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">pr_result</span><span class="o">=</span><span class="n">pr_result</span><span class="p">,</span> <span class="n">louvain_result</span><span class="o">=</span><span class="n">louvain_result</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>And it will show the graph:</p>
<p><figure><a class="lightgallery" href="https://github.com/siwei-io/talks/assets/1651790/4d13eb2b-3e40-4085-8e0c-71459ca0843b" title="draw_graph_louvain_pr" data-thumbnail="https://github.com/siwei-io/talks/assets/1651790/4d13eb2b-3e40-4085-8e0c-71459ca0843b">
        <img
            
            loading="lazy"
            src="https://github.com/siwei-io/talks/assets/1651790/4d13eb2b-3e40-4085-8e0c-71459ca0843b"
            srcset="https://github.com/siwei-io/talks/assets/1651790/4d13eb2b-3e40-4085-8e0c-71459ca0843b, https://github.com/siwei-io/talks/assets/1651790/4d13eb2b-3e40-4085-8e0c-71459ca0843b 1.5x, https://github.com/siwei-io/talks/assets/1651790/4d13eb2b-3e40-4085-8e0c-71459ca0843b 2x"
            sizes="auto"
            alt="https://github.com/siwei-io/talks/assets/1651790/4d13eb2b-3e40-4085-8e0c-71459ca0843b">
    </a></figure></p>
<p>See more examples: <a href="https://github.com/wey-gu/nebulagraph-ai/blob/main/examples/ng_ai_networkx_plot.ipynb" target="_blank" rel="noopener noreferrer">ng_ai/examples</a></p>
<h4 id="nebulagraph-jupyter-notebook-extension" class="headerLink">
    <a href="#nebulagraph-jupyter-notebook-extension" class="header-mark"></a>2.2.4 NebulaGraph Jupyter Notebook Extension</h4><p>Thanks to the NebulaGraph Jupyter Notebook extension: <a href="https://github.com/wey-gu/ipython-ngql" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/ipython-ngql</a>, we can operate NebulaGraph more conveniently:</p>
<p>Option 0, install the extension from ng_ai:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">%</span><span class="n">pip</span> <span class="n">install</span> <span class="n">ng_ai</span><span class="p">[</span><span class="n">jupyter</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="o">%</span><span class="n">load_ext</span> <span class="n">ngql</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Option 1, install the extension directly:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">%</span><span class="n">pip</span> <span class="n">install</span> <span class="n">ipython</span><span class="o">-</span><span class="n">ngql</span>
</span></span><span class="line"><span class="cl"><span class="o">%</span><span class="n">load_ext</span> <span class="n">ngql</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Then, we can use <code>%ngql</code> to execute NGQL statements in the Notebook:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">%</span><span class="n">ngql</span> <span class="o">--</span><span class="n">address</span> <span class="mf">127.0.0.1</span> <span class="o">--</span><span class="n">port</span> <span class="mi">9669</span> <span class="o">--</span><span class="n">user</span> <span class="n">root</span> <span class="o">--</span><span class="n">password</span> <span class="n">nebula</span>
</span></span><span class="line"><span class="cl"><span class="o">%</span><span class="n">ngql</span> <span class="n">USE</span> <span class="n">basketballplayer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="o">%</span><span class="n">ngql</span> <span class="n">MATCH</span> <span class="p">(</span><span class="n">v</span><span class="p">:</span><span class="n">player</span><span class="p">{</span><span class="n">name</span><span class="p">:</span><span class="s2">&#34;Tim Duncan&#34;</span><span class="p">})</span><span class="o">--&gt;</span><span class="p">(</span><span class="n">v2</span><span class="p">:</span><span class="n">player</span><span class="p">)</span> <span class="n">RETURN</span> <span class="n">v2</span><span class="o">.</span><span class="n">player</span><span class="o">.</span><span class="n">name</span> <span class="n">AS</span> <span class="n">Name</span><span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>Note, for multi-line query, use <code>%%ngql</code></p>
</blockquote>
<p>Finally, we can visualize the results in Jupyter Notebook with <code>%ng_draw</code>!</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">%</span><span class="n">ngql</span> <span class="n">match</span> <span class="n">p</span><span class="o">=</span><span class="p">(:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[]</span><span class="o">-&gt;</span><span class="p">()</span> <span class="k">return</span> <span class="n">p</span> <span class="n">LIMIT</span> <span class="mi">5</span>
</span></span><span class="line"><span class="cl"><span class="o">%</span><span class="n">ng_draw</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>And it will look like this:</p>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/236797874-c142cfd8-b0de-4689-95ef-1da386e137d3.png" title="ipython-ngql" data-thumbnail="https://user-images.githubusercontent.com/1651790/236797874-c142cfd8-b0de-4689-95ef-1da386e137d3.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/236797874-c142cfd8-b0de-4689-95ef-1da386e137d3.png"
            srcset="https://user-images.githubusercontent.com/1651790/236797874-c142cfd8-b0de-4689-95ef-1da386e137d3.png, https://user-images.githubusercontent.com/1651790/236797874-c142cfd8-b0de-4689-95ef-1da386e137d3.png 1.5x, https://user-images.githubusercontent.com/1651790/236797874-c142cfd8-b0de-4689-95ef-1da386e137d3.png 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/236797874-c142cfd8-b0de-4689-95ef-1da386e137d3.png">
    </a></figure></p>
<h2 id="future-work" class="headerLink">
    <a href="#future-work" class="header-mark"></a>3 Future Work</h2><p>Now ng_ai is still under development, we still have a lot of work to do:</p>
<ul>
<li><i class="far fa-square fa-fw"></i> Improve the reader mode, now NebulaGraph/NetworkX only supports Query-Mode, we also need to support Scan-Mode</li>
<li><i class="far fa-square fa-fw"></i> Implement link prediction, node classification and other algorithms based on dgl (GNN), for example:</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">model</span> <span class="o">=</span> <span class="n">g</span><span class="o">.</span><span class="n">algo</span><span class="o">.</span><span class="n">gnn_link_prediction</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">result</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">train</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="c1"># query src, dst to be predicted</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">model</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">src_vertex</span><span class="p">,</span> <span class="n">dst_vertices</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><i class="far fa-square fa-fw"></i> UDA, custom algorithm</li>
<li><i class="far fa-square fa-fw"></i> Deployment tool</li>
</ul>
<p>ng_ai is completely built in public, and we welcome everyone in the community to participate in it and improve ng_ai together, making AI algorithms on NebulaGraph easier to use!</p>
<h2 id="try-ng_ai" class="headerLink">
    <a href="#try-ng_ai" class="header-mark"></a>4 Try ng_ai</h2><p>We have prepared a one-click deployment of NebulaGraph + Studio + ng_ai in Jupyter environment, you only need to search NebulaGraph from the Extension of Docker Desktop to try it out.</p>
<ul>
<li>Install <a href="https://www.docker.com/blog/distributed-cloud-native-graph-database-nebulagraph-docker-extension/" target="_blank" rel="noopener noreferrer">NebulaGraph Docker Extension</a></li>
</ul>
<p>Search NebulaGraph from docker extension marketplace, and install it.</p>
<p><figure><a class="lightgallery" href="https://github.com/siwei-io/talks/assets/1651790/e07e39d1-2b3a-486f-bb68-29a67bc3a714" title="https://github.com/siwei-io/talks/assets/1651790/e07e39d1-2b3a-486f-bb68-29a67bc3a714" data-thumbnail="https://github.com/siwei-io/talks/assets/1651790/e07e39d1-2b3a-486f-bb68-29a67bc3a714">
        <img
            
            loading="lazy"
            src="https://github.com/siwei-io/talks/assets/1651790/e07e39d1-2b3a-486f-bb68-29a67bc3a714"
            srcset="https://github.com/siwei-io/talks/assets/1651790/e07e39d1-2b3a-486f-bb68-29a67bc3a714, https://github.com/siwei-io/talks/assets/1651790/e07e39d1-2b3a-486f-bb68-29a67bc3a714 1.5x, https://github.com/siwei-io/talks/assets/1651790/e07e39d1-2b3a-486f-bb68-29a67bc3a714 2x"
            sizes="auto"
            alt="https://github.com/siwei-io/talks/assets/1651790/e07e39d1-2b3a-486f-bb68-29a67bc3a714">
    </a></figure></p>
<ul>
<li>Install ng_ai playground</li>
</ul>
<p>Go to NebulaGraph extension, click <strong>Install NX Mode</strong> to install ng_ai&rsquo;s NetworkX playground, it usually takes a few minutes to wait for the installation to complete.</p>
<p><figure><a class="lightgallery" href="https://github.com/siwei-io/talks/assets/1651790/3fca7e39-6e37-4ccb-8177-4771babb7b66" title="https://github.com/siwei-io/talks/assets/1651790/3fca7e39-6e37-4ccb-8177-4771babb7b66" data-thumbnail="https://github.com/siwei-io/talks/assets/1651790/3fca7e39-6e37-4ccb-8177-4771babb7b66">
        <img
            
            loading="lazy"
            src="https://github.com/siwei-io/talks/assets/1651790/3fca7e39-6e37-4ccb-8177-4771babb7b66"
            srcset="https://github.com/siwei-io/talks/assets/1651790/3fca7e39-6e37-4ccb-8177-4771babb7b66, https://github.com/siwei-io/talks/assets/1651790/3fca7e39-6e37-4ccb-8177-4771babb7b66 1.5x, https://github.com/siwei-io/talks/assets/1651790/3fca7e39-6e37-4ccb-8177-4771babb7b66 2x"
            sizes="auto"
            alt="https://github.com/siwei-io/talks/assets/1651790/3fca7e39-6e37-4ccb-8177-4771babb7b66">
    </a></figure></p>
<ul>
<li>Enter NetworkX playground</li>
</ul>
<p>Click <strong>Jupyter NB NetworkX</strong> to enter NetworkX playground.</p>
<p><figure><a class="lightgallery" href="https://github.com/siwei-io/talks/assets/1651790/48c2e5a2-490e-4626-809e-5894d6f833e9" title="https://github.com/siwei-io/talks/assets/1651790/48c2e5a2-490e-4626-809e-5894d6f833e9" data-thumbnail="https://github.com/siwei-io/talks/assets/1651790/48c2e5a2-490e-4626-809e-5894d6f833e9">
        <img
            
            loading="lazy"
            src="https://github.com/siwei-io/talks/assets/1651790/48c2e5a2-490e-4626-809e-5894d6f833e9"
            srcset="https://github.com/siwei-io/talks/assets/1651790/48c2e5a2-490e-4626-809e-5894d6f833e9, https://github.com/siwei-io/talks/assets/1651790/48c2e5a2-490e-4626-809e-5894d6f833e9 1.5x, https://github.com/siwei-io/talks/assets/1651790/48c2e5a2-490e-4626-809e-5894d6f833e9 2x"
            sizes="auto"
            alt="https://github.com/siwei-io/talks/assets/1651790/48c2e5a2-490e-4626-809e-5894d6f833e9">
    </a></figure></p>
<h2 id="ng_ai-architecture" class="headerLink">
    <a href="#ng_ai-architecture" class="header-mark"></a>5 ng_ai Architecture</h2><p>ng_ai is a Python library, it is mainly composed of the following modules:</p>
<ul>
<li>Writer: responsible for writing data to NebulaGraph</li>
<li>Engine: responsible for adapting different runtimes, such as Spark, DGL, NetowrkX, etc.</li>
<li>Algo: algorithm module, such as PageRank, Louvain, GNN_Link_Predict, etc.</li>
</ul>
<p>In addition, in order to support the call in nGQL, there are two more modules:</p>
<ul>
<li>ng_ai-udf: responsible for registering UDF to NebulaGraph, accepting query calls from ng_ai, and accessing ng_ai API</li>
<li>ng_ai-api: the API module of ng_ai, which is responsible for receiving requests from ng_ai-udf and calling the corresponding algorithm module</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">          ┌───────────────────────────────────────────────────┐
</span></span><span class="line"><span class="cl">          │   Spark Cluster                                   │
</span></span><span class="line"><span class="cl">          │    .─────.    .─────.    .─────.    .─────.       │
</span></span><span class="line"><span class="cl">          │   ;       :  ;       :  ;       :  ;       :      │
</span></span><span class="line"><span class="cl">       ┌─▶│   :       ;  :       ;  :       ;  :       ;      │
</span></span><span class="line"><span class="cl">       │  │    ╲     ╱    ╲     ╱    ╲     ╱    ╲     ╱       │
</span></span><span class="line"><span class="cl">       │  │     `───&#39;      `───&#39;      `───&#39;      `───&#39;        │
</span></span><span class="line"><span class="cl">  Algo Spark                                                  │
</span></span><span class="line"><span class="cl">    Engine└───────────────────────────────────────────────────┘
</span></span><span class="line"><span class="cl">       │  ┌────────────────────────────────────────────────────┬──────────┐
</span></span><span class="line"><span class="cl">       └──┤                                                    │          │
</span></span><span class="line"><span class="cl">          │   NebulaGraph AI Suite(ngai)                       │ ngai-api │◀─┐
</span></span><span class="line"><span class="cl">          │                                                    │          │  │
</span></span><span class="line"><span class="cl">          │                                                    └──────────┤  │
</span></span><span class="line"><span class="cl">          │     ┌────────┐    ┌──────┐    ┌────────┐   ┌─────┐            │  │
</span></span><span class="line"><span class="cl">          │     │ Reader │    │ Algo │    │ Writer │   │ GNN │            │  │
</span></span><span class="line"><span class="cl"> ┌───────▶│     └────────┘    └──────┘    └────────┘   └─────┘            │  │
</span></span><span class="line"><span class="cl"> │        │          │            │            │          │               │  │
</span></span><span class="line"><span class="cl"> │        │          ├────────────┴───┬────────┴─────┐    └──────┐        │  │
</span></span><span class="line"><span class="cl"> │        │          ▼                ▼              ▼           ▼        │  │
</span></span><span class="line"><span class="cl"> │        │   ┌─────────────┐ ┌──────────────┐ ┌──────────┐ ┌──────────┐  │  │
</span></span><span class="line"><span class="cl"> │     ┌──┤   │ SparkEngine │ │ NebulaEngine │ │ NetworkX │ │ DGLEngine│  │  │
</span></span><span class="line"><span class="cl"> │     │  │   └─────────────┘ └──────────────┘ └──────────┘ └──────────┘  │  │
</span></span><span class="line"><span class="cl"> │     │  └──────────┬────────────────────────────────────────────────────┘  │
</span></span><span class="line"><span class="cl"> │     │             │        Spark                                          │
</span></span><span class="line"><span class="cl"> │     │             └────────Reader ────────────┐                           │
</span></span><span class="line"><span class="cl"> │  Spark                   Query Mode           │                           │
</span></span><span class="line"><span class="cl"> │  Reader                                       │                           │
</span></span><span class="line"><span class="cl"> │Scan Mode                                      ▼                      ┌─────────┐
</span></span><span class="line"><span class="cl"> │     │  ┌───────────────────────────────────────────────────┬─────────┤ ngai-udf│◀─────────────┐
</span></span><span class="line"><span class="cl"> │     │  │                                                   │         └─────────┤              │
</span></span><span class="line"><span class="cl"> │     │  │  NebulaGraph Graph Engine         Nebula-GraphD   │   ngai-GraphD     │              │
</span></span><span class="line"><span class="cl"> │     │  ├──────────────────────────────┬────────────────────┼───────────────────┘              │
</span></span><span class="line"><span class="cl"> │     │  │                              │                    │                                  │
</span></span><span class="line"><span class="cl"> │     │  │  NebulaGraph Storage Engine  │                    │                                  │
</span></span><span class="line"><span class="cl"> │     │  │                              │                    │                                  │
</span></span><span class="line"><span class="cl"> │     └─▶│  Nebula-StorageD             │    Nebula-Metad    │                                  │
</span></span><span class="line"><span class="cl"> │        │                              │                    │                                  │
</span></span><span class="line"><span class="cl"> │        └──────────────────────────────┴────────────────────┘                                  │
</span></span><span class="line"><span class="cl"> │                                                                                               │
</span></span><span class="line"><span class="cl"> │    ┌───────────────────────────────────────────────────────────────────────────────────────┐  │
</span></span><span class="line"><span class="cl"> │    │ RETURN ng_ai(&#34;pagerank&#34;, [&#34;follow&#34;], [&#34;degree&#34;], &#34;spark&#34;, {space:&#34;basketballplayer&#34;}) │──┘
</span></span><span class="line"><span class="cl"> │    └───────────────────────────────────────────────────────────────────────────────────────┘
</span></span><span class="line"><span class="cl"> │  ┌─────────────────────────────────────────────────────────────┐
</span></span><span class="line"><span class="cl"> │  │ from ng_ai import NebulaReader                              │
</span></span><span class="line"><span class="cl"> │  │                                                             │
</span></span><span class="line"><span class="cl"> │  │ # read data with spark engine, scan mode                    │
</span></span><span class="line"><span class="cl"> │  │ reader = NebulaReader(engine=&#34;spark&#34;)                       │
</span></span><span class="line"><span class="cl"> │  │ reader.scan(edge=&#34;follow&#34;, props=&#34;degree&#34;)                  │
</span></span><span class="line"><span class="cl"> └──│ df = reader.read()                                          │
</span></span><span class="line"><span class="cl">    │                                                             │
</span></span><span class="line"><span class="cl">    │ # run pagerank algorithm                                    │
</span></span><span class="line"><span class="cl">    │ pr_result = df.algo.pagerank(reset_prob=0.15, max_iter=10)  │
</span></span><span class="line"><span class="cl">    │                                                             │
</span></span><span class="line"><span class="cl">    └─────────────────────────────────────────────────────────────┘  
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item></channel>
</rss>
