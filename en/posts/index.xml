<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - siwei.io</title>
        <link>https://siwei.io/en/posts/</link>
        <description>All Posts | siwei.io</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>weyl.gu@gmail.com (Wey Gu)</managingEditor>
            <webMaster>weyl.gu@gmail.com (Wey Gu)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 29 Dec 2022 15:30:33 &#43;0800</lastBuildDate><atom:link href="https://siwei.io/en/posts/" rel="self" type="application/rss+xml" /><item>
    <title>A Data Lineage OSS Reference Solution</title>
    <link>https://siwei.io/en/data-lineage-oss-ref-solution/</link>
    <pubDate>Thu, 09 Jun 2022 16:31:43 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/en/data-lineage-oss-ref-solution/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/en/data-lineage-oss-ref-solution/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>Do I have to create my own graph model and everything to set up a Data Lineage system? Thanks to many great open-source projects, the answer is: No!</p>
<p>Today, I would like to share my opinionated reference data infra stack with some of those best open-source projects with modern ETL, Dashboard, Metadata Governance, and Data Lineage Management.</p>
</blockquote>
<h2 id="metadata-governance-system" class="headerLink">
    <a href="#metadata-governance-system" class="header-mark"></a>1 Metadata Governance system</h2><p>A Metadata Governance system is a system providing a single view of where and how all the data are formatted, generated, transformed, consumed, presented, and owned.</p>
<p>Metadata Governance is like a catalog of all of the data warehouses, databases, tables, dashboards, ETL jobs, etc so that people don&rsquo;t have to broadcast their queries on &ldquo;Hi everyone, could I change the schema of this table?&rdquo;, &ldquo;Hey, anyone who knows how I could find the raw data of table-view-foo-bar?&rdquo;, which, explains why we need a Metadata Governance system in a mature data stack with a relatively large scale of data and team(or one to be grown to).</p>
<p>For the other term, Data Lineage, is one of the Metadata that needs to be managed, for example, some dashboard is the downstream of a table view, which has an upstream as two other tables from different databases. That information should be managed at best when possible, too, to enable a trust chain on a data-driven team.</p>
<h2 id="the-reference-solution" class="headerLink">
    <a href="#the-reference-solution" class="header-mark"></a>2 The reference solution</h2><h3 id="motivation" class="headerLink">
    <a href="#motivation" class="header-mark"></a>2.1 Motivation</h3><p>The metadata and data lineage are by nature fitting to the graph model/graph database well, and the relationship-oriented queries, for instance, &ldquo;finding all n-depth data lineage per given component(i.e. a table)&rdquo; is a <code>FIND ALL PATH</code> query in a graph database.</p>
<p>This also explains one observation of mine as an OSS contributor of Nebula Graph, a distributed graph database: (from their queries/graph modeling in discussions I could tell) a bunch of teams who are already levering Nebula Graph on their tech stack, are setting up a data lineage system on their own, from scratch.</p>
<p>A Metadata Governance system needs some of the following components:</p>
<ul>
<li>Metadata Extractor
<ul>
<li>This part is needed to either pull or be pushed from the different parties of the data stack like databases, data warehouses, dashboards, or even from ETL pipeline and applications, etc.</li>
</ul>
</li>
<li>Metadata Storage
<ul>
<li>This could be either a database or even large JSON manifest files</li>
</ul>
</li>
<li>Metadata Catalog
<ul>
<li>This could be a system providing API and/or a GUI interface to read/write the metadata and data lineage</li>
</ul>
</li>
</ul>
<p>In Nebula Graph community, I had been seeing many graph database users were building their in-house data lineage system. It’s itching witnessing this entropy increase situation not be standarized or jointly contributed instead, as most of their work are parsing metadata from well-known big-data projects, and persistent into a graph database, which, I consider high probability that the work is common.</p>
<p>Then I came to create an opinionated reference data infra stack with some of those best open-source projects put together. Hopefully, those who were gonna define and iterate their own fashion of Graph Model on Nebula Graph and create in-house Metadata and data linage extracting pipelines can benefit from this project to have a relatively polished, beautifully designed, Metadata Governance system out of the box with a fully evolved graph model.</p>
<p>To make the reference project self-contained and runnable, I tried to put layers of data infra stack more than just pure metadata related ones, thus, maybe it will help new data engineers who would like to try and see how far had open-source pushed a modern data lab to.</p>
<p>This is a diagram of all the components in this reference data stack, where I see most of them as Metadata Sources:</p>
<p><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168849779-4826f50e-ff87-4e78-b17f-076f91182c43.svg" title="diagram-of-ref-project" data-thumbnail="https://user-images.githubusercontent.com/1651790/168849779-4826f50e-ff87-4e78-b17f-076f91182c43.svg">
        
    </a></p>
<h3 id="the-data-stack" class="headerLink">
    <a href="#the-data-stack" class="header-mark"></a>2.2 The Data Stack</h3><p>Then, let&rsquo;s introduce the components.</p>
<h4 id="database-and-data-warehouse" class="headerLink">
    <a href="#database-and-data-warehouse" class="header-mark"></a>2.2.1 Database and Data Warehouse</h4><p>For processing and consuming raw and intermediate data, one or more databases and/or warehouses should be used.</p>
<p>It could be any DB/DW like Hive, Apache Delta, TiDB, Cassandra, MySQL, or Postgres, in this reference project, we simply choose one of the most popular ones: Postgres. And our reference lab comes with the first service:</p>
<p>✅ - Data warehouse: Postgres</p>
<h4 id="dataops" class="headerLink">
    <a href="#dataops" class="header-mark"></a>2.2.2 DataOps</h4><p>We should have some sort of DataOps setup to enable pipelines and environments to be repeatable, testable, and version-controlled.</p>
<p>Here, we used <a href="https://gitlab.com/meltano/meltano" target="_blank" rel="noopener noreferrer">Meltano</a> created by GitLab.</p>
<p>Meltano is a just-work DataOps platform that connected <a href="https://singer.io/" target="_blank" rel="noopener noreferrer">Singer</a> as the EL and <a href="https://getdbt.com/" target="_blank" rel="noopener noreferrer">dbt</a> as the T in a magically elegant way, it is also connected to some other dataInfra utilities such as Apache Superset and Apache Airflow, etc.</p>
<p>Thus, we have one more thing to be included:</p>
<p>✅ - GitOps: Meltano</p>
<h4 id="etl" class="headerLink">
    <a href="#etl" class="header-mark"></a>2.2.3 ETL</h4><p>And under the hood, we will E(extract) and L(load) data from many different data sources to data targets leveraging <a href="https://singer.io/" target="_blank" rel="noopener noreferrer">Singer</a> together with Meltano, and do T(transformation) with <a href="https://getdbt.com/" target="_blank" rel="noopener noreferrer">dbt</a>.</p>
<p>✅ - EL: Singer</p>
<p>✅ - T: dbt</p>
<h4 id="data-visualization" class="headerLink">
    <a href="#data-visualization" class="header-mark"></a>2.2.4 Data Visualization</h4><p>How about creating dashboards, charts, and tables for getting the insights into all the data?</p>
<p><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/172800854-8e01acae-696d-4e07-8e3e-a7d34dec8278.png" title="https://user-images.githubusercontent.com/1651790/172800854-8e01acae-696d-4e07-8e3e-a7d34dec8278.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/172800854-8e01acae-696d-4e07-8e3e-a7d34dec8278.png">
        
    </a></p>
<p><a href="https://superset.apache.org/" target="_blank" rel="noopener noreferrer">Apache Superset</a> is one of the greatest visualization platforms we could choose from, and we just add it to our packet!</p>
<p>✅ - Dashboard: Apache Superset</p>
<h4 id="job-orchestration" class="headerLink">
    <a href="#job-orchestration" class="header-mark"></a>2.2.5 Job Orchestration</h4><p>In most cases, our DataOps jobs grow to the scale to be executed in a long time that needs to be orchestrated, and here comes the <a href="https://airflow.apache.org/" target="_blank" rel="noopener noreferrer">Apache Airflow</a>.</p>
<p>✅ - DAG: Apache Airflow</p>
<h4 id="metadata-governance" class="headerLink">
    <a href="#metadata-governance" class="header-mark"></a>2.2.6 Metadata governance</h4><p>With more components and data being introduced to a data infra, there will be massive metadata in all lifecycle of databases, tables, schemas, dashboards, DAGs, applications, and their administrators and teams could be collectively managed, connected, and discovered.</p>
<p><a href="https://www.amundsen.io/amundsen/" target="_blank" rel="noopener noreferrer">Linux Foundation Amundsen</a> is one of the best projects solving this problem.</p>
<p><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/172801018-ecd67fa9-2743-451f-8734-b14f2a814199.png" title="https://user-images.githubusercontent.com/1651790/172801018-ecd67fa9-2743-451f-8734-b14f2a814199.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/172801018-ecd67fa9-2743-451f-8734-b14f2a814199.png">
        
    </a></p>
<p>✅ - Data Discovery: Linux Foundation Amundsen</p>
<p>With a graph database as the source of truth to accelerate the multi-hop queries together with elasticsearch as the full-text search engine, Amundsen indexes all the metadata and their lineage smoothly, and beautifully in the next level.</p>
<p>By default, <a href="https://neo4j.org/" target="_blank" rel="noopener noreferrer">neo4j</a> was used as the graph database, while I will be using <a href="http://nebula-graph.io/" target="_blank" rel="noopener noreferrer">Nebula Graph</a> instead in this project due to I am more familiar with the latter.</p>
<p>✅ - Full-text Search: elasticsearch</p>
<p>✅ - Graph Database: Nebula Graph</p>
<p>Now, with the components in our stack being revealed, let&rsquo;s have them assembled.</p>
<h2 id="environment-bootstrap-component-overview" class="headerLink">
    <a href="#environment-bootstrap-component-overview" class="header-mark"></a>3 Environment Bootstrap, Component overview</h2><p>The reference runnable project is open-source and you could find it here:</p>
<ul>
<li><a href="https://github.com/wey-gu/data-lineage-ref-solution" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/data-lineage-ref-solution</a></li>
</ul>
<p>I will try my best to make things clean and isolated. It&rsquo;s assumed you are running on a UNIX-like system with internet and Docker Compose being installed.</p>
<blockquote>
<p>Please refer <a href="https://docs.docker.com/compose/install/" target="_blank" rel="noopener noreferrer">here</a> to install Docker and Docker Compose before moving forward.</p>
</blockquote>
<p>I am running it on Ubuntu 20.04 LTS X86_64, but there shouldn&rsquo;t be issues on other distros or versions of Linux.</p>
<h3 id="run-a-data-warehouse-database" class="headerLink">
    <a href="#run-a-data-warehouse-database" class="header-mark"></a>3.1 Run a Data Warehouse/ Database</h3><p>First, let&rsquo;s install Postgres as our data warehouse.</p>
<p>This oneliner will help create a Postgres running in the background with docker, and when being stopped it will be cleaned up(<code>--rm</code>).</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run --rm --name postgres <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -e <span class="nv">POSTGRES_PASSWORD</span><span class="o">=</span>lineage_ref <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -e <span class="nv">POSTGRES_USER</span><span class="o">=</span>lineage_ref <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -e <span class="nv">POSTGRES_DB</span><span class="o">=</span>warehouse -d <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -p 5432:5432 postgres
</span></span></code></pre></td></tr></table>
</div>
</div><p>Then we could verify it with Postgres CLI or GUI clients.</p>
<blockquote>
<p>Hint: You could use VS Code extension: <a href="https://marketplace.visualstudio.com/items?itemName=mtxr.sqltools" target="_blank" rel="noopener noreferrer">SQL tools</a> to quickly connect to multiple RDBMS(MariaDB, Postgres, etc.) or even Non-SQL DBMS like Cassandra in a GUI fashion.</p>
</blockquote>
<h3 id="setup-dataops-toolchain-for-etl" class="headerLink">
    <a href="#setup-dataops-toolchain-for-etl" class="header-mark"></a>3.2 Setup DataOps toolchain for ETL</h3><p>Then, let&rsquo;s get Meltano with Singler and dbt installed.</p>
<p>Meltano helps us manage ETL utilities(as plugins) and all of their configurations(the pipelines). Those meta-information sits in meltano configurations and its <a href="https://docs.meltano.com/concepts/project#system-database" target="_blank" rel="noopener noreferrer">system database</a>, where the configurations are file-based(could be managed with git) and by default the system database is SQLite.</p>
<h4 id="installation-of-meltano" class="headerLink">
    <a href="#installation-of-meltano" class="header-mark"></a>3.2.1 Installation of Meltano</h4><p>The workflow using Meltano is to initiate a <code>meltano project</code> and start to add E, L, and T into the configuration files. The initiation of a project just requires a CLI command call: <code>meltano init yourprojectname</code> and to do that, we could install Meltano either with Python&rsquo;s package manager: pip or via a Docker image:</p>
<ul>
<li>Install Meltano with pip in a python virtual env:</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkdir .venv
</span></span><span class="line"><span class="cl"><span class="c1"># example in a debian flavor Linux distro</span>
</span></span><span class="line"><span class="cl">sudo apt-get install python3-dev python3-pip python3-venv python3-wheel -y
</span></span><span class="line"><span class="cl">python3 -m venv .venv/meltano
</span></span><span class="line"><span class="cl"><span class="nb">source</span> .venv/meltano/bin/activate
</span></span><span class="line"><span class="cl">python3 -m pip install wheel
</span></span><span class="line"><span class="cl">python3 -m pip install meltano
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># init a project</span>
</span></span><span class="line"><span class="cl">mkdir meltano_projects <span class="o">&amp;&amp;</span> <span class="nb">cd</span> meltano_projects
</span></span><span class="line"><span class="cl"><span class="c1"># replace &lt;yourprojectname&gt; with your own one</span>
</span></span><span class="line"><span class="cl">touch .env
</span></span><span class="line"><span class="cl">meltano init &lt;yourprojectname&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>&ldquo;Install&rdquo; Meltano via Docker</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker pull meltano/meltano:latest
</span></span><span class="line"><span class="cl">docker run --rm meltano/meltano --version
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># init a project</span>
</span></span><span class="line"><span class="cl">mkdir meltano_projects <span class="o">&amp;&amp;</span> <span class="nb">cd</span> meltano_projects
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># replace &lt;yourprojectname&gt; with your own one</span>
</span></span><span class="line"><span class="cl">touch .env
</span></span><span class="line"><span class="cl">docker run --rm -v <span class="s2">&#34;</span><span class="k">$(</span><span class="nb">pwd</span><span class="k">)</span><span class="s2">&#34;</span>:/projects <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>             -w /projects --env-file .env <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>             meltano/meltano init &lt;yourprojectname&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p>Apart from <code>meltano init</code>, there are a couple of other commands like <code>meltano etl</code> to perform ETL executions, and <code>meltano invoke &lt;plugin&gt;</code> to call plugins&rsquo; command, always check the <a href="https://docs.meltano.com/reference/command-line-interface" target="_blank" rel="noopener noreferrer">cheatsheet</a> for quick referencing.</p>
<h4 id="the-meltano-ui" class="headerLink">
    <a href="#the-meltano-ui" class="header-mark"></a>3.2.2 The Meltano UI</h4><p>Meltano also comes with a web-based UI, to start it, just run:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">meltano ui
</span></span></code></pre></td></tr></table>
</div>
</div><p>Then it&rsquo;s listening to http://localhost:5000.</p>
<p>For Docker, just run the container with the 5000 port exposed, here we didn&rsquo;t provide <code>ui</code> in the end due to the container&rsquo;s default command being <code>meltano ui</code> already.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run -v <span class="s2">&#34;</span><span class="k">$(</span><span class="nb">pwd</span><span class="k">)</span><span class="s2">&#34;</span>:/project <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>             -w /project <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>             -p 5000:5000 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>             meltano/meltano
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="example-meltano-projects" class="headerLink">
    <a href="#example-meltano-projects" class="header-mark"></a>3.2.3 Example Meltano projects</h4><p>When writing this article, I noticed that <a href="https://github.com/pnadolny13" target="_blank" rel="noopener noreferrer">Pat Nadolny</a> had created <a href="https://github.com/pnadolny13/meltano_example_implementations/tree/main/meltano_projects/singer_dbt_jaffle" target="_blank" rel="noopener noreferrer">great examples</a> on an example dataset for Meltano with dbt(And with <a href="https://github.com/pnadolny13/meltano_example_implementations/tree/main/meltano_projects/dbt_orchestration" target="_blank" rel="noopener noreferrer">Airflow</a> and <a href="https://github.com/pnadolny13/meltano_example_implementations/tree/main/meltano_projects/jaffle_superset" target="_blank" rel="noopener noreferrer">Superset</a>, too!). We will not recreate the examples and use Pat&rsquo;s great ones.</p>
<blockquote>
<p>Note that Andrew Stewart had created another one with a slightly older version of configuration files.</p>
</blockquote>
<p>You could follow <a href="https://github.com/pnadolny13/meltano_example_implementations/tree/main/meltano_projects/singer_dbt_jaffle" target="_blank" rel="noopener noreferrer">here</a> to run a pipeline of:</p>
<ul>
<li><a href="https://hub.meltano.com/taps/csv" target="_blank" rel="noopener noreferrer">tap-CSV</a>(Singer), extracting data from CSV files</li>
<li><a href="https://hub.meltano.com/targets/postgres" target="_blank" rel="noopener noreferrer">target-postgres</a>(Singer), loading data to Postgres</li>
<li><a href="https://hub.meltano.com/transformers/dbt" target="_blank" rel="noopener noreferrer">dbt</a>, transform the data into aggregated tables or views</li>
</ul>
<blockquote>
<p>You should omit the step of running the local Postgres with docker as we had already created one, be sure to change the Postgres user and password in <code>.env</code>.</p>
<p>And it&rsquo;s basically as this(with meltano being installed as above):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone https://github.com/pnadolny13/meltano_example_implementations.git
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> meltano_example_implementations/meltano_projects/singer_dbt_jaffle/
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">meltano install
</span></span><span class="line"><span class="cl">touch .env
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="nv">PG_PASSWORD</span><span class="o">=</span><span class="s2">&#34;lineage_ref&#34;</span> &gt;&gt; .env
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="nv">PG_USERNAME</span><span class="o">=</span><span class="s2">&#34;lineage_ref&#34;</span> &gt;&gt; .env
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Extract and Load(with Singer)</span>
</span></span><span class="line"><span class="cl">meltano run tap-csv target-postgres
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Trasnform(with dbt)</span>
</span></span><span class="line"><span class="cl">meltano run dbt:run
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Generate dbt docs</span>
</span></span><span class="line"><span class="cl">meltano invoke dbt docs generate
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Serve generated dbt docs</span>
</span></span><span class="line"><span class="cl">meltano invoke dbt docs to serve
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Then visit http://localhost:8080</span>
</span></span></code></pre></td></tr></table>
</div>
</div></blockquote>
<p>Now, I assumed you had finished trying out <code>singer_dbt_jaffle</code> following its <a href="https://github.com/pnadolny13/meltano_example_implementations/tree/main/meltano_projects/singer_dbt_jaffle" target="_blank" rel="noopener noreferrer">README.md</a>, and we could connect to the Postgres to see the loaded and transformed data being reflected as follow, the screenshot is from the SQLTool of VS Code:</p>
<p><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/167540494-01e3dbd2-6ab1-41d2-998e-3b79f755bdc7.png" title="https://user-images.githubusercontent.com/1651790/167540494-01e3dbd2-6ab1-41d2-998e-3b79f755bdc7.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/167540494-01e3dbd2-6ab1-41d2-998e-3b79f755bdc7.png">
        
    </a></p>
<h3 id="setup-a-bi-platform-for-dashboard" class="headerLink">
    <a href="#setup-a-bi-platform-for-dashboard" class="header-mark"></a>3.3 Setup a BI Platform for Dashboard</h3><p>Now, we have the data in data warehouses, with ETL toolchains to pipe different data sources into it. How could those data be consumed?</p>
<p>BI tools like the dashboard could be one way to help us get insights from the data.</p>
<p>With Apache Superset, dashboards, and charts based on those data sources could be created and managed smoothly and beautifully.</p>
<p>The focus of this project was not on Apache Superset itself, thus, we simply reuse examples that <a href="https://github.com/pnadolny13" target="_blank" rel="noopener noreferrer">Pat Nadolny</a> had created in <a href="https://github.com/pnadolny13/meltano_example_implementations/tree/main/meltano_projects/jaffle_superset" target="_blank" rel="noopener noreferrer">Superset as a utility if meltano Example</a>.</p>
<h4 id="bootstrap-meltano-and-superset" class="headerLink">
    <a href="#bootstrap-meltano-and-superset" class="header-mark"></a>3.3.1 Bootstrap Meltano and Superset</h4><p>Create a python venv with Meltano installed:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkdir .venv
</span></span><span class="line"><span class="cl">python3 -m venv .venv/meltano
</span></span><span class="line"><span class="cl"><span class="nb">source</span> .venv/meltano/bin/activate
</span></span><span class="line"><span class="cl">python3 -m pip install wheel
</span></span><span class="line"><span class="cl">python3 -m pip install meltano
</span></span></code></pre></td></tr></table>
</div>
</div><p>Following <a href="https://github.com/pnadolny13/meltano_example_implementations/tree/main/meltano_projects/jaffle_superset" target="_blank" rel="noopener noreferrer">Pat&rsquo;s guide</a>, with tiny modifications:</p>
<ul>
<li>Clone the repo, enter the <code>jaffle_superset</code> project</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone https://github.com/pnadolny13/meltano_example_implementations.git
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> meltano_example_implementations/meltano_projects/jaffle_superset/
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>Modify the meltano configuration files to let Superset connect to the Postgres we created:</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">vim meltano_projects/jaffle_superset/meltano.yml
</span></span></code></pre></td></tr></table>
</div>
</div><p>In my example, I changed the hostname to <code>10.1.1.111</code>, which is the IP of my current host, while if you are running it on your macOS machine, this should be fine to leave with it, the diff before and after the change would be:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl"><span class="gd">--- a/meltano_projects/jaffle_superset/meltano.yml
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+++ b/meltano_projects/jaffle_superset/meltano.yml
</span></span></span><span class="line"><span class="cl"><span class="gi"></span><span class="gu">@@ -71,7 +71,7 @@ plugins:
</span></span></span><span class="line"><span class="cl"><span class="gu"></span>               A list of database driver dependencies can be found here https://superset.apache.org/docs/databases/installing-database-drivers
</span></span><span class="line"><span class="cl">     config:
</span></span><span class="line"><span class="cl">       database_name: my_postgres
</span></span><span class="line"><span class="cl"><span class="gd">-      sqlalchemy_uri: postgresql+psycopg2://${PG_USERNAME}:${PG_PASSWORD}@host.docker.internal:${PG_PORT}/${PG_DATABASE}
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+      sqlalchemy_uri: postgresql+psycopg2://${PG_USERNAME}:${PG_PASSWORD}@10.1.1.168:${PG_PORT}/${PG_DATABASE}
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>       tables:
</span></span><span class="line"><span class="cl">       - model.my_meltano_project.customers
</span></span><span class="line"><span class="cl">       - model.my_meltano_project.orders
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>Add Postgres credential to <code>.env</code> file:</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">echo</span> <span class="nv">PG_USERNAME</span><span class="o">=</span>lineage_ref &gt;&gt; .env
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="nv">PG_PASSWORD</span><span class="o">=</span>lineage_ref &gt;&gt; .env
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>Install the Meltano project, run ETL pipeline</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">meltano install
</span></span><span class="line"><span class="cl">meltano run tap-csv target-postgres dbt:run
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>Start Superset, please note that the <code>ui</code> is not a meltano command but a user-defined action in the configuration file.</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">meltano invoke superset:ui
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>In another terminal, run the defined command <code>load_datasources</code></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">meltano invoke superset:load_datasources
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>Access Superset in a web browser via http://localhost:8088/</li>
</ul>
<p>We should now see Superset Web Interface:</p>
<p><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168570300-186b56a5-58e8-4ff1-bc06-89fd77d74166.png" title="https://user-images.githubusercontent.com/1651790/168570300-186b56a5-58e8-4ff1-bc06-89fd77d74166.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168570300-186b56a5-58e8-4ff1-bc06-89fd77d74166.png">
        
    </a></p>
<h4 id="create-a-dashboard" class="headerLink">
    <a href="#create-a-dashboard" class="header-mark"></a>3.3.2 Create a Dashboard!</h4><p>Let&rsquo;s try to create a Dashboard on the ETL data in Postgres defined in this Meltano project:</p>
<ul>
<li>Click <code>+ DASHBOARD</code>, fill a dashboard name, then click <code>SAVE</code>, then clieck <code>+ CREATE A NEW CHART</code></li>
</ul>
<p><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168570363-c6b4f929-2aad-4f03-8e3e-b1b61f560ce5.png" title="https://user-images.githubusercontent.com/1651790/168570363-c6b4f929-2aad-4f03-8e3e-b1b61f560ce5.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168570363-c6b4f929-2aad-4f03-8e3e-b1b61f560ce5.png">
        
    </a></p>
<ul>
<li>In new chart view, we should select a chart type and DATASET. Here, I selected <code>orders</code> table as the data source and <code>Pie Chart</code> chart type:</li>
</ul>
<p><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168570927-9559a2a1-fed7-43be-9f6a-f6fb3c263830.png" title="https://user-images.githubusercontent.com/1651790/168570927-9559a2a1-fed7-43be-9f6a-f6fb3c263830.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168570927-9559a2a1-fed7-43be-9f6a-f6fb3c263830.png">
        
    </a></p>
<ul>
<li>After clicking <code>CREATE NEW CHART</code>, we are in the chart defination view, where, I selected <code>Query</code> of <code>status</code> as <code>DIMENSIONS</code>, and <code>COUNT(amount)</code> as <code>METRIC</code>. Thus, we could see a Pie Chart per order status&rsquo;s distribution.</li>
</ul>
<p><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168571130-a65ba88e-1ebe-4699-8783-08e5ecf54a0c.png" title="https://user-images.githubusercontent.com/1651790/168571130-a65ba88e-1ebe-4699-8783-08e5ecf54a0c.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168571130-a65ba88e-1ebe-4699-8783-08e5ecf54a0c.png">
        
    </a></p>
<ul>
<li>Click <code>SAVE</code> , it will ask which dashboard this chart should be added to, after it&rsquo;s selected, click <code>SAVE &amp; GO TO DASHBOARD</code>.</li>
</ul>
<p><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168571301-8ae69983-eda8-4e75-99cf-6904f583fc7c.png" title="https://user-images.githubusercontent.com/1651790/168571301-8ae69983-eda8-4e75-99cf-6904f583fc7c.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168571301-8ae69983-eda8-4e75-99cf-6904f583fc7c.png">
        
    </a></p>
<ul>
<li>Then, in the dashboard, we coulds see all charts there. You could see that I added another chart showing customer order count distribution, too:</li>
</ul>
<p><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168571878-30a77057-1f66-448a-9bbd-0dedcee24cc9.png" title="https://user-images.githubusercontent.com/1651790/168571878-30a77057-1f66-448a-9bbd-0dedcee24cc9.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168571878-30a77057-1f66-448a-9bbd-0dedcee24cc9.png">
        
    </a></p>
<ul>
<li>We could set the refresh inteval, or download the dashboard as you wish by clicking the <code>···</code> button.</li>
</ul>
<p><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168573874-b5d57919-2866-4b3c-a4e5-55b6e6ef342e.png" title="https://user-images.githubusercontent.com/1651790/168573874-b5d57919-2866-4b3c-a4e5-55b6e6ef342e.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168573874-b5d57919-2866-4b3c-a4e5-55b6e6ef342e.png">
        
    </a></p>
<p>It&rsquo;s quite cool, ah? For now, we have a simple but typical data stack like any hobby data lab with everything open-source!</p>
<p>Imagine we have 100 datasets in CSV, 200 tables in Data warehouse and a couple of data engineers running different projects that consume, generate different application, dashboard, and databases. When someone would like to discovery some of those table, dataset, dashboard and pipelines running across them, and then even modify some of them, it&rsquo;s proven to be quite costly in both communicationand engineering.</p>
<p>Here comes the main part of our reference project: Metadata Discovery.</p>
<h3 id="metadata-discovery" class="headerLink">
    <a href="#metadata-discovery" class="header-mark"></a>3.4 Metadata Discovery</h3><p>Then, we are stepping to deploy the Amundsen with Nebula Graph and Elasticsearch.</p>
<blockquote>
<p>Note: For the time being, the <a href="https://github.com/amundsen-io/amundsen/pull/1817" target="_blank" rel="noopener noreferrer">PR Nebula Graph as the Amundsen backend</a> is not yet merged, I am <a href="https://github.com/amundsen-io/rfcs/pull/48" target="_blank" rel="noopener noreferrer">working with the Amundsen team</a> to make it happen.</p>
</blockquote>
<p>With Amundsen, we could have all metadata of the whole data stack being discovered and managed in one place. And there are mainly two parts of Amundsen:</p>
<ul>
<li>Metadata Ingestion
<ul>
<li><a href="https://www.amundsen.io/amundsen/databuilder/" target="_blank" rel="noopener noreferrer">Amundsen Data builder</a></li>
</ul>
</li>
<li>Metadata Catalog
<ul>
<li><a href="https://www.amundsen.io/amundsen/frontend/" target="_blank" rel="noopener noreferrer">Amundsen Frontend service</a></li>
<li><a href="https://www.amundsen.io/amundsen/metadata/" target="_blank" rel="noopener noreferrer">Amundsen Metadata service</a></li>
<li><a href="https://www.amundsen.io/amundsen/search/" target="_blank" rel="noopener noreferrer">Amundsen Search service</a></li>
</ul>
</li>
</ul>
<p>We will be leveraging <code>Data builder</code> to pull metadata from different sources, and persist metadata into the backend storage of the <code>Meta service</code> and the backend storage of the <code>Search service</code>, then we could search, discover and manage them from the <code>Frontend service</code> or through the API of the <code>Metadata service</code>.</p>
<h4 id="deploy-amundsen" class="headerLink">
    <a href="#deploy-amundsen" class="header-mark"></a>3.4.1 Deploy Amundsen</h4><h5 id="metadata-service" class="headerLink">
    <a href="#metadata-service" class="header-mark"></a>3.4.1.1 Metadata service</h5><p>We are going to deploy a cluster of Amundsen with its docker-compose file. As the Nebula Graph backend support is not yet merged, we are referring to my fork.</p>
<p>First, let&rsquo;s clone the repo with all submodules:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone -b amundsen_nebula_graph --recursive git@github.com:wey-gu/amundsen.git
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> amundsen
</span></span></code></pre></td></tr></table>
</div>
</div><p>Then, start all catalog services and their backend storage:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker-compose -f docker-amundsen-nebula.yml up
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>You could add <code>-d</code> to put the containers running in the background:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker-compose -f docker-amundsen-nebula.yml up -d
</span></span></code></pre></td></tr></table>
</div>
</div><p>And this will stop the cluster:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker-compose -f docker-amundsen-nebula.yml stop
</span></span></code></pre></td></tr></table>
</div>
</div><p>This will remove the cluster:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker-compose -f docker-amundsen-nebula.yml down
</span></span></code></pre></td></tr></table>
</div>
</div></blockquote>
<p>Due to this docker-compose file is for developers to play and hack Amundsen easily rather than for production deployment, it&rsquo;s building images from the codebase, which, will take some time for the very first time.</p>
<p>After it&rsquo;s being deployed, please hold on a second before we load some dummy data into its storage with Data builder.</p>
<h5 id="data-builder" class="headerLink">
    <a href="#data-builder" class="header-mark"></a>3.4.1.2 Data builder</h5><p>Amundsen Data builder is just like a Meltano but for ETL of Metadata to <code>Metadata service</code> and <code>Search service</code>‘s backend storage: Nebula Graph and Elasticsearch. The Data builder here is only a python module and the ETL job could be either run as a script or orchestrated with a DAG platform like Apache Airflow.</p>
<p>With <a href="https://github.com/amundsen-io/amundsen/tree/main/databuilder" target="_blank" rel="noopener noreferrer">Amundsen Data builder</a> being installed:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> databuilder
</span></span><span class="line"><span class="cl">python3 -m venv .venv
</span></span><span class="line"><span class="cl"><span class="nb">source</span> .venv/bin/activate
</span></span><span class="line"><span class="cl">python3 -m pip install wheel
</span></span><span class="line"><span class="cl">python3 -m pip install -r requirements.txt
</span></span><span class="line"><span class="cl">python3 setup.py install
</span></span></code></pre></td></tr></table>
</div>
</div><p>Let&rsquo;s call this sample Data builder ETL script to have some dummy data filled in.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">python3 example/scripts/sample_data_loader_nebula.py
</span></span></code></pre></td></tr></table>
</div>
</div><h5 id="verify-amundsen" class="headerLink">
    <a href="#verify-amundsen" class="header-mark"></a>3.4.1.3 Verify Amundsen</h5><p>Before accessing Amundsen, we need to create a test user:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># run a container with curl attached to amundsenfrontend</span>
</span></span><span class="line"><span class="cl">docker run -it --rm --net container:amundsenfrontend nicolaka/netshoot
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Create a user with id test_user_id</span>
</span></span><span class="line"><span class="cl">curl -X PUT -v http://amundsenmetadata:5002/user <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -H <span class="s2">&#34;Content-Type: application/json&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --data <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="s1">&#39;{&#34;user_id&#34;:&#34;test_user_id&#34;,&#34;first_name&#34;:&#34;test&#34;,&#34;last_name&#34;:&#34;user&#34;, &#34;email&#34;:&#34;test_user_id@mail.com&#34;}&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">exit</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Then we could view UI at <a href="http://localhost:5000/" target="_blank" rel="noopener noreferrer"><code>http://localhost:5000</code></a> and try to search <code>test</code>, it should return some results.</p>
<p><a class="lightgallery" href="https://github.com/amundsen-io/amundsen/raw/master/docs/img/search-page.png" title="https://github.com/amundsen-io/amundsen/raw/master/docs/img/search-page.png" data-thumbnail="https://github.com/amundsen-io/amundsen/raw/master/docs/img/search-page.png">
        
    </a></p>
<p>Then you could click and explore those dummy metadata loaded to Amundsen during the <code>sample_data_loader_nebula.py</code> on your own.</p>
<p>Additionally, you could access the Graph Database with Nebula Studio(http://localhost:7001).</p>
<blockquote>
<p>Note in Nebula Studio, the default fields to log in will be:</p>
<ul>
<li>Hosts: <code>graphd:9669</code></li>
<li>User: <code>root</code></li>
<li>Password: <code>nebula</code></li>
</ul>
</blockquote>
<p>This diagram shows some more details on the components of Amundsen:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">       ┌────────────────────────┐ ┌────────────────────────────────────────┐
</span></span><span class="line"><span class="cl">       │ Frontend:5000          │ │ Metadata Sources                       │
</span></span><span class="line"><span class="cl">       ├────────────────────────┤ │ ┌────────┐ ┌─────────┐ ┌─────────────┐ │
</span></span><span class="line"><span class="cl">       │ Metaservice:5001       │ │ │        │ │         │ │             │ │
</span></span><span class="line"><span class="cl">       │ ┌──────────────┐       │ │ │ Foo DB │ │ Bar App │ │ X Dashboard │ │
</span></span><span class="line"><span class="cl">  ┌────┼─┤ Nebula Proxy │       │ │ │        │ │         │ │             │ │
</span></span><span class="line"><span class="cl">  │    │ └──────────────┘       │ │ │        │ │         │ │             │ │
</span></span><span class="line"><span class="cl">  │    ├────────────────────────┤ │ └────────┘ └─────┬───┘ └─────────────┘ │
</span></span><span class="line"><span class="cl">┌─┼────┤ Search searvice:5002   │ │                  │                     │
</span></span><span class="line"><span class="cl">│ │    └────────────────────────┘ └──────────────────┼─────────────────────┘
</span></span><span class="line"><span class="cl">│ │    ┌─────────────────────────────────────────────┼───────────────────────┐
</span></span><span class="line"><span class="cl">│ │    │                                             │                       │
</span></span><span class="line"><span class="cl">│ │    │ Databuilder     ┌───────────────────────────┘                       │
</span></span><span class="line"><span class="cl">│ │    │                 │                                                   │
</span></span><span class="line"><span class="cl">│ │    │ ┌───────────────▼────────────────┐ ┌──────────────────────────────┐ │
</span></span><span class="line"><span class="cl">│ │ ┌──┼─► Extractor of Sources           ├─► nebula_search_data_extractor │ │
</span></span><span class="line"><span class="cl">│ │ │  │ └───────────────┬────────────────┘ └──────────────┬───────────────┘ │
</span></span><span class="line"><span class="cl">│ │ │  │ ┌───────────────▼────────────────┐ ┌──────────────▼───────────────┐ │
</span></span><span class="line"><span class="cl">│ │ │  │ │ Loader filesystem_csv_nebula   │ │ Loader Elastic FS loader     │ │
</span></span><span class="line"><span class="cl">│ │ │  │ └───────────────┬────────────────┘ └──────────────┬───────────────┘ │
</span></span><span class="line"><span class="cl">│ │ │  │ ┌───────────────▼────────────────┐ ┌──────────────▼───────────────┐ │
</span></span><span class="line"><span class="cl">│ │ │  │ │ Publisher nebula_csv_publisher │ │ Publisher Elasticsearch      │ │
</span></span><span class="line"><span class="cl">│ │ │  │ └───────────────┬────────────────┘ └──────────────┬───────────────┘ │
</span></span><span class="line"><span class="cl">│ │ │  └─────────────────┼─────────────────────────────────┼─────────────────┘
</span></span><span class="line"><span class="cl">│ │ └────────────────┐   │                                 │
</span></span><span class="line"><span class="cl">│ │    ┌─────────────┼───►─────────────────────────┐ ┌─────▼─────┐
</span></span><span class="line"><span class="cl">│ │    │ Nebula Graph│   │                         │ │           │
</span></span><span class="line"><span class="cl">│ └────┼─────┬───────┴───┼───────────┐     ┌─────┐ │ │           │
</span></span><span class="line"><span class="cl">│      │     │           │           │     │MetaD│ │ │           │
</span></span><span class="line"><span class="cl">│      │ ┌───▼──┐    ┌───▼──┐    ┌───▼──┐  └─────┘ │ │           │
</span></span><span class="line"><span class="cl">│ ┌────┼─►GraphD│    │GraphD│    │GraphD│          │ │           │
</span></span><span class="line"><span class="cl">│ │    │ └──────┘    └──────┘    └──────┘  ┌─────┐ │ │           │
</span></span><span class="line"><span class="cl">│ │    │ :9669                             │MetaD│ │ │  Elastic  │
</span></span><span class="line"><span class="cl">│ │    │ ┌────────┐ ┌────────┐ ┌────────┐  └─────┘ │ │  Search   │
</span></span><span class="line"><span class="cl">│ │    │ │        │ │        │ │        │          │ │  Cluster  │
</span></span><span class="line"><span class="cl">│ │    │ │StorageD│ │StorageD│ │StorageD│  ┌─────┐ │ │  :9200    │
</span></span><span class="line"><span class="cl">│ │    │ │        │ │        │ │        │  │MetaD│ │ │           │
</span></span><span class="line"><span class="cl">│ │    │ └────────┘ └────────┘ └────────┘  └─────┘ │ │           │
</span></span><span class="line"><span class="cl">│ │    ├───────────────────────────────────────────┤ │           │
</span></span><span class="line"><span class="cl">│ └────┤ Nebula Studio:7001                        │ │           │
</span></span><span class="line"><span class="cl">│      └───────────────────────────────────────────┘ └─────▲─────┘
</span></span><span class="line"><span class="cl">└──────────────────────────────────────────────────────────┘
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="connecting-the-dots-metadata-discovery" class="headerLink">
    <a href="#connecting-the-dots-metadata-discovery" class="header-mark"></a>4 Connecting the dots, Metadata Discovery</h2><p>With the basic environment being set up, let&rsquo;s put everything together.</p>
<p>Remember we had ELT some data to PostgreSQL as this?</p>
<p><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/167540494-01e3dbd2-6ab1-41d2-998e-3b79f755bdc7.png" title="https://user-images.githubusercontent.com/1651790/167540494-01e3dbd2-6ab1-41d2-998e-3b79f755bdc7.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/167540494-01e3dbd2-6ab1-41d2-998e-3b79f755bdc7.png">
        
    </a></p>
<p>How could we let Amundsen discover metadata regarding those data and ETL?</p>
<h3 id="extracting-postgres-metadata" class="headerLink">
    <a href="#extracting-postgres-metadata" class="header-mark"></a>4.1 Extracting Postgres metadata</h3><p>We started on the data source: Postgres, first.</p>
<p>We install the Postgres Client for python3:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo apt-get install libpq-dev
</span></span><span class="line"><span class="cl">pip3 install Psycopg2
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="execution-of-postgres-metadata-etl" class="headerLink">
    <a href="#execution-of-postgres-metadata-etl" class="header-mark"></a>4.1.1 Execution of Postgres metadata ETL</h4><p>Run a script to parse Postgres Metadata:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">CREDENTIALS_POSTGRES_USER</span><span class="o">=</span>lineage_ref
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">CREDENTIALS_POSTGRES_PASSWORD</span><span class="o">=</span>lineage_ref
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">CREDENTIALS_POSTGRES_DATABASE</span><span class="o">=</span>warehouse
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">python3 example/scripts/sample_postgres_loader_nebula.py
</span></span></code></pre></td></tr></table>
</div>
</div><p>If you look into the code of the sample script for loading Postgres metadata to Nebula, the main lines are quite straightforward:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># part 1: PostgressMetadata --&gt; CSV --&gt; Nebula Graph</span>
</span></span><span class="line"><span class="cl"><span class="n">job</span> <span class="o">=</span> <span class="n">DefaultJob</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">      <span class="n">conf</span><span class="o">=</span><span class="n">job_config</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">task</span><span class="o">=</span><span class="n">DefaultTask</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">          <span class="n">extractor</span><span class="o">=</span><span class="n">PostgresMetadataExtractor</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">          <span class="n">loader</span><span class="o">=</span><span class="n">FsNebulaCSVLoader</span><span class="p">()),</span>
</span></span><span class="line"><span class="cl">      <span class="n">publisher</span><span class="o">=</span><span class="n">NebulaCsvPublisher</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="c1"># part 2: Metadata stored in NebulaGraph --&gt; Elasticsearch</span>
</span></span><span class="line"><span class="cl"><span class="n">extractor</span> <span class="o">=</span> <span class="n">NebulaSearchDataExtractor</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">task</span> <span class="o">=</span> <span class="n">SearchMetadatatoElasticasearchTask</span><span class="p">(</span><span class="n">extractor</span><span class="o">=</span><span class="n">extractor</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">job</span> <span class="o">=</span> <span class="n">DefaultJob</span><span class="p">(</span><span class="n">conf</span><span class="o">=</span><span class="n">job_config</span><span class="p">,</span> <span class="n">task</span><span class="o">=</span><span class="n">task</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>The first job was to load data in path:<code>PostgressMetadata --&gt; CSV --&gt; Nebula Graph</code></p>
<ul>
<li><code>PostgresMetadataExtractor</code> was used to extract/pull metadata from Postgres, refer <a href="https://www.amundsen.io/amundsen/databuilder/#postgresmetadataextractor" target="_blank" rel="noopener noreferrer">here</a> for its documentation.</li>
<li><code>FsNebulaCSVLoader</code> was used to put extracted data intermediately as CSV files</li>
<li><code>NebulaCsvPublisher</code> was used to publish metadata in form of CSV to Nebula Graph</li>
</ul>
<p>The second job was to load in the path: <code>Metadata stored in NebulaGraph --&gt; Elasticsearch</code></p>
<ul>
<li><code>NebulaSearchDataExtractor</code> was used to fetch metadata stored in Nebula Graph</li>
<li><code>SearchMetadatatoElasticasearchTask</code> was used to make metadata indexed with Elasticsearch.</li>
</ul>
<blockquote>
<p>Note, in production, we could trigger those jobs either in scripts or with an orchestration platform like Apache Airflow.</p>
</blockquote>
<h4 id="verify-the-postgres-extraction" class="headerLink">
    <a href="#verify-the-postgres-extraction" class="header-mark"></a>4.1.2 Verify the Postgres Extraction</h4><p>Search <code>payments</code> or directly visit http://localhost:5000/table_detail/warehouse/postgres/public/payments, you could see the metadata from our Postgres like:</p>
<p><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168475180-ebfaa188-268c-4fbe-a614-135d56d07e5d.png" title="https://user-images.githubusercontent.com/1651790/168475180-ebfaa188-268c-4fbe-a614-135d56d07e5d.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168475180-ebfaa188-268c-4fbe-a614-135d56d07e5d.png">
        
    </a></p>
<p>Then, metadata management actions like adding tags, owners, and descriptions could be done easily as it was in the above screen capture, too.</p>
<h3 id="extracting-dbt-metadata" class="headerLink">
    <a href="#extracting-dbt-metadata" class="header-mark"></a>4.2 Extracting dbt metadata</h3><p>Actually, we could also pull metadata from <a href="https://www.getdbt.com/" target="_blank" rel="noopener noreferrer">dbt</a> itself.</p>
<p>The Amundsen <a href="https://www.amundsen.io/amundsen/databuilder/#dbtextractor" target="_blank" rel="noopener noreferrer">DbtExtractor</a>, will parse the <code>catalog.json</code> or <code>manifest.json</code> file to load metadata to Amundsen storage(Nebula Graph and Elasticsearch).</p>
<p>In above meltano chapter, we had already generated that file with <code>meltano invoke dbt docs generate</code>, and the output like the following is telling us the <code>catalog.json</code> file:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">14:23:15  Done.
</span></span><span class="line"><span class="cl">14:23:15  Building catalog
</span></span><span class="line"><span class="cl">14:23:15  Catalog written to /home/ubuntu/ref-data-lineage/meltano_example_implementations/meltano_projects/singer_dbt_jaffle/.meltano/transformers/dbt/target/catalog.json
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="execution-of-dbt-metadata-etl" class="headerLink">
    <a href="#execution-of-dbt-metadata-etl" class="header-mark"></a>4.2.1 Execution of dbt metadata ETL</h4><p>There is an example script with a sample dbt output files:</p>
<p>The sample dbt files:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ls -l example/sample_data/dbt/
</span></span><span class="line"><span class="cl">total <span class="m">184</span>
</span></span><span class="line"><span class="cl">-rw-rw-r-- <span class="m">1</span> w w   <span class="m">5320</span> May <span class="m">15</span> 07:17 catalog.json
</span></span><span class="line"><span class="cl">-rw-rw-r-- <span class="m">1</span> w w <span class="m">177163</span> May <span class="m">15</span> 07:17 manifest.json
</span></span></code></pre></td></tr></table>
</div>
</div><p>We could load this sample dbt manifest with:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">python3 example/scripts/sample_dbt_loader_nebula.py
</span></span></code></pre></td></tr></table>
</div>
</div><p>From this lines of python code, we could tell those process as:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># part 1: Dbt manifest --&gt; CSV --&gt; Nebula Graph</span>
</span></span><span class="line"><span class="cl"><span class="n">job</span> <span class="o">=</span> <span class="n">DefaultJob</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">      <span class="n">conf</span><span class="o">=</span><span class="n">job_config</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">task</span><span class="o">=</span><span class="n">DefaultTask</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">          <span class="n">extractor</span><span class="o">=</span><span class="n">DbtExtractor</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">          <span class="n">loader</span><span class="o">=</span><span class="n">FsNebulaCSVLoader</span><span class="p">()),</span>
</span></span><span class="line"><span class="cl">      <span class="n">publisher</span><span class="o">=</span><span class="n">NebulaCsvPublisher</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="c1"># part 2: Metadata stored in NebulaGraph --&gt; Elasticsearch</span>
</span></span><span class="line"><span class="cl"><span class="n">extractor</span> <span class="o">=</span> <span class="n">NebulaSearchDataExtractor</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">task</span> <span class="o">=</span> <span class="n">SearchMetadatatoElasticasearchTask</span><span class="p">(</span><span class="n">extractor</span><span class="o">=</span><span class="n">extractor</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">job</span> <span class="o">=</span> <span class="n">DefaultJob</span><span class="p">(</span><span class="n">conf</span><span class="o">=</span><span class="n">job_config</span><span class="p">,</span> <span class="n">task</span><span class="o">=</span><span class="n">task</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>And the only differences from the Postgres meta ETL is the <code>extractor=DbtExtractor()</code>, where it comes with following confiugrations to get below information regarding dbt projects:</p>
<ul>
<li>databases_name</li>
<li>catalog_json</li>
<li>manifest_json</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">job_config</span> <span class="o">=</span> <span class="n">ConfigFactory</span><span class="o">.</span><span class="n">from_dict</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;extractor.dbt.database_name&#39;</span><span class="p">:</span> <span class="n">database_name</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;extractor.dbt.catalog_json&#39;</span><span class="p">:</span> <span class="n">catalog_file_loc</span><span class="p">,</span>  <span class="c1"># File</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;extractor.dbt.manifest_json&#39;</span><span class="p">:</span> <span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">manifest_data</span><span class="p">),</span>  <span class="c1"># JSON Dumped objecy</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;extractor.dbt.source_url&#39;</span><span class="p">:</span> <span class="n">source_url</span><span class="p">})</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="verify-the-dbt-extraction" class="headerLink">
    <a href="#verify-the-dbt-extraction" class="header-mark"></a>4.2.2 Verify the dbt Extraction</h4><p>Search <code>dbt_demo</code> or visit http://localhost:5000/table_detail/dbt_demo/snowflake/public/raw_inventory_value to see:</p>
<p><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168479864-2f73ea73-265f-4cd2-999f-e7effbaf3ec1.png" title="https://user-images.githubusercontent.com/1651790/168479864-2f73ea73-265f-4cd2-999f-e7effbaf3ec1.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168479864-2f73ea73-265f-4cd2-999f-e7effbaf3ec1.png">
        
    </a></p>
<blockquote>
<p>Tips: we could optionally enable debug logging to see what had been sent to Elasticsearch and Nebula Graph!</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl"><span class="gd">- logging.basicConfig(level=logging.INFO)
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+ logging.basicConfig(level=logging.DEBUG)
</span></span></span></code></pre></td></tr></table>
</div>
</div></blockquote>
<p>Or, alternatively, explore the imported data in Nebula Studio:</p>
<p>First, click &ldquo;Start with Vertices&rdquo;, fill in the vertex id: <code>snowflake://dbt_demo.public/fact_warehouse_inventory</code></p>
<p><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168480047-26c28cde-5df8-40af-8da4-6ab0203094e2.png" title="https://user-images.githubusercontent.com/1651790/168480047-26c28cde-5df8-40af-8da4-6ab0203094e2.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168480047-26c28cde-5df8-40af-8da4-6ab0203094e2.png">
        
    </a></p>
<p>Then, we could see the vertex being shown as the pink dot. Let&rsquo;s modify the <code>Expand</code> options with:</p>
<ul>
<li>Direction: Bidirect</li>
<li>Steps: Single with 3</li>
</ul>
<p><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168480101-7b7b5824-06d9-4155-87c9-798db0dc7612.png" title="https://user-images.githubusercontent.com/1651790/168480101-7b7b5824-06d9-4155-87c9-798db0dc7612.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168480101-7b7b5824-06d9-4155-87c9-798db0dc7612.png">
        
    </a></p>
<p>And double click the vertex(dot), it will expand 3 steps in bidirection:</p>
<p><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168480280-1dc88d1b-1f1e-48fd-9997-972965522ef5.png" title="https://user-images.githubusercontent.com/1651790/168480280-1dc88d1b-1f1e-48fd-9997-972965522ef5.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168480280-1dc88d1b-1f1e-48fd-9997-972965522ef5.png">
        
    </a></p>
<p>From this graph view, the insight of the metadata is extremely easy to be explored, right?</p>
<blockquote>
<p>Tips, you may like to click the 👁 icon to select some properties to be shown, which was done by me before capturing the screen as above.</p>
</blockquote>
<p>And, what we had seen in the Nebula Studio echoes the data model of Amundsen metadata service, too:</p>
<p><a class="lightgallery" href="https://www.amundsen.io/amundsen/img/graph_model.png" title="https://www.amundsen.io/amundsen/img/graph_model.png" data-thumbnail="https://www.amundsen.io/amundsen/img/graph_model.png">
        
    </a></p>
<p>Finally, remember we had leveraged dbt to transform some data in meltano, and the menifest file path is <code>.meltano/transformers/dbt/target/catalog.json</code>, you can try create a databuilder job to import it.</p>
<h3 id="extracting-superset-metadata" class="headerLink">
    <a href="#extracting-superset-metadata" class="header-mark"></a>4.3 Extracting Superset metadata</h3><p><a href="https://www.amundsen.io/amundsen/databuilder/databuilder/extractor/dashboard/apache_superset/apache_superset_metadata_extractor.py" target="_blank" rel="noopener noreferrer">Dashboards</a>, <a href="https://www.amundsen.io/amundsen/databuilder/databuilder/extractor/dashboard/apache_superset/apache_superset_chart_extractor.py" target="_blank" rel="noopener noreferrer">Charts</a> and the <a href="https://www.amundsen.io/amundsen/databuilder/databuilder/extractor/dashboard/apache_superset/apache_superset_table_extractor.py" target="_blank" rel="noopener noreferrer">relationships with Tables</a> can be extracted by Amundsen data builder, as we already setup a Superset Dashboard, let&rsquo;s try ingesting its metadata.</p>
<h4 id="execution-of-superset-metadata-etl" class="headerLink">
    <a href="#execution-of-superset-metadata-etl" class="header-mark"></a>4.3.1 Execution of Superset metadata ETL</h4><p>The sample superset script will fetch data from Superset and load metadata into Nebula Graph and Elasticsearch.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">python3</span> <span class="n">sample_superset_data_loader_nebula</span><span class="o">.</span><span class="n">py</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>If we set the logging level to <code>DEBUG</code>, we could actually see lines like:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># fetching metadata from superset</span>
</span></span><span class="line"><span class="cl"><span class="n">DEBUG</span><span class="p">:</span><span class="n">urllib3</span><span class="o">.</span><span class="n">connectionpool</span><span class="p">:</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">localhost</span><span class="p">:</span><span class="mi">8088</span> <span class="s2">&#34;POST /api/v1/security/login HTTP/1.1&#34;</span> <span class="mi">200</span> <span class="mi">280</span>
</span></span><span class="line"><span class="cl"><span class="n">INFO</span><span class="p">:</span><span class="n">databuilder</span><span class="o">.</span><span class="n">task</span><span class="o">.</span><span class="n">task</span><span class="p">:</span><span class="n">Running</span> <span class="n">a</span> <span class="n">task</span>
</span></span><span class="line"><span class="cl"><span class="n">DEBUG</span><span class="p">:</span><span class="n">urllib3</span><span class="o">.</span><span class="n">connectionpool</span><span class="p">:</span><span class="n">Starting</span> <span class="n">new</span> <span class="n">HTTP</span> <span class="n">connection</span> <span class="p">(</span><span class="mi">1</span><span class="p">):</span> <span class="n">localhost</span><span class="p">:</span><span class="mi">8088</span>
</span></span><span class="line"><span class="cl"><span class="n">DEBUG</span><span class="p">:</span><span class="n">urllib3</span><span class="o">.</span><span class="n">connectionpool</span><span class="p">:</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">localhost</span><span class="p">:</span><span class="mi">8088</span> <span class="s2">&#34;GET /api/v1/dashboard?q=(page_size:20,page:0,order_direction:desc) HTTP/1.1&#34;</span> <span class="mi">308</span> <span class="mi">374</span>
</span></span><span class="line"><span class="cl"><span class="n">DEBUG</span><span class="p">:</span><span class="n">urllib3</span><span class="o">.</span><span class="n">connectionpool</span><span class="p">:</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">localhost</span><span class="p">:</span><span class="mi">8088</span> <span class="s2">&#34;GET /api/v1/dashboard/?q=(page_size:20,page:0,order_direction:desc) HTTP/1.1&#34;</span> <span class="mi">200</span> <span class="mi">1058</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># insert Dashboard</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">DEBUG</span><span class="p">:</span><span class="n">databuilder</span><span class="o">.</span><span class="n">publisher</span><span class="o">.</span><span class="n">nebula_csv_publisher</span><span class="p">:</span><span class="n">Query</span><span class="p">:</span> <span class="n">INSERT</span> <span class="n">VERTEX</span> <span class="err">`</span><span class="n">Dashboard</span><span class="err">`</span> <span class="p">(</span><span class="err">`</span><span class="n">dashboard_url</span><span class="err">`</span><span class="p">,</span> <span class="err">`</span><span class="n">name</span><span class="err">`</span><span class="p">,</span> <span class="n">published_tag</span><span class="p">,</span> <span class="n">publisher_last_updated_epoch_ms</span><span class="p">)</span> <span class="n">VALUES</span>  <span class="s2">&#34;superset_dashboard://my_cluster.1/3&#34;</span><span class="p">:(</span><span class="s2">&#34;http://localhost:8088/superset/dashboard/3/&#34;</span><span class="p">,</span><span class="s2">&#34;my_dashboard&#34;</span><span class="p">,</span><span class="s2">&#34;unique_tag&#34;</span><span class="p">,</span><span class="n">timestamp</span><span class="p">());</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># insert a DASHBOARD_WITH_TABLE relationship/edge</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">INFO</span><span class="p">:</span><span class="n">databuilder</span><span class="o">.</span><span class="n">publisher</span><span class="o">.</span><span class="n">nebula_csv_publisher</span><span class="p">:</span><span class="n">Importing</span> <span class="n">data</span> <span class="ow">in</span> <span class="n">edge</span> <span class="n">files</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;/tmp/amundsen/dashboard/relationships/Dashboard_Table_DASHBOARD_WITH_TABLE.csv&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">DEBUG</span><span class="p">:</span><span class="n">databuilder</span><span class="o">.</span><span class="n">publisher</span><span class="o">.</span><span class="n">nebula_csv_publisher</span><span class="p">:</span><span class="n">Query</span><span class="p">:</span>
</span></span><span class="line"><span class="cl"><span class="n">INSERT</span> <span class="n">edge</span> <span class="err">`</span><span class="n">DASHBOARD_WITH_TABLE</span><span class="err">`</span> <span class="p">(</span><span class="err">`</span><span class="n">END_LABEL</span><span class="err">`</span><span class="p">,</span> <span class="err">`</span><span class="n">START_LABEL</span><span class="err">`</span><span class="p">,</span> <span class="n">published_tag</span><span class="p">,</span> <span class="n">publisher_last_updated_epoch_ms</span><span class="p">)</span> <span class="n">VALUES</span> <span class="s2">&#34;superset_dashboard://my_cluster.1/3&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;postgresql+psycopg2://my_cluster.warehouse/orders&#34;</span><span class="p">:(</span><span class="s2">&#34;Table&#34;</span><span class="p">,</span><span class="s2">&#34;Dashboard&#34;</span><span class="p">,</span><span class="s2">&#34;unique_tag&#34;</span><span class="p">,</span> <span class="n">timestamp</span><span class="p">()),</span> <span class="s2">&#34;superset_dashboard://my_cluster.1/3&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;postgresql+psycopg2://my_cluster.warehouse/customers&#34;</span><span class="p">:(</span><span class="s2">&#34;Table&#34;</span><span class="p">,</span><span class="s2">&#34;Dashboard&#34;</span><span class="p">,</span><span class="s2">&#34;unique_tag&#34;</span><span class="p">,</span> <span class="n">timestamp</span><span class="p">());</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="verify-the-superset-dashboard-extraction" class="headerLink">
    <a href="#verify-the-superset-dashboard-extraction" class="header-mark"></a>4.3.2 Verify the Superset Dashboard Extraction</h4><p>By searching it in Amundsen, we could the Dashboard info now. And we could verify it from Nebula Studio, too.</p>
<p><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168719624-738323dd-4c6e-475f-a370-f149181c6184.png" title="https://user-images.githubusercontent.com/1651790/168719624-738323dd-4c6e-475f-a370-f149181c6184.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168719624-738323dd-4c6e-475f-a370-f149181c6184.png">
        
    </a></p>
<blockquote>
<p>Note, see also the Dashboard&rsquo;s model in Amundsen from <a href="https://www.amundsen.io/amundsen/databuilder/docs/dashboard_ingestion_guide/" target="_blank" rel="noopener noreferrer">the dashboard ingestion guide</a>:</p>
<p><a class="lightgallery" href="https://www.amundsen.io/amundsen/databuilder/docs/assets/dashboard_graph_modeling.png?raw=true" title="dashboard_graph_modeling" data-thumbnail="https://www.amundsen.io/amundsen/databuilder/docs/assets/dashboard_graph_modeling.png?raw=true">
        
    </a></p>
</blockquote>
<h3 id="preview-data-with-superset" class="headerLink">
    <a href="#preview-data-with-superset" class="header-mark"></a>4.4 Preview data with Superset</h3><p>Superset could be used to preview Table Data like this. Corresponding documentation could be referred <a href="https://www.amundsen.io/amundsen/frontend/docs/configuration/#preview-client" target="_blank" rel="noopener noreferrer">here</a>, where the API of <code>/superset/sql_json/</code> will be called by Amundsen Frontend.</p>
<p><a class="lightgallery" href="https://github.com/amundsen-io/amundsenfrontendlibrary/blob/master/docs/img/data_preview.png?raw=true" title="https://github.com/amundsen-io/amundsenfrontendlibrary/blob/master/docs/img/data_preview.png?raw=true" data-thumbnail="https://github.com/amundsen-io/amundsenfrontendlibrary/blob/master/docs/img/data_preview.png?raw=true">
        
    </a></p>
<h3 id="enable-data-lineage" class="headerLink">
    <a href="#enable-data-lineage" class="header-mark"></a>4.5 Enable Data lineage</h3><p>By default, data lineage was not enabled, we could enable it by:</p>
<ol start="0">
<li>Go to the Amundsen repo, that&rsquo;s also where we run the <code>docker-compose -f docker-amundsen-nebula.yml up</code> command</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> amundsen
</span></span></code></pre></td></tr></table>
</div>
</div><ol>
<li>Modify frontend  JS configuration:</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl"><span class="gd">--- a/frontend/amundsen_application/static/js/config/config-default.ts
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+++ b/frontend/amundsen_application/static/js/config/config-default.ts
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>   tableLineage: {
</span></span><span class="line"><span class="cl"><span class="gd">-    inAppListEnabled: false,
</span></span></span><span class="line"><span class="cl"><span class="gd">-    inAppPageEnabled: false,
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+    inAppListEnabled: true,
</span></span></span><span class="line"><span class="cl"><span class="gi">+    inAppPageEnabled: true,
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>     externalEnabled: false,
</span></span><span class="line"><span class="cl">     iconPath: &#39;PATH_TO_ICON&#39;,
</span></span><span class="line"><span class="cl">     isBeta: false,
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="2">
<li>Now let&rsquo;s run again build for docker image, where the frontend image will be rebuilt.</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker-compose -f docker-amundsen-nebula.yml build
</span></span></code></pre></td></tr></table>
</div>
</div><p>Then, rerun the <code>up -d</code> to ensure frontend container to be recreated with new configuration:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker-compose -f docker-amundsen-nebula.yml up -d
</span></span></code></pre></td></tr></table>
</div>
</div><p>We could see something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker-compose -f docker-amundsen-nebula.yml up -d
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">Recreating amundsenfrontend           ... <span class="k">done</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>After that, we could visit http://localhost:5000/lineage/table/gold/hive/test_schema/test_table1 to see the <code>Lineage</code> is shown as:</p>
<p><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168838731-79d0e3bc-439e-4f6b-8ef7-83b37e9bcb12.png" title="https://user-images.githubusercontent.com/1651790/168838731-79d0e3bc-439e-4f6b-8ef7-83b37e9bcb12.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168838731-79d0e3bc-439e-4f6b-8ef7-83b37e9bcb12.png">
        
    </a></p>
<p>We could click <code>Downstream</code>(if there is) to see downstream resources of this table:</p>
<p><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168839251-efd523af-d729-44cf-a40b-fa83a0852654.png" title="https://user-images.githubusercontent.com/1651790/168839251-efd523af-d729-44cf-a40b-fa83a0852654.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168839251-efd523af-d729-44cf-a40b-fa83a0852654.png">
        
    </a></p>
<p>Or click Lineage to see the graph:</p>
<p><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168838814-e6ff5152-c24b-470e-a46a-48f183ba7201.png" title="https://user-images.githubusercontent.com/1651790/168838814-e6ff5152-c24b-470e-a46a-48f183ba7201.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168838814-e6ff5152-c24b-470e-a46a-48f183ba7201.png">
        
    </a></p>
<p>There are API for lineage query, too. Here is an example to query that with cURL, where we leverage the netshoot container as we did before for user creation.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run -it --rm --net container:amundsenfrontend nicolaka/netshoot
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">curl <span class="s2">&#34;http://amundsenmetadata:5002/table/snowflake://dbt_demo.public/raw_inventory_value/lineage?depth=3&amp;direction=both&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>The above API call was to query linage on both upstream and downstream direction, with depth 3 for table <code>snowflake://dbt_demo.public/raw_inventory_value</code>.</p>
<p>And the result should be like:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;depth&#34;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;downstream_entities&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;level&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;usage&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;key&#34;</span><span class="p">:</span> <span class="s2">&#34;snowflake://dbt_demo.public/fact_daily_expenses&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;parent&#34;</span><span class="p">:</span> <span class="s2">&#34;snowflake://dbt_demo.public/fact_warehouse_inventory&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;badges&#34;</span><span class="p">:</span> <span class="p">[],</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;source&#34;</span><span class="p">:</span> <span class="s2">&#34;snowflake&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;level&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;usage&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;key&#34;</span><span class="p">:</span> <span class="s2">&#34;snowflake://dbt_demo.public/fact_warehouse_inventory&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;parent&#34;</span><span class="p">:</span> <span class="s2">&#34;snowflake://dbt_demo.public/raw_inventory_value&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;badges&#34;</span><span class="p">:</span> <span class="p">[],</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;source&#34;</span><span class="p">:</span> <span class="s2">&#34;snowflake&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;key&#34;</span><span class="p">:</span> <span class="s2">&#34;snowflake://dbt_demo.public/raw_inventory_value&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;direction&#34;</span><span class="p">:</span> <span class="s2">&#34;both&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;upstream_entities&#34;</span><span class="p">:</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>In fact, this lineage data was just extracted and loaded during our <a href="https://github.com/amundsen-io/amundsen/blob/main/databuilder/databuilder/extractor/dbt_extractor.py" target="_blank" rel="noopener noreferrer">DbtExtractor</a> execution, where <code>extractor.dbt.{DbtExtractor.EXTRACT_LINEAGE}</code> by default was <code>True</code>, thus lineage metadata were created and loaded to Amundsen.</p>
<h4 id="get-lineage-in-nebula-graph" class="headerLink">
    <a href="#get-lineage-in-nebula-graph" class="header-mark"></a>4.5.1 Get lineage in Nebula Graph</h4><p>Two of the advantages to use a Graph Database as Metadata Storage are:</p>
<ul>
<li>The graph query itself is a flexible DSL for lineage API, for example, this query helps us do the equivalent query of the Amundsen metadata API for fetching lineage:</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">t</span><span class="p">:</span><span class="o">`</span><span class="k">Table</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">HAS_UPSTREAM</span><span class="o">`|</span><span class="p">:</span><span class="o">`</span><span class="n">HAS_DOWNSTREAM</span><span class="o">`</span><span class="w"> </span><span class="o">*</span><span class="mi">1</span><span class="p">..</span><span class="mi">3</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">t</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;snowflake://dbt_demo.public/raw_inventory_value&#34;</span><span class="w"> </span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>We could now even query it in Nebula Graph Studio&rsquo;s console, and click <code>View Subgraphs</code> to make it rendered in a graph view then.</li>
</ul>
<p><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168844882-ca3d0587-7946-4e17-8264-9dc973a44673.png" title="https://user-images.githubusercontent.com/1651790/168844882-ca3d0587-7946-4e17-8264-9dc973a44673.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168844882-ca3d0587-7946-4e17-8264-9dc973a44673.png">
        
    </a></p>
<p><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168845155-b0e7a5ce-3ddf-4cc9-89a3-aaf1bbb0f5ec.png" title="https://user-images.githubusercontent.com/1651790/168845155-b0e7a5ce-3ddf-4cc9-89a3-aaf1bbb0f5ec.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168845155-b0e7a5ce-3ddf-4cc9-89a3-aaf1bbb0f5ec.png">
        
    </a></p>
<h4 id="extract-data-lineage" class="headerLink">
    <a href="#extract-data-lineage" class="header-mark"></a>4.5.2 Extract Data Lineage</h4><h5 id="dbt" class="headerLink">
    <a href="#dbt" class="header-mark"></a>4.5.2.1 Dbt</h5><p>As mentioned above, <a href="https://www.amundsen.io/amundsen/databuilder/#dbtextractor" target="_blank" rel="noopener noreferrer">DbtExtractor</a> will extract table level lineage, together with other information defined in the dbt ETL pipeline.</p>
<h5 id="open-lineage" class="headerLink">
    <a href="#open-lineage" class="header-mark"></a>4.5.2.2 Open Lineage</h5><p>The other linage extractor out-of-the-box in Amundsen is <a href="https://www.amundsen.io/amundsen/databuilder/#openlineagetablelineageextractor" target="_blank" rel="noopener noreferrer">OpenLineageTableLineageExtractor</a>.</p>
<p><a href="https://openlineage.io/" target="_blank" rel="noopener noreferrer">Open Lineage</a> is an open framework to collect lineage data from different sources in one place, which can output linage information as JSON files to be extracted by <a href="https://www.amundsen.io/amundsen/databuilder/#openlineagetablelineageextractor" target="_blank" rel="noopener noreferrer">OpenLineageTableLineageExtractor</a>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">dict_config</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">    <span class="sa">f</span><span class="s1">&#39;extractor.openlineage_tablelineage.</span><span class="si">{</span><span class="n">OpenLineageTableLineageExtractor</span><span class="o">.</span><span class="n">CLUSTER_NAME</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">:</span> <span class="s1">&#39;datalab&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="sa">f</span><span class="s1">&#39;extractor.openlineage_tablelineage.</span><span class="si">{</span><span class="n">OpenLineageTableLineageExtractor</span><span class="o">.</span><span class="n">OL_DATASET_NAMESPACE_OVERRIDE</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">:</span> <span class="s1">&#39;hive_table&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="sa">f</span><span class="s1">&#39;extractor.openlineage_tablelineage.</span><span class="si">{</span><span class="n">OpenLineageTableLineageExtractor</span><span class="o">.</span><span class="n">TABLE_LINEAGE_FILE_LOCATION</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">:</span> <span class="s1">&#39;input_dir/openlineage_nd.json&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">task</span> <span class="o">=</span> <span class="n">DefaultTask</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">extractor</span><span class="o">=</span><span class="n">OpenLineageTableLineageExtractor</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">    <span class="n">loader</span><span class="o">=</span><span class="n">FsNebulaCSVLoader</span><span class="p">())</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="recap" class="headerLink">
    <a href="#recap" class="header-mark"></a>5 Recap</h2><p>The whole idea of Metadata Governance/Discovery is to:</p>
<ul>
<li>Put all components in the stack as Metadata Sources(from any DB or DW to dbt, Airflow, Openlineage, Superset, etc.)</li>
<li>Run metadata ETL with Databuilder(as a script, or DAG) to store and index with Nebula Graph(or other Graph Database) and Elasticsearch</li>
<li>Consume, manage, and discover metadata from Frontend UI(with Superset for preview) or API</li>
<li>Have more possibilities, flexibility, and insights on Nebula Graph from queries and UI</li>
</ul>
<p><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168849779-4826f50e-ff87-4e78-b17f-076f91182c43.svg" title="https://user-images.githubusercontent.com/1651790/168849779-4826f50e-ff87-4e78-b17f-076f91182c43.svg" data-thumbnail="https://user-images.githubusercontent.com/1651790/168849779-4826f50e-ff87-4e78-b17f-076f91182c43.svg">
        
    </a></p>
<h3 id="upstream-projects" class="headerLink">
    <a href="#upstream-projects" class="header-mark"></a>5.1 Upstream Projects</h3><p>All projects used in this reference project are listed below in lexicographic order.</p>
<ul>
<li>Amundsen</li>
<li>Apache Airflow</li>
<li>Apache Superset</li>
<li>dbt</li>
<li>Elasticsearch</li>
<li>meltano</li>
<li>Nebula Graph</li>
<li>Open Lineage</li>
<li>singer</li>
</ul>
<blockquote>
<p>Feature Image credit to <a href="https://unsplash.com/photos/PhnJhjH9Y9s" target="_blank" rel="noopener noreferrer">Phil Hearing</a></p>
</blockquote>]]></description>
</item><item>
    <title>Nebula-Up, oneliner installer for Nebula Graph Playground</title>
    <link>https://siwei.io/en/nebula-up/</link>
    <pubDate>Mon, 26 Apr 2021 11:11:04 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/en/nebula-up/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/en/nebula-up/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>Update: the All-in-one mode is introduced! Check <a href="#all-in-one-mode" rel="">here</a> and try it!</p>
</blockquote>
<p><a href="https://asciinema.org/a/407151" title="Nebula Up Demo" target="_blank" rel="noopener noreferrer"><a class="lightgallery" href="/en/nebula-up/nebula-up-demo.svg" title="nebula-up demo" data-thumbnail="/en/nebula-up/nebula-up-demo.svg">
        
    </a></a></p>
<p><code>Nebula-Up</code> is PoC utility to enable developer to bootstrap an nebula-graph cluster with nebula-graph-studio(Web UI) + nebula-graph-console(Command UI) ready out of box in an oneliner run. All required packages will handled with <code>nebula-up</code> as well, including Docker on Linux(Ubuntu/CentOS), Docker Desktop on macOS(including both Intel and M1 chip based), and Docker Desktop Windows.</p>
<p>Also, it&rsquo;s optimized to leverage China Repo Mirrors(docker, brew, gitee, etc&hellip;) in case needed enable a smooth deployment for both Mainland China users and others.</p>
<p>macOS and Linux with Shell:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -fsSL nebula-up.siwei.io/install.sh <span class="p">|</span> bash
</span></span></code></pre></td></tr></table>
</div>
</div><p><a class="lightgallery" href="/en/nebula-up/nebula-up-demo-shell.png" title="nebula-up-demo-shell" data-thumbnail="/en/nebula-up/nebula-up-demo-shell.png">
        
    </a></p>
<p>Note: you could specify the version of Nebula Graph like:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -fsSL nebula-up.siwei.io/install.sh <span class="p">|</span> bash -s -- v2.6
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="all-in-one-mode" class="headerLink">
    <a href="#all-in-one-mode" class="header-mark"></a>1 All-in-one mode</h2><p>With all-in-one mode, you could play with many Nebula Tools in one command, too:</p>
<p><a class="lightgallery" href="/en/nebula-up/nebula-up-all-in-one.svg" title="/en/nebula-up/nebula-up-all-in-one.svg" data-thumbnail="/en/nebula-up/nebula-up-all-in-one.svg">
        
    </a></p>
<p>Supported tools:</p>
<ul>
<li><i class="far fa-check-square fa-fw"></i> Nebula Dashboard</li>
<li><i class="far fa-check-square fa-fw"></i> Nebula Graph Studio</li>
<li><i class="far fa-check-square fa-fw"></i> Nebula Graph Console</li>
<li><i class="far fa-check-square fa-fw"></i> Nebula BR(backup &amp; restore)</li>
<li><i class="far fa-check-square fa-fw"></i> Nebula Graph Spark utils
<ul>
<li><i class="far fa-check-square fa-fw"></i> Nebula Graph Spark Connector/PySpark</li>
<li><i class="far fa-check-square fa-fw"></i> Nebula Graph Algorithm</li>
<li><i class="far fa-check-square fa-fw"></i> Nebula Graph Exchange</li>
</ul>
</li>
<li><i class="far fa-square fa-fw"></i> Nebula Graph Importer</li>
<li><i class="far fa-square fa-fw"></i> Nebula Graph Fulltext Search</li>
<li><i class="far fa-square fa-fw"></i> Nebula Bench</li>
</ul>
<h3 id="install-all-in-one" class="headerLink">
    <a href="#install-all-in-one" class="header-mark"></a>1.1 Install all in one</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># Install Nebula Core with all-in-one mode</span>
</span></span><span class="line"><span class="cl">curl -fsSL nebula-up.siwei.io/all-in-one.sh <span class="p">|</span> bash
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="install-nebula-core-and-one-of-the-coponent" class="headerLink">
    <a href="#install-nebula-core-and-one-of-the-coponent" class="header-mark"></a>1.2 Install Nebula Core and One of the coponent:</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># Install Core with Backup and Restore with MinIO</span>
</span></span><span class="line"><span class="cl">curl -fsSL nebula-up.siwei.io/all-in-one.sh <span class="p">|</span> bash -s -- v3 br
</span></span><span class="line"><span class="cl"><span class="c1"># Install Core with Spark Connector, Nebula Algorithm, Nebula Exchange</span>
</span></span><span class="line"><span class="cl">curl -fsSL nebula-up.siwei.io/all-in-one.sh <span class="p">|</span> bash -s -- v3 spark
</span></span><span class="line"><span class="cl"><span class="c1"># Install Core with Dashboard</span>
</span></span><span class="line"><span class="cl">curl -fsSL nebula-up.siwei.io/all-in-one.sh <span class="p">|</span> bash -s -- v3 dashboard
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="how-to-play-with-all-in-one-mode" class="headerLink">
    <a href="#how-to-play-with-all-in-one-mode" class="header-mark"></a>1.3 How to play with all-in-one mode:</h3><h4 id="console-and-basketballplayer-dataset-loading" class="headerLink">
    <a href="#console-and-basketballplayer-dataset-loading" class="header-mark"></a>1.3.1 Console and Basketballplayer Dataset Loading</h4><p>Then you could call Nebula Console like:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># Connect to nebula with console</span>
</span></span><span class="line"><span class="cl">~/.nebula-up/console.sh
</span></span><span class="line"><span class="cl"><span class="c1"># Execute queryies like</span>
</span></span><span class="line"><span class="cl">~/.nebula-up/console.sh -e <span class="s2">&#34;SHOW HOSTS&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Load the sample dataset</span>
</span></span><span class="line"><span class="cl">~/.nebula-up/load-basketballplayer-dataset.sh
</span></span><span class="line"><span class="cl"><span class="c1"># Make a Graph Query the sample dataset</span>
</span></span><span class="line"><span class="cl">~/.nebula-up/console.sh -e <span class="s1">&#39;USE basketballplayer; FIND ALL PATH FROM &#34;player100&#34; TO &#34;team204&#34; OVER * WHERE follow.degree is EMPTY or follow.degree &gt;=0 YIELD path AS p;&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="monitor-the-whole-cluster-with-nebula-dashboard" class="headerLink">
    <a href="#monitor-the-whole-cluster-with-nebula-dashboard" class="header-mark"></a>1.3.2 Monitor the whole cluster with Nebula Dashboard</h4><p>Visit http://127.0.0.1:7003 with user: <code>root</code>, password: <code>nebula</code>.</p>
<blockquote>
<p>Note, thanks to the sponsorship of Microsoft, we have a demo site of Nebula-UP on Azure: you could visit the dashboard here: <a href="http://nebula-demo.siwei.io:7003" target="_blank" rel="noopener noreferrer">http://nebula-demo.siwei.io:7003</a> .</p>
</blockquote>
<h4 id="access-nebula-graph-studio" class="headerLink">
    <a href="#access-nebula-graph-studio" class="header-mark"></a>1.3.3 Access Nebula Graph Studio</h4><p>Visit http://127.0.0.1:7001 with user: <code>root</code>, password: <code>nebula</code>, host: <code>graphd:9669</code>(for non-all-in-one case, this should be <code>&lt;host-ip&gt;:9669</code>).</p>
<blockquote>
<p>Note, thanks to the sponsorship of Microsoft, we have a demo site of Nebula-UP on Azure: you could visit the studio here: <a href="http://nebula-demo.siwei.io:7001" target="_blank" rel="noopener noreferrer">http://nebula-demo.siwei.io:7001</a> .</p>
</blockquote>
<h4 id="query-data-with-nebula-spark-connector-in-pyspark-shell" class="headerLink">
    <a href="#query-data-with-nebula-spark-connector-in-pyspark-shell" class="header-mark"></a>1.3.4 Query Data with Nebula Spark Connector in PySpark Shell</h4><p>Or play in PySpark like:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">~/.nebula-up/nebula-pyspark.sh
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># call Nebula Spark Connector Reader</span>
</span></span><span class="line"><span class="cl"><span class="nv">df</span> <span class="o">=</span> spark.read.format<span class="o">(</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;com.vesoft.nebula.connector.NebulaDataSource&#34;</span><span class="o">)</span>.option<span class="o">(</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;type&#34;</span>, <span class="s2">&#34;vertex&#34;</span><span class="o">)</span>.option<span class="o">(</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;spaceName&#34;</span>, <span class="s2">&#34;basketballplayer&#34;</span><span class="o">)</span>.option<span class="o">(</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;label&#34;</span>, <span class="s2">&#34;player&#34;</span><span class="o">)</span>.option<span class="o">(</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;returnCols&#34;</span>, <span class="s2">&#34;name,age&#34;</span><span class="o">)</span>.option<span class="o">(</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;metaAddress&#34;</span>, <span class="s2">&#34;metad0:9559&#34;</span><span class="o">)</span>.option<span class="o">(</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;partitionNumber&#34;</span>, 1<span class="o">)</span>.load<span class="o">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># show the dataframe with limit 2</span>
</span></span><span class="line"><span class="cl">df.show<span class="o">(</span><span class="nv">n</span><span class="o">=</span>2<span class="o">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>The output may look like:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">      <span class="n">____</span>              <span class="n">__</span>
</span></span><span class="line"><span class="cl">     <span class="o">/</span> <span class="n">__</span><span class="o">/</span><span class="n">__</span>  <span class="n">___</span> <span class="n">_____</span><span class="o">/</span> <span class="o">/</span><span class="n">__</span>
</span></span><span class="line"><span class="cl">    <span class="n">_</span>\ \<span class="o">/</span> <span class="n">_</span> \<span class="o">/</span> <span class="n">_</span> <span class="err">`</span><span class="o">/</span> <span class="n">__</span><span class="o">/</span>  <span class="s1">&#39;_/</span>
</span></span><span class="line"><span class="cl">   <span class="o">/</span><span class="n">__</span> <span class="o">/</span> <span class="o">.</span><span class="n">__</span><span class="o">/</span>\<span class="n">_</span><span class="p">,</span><span class="n">_</span><span class="o">/</span><span class="n">_</span><span class="o">/</span> <span class="o">/</span><span class="n">_</span><span class="o">/</span>\<span class="n">_</span>\   <span class="n">version</span> <span class="mf">2.4.5</span>
</span></span><span class="line"><span class="cl">      <span class="o">/</span><span class="n">_</span><span class="o">/</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Using</span> <span class="n">Python</span> <span class="n">version</span> <span class="mf">2.7.16</span> <span class="p">(</span><span class="n">default</span><span class="p">,</span> <span class="n">Jan</span> <span class="mi">14</span> <span class="mi">2020</span> <span class="mi">07</span><span class="p">:</span><span class="mi">22</span><span class="p">:</span><span class="mi">06</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">SparkSession</span> <span class="n">available</span> <span class="k">as</span> <span class="s1">&#39;spark&#39;</span><span class="o">.</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">df</span> <span class="o">=</span> <span class="n">spark</span><span class="o">.</span><span class="n">read</span><span class="o">.</span><span class="n">format</span><span class="p">(</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>   <span class="s2">&#34;com.vesoft.nebula.connector.NebulaDataSource&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">option</span><span class="p">(</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="s2">&#34;type&#34;</span><span class="p">,</span> <span class="s2">&#34;vertex&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">option</span><span class="p">(</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="s2">&#34;spaceName&#34;</span><span class="p">,</span> <span class="s2">&#34;basketballplayer&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">option</span><span class="p">(</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="s2">&#34;label&#34;</span><span class="p">,</span> <span class="s2">&#34;player&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">option</span><span class="p">(</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="s2">&#34;returnCols&#34;</span><span class="p">,</span> <span class="s2">&#34;name,age&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">option</span><span class="p">(</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="s2">&#34;metaAddress&#34;</span><span class="p">,</span> <span class="s2">&#34;metad0:9559&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">option</span><span class="p">(</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="s2">&#34;partitionNumber&#34;</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">load</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">df</span><span class="o">.</span><span class="n">show</span><span class="p">(</span><span class="n">n</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">+---------+--------------+---+</span>
</span></span><span class="line"><span class="cl"><span class="o">|</span><span class="n">_vertexId</span><span class="o">|</span>          <span class="n">name</span><span class="o">|</span><span class="n">age</span><span class="o">|</span>
</span></span><span class="line"><span class="cl"><span class="o">+---------+--------------+---+</span>
</span></span><span class="line"><span class="cl"><span class="o">|</span><span class="n">player105</span><span class="o">|</span>   <span class="n">Danny</span> <span class="n">Green</span><span class="o">|</span> <span class="mi">31</span><span class="o">|</span>
</span></span><span class="line"><span class="cl"><span class="o">|</span><span class="n">player109</span><span class="o">|</span><span class="n">Tiago</span> <span class="n">Splitter</span><span class="o">|</span> <span class="mi">34</span><span class="o">|</span>
</span></span><span class="line"><span class="cl"><span class="o">+---------+--------------+---+</span>
</span></span><span class="line"><span class="cl"><span class="n">only</span> <span class="n">showing</span> <span class="n">top</span> <span class="mi">2</span> <span class="n">rows</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="run-nebula-exchange" class="headerLink">
    <a href="#run-nebula-exchange" class="header-mark"></a>1.3.5 Run Nebula Exchange</h4><p>Or run an example Nebula Exchange job to import data from CSV file:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">~/.nebula-up/nebula-exchange-example.sh
</span></span></code></pre></td></tr></table>
</div>
</div><p>You could check the example configuration file in <code>~/.nebula-up/nebula-up/spark/exchange.conf</code></p>
<h4 id="run-nebula-graph-algorithm" class="headerLink">
    <a href="#run-nebula-graph-algorithm" class="header-mark"></a>1.3.6 Run Nebula Graph Algorithm</h4><blockquote>
<p>Reference: <a href="https://github.com/wey-gu/nebula-livejournal" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/nebula-livejournal</a></p>
</blockquote>
<p>Load LiveJournal dataset with Nebula Importer:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">~/.nebula-up/load-LiveJournal-dataset.sh
</span></span></code></pre></td></tr></table>
</div>
</div><p>Run Nebula Algorithm like:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">~/.nebula-up/nebula-algo-pagerank-example.sh
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="try-backup-and-restore-with-minio-as-storage" class="headerLink">
    <a href="#try-backup-and-restore-with-minio-as-storage" class="header-mark"></a>1.3.7 Try Backup and Restore with MinIO as Storage</h4><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># Create a full backup to MinIO(Be sure to run load-basketballplayer-dataset.sh before doing so)</span>
</span></span><span class="line"><span class="cl">~/.nebula-up/nebula-br-backup-full.sh
</span></span><span class="line"><span class="cl"><span class="c1"># Show all backups</span>
</span></span><span class="line"><span class="cl">~/.nebula-up/nebula-br-show.sh
</span></span><span class="line"><span class="cl"><span class="c1"># Restore to a backup named BACKUP_2022_05_08_11_38_08</span>
</span></span><span class="line"><span class="cl">~/.nebula-up/nebula-br-restore-full.sh BACKUP_2022_05_08_11_38_08
</span></span></code></pre></td></tr></table>
</div>
</div><p>Note, you could also browser files in MinIO with from http://127.0.0.1:9001 with user: <code>minioadmin</code>, password: <code>minioadmin</code>.</p>
<blockquote>
<p>Note, thanks to the sponsorship of Microsoft, we have a demo site of Nebula-UP on Azure: you could visit the MinIO site here: <a href="http://nebula-demo.siwei.io:9001" target="_blank" rel="noopener noreferrer">http://nebula-demo.siwei.io:9001</a> .</p>
</blockquote>
<hr>
<p><del>Windows with PowerShell</del>(Working In Progress):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="nb">iwr nebula-up</span><span class="p">.</span><span class="py">siwei</span><span class="p">.</span><span class="n">io</span><span class="p">/</span><span class="n">install</span><span class="p">.</span><span class="py">ps1</span> <span class="n">-useb</span> <span class="p">|</span> <span class="nb">iex
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>TBD:</p>
<ul>
<li><i class="far fa-square fa-fw"></i> Finished Windows(Docker Desktop instead of the WSL 1&amp;2 in initial phase) part, leveraging chocolatey package manager as homebrew was used in macOS</li>
<li><i class="far fa-square fa-fw"></i> Fully optimized for CN users, for now, git/apt/yum repo were not optimised, newly installed docker repo, brew repo were automatically optimised for CN internet access</li>
<li><i class="far fa-square fa-fw"></i> Packaging similar content into homebrew/chocolatey?</li>
<li><i class="far fa-square fa-fw"></i> CI/UT</li>
</ul>]]></description>
</item><item>
    <title>Nebula-Insights, How we leverage Serverless Cloud infra to setup Data Pipeline for Nebula Graph Community Insights</title>
    <link>https://siwei.io/en/nebula-insights/</link>
    <pubDate>Mon, 03 May 2021 21:11:04 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/en/nebula-insights/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/en/nebula-insights/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>How we leverage Serverless Cloud infra to setup Data Pipeline for Nebula Graph Community Insights. We used Google Cloud Scheduler, Google Cloud Functions, BigQuery, and codes are shared in GitHub</p>
</blockquote>
<blockquote>
<p>这是我首发在 Datawhale 的<a href="http://datawhale.club/t/topic/2089" target="_blank" rel="noopener noreferrer">文章</a>，介绍我们如何用公有云 Serverless 技术：Google Cloud Scheduler，Google Cloud Functions 和 BigQuery 搭建数据管道，收集探索开源社区洞察。并将全部代码开源在 GitHub。</p>
</blockquote>
<blockquote>
<p>引子
我们想要收集一些帮助 Nebula Graph 社区运营的 metrics，希望能从不同来源的数据自动化周期性收集、处理、并方便地展现出来做数据驱动分析的基础设施。</p>
</blockquote>
<blockquote>
<p>Nebula Graph 是一个现代的开源分布式图数据库(Graph Database)，欢迎同学们从:</p>
<ul>
<li>官网: <a href="https://nebula-graph.com.cn" target="_blank" rel="noopener noreferrer">https://nebula-graph.com.cn </a></li>
<li>Bilibili: <a href="https://space.bilibili.com/472621355" target="_blank" rel="noopener noreferrer">https://space.bilibili.com/472621355</a></li>
<li>GitHub:https://github.com/vesoft-inc/nebula-graph
了解我们哈。</li>
</ul>
</blockquote>
<h2 id="需求" class="headerLink">
    <a href="#%e9%9c%80%e6%b1%82" class="header-mark"></a>1 需求</h2><ol>
<li>方便增加新的数据</li>
<li>数据收集无需人为触发（自动、周期性）</li>
<li>每天数据量不超过1000条</li>
<li>数据可以生成 dashboard，也可以支持统计分期 query</li>
<li>高可用，数据安全</li>
<li>低预算，尽可能不需要运维人力</li>
</ol>
<h3 id="需求分析" class="headerLink">
    <a href="#%e9%9c%80%e6%b1%82%e5%88%86%e6%9e%90" class="header-mark"></a>1.1 需求分析</h3><p>我们需要搭建一个系统能实现</p>
<ul>
<li>一个能周期性触发获取数据的事件的服务: scheduler</li>
<li>一个触发之后，把数据 ETL 到数据库中的服务: ETL worker</li>
<li>一个数据仓库</li>
<li>一个能够把数据库作为源，允许用户 query，展示数据的界面: Data-UI</li>
</ul>
<p>这个需求的特点是虽然数据量很小、但是要求服务高可用、安全。因为这种情况下自建服务器还需要保证HA和数据安全会一定会消耗昂贵运维人力，所以我们应该尽量避免在自己维护的服务器中搭建 scheduler, 和数据库。</p>
<p>最终，我们选择了尽量使用公有云的 aaS 的方案:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">┌──────────────────────────┐
</span></span><span class="line"><span class="cl">│                          │
</span></span><span class="line"><span class="cl">│  Google Cloud Scheduler  │
</span></span><span class="line"><span class="cl">│                          │
</span></span><span class="line"><span class="cl">└────────────┬─────────────┘
</span></span><span class="line"><span class="cl">             │                             ┌─────────────────────┐
</span></span><span class="line"><span class="cl">             │                             │                     │
</span></span><span class="line"><span class="cl">┌────────────▼─────────────┐   ┌───────────►  GitHub API Server  │
</span></span><span class="line"><span class="cl">│                          │   │           │                     │
</span></span><span class="line"><span class="cl">│  Google Cloud Functions  ├───┤           └─────────────────────┘
</span></span><span class="line"><span class="cl">│                          │   │
</span></span><span class="line"><span class="cl">└────────────┬─────────────┘   │           ┌─────────────────────────┐
</span></span><span class="line"><span class="cl">             │                 │           │                         │
</span></span><span class="line"><span class="cl">             │                 ├───────────►  Docker Hub API Server  │
</span></span><span class="line"><span class="cl">   ┌─────────▼─────────┐       │           │                         │
</span></span><span class="line"><span class="cl">   │                   │       │           │                         │
</span></span><span class="line"><span class="cl">   │  Google BigQuery  │       │           └─────────────────────────┘
</span></span><span class="line"><span class="cl">   │                   │       ├───────────► ...                   
</span></span><span class="line"><span class="cl">   └─────────▲─────────┘       │           ┌──────────────────┐
</span></span><span class="line"><span class="cl">             │                 │           │                  │
</span></span><span class="line"><span class="cl">             │                 └───────────►  Aliyun OSS API  │
</span></span><span class="line"><span class="cl">  ┌──────────┴───────────┐                 │                  │
</span></span><span class="line"><span class="cl">  │                      │                 └──────────────────┘
</span></span><span class="line"><span class="cl">  │  Google Data Studio  │
</span></span><span class="line"><span class="cl">  │       ┌──┐           │
</span></span><span class="line"><span class="cl">  │  ┌──┐ │  │ ┌──┐      │
</span></span><span class="line"><span class="cl">  │  │  │ │  │ │  │      │
</span></span><span class="line"><span class="cl">  │  │  │ │  │ │  │      │
</span></span><span class="line"><span class="cl">  └──┴──┴─┴──┴─┴──┴──────┘
</span></span></code></pre></td></tr></table>
</div>
</div><p>因为我个人比较熟悉 Google Cloud Platform(GCP)的原因，加上GCP在大数据处理上比较领先，再加上Google提供的 free tier额度非常大方，以至于在我们这个数据量下，所有workload都会是免费的。
这个方案最后选择了全栈 Google Cloud，然而，这实际上只是一个参考，同学们完全可以在其他公有云提供商那里找到对应的服务。</p>
<p>这里我简单介绍一下， Google Cloud Scheduler是自解释的，不用多介绍了。
而 Google Cloud Functions是GCP的无服务器(serverless)的 Function as a Service服务，它的好处是我们可以把无状态的 event-driven 的 workload 代码放上去，它是按需付费（pay as you go)的，类似的服务还有 Google Cloud Run，后者的区别在于我们提供的是一个docker/container（这使得能支持的运行环境可以使任何能跑在容器里的东西），而 Cloud Functions是把我们的代码文件放上去。他们的效果是类似的，因为我准备用Python来做 ETL的东西，Clouf Functions已经支持了，我就直接选择它了。</p>
<p>在scheduler里边，我定义了每一天它发一个 pub/sub（类似于kafka，这里google可以保证至少发成功一次）消息给 Cloud Functions，然后 Cloud Functions会去做 ETL的工作。</p>
<p>这里，实际上我的设计里这个触发的函数调会把数据从API那里获取下来，在内存里处理好之后，存储到在对象存储里为 <code>JSON</code> 文件，然后再调用 Google BigQuery 的 API让 BigQuery直接从对对象存储里拉取 <code>JSON</code> 文件，导入记录到相应的表之中。</p>
<p><code>Google BigQuery</code> 作为GCP 特别有竞争力的一个产品，是它数据仓库，BigQuery 可以无限扩容，支持海量数据导入，支持 SQL-like 的 query，还自带ML算法，通过SQL就能调用这些算法。它可以和很多GCP以及第三方的组件可以集成起来。</p>
<p><code>Google Data Studio</code> 是GCP的数据 Insights产品，如果大家用过 Google Analytics 应该已经用过它了。</p>
<h3 id="数据的获取api" class="headerLink">
    <a href="#%e6%95%b0%e6%8d%ae%e7%9a%84%e8%8e%b7%e5%8f%96api" class="header-mark"></a>1.2 数据的获取，API</h3><p>我们第一阶段想要收集的数据来源是 GitHub 上，社区项目的统计数据、Docker Hub上，社区镜像的拉取计数，之后，会增加更多维度的数据。</p>
<ul>
<li>Github API, ref: <a href="https://pygithub.readthedocs.io" target="_blank" rel="noopener noreferrer">https://pygithub.readthedocs.io</a>
这里我们利用了一个Github API的一个 Python 封装，下边是在 IDLE/iPython/Jupyter 里尝试的例子</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># 实例化一个client
</span></span><span class="line"><span class="cl">g = Github(login_or_token=token, timeout=60, retry=Retry(
</span></span><span class="line"><span class="cl">           total=10, status_forcelist=(500, 502, 504), backoff_factor=0.3))
</span></span><span class="line"><span class="cl"># 配置好要获取的repo的信息
</span></span><span class="line"><span class="cl">org_str = &#34;vesoft-inc&#34;
</span></span><span class="line"><span class="cl">org = g.get_organization(org_str)
</span></span><span class="line"><span class="cl">repos = org.get_repos()
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 这里repos是一个迭代器，方便看到里边的东西，我们把它 list 一下可以看到所有的repo:
</span></span><span class="line"><span class="cl">list(repos)
</span></span><span class="line"><span class="cl">[Repository(full_name=&#34;vesoft-inc/nebula&#34;),
</span></span><span class="line"><span class="cl"> Repository(full_name=&#34;vesoft-inc/nebula-docs&#34;),
</span></span><span class="line"><span class="cl"> Repository(full_name=&#34;vesoft-inc/nebula-dev-docker&#34;),
</span></span><span class="line"><span class="cl"> Repository(full_name=&#34;vesoft-inc/github-statistics&#34;),
</span></span><span class="line"><span class="cl"> Repository(full_name=&#34;vesoft-inc/nebula-docker-compose&#34;),
</span></span><span class="line"><span class="cl"> Repository(full_name=&#34;vesoft-inc/nebula-go&#34;),
</span></span><span class="line"><span class="cl"> Repository(full_name=&#34;vesoft-inc/nebula-java&#34;),
</span></span><span class="line"><span class="cl"> Repository(full_name=&#34;vesoft-inc/nebula-python&#34;),
</span></span><span class="line"><span class="cl"> Repository(full_name=&#34;vesoft-inc/nebula-importer&#34;),
</span></span><span class="line"><span class="cl"> Repository(full_name=&#34;vesoft-inc/nebula-third-party&#34;),
</span></span><span class="line"><span class="cl"> Repository(full_name=&#34;vesoft-inc/nebula-storage&#34;),
</span></span><span class="line"><span class="cl"> Repository(full_name=&#34;vesoft-inc/nebula-graph&#34;),
</span></span><span class="line"><span class="cl"> Repository(full_name=&#34;vesoft-inc/nebula-common&#34;),
</span></span><span class="line"><span class="cl"> Repository(full_name=&#34;vesoft-inc/nebula-stats-exporter&#34;),
</span></span><span class="line"><span class="cl"> Repository(full_name=&#34;vesoft-inc/nebula-web-docker&#34;),
</span></span><span class="line"><span class="cl"> Repository(full_name=&#34;vesoft-inc/nebula-bench&#34;),
</span></span><span class="line"><span class="cl"> Repository(full_name=&#34;vesoft-inc/nebula-console&#34;),
</span></span><span class="line"><span class="cl"> Repository(full_name=&#34;vesoft-inc/nebula-docs-cn&#34;),
</span></span><span class="line"><span class="cl"> Repository(full_name=&#34;vesoft-inc/nebula-chaos&#34;),
</span></span><span class="line"><span class="cl"> Repository(full_name=&#34;vesoft-inc/nebula-clients&#34;),
</span></span><span class="line"><span class="cl"> Repository(full_name=&#34;vesoft-inc/nebula-spark-utils&#34;),
</span></span><span class="line"><span class="cl"> Repository(full_name=&#34;vesoft-inc/nebula-node&#34;),
</span></span><span class="line"><span class="cl"> Repository(full_name=&#34;vesoft-inc/nebula-rust&#34;),
</span></span><span class="line"><span class="cl"> Repository(full_name=&#34;vesoft-inc/nebula-cpp&#34;),
</span></span><span class="line"><span class="cl"> Repository(full_name=&#34;vesoft-inc/nebula-http-gateway&#34;),
</span></span><span class="line"><span class="cl"> Repository(full_name=&#34;vesoft-inc/nebula-flink-connector&#34;),
</span></span><span class="line"><span class="cl"> Repository(full_name=&#34;vesoft-inc/nebula-community&#34;),
</span></span><span class="line"><span class="cl"> Repository(full_name=&#34;vesoft-inc/nebula-br&#34;),
</span></span><span class="line"><span class="cl"> Repository(full_name=&#34;vesoft-inc/.github&#34;)]
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># repo0 是 vesoft-inc/nebula 这个repo，我们可以通过 get_clones_traffic，get_views_traffic 来获取过去十几天的 clone，view 统计
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">In [16]: repo0.get_clones_traffic()
</span></span><span class="line"><span class="cl">Out[16]:
</span></span><span class="line"><span class="cl">{&#39;count&#39;: 362,
</span></span><span class="line"><span class="cl"> &#39;uniques&#39;: 150,
</span></span><span class="line"><span class="cl"> &#39;clones&#39;: [Clones(uniques=5, timestamp=2021-04-06 00:00:00, count=16),
</span></span><span class="line"><span class="cl">  Clones(uniques=8, timestamp=2021-04-07 00:00:00, count=23),
</span></span><span class="line"><span class="cl">  Clones(uniques=13, timestamp=2021-04-08 00:00:00, count=30),
</span></span><span class="line"><span class="cl">  Clones(uniques=33, timestamp=2021-04-09 00:00:00, count=45),
</span></span><span class="line"><span class="cl">  Clones(uniques=2, timestamp=2021-04-10 00:00:00, count=13),
</span></span><span class="line"><span class="cl">  Clones(uniques=6, timestamp=2021-04-11 00:00:00, count=19),
</span></span><span class="line"><span class="cl">  Clones(uniques=15, timestamp=2021-04-12 00:00:00, count=28),
</span></span><span class="line"><span class="cl">  Clones(uniques=40, timestamp=2021-04-13 00:00:00, count=54),
</span></span><span class="line"><span class="cl">  Clones(uniques=9, timestamp=2021-04-14 00:00:00, count=21),
</span></span><span class="line"><span class="cl">  Clones(uniques=10, timestamp=2021-04-15 00:00:00, count=34),
</span></span><span class="line"><span class="cl">  Clones(uniques=10, timestamp=2021-04-16 00:00:00, count=23),
</span></span><span class="line"><span class="cl">  Clones(uniques=5, timestamp=2021-04-17 00:00:00, count=17),
</span></span><span class="line"><span class="cl">  Clones(uniques=2, timestamp=2021-04-18 00:00:00, count=13),
</span></span><span class="line"><span class="cl">  Clones(uniques=9, timestamp=2021-04-19 00:00:00, count=23),
</span></span><span class="line"><span class="cl">  Clones(uniques=3, timestamp=2021-04-20 00:00:00, count=3)]}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">In [17]: repo0.get_views_traffic()
</span></span><span class="line"><span class="cl">Out[17]:
</span></span><span class="line"><span class="cl">{&#39;count&#39;: 6019,
</span></span><span class="line"><span class="cl"> &#39;uniques&#39;: 1134,
</span></span><span class="line"><span class="cl"> &#39;views&#39;: [View(uniques=52, timestamp=2021-04-06 00:00:00, count=169),
</span></span><span class="line"><span class="cl">  View(uniques=143, timestamp=2021-04-07 00:00:00, count=569),
</span></span><span class="line"><span class="cl">  View(uniques=152, timestamp=2021-04-08 00:00:00, count=635),
</span></span><span class="line"><span class="cl">  View(uniques=134, timestamp=2021-04-09 00:00:00, count=648),
</span></span><span class="line"><span class="cl">  View(uniques=81, timestamp=2021-04-10 00:00:00, count=318),
</span></span><span class="line"><span class="cl">  View(uniques=42, timestamp=2021-04-11 00:00:00, count=197),
</span></span><span class="line"><span class="cl">  View(uniques=127, timestamp=2021-04-12 00:00:00, count=515),
</span></span><span class="line"><span class="cl">  View(uniques=149, timestamp=2021-04-13 00:00:00, count=580),
</span></span><span class="line"><span class="cl">  View(uniques=134, timestamp=2021-04-14 00:00:00, count=762),
</span></span><span class="line"><span class="cl">  View(uniques=141, timestamp=2021-04-15 00:00:00, count=385),
</span></span><span class="line"><span class="cl">  View(uniques=113, timestamp=2021-04-16 00:00:00, count=284),
</span></span><span class="line"><span class="cl">  View(uniques=48, timestamp=2021-04-17 00:00:00, count=168),
</span></span><span class="line"><span class="cl">  View(uniques=35, timestamp=2021-04-18 00:00:00, count=135),
</span></span><span class="line"><span class="cl">  View(uniques=124, timestamp=2021-04-19 00:00:00, count=492),
</span></span><span class="line"><span class="cl">  View(uniques=59, timestamp=2021-04-20 00:00:00, count=162)]}
</span></span></code></pre></td></tr></table>
</div>
</div><p>除了repo的 <code>clone</code>, <code>view</code>数据，我们还可以获取到 release的数据:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">In [31]: for rel in repo0.get_releases():
</span></span><span class="line"><span class="cl">    ...:     print(rel)
</span></span><span class="line"><span class="cl">GitRelease(title=&#34;Nebula Graph v1.2.1&#34;)
</span></span><span class="line"><span class="cl">GitRelease(title=&#34;Nebula Graph v1.2.0&#34;)
</span></span><span class="line"><span class="cl">GitRelease(title=&#34;Nebula Graph V1.1.0&#34;)
</span></span><span class="line"><span class="cl">GitRelease(title=&#34;Nebula Graph v1.0.1&#34;)
</span></span><span class="line"><span class="cl">GitRelease(title=&#34;V1.0.0 GA&#34;)
</span></span><span class="line"><span class="cl">GitRelease(title=&#34;Nebula Graph v1.0.0-RC4&#34;)
</span></span><span class="line"><span class="cl">GitRelease(title=&#34;Nebula Graph v1.0.0-RC3&#34;)
</span></span><span class="line"><span class="cl">GitRelease(title=&#34;Nebula Graph Release v1.0.0-RC2&#34;)
</span></span><span class="line"><span class="cl">GitRelease(title=&#34;Nebula Graph v1.0.0-rc1&#34;)
</span></span><span class="line"><span class="cl">GitRelease(title=&#34;Nebula Graph v1.0.0-beta&#34;)
</span></span><span class="line"><span class="cl">GitRelease(title=&#34;Nebula Graph v0.1.0&#34;)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 每一个 release 对应一个 git tag，其中会有一个或者多个供下载的 asset
</span></span><span class="line"><span class="cl">In [33]: release_v121 = rels[0]
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">In [34]: release_v121.tag_name
</span></span><span class="line"><span class="cl">Out[34]: &#39;v1.2.1&#39;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">In [35]: list(release_121.get_assets())
</span></span><span class="line"><span class="cl">Out[35]:
</span></span><span class="line"><span class="cl">[GitReleaseAsset(url=&#34;https://api.github.com/repos/vesoft-inc/nebula/releases/assets/35056357&#34;),
</span></span><span class="line"><span class="cl"> GitReleaseAsset(url=&#34;https://api.github.com/repos/vesoft-inc/nebula/releases/assets/35056361&#34;),
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl"> GitReleaseAsset(url=&#34;https://api.github.com/repos/vesoft-inc/nebula/releases/assets/35056456&#34;)]
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 每一个assset 的下载量和其他metadata也是可以获取的
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">In [40]: assets[0].browser_download_url
</span></span><span class="line"><span class="cl">Out[40]: &#39;https://github.com/vesoft-inc/nebula/releases/download/v1.2.1/nebula-1.2.1.el6-5.x86_64.rpm&#39;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">In [41]: assets[0].download_count
</span></span><span class="line"><span class="cl">Out[41]: 45
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">In [43]: assets[0].name
</span></span><span class="line"><span class="cl">Out[43]: &#39;nebula-1.2.1.el6-5.x86_64.rpm&#39;
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>Docker Hub API, ref <a href="https://github.com/amalfra/docker-hub/blob/master/src/libs/docker_hub_client.py" target="_blank" rel="noopener noreferrer">https://github.com/amalfra/docker-hub/blob/master/src/libs/docker_hub_client.py</a>
这里我们服用了 docker-hub 这个开源小项目中的一个库 <code>docker_hub_client.py</code> 来作为 Docker Hub API的 python wrapper</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="c1"># 实例化 client
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">In</span><span class="w"> </span><span class="p">[</span><span class="mi">47</span><span class="p">]:</span><span class="w"> </span><span class="n">dh_client</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">DockerHubClient</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1"># 获取 `vesoft`之下的repo
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">In</span><span class="w"> </span><span class="p">[</span><span class="mi">48</span><span class="p">]:</span><span class="w"> </span><span class="n">dh_r</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">dh_client</span><span class="p">.</span><span class="nf">get_repos</span><span class="p">(</span><span class="s2">&#34;vesoft&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">In</span><span class="w"> </span><span class="p">[</span><span class="mi">54</span><span class="p">]:</span><span class="w"> </span><span class="n">dh_r</span><span class="p">[</span><span class="s1">&#39;code&#39;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">Out</span><span class="p">[</span><span class="mi">54</span><span class="p">]:</span><span class="w"> </span><span class="mi">200</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">In</span><span class="w"> </span><span class="p">[</span><span class="mi">55</span><span class="p">]:</span><span class="w"> </span><span class="n">dh_r</span><span class="p">[</span><span class="s1">&#39;content&#39;</span><span class="p">].</span><span class="k">keys</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">Out</span><span class="p">[</span><span class="mi">55</span><span class="p">]:</span><span class="w"> </span><span class="nf">dict_keys</span><span class="p">([</span><span class="s1">&#39;count&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;next&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;previous&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;results&#39;</span><span class="p">])</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1"># 可以看到这一个返回的API里就有所有（如果多的话是需要翻页的）的 image的 start_count, pull_count的数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">In</span><span class="w"> </span><span class="p">[</span><span class="mi">58</span><span class="p">]:</span><span class="w"> </span><span class="n">dh_r</span><span class="p">[</span><span class="s1">&#39;content&#39;</span><span class="p">][</span><span class="s1">&#39;results&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">Out</span><span class="p">[</span><span class="mi">58</span><span class="p">]:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">{</span><span class="s1">&#39;user&#39;</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;vesoft&#39;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="s1">&#39;name&#39;</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;nebula-graphd&#39;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="s1">&#39;namespace&#39;</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;vesoft&#39;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="s1">&#39;repository_type&#39;</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;image&#39;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="s1">&#39;status&#39;</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="s1">&#39;description&#39;</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;Nebula Graph Graphd Service Image. https://github.com/vesoft-inc/nebula&#39;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="s1">&#39;is_private&#39;</span><span class="p">:</span><span class="w"> </span><span class="no">False</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="s1">&#39;is_automated&#39;</span><span class="p">:</span><span class="w"> </span><span class="no">False</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="s1">&#39;can_edit&#39;</span><span class="p">:</span><span class="w"> </span><span class="no">False</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="s1">&#39;star_count&#39;</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="s1">&#39;pull_count&#39;</span><span class="p">:</span><span class="w"> </span><span class="mi">223494</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="s1">&#39;last_updated&#39;</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;2021-04-19T19:04:20.324010Z&#39;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="s1">&#39;is_migrated&#39;</span><span class="p">:</span><span class="w"> </span><span class="no">False</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="s1">&#39;collaborator_count&#39;</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="s1">&#39;affiliation&#39;</span><span class="p">:</span><span class="w"> </span><span class="n">None</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="s1">&#39;hub_user&#39;</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;vesoft&#39;</span><span class="err">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="实现" class="headerLink">
    <a href="#%e5%ae%9e%e7%8e%b0" class="header-mark"></a>2 实现</h2><h3 id="计划任务调度-with-cloud-scheduler" class="headerLink">
    <a href="#%e8%ae%a1%e5%88%92%e4%bb%bb%e5%8a%a1%e8%b0%83%e5%ba%a6-with-cloud-scheduler" class="header-mark"></a>2.1 计划任务调度 with Cloud Scheduler</h3><p>前边提到，<code>Scheduler --&gt; Functions</code> 中间是通过消息队列实现的可靠事件触发，我们需要在 Google Cloud Pub/Sub里创建一个订阅消息，后边我们会把这个订阅消息从 Scheduler 定期发送，并且在 Function创建的时候定义为触发条件。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ gcloud pubsub topics create nebula-insights-cron-topic
</span></span><span class="line"><span class="cl">$ gcloud pubsub subscriptions create cron-sub --topic nebula-insights-cron-topic
</span></span></code></pre></td></tr></table>
</div>
</div><p>任务的创建非常直接，在 <a href="https://console.cloud.google.com/cloudscheduler" target="_blank" rel="noopener noreferrer">Scheduler Web Console</a> 上直接图形化操作就可以了，记得要选择触发 Pub/Sub 消息为 <code>cron-sub</code>，消息主题为 <code>nebula-insights-cron-topic</code></p>
<h3 id="etl-worker-with-python--google-functions" class="headerLink">
    <a href="#etl-worker-with-python--google-functions" class="header-mark"></a>2.2 ETL Worker with Python + Google Functions</h3><p>当 Scheduler 每天定时发送消息之后，接收方就是我们要定义的 Google Functions了，它的定义如图
第一步，选择它的触发类型为 Pub/Sub，同时要定义消息的主题和名字。</p>
<p><a class="lightgallery" href="/en/nebula-insights/create_functions.png" title="create_functions" data-thumbnail="/en/nebula-insights/create_functions.png">
        
    </a></p>
<p>第二步就是把代码放进去:</p>
<p><a class="lightgallery" href="/en/nebula-insights/create_functions_code.png" title="create_functions_code" data-thumbnail="/en/nebula-insights/create_functions_code.png">
        
    </a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">                                              ┌─────────────────────┐
</span></span><span class="line"><span class="cl">                                              │                     │
</span></span><span class="line"><span class="cl">   ┌──────────────────────────┐   ┌───────────►  GitHub API Server  │
</span></span><span class="line"><span class="cl">   │                          │   │           │                     │
</span></span><span class="line"><span class="cl">   │  Google Cloud Functions  ◄───►           └─────────────────────┘
</span></span><span class="line"><span class="cl">   │                          │   │
</span></span><span class="line"><span class="cl">   └────────────▲─────────────┘   │           ┌─────────────────────────┐
</span></span><span class="line"><span class="cl">                │                 │           │                         │
</span></span><span class="line"><span class="cl">                │                 ├───────────►  Docker Hub API Server  │
</span></span><span class="line"><span class="cl">   ┌────────────▼────────────┐    │           │                         │
</span></span><span class="line"><span class="cl">   │                         │    │           │                         │
</span></span><span class="line"><span class="cl">   │  Google Cloud Storage   │    │           └─────────────────────────┘
</span></span><span class="line"><span class="cl">   │                         │    ...
</span></span><span class="line"><span class="cl">   └────────────┬────────────┘    │           ┌──────────────────┐
</span></span><span class="line"><span class="cl">                │                 │           │                  │
</span></span><span class="line"><span class="cl">                │                 └───────────►  Aliyun OSS API  │
</span></span><span class="line"><span class="cl">      ┌─────────▼─────────┐                   │                  │
</span></span><span class="line"><span class="cl">      │                   │                   └──────────────────┘
</span></span><span class="line"><span class="cl">      │  Google BigQuery  │
</span></span><span class="line"><span class="cl">      │                   │
</span></span><span class="line"><span class="cl">      └───────────────────┘
</span></span></code></pre></td></tr></table>
</div>
</div><p>这部分的逻辑就是通过前边分析了的API取得信息，然后组装成需要的格式存到 Cloud Storage(对象存储），然后再导入到 BigQuery（数仓）之中，全部代码在GitHub上:
<a href="https://github.com/wey-gu/nebula-insights/blob/main/functions/data-fetching-0/main.py" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/nebula-insights/blob/main/functions/data-fetching-0/main.py</a>
另外，可以参考这个官方教程 <a href="https://cloud.google.com/scheduler/docs/tut-pub-sub" target="_blank" rel="noopener noreferrer">https://cloud.google.com/scheduler/docs/tut-pub-sub</a></p>
<h3 id="数仓表结构定义" class="headerLink">
    <a href="#%e6%95%b0%e4%bb%93%e8%a1%a8%e7%bb%93%e6%9e%84%e5%ae%9a%e4%b9%89" class="header-mark"></a>2.3 数仓表结构定义</h3><p>数仓的表结构比较直接，schema的图贴在下边了，值得注意的是，BigQuery支持嵌套的表结构（而不像一般关系型数据库那样需要把这样的逻辑结构用辅助表来表示），在我们这个场景下非常方便，比如release表中的 assets的三个嵌套字段。
<a class="lightgallery" href="/en/nebula-insights/bigquery_schema.png" title="bigquery_schema|475x412" data-thumbnail="/en/nebula-insights/bigquery_schema.png">
        
    </a></p>
<p>更详细的信息可以参考GitHub上的介绍和代码: <a href="https://github.com/wey-gu/nebula-insights#data-etl-bigquery-and-gcs" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/nebula-insights#data-etl-bigquery-and-gcs</a></p>
<h3 id="数据可视化" class="headerLink">
    <a href="#%e6%95%b0%e6%8d%ae%e5%8f%af%e8%a7%86%e5%8c%96" class="header-mark"></a>2.4 数据可视化</h3><p>到这里，我们就可以自动在BigQuery里存有每天收集的不同来源的统计数据啦，有了它，我们可以借助 Data Studio 来生成各式各样的可视化表示。</p>
<p>参考 <a href="https://cloud.google.com/bigquery/docs/visualize-data-studio" target="_blank" rel="noopener noreferrer">https://cloud.google.com/bigquery/docs/visualize-data-studio</a></p>
<h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>3 总结</h2><p>这样，我们实际上不需要任何认为维护的成本和投入，就搭建了一整个数据的流水线，并且只需要按照数据用量付费，在我们的数据量下，及时考虑未来增加数十个新的量度的收集，我们依然没有达到需要付费的用量，是不是很Cool？
因为数据同时存在于对象存储与数仓里，我们可以方便随时把数据导入任意其他平台上。</p>
<p>BigQuery还有一些非常常用的，自带的机器学习的功能，只需要写一个SQL-Like的query就能触发然后获得预测结果，如果我们用到这些功能的话也会回到 datawhale 为同学们继续分享哈。</p>
<p>第一次做数据工程方面的分享，如果有错误的地方欢迎大家不吝指出哈~~</p>
<p>谢谢！</p>]]></description>
</item><item>
    <title>Explore Chia Network in a Visualized Way</title>
    <link>https://siwei.io/en/nebula-chia/</link>
    <pubDate>Wed, 26 May 2021 21:17:04 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/en/nebula-chia/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/en/nebula-chia/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>本文分析了 Chia Network 的全链数据，并做了将全链数据导入图数据库：Nebula Graph 之中的尝试，从而可视化地探索了 Chia 图中数据之间的关联关系。</p>
<p>我把涉及的代码开源在了这里：https://github.com/wey-gu/nebula-chia</p>
</blockquote>
<h2 id="what-is-chia-network" class="headerLink">
    <a href="#what-is-chia-network" class="header-mark"></a>1 What is Chia Network?</h2><p>Chia Network 是由 BitTorrent 的作者 Bram Cohen 的团队在 2017 年创建的区块链项目。</p>
<h3 id="why-yet-another-blockchain-为什么再搞一个区块链" class="headerLink">
    <a href="#why-yet-another-blockchain-%e4%b8%ba%e4%bb%80%e4%b9%88%e5%86%8d%e6%90%9e%e4%b8%80%e4%b8%aa%e5%8c%ba%e5%9d%97%e9%93%be" class="header-mark"></a>1.1 Why yet another Blockchain? 为什么再搞一个区块链?</h3><p>Chia 用了全新的中本聪共识算法，这个算法通过不允许并行计算，让挖矿（Proof of Work）所需算力和能耗降到非常低，这使得超大组织、玩家没法像在其他的区块链项目那样有算力的绝对优势，也一定程度上规避了能源的浪费。</p>
<h3 id="how-can-i-access-chia-network-如何连接chia" class="headerLink">
    <a href="#how-can-i-access-chia-network-%e5%a6%82%e4%bd%95%e8%bf%9e%e6%8e%a5chia" class="header-mark"></a>1.2 How Can I access Chia Network? 如何连接Chia?</h3><p>我们可以通过 Chia Network 的客户端来访问它，这个客户端是 Electron + Python 的程序，天然跨平台，既有 GUI 又有 CLI 的方式。</p>
<h4 id="安装" class="headerLink">
    <a href="#%e5%ae%89%e8%a3%85" class="header-mark"></a>1.2.1 安装</h4><p>只需要按照官方的 Guide 来下载安装就好， <a href="https://github.com/Chia-Network/chia-blockchain/wiki/INSTALL" target="_blank" rel="noopener noreferrer">https://github.com/Chia-Network/chia-blockchain/wiki/INSTALL</a>，我在 M1 Mac 下安装的时候脚本出了点小问题，大概是因为拉取二进制 wheel 文件网络出问题走到了编译 wheel的逻辑，而那里是依赖 <code>cargo</code>的，如果大家遇到了这个问题，可以提前手动安装一下 rust，或者 cherry-pick 我的这个 <a href="https://github.com/Chia-Network/chia-blockchain/pull/3789" target="_blank" rel="noopener noreferrer">PR</a> 。</p>
<h4 id="运行" class="headerLink">
    <a href="#%e8%bf%90%e8%a1%8c" class="header-mark"></a>1.2.2 运行</h4><ul>
<li>按照官方 guide，比如 macOS 来说，最后一步执行<code>npm run electron &amp;</code> 就是运行它的GUI客户端。</li>
<li>如果大家像我一样喜欢 CLI，直接在执行完 <code>. ./activate</code> 之后就可以 <code>chia --help</code>了哈☺，里边有只启动部分服务的方式（相比 GUI 启动所有来说)。</li>
</ul>
<p>在运行之后，如果你的网络不是多层 NAT 的那种，理论上您可以连到 <code>mainnet</code> 并且自动和主链同步数据了，如果您是第二次运行，连接主链，一开始可能有一阵子同步的<code>block</code> 数是不变的，也没有 <code>peer</code> 连过来，不必惊慌，等一下就好了。</p>
<blockquote>
<p>Tips:</p>
<ul>
<li>第一次连到 Chia Network 的同学们，客户端会自动生成一个钱包，及的保存那一串词，它们就是你的私钥哦。</li>
<li>万一，如果真的连不上的话，可能需要在路由上配置，<a href="https://www.homenethowto.com/ports-and-nat/upnp-automatic-port-forward/" target="_blank" rel="noopener noreferrer">UPnP</a>，防火墙要允许 8444。</li>
</ul>
</blockquote>
<h4 id="访问-chia-的数据" class="headerLink">
    <a href="#%e8%ae%bf%e9%97%ae-chia-%e7%9a%84%e6%95%b0%e6%8d%ae" class="header-mark"></a>1.2.3 访问 Chia 的数据</h4><p>Chia 的客户端把数据存在了几个 SQLite 数据库里，它们的路径是我们安装客户端的用户的家目录：<code>~/.chia/mainnet</code></p>
<p>下边就是运行起来 Chia 之后生成的主要的两个数据库的二进制文件：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">~/.chia/mainnet/db 
</span></span><span class="line"><span class="cl">❯ ll -h
</span></span><span class="line"><span class="cl">total 4350416
</span></span><span class="line"><span class="cl">-rw-r--r--  1 weyl  staff   2.0G May  6 12:06 blockchain_v1_mainnet.sqlite
</span></span><span class="line"><span class="cl">-rw-r--r--  1 weyl  staff    64K May  6 11:17 blockchain_v1_mainnet.sqlite-shm
</span></span><span class="line"><span class="cl">-rw-r--r--  1 weyl  staff    20M May  6 12:10 blockchain_v1_mainnet.sqlite-wal
</span></span><span class="line"><span class="cl">-rw-r--r--  1 weyl  staff   1.8M May  6 11:46 peer_table_node.sqlite
</span></span><span class="line"><span class="cl">-rw-r--r--  1 weyl  staff    32K May  5 17:30 peer_table_node.sqlite-shm
</span></span><span class="line"><span class="cl">-rw-r--r--  1 weyl  staff   5.4M May  6 11:46 peer_table_node.sqlite-wal
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">~/.chia/mainnet/wallet/db
</span></span><span class="line"><span class="cl">❯ ll -h 
</span></span><span class="line"><span class="cl">total 3055848
</span></span><span class="line"><span class="cl">-rw-r--r--  1 weyl  staff   1.4G May  7 15:32 blockchain_wallet_v1_mainnet_903996200.sqlite
</span></span><span class="line"><span class="cl">-rw-r--r--  1 weyl  staff    32K May  7 15:24 blockchain_wallet_v1_mainnet_903996200.sqlite-shm
</span></span><span class="line"><span class="cl">-rw-r--r--  1 weyl  staff   4.0M May  7 15:32 blockchain_wallet_v1_mainnet_903996200.sqlite-wal
</span></span><span class="line"><span class="cl">-rw-r--r--  1 weyl  staff    16K May  7 15:24 wallet_peers.sqlite
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后，我们可以先用 SQLite Browser，一个 SQlite 数据库（文件）的浏览器来看看它。</p>
<p>SQlite 浏览器的官网是 <a href="https://sqlitebrowser.org/" target="_blank" rel="noopener noreferrer">https://sqlitebrowser.org/</a> 。在下载，安装之后，我们可以通过点击 <code>Open Database/打开数据库</code> 选择浏览上边列出来的两个 <code>.sqlite</code> 扩展名的数据库文件。</p>
<p>打开数据库之后，我们可以选择第一个标签 <code>Database Schema</code> 来看看表的结构。</p>
<p><a class="lightgallery" href="/en/nebula-chia/SQLite_Schema.png" title="SQLite_Schema" data-thumbnail="/en/nebula-chia/SQLite_Schema.png">
        
    </a></p>
<p>我们还能像类似于 Excel 一样去看表的数据，还可以 Filter/过滤、Sort/排序任意列。</p>
<p><a class="lightgallery" href="/en/nebula-chia/SQLite_Browse_Data.png" title="SQLite_Browse_Data" data-thumbnail="/en/nebula-chia/SQLite_Browse_Data.png">
        
    </a></p>
<p>下一部分，我们来简单看看表里的数据。</p>
<blockquote>
<p>Tips:</p>
<ul>
<li>这里边，<code>~/.chia/mainnet/wallet</code> 和裸目录 <code>~/.chia/mainnet </code> 下边的 <code>db</code> 里分别都有表文件，他们的信息是有重复的，大家可以分别打开看看哦，即使是相同的表的名字，比如 <code>block_record</code> 内里的信息也略有差别，如果大家知道为什么有这样的差别，欢迎浏览告诉大家哈，可能要仔细研究一下客户端、钱包等代码才行，幸运的是，它们相对比较好阅读，是 Python 写的： <a href="https://github.com/Chia-Network/chia-blockchain" target="_blank" rel="noopener noreferrer">https://github.com/Chia-Network/chia-blockchain</a> 。</li>
</ul>
</blockquote>
<h2 id="inspect-the-chia-network-分析-chia-的数据" class="headerLink">
    <a href="#inspect-the-chia-network-%e5%88%86%e6%9e%90-chia-%e7%9a%84%e6%95%b0%e6%8d%ae" class="header-mark"></a>2 Inspect the Chia Network, 分析 Chia 的数据</h2><p>如果大家仔细看了上边表结构定义的截图，就能注意到一些表的主要信息是嵌套二进制 KV Byte，所以只从 SQLite 并不能看到所有 Chia 的数据，所以我们需要（用一个编程语言来）读取表里的 Byte。</p>
<p>幸运的是，这件事儿因为 Chia 是开源的，而且是 Python 的代码，使得我们可以直接交互式的做。</p>
<p>我花了一点点时间在 Chia 客户端代码里找到了需要的封装类，借助它，可以比较方便的分析 Chia 客户端在本地的全链数据。</p>
<p>如果您不感兴趣细节，可以直接看我分析的结论。</p>
<p>结论之后，我也给大家演示一下是怎么读取它们的。</p>
<h3 id="tldr-结论" class="headerLink">
    <a href="#tldr-%e7%bb%93%e8%ae%ba" class="header-mark"></a>2.1 TL;DR, 结论</h3><p>我们可以从表中读取到区块链记录（Block Record ），Chia 币记录（Coin Record）。</p>
<p>从区块记录中，我们可以看到关键的涉及交易的信息：</p>
<ul>
<li>关联的 Coin ，关联的 Puzzle（地址），Coin 的值(Amount)</li>
</ul>
<p>从币记录中，我们可以看到关键的涉及区块的信息：</p>
<ul>
<li>生成这个 Coin 所在区块链里的索引高度（Confirmed Index）</li>
<li>如果这个记录是花费 Coin 的，花费它的索引高度（Spent Index）</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">                                                   ┌──────────────────────┐
</span></span><span class="line"><span class="cl">┌────────────────────────────────────────┐         │                      │
</span></span><span class="line"><span class="cl">│                                        │         │    Coin Record       │
</span></span><span class="line"><span class="cl">│   Block Record                         │         │                      │
</span></span><span class="line"><span class="cl">│                                        │         │     Coin Name        │
</span></span><span class="line"><span class="cl">│    Height ◄────────────────────────────┼─┐       │                      │
</span></span><span class="line"><span class="cl">│                                        │ │     ┌─┼───► Puzzle           │
</span></span><span class="line"><span class="cl">│    Header                              │ │     │ │                      │
</span></span><span class="line"><span class="cl">│                                        │ │     ├─┼───► Coin Parent      │
</span></span><span class="line"><span class="cl">│    Prev Header                         │ │     │ │                      │
</span></span><span class="line"><span class="cl">│                                        │ │     ├─┼───► Amount           │
</span></span><span class="line"><span class="cl">│    Block Body                          │ │     │ │                      │
</span></span><span class="line"><span class="cl">│      farmer_puzzle_hash                │ │     │ │     Time Stamp       │
</span></span><span class="line"><span class="cl">│      fees                              │ │     │ │                      │
</span></span><span class="line"><span class="cl">│      pool_puzzle_hash                  │ └─────┼─┼─┬─  Confirmed Index  │
</span></span><span class="line"><span class="cl">│      prev_transaction_block_hash       │       │ │ │                    │
</span></span><span class="line"><span class="cl">│      prev_transaction_block_height     │       │ │ └─  Spent Index      │
</span></span><span class="line"><span class="cl">│      transactions_info  ───────────────┼───────┘ │                      │
</span></span><span class="line"><span class="cl">│ ┌─── is_transaction_block              │         │     Coinbase         │
</span></span><span class="line"><span class="cl">│ │    sub_epoch_summary ────────────────┼───────┐ │                      │
</span></span><span class="line"><span class="cl">│ │                                      │       │ └─ ────────────────────┘
</span></span><span class="line"><span class="cl">│ │  is Peak                             │       │
</span></span><span class="line"><span class="cl">│ └──is Block                            │       │ ┌─────────────────────┐
</span></span><span class="line"><span class="cl">│                                        │       │ │                     │
</span></span><span class="line"><span class="cl">└────────────────────────────────────────┘       └─┼─► Sub Epoch Segment │
</span></span><span class="line"><span class="cl">                                                   │                     │
</span></span><span class="line"><span class="cl">                                                   └─────────────────────┘
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="preperation-准备" class="headerLink">
    <a href="#preperation-%e5%87%86%e5%a4%87" class="header-mark"></a>2.2 Preperation, 准备</h3><p>因为安装客户端之后，我们本地实际上已经有了相关的 Python 环境和依赖，只需要在里边跑起来就好。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 注意，我们要 cd 到之前安装客户端时候克隆的仓库。</span>
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> chia-blockchain
</span></span><span class="line"><span class="cl"><span class="c1"># source activate 脚本来切换到仓库安装时候创建的 Python 虚拟环境，并进到 IPython 里。</span>
</span></span><span class="line"><span class="cl"><span class="nb">source</span> venv/bin/activate <span class="o">&amp;&amp;</span> pip install ipython <span class="o">&amp;&amp;</span> ipython
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后试着导入客户端里边带有的 Python 的 Chia 的封装类试试看。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="kn">import</span> <span class="nn">sqlite3</span>
</span></span><span class="line"><span class="cl">   <span class="o">...</span><span class="p">:</span> <span class="kn">from</span> <span class="nn">chia.consensus.block_record</span> <span class="kn">import</span> <span class="n">BlockRecord</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 导入成功，没有报错</span>
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="err">!</span><span class="n">pwd</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 我的安装克隆目录</span>
</span></span><span class="line"><span class="cl"><span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">weyl</span><span class="o">/</span><span class="n">chia</span><span class="o">-</span><span class="n">blockchain</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>恭喜你做好了准备，我们看看 Block Record 里都有什么。</p>
<h3 id="block-record-chain区块记录" class="headerLink">
    <a href="#block-record-chain%e5%8c%ba%e5%9d%97%e8%ae%b0%e5%bd%95" class="header-mark"></a>2.3 Block Record Chain，区块记录</h3><p>在上一步的 <code>IPython</code> 窗口下。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># 注意，这里的路径的前缀是我们自己的家目录，不同操作系统，不同的用户都会有所不同。</span>
</span></span><span class="line"><span class="cl"><span class="n">chia_db_path</span> <span class="o">=</span> <span class="s2">&#34;/Users/weyl/.chia/mainnet/db/blockchain_v1_mainnet.sqlite&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">cur</span> <span class="o">=</span> <span class="n">con</span><span class="o">.</span><span class="n">cursor</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 这里我们取第 201645 高的区块</span>
</span></span><span class="line"><span class="cl"><span class="n">rows</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">cur</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s1">&#39;SELECT * FROM block_records WHERE height = 201645&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 这里 0 表示 SELECT 结果的第一行，3 表示在 BlockRecord 这个表里边，Block 的二进制 BLOB 是第四列，参考本章底部的表定义部分</span>
</span></span><span class="line"><span class="cl"><span class="n">block_records_201645</span> <span class="o">=</span> <span class="n">BlockRecord</span><span class="o">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="n">rows</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">3</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="nb">dir</span><span class="p">(</span><span class="n">block_records_201645</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 可以查看一些属性 is_transaction_block，timestamp，reward_claims_incorporated</span>
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">174</span><span class="p">]:</span> <span class="n">block_records_201645</span><span class="o">.</span><span class="n">is_transaction_block</span>
</span></span><span class="line"><span class="cl"><span class="n">Out</span><span class="p">[</span><span class="mi">174</span><span class="p">]:</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">182</span><span class="p">]:</span> <span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">183</span><span class="p">]:</span> <span class="n">datetime</span><span class="o">.</span><span class="n">fromtimestamp</span><span class="p">(</span><span class="n">block_records_201645</span><span class="o">.</span><span class="n">timestamp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">Out</span><span class="p">[</span><span class="mi">183</span><span class="p">]:</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2021</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">29</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">190</span><span class="p">]:</span> <span class="n">block_records_201645</span><span class="o">.</span><span class="n">reward_claims_incorporated</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">to_json_dict</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">Out</span><span class="p">[</span><span class="mi">190</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span><span class="s1">&#39;parent_coin_info&#39;</span><span class="p">:</span> <span class="s1">&#39;0xccd5bb71183532bff220ba46c268991a000000000000000000000000000313ab&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"> <span class="s1">&#39;puzzle_hash&#39;</span><span class="p">:</span> <span class="s1">&#39;0xbbb014f41d88c74b78501b36e4863d3382bfda9ae3c4d30a1b6df72b962502b6&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"> <span class="s1">&#39;amount&#39;</span><span class="p">:</span> <span class="mi">1750000000000</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 可以快速 print 看大部分信息</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">block_records_201645</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>block_records_201645</code> 的打印结果如下。</p>
<blockquote>
<p>这里我截断了一些数据</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span><span class="err">&#39;challenge_block_info_hash&#39;:</span> <span class="err">&#39;0x4a562f1ffa7a06fe76b1df74dbdd6bdcfbf63139a6f1fc3291c606d7c976abf6&#39;,</span>
</span></span><span class="line"><span class="cl"> <span class="err">&#39;challenge_vdf_output&#39;:</span> <span class="err">{&#39;data&#39;:</span> <span class="err">&#39;0x0200a6b38d6b58d17129d71737088772561f22a44ef302fe45a70a763b878f998abfe35946df720bcb5d78e214b667bce801d597b46c867928c4b8926c342375a961f36cd63ec698bc25e5ce48c45d9a2074eded0e42d24dd1b50a59e699f671f0900100&#39;</span><span class="p">}</span><span class="err">,</span>
</span></span><span class="line"><span class="cl"> <span class="err">&#39;deficit&#39;:</span> <span class="mi">16</span><span class="err">,</span>
</span></span><span class="line"><span class="cl"> <span class="err">&#39;farmer_puzzle_hash&#39;:</span> <span class="err">&#39;</span><span class="mi">0</span><span class="err">x</span><span class="mi">4</span><span class="err">bc</span><span class="mi">6435</span><span class="err">b</span><span class="mi">409</span><span class="err">bcbabe</span><span class="mi">53870</span><span class="err">dae</span><span class="mi">0</span><span class="err">f</span><span class="mi">03755</span><span class="err">f</span><span class="mi">6</span><span class="err">aabb</span><span class="mi">4594</span><span class="err">c</span><span class="mi">5915</span><span class="err">ec</span><span class="mi">983</span><span class="err">acf</span><span class="mi">12</span><span class="err">a</span><span class="mi">5</span><span class="err">d</span><span class="mi">1</span><span class="err">fba&#39;,</span>
</span></span><span class="line"><span class="cl"> <span class="err">&#39;fees&#39;:</span> <span class="mi">0</span><span class="err">,</span>
</span></span><span class="line"><span class="cl"> <span class="err">&#39;finished_challenge_slot_hashes&#39;:</span> <span class="p">[</span><span class="err">&#39;</span><span class="mi">0</span><span class="err">x</span><span class="mi">2</span><span class="err">b</span><span class="mi">1</span><span class="err">a</span><span class="mi">7</span><span class="err">b</span><span class="mi">4859</span><span class="err">a</span><span class="mi">8</span><span class="err">d</span><span class="mi">3597</span><span class="err">b</span><span class="mf">8e6</span><span class="err">cbe</span><span class="mi">3</span><span class="err">b</span><span class="mi">27</span><span class="err">ab</span><span class="mi">97212</span><span class="err">be</span><span class="mi">8</span><span class="err">b</span><span class="mf">19e6867</span><span class="err">f</span><span class="mi">2</span><span class="err">a</span><span class="mi">4</span><span class="err">d</span><span class="mi">0</span><span class="err">eef</span><span class="mi">26</span><span class="err">c</span><span class="mi">36340</span><span class="err">f&#39;</span><span class="p">]</span><span class="err">,</span>
</span></span><span class="line"><span class="cl"> <span class="err">&#39;finished_infused_challenge_slot_hashes&#39;:</span> <span class="p">[</span><span class="err">&#39;</span><span class="mi">0</span><span class="err">xd</span><span class="mi">0185</span><span class="err">a</span><span class="mi">6493</span><span class="err">b</span><span class="mi">10</span><span class="err">d</span><span class="mf">84e696</span><span class="err">c</span><span class="mi">6</span><span class="err">fc</span><span class="mi">55</span><span class="err">ec</span><span class="mf">1920e8</span><span class="err">a</span><span class="mi">96791</span><span class="err">a</span><span class="mi">604</span><span class="err">dedfe</span><span class="mi">77635</span><span class="err">da</span><span class="mi">460</span><span class="err">f</span><span class="mi">354</span><span class="err">d&#39;</span><span class="p">]</span><span class="err">,</span>
</span></span><span class="line"><span class="cl"> <span class="err">&#39;finished_reward_slot_hashes&#39;:</span> <span class="p">[</span><span class="err">&#39;</span><span class="mi">0</span><span class="err">xe</span><span class="mi">2</span><span class="err">bcbf</span><span class="mi">560471131</span><span class="err">a</span><span class="mi">7</span><span class="err">fb</span><span class="mi">87</span><span class="err">ffe</span><span class="mi">3</span><span class="err">f</span><span class="mi">9</span><span class="err">ddde</span><span class="mi">03166</span><span class="err">a</span><span class="mi">9</span><span class="err">b</span><span class="mi">0092</span><span class="err">a</span><span class="mi">50</span><span class="err">f</span><span class="mi">1</span><span class="err">ed</span><span class="mi">1599715857</span><span class="err">c</span><span class="mi">365</span><span class="err">&#39;</span><span class="p">]</span><span class="err">,</span>
</span></span><span class="line"><span class="cl"> <span class="err">&#39;header_hash&#39;:</span> <span class="err">&#39;</span><span class="mi">0</span><span class="err">x</span><span class="mf">2791729e1</span><span class="err">c</span><span class="mi">914</span><span class="err">f</span><span class="mi">9</span><span class="err">c</span><span class="mi">3908</span><span class="err">a</span><span class="mi">0</span><span class="err">ad</span><span class="mi">895</span><span class="err">b</span><span class="mi">5846</span><span class="err">c</span><span class="mi">86</span><span class="err">fc</span><span class="mf">4e207</span><span class="err">cc</span><span class="mf">463820123e9</span><span class="err">a</span><span class="mi">299</span><span class="err">c</span><span class="mi">39</span><span class="err">f</span><span class="mi">3</span><span class="err">&#39;,</span>
</span></span><span class="line"><span class="cl"> <span class="err">&#39;height&#39;:</span> <span class="mi">201645</span><span class="err">,</span>
</span></span><span class="line"><span class="cl"> <span class="err">&#39;infused_challenge_vdf_output&#39;:</span> <span class="err">None,</span>
</span></span><span class="line"><span class="cl"> <span class="err">&#39;overflow&#39;:</span> <span class="err">True,</span>
</span></span><span class="line"><span class="cl"> <span class="err">&#39;pool_puzzle_hash&#39;:</span> <span class="err">&#39;</span><span class="mi">0</span><span class="err">x</span><span class="mi">4</span><span class="err">bc</span><span class="mi">6435</span><span class="err">b</span><span class="mi">409</span><span class="err">bcbabe</span><span class="mi">53870</span><span class="err">dae</span><span class="mi">0</span><span class="err">f</span><span class="mi">03755</span><span class="err">f</span><span class="mi">6</span><span class="err">aabb</span><span class="mi">4594</span><span class="err">c</span><span class="mi">5915</span><span class="err">ec</span><span class="mi">983</span><span class="err">acf</span><span class="mi">12</span><span class="err">a</span><span class="mi">5</span><span class="err">d</span><span class="mi">1</span><span class="err">fba&#39;,</span>
</span></span><span class="line"><span class="cl"> <span class="err">&#39;prev_hash&#39;:</span> <span class="err">&#39;</span><span class="mi">0</span><span class="err">xf</span><span class="mi">126</span><span class="err">ecf</span><span class="mi">64473</span><span class="err">beb</span><span class="mi">9</span><span class="err">ae</span><span class="mi">5</span><span class="err">b</span><span class="mi">84137788100</span><span class="err">feb</span><span class="mi">9</span><span class="err">d</span><span class="mi">731</span><span class="err">c</span><span class="mi">604877</span><span class="err">c</span><span class="mi">0744</span><span class="err">cdc</span><span class="mi">6025</span><span class="err">f</span><span class="mi">4</span><span class="err">cbeb&#39;,</span>
</span></span><span class="line"><span class="cl"> <span class="err">&#39;prev_transaction_block_hash&#39;:</span> <span class="err">&#39;</span><span class="mi">0</span><span class="err">x</span><span class="mi">7103</span><span class="err">fe</span><span class="mi">2</span><span class="err">f</span><span class="mi">1</span><span class="err">aa</span><span class="mi">96998</span><span class="err">f</span><span class="mi">9</span><span class="err">ccf</span><span class="mi">6</span><span class="err">fc</span><span class="mi">98561</span><span class="err">b</span><span class="mi">64</span><span class="err">c</span><span class="mi">5</span><span class="err">f</span><span class="mi">7</span><span class="err">a</span><span class="mi">98</span><span class="err">cf</span><span class="mi">942335</span><span class="err">c</span><span class="mi">4</span><span class="err">c</span><span class="mi">927</span><span class="err">fb</span><span class="mi">2</span><span class="err">eaa</span><span class="mi">9325</span><span class="err">a&#39;,</span>
</span></span><span class="line"><span class="cl"> <span class="err">&#39;prev_transaction_block_height&#39;:</span> <span class="mi">201643</span><span class="err">,</span>
</span></span><span class="line"><span class="cl"> <span class="err">&#39;required_iters&#39;:</span> <span class="mi">95752</span><span class="err">,</span>
</span></span><span class="line"><span class="cl"> <span class="err">&#39;reward_claims_incorporated&#39;:</span> <span class="p">[{</span><span class="err">&#39;amount&#39;:</span> <span class="err">1750000000000,</span>
</span></span><span class="line"><span class="cl">                                 <span class="err">&#39;parent_coin_info&#39;:</span> <span class="err">&#39;0xccd5bb71183532bff220ba46c268991a000000000000000000000000000313ab&#39;,</span>
</span></span><span class="line"><span class="cl">                                 <span class="err">&#39;puzzle_hash&#39;:</span> <span class="err">&#39;0xbbb014f41d88c74b78501b36e4863d3382bfda9ae3c4d30a1b6df72b962502b6&#39;</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">                                <span class="p">{</span><span class="err">&#39;amount&#39;:</span> <span class="err">250000000000,</span>
</span></span><span class="line"><span class="cl">                                 <span class="err">&#39;parent_coin_info&#39;:</span> <span class="err">&#39;0x3ff07eb358e8255a65c30a2dce0e5fbb000000000000000000000000000313ab&#39;,</span>
</span></span><span class="line"><span class="cl">                                 <span class="err">&#39;puzzle_hash&#39;:</span> <span class="err">&#39;0xbbb014f41d88c74b78501b36e4863d3382bfda9ae3c4d30a1b6df72b962502b6&#39;</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">                                <span class="p">{</span><span class="err">&#39;amount&#39;:</span> <span class="err">1750000000000,</span>
</span></span><span class="line"><span class="cl">                                 <span class="err">&#39;parent_coin_info&#39;:</span> <span class="err">&#39;0xccd5bb71183532bff220ba46c268991a000000000000000000000000000313aa&#39;,</span>
</span></span><span class="line"><span class="cl">                                 <span class="err">&#39;puzzle_hash&#39;:</span> <span class="err">&#39;0x4bc6435b409bcbabe53870dae0f03755f6aabb4594c5915ec983acf12a5d1fba&#39;</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">                                <span class="p">{</span><span class="err">&#39;amount&#39;:</span> <span class="err">250000000000,</span>
</span></span><span class="line"><span class="cl">                                 <span class="err">&#39;parent_coin_info&#39;:</span> <span class="err">&#39;0x3ff07eb358e8255a65c30a2dce0e5fbb000000000000000000000000000313a8&#39;,</span>
</span></span><span class="line"><span class="cl">                                 <span class="err">&#39;puzzle_hash&#39;:</span> <span class="err">&#39;0xcf178071f6aa6cb1c92f00943424bcc8cb774449bd60058fc08e9894f49a1ca4&#39;</span><span class="p">}]</span><span class="err">,</span>
</span></span><span class="line"><span class="cl"> <span class="err">&#39;reward_infusion_new_challenge&#39;:</span> <span class="err">&#39;</span><span class="mi">0</span><span class="err">x</span><span class="mi">660886</span><span class="err">f</span><span class="mi">4</span><span class="err">ab</span><span class="mi">030</span><span class="err">c</span><span class="mi">07755</span><span class="err">f</span><span class="mi">53362</span><span class="err">ae</span><span class="mi">4253</span><span class="err">dfa</span><span class="mi">93</span><span class="err">ea</span><span class="mi">853</span><span class="err">cbc</span><span class="mi">321218</span><span class="err">f</span><span class="mi">58</span><span class="err">f</span><span class="mi">159</span><span class="err">c</span><span class="mi">75</span><span class="err">adaa&#39;,</span>
</span></span><span class="line"><span class="cl"> <span class="err">&#39;signage_point_index&#39;:</span> <span class="mi">63</span><span class="err">,</span>
</span></span><span class="line"><span class="cl"> <span class="err">&#39;sub_epoch_summary_included&#39;:</span> <span class="err">None,</span>
</span></span><span class="line"><span class="cl"> <span class="err">&#39;sub_slot_iters&#39;:</span> <span class="mi">99614720</span><span class="err">,</span>
</span></span><span class="line"><span class="cl"> <span class="err">&#39;timestamp&#39;:</span> <span class="mi">1619662081</span><span class="err">,</span>
</span></span><span class="line"><span class="cl"> <span class="err">&#39;total_iters&#39;:</span> <span class="mi">660123219464</span><span class="err">,</span>
</span></span><span class="line"><span class="cl"> <span class="err">&#39;weight&#39;:</span> <span class="mi">4121254</span><span class="err">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>另外，我们取的这个表的定义如下。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="nf">block_records</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">header_hash</span><span class="w"> </span><span class="kt">text</span><span class="w"> </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="p">,</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">prev_hash</span><span class="w"> </span><span class="kt">text</span><span class="p">,</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">height</span><span class="w"> </span><span class="kt">bigint</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">block</span><span class="w"> </span><span class="kt">blob</span><span class="p">,</span><span class="w"> </span><span class="c1">#&lt;----
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">  </span><span class="n">sub_epoch_summary</span><span class="w"> </span><span class="kt">blob</span><span class="p">,</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">is_peak</span><span class="w"> </span><span class="kt">tinyint</span><span class="p">,</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">is_block</span><span class="w"> </span><span class="kt">tinyint</span><span class="p">)</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="coin-record-chainchia-币记录" class="headerLink">
    <a href="#coin-record-chainchia-%e5%b8%81%e8%ae%b0%e5%bd%95" class="header-mark"></a>2.4 Coin Record Chain，Chia 币记录</h3><p>类似的，我们可以获取一个 Coin 的记录，这里边，从表的定义可以看到，唯一二进制（不能直接从数据库查询中被人读懂）的字段就是是币值，不存在嵌套的结构，所以也并不需要封装的类才能看清楚里边的信息。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="nf">coin_record</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">coin_name</span><span class="w"> </span><span class="kt">text</span><span class="w"> </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">confirmed_index</span><span class="w"> </span><span class="kt">bigint</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">spent_index</span><span class="w"> </span><span class="kt">bigint</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">spent</span><span class="w"> </span><span class="kt">int</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">coinbase</span><span class="w"> </span><span class="kt">int</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">puzzle_hash</span><span class="w"> </span><span class="kt">text</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">coin_parent</span><span class="w"> </span><span class="kt">text</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">amount</span><span class="w"> </span><span class="kt">blob</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="kt">timestamp</span><span class="w"> </span><span class="kt">bigint</span><span class="p">)</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这里值得注意的信息主要是 <code>spent_index</code> 和 <code>confirmed_index</code>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">chia.util.ints</span> <span class="kn">import</span> <span class="n">uint64</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">chia_db_path</span> <span class="o">=</span> <span class="s2">&#34;/Users/weyl/.chia/mainnet/db/blockchain_v1_mainnet.sqlite&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">con</span> <span class="o">=</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">chia_db_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">cur</span> <span class="o">=</span> <span class="n">con</span><span class="o">.</span><span class="n">cursor</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">rows</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">cur</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s1">&#39;SELECT * FROM coin_record WHERE confirmed_index = 201645&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">coin_amount</span> <span class="o">=</span> <span class="n">uint64</span><span class="o">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="n">rows</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">7</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">201</span><span class="p">]:</span> <span class="n">rows</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">Out</span><span class="p">[</span><span class="mi">201</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="s1">&#39;cf35da0f595b49dde626d676b511ee62bce886f2216751aa51bb8ff851563d35&#39;</span><span class="p">,</span> <span class="c1"># coin_name</span>
</span></span><span class="line"><span class="cl"> <span class="mi">201645</span><span class="p">,</span> <span class="c1"># confirmed_index</span>
</span></span><span class="line"><span class="cl"> <span class="mi">0</span><span class="p">,</span> <span class="c1"># spent_index，这里没有spent，所以值无效</span>
</span></span><span class="line"><span class="cl"> <span class="mi">0</span><span class="p">,</span> <span class="c1"># spent，其实是 bool</span>
</span></span><span class="line"><span class="cl"> <span class="mi">1</span><span class="p">,</span> <span class="c1"># coinbase，bool</span>
</span></span><span class="line"><span class="cl"> <span class="s1">&#39;bbb014f41d88c74b78501b36e4863d3382bfda9ae3c4d30a1b6df72b962502b6&#39;</span><span class="p">,</span> <span class="c1"># puzzle_hash 对应到地址</span>
</span></span><span class="line"><span class="cl"> <span class="s1">&#39;ccd5bb71183532bff220ba46c268991a000000000000000000000000000313ab&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"> <span class="sa">b</span><span class="s1">&#39;</span><span class="se">\x00\x00\x01\x97</span><span class="s1">t </span><span class="se">\xdc\x00</span><span class="s1">&#39;</span><span class="p">,</span> <span class="c1"># uint64</span>
</span></span><span class="line"><span class="cl"> <span class="mi">1619662081</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="puzzles-address地址" class="headerLink">
    <a href="#puzzles-address%e5%9c%b0%e5%9d%80" class="header-mark"></a>2.5 Puzzles/ Address，地址</h3><p>我们可以把 Chia 中的 Puzzle 理解成为交易中的地址，为了方便使用，通常会把 Puzzle 的 hash 用<a href="https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki" target="_blank" rel="noopener noreferrer">bech32m</a> 转换成地址。</p>
<blockquote>
<p>Tips:</p>
<p>这里有一个在线双向转换的在线工具推荐一下: <a href="https://www.chiaexplorer.com/tools/address-puzzlehash-converter" target="_blank" rel="noopener noreferrer">https://www.chiaexplorer.com/tools/address-puzzlehash-converter</a></p>
</blockquote>
<h2 id="how-to-explore-chia-network-如何探索-chia-链" class="headerLink">
    <a href="#how-to-explore-chia-network-%e5%a6%82%e4%bd%95%e6%8e%a2%e7%b4%a2-chia-%e9%93%be" class="header-mark"></a>3 How to explore Chia Network? 如何探索 Chia 链</h2><p>随着我们之前分析的信息，自然地，我们可以把 Chia 区块链中的信息取出来，用图（Graph）来表示，这里的图并不是（Graphic）图形、图画的意思，是数学、图论中的图。</p>
<p>在图的语境下，最主要的两个元素就是顶点（Vertex）和边（Edge）。</p>
<p>顶点表示一个实体，而边表示实体之间的某种关系，这种关系可以是对等的（无方向的）也可以是有方向的。</p>
<p>这里我们可以把这里的信息抽象映射到如图的图模型里：</p>
<ul>
<li>Block 顶点</li>
<li>Coin 顶点</li>
<li>Puzzle 顶点</li>
<li>spends 边（Block 到 Coin）</li>
<li>confirms 边 （Block 到 Coin）</li>
<li>belongs_to 边（Coin 到 Puzzle）</li>
</ul>
<p><a class="lightgallery" href="/en/nebula-chia/Chia_Graph_schema.png" title="Chia_Graph_schema" data-thumbnail="/en/nebula-chia/Chia_Graph_schema.png">
        
    </a></p>
<p>这里，我们应用的图是一种叫做属性图的形式，除了点和边的关系之外。这两种实体（点、边）还有其他信息只和它们的一个实例相关，所以再定义为顶点、边就不是很适合，这些信息就作为点、边的属性（preperty）存在。</p>
<p>这种为了处理实体之间关联、涉及实体、关联的属性信息的，也就是&quot;属性图&quot;的存储信息的方式在计算机领域越来越流行，甚至有专门为此结构而原生开发的数据库——图数据库（Graph Database）。</p>
<p>这里，我们用的就是一个叫做 Nebula Graph 的图数据库，它是一个现代的、为超大规模分部署架构设计的、原生存储、查询、计算图数据的项目，更棒的是，它是产生于社区的开源产品。</p>
<blockquote>
<p>Tips:</p>
<p><strong>安装 Nebula Graph</strong></p>
<p>一般来说，面向超大规模数据的分布式系统，天然的都是不容易轻量部署的，大家如果第一次使用的话可以试试我写的一个叫做 nebula-up 的小工具，可以一行指令部署一个用来试用、学习的 Nebula Graph 集群，地址在这里： <a href="https://github.com/wey-gu/nebula-up/" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/nebula-up/</a> 。</p>
</blockquote>
<h3 id="import-the-chia-to-a-graph-database-nebula-graph-导入-chia-数据到图数据库" class="headerLink">
    <a href="#import-the-chia-to-a-graph-database-nebula-graph-%e5%af%bc%e5%85%a5-chia-%e6%95%b0%e6%8d%ae%e5%88%b0%e5%9b%be%e6%95%b0%e6%8d%ae%e5%ba%93" class="header-mark"></a>3.1 Import the Chia to a Graph Database, Nebula Graph 导入 Chia 数据到图数据库</h3><p>我们分两步走，第一步这把 Chia Network 数据转换成 CSV 文件，第二步使用 Nebula 的 <a href="https://github.com/vesoft-inc/nebula-importer/" target="_blank" rel="noopener noreferrer">Nebula-Importer</a> 把数据导入 Nebula Graph。</p>
<h4 id="data-conversion-数据转换" class="headerLink">
    <a href="#data-conversion-%e6%95%b0%e6%8d%ae%e8%bd%ac%e6%8d%a2" class="header-mark"></a>3.1.1 Data conversion 数据转换</h4><p>这部分的代码我开源在这里了:</p>
<p><a href="https://github.com/wey-gu/nebula-chia" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/nebula-chia</a></p>
<p>使用它只需要在 Chia Network 的 python venv 下安装它:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">python3 -m pip install nebula-chia
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后调用 <code>ChaiBatchConvertor</code> 就可以在当前目录下生成两个 CSV 文件。</p>
<p>这里边有一些可以配置的参数，具体可以参考代码 <code>nebulachia/convertor.py</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">nebulachia.convertor</span> <span class="kn">import</span> <span class="n">ChiaBatchConvertor</span>
</span></span><span class="line"><span class="cl"><span class="n">c</span> <span class="o">=</span> <span class="n">ChaiBatchConvertor</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">block_record_limit</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">coin_record_limit</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">write_batch_size</span><span class="o">=</span><span class="mi">10000</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">c</span><span class="o">.</span><span class="n">convert_block_record</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">c</span><span class="o">.</span><span class="n">convert_coin_record</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>生成的文件：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ls -lth
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">-rw-r--r--   <span class="m">1</span> weyl  staff   173M May <span class="m">19</span> 13:01 coin_record.csv
</span></span><span class="line"><span class="cl">-rw-r--r--   <span class="m">1</span> weyl  staff    77M May <span class="m">19</span> 12:59 block_record.csv
</span></span></code></pre></td></tr></table>
</div>
</div><p>这里边字段的含义和类型，可以参考代码中 <code>block_record_row</code> 和 <code>coin_record_row</code> 的 <code>__doc__</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">466</span><span class="p">]:</span> <span class="nb">print</span><span class="p">(</span><span class="n">c</span><span class="o">.</span><span class="n">coin_record_row</span><span class="o">.</span><span class="vm">__doc__</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">Parse</span> <span class="n">row</span> <span class="ow">and</span> <span class="k">return</span> <span class="n">a</span> <span class="n">CSV</span> <span class="n">block</span> <span class="n">coin</span> <span class="n">row</span> <span class="nb">list</span><span class="o">.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">CREATE</span> <span class="n">TABLE</span> <span class="n">coin_record</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">          <span class="n">coin_name</span> <span class="n">text</span> <span class="n">PRIMARY</span> <span class="n">KEY</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="n">confirmed_index</span> <span class="n">bigint</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="n">spent_index</span> <span class="n">bigint</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="n">spent</span> <span class="nb">int</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="n">coinbase</span> <span class="nb">int</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="n">puzzle_hash</span> <span class="n">text</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="n">coin_parent</span> <span class="n">text</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="n">amount</span> <span class="n">blob</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="n">timestamp</span> <span class="n">bigint</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">Coin</span> <span class="n">Record</span> <span class="n">CSV</span> <span class="n">Head</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="mi">0</span>         <span class="mi">1</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>          <span class="mi">2</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>      <span class="mi">3</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">coin_name</span><span class="o">|</span><span class="n">confirmed_index</span><span class="o">|</span><span class="n">spent_index</span><span class="o">|</span><span class="n">spent</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="mi">4</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>  <span class="mi">5</span>           <span class="mi">6</span>           <span class="mi">7</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">coinbase</span><span class="o">|</span><span class="n">puzzle_hash</span><span class="o">|</span><span class="n">coin_parent</span><span class="o">|</span><span class="n">amount</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="mi">8</span><span class="p">(</span><span class="n">timestamp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">timestamp</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="mi">9</span>              <span class="mi">10</span>
</span></span><span class="line"><span class="cl">            <span class="n">confirmed_hash</span><span class="o">|</span><span class="n">spent_hash</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">467</span><span class="p">]:</span> <span class="nb">print</span><span class="p">(</span><span class="n">c</span><span class="o">.</span><span class="n">block_record_row</span><span class="o">.</span><span class="vm">__doc__</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">Parse</span> <span class="n">row</span> <span class="ow">and</span> <span class="k">return</span> <span class="n">a</span> <span class="n">CSV</span> <span class="n">block</span> <span class="n">record</span> <span class="n">row</span> <span class="nb">list</span><span class="o">.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">CREATE</span> <span class="n">TABLE</span> <span class="n">block_records</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">          <span class="n">header_hash</span> <span class="n">text</span> <span class="n">PRIMARY</span> <span class="n">KEY</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="n">prev_hash</span> <span class="n">text</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="n">height</span> <span class="n">bigint</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="n">block</span> <span class="n">blob</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="n">sub_epoch_summary</span> <span class="n">blob</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="n">is_peak</span> <span class="n">tinyint</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="n">is_block</span> <span class="n">tinyint</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">Block</span> <span class="n">Record</span> <span class="n">CSV</span> <span class="n">Head</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="mi">0</span>           <span class="mi">1</span>         <span class="mi">2</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span> <span class="mi">3</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span> <span class="mi">4</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">header_hash</span><span class="o">|</span><span class="n">prev_hash</span><span class="o">|</span><span class="n">height</span><span class="o">|</span><span class="n">is_peak</span><span class="o">|</span><span class="n">is_block</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="mi">5</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">deficit</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="mi">6</span>
</span></span><span class="line"><span class="cl">            <span class="n">challenge_block_info_hash</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="mi">7</span>
</span></span><span class="line"><span class="cl">            <span class="n">farmer_puzzle_hash</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="mi">8</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">fees</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="mi">9</span>
</span></span><span class="line"><span class="cl">            <span class="n">prev_transaction_block_hash</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="mi">10</span>
</span></span><span class="line"><span class="cl">            <span class="n">prev_transaction_block_height</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="mi">11</span>             <span class="mi">12</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">required_iters</span><span class="o">|</span><span class="n">signage_point_index</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="mi">13</span><span class="p">(</span><span class="n">timestamp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">timestamp</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="data-import-数据导入" class="headerLink">
    <a href="#data-import-%e6%95%b0%e6%8d%ae%e5%af%bc%e5%85%a5" class="header-mark"></a>3.1.2 Data import 数据导入</h4><p>有了 CSV 文件，我们可以借助 <a href="https://github.com/vesoft-inc/nebula-importer/" target="_blank" rel="noopener noreferrer">Nebula-Importer</a> 导入数据到图数据库中。</p>
<p>这里，我们写好了 nebula-importer 的配置文件，其中包涵了如下信息:</p>
<ul>
<li>在 Nebula Graph 中创建需要的数据模型 Schema，这和我们前边做的图映射的信息是等价的</li>
<li>描述 CSV 文件之中的 Column 的数据到图模型（点，边，点或边的属性）映射关系</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 这里，我的 csv 文件和 配置文件都放在 /home/wei.gu/chia 之下</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 我使用 docker-compose 默认配置部署的 Nebula Graph,</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 它创建了叫 nebula-docker-compose_nebula-net 的 docker 网络</span>
</span></span><span class="line"><span class="cl">docker run --rm -ti <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --network<span class="o">=</span>nebula-docker-compose_nebula-net <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v /home/wei.gu/chia/nebula-chia.yaml:/root/nebula-chia.yaml <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v /home/wei.gu/chia:/root <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    vesoft/nebula-importer:v2 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --config /root/nebula-chia.yaml
</span></span></code></pre></td></tr></table>
</div>
</div><p>这里我展示一个导入的结果示例，我在单机部署的 Nebula Graph 里导入了我一两周之前取的全量 Chia Network 数据的结果。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">2021/05/19 09:55:09 <span class="o">[</span>INFO<span class="o">]</span> reader.go:180: Total lines of file<span class="o">(</span>/root/coin_record.csv<span class="o">)</span> is: 547557, error lines: <span class="m">0</span>
</span></span><span class="line"><span class="cl">2021/05/19 09:55:09 <span class="o">[</span>INFO<span class="o">]</span> statsmgr.go:61: Done<span class="o">(</span>/root/coin_record.csv<span class="o">)</span>: Time<span class="o">(</span>4385.88s<span class="o">)</span>, Finished<span class="o">(</span>4512927<span class="o">)</span>, Failed<span class="o">(</span>0<span class="o">)</span>, Latency AVG<span class="o">(</span>1305us<span class="o">)</span>, Batches Req AVG<span class="o">(</span>2015us<span class="o">)</span>, Rows AVG<span class="o">(</span>1028.42/s<span class="o">)</span>
</span></span><span class="line"><span class="cl">2021/05/19 09:55:10 --- END OF NEBULA IMPORTER ---
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="explore-the-chia-graph-探索-chia-的数据" class="headerLink">
    <a href="#explore-the-chia-graph-%e6%8e%a2%e7%b4%a2-chia-%e7%9a%84%e6%95%b0%e6%8d%ae" class="header-mark"></a>3.2 Explore the Chia Graph 探索 Chia 的数据</h3><h4 id="graph-db-queries" class="headerLink">
    <a href="#graph-db-queries" class="header-mark"></a>3.2.1 Graph DB Queries</h4><p>导入 Chia 链的网络到 Nebula Graph 之后，我们可以在里边快速查询数据之间的关联。</p>
<p>比如这个查询表示从区块 <code>524aa2013781ff4cd9d2b5dc...</code> 查起，经过三种边 <code>farmer_puzzle, spends, confirms</code> 双向遍历的结果。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">GO</span><span class="w"> </span><span class="mi">5</span><span class="w"> </span><span class="n">STEPS</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="s2">&#34;524aa2013781ff4cd9d2b5dce40647b670d722e2de25bd2e2b79970a8ec435ee&#34;</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="n">OVER</span><span class="w"> </span><span class="n">farmer_puzzle</span><span class="p">,</span><span class="n">spends</span><span class="p">,</span><span class="n">confirms</span><span class="w"> </span><span class="n">BIDIRECT</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">Got</span><span class="w"> </span><span class="mi">419437</span><span class="w"> </span><span class="k">rows</span><span class="w"> </span><span class="p">(</span><span class="n">time</span><span class="w"> </span><span class="n">spent</span><span class="w"> </span><span class="mi">735120</span><span class="o">/</span><span class="mi">1170946</span><span class="w"> </span><span class="n">us</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">Wed</span><span class="p">,</span><span class="w"> </span><span class="mi">19</span><span class="w"> </span><span class="n">May</span><span class="w"> </span><span class="mi">2021</span><span class="w"> </span><span class="mi">10</span><span class="p">:</span><span class="mi">11</span><span class="p">:</span><span class="mi">28</span><span class="w"> </span><span class="n">UTC</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>再比如，计算一个 Puzzle 地址上的余额（所有 coin 的总价值）比如这个puzzle <code>bbe39134ccc32c08fdeff...</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">GO</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="n">STEP</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="s2">&#34;bbe39134ccc32c08fdeff4d2c19d1d1f4f7e48cdaf79d37397bc3136ce9b3cb7&#34;</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="n">OVER</span><span class="w"> </span><span class="n">belongs_to</span><span class="w"> </span><span class="n">REVERSELY</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="n">YIELD</span><span class="w"> </span><span class="k">CASE</span><span class="w"> </span><span class="err">$$</span><span class="p">.</span><span class="n">coin</span><span class="p">.</span><span class="n">is_spent</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">         </span><span class="k">WHEN</span><span class="w"> </span><span class="k">true</span><span class="w"> </span><span class="k">THEN</span><span class="w"> </span><span class="err">$$</span><span class="p">.</span><span class="n">coin</span><span class="p">.</span><span class="n">amount</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">         </span><span class="k">WHEN</span><span class="w"> </span><span class="k">false</span><span class="w"> </span><span class="k">THEN</span><span class="w"> </span><span class="o">-</span><span class="err">$$</span><span class="p">.</span><span class="n">coin</span><span class="p">.</span><span class="n">amount</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">         </span><span class="k">END</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">Amount</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">YIELD</span><span class="w"> </span><span class="k">sum</span><span class="p">(</span><span class="err">$</span><span class="o">-</span><span class="p">.</span><span class="n">Amount</span><span class="p">)</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h4 id="the-visulized-way-with-nebula-studio" class="headerLink">
    <a href="#the-visulized-way-with-nebula-studio" class="header-mark"></a>3.2.2 The Visulized way with Nebula Studio</h4><p>Nebula Graph 为我们提供了图形化界面，有了它，我们可以用更符合人脑的方式地查看 Chia Network 中的数据。</p>
<p>比如，我们还是回到上边的那个区块，从这里查询。</p>
<p><a class="lightgallery" href="/en/nebula-chia/Visualized_block.png" title="Visualized_block" data-thumbnail="/en/nebula-chia/Visualized_block.png">
        
    </a></p>
<p>我们就获得了这个 block 类型的一个点/ vertex。我们可以从他开始进一步探索，先鼠标单击这个点，在拓展条件里把方向选择双向，默认的边类型是所有的边类型，这样我们就可以把所有 <code>步数</code>内相关联的数据一下子全都找出来。</p>
<p>选择好拓展条件之后，点击拓展就可以。</p>
<p><a class="lightgallery" href="/en/nebula-chia/Visualized_block_1.png" title="Visualized_block_1" data-thumbnail="/en/nebula-chia/Visualized_block_1.png">
        
    </a></p>
<p>这里，我们选择了步数为 <code>1</code>，点击拓展（或者双击要拓展的点），之后，我们可以快速双击其他的点继续拓展，这是我鼠标点了几次之后看到的样子：</p>
<p><a class="lightgallery" href="/en/nebula-chia/Visualized_block_2.png" title="Visualized_block_2" data-thumbnail="/en/nebula-chia/Visualized_block_2.png">
        
    </a></p>
<p>我们接下来再试试拓展的步数为 <code>2</code>，点击拓展（或者双击要拓展的点），看起来找到了有意思的信息。</p>
<p>我们看到了一个有很多边的黑色的点。</p>
<p><a class="lightgallery" href="/en/nebula-chia/Visualized_block_3.png" title="Visualized_block_3" data-thumbnail="/en/nebula-chia/Visualized_block_3.png">
        
    </a></p>
<p>通过查看这个点和我们开始查看的 block 之间的边，我们知道这个点正是 farm 这个 block 的地址，这个地址下边有非常多的 coin。</p>
<p><a class="lightgallery" href="/en/nebula-chia/Visualized_block_4.png" title="Visualized_block_3" data-thumbnail="/en/nebula-chia/Visualized_block_4.png">
        
    </a></p>
<p>这只是一个开始，有了这个导入到 Nebula Graph 图数据的基础，我们可以做很多有意思的分析和洞察，大家可以自己试试看，得到更有意思的结果分享给其他同学。</p>
<h2 id="summary-总结" class="headerLink">
    <a href="#summary-%e6%80%bb%e7%bb%93" class="header-mark"></a>4 Summary 总结</h2><p>这篇文章里，在我们简单介绍了 Chia Network 之后，我们首次的带大家一起从安装一个 Chia 终端，到分析终端同步到本地的 Chia 全网数据，借助于 Chia 终端开源的 Python 代码库，我们分析了全网数据里的重要信息。</p>
<p>之后，我们开源了一个小工具 Nebula-Chia，有了它，就可以把 Chia 的全网数据转换成 CSV 格式，这样，就可以借助 nebula-importer 把所有的数据导入到一个先进的图数据库（Nebula Graph）中。</p>
<p>Nebula Graph 的项目地址是 <a href="https://github.com/vesoft-inc/nebula-graph" target="_blank" rel="noopener noreferrer">https://github.com/vesoft-inc/nebula-graph</a></p>
<p>Nebula-Chia 我也开源在 <a href="https://github.com/wey-gu/nebula-chia" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/nebula-chia</a></p>
<p>在图数据库中，我们展示了做基本 Query 的例子和借助图数据库自带的可视化工具，我们可以轻易地获取 Chia 全网数据之间关联关系，有了这个作为基础，这些数据中洞察的潜力和可以尝试的有意思事情可以比较直观和高效地进一步探索了！</p>
<p>是不是很酷？</p>
<p><a class="lightgallery" href="/en/nebula-chia/Visualized_block_5.png" title="Visualized_block_5" data-thumbnail="/en/nebula-chia/Visualized_block_5.png">
        
    </a></p>
<h2 id="references" class="headerLink">
    <a href="#references" class="header-mark"></a>5 References</h2><ul>
<li><a href="https://www.chia.net/faq/" target="_blank" rel="noopener noreferrer">https://www.chia.net/faq/</a></li>
<li><a href="https://chialisp.com/docs/" target="_blank" rel="noopener noreferrer">https://chialisp.com/docs/</a></li>
<li><a href="https://www.chiaexplorer.com/chia-coins" target="_blank" rel="noopener noreferrer">https://www.chiaexplorer.com/chia-coins</a></li>
<li><a href="https://docs.google.com/document/d/1tmRIb7lgi4QfKkNaxuKOBHRmwbVlGL4f7EsBDr_5xZE" target="_blank" rel="noopener noreferrer">https://docs.google.com/document/d/1tmRIb7lgi4QfKkNaxuKOBHRmwbVlGL4f7EsBDr_5xZE</a></li>
<li><a href="https://github.com/sipa/bech32/tree/master/ref/python" target="_blank" rel="noopener noreferrer">https://github.com/sipa/bech32/tree/master/ref/python</a></li>
<li><a href="https://github.com/Chia-Network/chia-blockchain/blob/main/README.md" target="_blank" rel="noopener noreferrer">https://github.com/Chia-Network/chia-blockchain/blob/main/README.md</a></li>
<li><a href="https://www.chia.net/assets/ChiaGreenPaper.pdf" target="_blank" rel="noopener noreferrer">https://www.chia.net/assets/ChiaGreenPaper.pdf</a></li>
<li><a href="https://docs.nebula-graph.com.cn" target="_blank" rel="noopener noreferrer">https://docs.nebula-graph.com.cn</a></li>
</ul>
<blockquote>
<p>Banner Picture Credit: <a href="https://unsplash.com/photos/Ph5_4TnXXYE?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditShareLink" target="_blank" rel="noopener noreferrer">Icons8 Team</a></p>
</blockquote>]]></description>
</item><item>
    <title>Nebula Operator Kind, oneliner installer for Nebula K8s Operator Playground </title>
    <link>https://siwei.io/en/nebula-operator-kind/</link>
    <pubDate>Wed, 09 Jun 2021 19:27:00 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/en/nebula-operator-kind/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/en/nebula-operator-kind/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>Nebula-Kind, an one-liner command to try K8s Operator based Nebula Graph Cluster on your machine, with the help of KIND (K8s in Docker)</p>
</blockquote>
<h2 id="nebula-operator-kind" class="headerLink">
    <a href="#nebula-operator-kind" class="header-mark"></a>1 Nebula-Operator-Kind</h2><p>As a Cloud Native Distributed Database, Nebula Graph comes with an open-source <a href="https://github.com/vesoft-inc/nebula-operator" target="_blank" rel="noopener noreferrer">K8s Operator</a> to enable boostrap and maintain Nebula Graph Cluster from a K8s CRD.</p>
<p>Normally it takes you some time to setup all the dependencies and control plane resources of the Nebula Operator. If you are as lazy as I am, this Nebula-Operator-Kind is made for you to quick start and play with Nebula Graph in <a href="https://kind.sigs.K8s.io/" target="_blank" rel="noopener noreferrer">KIND</a>.</p>
<p>Nebula-Operator-Kind is the one-liner for setup everything for you including:</p>
<ul>
<li>Docker</li>
<li>K8s(KIND)</li>
<li>PV Provider</li>
<li>Nebula-Operator</li>
<li>Nebula-Console</li>
<li>nodePort for accessing the Cluster</li>
<li>Kubectl for playing with KIND and Nebula Operator</li>
</ul>
<h2 id="how-to-use" class="headerLink">
    <a href="#how-to-use" class="header-mark"></a>2 How To Use</h2><p>Install Nebula-Operator-Kind:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -sL nebula-kind.siwei.io/install.sh <span class="p">|</span> bash
</span></span></code></pre></td></tr></table>
</div>
</div><p>You will see this after it&rsquo;s done
<a class="lightgallery" href="/en/nebula-operator-kind/install_success.webp" title="install_success" data-thumbnail="/en/nebula-operator-kind/install_success.webp">
        
    </a></p>
<p>You can connect to the cluster via <code>~/.nebula-kind/bin/console</code> as below:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">~/.nebula-kind/bin/console -u user -p password --address<span class="o">=</span>127.0.0.1 --port<span class="o">=</span><span class="m">30000</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="more" class="headerLink">
    <a href="#more" class="header-mark"></a>3 More</h2><p>It&rsquo;s in GitHub with more information you may be intrested in ;-), please try and feedback there~
<a href="https://github.com/wey-gu/nebula-operator-kind" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/nebula-operator-kind</a></p>
<blockquote>
<p>Updated Sept. 2021</p>
</blockquote>
<p>Install on KubeSphere all-in-on cluster：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -sL nebula-kind.siwei.io/install-ks-1.sh <span class="p">|</span> bash
</span></span></code></pre></td></tr></table>
</div>
</div><p>Install on existing K8s cluster:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -sL nebula-kind.siwei.io/install-on-k8s.sh <span class="p">|</span> bash
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>Banner Picture Credit: <a href="https://unsplash.com/photos/a4Gz2DD4dX0" target="_blank" rel="noopener noreferrer">Maik Hankemann</a></p>
</blockquote>]]></description>
</item><item>
    <title>Nebula Exchange SST 2.x Hands-on Guide</title>
    <link>https://siwei.io/en/nebula-exchange-sst-2.x/</link>
    <pubDate>Wed, 18 Aug 2021 15:21:00 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/en/nebula-exchange-sst-2.x/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/en/nebula-exchange-sst-2.x/featured-image.webp" referrerpolicy="no-referrer">
            </div><p>这篇文章带大家以最小方式，快速趟一下 Nebula Exchange 中 SST 写入方式的步骤。</p>
<h2 id="什么是-nebula-exchange-" class="headerLink">
    <a href="#%e4%bb%80%e4%b9%88%e6%98%af-nebula-exchange-" class="header-mark"></a>1 什么是 Nebula Exchange ?</h2><p>之前我在 <a href="https://siwei.io/sketches/nebula-data-import-options/" target="_blank" rel="noopener noreferrer">Nebula Data Import Options</a> 之中介绍过，<a href="https://github.com/vesoft-inc/nebula-spark-utils/tree/master/nebula-exchange" target="_blank" rel="noopener noreferrer">Nebula Exchange</a> 是一个 Nebula Graph 社区开源的 Spark Applicaiton，它专门用来支持批量或者流式地把数据导入 Nebula Graph Database 之中。</p>
<p>Nebula Exchange 支持多种多样的数据源（从 Apache Parquet, ORC, JSON, CSV, HBase, Hive MaxCompute 到 Neo4j, MySQL, ClickHouse, 再有 Kafka, Pulsar，更多的数据源也在不断增加之中）。</p>
<p><a class="lightgallery" href="/en/nebula-exchange-sst-2.x/nebula-exchange-digram.webp" title="nebula-exchange-digram" data-thumbnail="/en/nebula-exchange-sst-2.x/nebula-exchange-digram.webp">
        
    </a></p>
<p>如上图所示，在 Exchange 内部，从除了不同 Reader 可以读取不同数据源之外，在数据经过 Processor 处理之后通过 Writer写入（sink） Nebula Graph 图数据库的时候，除了走正常的 ServerBaseWriter 的写入流程之外，它还可以绕过整个写入流程，利用 Spark 的计算能力并行生成底层 RocksDB 的 SST 文件，从而实现超高性能的数据导入，这个 SST 文件导入的场景就是本文带大家上手熟悉的部分。</p>
<blockquote>
<p>详细信息请参阅：<a href="https://docs.nebula-graph.com.cn/master/nebula-exchange/about-exchange/ex-ug-what-is-exchange/" target="_blank" rel="noopener noreferrer">Nebula Graph 手册:什么是 Nebula Exchange</a></p>
<p><a href="https://nebula-graph.com.cn/posts/" target="_blank" rel="noopener noreferrer">Nebula Graph 官方博客</a>也有更多 Nebula Exchange 的实践文章</p>
</blockquote>
<h2 id="步骤概观" class="headerLink">
    <a href="#%e6%ad%a5%e9%aa%a4%e6%a6%82%e8%a7%82" class="header-mark"></a>2 步骤概观</h2><ul>
<li><a href="#%e5%ae%9e%e9%aa%8c%e7%8e%af%e5%a2%83%e5%87%86%e5%a4%87" rel="">实验环境</a></li>
<li><a href="#%e9%85%8d%e7%bd%aeExchange" rel="">配置 Exchange</a></li>
<li><a href="#%e7%94%9f%e6%88%90SST%e6%96%87%e4%bb%b6" rel="">生成 SST 文件</a></li>
<li><a href="#%e5%86%99%e5%85%a5SST%e6%96%87%e4%bb%b6%e5%88%b0NebulaGraph" rel="">写入 SST 文件到 Nebula Graph</a></li>
</ul>
<h2 id="实验环境准备" class="headerLink">
    <a href="#%e5%ae%9e%e9%aa%8c%e7%8e%af%e5%a2%83%e5%87%86%e5%a4%87" class="header-mark"></a>3 实验环境准备</h2><p>为了最小化使用 Nebula Exchange 的 SST 功能，我们需要：</p>
<ul>
<li>搭建一个 Nebula Graph 集群，创建导入数据的 Schema，我们选择使用 Docker-Compose 方式、利用 <a href="https://github.com/wey-gu/nebula-up/" target="_blank" rel="noopener noreferrer">Nebula-Up</a> 快速部署，并简单修改其网络，以方便同样容器化的 Exchange 程序对其访问。</li>
<li>搭建容器化的 Spark 运行环境</li>
<li>搭建容器化的 HDFS</li>
</ul>
<h3 id="搭建-nebula-graph-集群" class="headerLink">
    <a href="#%e6%90%ad%e5%bb%ba-nebula-graph-%e9%9b%86%e7%be%a4" class="header-mark"></a>3.1 搭建 Nebula Graph 集群</h3><p>借助于 <a href="https://github.com/wey-gu/nebula-up/" target="_blank" rel="noopener noreferrer">Nebula-Up</a> 我们可以在 Linux 环境下一键部署一套 Nebula Graph 集群：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -fsSL nebula-up.siwei.io/install.sh <span class="p">|</span> bash
</span></span></code></pre></td></tr></table>
</div>
</div><p><a class="lightgallery" href="https://github.com/wey-gu/nebula-up/raw/main/images/nebula-up-demo-shell.png" title="nebula-up" data-thumbnail="https://github.com/wey-gu/nebula-up/raw/main/images/nebula-up-demo-shell.png">
        
    </a></p>
<p>待部署成功之后，我们需要对环境做一些修改，这里我做的修改其实就是两点：</p>
<ol>
<li>只保留一个 metaD 服务</li>
<li>起用 Docker 的外部网络</li>
</ol>
<p>详细修改的部分参考<a href="#%e9%99%84%e5%bd%95%e4%b8%80" rel="">附录一</a></p>
<p>应用 docker-compose 的修改：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> ~/.nebula-up/nebula-docker-compose
</span></span><span class="line"><span class="cl">vim docker-compose.yaml <span class="c1"># 参考附录一</span>
</span></span><span class="line"><span class="cl">docker network create nebula-net <span class="c1"># 需要创建外部网络</span>
</span></span><span class="line"><span class="cl">docker-compose up -d --remove-orphans
</span></span></code></pre></td></tr></table>
</div>
</div><p>之后，我们来创建要测试的图空间，并创建图的 Schema，为此，我们可以利用 nebula-console ，同样，Nebula-Up 里自带了容器化的 nebula-console。</p>
<ul>
<li>进入 Nebula-Console 所在的容器</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">~/.nebula-up/console.sh
</span></span><span class="line"><span class="cl">/ <span class="c1">#</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>在 console 容器里发起链接到图数据库，其中 <code>192.168.x.y</code> 是我所在的 Linux VM 的第一个网卡地址，请换成您的</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">/ # nebula-console -addr 192.168.x.y -port 9669 -user root -p password
</span></span><span class="line"><span class="cl">[INFO] connection pool is initialized successfully
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Welcome to Nebula Graph!
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>创建图空间（我们起名字叫 <code>sst</code> ），以及 schema</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">create</span><span class="w"> </span><span class="k">space</span><span class="w"> </span><span class="n">sst</span><span class="p">(</span><span class="n">partition_num</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span><span class="n">replica_factor</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">vid_type</span><span class="o">=</span><span class="n">fixed_string</span><span class="p">(</span><span class="mi">32</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">:</span><span class="n">sleep</span><span class="w"> </span><span class="mi">20</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">use</span><span class="w"> </span><span class="n">sst</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">create</span><span class="w"> </span><span class="n">tag</span><span class="w"> </span><span class="n">player</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="n">string</span><span class="p">,</span><span class="w"> </span><span class="n">age</span><span class="w"> </span><span class="nb">int</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>示例输出</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="p">(</span><span class="n">root</span><span class="o">@</span><span class="n">nebula</span><span class="p">)</span><span class="w"> </span><span class="p">[(</span><span class="k">none</span><span class="p">)]</span><span class="o">&gt;</span><span class="w"> </span><span class="k">create</span><span class="w"> </span><span class="k">space</span><span class="w"> </span><span class="n">sst</span><span class="p">(</span><span class="n">partition_num</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span><span class="n">replica_factor</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">vid_type</span><span class="o">=</span><span class="n">fixed_string</span><span class="p">(</span><span class="mi">32</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">Execution</span><span class="w"> </span><span class="n">succeeded</span><span class="w"> </span><span class="p">(</span><span class="n">time</span><span class="w"> </span><span class="n">spent</span><span class="w"> </span><span class="mi">1468</span><span class="o">/</span><span class="mi">1918</span><span class="w"> </span><span class="n">us</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="n">root</span><span class="o">@</span><span class="n">nebula</span><span class="p">)</span><span class="w"> </span><span class="p">[(</span><span class="k">none</span><span class="p">)]</span><span class="o">&gt;</span><span class="w"> </span><span class="p">:</span><span class="n">sleep</span><span class="w"> </span><span class="mi">20</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="n">root</span><span class="o">@</span><span class="n">nebula</span><span class="p">)</span><span class="w"> </span><span class="p">[(</span><span class="k">none</span><span class="p">)]</span><span class="o">&gt;</span><span class="w"> </span><span class="n">use</span><span class="w"> </span><span class="n">sst</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">Execution</span><span class="w"> </span><span class="n">succeeded</span><span class="w"> </span><span class="p">(</span><span class="n">time</span><span class="w"> </span><span class="n">spent</span><span class="w"> </span><span class="mi">1253</span><span class="o">/</span><span class="mi">1566</span><span class="w"> </span><span class="n">us</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">Wed</span><span class="p">,</span><span class="w"> </span><span class="mi">18</span><span class="w"> </span><span class="n">Aug</span><span class="w"> </span><span class="mi">2021</span><span class="w"> </span><span class="mi">08</span><span class="p">:</span><span class="mi">18</span><span class="p">:</span><span class="mi">13</span><span class="w"> </span><span class="n">UTC</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="n">root</span><span class="o">@</span><span class="n">nebula</span><span class="p">)</span><span class="w"> </span><span class="p">[</span><span class="n">sst</span><span class="p">]</span><span class="o">&gt;</span><span class="w"> </span><span class="k">create</span><span class="w"> </span><span class="n">tag</span><span class="w"> </span><span class="n">player</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="n">string</span><span class="p">,</span><span class="w"> </span><span class="n">age</span><span class="w"> </span><span class="nb">int</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">Execution</span><span class="w"> </span><span class="n">succeeded</span><span class="w"> </span><span class="p">(</span><span class="n">time</span><span class="w"> </span><span class="n">spent</span><span class="w"> </span><span class="mi">1312</span><span class="o">/</span><span class="mi">1735</span><span class="w"> </span><span class="n">us</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">Wed</span><span class="p">,</span><span class="w"> </span><span class="mi">18</span><span class="w"> </span><span class="n">Aug</span><span class="w"> </span><span class="mi">2021</span><span class="w"> </span><span class="mi">08</span><span class="p">:</span><span class="mi">18</span><span class="p">:</span><span class="mi">23</span><span class="w"> </span><span class="n">UTC</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="搭建容器化的-spark-环境" class="headerLink">
    <a href="#%e6%90%ad%e5%bb%ba%e5%ae%b9%e5%99%a8%e5%8c%96%e7%9a%84-spark-%e7%8e%af%e5%a2%83" class="header-mark"></a>3.2 搭建容器化的 Spark 环境</h3><p>利用 big data europe 做的工作，这个过程非常容易。</p>
<p>值得注意的是：</p>
<ul>
<li>现在的 Nebula Exchange 对 Spark 的版本有要求，在现在的 2021 年 8 月，我是用了 spark-2.4.5-hadoop-2.7 的版本。</li>
<li>为了方便，我让 Spark 运行在 Nebula Graph 相同的机器上，并且指定了运行在同一个 Docker 网络下</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run --name spark-master --network nebula-net <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -h spark-master -e <span class="nv">ENABLE_INIT_DAEMON</span><span class="o">=</span><span class="nb">false</span> -d <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    bde2020/spark-master:2.4.5-hadoop2.7
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后，我们就可以进入到环境中了：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker <span class="nb">exec</span> -it spark-master bash
</span></span></code></pre></td></tr></table>
</div>
</div><p>进到 Spark 容器中之后，可以像这样安装 maven:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">MAVEN_VERSION</span><span class="o">=</span>3.5.4
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">MAVEN_HOME</span><span class="o">=</span>/usr/lib/mvn
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">PATH</span><span class="o">=</span><span class="nv">$MAVEN_HOME</span>/bin:<span class="nv">$PATH</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">wget http://archive.apache.org/dist/maven/maven-3/<span class="nv">$MAVEN_VERSION</span>/binaries/apache-maven-<span class="nv">$MAVEN_VERSION</span>-bin.tar.gz <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  tar -zxvf apache-maven-<span class="nv">$MAVEN_VERSION</span>-bin.tar.gz <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  rm apache-maven-<span class="nv">$MAVEN_VERSION</span>-bin.tar.gz <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  mv apache-maven-<span class="nv">$MAVEN_VERSION</span> /usr/lib/mvn
</span></span></code></pre></td></tr></table>
</div>
</div><p>还可以这样在容器里下载 nebula-exchange 的 <code>jar</code> 包：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> ~
</span></span><span class="line"><span class="cl">wget https://repo1.maven.org/maven2/com/vesoft/nebula-exchange/2.1.0/nebula-exchange-2.1.0.jar
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="搭建容器化的-hdfs" class="headerLink">
    <a href="#%e6%90%ad%e5%bb%ba%e5%ae%b9%e5%99%a8%e5%8c%96%e7%9a%84-hdfs" class="header-mark"></a>3.3 搭建容器化的 HDFS</h3><p>同样借助 big-data-euroupe 的工作，这非常简单，不过我们要做一点修改，让它的 <code>docker-compose.yml</code> 文件里使用 <code>nebula-net</code> 这个之前创建的 Docker 网络。</p>
<p>详细修改的部分参考<a href="#%e9%99%84%e5%bd%95%e4%ba%8c" rel="">附录二</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone https://github.com/big-data-europe/docker-hadoop.git
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> docker-hadoop
</span></span><span class="line"><span class="cl">vim docker-compose.yml
</span></span><span class="line"><span class="cl">docker-compose up -d
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="配置exchange" class="headerLink">
    <a href="#%e9%85%8d%e7%bd%aeexchange" class="header-mark"></a>4 配置Exchange</h2><p>这个配置主要填入的信息就是 Nebula Graph 集群本身和将要写入数据的 Space Name，以及数据源相关的配置（这里我们用 <code>csv</code> 作为例子），最后再配置输出（sink）为 <code>sst</code></p>
<ul>
<li>Nebula Graph
<ul>
<li>GraphD 地址</li>
<li>MetaD 地址</li>
<li>credential</li>
<li>Space Name</li>
</ul>
</li>
<li>数据源
<ul>
<li><code>source: csv</code>
<ul>
<li><code>path</code></li>
<li><code>fields</code> etc.</li>
</ul>
</li>
<li><code>ink: sst</code></li>
</ul>
</li>
</ul>
<p>详细的配置参考<a href="#%e9%99%84%e5%bd%95%e4%ba%8c" rel="">附录二</a></p>
<p>注意，这里 metaD 的地址可以这样获取，可以看到 <code>0.0.0.0:49377-&gt;9559</code> 表示 <code>49377</code> 是外部的地址。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker ps <span class="p">|</span> grep meta
</span></span><span class="line"><span class="cl">887740c15750   vesoft/nebula-metad:v2.0.0                               <span class="s2">&#34;./bin/nebula-metad …&#34;</span>   <span class="m">6</span> hours ago    Up <span class="m">6</span> hours <span class="o">(</span>healthy<span class="o">)</span>    9560/tcp, 0.0.0.0:49377-&gt;9559/tcp, :::49377-&gt;9559/tcp, 0.0.0.0:49376-&gt;19559/tcp, :::49376-&gt;19559/tcp, 0.0.0.0:49375-&gt;19560/tcp, :::49375-&gt;19560/tcp                  nebula-docker-compose_metad0_1
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="生成sst文件" class="headerLink">
    <a href="#%e7%94%9f%e6%88%90sst%e6%96%87%e4%bb%b6" class="header-mark"></a>5 生成SST文件</h2><h3 id="准备源文件配置文件" class="headerLink">
    <a href="#%e5%87%86%e5%a4%87%e6%ba%90%e6%96%87%e4%bb%b6%e9%85%8d%e7%bd%ae%e6%96%87%e4%bb%b6" class="header-mark"></a>5.1 准备源文件、配置文件</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker cp exchange-sst.conf spark-master:/root/
</span></span><span class="line"><span class="cl">docker cp player.csv spark-master:/root/
</span></span></code></pre></td></tr></table>
</div>
</div><p>其中 <code>player.csv</code> 的例子：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">1100,Tim Duncan,42
</span></span><span class="line"><span class="cl">1101,Tony Parker,36
</span></span><span class="line"><span class="cl">1102,LaMarcus Aldridge,33
</span></span><span class="line"><span class="cl">1103,Rudy Gay,32
</span></span><span class="line"><span class="cl">1104,Marco Belinelli,32
</span></span><span class="line"><span class="cl">1105,Danny Green,31
</span></span><span class="line"><span class="cl">1106,Kyle Anderson,25
</span></span><span class="line"><span class="cl">1107,Aron Baynes,32
</span></span><span class="line"><span class="cl">1108,Boris Diaw,36
</span></span><span class="line"><span class="cl">1109,Tiago Splitter,34
</span></span><span class="line"><span class="cl">1110,Cory Joseph,27
</span></span><span class="line"><span class="cl">1111,David West,38
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="执行-exchange-程序" class="headerLink">
    <a href="#%e6%89%a7%e8%a1%8c-exchange-%e7%a8%8b%e5%ba%8f" class="header-mark"></a>5.2 执行 exchange 程序</h3><p>进入 <code>spark-master</code> 容器，提交执行 <code>exchange</code> 应用。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker <span class="nb">exec</span> -it spark-master bash
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> /root/
</span></span><span class="line"><span class="cl">/spark/bin/spark-submit --master <span class="nb">local</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --class com.vesoft.nebula.exchange.Exchange nebula-exchange-2.1.0.jar<span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -c exchange-sst.conf
</span></span></code></pre></td></tr></table>
</div>
</div><p>检查执行结果：</p>
<p><code>spark-submit</code> 输出：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">21/08/17 03:37:43 INFO TaskSetManager: Finished task 31.0 in stage 2.0 <span class="o">(</span>TID 33<span class="o">)</span> in <span class="m">1093</span> ms on localhost <span class="o">(</span>executor driver<span class="o">)</span> <span class="o">(</span>32/32<span class="o">)</span>
</span></span><span class="line"><span class="cl">21/08/17 03:37:43 INFO TaskSchedulerImpl: Removed TaskSet 2.0, whose tasks have all completed, from pool
</span></span><span class="line"><span class="cl">21/08/17 03:37:43 INFO DAGScheduler: ResultStage <span class="m">2</span> <span class="o">(</span>foreachPartition at VerticesProcessor.scala:179<span class="o">)</span> finished in 22.336 s
</span></span><span class="line"><span class="cl">21/08/17 03:37:43 INFO DAGScheduler: Job <span class="m">1</span> finished: foreachPartition at VerticesProcessor.scala:179, took 22.500639 s
</span></span><span class="line"><span class="cl">21/08/17 03:37:43 INFO Exchange$: SST-Import: failure.player: <span class="m">0</span>
</span></span><span class="line"><span class="cl">21/08/17 03:37:43 WARN Exchange$: Edge is not defined
</span></span><span class="line"><span class="cl">21/08/17 03:37:43 INFO SparkUI: Stopped Spark web UI at http://spark-master:4040
</span></span><span class="line"><span class="cl">21/08/17 03:37:43 INFO MapOutputTrackerMasterEndpoint: MapOutputTrackerMasterEndpoint stopped!
</span></span></code></pre></td></tr></table>
</div>
</div><p>验证 HDFS 上生成的 SST 文件：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker <span class="nb">exec</span> -it namenode /bin/bash
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">root@2db58903fb53:/# hdfs dfs -ls /sst
</span></span><span class="line"><span class="cl">Found <span class="m">10</span> items
</span></span><span class="line"><span class="cl">drwxr-xr-x   - root supergroup          <span class="m">0</span> 2021-08-17 03:37 /sst/1
</span></span><span class="line"><span class="cl">drwxr-xr-x   - root supergroup          <span class="m">0</span> 2021-08-17 03:37 /sst/10
</span></span><span class="line"><span class="cl">drwxr-xr-x   - root supergroup          <span class="m">0</span> 2021-08-17 03:37 /sst/2
</span></span><span class="line"><span class="cl">drwxr-xr-x   - root supergroup          <span class="m">0</span> 2021-08-17 03:37 /sst/3
</span></span><span class="line"><span class="cl">drwxr-xr-x   - root supergroup          <span class="m">0</span> 2021-08-17 03:37 /sst/4
</span></span><span class="line"><span class="cl">drwxr-xr-x   - root supergroup          <span class="m">0</span> 2021-08-17 03:37 /sst/5
</span></span><span class="line"><span class="cl">drwxr-xr-x   - root supergroup          <span class="m">0</span> 2021-08-17 03:37 /sst/6
</span></span><span class="line"><span class="cl">drwxr-xr-x   - root supergroup          <span class="m">0</span> 2021-08-17 03:37 /sst/7
</span></span><span class="line"><span class="cl">drwxr-xr-x   - root supergroup          <span class="m">0</span> 2021-08-17 03:37 /sst/8
</span></span><span class="line"><span class="cl">drwxr-xr-x   - root supergroup          <span class="m">0</span> 2021-08-17 03:37 /sst/9
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="写入sst到nebulagraph" class="headerLink">
    <a href="#%e5%86%99%e5%85%a5sst%e5%88%b0nebulagraph" class="header-mark"></a>6 写入SST到NebulaGraph</h2><p>这里的操作实际上都是参考文档：<a href="https://docs.nebula-graph.com.cn/master/nebula-exchange/use-exchange/ex-ug-import-from-sst/" target="_blank" rel="noopener noreferrer">SST 导入</a>，得来。其中就是从 console 之中执行了两步操作：</p>
<ul>
<li>Download</li>
<li>Ingest</li>
</ul>
<p>其中 Download 实际上是触发 Nebula Graph 从服务端发起 HDFS Client 的 download，获取 HDFS 上的 SST 文件，然后放到 storageD 能访问的本地路径下，这里，需要我们在服务端部署 HDFS 的依赖。因为我们是最小实践，我就偷懒手动做了这个 Download 的操作。</p>
<h3 id="手动下载" class="headerLink">
    <a href="#%e6%89%8b%e5%8a%a8%e4%b8%8b%e8%bd%bd" class="header-mark"></a>6.1 手动下载</h3><p>这里边手动下载我们就要知道 Nebula Graph 服务端下载的路径，实际上是 <code>/data/storage/nebula/&lt;space_id&gt;/download/</code>，这里的 Space ID 需要手动获取一下：</p>
<p>这个例子里，我们的 Space Name 是 <code>sst</code>，而 Space ID 是 <code>49</code>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="p">(</span><span class="n">root</span><span class="o">@</span><span class="n">nebula</span><span class="p">)</span><span class="w"> </span><span class="p">[</span><span class="n">sst</span><span class="p">]</span><span class="o">&gt;</span><span class="w"> </span><span class="k">DESC</span><span class="w"> </span><span class="k">space</span><span class="w"> </span><span class="n">sst</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">----+-------+------------------+----------------+---------+------------+--------------------+-------------+-----------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="n">ID</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Name</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="n">Partition</span><span class="w"> </span><span class="nb">Number</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Replica</span><span class="w"> </span><span class="n">Factor</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Charset</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="k">Collate</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="n">Vid</span><span class="w"> </span><span class="k">Type</span><span class="w">           </span><span class="o">|</span><span class="w"> </span><span class="k">Atomic</span><span class="w"> </span><span class="n">Edge</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="k">Group</span><span class="w">     </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">----+-------+------------------+----------------+---------+------------+--------------------+-------------+-----------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="mi">49</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;sst&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="mi">10</span><span class="w">               </span><span class="o">|</span><span class="w"> </span><span class="mi">1</span><span class="w">              </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;utf8&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;utf8_bin&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;FIXED_STRING(32)&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;false&#34;</span><span class="w">     </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;default&#34;</span><span class="w"> </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">----+-------+------------------+----------------+---------+------------+--------------------+-------------+-----------+
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>于是，下边的操作就是手动把 SST 文件从 HDFS 之中 <code>get</code> 下来，再拷贝到 storageD 之中。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker <span class="nb">exec</span> -it namenode /bin/bash
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ hdfs dfs -get /sst /sst
</span></span><span class="line"><span class="cl"><span class="nb">exit</span>
</span></span><span class="line"><span class="cl">docker cp namenode:/sst .
</span></span><span class="line"><span class="cl">docker <span class="nb">exec</span> -it nebula-docker-compose_storaged0_1 mkdir -p /data/storage/nebula/49/download/
</span></span><span class="line"><span class="cl">docker <span class="nb">exec</span> -it nebula-docker-compose_storaged1_1 mkdir -p /data/storage/nebula/49/download/
</span></span><span class="line"><span class="cl">docker <span class="nb">exec</span> -it nebula-docker-compose_storaged2_1 mkdir -p /data/storage/nebula/49/download/
</span></span><span class="line"><span class="cl">docker cp sst nebula-docker-compose_storaged0_1:/data/storage/nebula/49/download/
</span></span><span class="line"><span class="cl">docker cp sst nebula-docker-compose_storaged1_1:/data/storage/nebula/49/download/
</span></span><span class="line"><span class="cl">docker cp sst nebula-docker-compose_storaged2_1:/data/storage/nebula/49/download/
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="sst-文件导入" class="headerLink">
    <a href="#sst-%e6%96%87%e4%bb%b6%e5%af%bc%e5%85%a5" class="header-mark"></a>6.2 SST 文件导入</h3><ul>
<li>进入 Nebula-Console 所在的容器</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">~/.nebula-up/console.sh
</span></span><span class="line"><span class="cl">/ <span class="c1">#</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>在 console 容器里发起链接到图数据库，其中 <code>192.168.x.y</code> 是我所在的 Linux VM 的第一个网卡地址，请换成您的</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">/ # nebula-console -addr 192.168.x.y -port 9669 -user root -p password
</span></span><span class="line"><span class="cl">[INFO] connection pool is initialized successfully
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Welcome to Nebula Graph!
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>执行 <code>INGEST</code> 开始让 StorageD 读取 SST 文件</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>root@nebula<span class="o">)</span> <span class="o">[(</span>none<span class="o">)]</span>&gt; use sst
</span></span><span class="line"><span class="cl"><span class="o">(</span>root@nebula<span class="o">)</span> <span class="o">[</span>sst<span class="o">]</span>&gt; INGEST<span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>我们可以用如下方法实时查看 Nebula Graph 服务端的日志</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">tail -f ~/.nebula-up/nebula-docker-compose/logs/*/*
</span></span></code></pre></td></tr></table>
</div>
</div><p>成功的 INGEST 日志：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">I0817 08:03:28.611877   <span class="m">169</span> EventListner.h:96<span class="o">]</span> Ingest external SST file: column family default, the external file path /data/storage/nebula/49/download/8/8-6.sst, the internal file path /data/storage/nebula/49/data/000023.sst, the properties of the table: <span class="c1"># data blocks=1; # entries=1; # deletions=0; # merge operands=0; # range deletions=0; raw key size=48; raw average key size=48.000000; raw value size=40; raw average value size=40.000000; data block size=75; index block size (user-key? 0, delta-value? 0)=66; filter block size=0; (estimated) table size=141; filter policy name=N/A; prefix extractor name=nullptr; column family ID=N/A; column family name=N/A; comparator name=leveldb.BytewiseComparator; merge operator name=nullptr; property collectors names=[]; SST file compression algo=Snappy; SST file compression options=window_bits=-14; level=32767; strategy=0; max_dict_bytes=0; zstd_max_train_bytes=0; enabled=0; ; creation time=0; time stamp of earliest key=0; file creation time=0;</span>
</span></span><span class="line"><span class="cl">E0817 08:03:28.611912   <span class="m">169</span> StorageHttpIngestHandler.cpp:63<span class="o">]</span> SSTFile ingest successfully
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>题图版权：<a href="https://unsplash.com/photos/n6B49lTx7NM" target="_blank" rel="noopener noreferrer">Pietro Jeng</a></p>
</blockquote>
<h2 id="附录" class="headerLink">
    <a href="#%e9%99%84%e5%bd%95" class="header-mark"></a>7 附录</h2><h3 id="附录一" class="headerLink">
    <a href="#%e9%99%84%e5%bd%95%e4%b8%80" class="header-mark"></a>7.1 附录一</h3><p><code>docker-compose.yaml</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span><span class="lnt">150
</span><span class="lnt">151
</span><span class="lnt">152
</span><span class="lnt">153
</span><span class="lnt">154
</span><span class="lnt">155
</span><span class="lnt">156
</span><span class="lnt">157
</span><span class="lnt">158
</span><span class="lnt">159
</span><span class="lnt">160
</span><span class="lnt">161
</span><span class="lnt">162
</span><span class="lnt">163
</span><span class="lnt">164
</span><span class="lnt">165
</span><span class="lnt">166
</span><span class="lnt">167
</span><span class="lnt">168
</span><span class="lnt">169
</span><span class="lnt">170
</span><span class="lnt">171
</span><span class="lnt">172
</span><span class="lnt">173
</span><span class="lnt">174
</span><span class="lnt">175
</span><span class="lnt">176
</span><span class="lnt">177
</span><span class="lnt">178
</span><span class="lnt">179
</span><span class="lnt">180
</span><span class="lnt">181
</span><span class="lnt">182
</span><span class="lnt">183
</span><span class="lnt">184
</span><span class="lnt">185
</span><span class="lnt">186
</span><span class="lnt">187
</span><span class="lnt">188
</span><span class="lnt">189
</span><span class="lnt">190
</span><span class="lnt">191
</span><span class="lnt">192
</span><span class="lnt">193
</span><span class="lnt">194
</span><span class="lnt">195
</span><span class="lnt">196
</span><span class="lnt">197
</span><span class="lnt">198
</span><span class="lnt">199
</span><span class="lnt">200
</span><span class="lnt">201
</span><span class="lnt">202
</span><span class="lnt">203
</span><span class="lnt">204
</span><span class="lnt">205
</span><span class="lnt">206
</span><span class="lnt">207
</span><span class="lnt">208
</span><span class="lnt">209
</span><span class="lnt">210
</span><span class="lnt">211
</span><span class="lnt">212
</span><span class="lnt">213
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl"><span class="gh">diff --git a/docker-compose.yaml b/docker-compose.yaml
</span></span></span><span class="line"><span class="cl"><span class="gh">index 48854de..cfeaedb 100644
</span></span></span><span class="line"><span class="cl"><span class="gh"></span><span class="gd">--- a/docker-compose.yaml
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+++ b/docker-compose.yaml
</span></span></span><span class="line"><span class="cl"><span class="gi"></span><span class="gu">@@ -6,11 +6,13 @@ services:
</span></span></span><span class="line"><span class="cl"><span class="gu"></span>       USER: root
</span></span><span class="line"><span class="cl">       TZ:   &#34;${TZ}&#34;
</span></span><span class="line"><span class="cl">     command:
</span></span><span class="line"><span class="cl"><span class="gd">-      - --meta_server_addrs=metad0:9559,metad1:9559,metad2:9559
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+      - --meta_server_addrs=metad0:9559
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>       - --local_ip=metad0
</span></span><span class="line"><span class="cl">       - --ws_ip=metad0
</span></span><span class="line"><span class="cl">       - --port=9559
</span></span><span class="line"><span class="cl">       - --ws_http_port=19559
</span></span><span class="line"><span class="cl"><span class="gi">+      - --ws_storage_http_port=19779
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>       - --data_path=/data/meta
</span></span><span class="line"><span class="cl">       - --log_dir=/logs
</span></span><span class="line"><span class="cl">       - --v=0
</span></span><span class="line"><span class="cl"><span class="gu">@@ -34,81 +36,14 @@ services:
</span></span></span><span class="line"><span class="cl"><span class="gu"></span>     cap_add:
</span></span><span class="line"><span class="cl">       - SYS_PTRACE
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="gd">-  metad1:
</span></span></span><span class="line"><span class="cl"><span class="gd">-    image: vesoft/nebula-metad:v2.0.0
</span></span></span><span class="line"><span class="cl"><span class="gd">-    environment:
</span></span></span><span class="line"><span class="cl"><span class="gd">-      USER: root
</span></span></span><span class="line"><span class="cl"><span class="gd">-      TZ:   &#34;${TZ}&#34;
</span></span></span><span class="line"><span class="cl"><span class="gd">-    command:
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - --meta_server_addrs=metad0:9559,metad1:9559,metad2:9559
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - --local_ip=metad1
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - --ws_ip=metad1
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - --port=9559
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - --ws_http_port=19559
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - --data_path=/data/meta
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - --log_dir=/logs
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - --v=0
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - --minloglevel=0
</span></span></span><span class="line"><span class="cl"><span class="gd">-    healthcheck:
</span></span></span><span class="line"><span class="cl"><span class="gd">-      test: [&#34;CMD&#34;, &#34;curl&#34;, &#34;-sf&#34;, &#34;http://metad1:19559/status&#34;]
</span></span></span><span class="line"><span class="cl"><span class="gd">-      interval: 30s
</span></span></span><span class="line"><span class="cl"><span class="gd">-      timeout: 10s
</span></span></span><span class="line"><span class="cl"><span class="gd">-      retries: 3
</span></span></span><span class="line"><span class="cl"><span class="gd">-      start_period: 20s
</span></span></span><span class="line"><span class="cl"><span class="gd">-    ports:
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - 9559
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - 19559
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - 19560
</span></span></span><span class="line"><span class="cl"><span class="gd">-    volumes:
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - ./data/meta1:/data/meta
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - ./logs/meta1:/logs
</span></span></span><span class="line"><span class="cl"><span class="gd">-    networks:
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - nebula-net
</span></span></span><span class="line"><span class="cl"><span class="gd">-    restart: on-failure
</span></span></span><span class="line"><span class="cl"><span class="gd">-    cap_add:
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - SYS_PTRACE
</span></span></span><span class="line"><span class="cl"><span class="gd">-
</span></span></span><span class="line"><span class="cl"><span class="gd">-  metad2:
</span></span></span><span class="line"><span class="cl"><span class="gd">-    image: vesoft/nebula-metad:v2.0.0
</span></span></span><span class="line"><span class="cl"><span class="gd">-    environment:
</span></span></span><span class="line"><span class="cl"><span class="gd">-      USER: root
</span></span></span><span class="line"><span class="cl"><span class="gd">-      TZ:   &#34;${TZ}&#34;
</span></span></span><span class="line"><span class="cl"><span class="gd">-    command:
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - --meta_server_addrs=metad0:9559,metad1:9559,metad2:9559
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - --local_ip=metad2
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - --ws_ip=metad2
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - --port=9559
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - --ws_http_port=19559
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - --data_path=/data/meta
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - --log_dir=/logs
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - --v=0
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - --minloglevel=0
</span></span></span><span class="line"><span class="cl"><span class="gd">-    healthcheck:
</span></span></span><span class="line"><span class="cl"><span class="gd">-      test: [&#34;CMD&#34;, &#34;curl&#34;, &#34;-sf&#34;, &#34;http://metad2:19559/status&#34;]
</span></span></span><span class="line"><span class="cl"><span class="gd">-      interval: 30s
</span></span></span><span class="line"><span class="cl"><span class="gd">-      timeout: 10s
</span></span></span><span class="line"><span class="cl"><span class="gd">-      retries: 3
</span></span></span><span class="line"><span class="cl"><span class="gd">-      start_period: 20s
</span></span></span><span class="line"><span class="cl"><span class="gd">-    ports:
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - 9559
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - 19559
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - 19560
</span></span></span><span class="line"><span class="cl"><span class="gd">-    volumes:
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - ./data/meta2:/data/meta
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - ./logs/meta2:/logs
</span></span></span><span class="line"><span class="cl"><span class="gd">-    networks:
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - nebula-net
</span></span></span><span class="line"><span class="cl"><span class="gd">-    restart: on-failure
</span></span></span><span class="line"><span class="cl"><span class="gd">-    cap_add:
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - SYS_PTRACE
</span></span></span><span class="line"><span class="cl"><span class="gd">-
</span></span></span><span class="line"><span class="cl"><span class="gd"></span>   storaged0:
</span></span><span class="line"><span class="cl">     image: vesoft/nebula-storaged:v2.0.0
</span></span><span class="line"><span class="cl">     environment:
</span></span><span class="line"><span class="cl">       USER: root
</span></span><span class="line"><span class="cl">       TZ:   &#34;${TZ}&#34;
</span></span><span class="line"><span class="cl">     command:
</span></span><span class="line"><span class="cl"><span class="gd">-      - --meta_server_addrs=metad0:9559,metad1:9559,metad2:9559
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+      - --meta_server_addrs=metad0:9559
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>       - --local_ip=storaged0
</span></span><span class="line"><span class="cl">       - --ws_ip=storaged0
</span></span><span class="line"><span class="cl">       - --port=9779
</span></span><span class="line"><span class="cl"><span class="gu">@@ -119,8 +54,8 @@ services:
</span></span></span><span class="line"><span class="cl"><span class="gu"></span>       - --minloglevel=0
</span></span><span class="line"><span class="cl">     depends_on:
</span></span><span class="line"><span class="cl">       - metad0
</span></span><span class="line"><span class="cl"><span class="gd">-      - metad1
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - metad2
</span></span></span><span class="line"><span class="cl"><span class="gd"></span>     healthcheck:
</span></span><span class="line"><span class="cl">       test: [&#34;CMD&#34;, &#34;curl&#34;, &#34;-sf&#34;, &#34;http://storaged0:19779/status&#34;]
</span></span><span class="line"><span class="cl">       interval: 30s
</span></span><span class="line"><span class="cl"><span class="gu">@@ -146,7 +81,7 @@ services:
</span></span></span><span class="line"><span class="cl"><span class="gu"></span>       USER: root
</span></span><span class="line"><span class="cl">       TZ:   &#34;${TZ}&#34;
</span></span><span class="line"><span class="cl">     command:
</span></span><span class="line"><span class="cl"><span class="gd">-      - --meta_server_addrs=metad0:9559,metad1:9559,metad2:9559
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+      - --meta_server_addrs=metad0:9559
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>       - --local_ip=storaged1
</span></span><span class="line"><span class="cl">       - --ws_ip=storaged1
</span></span><span class="line"><span class="cl">       - --port=9779
</span></span><span class="line"><span class="cl"><span class="gu">@@ -157,8 +92,8 @@ services:
</span></span></span><span class="line"><span class="cl"><span class="gu"></span>       - --minloglevel=0
</span></span><span class="line"><span class="cl">     depends_on:
</span></span><span class="line"><span class="cl">       - metad0
</span></span><span class="line"><span class="cl"><span class="gd">-      - metad1
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - metad2
</span></span></span><span class="line"><span class="cl"><span class="gd"></span>     healthcheck:
</span></span><span class="line"><span class="cl">       test: [&#34;CMD&#34;, &#34;curl&#34;, &#34;-sf&#34;, &#34;http://storaged1:19779/status&#34;]
</span></span><span class="line"><span class="cl">       interval: 30s
</span></span><span class="line"><span class="cl"><span class="gu">@@ -184,7 +119,7 @@ services:
</span></span></span><span class="line"><span class="cl"><span class="gu"></span>       USER: root
</span></span><span class="line"><span class="cl">       TZ:   &#34;${TZ}&#34;
</span></span><span class="line"><span class="cl">     command:
</span></span><span class="line"><span class="cl"><span class="gd">-      - --meta_server_addrs=metad0:9559,metad1:9559,metad2:9559
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+      - --meta_server_addrs=metad0:9559
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>       - --local_ip=storaged2
</span></span><span class="line"><span class="cl">       - --ws_ip=storaged2
</span></span><span class="line"><span class="cl">       - --port=9779
</span></span><span class="line"><span class="cl"><span class="gu">@@ -195,8 +130,8 @@ services:
</span></span></span><span class="line"><span class="cl"><span class="gu"></span>       - --minloglevel=0
</span></span><span class="line"><span class="cl">     depends_on:
</span></span><span class="line"><span class="cl">       - metad0
</span></span><span class="line"><span class="cl"><span class="gd">-      - metad1
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - metad2
</span></span></span><span class="line"><span class="cl"><span class="gd"></span>     healthcheck:
</span></span><span class="line"><span class="cl">       test: [&#34;CMD&#34;, &#34;curl&#34;, &#34;-sf&#34;, &#34;http://storaged2:19779/status&#34;]
</span></span><span class="line"><span class="cl">       interval: 30s
</span></span><span class="line"><span class="cl"><span class="gu">@@ -222,17 +157,19 @@ services:
</span></span></span><span class="line"><span class="cl"><span class="gu"></span>       USER: root
</span></span><span class="line"><span class="cl">       TZ:   &#34;${TZ}&#34;
</span></span><span class="line"><span class="cl">     command:
</span></span><span class="line"><span class="cl"><span class="gd">-      - --meta_server_addrs=metad0:9559,metad1:9559,metad2:9559
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+      - --meta_server_addrs=metad0:9559
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>       - --port=9669
</span></span><span class="line"><span class="cl">       - --ws_ip=graphd
</span></span><span class="line"><span class="cl">       - --ws_http_port=19669
</span></span><span class="line"><span class="cl"><span class="gi">+      - --ws_meta_http_port=19559
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>       - --log_dir=/logs
</span></span><span class="line"><span class="cl">       - --v=0
</span></span><span class="line"><span class="cl">       - --minloglevel=0
</span></span><span class="line"><span class="cl">     depends_on:
</span></span><span class="line"><span class="cl">       - metad0
</span></span><span class="line"><span class="cl"><span class="gd">-      - metad1
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - metad2
</span></span></span><span class="line"><span class="cl"><span class="gd"></span>     healthcheck:
</span></span><span class="line"><span class="cl">       test: [&#34;CMD&#34;, &#34;curl&#34;, &#34;-sf&#34;, &#34;http://graphd:19669/status&#34;]
</span></span><span class="line"><span class="cl">       interval: 30s
</span></span><span class="line"><span class="cl"><span class="gu">@@ -257,17 +194,19 @@ services:
</span></span></span><span class="line"><span class="cl"><span class="gu"></span>       USER: root
</span></span><span class="line"><span class="cl">       TZ:   &#34;${TZ}&#34;
</span></span><span class="line"><span class="cl">     command:
</span></span><span class="line"><span class="cl"><span class="gd">-      - --meta_server_addrs=metad0:9559,metad1:9559,metad2:9559
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+      - --meta_server_addrs=metad0:9559
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>       - --port=9669
</span></span><span class="line"><span class="cl">       - --ws_ip=graphd1
</span></span><span class="line"><span class="cl">       - --ws_http_port=19669
</span></span><span class="line"><span class="cl"><span class="gi">+      - --ws_meta_http_port=19559
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>       - --log_dir=/logs
</span></span><span class="line"><span class="cl">       - --v=0
</span></span><span class="line"><span class="cl">       - --minloglevel=0
</span></span><span class="line"><span class="cl">     depends_on:
</span></span><span class="line"><span class="cl">       - metad0
</span></span><span class="line"><span class="cl"><span class="gd">-      - metad1
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - metad2
</span></span></span><span class="line"><span class="cl"><span class="gd"></span>     healthcheck:
</span></span><span class="line"><span class="cl">       test: [&#34;CMD&#34;, &#34;curl&#34;, &#34;-sf&#34;, &#34;http://graphd1:19669/status&#34;]
</span></span><span class="line"><span class="cl">       interval: 30s
</span></span><span class="line"><span class="cl"><span class="gu">@@ -292,17 +231,21 @@ services:
</span></span></span><span class="line"><span class="cl"><span class="gu"></span>       USER: root
</span></span><span class="line"><span class="cl">       TZ:   &#34;${TZ}&#34;
</span></span><span class="line"><span class="cl">     command:
</span></span><span class="line"><span class="cl"><span class="gd">-      - --meta_server_addrs=metad0:9559,metad1:9559,metad2:9559
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+      - --meta_server_addrs=metad0:9559
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>       - --port=9669
</span></span><span class="line"><span class="cl">       - --ws_ip=graphd2
</span></span><span class="line"><span class="cl">       - --ws_http_port=19669
</span></span><span class="line"><span class="cl"><span class="gi">+      - --ws_meta_http_port=19559
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>       - --log_dir=/logs
</span></span><span class="line"><span class="cl">       - --v=0
</span></span><span class="line"><span class="cl">       - --minloglevel=0
</span></span><span class="line"><span class="cl"><span class="gi">+      - --storage_client_timeout_ms=60000
</span></span></span><span class="line"><span class="cl"><span class="gi">+      - --local_config=true
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>     depends_on:
</span></span><span class="line"><span class="cl">       - metad0
</span></span><span class="line"><span class="cl"><span class="gd">-      - metad1
</span></span></span><span class="line"><span class="cl"><span class="gd">-      - metad2
</span></span></span><span class="line"><span class="cl"><span class="gd"></span>     healthcheck:
</span></span><span class="line"><span class="cl">       test: [&#34;CMD&#34;, &#34;curl&#34;, &#34;-sf&#34;, &#34;http://graphd2:19669/status&#34;]
</span></span><span class="line"><span class="cl">       interval: 30s
</span></span><span class="line"><span class="cl"><span class="gu">@@ -323,3 +266,4 @@ services:
</span></span></span><span class="line"><span class="cl"><span class="gu"></span>
</span></span><span class="line"><span class="cl"> networks:
</span></span><span class="line"><span class="cl">   nebula-net:
</span></span><span class="line"><span class="cl"><span class="gi">+    external: true
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="附录二" class="headerLink">
    <a href="#%e9%99%84%e5%bd%95%e4%ba%8c" class="header-mark"></a>7.2 附录二</h3><p><a href="https://github.com/big-data-europe/docker-hadoop" target="_blank" rel="noopener noreferrer">https://github.com/big-data-europe/docker-hadoop</a> 的 <code>docker-compose.yml</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl"><span class="gh">diff --git a/docker-compose.yml b/docker-compose.yml
</span></span></span><span class="line"><span class="cl"><span class="gh">index ed40dc6..66ff1f4 100644
</span></span></span><span class="line"><span class="cl"><span class="gh"></span><span class="gd">--- a/docker-compose.yml
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+++ b/docker-compose.yml
</span></span></span><span class="line"><span class="cl"><span class="gi"></span><span class="gu">@@ -14,6 +14,8 @@ services:
</span></span></span><span class="line"><span class="cl"><span class="gu"></span>       - CLUSTER_NAME=test
</span></span><span class="line"><span class="cl">     env_file:
</span></span><span class="line"><span class="cl">       - ./hadoop.env
</span></span><span class="line"><span class="cl"><span class="gi">+    networks:
</span></span></span><span class="line"><span class="cl"><span class="gi">+      - nebula-net
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>
</span></span><span class="line"><span class="cl">   datanode:
</span></span><span class="line"><span class="cl">     image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
</span></span><span class="line"><span class="cl"><span class="gu">@@ -25,6 +27,8 @@ services:
</span></span></span><span class="line"><span class="cl"><span class="gu"></span>       SERVICE_PRECONDITION: &#34;namenode:9870&#34;
</span></span><span class="line"><span class="cl">     env_file:
</span></span><span class="line"><span class="cl">       - ./hadoop.env
</span></span><span class="line"><span class="cl"><span class="gi">+    networks:
</span></span></span><span class="line"><span class="cl"><span class="gi">+      - nebula-net
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>
</span></span><span class="line"><span class="cl">   resourcemanager:
</span></span><span class="line"><span class="cl">     image: bde2020/hadoop-resourcemanager:2.0.0-hadoop3.2.1-java8
</span></span><span class="line"><span class="cl"><span class="gu">@@ -34,6 +38,8 @@ services:
</span></span></span><span class="line"><span class="cl"><span class="gu"></span>       SERVICE_PRECONDITION: &#34;namenode:9000 namenode:9870 datanode:9864&#34;
</span></span><span class="line"><span class="cl">     env_file:
</span></span><span class="line"><span class="cl">       - ./hadoop.env
</span></span><span class="line"><span class="cl"><span class="gi">+    networks:
</span></span></span><span class="line"><span class="cl"><span class="gi">+      - nebula-net
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>
</span></span><span class="line"><span class="cl">   nodemanager1:
</span></span><span class="line"><span class="cl">     image: bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8
</span></span><span class="line"><span class="cl"><span class="gu">@@ -43,6 +49,8 @@ services:
</span></span></span><span class="line"><span class="cl"><span class="gu"></span>       SERVICE_PRECONDITION: &#34;namenode:9000 namenode:9870 datanode:9864 resourcemanager:8088&#34;
</span></span><span class="line"><span class="cl">     env_file:
</span></span><span class="line"><span class="cl">       - ./hadoop.env
</span></span><span class="line"><span class="cl"><span class="gi">+    networks:
</span></span></span><span class="line"><span class="cl"><span class="gi">+      - nebula-net
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>
</span></span><span class="line"><span class="cl">   historyserver:
</span></span><span class="line"><span class="cl">     image: bde2020/hadoop-historyserver:2.0.0-hadoop3.2.1-java8
</span></span><span class="line"><span class="cl"><span class="gu">@@ -54,8 +62,14 @@ services:
</span></span></span><span class="line"><span class="cl"><span class="gu"></span>       - hadoop_historyserver:/hadoop/yarn/timeline
</span></span><span class="line"><span class="cl">     env_file:
</span></span><span class="line"><span class="cl">       - ./hadoop.env
</span></span><span class="line"><span class="cl"><span class="gi">+    networks:
</span></span></span><span class="line"><span class="cl"><span class="gi">+      - nebula-net
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>
</span></span><span class="line"><span class="cl"> volumes:
</span></span><span class="line"><span class="cl">   hadoop_namenode:
</span></span><span class="line"><span class="cl">   hadoop_datanode:
</span></span><span class="line"><span class="cl">   hadoop_historyserver:
</span></span><span class="line"><span class="cl"><span class="gi">+
</span></span></span><span class="line"><span class="cl"><span class="gi">+networks:
</span></span></span><span class="line"><span class="cl"><span class="gi">+  nebula-net:
</span></span></span><span class="line"><span class="cl"><span class="gi">+    external: true
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="附录三" class="headerLink">
    <a href="#%e9%99%84%e5%bd%95%e4%b8%89" class="header-mark"></a>7.3 附录三</h3><p><code>nebula-exchange-sst.conf</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span><span class="lnt">88
</span><span class="lnt">89
</span><span class="lnt">90
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c"># Spark relation config</span>
</span></span><span class="line"><span class="cl">  <span class="nx">spark</span><span class="err">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">app</span><span class="err">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">name</span><span class="err">:</span> <span class="nx">Nebula</span> <span class="nx">Exchange</span> <span class="mf">2.1</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">master</span><span class="err">:</span><span class="nx">local</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">driver</span><span class="err">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">cores</span><span class="err">:</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">      <span class="nx">maxResultSize</span><span class="err">:</span> <span class="mi">1</span><span class="nx">G</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">executor</span><span class="err">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">memory</span><span class="err">:</span><span class="mi">1</span><span class="nx">G</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">cores</span><span class="err">:</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">max</span><span class="err">:</span> <span class="mi">16</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c"># Nebula Graph relation config</span>
</span></span><span class="line"><span class="cl">  <span class="nx">nebula</span><span class="err">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">address</span><span class="err">:</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">graph</span><span class="err">:</span><span class="p">[</span><span class="s2">&#34;192.168.8.128:9669&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">      <span class="nx">meta</span><span class="err">:</span><span class="p">[</span><span class="s2">&#34;192.168.8.128:49377&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">user</span><span class="err">:</span> <span class="nx">root</span>
</span></span><span class="line"><span class="cl">    <span class="nx">pswd</span><span class="err">:</span> <span class="nx">nebula</span>
</span></span><span class="line"><span class="cl">    <span class="nx">space</span><span class="err">:</span> <span class="nx">sst</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c"># parameters for SST import, not required</span>
</span></span><span class="line"><span class="cl">    <span class="nx">path</span><span class="err">:</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">local</span><span class="err">:</span><span class="s2">&#34;/tmp&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">remote</span><span class="err">:</span><span class="s2">&#34;/sst&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">hdfs</span><span class="p">.</span><span class="nx">namenode</span><span class="err">:</span> <span class="s2">&#34;hdfs://192.168.8.128:9000&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c"># nebula client connection parameters</span>
</span></span><span class="line"><span class="cl">    <span class="nx">connection</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="c"># socket connect &amp; execute timeout, unit: millisecond</span>
</span></span><span class="line"><span class="cl">      <span class="nx">timeout</span><span class="err">:</span> <span class="mi">30000</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">error</span><span class="err">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="c"># max number of failures, if the number of failures is bigger than max, then exit the application.</span>
</span></span><span class="line"><span class="cl">      <span class="nx">max</span><span class="err">:</span> <span class="mi">32</span>
</span></span><span class="line"><span class="cl">      <span class="c"># failed import job will be recorded in output path</span>
</span></span><span class="line"><span class="cl">      <span class="nx">output</span><span class="err">:</span> <span class="err">/</span><span class="nx">tmp</span><span class="err">/</span><span class="nx">errors</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c"># use google&#39;s RateLimiter to limit the requests send to NebulaGraph</span>
</span></span><span class="line"><span class="cl">    <span class="nx">rate</span><span class="err">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="c"># the stable throughput of RateLimiter</span>
</span></span><span class="line"><span class="cl">      <span class="nx">limit</span><span class="err">:</span> <span class="mi">1024</span>
</span></span><span class="line"><span class="cl">      <span class="c"># Acquires a permit from RateLimiter, unit: MILLISECONDS</span>
</span></span><span class="line"><span class="cl">      <span class="c"># if it can&#39;t be obtained within the specified timeout, then give up the request.</span>
</span></span><span class="line"><span class="cl">      <span class="nx">timeout</span><span class="err">:</span> <span class="mi">1000</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c"># Processing tags</span>
</span></span><span class="line"><span class="cl">  <span class="c"># There are tag config examples for different dataSources.</span>
</span></span><span class="line"><span class="cl">  <span class="nx">tags</span><span class="err">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c"># HDFS csv</span>
</span></span><span class="line"><span class="cl">    <span class="c"># Import mode is sst, just change type.sink to client if you want to use client import mode.</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">name</span><span class="err">:</span> <span class="nx">player</span>
</span></span><span class="line"><span class="cl">      <span class="nx">type</span><span class="err">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">source</span><span class="err">:</span> <span class="nx">csv</span>
</span></span><span class="line"><span class="cl">        <span class="nx">sink</span><span class="err">:</span> <span class="nx">sst</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="nx">path</span><span class="err">:</span> <span class="s2">&#34;file:///root/player.csv&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="c"># if your csv file has no header, then use _c0,_c1,_c2,.. to indicate fields</span>
</span></span><span class="line"><span class="cl">      <span class="nx">fields</span><span class="err">:</span> <span class="p">[</span><span class="nx">_c1</span><span class="p">,</span> <span class="nx">_c2</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">      <span class="nx">nebula</span><span class="p">.</span><span class="nx">fields</span><span class="err">:</span> <span class="p">[</span><span class="nx">name</span><span class="p">,</span> <span class="nx">age</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">      <span class="nx">vertex</span><span class="err">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">field</span><span class="err">:</span><span class="nx">_c0</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="nx">separator</span><span class="err">:</span> <span class="s2">&#34;,&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="nx">header</span><span class="err">:</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">      <span class="nx">batch</span><span class="err">:</span> <span class="mi">256</span>
</span></span><span class="line"><span class="cl">      <span class="nx">partition</span><span class="err">:</span> <span class="mi">32</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>Nebula Holdshare Dataset: A demo of Shareholding Breakthrough with Distributed open-source Graph Database: Nebula Graph.</title>
    <link>https://siwei.io/en/nebula-holdshare-dataset/</link>
    <pubDate>Sat, 28 Aug 2021 13:54:03 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/en/nebula-holdshare-dataset/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/en/nebula-holdshare-dataset/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>A demo of Shareholding Breakthrough with Distributed open-source Graph Database: Nebula Graph. 图数据库应用示例：股权关系穿透</p>
</blockquote>
<p>Related GitHub Repo: <a href="https://github.com/wey-gu/nebula-shareholding-example" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/nebula-shareholding-example</a></p>
<blockquote>
<p>更新：在这个数据集生成的工作基础上，我又做了一个全栈示例项目 👉🏻 <a href="https://siwei.io/corp-rel-graph/" target="_blank" rel="noopener noreferrer">https://siwei.io/corp-rel-graph/</a></p>
</blockquote>
<blockquote>
<p>I created the Katacoda Interactive Env for this project 👉🏻 <a href="https://siwei.io/cources/" target="_blank" rel="noopener noreferrer">https://siwei.io/cources/</a></p>
</blockquote>
<blockquote>
<p>Now you can play with the data on Nebula Playground: <a href="https://nebula-graph.io/demo/" target="_blank" rel="noopener noreferrer">https://nebula-graph.io/demo/</a></p>
</blockquote>
<p>This is a demo of Shareholding Relationship Analysis with Distributed open-source Graph Database: Nebula Graph.</p>
<h2 id="data" class="headerLink">
    <a href="#data" class="header-mark"></a>1 Data</h2><h3 id="data-modeling" class="headerLink">
    <a href="#data-modeling" class="header-mark"></a>1.1 Data Modeling</h3><p><a class="lightgallery" href="/en/nebula-holdshare-dataset/modeling.webp" title="modeling" data-thumbnail="/en/nebula-holdshare-dataset/modeling.webp">
        
    </a></p>
<p>There are various kinds of relationships when we checking companies&rsquo; shareholding breakthrough, here let&rsquo;s simplify it with only two kind of entities: person and corp, and with following relationship types.</p>
<ul>
<li><code>person</code> can hold a <code>corp</code> in <code>{share} %</code></li>
<li><code>person</code> can be relative with another <code>person</code></li>
<li><code>corp</code> can hold another <code>corp</code> in <code>{share} %</code></li>
<li><code>corp</code> can be a branch of another <code>corp</code></li>
<li><code>person</code> can be as a role of a <code>corp</code></li>
</ul>
<p>Below is the lines to reflect this graph modele in Nebula Graph, it&rsquo;s quite straightforward, right?</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="n">person</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="n">string</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="n">corp</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="n">string</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">role_as</span><span class="p">(</span><span class="k">role</span><span class="w"> </span><span class="n">string</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">is_branch_of</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">hold_share</span><span class="p">(</span><span class="k">share</span><span class="w"> </span><span class="nb">float</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">reletive_with</span><span class="p">(</span><span class="n">degree</span><span class="w"> </span><span class="nb">int</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="data-generation" class="headerLink">
    <a href="#data-generation" class="header-mark"></a>1.2 Data Generation</h3><p>We just randomly generate some data to help with this demo, you can call <code>data_generator.py</code> directly to generate or reuse what&rsquo;s already done under <code>data_sample</code> folder.</p>
<p>The generated data are records to be fit in above data model from below <code>.csv</code> files.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ pip install <span class="nv">Faker</span><span class="o">==</span>2.0.5 <span class="nv">pydbgen</span><span class="o">==</span>1.0.5
</span></span><span class="line"><span class="cl">$ python3 data_generator.py
</span></span><span class="line"><span class="cl">$ ls -l data
</span></span><span class="line"><span class="cl">total <span class="m">1688</span>
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> weyl  staff   <span class="m">23941</span> Jul <span class="m">14</span> 13:28 corp.csv
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> weyl  staff    <span class="m">1277</span> Jul <span class="m">14</span> 13:26 corp_rel.csv
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> weyl  staff    <span class="m">3048</span> Jul <span class="m">14</span> 13:26 corp_share.csv
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> weyl  staff  <span class="m">211661</span> Jul <span class="m">14</span> 13:26 person.csv
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> weyl  staff  <span class="m">179770</span> Jul <span class="m">14</span> 13:26 person_corp_role.csv
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> weyl  staff  <span class="m">322965</span> Jul <span class="m">14</span> 13:26 person_corp_share.csv
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> weyl  staff   <span class="m">17689</span> Jul <span class="m">14</span> 13:26 person_rel.csv
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="data-import" class="headerLink">
    <a href="#data-import" class="header-mark"></a>1.3 Data Import</h3><p>With those data in <code>.csv</code> files, we can easily import them into a Nebula Graph Cluster with the help of <a href="https://github.com/vesoft-inc/nebula-importer" target="_blank" rel="noopener noreferrer">Nebula-Importer</a>. <code>nebula-importer.yaml</code> in this repo describes rules and configurations on how this import will be done by the importer.</p>
<p>For Nebula Graph Database, plesae refer to <a href="https://docs.nebula-graph.io/" target="_blank" rel="noopener noreferrer">Doc</a> , <a href="https://docs.nebula-graph.com.cn/" target="_blank" rel="noopener noreferrer">Doc-CN</a> to deploy on any Linux Servers, for study and test, you can run it via Docker following the Quick Start Chapter of the documentation.</p>
<p>For Nebula-Importer, if you already have Docker env, you can run it as the following without installing anything. Or, if you prefer to install it, it&rsquo;s quite easy as it&rsquo;s written in Golang and you can run its single file binary quite easily, go check both Documentation and Nebula-Importer Repo: <a href="https://github.com/vesoft-inc/nebula-importer" target="_blank" rel="noopener noreferrer">https://github.com/vesoft-inc/nebula-importer</a>.</p>
<blockquote>
<p>Let&rsquo;s start! Below is the commands I used to import our data into a Nebula Graph Database.</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># put generated data &amp; nebula-importor.yaml to nebula-importer server</span>
</span></span><span class="line"><span class="cl">$ scp -r data nebula_graph_host:~
</span></span><span class="line"><span class="cl">$ scp nebula-importer.yaml data nebula_graph_host:~/data
</span></span><span class="line"><span class="cl">$ ssh nebula_graph_host
</span></span><span class="line"><span class="cl">$ ls -l <span class="si">${</span><span class="nv">HOME</span><span class="si">}</span>/data
</span></span><span class="line"><span class="cl">total <span class="m">756</span>
</span></span><span class="line"><span class="cl">-rw-r--r--. <span class="m">1</span> wei.gu wei.gu  <span class="m">23941</span> Jul <span class="m">14</span> 05:44 corp.csv
</span></span><span class="line"><span class="cl">-rw-r--r--. <span class="m">1</span> wei.gu wei.gu   <span class="m">1277</span> Jul <span class="m">14</span> 05:44 corp_rel.csv
</span></span><span class="line"><span class="cl">-rw-r--r--. <span class="m">1</span> wei.gu wei.gu   <span class="m">3048</span> Jul <span class="m">14</span> 05:44 corp_share.csv
</span></span><span class="line"><span class="cl">-rw-r--r--. <span class="m">1</span> wei.gu wei.gu   <span class="m">3893</span> Jul <span class="m">14</span> 05:44 nebula-importer.yaml
</span></span><span class="line"><span class="cl">-rw-r--r--. <span class="m">1</span> wei.gu wei.gu <span class="m">211661</span> Jul <span class="m">14</span> 05:44 person.csv
</span></span><span class="line"><span class="cl">-rw-r--r--. <span class="m">1</span> wei.gu wei.gu <span class="m">179770</span> Jul <span class="m">14</span> 05:44 person_corp_role.csv
</span></span><span class="line"><span class="cl">-rw-r--r--. <span class="m">1</span> wei.gu wei.gu <span class="m">322965</span> Jul <span class="m">14</span> 05:44 person_corp_share.csv
</span></span><span class="line"><span class="cl">-rw-r--r--. <span class="m">1</span> wei.gu wei.gu  <span class="m">17689</span> Jul <span class="m">14</span> 05:44 person_rel.csv
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># import data into our nebula graph database</span>
</span></span><span class="line"><span class="cl">$ docker run --rm -ti <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --network<span class="o">=</span>nebula-docker-compose_nebula-net <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v <span class="si">${</span><span class="nv">HOME</span><span class="si">}</span>/data/nebula-importer.yaml:/root/nebula-importer.yaml <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v <span class="si">${</span><span class="nv">HOME</span><span class="si">}</span>/data:/root <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    vesoft/nebula-importer:v2 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --config /root/nebula-importer.yaml
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">2021/07/14 05:49:32 --- START OF NEBULA IMPORTER ---
</span></span><span class="line"><span class="cl">2021/07/14 05:49:32 <span class="o">[</span>WARN<span class="o">]</span> config.go:491: Not <span class="nb">set</span> files<span class="o">[</span>0<span class="o">]</span>.schema.vertex.vid.Type, reset to default value <span class="sb">`</span>string<span class="err">&#39;</span>
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">2021/07/14 05:49:43 <span class="o">[</span>INFO<span class="o">]</span> reader.go:180: Total lines of file<span class="o">(</span>/root/person_corp_role.csv<span class="o">)</span> is: 5000, error lines: <span class="m">1287</span>
</span></span><span class="line"><span class="cl">2021/07/14 05:49:43 <span class="o">[</span>INFO<span class="o">]</span> statsmgr.go:61: Done<span class="o">(</span>/root/person_corp_role.csv<span class="o">)</span>: Time<span class="o">(</span>11.39s<span class="o">)</span>, Finished<span class="o">(</span>12523<span class="o">)</span>, Failed<span class="o">(</span>0<span class="o">)</span>, Latency AVG<span class="o">(</span>1514us<span class="o">)</span>, Batches Req AVG<span class="o">(</span>1824us<span class="o">)</span>, Rows AVG<span class="o">(</span>1099.43/s<span class="o">)</span>
</span></span><span class="line"><span class="cl">2021/07/14 05:49:47 <span class="o">[</span>INFO<span class="o">]</span> statsmgr.go:61: Tick: Time<span class="o">(</span>15.00s<span class="o">)</span>, Finished<span class="o">(</span>25807<span class="o">)</span>, Failed<span class="o">(</span>0<span class="o">)</span>, Latency AVG<span class="o">(</span>1500us<span class="o">)</span>, Batches Req AVG<span class="o">(</span>1805us<span class="o">)</span>, Rows AVG<span class="o">(</span>1720.46/s<span class="o">)</span>
</span></span><span class="line"><span class="cl">2021/07/14 05:49:48 <span class="o">[</span>INFO<span class="o">]</span> reader.go:180: Total lines of file<span class="o">(</span>/root/person.csv<span class="o">)</span> is: 10000, error lines: <span class="m">0</span>
</span></span><span class="line"><span class="cl">2021/07/14 05:49:48 <span class="o">[</span>INFO<span class="o">]</span> statsmgr.go:61: Done<span class="o">(</span>/root/person.csv<span class="o">)</span>: Time<span class="o">(</span>16.10s<span class="o">)</span>, Finished<span class="o">(</span>29731<span class="o">)</span>, Failed<span class="o">(</span>0<span class="o">)</span>, Latency AVG<span class="o">(</span>1505us<span class="o">)</span>, Batches Req AVG<span class="o">(</span>1810us<span class="o">)</span>, Rows AVG<span class="o">(</span>1847.17/s<span class="o">)</span>
</span></span><span class="line"><span class="cl">2021/07/14 05:49:50 <span class="o">[</span>INFO<span class="o">]</span> reader.go:180: Total lines of file<span class="o">(</span>/root/person_corp_share.csv<span class="o">)</span> is: 20000, error lines: <span class="m">0</span>
</span></span><span class="line"><span class="cl">2021/07/14 05:49:50 <span class="o">[</span>INFO<span class="o">]</span> statsmgr.go:61: Done<span class="o">(</span>/root/person_corp_share.csv<span class="o">)</span>: Time<span class="o">(</span>17.74s<span class="o">)</span>, Finished<span class="o">(</span>36013<span class="o">)</span>, Failed<span class="o">(</span>0<span class="o">)</span>, Latency AVG<span class="o">(</span>1531us<span class="o">)</span>, Batches Req AVG<span class="o">(</span>1844us<span class="o">)</span>, Rows AVG<span class="o">(</span>2030.29/s<span class="o">)</span>
</span></span><span class="line"><span class="cl">2021/07/14 05:49:50 Finish import data, consume time: 18.25s
</span></span><span class="line"><span class="cl">2021/07/14 05:49:51 --- END OF NEBULA IMPORTER ---
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="corporation-sharehold-relationship-breakthrough" class="headerLink">
    <a href="#corporation-sharehold-relationship-breakthrough" class="header-mark"></a>2 Corporation sharehold relationship breakthrough</h2><h4 id="query-in-ngql" class="headerLink">
    <a href="#query-in-ngql" class="header-mark"></a>2.0.1 Query in nGQL</h4><p>We can query from corp: <code>c_132</code> over <code>*</code>(all relationships) in <code>BIDIRECT</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">GO</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="k">TO</span><span class="w"> </span><span class="mi">3</span><span class="w"> </span><span class="n">STEPS</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="s2">&#34;c_132&#34;</span><span class="w"> </span><span class="n">over</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">BIDIRECT</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Below are lines I call this query in <a href="https://github.com/vesoft-inc/nebula-console" target="_blank" rel="noopener noreferrer">nebula-console</a>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">/ <span class="c1"># nebula-console  -addr 192.168.8.128 -port 9669 -user user -password password</span>
</span></span><span class="line"><span class="cl">2021/07/14 07:07:41 <span class="o">[</span>INFO<span class="o">]</span> connection pool is initialized successfully
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Welcome to Nebula Graph!
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">(</span>user@nebula<span class="o">)</span> <span class="o">[(</span>none<span class="o">)]</span>&gt; show spaces
</span></span><span class="line"><span class="cl">+--------------------+
</span></span><span class="line"><span class="cl"><span class="p">|</span> Name               <span class="p">|</span>
</span></span><span class="line"><span class="cl">+--------------------+
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;basketballplayer&#34;</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl">+--------------------+
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;shareholding&#34;</span>     <span class="p">|</span>
</span></span><span class="line"><span class="cl">+--------------------+
</span></span><span class="line"><span class="cl">Got <span class="m">2</span> rows <span class="o">(</span><span class="nb">time</span> spent 3851/4595 us<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Wed, <span class="m">14</span> Jul <span class="m">2021</span> 07:07:57 UTC
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">(</span>user@nebula<span class="o">)</span> <span class="o">[(</span>none<span class="o">)]</span>&gt; use shareholding
</span></span><span class="line"><span class="cl">Execution succeeded <span class="o">(</span><span class="nb">time</span> spent 1822/2342 us<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Wed, <span class="m">14</span> Jul <span class="m">2021</span> 07:08:02 UTC
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">(</span>user@nebula<span class="o">)</span> <span class="o">[</span>shareholding<span class="o">]</span>&gt; GO <span class="m">1</span> TO <span class="m">3</span> STEPS FROM <span class="s2">&#34;c_132&#34;</span> over * BIDIRECT
</span></span><span class="line"><span class="cl">+--------------+-------------------+-----------------+--------------------+
</span></span><span class="line"><span class="cl"><span class="p">|</span> role_as._dst <span class="p">|</span> is_branch_of._dst <span class="p">|</span> hold_share._dst <span class="p">|</span> reletive_with._dst <span class="p">|</span>
</span></span><span class="line"><span class="cl">+--------------+-------------------+-----------------+--------------------+
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;p_2024&#34;</span>     <span class="p">|</span>                   <span class="p">|</span>                 <span class="p">|</span>                    <span class="p">|</span>
</span></span><span class="line"><span class="cl">+--------------+-------------------+-----------------+--------------------+
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;p_4000&#34;</span>     <span class="p">|</span>                   <span class="p">|</span>                 <span class="p">|</span>                    <span class="p">|</span>
</span></span><span class="line"><span class="cl">+--------------+-------------------+-----------------+--------------------+
</span></span><span class="line"><span class="cl"><span class="p">|</span>              <span class="p">|</span>                   <span class="p">|</span> <span class="s2">&#34;c_245&#34;</span>         <span class="p">|</span>                    <span class="p">|</span>
</span></span><span class="line"><span class="cl">+--------------+-------------------+-----------------+--------------------+
</span></span><span class="line"><span class="cl"><span class="p">|</span>              <span class="p">|</span>                   <span class="p">|</span> <span class="s2">&#34;p_1039&#34;</span>        <span class="p">|</span>                    <span class="p">|</span>
</span></span><span class="line"><span class="cl">+--------------+-------------------+-----------------+--------------------+
</span></span><span class="line"><span class="cl"><span class="p">|</span>              <span class="p">|</span>                   <span class="p">|</span> <span class="s2">&#34;p_1399&#34;</span>        <span class="p">|</span>                    <span class="p">|</span>
</span></span><span class="line"><span class="cl">+--------------+-------------------+-----------------+--------------------+
</span></span><span class="line"><span class="cl"><span class="p">|</span>              <span class="p">|</span>                   <span class="p">|</span> <span class="s2">&#34;p_1767&#34;</span>        <span class="p">|</span>                    <span class="p">|</span>
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">+--------------+-------------------+-----------------+--------------------+
</span></span><span class="line"><span class="cl"><span class="p">|</span>              <span class="p">|</span>                   <span class="p">|</span> <span class="s2">&#34;c_132&#34;</span>         <span class="p">|</span>                    <span class="p">|</span>
</span></span><span class="line"><span class="cl">+--------------+-------------------+-----------------+--------------------+
</span></span><span class="line"><span class="cl"><span class="p">|</span>              <span class="p">|</span>                   <span class="p">|</span> <span class="s2">&#34;c_245&#34;</span>         <span class="p">|</span>                    <span class="p">|</span>
</span></span><span class="line"><span class="cl">+--------------+-------------------+-----------------+--------------------+
</span></span><span class="line"><span class="cl"><span class="p">|</span>              <span class="p">|</span>                   <span class="p">|</span> <span class="s2">&#34;c_25&#34;</span>          <span class="p">|</span>                    <span class="p">|</span>
</span></span><span class="line"><span class="cl">+--------------+-------------------+-----------------+--------------------+
</span></span><span class="line"><span class="cl"><span class="p">|</span>              <span class="p">|</span>                   <span class="p">|</span> <span class="s2">&#34;c_649&#34;</span>         <span class="p">|</span>                    <span class="p">|</span>
</span></span><span class="line"><span class="cl">+--------------+-------------------+-----------------+--------------------+
</span></span><span class="line"><span class="cl"><span class="p">|</span>              <span class="p">|</span>                   <span class="p">|</span> <span class="s2">&#34;c_753&#34;</span>         <span class="p">|</span>                    <span class="p">|</span>
</span></span><span class="line"><span class="cl">+--------------+-------------------+-----------------+--------------------+
</span></span><span class="line"><span class="cl">Got <span class="m">1519</span> rows <span class="o">(</span><span class="nb">time</span> spent 12190/14702 us<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Wed, <span class="m">14</span> Jul <span class="m">2021</span> 07:08:06 UTC
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="in-a-visual-way" class="headerLink">
    <a href="#in-a-visual-way" class="header-mark"></a>2.0.2 In a Visual Way</h4><p>Of course, we can also be done in a visual way:</p>
<p>Step 1, login from Nebula Graph Studio, explore with one VID: <code>c_132</code>:</p>
<p><a class="lightgallery" href="/en/nebula-holdshare-dataset/studio_explore_0.webp" title="studio_explore_0" data-thumbnail="/en/nebula-holdshare-dataset/studio_explore_0.webp">
        
    </a></p>
<p>Step2, click this explored vertex dot, then you can explore from select vertices by selecting:</p>
<ul>
<li>Edge Type</li>
<li>Direction</li>
<li>Steps</li>
<li>Query Limit(Optional)</li>
</ul>
<blockquote>
<p>note, you can click the 👁️ icon to add options to show fields of the graph,</p>
</blockquote>
<p><a class="lightgallery" href="/en/nebula-holdshare-dataset/studio_explore_1.webp" title="studio_explore_1" data-thumbnail="/en/nebula-holdshare-dataset/studio_explore_1.webp">
        
    </a></p>
<p>Step3, after click Expand, you will see all quried relations with <code>c_132</code> the <code>Chambers LLC</code>.</p>
<p><a class="lightgallery" href="/en/nebula-holdshare-dataset/studio_explore_2.webp" title="studio_explore_2" data-thumbnail="/en/nebula-holdshare-dataset/studio_explore_2.webp">
        
    </a></p>
<h2 id="thanks-to-upstream-projects-" class="headerLink">
    <a href="#thanks-to-upstream-projects-" class="header-mark"></a>3 Thanks to Upstream Projects ❤️</h2><ul>
<li>Python Faker <a href="https://github.com/joke2k/faker/" target="_blank" rel="noopener noreferrer">https://github.com/joke2k/faker/</a></li>
<li>pydbgen <a href="https://github.com/tirthajyoti/pydbgen" target="_blank" rel="noopener noreferrer">https://github.com/tirthajyoti/pydbgen</a></li>
<li>Nebula Graph <a href="https://github.com/vesoft-inc/nebula-graph" target="_blank" rel="noopener noreferrer">https://github.com/vesoft-inc/nebula-graph</a></li>
</ul>
<h3 id="tips" class="headerLink">
    <a href="#tips" class="header-mark"></a>3.1 Tips:</h3><ul>
<li>You can deploy nebula graph in one line with:
<ul>
<li><a href="https://siwei.io/nebula-up/" target="_blank" rel="noopener noreferrer">Nebula-UP</a>, it helps install a nebula graph with Docker</li>
<li><a href="https://siwei.io/nebula-operator-kind/" target="_blank" rel="noopener noreferrer">Nebula-operator-KIND</a> , it helps setup all dependencies of Nebula-K8s-Operator including a K8s in Docker, PV Provider and then install a Nebula Graph with Nebula-Operator in K8s.</li>
</ul>
</li>
</ul>
<blockquote>
<p>Image Credit goes to <a href="https://unsplash.com/photos/3fPXt37X6UQ" target="_blank" rel="noopener noreferrer">https://unsplash.com/photos/3fPXt37X6UQ</a></p>
</blockquote>]]></description>
</item><item>
    <title>Nebula Siwi: A Dialog System With Graph Database Backed Knowledge Graph</title>
    <link>https://siwei.io/en/nebula-siwi/</link>
    <pubDate>Sat, 18 Sep 2021 13:53:20 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/en/nebula-siwi/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/en/nebula-siwi/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>a PoC of Dialog System With Graph Database Backed Knowledge Graph.</p>
</blockquote>
<p>Related GitHub Repo: <a href="https://github.com/wey-gu/nebula-siwi/" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/nebula-siwi/</a></p>
<blockquote>
<p>I created the Katacoda Interactive Env for this project 👉🏻 <a href="https://siwei.io/cources/" target="_blank" rel="noopener noreferrer">https://siwei.io/cources/</a></p>
</blockquote>
<blockquote>
<p>Now you can play with the data on Nebula Playground: <a href="https://nebula-graph.io/demo/" target="_blank" rel="noopener noreferrer">https://nebula-graph.io/demo/</a></p>
</blockquote>
<h1 id="siwi-the-voice-assistant" class="headerLink">
    <a href="#siwi-the-voice-assistant" class="header-mark"></a>Siwi the voice assistant</h1><p>Siwi (/ˈsɪwi/) is a PoC of Dialog System With Graph Database Backed Knowledge Graph.</p>
<p>For now, it&rsquo;s a demo for task-driven(not general purpose) dialog bots with KG(Knowledge Graph) leveraging Nebula Graph with the minimal/sample dataset from <a href="https://docs.nebula-graph.io/2.0.1/3.ngql-guide/1.nGQL-overview/1.overview/#basketballplayer" target="_blank" rel="noopener noreferrer">Nebula Graph Manual</a>/ <a href="https://docs.nebula-graph.com.cn/2.0.1/3.ngql-guide/1.nGQL-overview/1.overview/#basketballplayer" target="_blank" rel="noopener noreferrer">NG中文手册</a>.</p>
<blockquote>
<p>Tips: Now you can play with the graph online without installing yourself!</p>
<p><a href="https://playground.nebula-graph.io" target="_blank" rel="noopener noreferrer">Nebula Playground</a> | <a href="https://playground.nebula-graph.com.cn" target="_blank" rel="noopener noreferrer">Nebula Playground - China Mainland</a></p>
</blockquote>
<p>Supported queries:</p>
<p><code>relation</code>:</p>
<ul>
<li>What is the relationship between Yao Ming and Lakers?</li>
<li>How does Yao Ming and Lakers connected?</li>
</ul>
<p><code>serving</code>:</p>
<ul>
<li>Which team had Yao Ming served?</li>
</ul>
<p><code>friendship</code>:</p>
<ul>
<li>Whom does Tim Duncan follow?</li>
<li>Who are Yao Ming&rsquo;s friends?</li>
</ul>
<h2 id="deploy-and-try" class="headerLink">
    <a href="#deploy-and-try" class="header-mark"></a>1 Deploy and Try</h2><p>TBD (leveraging docker and nebula-up)</p>
<h2 id="how-does-it-work" class="headerLink">
    <a href="#how-does-it-work" class="header-mark"></a>2 How does it work?</h2><p>This is one of the most naive pipeline for a specific domain/ single purpose chat bot built on a Knowledge Graph.</p>
<h3 id="backend" class="headerLink">
    <a href="#backend" class="header-mark"></a>2.1 Backend</h3><p><a class="lightgallery" href="/en/nebula-siwi/backend-demo.webp" title="backend-demo" data-thumbnail="/en/nebula-siwi/backend-demo.webp">
        
    </a></p>
<p>The Backend(Siwi API) is a Flask based API server:</p>
<ul>
<li>
<p>Flask API server takes questions in HTTP POST, and calls the bot API.</p>
</li>
<li>
<p>In bot API part there are classfier(Symentic Parsing, Intent Matching, Slot Filling), and question actors(Call corresponding actions to query Knowledge Graph with intents and slots).</p>
</li>
<li>
<p>Knowledge Graph is built on an Open-Source Graph Database: <a href="https://github.com/vesoft-inc/nebula-graph" target="_blank" rel="noopener noreferrer">Nebula Graph</a></p>
</li>
</ul>
<h3 id="frontend" class="headerLink">
    <a href="#frontend" class="header-mark"></a>2.2 Frontend</h3><p><a class="lightgallery" href="/en/nebula-siwi/demo.webp" title="demo" data-thumbnail="/en/nebula-siwi/demo.webp">
        
    </a></p>
<p>The Frontend is a VueJS Single Page Applicaiton(SPA):</p>
<ul>
<li>I reused a Vue Bot UI to showcase a chat window in this human-agent interaction, typing is supported.</li>
<li>In addtion, leverating Chrome&rsquo;s <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Speech_API/Using_the_Web_Speech_API" target="_blank" rel="noopener noreferrer">Web Speech API</a>, a button to listen to human voice is introduced</li>
</ul>
<h3 id="a-query-flow" class="headerLink">
    <a href="#a-query-flow" class="header-mark"></a>2.3 A Query Flow</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">┌────────────────┬──────────────────────────────────────┐
</span></span><span class="line"><span class="cl">│                │                                      │
</span></span><span class="line"><span class="cl">│                │  Speech                              │
</span></span><span class="line"><span class="cl">│     ┌──────────▼──────────┐                           │
</span></span><span class="line"><span class="cl">│     │            Frontend │   Siwi, /ˈsɪwi/           │
</span></span><span class="line"><span class="cl">│     │ Web_Speech_API      │   A PoC of                │
</span></span><span class="line"><span class="cl">│     │                     │   Dialog System           │
</span></span><span class="line"><span class="cl">│     │ Vue.JS              │   With Graph Database     │
</span></span><span class="line"><span class="cl">│     │                     │   Backed Knowledge Graph  │
</span></span><span class="line"><span class="cl">│     └──────────┬──────────┘                           │
</span></span><span class="line"><span class="cl">│                │  Sentence                            │
</span></span><span class="line"><span class="cl">│                │                                      │
</span></span><span class="line"><span class="cl">│   ┌────────────┼──────────────────────────────┐       │
</span></span><span class="line"><span class="cl">│   │            │                              │       │
</span></span><span class="line"><span class="cl">│   │            │              Backend         │       │
</span></span><span class="line"><span class="cl">│   │ ┌──────────▼──────────┐                   │       │
</span></span><span class="line"><span class="cl">│   │ │ Web API, Flask      │   ./app/          │       │
</span></span><span class="line"><span class="cl">│   │ └──────────┬──────────┘                   │       │
</span></span><span class="line"><span class="cl">│   │            │  Sentence    ./bot/          │       │
</span></span><span class="line"><span class="cl">│   │ ┌──────────▼──────────┐                   │       │
</span></span><span class="line"><span class="cl">│   │ │                     │                   │       │
</span></span><span class="line"><span class="cl">│   │ │ Intent matching,    │   ./bot/classifier│       │
</span></span><span class="line"><span class="cl">│   │ │ Symentic Processing │                   │       │
</span></span><span class="line"><span class="cl">│   │ │                     │                   │       │
</span></span><span class="line"><span class="cl">│   │ └──────────┬──────────┘                   │       │
</span></span><span class="line"><span class="cl">│   │            │  Intent, Entities            │       │
</span></span><span class="line"><span class="cl">│   │ ┌──────────▼──────────┐                   │       │
</span></span><span class="line"><span class="cl">│   │ │                     │                   │       │
</span></span><span class="line"><span class="cl">│   │ │ Intent Actor        │   ./bot/actions   │       │
</span></span><span class="line"><span class="cl">│   │ │                     │                   │       │
</span></span><span class="line"><span class="cl">│   └─┴──────────┬──────────┴───────────────────┘       │
</span></span><span class="line"><span class="cl">│                │  Graph Query                         │
</span></span><span class="line"><span class="cl">│     ┌──────────▼──────────┐                           │
</span></span><span class="line"><span class="cl">│     │                     │                           │
</span></span><span class="line"><span class="cl">│     │ Graph Database      │    Nebula Graph           │
</span></span><span class="line"><span class="cl">│     │                     │                           │
</span></span><span class="line"><span class="cl">│     └─────────────────────┘                           │
</span></span><span class="line"><span class="cl">│                                                       │
</span></span><span class="line"><span class="cl">│                                                       │
</span></span><span class="line"><span class="cl">│                                                       │
</span></span><span class="line"><span class="cl">└───────────────────────────────────────────────────────┘
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="source-code-tree" class="headerLink">
    <a href="#source-code-tree" class="header-mark"></a>2.4 Source Code Tree</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── README.md
</span></span><span class="line"><span class="cl">├── src
</span></span><span class="line"><span class="cl">│   ├── siwi                        <span class="c1"># Siwi-API Backend</span>
</span></span><span class="line"><span class="cl">│   │   ├── app                     <span class="c1"># Web Server, take HTTP requests and calls Bot API</span>
</span></span><span class="line"><span class="cl">│   │   └── bot                     <span class="c1"># Bot API</span>
</span></span><span class="line"><span class="cl">│   │       ├── actions             <span class="c1"># Take Intent, Slots, Query Knowledge Graph here</span>
</span></span><span class="line"><span class="cl">│   │       ├── bot                 <span class="c1"># Entrypoint of the Bot API</span>
</span></span><span class="line"><span class="cl">│   │       ├── classifier          <span class="c1"># Symentic Parsing, Intent Matching, Slot Filling</span>
</span></span><span class="line"><span class="cl">│   │       └── <span class="nb">test</span>                <span class="c1"># Example Data Source as equivalent/mocked module</span>
</span></span><span class="line"><span class="cl">│   └── siwi_frontend               <span class="c1"># Browser End</span>
</span></span><span class="line"><span class="cl">│       ├── README.md
</span></span><span class="line"><span class="cl">│       ├── package.json
</span></span><span class="line"><span class="cl">│       └── src
</span></span><span class="line"><span class="cl">│           ├── App.vue             <span class="c1"># Listening to user and pass Questions to Siwi-API</span>
</span></span><span class="line"><span class="cl">│           └── main.js
</span></span><span class="line"><span class="cl">└── wsgi.py
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="manually-run-components" class="headerLink">
    <a href="#manually-run-components" class="header-mark"></a>3 Manually Run Components</h2><h3 id="backend-1" class="headerLink">
    <a href="#backend-1" class="header-mark"></a>3.1 Backend</h3><p>Install and run.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># Install siwi backend</span>
</span></span><span class="line"><span class="cl">python3 -m build
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Configure Nebula Graph Endpoint</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">NG_ENDPOINTS</span><span class="o">=</span>127.0.0.1:9669
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Run Backend API server</span>
</span></span><span class="line"><span class="cl">gunicorn --bind :5000 wsgi --workers <span class="m">1</span> --threads <span class="m">1</span> --timeout <span class="m">60</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>For OpenFunction/ KNative</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker build -t weygu/siwi-api .
</span></span><span class="line"><span class="cl">docker run --rm --name siwi-api <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>     --env<span class="o">=</span><span class="nv">PORT</span><span class="o">=</span><span class="m">5000</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>     --env<span class="o">=</span><span class="nv">NG_ENDPOINTS</span><span class="o">=</span>127.0.0.1:9669 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>     --net<span class="o">=</span>host <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>     weygu/siwi-api
</span></span></code></pre></td></tr></table>
</div>
</div><p>Try it out Web API:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ curl --header <span class="s2">&#34;Content-Type: application/json&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>       --request POST <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>       --data <span class="s1">&#39;{&#34;question&#34;: &#34;What is the relationship between Yao Ming and Lakers?&#34;}&#39;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>       http://192.168.8.128:5000/query <span class="p">|</span> jq
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;answer&#34;</span>: <span class="s2">&#34;There are at least 23 relations between Yao Ming and Lakers, one relation path is: Yao Ming follows Shaquille O&#39;Neal serves Lakers.&#34;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Call Bot Python API:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">nebula2.gclient.net</span> <span class="kn">import</span> <span class="n">ConnectionPool</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">nebula2.Config</span> <span class="kn">import</span> <span class="n">Config</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># define a config</span>
</span></span><span class="line"><span class="cl"><span class="n">config</span> <span class="o">=</span> <span class="n">Config</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">config</span><span class="o">.</span><span class="n">max_connection_pool_size</span> <span class="o">=</span> <span class="mi">10</span>
</span></span><span class="line"><span class="cl"><span class="c1"># init connection pool</span>
</span></span><span class="line"><span class="cl"><span class="n">connection_pool</span> <span class="o">=</span> <span class="n">ConnectionPool</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="c1"># if the given servers are ok, return true, else return false</span>
</span></span><span class="line"><span class="cl"><span class="n">ok</span> <span class="o">=</span> <span class="n">connection_pool</span><span class="o">.</span><span class="n">init</span><span class="p">([(</span><span class="s1">&#39;127.0.0.1&#39;</span><span class="p">,</span> <span class="mi">9669</span><span class="p">)],</span> <span class="n">config</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># import siwi bot</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">siwi.bot</span> <span class="kn">import</span> <span class="n">bot</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># instantiate a bot</span>
</span></span><span class="line"><span class="cl"><span class="n">b</span> <span class="o">=</span> <span class="n">bot</span><span class="o">.</span><span class="n">SiwiBot</span><span class="p">(</span><span class="n">connection_pool</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># make the question query</span>
</span></span><span class="line"><span class="cl"><span class="n">b</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="s2">&#34;Which team had Jonathon Simmons served?&#34;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Then a response will be like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">4</span><span class="p">]:</span> <span class="n">b</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="s2">&#34;Which team had Jonathon Simmons serv</span>
</span></span><span class="line"><span class="cl">   <span class="o">...</span><span class="p">:</span> <span class="n">ed</span><span class="err">?</span><span class="s2">&#34;)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="n">DEBUG</span><span class="p">]</span> <span class="n">ServeAction</span> <span class="n">intent</span><span class="p">:</span> <span class="p">{</span><span class="s1">&#39;entities&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s1">&#39;Jonathon Simmons&#39;</span><span class="p">:</span> <span class="s1">&#39;player&#39;</span><span class="p">},</span> <span class="s1">&#39;intents&#39;</span><span class="p">:</span> <span class="p">(</span><span class="s1">&#39;serve&#39;</span><span class="p">,)}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="n">DEBUG</span><span class="p">]</span> <span class="n">query</span> <span class="k">for</span> <span class="n">RelationshipAction</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="n">USE</span> <span class="n">basketballplayer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">MATCH</span> <span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">v</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e</span><span class="p">:</span><span class="n">serve</span><span class="o">*</span><span class="mi">1</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">v1</span><span class="p">)</span> <span class="n">WHERE</span> <span class="nb">id</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="o">==</span> <span class="s2">&#34;player112&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="n">RETURN</span> <span class="n">p</span> <span class="n">LIMIT</span> <span class="mi">100</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="mi">2021</span><span class="o">-</span><span class="mi">07</span><span class="o">-</span><span class="mi">02</span> <span class="mi">02</span><span class="p">:</span><span class="mi">59</span><span class="p">:</span><span class="mi">36</span><span class="p">,</span><span class="mi">392</span><span class="p">]:</span><span class="n">Get</span> <span class="n">connection</span> <span class="n">to</span> <span class="p">(</span><span class="s1">&#39;127.0.0.1&#39;</span><span class="p">,</span> <span class="mi">9669</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Out</span><span class="p">[</span><span class="mi">4</span><span class="p">]:</span> <span class="s1">&#39;Jonathon Simmons had served 3 teams. Spurs from 2015 to 2015; 76ers from 2019 to 2019; Magic from 2017 to 2017; &#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="frontend-1" class="headerLink">
    <a href="#frontend-1" class="header-mark"></a>3.2 Frontend</h3><p>Referring to <a href="https://github.com/wey-gu/nebula-siwi/tree/main/src/siwi_frontend" target="_blank" rel="noopener noreferrer">siwi_frontend</a></p>
<h2 id="further-work" class="headerLink">
    <a href="#further-work" class="header-mark"></a>4 Further work</h2><ul>
<li><i class="far fa-square fa-fw"></i> Use <a href="https://github.com/swar/nba_api" target="_blank" rel="noopener noreferrer">NBA-API</a> to fallback undefined pattern questions</li>
<li><i class="far fa-square fa-fw"></i> Wrap and manage sessions instead of get and release session per request, this is somehow costly actually.</li>
<li><i class="far fa-square fa-fw"></i> Use NLP methods to implement proper Symentic Parsing, Intent Matching, Slot Filling</li>
<li><i class="far fa-square fa-fw"></i> Build Graph to help with Intent Matching, especially for a general purpose bot</li>
<li><i class="far fa-square fa-fw"></i> Use larger Dataset i.e. from <a href="https://www.kaggle.com/wyattowalsh/basketball" target="_blank" rel="noopener noreferrer">wyattowalsh/basketball</a></li>
</ul>
<h2 id="thanks-to-upstream-projects-" class="headerLink">
    <a href="#thanks-to-upstream-projects-" class="header-mark"></a>5 Thanks to Upstream Projects ❤️</h2><h3 id="backend-2" class="headerLink">
    <a href="#backend-2" class="header-mark"></a>5.1 Backend</h3><ul>
<li>I learnt a lot from the <a href="https://github.com/liuhuanyong/QASystemOnMedicalKG" target="_blank" rel="noopener noreferrer">KGQA on MedicalKG</a> created by <a href="https://liuhuanyong.github.io" target="_blank" rel="noopener noreferrer">Huanyong Liu</a></li>
<li><a href="https://github.com/pallets/flask" target="_blank" rel="noopener noreferrer">Flask</a></li>
<li><a href="https://github.com/WojciechMula/pyahocorasick" target="_blank" rel="noopener noreferrer">pyahocorasick</a> created by <a href="http://0x80.pl/" target="_blank" rel="noopener noreferrer">Wojciech Muła</a></li>
<li><a href="https://pyyaml.org/" target="_blank" rel="noopener noreferrer">PyYaml</a></li>
</ul>
<h3 id="frontend-2" class="headerLink">
    <a href="#frontend-2" class="header-mark"></a>5.2 Frontend</h3><ul>
<li><a href="https://vuejs.org" target="_blank" rel="noopener noreferrer">VueJS</a> for frontend framework</li>
<li><a href="https://github.com/juzser/vue-bot-ui" target="_blank" rel="noopener noreferrer">Vue Bot UI</a>, as a lovely bot UI in vue</li>
<li><a href="https://github.com/Drackokacka/vue-web-speech" target="_blank" rel="noopener noreferrer">Vue Web Speech</a>, for speech API vue wrapper</li>
<li><a href="https://github.com/axios/axios" target="_blank" rel="noopener noreferrer">Axios</a> for browser http client</li>
<li><a href="https://en.wikipedia.org/wiki/Solarized_%28color_scheme%29" target="_blank" rel="noopener noreferrer">Solarized</a> for color scheme</li>
<li><a href="https://github.com/alvarosaburido/vitesome" target="_blank" rel="noopener noreferrer">Vitesome</a> for landing page design</li>
</ul>
<blockquote>
<p>Image credit goes to <a href="https://unsplash.com/photos/0E_vhMVqL9g" target="_blank" rel="noopener noreferrer">https://unsplash.com/photos/0E_vhMVqL9g</a></p>
</blockquote>]]></description>
</item><item>
    <title>What happens to Wordle and Chinese idiom Knowledge Graph?</title>
    <link>https://siwei.io/en/resolve-wordle/</link>
    <pubDate>Mon, 28 Feb 2022 19:18:59 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/en/resolve-wordle/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/en/resolve-wordle/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>Could I create something between the human brain and the game-cheater/ruiner to make it more of fun? With Knowledge Graph?</p>
</blockquote>
<h2 id="background" class="headerLink">
    <a href="#background" class="header-mark"></a>1 Background</h2><p>You may have seen tweets like this in past months, where the color dots in emoji was shared in SNS randomly.</p>
<blockquote>
<p>Feel free to <a href="https://www.google.com/search?q=wordle" target="_blank" rel="noopener noreferrer">Google Wordle</a> first if you don&rsquo;t know its meaning yet.</p>
</blockquote>
<p><a class="lightgallery" href="/en/resolve-wordle/wordle_SNS_share.webp" title="wordle_SNS_share" data-thumbnail="/en/resolve-wordle/wordle_SNS_share.webp">
        
    </a></p>
<h3 id="wordle-solver" class="headerLink">
    <a href="#wordle-solver" class="header-mark"></a>1.1 Wordle Solver</h3><p>For all magics being used to solve wordle, I am impressed by <a href="https://www.3blue1brown.com/about" target="_blank" rel="noopener noreferrer">Grant Sanderson</a>, who explained us the information theory when solving wordle, <a href="https://www.3blue1brown.com/lessons/wordle" target="_blank" rel="noopener noreferrer">in an elegent and delightful way</a>.</p>
<h3 id="chinese-wordle-handle" class="headerLink">
    <a href="#chinese-wordle-handle" class="header-mark"></a>1.2 Chinese wordle: &ldquo;handle&rdquo;</h3><p>I am not going create yet another wordle-solver today, instead, it&rsquo;s more about an intresting variant of wordle.</p>
<p>To truly enjoy the fun of wordle, mostly we should be a native speaker, and it is not surprising that there is a <a href="https://twitter.com/search?q=wordle%20es" target="_blank" rel="noopener noreferrer">Spanish wordle</a> out there, and still tweets on wordle(es) are being shared literially every second now.</p>
<p>While for non alphabetic languages like Chineses, do we have the luck to have fun with wordling? The answer is yes, while it&rsquo;s a bit different.</p>
<p>For the reason <a href="https://en.wikipedia.org/wiki/Chinese_characters" target="_blank" rel="noopener noreferrer">Chinese charactors</a>, also called Hanzi or Han chactors are in from of <a href="https://en.wikipedia.org/wiki/Logogram" target="_blank" rel="noopener noreferrer">Logogram</a>, each charactor in Chinese is made up of radicals in quite different forms, each Chinese word can be 2/3/4 charactors. Most of the crossword games in Chinese are idiom, proverb or ancient poetry based: the slot to be filled are one Chinese.</p>
<p><a class="lightgallery" href="https://i.stack.imgur.com/s5ZBf.png" title="Chinese Idiom Puzzle" data-thumbnail="https://i.stack.imgur.com/s5ZBf.png">
        
    </a></p>
<p>ref: <a href="https://chinese.stackexchange.com/questions/42416/chinese-idiom-puzzle-14-%E4%B8%AD%E6%96%87%E5%A1%AB%E5%AD%97%E9%81%8A%E6%88%B2" target="_blank" rel="noopener noreferrer">Chinese idiom puzzle</a></p>
<p>Thus, a wordle but in Chinese idiom will be quite strange, or even hilarious as <a href="https://cheeaun.com/blog/2022/02/chengyu-wordle-is-not-a-love-story/" target="_blank" rel="noopener noreferrer">Chee</a> and JinGen discussed in this <a href="https://twitter.com/jg_lim/status/1484506430711697412" target="_blank" rel="noopener noreferrer">tweet thread</a>, where you could see the candidate characters are counted in thousands: there is no chance to guess the idiom in 10 attempts!</p>
<p><a class="lightgallery" href="/en/resolve-wordle/wordle-but-in-Chinese-idioms.webp" title="wordle-but-in-Chinese-idioms" data-thumbnail="/en/resolve-wordle/wordle-but-in-Chinese-idioms.webp">
        
    </a></p>
<p>As one of the fun on playing wordle could be the feedback loop of <code>guess --&gt; result</code> in limited attempts, while the scale of Chinese Charactor had pushed the Chinese wordle variant creators leveraging other aspects of the charactor: pronunciation.</p>
<p>Each charactor in Chinease is monosyllabic without exceptions, and when it comes to its pronunciation, they are all made up from two parts(initial and final, and they could be <a href="https://en.wikipedia.org/wiki/Pinyin" target="_blank" rel="noopener noreferrer">written in roman letters</a>), which comes in tens level of possbilities.</p>
<p>There are bounch of Chinese wordle varients asking player to guess idiom leveraging pinyin:</p>
<ul>
<li><a href="https://pinyincaichengyu.com/" target="_blank" rel="noopener noreferrer">https://pinyincaichengyu.com/</a></li>
<li><a href="https://cheeaun.github.io/chengyu-wordle/" target="_blank" rel="noopener noreferrer">https://cheeaun.github.io/chengyu-wordle/</a></li>
<li><a href="https://apps.apple.com/cn/app/id1606194420" target="_blank" rel="noopener noreferrer">https://apps.apple.com/cn/app/id1606194420</a></li>
</ul>
<p>While, to me, a native Chinese speaker, it&rsquo;s either too hard to play with condtions of pronunciation parts(pinyin) or too easy to guess on given around 20 Chinese charactors. Then, the varient stands out here is the &ldquo;<a href="handle/%e6%b1%89%e5%85%9c" rel="">handle/汉兜</a>&quot;(Hanzi-Wordle) created by <a href="https://antfu.me/" target="_blank" rel="noopener noreferrer">Antfu</a>.</p>
<p>&ldquo;Handle&rdquo; introduced the tones with genius to add an extra dimension of all charactors per each guess attempt, which helped player to have more information on filtering the knowledge in the brain.</p>
<blockquote>
<p>Note, for each Chinese charactor, there will be a tone in 1 of <a href="https://en.wikipedia.org/wiki/Four_tones_%28Middle_Chinese%29" target="_blank" rel="noopener noreferrer">4 tones</a> in its pronunciation.</p>
</blockquote>
<p>Let&rsquo;s see what it&rsquo;s like to play the &ldquo;Handle&rdquo;:</p>
<ul>
<li>There will be 4 Chinese Charactors to be filled in 10 times of guess</li>
<li>Not only the charactor self will be colored in result:
<ul>
<li>For example in first line, the green &ldquo;门&rdquo; in position 2 is correct whereas in second line, the orange &ldquo;仓&rdquo; is corret while the possition should be all but not the first slot.</li>
</ul>
</li>
<li>There will be extra hints on:
<ul>
<li>Pinyin parts for both part1(initial) and part2(final)
<ul>
<li>In third line of the boxes, the green &ldquo;qiao&rdquo; refers to the first charactor is ponouced in &ldquo;qiao&rdquo; with initial:&ldquo;q&rdquo; and final:&ldquo;iao&rdquo;, although we filled the wrong charactor in the writing dimension.</li>
<li>In third line, the orange &ldquo;uo&rdquo; refers to there is one chacarctor in other poisition with the final part of the pinyin as &ldquo;uo&rdquo;.</li>
</ul>
</li>
<li>Tones of the charactor:
<ul>
<li>In third line, the green &ldquo;-&rdquo; stands for the third charactor is in tone-1.</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><a class="lightgallery" href="/en/resolve-wordle/handle-intro.webp" title="/en/resolve-wordle/handle-intro.webp" data-thumbnail="/en/resolve-wordle/handle-intro.webp">
        
    </a></p>
<h3 id="the-chinese-wordle-helper" class="headerLink">
    <a href="#the-chinese-wordle-helper" class="header-mark"></a>1.3 The Chinese Wordle Helper</h3><p>As a non-native English speaker, the way I was playing wordle is to <del>cheating</del> relying on helpers:</p>
<p>After knowing on the third letter to be &ldquo;O&rdquo;, I googled and got this: <a href="https://uppolice.org/5-letter-words-with-o-in-the-middle/" target="_blank" rel="noopener noreferrer">5-letter-words-with-o-in-the-middle</a> and do the searching 😁.</p>
<p><a class="lightgallery" href="/en/resolve-wordle/wordle-en-play.webp" title="wordle-en-play" data-thumbnail="/en/resolve-wordle/wordle-en-play.webp">
        
    </a></p>
<p>The way to play with helpers works for me to have fun yet not ruin it by an automated cheat resolver(it&rsquo;s only simulating my brain as a native-speaker!), so that I could somehow experience the same as Millions of people out there without cheating.</p>
<p>While for Chinese &ldquo;Handle&rdquo; players, from my perspective, it&rsquo;s still a bit harder(to find answers in 10 guesses), and the way my wife and I were playing &ldquo;Handle&rdquo; when lining up at the restaurant door ended up googling: idiom list with word &lsquo;foo&rsquo;, yet still having a lot of fun.</p>
<h2 id="chinese-idiom-knowledge-graph" class="headerLink">
    <a href="#chinese-idiom-knowledge-graph" class="header-mark"></a>2 Chinese idiom Knowledge Graph</h2><p>Could I create something between the human brain and the game-cheater/ruiner to make it more of fun?</p>
<p>The answer is yes: a game extension as a secondary brain. For this helper/secondary brain, the solution for &ldquo;handle&rdquo; differenciates from the English wordle, unlike the auto-solver, similar algorithms could help on both cases:</p>
<ul>
<li>
<p>In wordle(English), player searches in their brain or from a helper like the web page: <a href="https://uppolice.org/5-letter-words-with-o-in-the-middle/" target="_blank" rel="noopener noreferrer">5-letter-words-with-o-in-the-middle</a>.</p>
</li>
<li>
<p>In handle(Chinese), it&rsquo;s harder to be searching based on hints like tones/initial parts of pinyin in fulltext webpage searching anymore, the reason hehind is that the multidimensional filter condtions are not indexed by normal webpages. As I mentioned, the key of the helper to be leveraged to (not ruining the game) is to be the extension of the brain, then the question is: how does our brain work on handling the knowledge of &ldquo;handle&rdquo;(yes, I was preparing for this pun for so long!)?</p>
</li>
</ul>
<p>Thus, why not do it in a graph/neural network way? And here we go, let&rsquo;s create a knowledge graph of Chinese idiom and see how it goes with the &ldquo;handle&rdquo; game.</p>
<h3 id="tldr" class="headerLink">
    <a href="#tldr" class="header-mark"></a>2.1 TL;DR</h3><p>It&rsquo;s indeed entertaining to me, and I could write Graph Queries[*] by hand or via Visualization tools[**] to help explore things in this graph, because <del>I can</del> we&rsquo;re doing the &ldquo;thinking&rdquo; process the similar way in our own brain, but not so well-informed.</p>
<ul>
<li>
<ul>
<li></li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="c1"># There is one Character not in 1st position, with tone-4, final part as &#34;ai&#34;, but is not &#34;爱&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">char0</span><span class="p">:</span><span class="o">`</span><span class="k">character</span><span class="o">`</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[</span><span class="n">with_char_0</span><span class="p">:</span><span class="n">with_character</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">x</span><span class="p">:</span><span class="n">idiom</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">with_pinyin_0</span><span class="p">:</span><span class="n">with_pinyin</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">pinyin_0</span><span class="p">:</span><span class="n">character_pinyin</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">with_pinyin_part</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">final_part_0</span><span class="p">:</span><span class="n">pinyin_part</span><span class="err">{</span><span class="n">part_type</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;final&#34;</span><span class="err">}</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">final_part_0</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;ai&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">pinyin_0</span><span class="p">.</span><span class="n">character_pinyin</span><span class="p">.</span><span class="n">tone</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">with_pinyin_0</span><span class="p">.</span><span class="n">position</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">with_char_0</span><span class="p">.</span><span class="n">position</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">char0</span><span class="p">)</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="s2">&#34;爱&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1"># There is one Character in tone-1 not in 2nd position
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">x</span><span class="p">:</span><span class="n">idiom</span><span class="p">)</span><span class="w"> </span><span class="o">-</span><span class="p">[</span><span class="n">with_pinyin_1</span><span class="p">:</span><span class="n">with_pinyin</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">pinyin_1</span><span class="p">:</span><span class="n">character_pinyin</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">pinyin_1</span><span class="p">.</span><span class="n">character_pinyin</span><span class="p">.</span><span class="n">tone</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">with_pinyin_1</span><span class="p">.</span><span class="n">position</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1"># There is one Character with final part as &#34;ing&#34;, not in 4th position
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">x</span><span class="p">:</span><span class="n">idiom</span><span class="p">)</span><span class="w"> </span><span class="o">-</span><span class="p">[</span><span class="n">with_pinyin_2</span><span class="p">:</span><span class="n">with_pinyin</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(:</span><span class="n">character_pinyin</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">with_pinyin_part</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">final_part_2</span><span class="p">:</span><span class="n">pinyin_part</span><span class="err">{</span><span class="n">part_type</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;final&#34;</span><span class="err">}</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">final_part_2</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;ing&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">with_pinyin_2</span><span class="p">.</span><span class="n">position</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1"># The 4th Character is tone-2
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">x</span><span class="p">:</span><span class="n">idiom</span><span class="p">)</span><span class="w"> </span><span class="o">-</span><span class="p">[</span><span class="n">with_pinyin_3</span><span class="p">:</span><span class="n">with_pinyin</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">pinyin_3</span><span class="p">:</span><span class="n">character_pinyin</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">pinyin_3</span><span class="p">.</span><span class="n">character_pinyin</span><span class="p">.</span><span class="n">tone</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">with_pinyin_3</span><span class="p">.</span><span class="n">position</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="nf">count</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">c</span><span class="w"> </span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">c</span><span class="w"> </span><span class="k">DESC</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>**</li>
</ul>
<p><a class="lightgallery" href="/en/resolve-wordle/studio_en.webp" title="studio_en" data-thumbnail="/en/resolve-wordle/studio_en.webp">
        
    </a></p>
<h3 id="the-long-version-of-playing-with-knowledge-graph" class="headerLink">
    <a href="#the-long-version-of-playing-with-knowledge-graph" class="header-mark"></a>2.2 The long version of playing with Knowledge Graph</h3><p>If you are intrested in how you could do it from your side, here are some details. Before getting started, if you would like to hands-on do it, please refer to appendix chapter on getting your own Nebula Graph Database cluster ready, which are a couple of lines commands to be run.</p>
<h4 id="play-handle-with-knowledge-graph" class="headerLink">
    <a href="#play-handle-with-knowledge-graph" class="header-mark"></a>2.2.1 Play Handle with Knowledge Graph</h4><p>So, if we visit the &ldquo;handle&rdquo; game 👉🏻 <a href="https://handle.antfu.me/" target="_blank" rel="noopener noreferrer">https://handle.antfu.me/</a>. We could start with one guess i.e. &ldquo;爱憎分明&rdquo;.</p>
<p>We will get hint of the first guess as:</p>
<p><a class="lightgallery" href="/en/resolve-wordle/initial_word.webp" title="/en/resolve-wordle/initial_word.webp" data-thumbnail="/en/resolve-wordle/initial_word.webp">
        
    </a></p>
<p>Not bad, we have three of the charactor with informative hints!</p>
<ul>
<li>There is one Character not in 1st position, with tone-4, final part as &ldquo;ai&rdquo;, but is not &ldquo;爱&rdquo;</li>
<li>There is one Character in tone-1 not in 2nd position</li>
<li>There is one Character with final part as &ldquo;ing&rdquo;, not in 4th position</li>
<li>The 4th Character is tone-2</li>
</ul>
<p>Then we just query it from Nebula Graph:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="c1"># There is one Character not in 1st position, with tone-4, final part as &#34;ai&#34;, but is not &#34;爱&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">char0</span><span class="p">:</span><span class="o">`</span><span class="k">character</span><span class="o">`</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[</span><span class="n">with_char_0</span><span class="p">:</span><span class="n">with_character</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">x</span><span class="p">:</span><span class="n">idiom</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">with_pinyin_0</span><span class="p">:</span><span class="n">with_pinyin</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">pinyin_0</span><span class="p">:</span><span class="n">character_pinyin</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">with_pinyin_part</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">final_part_0</span><span class="p">:</span><span class="n">pinyin_part</span><span class="err">{</span><span class="n">part_type</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;final&#34;</span><span class="err">}</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">final_part_0</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;ai&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">pinyin_0</span><span class="p">.</span><span class="n">character_pinyin</span><span class="p">.</span><span class="n">tone</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">with_pinyin_0</span><span class="p">.</span><span class="n">position</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">with_char_0</span><span class="p">.</span><span class="n">position</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">char0</span><span class="p">)</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="s2">&#34;爱&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1"># There is one Character in tone-1 not in 2nd position
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">x</span><span class="p">:</span><span class="n">idiom</span><span class="p">)</span><span class="w"> </span><span class="o">-</span><span class="p">[</span><span class="n">with_pinyin_1</span><span class="p">:</span><span class="n">with_pinyin</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">pinyin_1</span><span class="p">:</span><span class="n">character_pinyin</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">pinyin_1</span><span class="p">.</span><span class="n">character_pinyin</span><span class="p">.</span><span class="n">tone</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">with_pinyin_1</span><span class="p">.</span><span class="n">position</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1"># There is one Character with final part as &#34;ing&#34;, not in 4th position
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">x</span><span class="p">:</span><span class="n">idiom</span><span class="p">)</span><span class="w"> </span><span class="o">-</span><span class="p">[</span><span class="n">with_pinyin_2</span><span class="p">:</span><span class="n">with_pinyin</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(:</span><span class="n">character_pinyin</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">with_pinyin_part</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">final_part_2</span><span class="p">:</span><span class="n">pinyin_part</span><span class="err">{</span><span class="n">part_type</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;final&#34;</span><span class="err">}</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">final_part_2</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;ing&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">with_pinyin_2</span><span class="p">.</span><span class="n">position</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1"># The 4th Character is tone-2
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">x</span><span class="p">:</span><span class="n">idiom</span><span class="p">)</span><span class="w"> </span><span class="o">-</span><span class="p">[</span><span class="n">with_pinyin_3</span><span class="p">:</span><span class="n">with_pinyin</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">pinyin_3</span><span class="p">:</span><span class="n">character_pinyin</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">pinyin_3</span><span class="p">.</span><span class="n">character_pinyin</span><span class="p">.</span><span class="n">tone</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">with_pinyin_3</span><span class="p">.</span><span class="n">position</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="nf">count</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">c</span><span class="w"> </span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">c</span><span class="w"> </span><span class="k">DESC</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>And there are 7 results left in this single guess for us!</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="err">(</span><span class="s2">&#34;惊愚骇俗&#34;</span> <span class="err">:idiom</span><span class="p">{</span><span class="err">pinyin:</span> <span class="nt">&#34;[&#39;jing1&#39;, &#39;yu2&#39;, &#39;hai4&#39;, &#39;su2&#39;]&#34;</span><span class="p">}</span><span class="err">)</span>
</span></span><span class="line"><span class="cl"><span class="err">(</span><span class="s2">&#34;惊世骇俗&#34;</span> <span class="err">:idiom</span><span class="p">{</span><span class="err">pinyin:</span> <span class="nt">&#34;[&#39;jing1&#39;, &#39;shi4&#39;, &#39;hai4&#39;, &#39;su2&#39;]&#34;</span><span class="p">}</span><span class="err">)</span>
</span></span><span class="line"><span class="cl"><span class="err">(</span><span class="s2">&#34;惊见骇闻&#34;</span> <span class="err">:idiom</span><span class="p">{</span><span class="err">pinyin:</span> <span class="nt">&#34;[&#39;jing1&#39;, &#39;jian4&#39;, &#39;hai4&#39;, &#39;wen2&#39;]&#34;</span><span class="p">}</span><span class="err">)</span>
</span></span><span class="line"><span class="cl"><span class="err">(</span><span class="s2">&#34;沽名卖直&#34;</span> <span class="err">:idiom</span><span class="p">{</span><span class="err">pinyin:</span> <span class="nt">&#34;[&#39;gu1&#39;, &#39;ming2&#39;, &#39;mai4&#39;, &#39;zhi2&#39;]&#34;</span><span class="p">}</span><span class="err">)</span>
</span></span><span class="line"><span class="cl"><span class="err">(</span><span class="s2">&#34;惊心骇神&#34;</span> <span class="err">:idiom</span><span class="p">{</span><span class="err">pinyin:</span> <span class="nt">&#34;[&#39;jing1&#39;, &#39;xin1&#39;, &#39;hai4&#39;, &#39;shen2&#39;]&#34;</span><span class="p">}</span><span class="err">)</span>
</span></span><span class="line"><span class="cl"><span class="err">(</span><span class="s2">&#34;荆棘载途&#34;</span> <span class="err">:idiom</span><span class="p">{</span><span class="err">pinyin:</span> <span class="nt">&#34;[&#39;jing1&#39;, &#39;ji2&#39;, &#39;zai4&#39;, &#39;tu2&#39;]&#34;</span><span class="p">}</span><span class="err">)</span>
</span></span><span class="line"><span class="cl"><span class="err">(</span><span class="s2">&#34;出卖灵魂&#34;</span> <span class="err">:idiom</span><span class="p">{</span><span class="err">pinyin:</span> <span class="nt">&#34;[&#39;chu1&#39;, &#39;mai4&#39;, &#39;ling2&#39;, &#39;hun2&#39;]&#34;</span><span class="p">}</span><span class="err">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>And as a Chinese native speaker, the common one would be &ldquo;惊世骇俗&rdquo;, and let&rsquo;s give a try!</p>
<p><a class="lightgallery" href="/en/resolve-wordle/D59.webp" title="汉兜 D59" data-thumbnail="/en/resolve-wordle/D59.webp">
        
    </a></p>
<h4 id="the-visualization-of-the-query" class="headerLink">
    <a href="#the-visualization-of-the-query" class="header-mark"></a>2.2.2 The Visualization of the Query</h4><p>We could modify our query to make every part of the subquery returned, thus, they could also be renderred visually:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="c1"># There is one Character not in 1st position, with tone-4, final part as &#34;ai&#34;, but is not &#34;爱&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">MATCH</span><span class="w"> </span><span class="n">p0</span><span class="o">=</span><span class="p">(</span><span class="n">char0</span><span class="p">:</span><span class="o">`</span><span class="k">character</span><span class="o">`</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[</span><span class="n">with_char_0</span><span class="p">:</span><span class="n">with_character</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">x</span><span class="p">:</span><span class="n">idiom</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">with_pinyin_0</span><span class="p">:</span><span class="n">with_pinyin</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">pinyin_0</span><span class="p">:</span><span class="n">character_pinyin</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">with_pinyin_part</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">final_part_0</span><span class="p">:</span><span class="n">pinyin_part</span><span class="err">{</span><span class="n">part_type</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;final&#34;</span><span class="err">}</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">final_part_0</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;ai&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">pinyin_0</span><span class="p">.</span><span class="n">character_pinyin</span><span class="p">.</span><span class="n">tone</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">with_pinyin_0</span><span class="p">.</span><span class="n">position</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">with_char_0</span><span class="p">.</span><span class="n">position</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">char0</span><span class="p">)</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="s2">&#34;爱&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1"># There is one Character in tone-1 not in 2nd position
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">MATCH</span><span class="w"> </span><span class="n">p1</span><span class="o">=</span><span class="p">(</span><span class="n">x</span><span class="p">:</span><span class="n">idiom</span><span class="p">)</span><span class="w"> </span><span class="o">-</span><span class="p">[</span><span class="n">with_pinyin_1</span><span class="p">:</span><span class="n">with_pinyin</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">pinyin_1</span><span class="p">:</span><span class="n">character_pinyin</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">pinyin_1</span><span class="p">.</span><span class="n">character_pinyin</span><span class="p">.</span><span class="n">tone</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">with_pinyin_1</span><span class="p">.</span><span class="n">position</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1"># There is one Character with final part as &#34;ing&#34;, not in 4th position
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">MATCH</span><span class="w"> </span><span class="n">p2</span><span class="o">=</span><span class="p">(</span><span class="n">x</span><span class="p">:</span><span class="n">idiom</span><span class="p">)</span><span class="w"> </span><span class="o">-</span><span class="p">[</span><span class="n">with_pinyin_2</span><span class="p">:</span><span class="n">with_pinyin</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(:</span><span class="n">character_pinyin</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">with_pinyin_part</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">final_part_2</span><span class="p">:</span><span class="n">pinyin_part</span><span class="err">{</span><span class="n">part_type</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;final&#34;</span><span class="err">}</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">final_part_2</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;ing&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">with_pinyin_2</span><span class="p">.</span><span class="n">position</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1"># The 4th Character is tone-2
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">MATCH</span><span class="w"> </span><span class="n">p3</span><span class="o">=</span><span class="p">(</span><span class="n">x</span><span class="p">:</span><span class="n">idiom</span><span class="p">)</span><span class="w"> </span><span class="o">-</span><span class="p">[</span><span class="n">with_pinyin_3</span><span class="p">:</span><span class="n">with_pinyin</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">pinyin_3</span><span class="p">:</span><span class="n">character_pinyin</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">pinyin_3</span><span class="p">.</span><span class="n">character_pinyin</span><span class="p">.</span><span class="n">tone</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">with_pinyin_3</span><span class="p">.</span><span class="n">position</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p0</span><span class="p">,</span><span class="n">p1</span><span class="p">,</span><span class="n">p2</span><span class="p">,</span><span class="n">p3</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>And then we query it in Nebula-Studio-Console, and click &ldquo;View Subgraphs&rdquo; to see how the searching was done like it was in our own brains:</p>
<p><a class="lightgallery" href="/en/resolve-wordle/studio_en.webp" title="studio_en" data-thumbnail="/en/resolve-wordle/studio_en.webp">
        
    </a></p>
<h2 id="whats-next" class="headerLink">
    <a href="#whats-next" class="header-mark"></a>3 What&rsquo;s Next</h2><p>If you happened to get hands dirty(or being intrested to) on Graph Database, you could checkout the <a href="https://github.com/vesoft-inc/nebula" target="_blank" rel="noopener noreferrer">Nebula Graph</a> project now and its <a href="https://docs.nebula-graph.io/" target="_blank" rel="noopener noreferrer">Docs</a> to have more fun of it! Also, <a href="https://nebula-graph.io/demo/" target="_blank" rel="noopener noreferrer">here</a> are some only playgrounds if you prefer to try it without deployment on your own envrioment.</p>
<p>If you are intrested in the <code>MATCH</code> query syntax and would like to actually do exersices with each daily handle challenge, check below Documents:</p>
<ul>
<li>MATCH <a href="https://docs.nebula-graph.io/3.0.1/3.ngql-guide/7.general-query-statements/2.match/" target="_blank" rel="noopener noreferrer">https://docs.nebula-graph.io/3.0.1/3.ngql-guide/7.general-query-statements/2.match/</a></li>
<li>Graph Patterns <a href="https://docs.nebula-graph.io/3.0.1/3.ngql-guide/1.nGQL-overview/3.graph-patterns/" target="_blank" rel="noopener noreferrer">https://docs.nebula-graph.io/3.0.1/3.ngql-guide/1.nGQL-overview/3.graph-patterns/</a></li>
<li>nGQL command cheatsheet <a href="https://docs.nebula-graph.io/3.0.1/2.quick-start/6.cheatsheet-for-ngql/" target="_blank" rel="noopener noreferrer">https://docs.nebula-graph.io/3.0.1/2.quick-start/6.cheatsheet-for-ngql/</a></li>
</ul>
<p>Happy Graphing!</p>
<h2 id="appendix-setting-up-the-knowledge-graph" class="headerLink">
    <a href="#appendix-setting-up-the-knowledge-graph" class="header-mark"></a>4 Appendix: Setting up the Knowledge Graph</h2><p>I put the code and process here: <a href="https://github.com/wey-gu/chinese-graph" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/chinese-graph</a>, feel free to check that out.</p>
<h3 id="build-the-knowledge-graph" class="headerLink">
    <a href="#build-the-knowledge-graph" class="header-mark"></a>4.1 Build the Knowledge Graph</h3><p>The process would be:</p>
<ul>
<li>Modeling the Knowledge</li>
<li>Preprocessing the data</li>
<li>ETL data to a Graph Database: Nebula Graph</li>
<li>Have fun on Nebula Graph</li>
</ul>
<h3 id="modeling-the-knowledge-graph" class="headerLink">
    <a href="#modeling-the-knowledge-graph" class="header-mark"></a>4.2 Modeling the Knowledge Graph</h3><p>For Graph Modeling, it&rsquo;s actually quite straight forward, the mind model for me was to put the knowledge I cares as vertcies and connect them with their relationships first.</p>
<p>You will come back to iterate or optimize the modeling when you are actually playing with the data afterwards, thus, if you could imagine how the graph will be queried in the first place, the graph modeling could be adopted accordingly. Otherwise, don&rsquo;t over design it, just do it the intuitive way.</p>
<p>Here, I put the vertices with properties as:</p>
<ul>
<li>idiom</li>
<li>character</li>
<li>pinyin
<ul>
<li>tone</li>
</ul>
</li>
<li>pinyin_part
<ul>
<li>type</li>
</ul>
</li>
</ul>
<p>The edges with properteis as:</p>
<ul>
<li>with_character</li>
<li>with_pinyin</li>
<li>with_pinyin_part</li>
</ul>
<p><a class="lightgallery" href="/en/resolve-wordle/schema_v1_en.webp" title="schema_v1_en" data-thumbnail="/en/resolve-wordle/schema_v1_en.webp">
        
    </a></p>
<h3 id="deploy-nebula-graph" class="headerLink">
    <a href="#deploy-nebula-graph" class="header-mark"></a>4.3 Deploy Nebula Graph</h3><blockquote>
<p>With <a href="https://github.com/wey-gu/nebula-up/" target="_blank" rel="noopener noreferrer">Nebula-UP</a>, it&rsquo;s an onliner call</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -fsSL nebula-up.siwei.io/install.sh <span class="p">|</span> bash -s -- v3.0.0
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="load-data" class="headerLink">
    <a href="#load-data" class="header-mark"></a>4.4 Load data</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># clone the code for data genration and data loading</span>
</span></span><span class="line"><span class="cl">git clone https://github.com/wey-gu/chinese-graph.git <span class="o">&amp;&amp;</span> <span class="nb">cd</span> chinese-graph
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">python3 graph_data_generator.py <span class="c1"># generate data</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># load data with Nebula-Importer</span>
</span></span><span class="line"><span class="cl">docker run --rm -ti <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --network<span class="o">=</span>nebula-docker-compose_nebula-net <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v <span class="si">${</span><span class="nv">PWD</span><span class="si">}</span>/importer_conf.yaml:/root/importer_conf.yaml <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v <span class="si">${</span><span class="nv">PWD</span><span class="si">}</span>/output:/root <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    vesoft/nebula-importer:v3.0.0 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --config /root/importer_conf.yaml
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>Nebula Graph on Pi</title>
    <link>https://siwei.io/en/nebula-graph-on-pi/</link>
    <pubDate>Wed, 23 Mar 2022 22:11:03 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/en/nebula-graph-on-pi/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/en/nebula-graph-on-pi/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>With the ARM64 Docker Image of Nebula Graph, it&rsquo;s actually quite easy to run it on SBC/Respberry Pi!</p>
</blockquote>
<h2 id="background" class="headerLink">
    <a href="#background" class="header-mark"></a>1 Background</h2><p>Recently, after Yee from Nebula Graph Community fixed ARM build on <a href="https://github.com/vesoft-inc/nebula-third-party/pull/37" target="_blank" rel="noopener noreferrer">nebula-third-party#37</a>, we could play with Nebula Graph on M1 Chip Macbook. While, I didn&rsquo;t get the chance to run it on a SBC/Pi.</p>
<p>A couple of weeks before, in a twitter thread with <a href="https://twitter.com/laixintao" target="_blank" rel="noopener noreferrer">@laixintao</a> and <a href="https://twitter.com/andelf/status/1504295476958404608" target="_blank" rel="noopener noreferrer">@andelf</a> I decided to purchase a <a href="https://wiki.radxa.com/Rock3/" target="_blank" rel="noopener noreferrer">Rock Pi 3A</a>:</p>
<p><a class="lightgallery" href="/en/nebula-graph-on-pi/tweet-RPi-alternative.webp" title="tweet-RPi-alternative" data-thumbnail="/en/nebula-graph-on-pi/tweet-RPi-alternative.webp">
        
    </a></p>
<p>And it looks nice!(Even come with a NPU inside)</p>
<p><a class="lightgallery" href="/en/nebula-graph-on-pi/rockspi_before.webp" title="rockspi_before" data-thumbnail="/en/nebula-graph-on-pi/rockspi_before.webp">
        
    </a></p>
<h2 id="the-guide-of-running-nebula-graph-on-a-pi-sbc" class="headerLink">
    <a href="#the-guide-of-running-nebula-graph-on-a-pi-sbc" class="header-mark"></a>2 The Guide of running Nebula Graph on a Pi SBC</h2><blockquote>
<p>Actually, since v3.0.0, Nebula comes with a <a href="https://docs.nebula-graph.io/3.0.1/4.deployment-and-installation/standalone-deployment/" target="_blank" rel="noopener noreferrer">standalone version</a>, which suits the deep edge deployment more, but today, I will only setup the cluster version as the Docker Image is out of box to be used. I will share more on standalone version in upcoming weeks.</p>
</blockquote>
<p>I put the Ubuntu Server installation steps in the appendix, and now I assumed we already have an ARM64 Linux up and running on a Pi SBC.</p>
<h3 id="step-0-install-docker-compose-on-pi" class="headerLink">
    <a href="#step-0-install-docker-compose-on-pi" class="header-mark"></a>2.1 Step 0, Install Docker-Compose on Pi</h3><p>I am using debian/ubuntu here, while it should be the same for other distros, referring to <a href="https://docs.docker.com/engine/install/" target="_blank" rel="noopener noreferrer">https://docs.docker.com/engine/install/</a>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo apt-get update
</span></span><span class="line"><span class="cl">sudo apt-get install <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    ca-certificates <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    curl <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    gnupg <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    lsb-release
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="s2">&#34;deb [arch=</span><span class="k">$(</span>dpkg --print-architecture<span class="k">)</span><span class="s2"> signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
</span></span></span><span class="line"><span class="cl"><span class="s2">  </span><span class="k">$(</span>lsb_release -cs<span class="k">)</span><span class="s2"> stable&#34;</span> <span class="p">|</span> sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo apt-get update
</span></span><span class="line"><span class="cl">sudo apt-get install docker-ce docker-ce-cli containerd.io
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># follow https://docs.docker.com/engine/install/linux-postinstall/</span>
</span></span><span class="line"><span class="cl">sudo groupadd docker
</span></span><span class="line"><span class="cl">sudo usermod -aG docker <span class="nv">$USER</span>
</span></span><span class="line"><span class="cl"><span class="nb">exit</span>
</span></span><span class="line"><span class="cl"><span class="c1"># login again</span>
</span></span><span class="line"><span class="cl">newgrp docker
</span></span></code></pre></td></tr></table>
</div>
</div><p>After Docker being installed, we install compose here, there could be issues encounterred from the Docker website on Compose installation. While, due to compose is just a python package, let&rsquo;s do it via python3-pip install:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo apt-get install -y python3 python3-pip
</span></span><span class="line"><span class="cl">sudo pip3 install docker-compose
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="step-1-bootstrap-nebula-graph-cluster-on-pi" class="headerLink">
    <a href="#step-1-bootstrap-nebula-graph-cluster-on-pi" class="header-mark"></a>2.2 Step 1, bootstrap Nebula Graph Cluster on Pi</h3><p>We clone the compose file for nebula cluster first:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone https://github.com/vesoft-inc/nebula-docker-compose.git <span class="o">&amp;&amp;</span> <span class="nb">cd</span> nebula-docker-compose
</span></span><span class="line"><span class="cl">docker-compose up -d
</span></span></code></pre></td></tr></table>
</div>
</div><p>Then, let&rsquo;s download the client: nebula-console, and connect to the GraphD service:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">wget https://github.com/vesoft-inc/nebula-console/releases/download/v3.0.0/nebula-console-linux-arm64-v3.0.0
</span></span><span class="line"><span class="cl">chmod +x nebula-console-linux-arm64-v3.0.0
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">./nebula-console-linux-arm64-v3.0.0 -addr localhost -port <span class="m">9669</span> -u root -p nebula
</span></span></code></pre></td></tr></table>
</div>
</div><p>Activate the storageD services:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ADD HOSTS <span class="s2">&#34;storaged0&#34;</span>:9779,<span class="s2">&#34;storaged1&#34;</span>:9779,<span class="s2">&#34;storaged2&#34;</span>:9779<span class="p">;</span>
</span></span><span class="line"><span class="cl">SHOW HOSTS<span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="step-2-play-nebula-graph-on-pi" class="headerLink">
    <a href="#step-2-play-nebula-graph-on-pi" class="header-mark"></a>2.3 Step 2, Play Nebula Graph on Pi</h3><p>WIth the <code>SHOW HOSTS</code> we should see StorageD services are all ONLINE, then we could run this from the console session to load the test dataset.</p>
<blockquote>
<p>Referennce: <a href="https://docs.nebula-graph.io/3.0.1/nebula-console/#import_a_testing_dataset" target="_blank" rel="noopener noreferrer">https://docs.nebula-graph.io/3.0.1/nebula-console/#import_a_testing_dataset</a></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$:play basketballplayer<span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>The test data will be loaded in around 1 minute. Then, we could query something like:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">USE basketballplayer<span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">GO FROM <span class="s2">&#34;player100&#34;</span> OVER follow YIELD dst<span class="o">(</span>edge<span class="o">)</span><span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Check this out and&hellip;</p>
<p>Happy Graphing!</p>
<p><a class="lightgallery" href="/en/nebula-graph-on-pi/Nebula-on-Pi.webp" title="Nebula-on-Pi" data-thumbnail="/en/nebula-graph-on-pi/Nebula-on-Pi.webp">
        
    </a></p>
<h2 id="appendix-installing-ubuntu-server-on-rock-pi-3a-sbc" class="headerLink">
    <a href="#appendix-installing-ubuntu-server-on-rock-pi-3a-sbc" class="header-mark"></a>3 Appendix: Installing Ubuntu Server on Rock Pi 3A SBC</h2><ul>
<li>
<p>Get the image from <a href="https://wiki.radxa.com/Rock3/downloads" target="_blank" rel="noopener noreferrer">https://wiki.radxa.com/Rock3/downloads</a> decompressing the file into <code>.img</code></p>
</li>
<li>
<p>Write the image to a micro SD card with <a href="https://www.balena.io/etcher/" target="_blank" rel="noopener noreferrer">etcher</a></p>
</li>
<li>
<p>Boot it!</p>
</li>
</ul>
<blockquote>
<p>feature image credit: <a href="https://unsplash.com/@_louisreed" target="_blank" rel="noopener noreferrer">@_louisreed</a></p>
</blockquote>]]></description>
</item><item>
    <title>Fraud Detection with NebulaGraph GraphDatabase in action</title>
    <link>https://siwei.io/en/fraud-detection-with-nebulagraph/</link>
    <pubDate>Mon, 01 Aug 2022 01:15:05 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/en/fraud-detection-with-nebulagraph/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/en/fraud-detection-with-nebulagraph/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>This is a review of Fraud Detection methods based on graph algorithms, graph databases, machine learning, and graph neural networks on NebulaGraph, and in addition to an introduction to the basic methodological ideas, I&rsquo;ve also got a Playground you can run. it&rsquo;s worth mentioning that this is the first time I&rsquo;ve introduced you to the Nebula-DGL project 😁.</p>
</blockquote>
<!--

[TOC]

-->
<h2 id="fraud-detection-methods-based-on-graph-database" class="headerLink">
    <a href="#fraud-detection-methods-based-on-graph-database" class="header-mark"></a>1 Fraud detection methods based on graph database</h2><h3 id="graph-modeling" class="headerLink">
    <a href="#graph-modeling" class="header-mark"></a>1.1 Graph Modeling</h3><p>We started the modeling with the existing historical data, annotated information oriented to the relationship of the property graph. The data source could be the transaction event records, user data, and risk control annotations in the banking, e-commerce, or insurance industries in multiple table structures.</p>
<p>The modeling process is to abstract the entities we care about, the relationships between them, and the meaningful properties attached to both entities and relationships.</p>
<p>In general, persons, corporate entities, phone numbers, addresses, devices (e.g., terminal devices, network addresses, WiFi SSIDs to which terminal devices are connected, etc.), and orders are entities we started with to consider, and other information such as is_risky label, and information about persons and corporate entities (occupation, income, education, etc.) are modeled as properties of entities.</p>
<p>The model looks like this and the corresponding dataset could be generated with <a href="https://github.com/wey-gu/fraud-detection-datagen" target="_blank" rel="noopener noreferrer">fraud-detection-datagen</a>, with which you could generate dataset in any expected scale and community sturcture.</p>
<p><a class="lightgallery" href="https://github.com/wey-gu/fraud-detection-datagen/raw/main/images/fraud_detection_graph_model.svg" title="https://github.com/wey-gu/fraud-detection-datagen/raw/main/images/fraud_detection_graph_model.svg" data-thumbnail="https://github.com/wey-gu/fraud-detection-datagen/raw/main/images/fraud_detection_graph_model.svg">
        
    </a></p>
<h3 id="fraud-detection-with-graph-query" class="headerLink">
    <a href="#fraud-detection-with-graph-query" class="header-mark"></a>1.2 Fraud detection with Graph Query</h3><!--

有了一张囊括了人、公司、历史贷款申请记录、电话、线上申请网络设备的图谱，我们可以挖掘一些有意思的信息。

-->
<p>With a graph that encompasses persons, companies, historical loan application records, phone calls, and online applications for web-based devices, we can uncover some interesting information with certain graph queries directly.</p>
<!--

事实上，很多值得被发现、并有效阻止从而止损的骗保行为是具有群体聚集性的。比如欺诈团伙可能是一小批人（比如3到5人）有组织地收集更大规模的身份证信息（比如30张），同时发起多个金融机构大量贷款，然后在放款后选择丢弃这批留下了违约记录的身份证，再进一步选择下一批身份证信息如法炮制。

-->
<p>In fact, many frauds are clusterred in nature. For example, a fraud ring may be a small group of people (e.g., 3 to 5 people) who collect ID information on a larger scale (e.g., 30) in an organized manner, initiate a large number of loans from multiple financial institutions at the same time, and then choose to discard the batch of IDs that have left a record of default after they have been disbursed, and then further choose the next batch of ID information as they have done.</p>
<!--

这种团伙作案的方式因为利用了大量新的身份信息，完全利用历史记录去黑名单规避风险的方式是无效的。不过，借助于关联关系的视角，这些模式是一定程度上可以被及时识别出来的。

-->
<p>Due to the group of frauds keeps utilizing new identity information, it&rsquo;s hard to detect with historical records based blacklist mechanism. However, with the help of the patterns being queried in graph, such case could be resovled in real-time.</p>
<!--

这些模式可以被识别出的规律我把它分成两种：

-->
<p>These patterns can be categorised into two types:</p>
<!--

一种是风控专家可以直接用某种模式来描述的，例如：和已经被标注为高风险的实体有直接或者间接的关联关系（新订单申请人使用了和过往高风险记录相同的网络设备），这种模式对应到图谱中，通过一个图查询就可以实时给出结果。

另一种是隐含在数据的关联关系背后，需要通过图算法挖掘得出的一些风险提示，例如：尽管给定的实体与有限的标注高风险实体没有匹配的关联，但是它在图中形成了聚集性可能提示我们这可能是一个尚未得手的进行中的团伙贷款诈骗的其中一次申请，这种情况可以通过定期在历史数据中批量执行社区发现算法得出，并在高聚集社区中利用中心性算法给出核心实体，一并提示给风险专家进行后续评估和风险标注。

-->
<ul>
<li>
<p>One is that which can be directly described by the risk control expert in terms of some pattern, e.g., a direct or indirect association with an entity that has been marked as high risk (new order applicants use the same network devices as past high risk records), and this pattern corresponds to the graph, which gives results in real time through a graph query.</p>
</li>
<li>
<p>Another type of association is implicitly behind the correlation of the data, which needs to be mined by graph algorithms for some risk hints, e.g., although a given entity has no matching association with a limited number of labeled high-risk entities, the aggregation it forms in the graph may suggest that this may be one of the applications of an ongoing gang loan fraud that has not yet succeeded, which can be derived by periodically batching in the historical data This situation can be derived by periodically performing community discovery algorithms in bulk in historical data, and using centrality algorithms in highly aggregated communities to give core entities that are prompted to risk experts for subsequent evaluation and risk labeling.</p>
</li>
</ul>
<h4 id="fraud-detection-based-on-expert-graph-pattern-matching" class="headerLink">
    <a href="#fraud-detection-based-on-expert-graph-pattern-matching" class="header-mark"></a>1.2.1 Fraud detection based on expert graph pattern matching</h4><p>Before we get started, let&rsquo;s prepare for a NebulaGraph playground with the above graph dataset being loaded:</p>
<blockquote>
<p>Nebula Graph Playground setup, based on  <a href="https://github.com/wey-gu/nebula-up/" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/nebula-up/</a></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -fsSL nebula-up.siwei.io/install.sh <span class="p">|</span> bash
</span></span></code></pre></td></tr></table>
</div>
</div><p>Load graph dataset</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># clone dataset genarator repo</span>
</span></span><span class="line"><span class="cl">git clone https://github.com/wey-gu/fraud-detection-datagen.git
</span></span><span class="line"><span class="cl">cp -r data_sample_numerical_vertex_id data
</span></span><span class="line"><span class="cl"><span class="c1"># remove table head</span>
</span></span><span class="line"><span class="cl">sed -i <span class="s1">&#39;1d&#39;</span> data/*.csv
</span></span><span class="line"><span class="cl"><span class="c1"># load dataset to nebulagraph</span>
</span></span><span class="line"><span class="cl">docker run --rm -ti <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --network<span class="o">=</span>nebula-net <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v <span class="si">${</span><span class="nv">PWD</span><span class="si">}</span>:/root/ <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v <span class="si">${</span><span class="nv">PWD</span><span class="si">}</span>/data/:/data <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    vesoft/nebula-importer:v3.1.0 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --config /root/nebula_graph_importer.yaml
</span></span></code></pre></td></tr></table>
</div>
</div><p>With such a mapping, risk control experts can explore the relationships between entities on-demand in a visual exploration tool that maps the corresponding risk patterns:</p>
<p><a class="lightgallery" href="/en/fraud-detection-with-nebulagraph/viz_graph_query.webp" title="/en/fraud-detection-with-nebulagraph/viz_graph_query.webp" data-thumbnail="/en/fraud-detection-with-nebulagraph/viz_graph_query.webp">
        
    </a></p>
<p>In this screenshot of rendered query, we can clearly see a risk pattern for a group-controlled device that can be given to a graph database developer and abstracted into NebulaGraph database statements that can be queried by anyone or certain application in real-time fashion:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="c1">## Query started from a person for given transaction
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;200000010265&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="n">p_shared_d</span><span class="o">=</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">used_device</span><span class="o">`</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">d</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="o">`</span><span class="n">used_device</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(:</span><span class="o">`</span><span class="n">applicant</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">with_phone_num</span><span class="o">`</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">pn</span><span class="p">:</span><span class="o">`</span><span class="n">phone_num</span><span class="o">`</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[</span><span class="n">e</span><span class="p">:</span><span class="o">`</span><span class="n">with_phone_num</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(:</span><span class="o">`</span><span class="n">applicant</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p_shared_d</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Then we could create an API based on queries like the following, which returns <code>count(e)</code> as a metrics.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="c1">## group controlled device metric
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;200000010265&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="n">p_shared_d</span><span class="o">=</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">used_device</span><span class="o">`</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">d</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="o">`</span><span class="n">used_device</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(:</span><span class="o">`</span><span class="n">applicant</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">with_phone_num</span><span class="o">`</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">pn</span><span class="p">:</span><span class="o">`</span><span class="n">phone_num</span><span class="o">`</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[</span><span class="n">e</span><span class="p">:</span><span class="o">`</span><span class="n">with_phone_num</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(:</span><span class="o">`</span><span class="n">applicant</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="nf">count</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>In this way, we can build an online risk control system that uses limited labeled data and expert resources to more efficiently control the risk of gang fraud.</p>
<p>Another example of leveraging labeled high-risk vertices could be like querying the count of ones whose <code>is_risky</code> flag is True:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p_</span><span class="o">=</span><span class="p">(</span><span class="n">p</span><span class="p">:</span><span class="o">`</span><span class="n">applicant</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="o">*</span><span class="mi">1</span><span class="p">..</span><span class="mi">2</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">p2</span><span class="p">:</span><span class="o">`</span><span class="n">applicant</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">==</span><span class="s2">&#34;200000014810&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">p2</span><span class="p">.</span><span class="o">`</span><span class="n">applicant</span><span class="o">`</span><span class="p">.</span><span class="n">is_risky</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;True&#34;</span><span class="w"> </span><span class="k">RETURN</span><span class="w"> </span><span class="n">p_</span><span class="w"> </span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">100</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><a class="lightgallery" href="/en/fraud-detection-with-nebulagraph/is_risky_label.webp" title="/en/fraud-detection-with-nebulagraph/is_risky_label.webp" data-thumbnail="/en/fraud-detection-with-nebulagraph/is_risky_label.webp">
        
    </a></p>
<p>And the metric would be like:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">p</span><span class="p">:</span><span class="o">`</span><span class="n">applicant</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="o">*</span><span class="mi">1</span><span class="p">..</span><span class="mi">2</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">p2</span><span class="p">:</span><span class="o">`</span><span class="n">applicant</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">==</span><span class="s2">&#34;200000014810&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">p2</span><span class="p">.</span><span class="o">`</span><span class="n">applicant</span><span class="o">`</span><span class="p">.</span><span class="n">is_risky</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;True&#34;</span><span class="w"> </span><span class="k">RETURN</span><span class="w"> </span><span class="nf">count</span><span class="p">(</span><span class="n">p2</span><span class="p">)</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>However, in real world, most of our labeled data is still too expensive to obtain, so is there any way to more effectively use the limited risk labeling and graph structure to predict the risk?</p>
<p>The answer is yes.</p>
<h3 id="expand-labels-in-graph" class="headerLink">
    <a href="#expand-labels-in-graph" class="header-mark"></a>1.3 Expand labels in Graph</h3><!--

Xiaojin Z. 和 Zoubin G. 在论文：[Learning from Labeled and Unlabeled Data with Label Propagation](http://mlg.eng.cam.ac.uk/zoubin/papers/CMU-CALD-02-107.pdf) （CMU-CALD-02-107）中，利用标签传播（Label Propagation）算法来把有限的标注信息在图上通过关联关系传播到更多实体中。

-->
<p>In the paper: <a href="http://mlg.eng.cam.ac.uk/zoubin/papers/CMU-CALD-02-107.pdf" target="_blank" rel="noopener noreferrer">Learning from Labeled and Unlabeled Data with Label Propagation</a> (CMU-CALD-02-107) by Xiaojin Z. and Zoubin G., the Label Propagation algorithm is used to propagate limited labeled information on the graph to more entities through the edges.</p>
<p>In this way, we can easily &ldquo;propagate&rdquo; more labeled information with a limited number of high-risk annotations in the graphs we build. These extended labeles can, on the one hand, give more results in real-time graph queries and, on the other hand, serve as important input for risk control experts to help advance anti-fraud investigation actions.</p>
<p>In general, we can scan the graph data offline periodically, expand and update the labels by the graph algorithm, and then write the valid updated labels back to the graph.</p>
<blockquote>
<p>Note that there is a similar method, SIGNDiffusion, for those who are interested.</p>
</blockquote>
<h4 id="try-expanding-labels-in-graph" class="headerLink">
    <a href="#try-expanding-labels-in-graph" class="header-mark"></a>1.3.1 Try expanding labels in graph</h4><p>Here is an example that works.</p>
<p>In this example, I use the public Yelp dataset. This data will not only be used in this example, but also in the later cases in the GNN method, so you can be patient and import the data into NebulaGraph.</p>
<p>Load dataset into NebulaGraph</p>
<blockquote>
<p>More details in: <a href="https://github.com/wey-gu/nebulagraph-yelp-frauddetection" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/nebulagraph-yelp-frauddetection</a></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone https://github.com/wey-gu/nebulagraph-yelp-frauddetection
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> nebulagraph-yelp-frauddetection
</span></span><span class="line"><span class="cl">python3 -m pip install -r requirements.txt
</span></span><span class="line"><span class="cl"><span class="c1"># download and process dataset</span>
</span></span><span class="line"><span class="cl">python3 data_download.py
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># load it into NebulaGraph</span>
</span></span><span class="line"><span class="cl">docker run --rm -ti <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --network<span class="o">=</span>nebula-net <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v <span class="si">${</span><span class="nv">PWD</span><span class="si">}</span>/yelp_nebulagraph_importer.yaml:/root/importer.yaml <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v <span class="si">${</span><span class="nv">PWD</span><span class="si">}</span>/data:/root <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    vesoft/nebula-importer:v3.1.0 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --config /root/importer.yaml
</span></span></code></pre></td></tr></table>
</div>
</div><p>After it&rsquo;s done, we could see the data stats:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">~/.nebula-up/console.sh -e <span class="s2">&#34;USE yelp; SHOW STATS&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>It should look like:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>root@nebula<span class="o">)</span> <span class="o">[(</span>none<span class="o">)]</span>&gt; USE yelp<span class="p">;</span> SHOW STATS
</span></span><span class="line"><span class="cl">+---------+---------------------------------------+---------+
</span></span><span class="line"><span class="cl"><span class="p">|</span> Type    <span class="p">|</span> Name                                  <span class="p">|</span> Count   <span class="p">|</span>
</span></span><span class="line"><span class="cl">+---------+---------------------------------------+---------+
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Tag&#34;</span>   <span class="p">|</span> <span class="s2">&#34;review&#34;</span>                              <span class="p">|</span> <span class="m">45954</span>   <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Edge&#34;</span>  <span class="p">|</span> <span class="s2">&#34;shares_restaurant_in_one_month_with&#34;</span> <span class="p">|</span> <span class="m">1147232</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Edge&#34;</span>  <span class="p">|</span> <span class="s2">&#34;shares_restaurant_rating_with&#34;</span>       <span class="p">|</span> <span class="m">6805486</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Edge&#34;</span>  <span class="p">|</span> <span class="s2">&#34;shares_user_with&#34;</span>                    <span class="p">|</span> <span class="m">98630</span>   <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Space&#34;</span> <span class="p">|</span> <span class="s2">&#34;vertices&#34;</span>                            <span class="p">|</span> <span class="m">45954</span>   <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Space&#34;</span> <span class="p">|</span> <span class="s2">&#34;edges&#34;</span>                               <span class="p">|</span> <span class="m">8051348</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl">+---------+---------------------------------------+---------+
</span></span><span class="line"><span class="cl">Got <span class="m">6</span> rows <span class="o">(</span><span class="nb">time</span> spent 1911/4488 us<span class="o">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Currently, the general LPA tag propagation algorithm is used for community detection and few implementations are used for tag expansion (only SK-Learn has this implementation), here, we refer to the implementation given by [Thibaud M](<a href="https://datascience.stackexchange.com/users/77683/" target="_blank" rel="noopener noreferrer">https://datascience.stackexchange.com/users/77683/</a> thibaud-m) for the implementation given.</p>
<blockquote>
<p>The orginal talks could be referred: <a href="https://datascience.stackexchange.com/a/55720/138720" target="_blank" rel="noopener noreferrer">https://datascience.stackexchange.com/a/55720/138720</a></p>
</blockquote>
<p>To make this algorithm run faster, a subgraph is taken from the NebulaGraph and an expansion of the labeling is done on this small subgraph:</p>
<blockquote>
<p>First, we start a Playground for Jupyter.</p>
<p>More details in: <a href="https://github.com/wey-gu/nebula-dgl" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/nebula-dgl</a>.</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone https://github.com/wey-gu/nebula-dgl.git
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> nebula-dgl
</span></span><span class="line"><span class="cl"><span class="c1"># run the Jupyter Notebook</span>
</span></span><span class="line"><span class="cl">docker run -it --name dgl -p 8888:8888 --network nebula-net <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v <span class="s2">&#34;</span><span class="nv">$PWD</span><span class="s2">&#34;</span>:/home/jovyan/work jupyter/datascience-notebook <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    start-notebook.sh --NotebookApp.token<span class="o">=</span><span class="s1">&#39;nebulagraph&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>visit http://localhost:8888/lab/tree/work?token=nebulagraph</p>
<p>Install depednecies(they will be used in GNN examples, too)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="err">!</span><span class="n">python3</span> <span class="o">-</span><span class="n">m</span> <span class="n">pip</span> <span class="n">install</span> <span class="n">git</span><span class="o">+</span><span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">vesoft</span><span class="o">-</span><span class="n">inc</span><span class="o">/</span><span class="n">nebula</span><span class="o">-</span><span class="n">python</span><span class="o">.</span><span class="n">git</span><span class="o">@</span><span class="mi">8</span><span class="n">c328c534413b04ccecfd42e64ce6491e09c6ca8</span>
</span></span><span class="line"><span class="cl"><span class="err">!</span><span class="n">python3</span> <span class="o">-</span><span class="n">m</span> <span class="n">pip</span> <span class="n">install</span> <span class="o">.</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Then, let&rsquo;s sample a subgraph, starting from the vertex with ID <code>2048</code>, to get all vertecies in two steps:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">torch</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">json</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">torch</span> <span class="kn">import</span> <span class="n">tensor</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">dgl</span> <span class="kn">import</span> <span class="n">DGLHeteroGraph</span><span class="p">,</span> <span class="n">heterograph</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">nebula3.gclient.net</span> <span class="kn">import</span> <span class="n">ConnectionPool</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">nebula3.Config</span> <span class="kn">import</span> <span class="n">Config</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">config</span> <span class="o">=</span> <span class="n">Config</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">config</span><span class="o">.</span><span class="n">max_connection_pool_size</span> <span class="o">=</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl"><span class="n">connection_pool</span> <span class="o">=</span> <span class="n">ConnectionPool</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">connection_pool</span><span class="o">.</span><span class="n">init</span><span class="p">([(</span><span class="s1">&#39;graphd&#39;</span><span class="p">,</span> <span class="mi">9669</span><span class="p">)],</span> <span class="n">config</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">vertex_id</span> <span class="o">=</span> <span class="mi">2048</span>
</span></span><span class="line"><span class="cl"><span class="n">client</span> <span class="o">=</span> <span class="n">connection_pool</span><span class="o">.</span><span class="n">get_session</span><span class="p">(</span><span class="s1">&#39;root&#39;</span><span class="p">,</span> <span class="s1">&#39;nebula&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">execute_json</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;USE yelp;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="sa">f</span><span class="s2">&#34;GET SUBGRAPH WITH PROP 2 STEPS FROM </span><span class="si">{</span><span class="n">vertex_id</span><span class="si">}</span><span class="s2"> YIELD VERTICES AS nodes, EDGES AS relationships;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">r</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">data</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;results&#39;</span><span class="p">,</span> <span class="p">[{}])[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">columns</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;results&#39;</span><span class="p">,</span> <span class="p">[{}])[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;columns&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># create node and nodedata</span>
</span></span><span class="line"><span class="cl"><span class="n">node_id_map</span> <span class="o">=</span> <span class="p">{}</span> <span class="c1"># key: vertex id in NebulaGraph, value: node id in dgl_graph</span>
</span></span><span class="line"><span class="cl"><span class="n">node_idx</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">features</span> <span class="o">=</span> <span class="p">[[]</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">32</span><span class="p">)]</span> <span class="o">+</span> <span class="p">[[]]</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">index</span><span class="p">,</span> <span class="n">node</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s1">&#39;meta&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">]):</span>
</span></span><span class="line"><span class="cl">        <span class="n">nodeid</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s1">&#39;meta&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="n">index</span><span class="p">][</span><span class="s1">&#39;id&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">nodeid</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">node_id_map</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">node_id_map</span><span class="p">[</span><span class="n">nodeid</span><span class="p">]</span> <span class="o">=</span> <span class="n">node_idx</span>
</span></span><span class="line"><span class="cl">            <span class="n">node_idx</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">32</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">                <span class="n">features</span><span class="p">[</span><span class="n">f</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s1">&#39;row&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="n">index</span><span class="p">][</span><span class="sa">f</span><span class="s2">&#34;review.f</span><span class="si">{</span><span class="n">f</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">            <span class="n">features</span><span class="p">[</span><span class="mi">32</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s1">&#39;row&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="n">index</span><span class="p">][</span><span class="s1">&#39;review.is_fraud&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">rur_start</span><span class="p">,</span> <span class="n">rur_end</span><span class="p">,</span> <span class="n">rsr_start</span><span class="p">,</span> <span class="n">rsr_end</span><span class="p">,</span> <span class="n">rtr_start</span><span class="p">,</span> <span class="n">rtr_end</span> <span class="o">=</span> <span class="p">[],</span> <span class="p">[],</span> <span class="p">[],</span> <span class="p">[],</span> <span class="p">[],</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">edge</span> <span class="ow">in</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s1">&#39;meta&#39;</span><span class="p">][</span><span class="mi">1</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">        <span class="n">edge</span> <span class="o">=</span> <span class="n">edge</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">edge</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;shares_user_with&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">rur_start</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node_id_map</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="s1">&#39;src&#39;</span><span class="p">]])</span>
</span></span><span class="line"><span class="cl">            <span class="n">rur_end</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node_id_map</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="s1">&#39;dst&#39;</span><span class="p">]])</span>
</span></span><span class="line"><span class="cl">        <span class="k">elif</span> <span class="n">edge</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;shares_restaurant_rating_with&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">rsr_start</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node_id_map</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="s1">&#39;src&#39;</span><span class="p">]])</span>
</span></span><span class="line"><span class="cl">            <span class="n">rsr_end</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node_id_map</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="s1">&#39;dst&#39;</span><span class="p">]])</span>
</span></span><span class="line"><span class="cl">        <span class="k">elif</span> <span class="n">edge</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;shares_restaurant_in_one_month_with&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">rtr_start</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node_id_map</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="s1">&#39;src&#39;</span><span class="p">]])</span>
</span></span><span class="line"><span class="cl">            <span class="n">rtr_end</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node_id_map</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="s1">&#39;dst&#39;</span><span class="p">]])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">data_dict</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">rur_start</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">data_dict</span><span class="p">[(</span><span class="s1">&#39;review&#39;</span><span class="p">,</span> <span class="s1">&#39;shares_user_with&#39;</span><span class="p">,</span> <span class="s1">&#39;review&#39;</span><span class="p">)]</span> <span class="o">=</span> <span class="n">tensor</span><span class="p">(</span><span class="n">rur_start</span><span class="p">),</span> <span class="n">tensor</span><span class="p">(</span><span class="n">rur_end</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">rsr_start</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">data_dict</span><span class="p">[(</span><span class="s1">&#39;review&#39;</span><span class="p">,</span> <span class="s1">&#39;shares_restaurant_rating_with&#39;</span><span class="p">,</span> <span class="s1">&#39;review&#39;</span><span class="p">)]</span> <span class="o">=</span> <span class="n">tensor</span><span class="p">(</span><span class="n">rsr_start</span><span class="p">),</span> <span class="n">tensor</span><span class="p">(</span><span class="n">rsr_end</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">rtr_start</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">data_dict</span><span class="p">[(</span><span class="s1">&#39;review&#39;</span><span class="p">,</span> <span class="s1">&#39;shares_restaurant_in_one_month_with&#39;</span><span class="p">,</span> <span class="s1">&#39;review&#39;</span><span class="p">)]</span> <span class="o">=</span> <span class="n">tensor</span><span class="p">(</span><span class="n">rtr_start</span><span class="p">),</span> <span class="n">tensor</span><span class="p">(</span><span class="n">rtr_end</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># construct a dgl_graph, ref: https://docs.dgl.ai/en/0.9.x/generated/dgl.heterograph.html</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">dgl_graph</span><span class="p">:</span> <span class="n">DGLHeteroGraph</span> <span class="o">=</span> <span class="n">heterograph</span><span class="p">(</span><span class="n">data_dict</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># load node features to dgl_graph</span>
</span></span><span class="line"><span class="cl"><span class="n">dgl_graph</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;label&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">tensor</span><span class="p">(</span><span class="n">features</span><span class="p">[</span><span class="mi">32</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># heterogeneous graph to heterogeneous graph, keep ndata and edata</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">dgl</span>
</span></span><span class="line"><span class="cl"><span class="n">hg</span> <span class="o">=</span> <span class="n">dgl</span><span class="o">.</span><span class="n">to_homogeneous</span><span class="p">(</span><span class="n">dgl_graph</span><span class="p">,</span> <span class="n">ndata</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;label&#39;</span><span class="p">])</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Then, let&rsquo;s apply the Label Spreading algorithm mentioned above to this subgraph:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">abc</span> <span class="kn">import</span> <span class="n">abstractmethod</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">torch</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">BaseLabelPropagation</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Base class for label propagation models.
</span></span></span><span class="line"><span class="cl"><span class="s2">    
</span></span></span><span class="line"><span class="cl"><span class="s2">    Parameters
</span></span></span><span class="line"><span class="cl"><span class="s2">    ----------
</span></span></span><span class="line"><span class="cl"><span class="s2">    adj_matrix: torch.FloatTensor
</span></span></span><span class="line"><span class="cl"><span class="s2">        Adjacency matrix of the graph.
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">adj_matrix</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">norm_adj_matrix</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_normalize</span><span class="p">(</span><span class="n">adj_matrix</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">n_nodes</span> <span class="o">=</span> <span class="n">adj_matrix</span><span class="o">.</span><span class="n">size</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">one_hot_labels</span> <span class="o">=</span> <span class="kc">None</span> 
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">n_classes</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">labeled_mask</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">predictions</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@staticmethod</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@abstractmethod</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">_normalize</span><span class="p">(</span><span class="n">adj_matrix</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">raise</span> <span class="ne">NotImplementedError</span><span class="p">(</span><span class="s2">&#34;_normalize must be implemented&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@abstractmethod</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">_propagate</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">raise</span> <span class="ne">NotImplementedError</span><span class="p">(</span><span class="s2">&#34;_propagate must be implemented&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">_one_hot_encode</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">labels</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># Get the number of classes</span>
</span></span><span class="line"><span class="cl">        <span class="n">classes</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">unique</span><span class="p">(</span><span class="n">labels</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">classes</span> <span class="o">=</span> <span class="n">classes</span><span class="p">[</span><span class="n">classes</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">n_classes</span> <span class="o">=</span> <span class="n">classes</span><span class="o">.</span><span class="n">size</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1"># One-hot encode labeled data instances and zero rows corresponding to unlabeled instances</span>
</span></span><span class="line"><span class="cl">        <span class="n">unlabeled_mask</span> <span class="o">=</span> <span class="p">(</span><span class="n">labels</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">labels</span> <span class="o">=</span> <span class="n">labels</span><span class="o">.</span><span class="n">clone</span><span class="p">()</span>  <span class="c1"># defensive copying</span>
</span></span><span class="line"><span class="cl">        <span class="n">labels</span><span class="p">[</span><span class="n">unlabeled_mask</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">one_hot_labels</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="bp">self</span><span class="o">.</span><span class="n">n_nodes</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">n_classes</span><span class="p">),</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">float</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">one_hot_labels</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">one_hot_labels</span><span class="o">.</span><span class="n">scatter</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">labels</span><span class="o">.</span><span class="n">unsqueeze</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">one_hot_labels</span><span class="p">[</span><span class="n">unlabeled_mask</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">labeled_mask</span> <span class="o">=</span> <span class="o">~</span><span class="n">unlabeled_mask</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">fit</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">labels</span><span class="p">,</span> <span class="n">max_iter</span><span class="p">,</span> <span class="n">tol</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;Fits a semi-supervised learning label propagation model.
</span></span></span><span class="line"><span class="cl"><span class="s2">        
</span></span></span><span class="line"><span class="cl"><span class="s2">        labels: torch.LongTensor
</span></span></span><span class="line"><span class="cl"><span class="s2">            Tensor of size n_nodes indicating the class number of each node.
</span></span></span><span class="line"><span class="cl"><span class="s2">            Unlabeled nodes are denoted with -1.
</span></span></span><span class="line"><span class="cl"><span class="s2">        max_iter: int
</span></span></span><span class="line"><span class="cl"><span class="s2">            Maximum number of iterations allowed.
</span></span></span><span class="line"><span class="cl"><span class="s2">        tol: float
</span></span></span><span class="line"><span class="cl"><span class="s2">            Convergence tolerance: threshold to consider the system at steady state.
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">_one_hot_encode</span><span class="p">(</span><span class="n">labels</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">predictions</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">one_hot_labels</span><span class="o">.</span><span class="n">clone</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">prev_predictions</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="bp">self</span><span class="o">.</span><span class="n">n_nodes</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">n_classes</span><span class="p">),</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">float</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">max_iter</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># Stop iterations if the system is considered at a steady state</span>
</span></span><span class="line"><span class="cl">            <span class="n">variation</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">abs</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">predictions</span> <span class="o">-</span> <span class="n">prev_predictions</span><span class="p">)</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span><span class="o">.</span><span class="n">item</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">variation</span> <span class="o">&lt;</span> <span class="n">tol</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;The method stopped after </span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2"> iterations, variation=</span><span class="si">{</span><span class="n">variation</span><span class="si">:</span><span class="s2">.4f</span><span class="si">}</span><span class="s2">.&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">break</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="n">prev_predictions</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">predictions</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">_propagate</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">predict</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">predictions</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">predict_classes</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">predictions</span><span class="o">.</span><span class="n">max</span><span class="p">(</span><span class="n">dim</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">indices</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">LabelPropagation</span><span class="p">(</span><span class="n">BaseLabelPropagation</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">adj_matrix</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="fm">__init__</span><span class="p">(</span><span class="n">adj_matrix</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@staticmethod</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">_normalize</span><span class="p">(</span><span class="n">adj_matrix</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;Computes D^-1 * W&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="n">degs</span> <span class="o">=</span> <span class="n">adj_matrix</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">dim</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">degs</span><span class="p">[</span><span class="n">degs</span> <span class="o">==</span> <span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>  <span class="c1"># avoid division by 0 error</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">adj_matrix</span> <span class="o">/</span> <span class="n">degs</span><span class="p">[:,</span> <span class="kc">None</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">_propagate</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">predictions</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">matmul</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">norm_adj_matrix</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">predictions</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1"># Put back already known labels</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">predictions</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">labeled_mask</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">one_hot_labels</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">labeled_mask</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">fit</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">labels</span><span class="p">,</span> <span class="n">max_iter</span><span class="o">=</span><span class="mi">1000</span><span class="p">,</span> <span class="n">tol</span><span class="o">=</span><span class="mf">1e-3</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">labels</span><span class="p">,</span> <span class="n">max_iter</span><span class="p">,</span> <span class="n">tol</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">LabelSpreading</span><span class="p">(</span><span class="n">BaseLabelPropagation</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">adj_matrix</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="fm">__init__</span><span class="p">(</span><span class="n">adj_matrix</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@staticmethod</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">_normalize</span><span class="p">(</span><span class="n">adj_matrix</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;Computes D^-1/2 * W * D^-1/2&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="n">degs</span> <span class="o">=</span> <span class="n">adj_matrix</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">dim</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">norm</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">pow</span><span class="p">(</span><span class="n">degs</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">norm</span><span class="p">[</span><span class="n">torch</span><span class="o">.</span><span class="n">isinf</span><span class="p">(</span><span class="n">norm</span><span class="p">)]</span> <span class="o">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">adj_matrix</span> <span class="o">*</span> <span class="n">norm</span><span class="p">[:,</span> <span class="kc">None</span><span class="p">]</span> <span class="o">*</span> <span class="n">norm</span><span class="p">[</span><span class="kc">None</span><span class="p">,</span> <span class="p">:]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">_propagate</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">predictions</span> <span class="o">=</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">alpha</span> <span class="o">*</span> <span class="n">torch</span><span class="o">.</span><span class="n">matmul</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">norm_adj_matrix</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">predictions</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="o">+</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="bp">self</span><span class="o">.</span><span class="n">alpha</span><span class="p">)</span> <span class="o">*</span> <span class="bp">self</span><span class="o">.</span><span class="n">one_hot_labels</span>
</span></span><span class="line"><span class="cl">        <span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">fit</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">labels</span><span class="p">,</span> <span class="n">max_iter</span><span class="o">=</span><span class="mi">1000</span><span class="p">,</span> <span class="n">tol</span><span class="o">=</span><span class="mf">1e-3</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.5</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">        Parameters
</span></span></span><span class="line"><span class="cl"><span class="s2">        ----------
</span></span></span><span class="line"><span class="cl"><span class="s2">        alpha: float
</span></span></span><span class="line"><span class="cl"><span class="s2">            Clamping factor.
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="n">alpha</span>
</span></span><span class="line"><span class="cl">        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">labels</span><span class="p">,</span> <span class="n">max_iter</span><span class="p">,</span> <span class="n">tol</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">networkx</span> <span class="k">as</span> <span class="nn">nx</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">nx_hg</span> <span class="o">=</span> <span class="n">hg</span><span class="o">.</span><span class="n">to_networkx</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">adj_matrix</span> <span class="o">=</span> <span class="n">nx</span><span class="o">.</span><span class="n">adjacency_matrix</span><span class="p">(</span><span class="n">nx_hg</span><span class="p">)</span><span class="o">.</span><span class="n">toarray</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">labels</span> <span class="o">=</span> <span class="n">hg</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;label&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Create input tensors</span>
</span></span><span class="line"><span class="cl"><span class="n">adj_matrix_t</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">FloatTensor</span><span class="p">(</span><span class="n">adj_matrix</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">labels_t</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">LongTensor</span><span class="p">(</span><span class="n">labels</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Learn with Label Propagation</span>
</span></span><span class="line"><span class="cl"><span class="n">label_propagation</span> <span class="o">=</span> <span class="n">LabelPropagation</span><span class="p">(</span><span class="n">adj_matrix_t</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Label Propagation: &#34;</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">label_propagation</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">labels_t</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">label_propagation_output_labels</span> <span class="o">=</span> <span class="n">label_propagation</span><span class="o">.</span><span class="n">predict_classes</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Learn with Label Spreading</span>
</span></span><span class="line"><span class="cl"><span class="n">label_spreading</span> <span class="o">=</span> <span class="n">LabelSpreading</span><span class="p">(</span><span class="n">adj_matrix_t</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Label Spreading: &#34;</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">label_spreading</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">labels_t</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.8</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">label_spreading_output_labels</span> <span class="o">=</span> <span class="n">label_spreading</span><span class="o">.</span><span class="n">predict_classes</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Let&rsquo;s render label spread in color:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">color_map</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">:</span> <span class="s2">&#34;blue&#34;</span><span class="p">,</span> <span class="mi">1</span><span class="p">:</span> <span class="s2">&#34;green&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">input_labels_colors</span> <span class="o">=</span> <span class="p">[</span><span class="n">color_map</span><span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">l</span><span class="p">)]</span> <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">labels</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">lprop_labels_colors</span> <span class="o">=</span> <span class="p">[</span><span class="n">color_map</span><span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">l</span><span class="p">)]</span> <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">label_propagation_output_labels</span><span class="o">.</span><span class="n">numpy</span><span class="p">()]</span>
</span></span><span class="line"><span class="cl"><span class="n">lspread_labels_colors</span> <span class="o">=</span> <span class="p">[</span><span class="n">color_map</span><span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">l</span><span class="p">)]</span> <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">label_spreading_output_labels</span><span class="o">.</span><span class="n">numpy</span><span class="p">()]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">14</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">ax1</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ax2</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ax3</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ax1</span><span class="o">.</span><span class="n">title</span><span class="o">.</span><span class="n">set_text</span><span class="p">(</span><span class="s2">&#34;Raw data (2 classes)&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ax2</span><span class="o">.</span><span class="n">title</span><span class="o">.</span><span class="n">set_text</span><span class="p">(</span><span class="s2">&#34;Label Propagation&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ax3</span><span class="o">.</span><span class="n">title</span><span class="o">.</span><span class="n">set_text</span><span class="p">(</span><span class="s2">&#34;Label Spreading&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">pos</span> <span class="o">=</span> <span class="n">nx</span><span class="o">.</span><span class="n">spring_layout</span><span class="p">(</span><span class="n">nx_hg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">nx</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="n">nx_hg</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax1</span><span class="p">,</span> <span class="n">pos</span><span class="o">=</span><span class="n">pos</span><span class="p">,</span> <span class="n">node_color</span><span class="o">=</span><span class="n">input_labels_colors</span><span class="p">,</span> <span class="n">node_size</span><span class="o">=</span><span class="mi">50</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">nx</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="n">nx_hg</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax2</span><span class="p">,</span> <span class="n">pos</span><span class="o">=</span><span class="n">pos</span><span class="p">,</span> <span class="n">node_color</span><span class="o">=</span><span class="n">lprop_labels_colors</span><span class="p">,</span> <span class="n">node_size</span><span class="o">=</span><span class="mi">50</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">nx</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="n">nx_hg</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax3</span><span class="p">,</span> <span class="n">pos</span><span class="o">=</span><span class="n">pos</span><span class="p">,</span> <span class="n">node_color</span><span class="o">=</span><span class="n">lspread_labels_colors</span><span class="p">,</span> <span class="n">node_size</span><span class="o">=</span><span class="mi">50</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Legend</span>
</span></span><span class="line"><span class="cl"><span class="n">ax4</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ax4</span><span class="o">.</span><span class="n">axis</span><span class="p">(</span><span class="s2">&#34;off&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">legend_colors</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;orange&#34;</span><span class="p">,</span> <span class="s2">&#34;blue&#34;</span><span class="p">,</span> <span class="s2">&#34;green&#34;</span><span class="p">,</span> <span class="s2">&#34;red&#34;</span><span class="p">,</span> <span class="s2">&#34;cyan&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">legend_labels</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;unlabeled&#34;</span><span class="p">,</span> <span class="s2">&#34;class 0&#34;</span><span class="p">,</span> <span class="s2">&#34;class 1&#34;</span><span class="p">,</span> <span class="s2">&#34;class 2&#34;</span><span class="p">,</span> <span class="s2">&#34;class 3&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">dummy_legend</span> <span class="o">=</span> <span class="p">[</span><span class="n">ax4</span><span class="o">.</span><span class="n">plot</span><span class="p">([],</span> <span class="p">[],</span> <span class="n">ls</span><span class="o">=</span><span class="s1">&#39;-&#39;</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="n">c</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">legend_colors</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">legend</span><span class="p">(</span><span class="n">dummy_legend</span><span class="p">,</span> <span class="n">legend_labels</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>It looks like this:</p>
<p><a class="lightgallery" href="/en/fraud-detection-with-nebulagraph/lpa_spread_notation_matplot.webp" title="/en/fraud-detection-with-nebulagraph/lpa_spread_notation_matplot.webp" data-thumbnail="/en/fraud-detection-with-nebulagraph/lpa_spread_notation_matplot.webp">
        
    </a></p>
<p>We could see some of the label was spread(color change).</p>
<h3 id="machine-learning-with-graph-features" class="headerLink">
    <a href="#machine-learning-with-graph-features" class="header-mark"></a>1.4 Machine Learning with Graph Features</h3><!--

在风控领域开始利用图的思想和能力之前，已经有很多利用机器学习的分类算法基于历史数据预测高风险行为的方法了，这些方法把记录中领域专家认为有关的信息（例如：年龄、学历、收入）作为特征，历史标注信息作为标签去训练风险预测模型。

那么读到的这里，我们是否会想到在这些方法的基础之上，如果把基于图结构的属性也考虑进来，作为特征去训练的模型可能更有效呢？答案也是肯定的，已经有很多论文和工程实践揭示这样的模型比未考虑图特征的算法更加有效：这些被尝试有效的图结构特征可能是实体的 PageRank 值、Degree 值或者是某一个社区发现算法得出的社区 id。

在生产上，我们可以定期从图谱中获得实时的全图信息，在图计算平台中分析运算获得所需特征，经过预定的数据管道，导入机器学习模型中周期获得新的风险提示，并将部分结果写回图谱方便其他系统和专家抽取、参考。

-->
<p>Before the field of risk control started to leverage the methods of the graph, there have been many approaches to predict high-risk behavior based on historical data using machine learning classification algorithms that use information in records that domain experts consider relevant (e.g., age, education, income) as features and historical label information to train risk prediction models.</p>
<p>So reading this, does it occur to us that on top of these methods, models trained as features might be more effective if attributes based on graph structure were also taken into account?</p>
<p>The answer is also yes, and there have been many papers and engineering practices revealing that such models are more effective than algorithms that do not consider graph features: these graph structure features that are tried to be effective could be PageRank values of entities, Degree values, or community ids derived from one of the community discovery algorithms.</p>
<p>In production, we can periodically obtain real-time full graph information from the graph, analyze it in a graph computing platform to obtain the required features, go through a predefined data pipeline, import it into a machine learning model cycle to obtain new risk cues, and write some of the results back to the graph for easy extraction and reference by other systems and experts.</p>
<h4 id="example-of-ml-with-graph-features" class="headerLink">
    <a href="#example-of-ml-with-graph-features" class="header-mark"></a>1.4.1 Example of ML with Graph Features</h4><!--

这里，端到端机器学习的方法我就不演示了，就是常见的分类方法，在此之上，我们可以在数据中通过图算法获得一些新的属性，这些属性再处理一下作为新的特征。我只演示一个社区发现的方法，我们可以对全图跑一个 Louvain，得出不同节点的社区归属，然后把社区的值当做一个分类处理成为数值的特征。

这个例子里我们还用 https://github.com/wey-gu/fraud-detection-datagen 这个数据，在此基础上，这个例子我用到了 [Nebula-Algorithm](https://github.com/vesoft-inc/nebula-algorithm/) 这个项目，它是一个 Spark 应用，可以在 NebulaGraph 图库上运行很多常用的图算法。

-->
<p>Here, I will not demonstrate the end-to-end machine learning example, which is a common classification approach, on top of which we can get some new properties in the data by graph algorithms, which are then processed as new features. I will only demonstrate a community discovery method where we can run a Louvain on the full graph, derive the community identity of different nodes, and then process the community values as a classification into numerical features.</p>
<p>In this example we also use the data from <a href="https://github.com/wey-gu/fraud-detection-datagen" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/fraud-detection-datagen</a>, on top of which I used <a href="https://github.com/vesoft-inc/nebula-algorithm" target="_blank" rel="noopener noreferrer">NebulaGraph-Algorithm</a> project, a Spark application that runs many common graph algorithms on the NebulaGraph graph database.</p>
<p>First, let&rsquo;s set up a NebulaGraph cluster with Spark and NebulaGraph Algorithm, in one-liner thanks to Nebula-UP</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -fsSL nebula-up.siwei.io/all-in-one.sh <span class="p">|</span> bash -s -- v3 spark
</span></span></code></pre></td></tr></table>
</div>
</div><p>After it&rsquo;s done, as I had put needed configuration files inside Nebula-UP, we could call the Louvain algorithm with:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> ~/.nebula-up/nebula-up/spark <span class="o">&amp;&amp;</span> ls -l
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">docker <span class="nb">exec</span> -it sparkmaster /spark/bin/spark-submit <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --master <span class="s2">&#34;local&#34;</span> --conf spark.rpc.askTimeout<span class="o">=</span>6000s <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --class com.vesoft.nebula.algorithm.Main <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --driver-memory 4g /root/download/nebula-algo.jar <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -p /root/louvain.conf
</span></span></code></pre></td></tr></table>
</div>
</div><p>And the result will be stored in sparkmaster container, under path <code>/output</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># docker exec -it sparkmaster bash</span>
</span></span><span class="line"><span class="cl">ls -l /output
</span></span></code></pre></td></tr></table>
</div>
</div><p>After that, we can do some pre-processing on this Louvain&rsquo;s graph algorithm features and start the traditional model training.</p>
<h3 id="the-graph-neural-network-approach" class="headerLink">
    <a href="#the-graph-neural-network-approach" class="header-mark"></a>1.5 The Graph Neural Network approach</h3><!--

然而，前边这些基于图特征的方法的问题在于：

1. 图特征并不能把关联关系，数据的局部性充分反映到我们的模型、方法里；
2. 图的特征工程是很昂贵、繁琐的。

在最近几年的成果中，基于 GNN 的方法通过将图结构与属性信息进行嵌入表示，使得我们能在不进行图特征抽取、特征工程、专家与工程方法的数据标注的情况下，得到相比于基于传统图特征的机器学习更好的效果。有意思的是，现在正是这些方法快速被发现、演进的时期，基于图的深度学习是之前几年最热门的机器学习研究方向之一。

同时，图深度学习的一些方法可以做到 Inductive Learning——模型可以在新的点、边上进行推理，这样，配合图数据库上线上的子图查询能力，在线实时的风险预测也变得很简单可行了。

-->
<p>However, the problem with these previous graph feature-based approaches is that</p>
<ol>
<li>graph features do not fully reflect the correlations and the locality nature of the data, into our models/ methods.</li>
<li>graph feature engineering could be expensive and cumbersome.</li>
</ol>
<p>In recent years, GNN-based approaches have enabled us to get better results than traditional graph feature-based machine learning by embedding graph structure and attribute information into the representation without graph feature extraction, feature engineering, and data annotation by experts and engineering methods. Interestingly, this is the period when these methods are rapidly being discovered and evolving, and graph-based deep learning is one of the hottest machine learning research directions in the previous years.</p>
<p>At the same time, some methods of graph deep learning can do Inductive Learning - models can inference/reason on new points and edges, so that, together with the ability to query subgraphs on the graph database online, online real-time risk prediction becomes simple and feasible.</p>
<h4 id="example-of-gnn-fraud-detection-system" class="headerLink">
    <a href="#example-of-gnn-fraud-detection-system" class="header-mark"></a>1.5.1 Example of GNN fraud detection system</h4><!--

利用 GNN 的方法中，图数据库并不是必须的，数据的存储可以在其他几种常见的介质之中，但是图库能够最大化助益模型训练、模型更新、线上结果的更新。当我们把图数据库作为数据的单一数据来源（single source of truth）的时候，所有的基于线上、离线、图谱的方法可以很容易被集成起来，从而组合所有方法的优势与结果，做出更有效的欺诈检测复合系统。

在这个示例中我们一样分为：**数据处理**、**模型训练**、**构建检测系统**这几部分。

-->
<p>The storage of data can be in several other common media, but the graph database can maximize the benefit of model training, model updating, and online results updating. When we use the graph database as the single source of truth for the data, all online, offline, and graph-based approaches can be easily integrated to combine the advantages and results of all approaches to make a more effective composite system for fraud detection.</p>
<p>In this example we are divided into the same parts: <strong>Data processing</strong>, <strong>Model training</strong>, <strong>Building an online detection system</strong>.</p>
<blockquote>
<p>Note, I will use Deep Graph library(DGL), NebulaGraph and the bridge between them: Nebula-DGL.</p>
<ul>
<li>DGL: <a href="https://www.dgl.ai/" target="_blank" rel="noopener noreferrer">https://www.dgl.ai/</a></li>
<li>Nebula-DGL: <a href="https://github.com/wey-gu/nebula-dgl" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/nebula-dgl</a>, and yes, I am the author of this project :).</li>
</ul>
</blockquote>
<h5 id="dataset" class="headerLink">
    <a href="#dataset" class="header-mark"></a>1.5.1.1 Dataset</h5><p>In this case, the dataset we use is Yelp-Fraud, who comes from the paper [Enhancing Graph Neural Network-based Fraud Detectors against Camouflaged Fraudsters](https:// paperswithcode.com/paper/enhancing-graph-neural-network-based-fraud).</p>
<p>There is one type of vertex in this diagram and three types of edges.</p>
<ul>
<li>Top points: reviews from restaurants, hotels in Yelp with two types of attributes.
<ul>
<li>Each review has a label labeled whether it is a false or fraudulent review</li>
<li>32 numeric attributes that have been processed</li>
</ul>
</li>
<li>Edge: the association between the three types of reviews
<ul>
<li>R-U-R: two reviews issued by the same user shares_user_with</li>
<li>R-S-R: two reviews by the same restaurant with the same rating (rating can be 1 to 5) shares_restaurant_rating_with</li>
<li>R-T-R: two ratings are from the same restaurant in the same month of submission shares_restaurant_in_one_month_with</li>
</ul>
</li>
</ul>
<p>Before we start, it&rsquo;s asumed this grpah is already loaded into NebulaGraph.</p>
<blockquote>
<p>To load yelp dataset into NeublaGraph, in short, you just do:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># Deploy NebulaGraph</span>
</span></span><span class="line"><span class="cl">curl -fsSL nebula-up.siwei.io/install.sh <span class="p">|</span> bash
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Clone the datadownloader repo</span>
</span></span><span class="line"><span class="cl">git clone https://github.com/wey-gu/nebulagraph-yelp-frauddetection <span class="o">&amp;&amp;</span> <span class="nb">cd</span> nebulagraph-yelp-frauddetection
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Install dep</span>
</span></span><span class="line"><span class="cl">python3 -m pip install -r requirements.txt
</span></span><span class="line"><span class="cl">python3 data_download.py
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># load it into NebulaGraph</span>
</span></span><span class="line"><span class="cl">docker run --rm -ti <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span> --network<span class="o">=</span>nebula-net <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span> -v <span class="si">${</span><span class="nv">PWD</span><span class="si">}</span>/yelp_nebulagraph_importer.yaml:/root/importer.yaml <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span> -v <span class="si">${</span><span class="nv">PWD</span><span class="si">}</span>/data:/root <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span> vesoft/nebula-importer:v3.1.0 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span> --config /root/importer.yaml
</span></span></code></pre></td></tr></table>
</div>
</div><p>More detilas in: <a href="https://github.com/wey-gu/nebulagraph-yelp-frauddetection" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/nebulagraph-yelp-frauddetection</a></p>
</blockquote>
<h5 id="data-processing" class="headerLink">
    <a href="#data-processing" class="header-mark"></a>1.5.1.2 Data Processing</h5><!--

这部分的任务是将图谱中和风险相关子图的拓扑结构表示和其中有关的特征（属性）进行工程处理，序列化成为 DGL 的图对象。

DGL 本身支持从点、边列表（edgelist）形式 CSV 文件，或者从 NetworkX 和 SciPy 的序列化稀疏的邻接矩阵（adjacency matrix）的数据来构造它的图对象，我们可以把原始的图数据或者图库中的数据全量导出为这些形式，不过在真实的例子中图库中的数据是实时变化的，能够直接在 NebulaGraph 中的子图上做 GNN 训练一般来说是更理想。得益于 Nebula-DGL 这个库，做这件事儿是很自然的。

> 注，DGL 外部数据员导入文档：https://docs.dgl.ai/guide/graph-external.html

现在我们开始这个数据的导入，在这之前，我先介绍一下 Nebula-DGL。

Nebula-DGL 可以根据给定的映射和转换规则（YAML 格式），将 NebulaGraph 中的顶点、边，和它们的属性按照规则处理成为点、边、和其中的标注（Label）与特征（Feature），从而构造为 DGL 的图对象。这其中，值得一提的是属性到特征的转换。我们知道，特征可能是某一个属性的值、一个或者多个属性的值做一定的数学变换、亦或是字符型的属性按照枚举规则输出为数字。相应的，Nebula-DGL 在规则中，我们都可以针对这几种情况利用 `filter` 进行表达：

- 特征直接选取属性的值：

-->
<p>The task of this part is to engineer the topological representation of the risk-related subgraphs of the graph and the related features (attributes) in them, and serialize them into graph objects of the DGL.</p>
<p>DGL itself supports constructing its graph objects from CSV files in the form of point and edge lists (edgelist), or from data in the serialized sparse adjacency matrix of NetworkX and SciPy, and we can export the raw graph data or the full amount of data in the graph library to these forms. However, in the real case the data in the library is changing in real time and it is generally better to do GNN training directly on the subgraphs in NebulaGraph. Thanks to the Nebula-DGL library, this is a natural thing to do.</p>
<blockquote>
<p>Note, the DGL external datamaster import documentation: <a href="https://docs.dgl.ai/guide/graph-external.html" target="_blank" rel="noopener noreferrer">https://docs.dgl.ai/guide/graph-external.html</a></p>
</blockquote>
<p>Now let&rsquo;s start this data import, before that I&rsquo;ll introduce Nebula-DGL.</p>
<p>Nebula-DGL can construct graph objects as DGL by processing vertices, edges, and their properties in NebulaGraph into vertecies, edges, and their labels and features according to the given mapping and transformation rules (YAML format). Among them, it is worth mentioning the property-to-feature conversion.</p>
<p>As we know, a feature can be:</p>
<ul>
<li>The value of a property</li>
<li>The value of one or more properties with certain mathematical transformations</li>
<li>The output of a character property as a number according to enumeration rules</li>
</ul>
<p>Thus, they can be expressed in the Nebula-DGL API using <code>filter</code> for each of these cases, and let&rsquo;s see how this could be done in examples:</p>
<ul>
<li>Featre extracted directly from value of vertex/edge property</li>
</ul>
<p>In this example, the edge type <code>follow</code> will be extracted, where the property <code>degree</code>&rsquo;s value will be treated as a feature directly, and its expression in Nebula-DGL is:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">edge_types</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">follow</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">start_vertex_tag</span><span class="p">:</span><span class="w"> </span><span class="l">player</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">end_vertex_tag</span><span class="p">:</span><span class="w"> </span><span class="l">player</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">features</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">degree</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">degree</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">int</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">nullable</span><span class="p">:</span><span class="w"> </span><span class="kc">False</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">filter</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">value</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>Feature comes from mathematical transformations of properties</li>
</ul>
<p>In this example, we take the two properties in the <code>serve</code> edge and process <code>(end_year - start_year) / 30</code> to become a feature called <code>service_time</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">edge_types</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">serve</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">start_vertex_tag</span><span class="p">:</span><span class="w"> </span><span class="l">player</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">end_vertex_tag</span><span class="p">:</span><span class="w"> </span><span class="l">team</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">features</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">service_time</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">start_year</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">int</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">nullable</span><span class="p">:</span><span class="w"> </span><span class="kc">False</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">end_year</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">int</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">nullable</span><span class="p">:</span><span class="w"> </span><span class="kc">False</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># The variable was mapped by order of properties</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">filter</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">function</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">function</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;lambda start_year, end_year: (end_year - start_year) / 30&#34;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>Enumerated property values into numeric features</li>
</ul>
<p>In this example, we enumerate the <code>name</code> perperty in the <code>team</code> vertex, based on the whether they are east cost or west coast.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">vertex_tags</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">team</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">features</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">coast</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">str</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">nullable</span><span class="p">:</span><span class="w"> </span><span class="kc">False</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">filter</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="c"># 0 stand for the east coast, 1 stand for the west coast</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">enumeration</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">enumeration</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">Celtics</span><span class="p">:</span><span class="w"> </span><span class="m">0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">Nets</span><span class="p">:</span><span class="w"> </span><span class="m">0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">Nuggets</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">Timberwolves</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">Thunder</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># ... not showing all teams here</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Now we could see the trasforming API of Neubla-DGL is quite straightforward, and you could see full examples with details in <a href="https://github.com/wey-gu/nebula-dgl/tree/main/example" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/nebula-dgl/tree/main/example</a>.</p>
<p>With this transforming API being undsood, let&rsquo;s started to process the Yelp dataset:</p>
<p>First, let&rsquo;s define this transforming rule, where, we transform TAG: review and all three EDGE Types, with their properties values directly transforming into features:</p>
<p><code>nebulagraph_yelp_dgl_mapper.yaml</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># If vertex id is string-typed, remap_vertex_id must be true.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">remap_vertex_id</span><span class="p">:</span><span class="w"> </span><span class="kc">True</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">space</span><span class="p">:</span><span class="w"> </span><span class="l">yelp</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># str or int</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">vertex_id_type</span><span class="p">:</span><span class="w"> </span><span class="l">int</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">vertex_tags</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">review</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">label</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">is_fraud</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">is_fraud</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">int</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">nullable</span><span class="p">:</span><span class="w"> </span><span class="kc">False</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">filter</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">value</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">features</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">f0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">f0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">float</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">nullable</span><span class="p">:</span><span class="w"> </span><span class="kc">False</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">filter</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">value</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">f1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">f1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">float</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">nullable</span><span class="p">:</span><span class="w"> </span><span class="kc">False</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">filter</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">value</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># ...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">f31</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">f31</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">float</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">nullable</span><span class="p">:</span><span class="w"> </span><span class="kc">False</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">filter</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">value</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">edge_types</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">shares_user_with</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">start_vertex_tag</span><span class="p">:</span><span class="w"> </span><span class="l">review</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">end_vertex_tag</span><span class="p">:</span><span class="w"> </span><span class="l">review</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">shares_restaurant_rating_with</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">start_vertex_tag</span><span class="p">:</span><span class="w"> </span><span class="l">review</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">end_vertex_tag</span><span class="p">:</span><span class="w"> </span><span class="l">review</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">shares_restaurant_in_one_month_with</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">start_vertex_tag</span><span class="p">:</span><span class="w"> </span><span class="l">review</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">end_vertex_tag</span><span class="p">:</span><span class="w"> </span><span class="l">review</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Then, after nebula-dgl being installed, we could construct a DGL <code>DGLHeteroGraph</code> in these following lines:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">nebula_dgl</span> <span class="kn">import</span> <span class="n">NebulaLoader</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">nebula_config</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;graph_hosts&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                <span class="p">(</span><span class="s1">&#39;graphd&#39;</span><span class="p">,</span> <span class="mi">9669</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                <span class="p">(</span><span class="s1">&#39;graphd1&#39;</span><span class="p">,</span> <span class="mi">9669</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                <span class="p">(</span><span class="s1">&#39;graphd2&#39;</span><span class="p">,</span> <span class="mi">9669</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;nebula_user&#34;</span><span class="p">:</span> <span class="s2">&#34;root&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;nebula_password&#34;</span><span class="p">:</span> <span class="s2">&#34;nebula&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># load feature_mapper from yaml file</span>
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;nebulagraph_yelp_dgl_mapper.yaml&#39;</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">feature_mapper</span> <span class="o">=</span> <span class="n">yaml</span><span class="o">.</span><span class="n">safe_load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">nebula_loader</span> <span class="o">=</span> <span class="n">NebulaLoader</span><span class="p">(</span><span class="n">nebula_config</span><span class="p">,</span> <span class="n">feature_mapper</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span> <span class="o">=</span> <span class="n">nebula_loader</span><span class="o">.</span><span class="n">load</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">g</span> <span class="o">=</span> <span class="n">g</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="s1">&#39;cpu&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">device</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">device</span><span class="p">(</span><span class="s1">&#39;cpu&#39;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h5 id="model-training" class="headerLink">
    <a href="#model-training" class="header-mark"></a>1.5.1.3 Model Training</h5><!--

这里，我用 [GraphSAGE](https://cs.stanford.edu/people/jure/pubs/graphsage-nips17.pdf) 算法的点分类（Node Classification）方法来举例，GraphSAGE 的原始版本是一个归纳学习（Inductive Learning）的算法，这里，归纳学习区别于它的反面： Transductive Learning ，可以把新的数据用在完全旧的图之上习得的模型，这样训练出来的模型可以进行线上增量数据的欺诈检测（而不是需要重新加载为全图训练才可以）。

-->
<p>Here, I use the Node Classification method of the <a href="https://cs.stanford.edu/people/jure/pubs/graphsage-nips17.pdf" target="_blank" rel="noopener noreferrer">GraphSAGE</a> algorithm as an example, the original version of GraphSAGE is an Inductive Learning algorithm.</p>
<p>An Inductive Learning algorithm, which is distinguished from its opposite: Transductive Learning, means that new data can be used on top of a completely old graph to acquire a model so that the trained model can be used for online incremental data fraud detection (instead of needing to be reloaded to the full graph for training).</p>
<p><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/182301784-21850dac-0d47-4dd5-b66f-a28b87fe9d4d.svg" title="GraphSAGE_FraudDetection" data-thumbnail="https://user-images.githubusercontent.com/1651790/182301784-21850dac-0d47-4dd5-b66f-a28b87fe9d4d.svg">
        
    </a></p>
<p>Model training system (left).</p>
<ul>
<li>Input: A historical transaction graph with fraud annotation</li>
<li>Output: A GraphSAGE DGL model</li>
</ul>
<p>Online inference system (right).</p>
<ul>
<li>
<p>Model: GraphSAGE-based training based on historical transaction graphs with fraud annotations</p>
</li>
<li>
<p>Input: A new transaction</p>
</li>
<li>
<p>Output: Whether the transaction is suspected of being fraudulent</p>
</li>
</ul>
<p><strong>Dataset split</strong></p>
<!--

机器学习训练的过程需要在已经有的数据、信息中分割出用来训练、验证和测试的子集，他们可以是不相交的整体数据的真子集也可以彼此有重叠，在实际的情况中，有时候我们对数据的标注常常是不充分的，所以按照标注的比例去分割数据可能更有意义一些，下边的例子是我按照点上是否标注欺诈为标准去分割数据集。

这里边有两个地方值得注意：

1. `train_test_split` 中的 `stratify=g.ndata['is_fraud']` 代表保持 `is_fraud` 的值的分布去分割，符合我们前边提到的思想。
2. 我们分割的是 `idx` 索引，这样，可以最终获得三个集合的索引，供训练、验证和测试时候使用。同时我们还把对应集合 mask 放到图对象 `g` 里边去了。

-->
<p>The process of machine learning training requires partitioning the already available data, information for training, validation and testing subsets, they can be either disjoint true subsets of the overall data or overlap each other.</p>
<p>In practice, sometimes our labeling of data is often inadequate, so it may make more sense to partition the data according to the proportion of labeling, the following example I segmented the dataset according to whether the vertices are labeled with fraud or not.</p>
<p>There are two points worth noting here.</p>
<ol>
<li><code>stratify=g.ndata['is_fraud']</code> in <code>train_test_split</code> represents to keep the distribution of the values of <code>is_fraud</code> to split, which is in line with the idea we mentioned above.</li>
<li>we split the <code>idx</code> index, so that we can end up with three sets of indexes for training, validation and testing. At the same time, we also put the corresponding set of masks into the graph object <code>g</code>.</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># Split the graph into train, validation, and test sets</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">train_test_split</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># features are g.ndata[&#39;f0&#39;], g.ndata[&#39;f1&#39;], g.ndata[&#39;f2&#39;], ... g.ndata[&#39;f31&#39;]</span>
</span></span><span class="line"><span class="cl"><span class="c1"># label is in g.ndata[&#39;is_fraud&#39;]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># concatenate all features</span>
</span></span><span class="line"><span class="cl"><span class="n">features</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">32</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">features</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;f&#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;feat&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">stack</span><span class="p">(</span><span class="n">features</span><span class="p">,</span> <span class="n">dim</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;label&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">g</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;is_fraud&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="c1"># numpy array as an index of range n</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">idx</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">tensor</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">number_of_nodes</span><span class="p">()),</span> <span class="n">device</span><span class="o">=</span><span class="n">device</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">int64</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># split based on value distribution of label: the property &#34;is_fraud&#34;, which is a binary variable.</span>
</span></span><span class="line"><span class="cl"><span class="n">X_train_and_val_idx</span><span class="p">,</span> <span class="n">X_test_idx</span><span class="p">,</span> <span class="n">y_train_and_val</span><span class="p">,</span> <span class="n">y_test</span> <span class="o">=</span> <span class="n">train_test_split</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">idx</span><span class="p">,</span> <span class="n">g</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;is_fraud&#39;</span><span class="p">],</span> <span class="n">test_size</span><span class="o">=</span><span class="mf">0.2</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">,</span> <span class="n">stratify</span><span class="o">=</span><span class="n">g</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;is_fraud&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># split train and val</span>
</span></span><span class="line"><span class="cl"><span class="n">X_train_idx</span><span class="p">,</span> <span class="n">X_val_idx</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">y_val</span> <span class="o">=</span> <span class="n">train_test_split</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">X_train_and_val_idx</span><span class="p">,</span> <span class="n">y_train_and_val</span><span class="p">,</span> <span class="n">test_size</span><span class="o">=</span><span class="mf">0.2</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">,</span> <span class="n">stratify</span><span class="o">=</span><span class="n">y_train_and_val</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># list of index to mask</span>
</span></span><span class="line"><span class="cl"><span class="n">train_mask</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">number_of_nodes</span><span class="p">(),</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">bool</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">train_mask</span><span class="p">[</span><span class="n">X_train_idx</span><span class="p">]</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">val_mask</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">number_of_nodes</span><span class="p">(),</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">bool</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">val_mask</span><span class="p">[</span><span class="n">X_val_idx</span><span class="p">]</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">test_mask</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">number_of_nodes</span><span class="p">(),</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">bool</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">test_mask</span><span class="p">[</span><span class="n">X_test_idx</span><span class="p">]</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;train_mask&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">train_mask</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;val_mask&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">val_mask</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;test_mask&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">test_mask</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Heterogeneous graph to Homogeneous graph</strong></p>
<!--

GraphSAGE 是针对同构图，且边无 feature 的算法，而我们当下的 Yelp 图谱是异构的：一类点、三类边。那么，如何才能用 GraphSAGE 去建模 Yelp 图谱呢？

我们除了选择用针对异构图的 Inductive Learning 方法之外，还可想办法把同构图转换成异构图。为了在转换中不丢失重要的边类型信息，我们可以把边类型变成数值。

这里我给了一维的 edge feature，当然（3-1）二维也是可以的。

-->
<p>GraphSAGE is an algorithm for Homogeneous graphs with no feature on edges, while our current Yelp graph is Heterogeneous: one type of vertex(TAG) and three types of edges. So, how can we use GraphSAGE to model Yelp graphs?</p>
<p>Instead of finding another Inductive Learning to supports heterogeneous graphs, I actually find a way to convert homogeneous graph into a heterogeneous one. In order not to lose important edge type information in the conversion, we can make the edge type numeric.</p>
<p>Here I have given a one-dimensional edge feature, but of course (3-1) two-dimensional is also possible.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># shares_restaurant_in_one_month_with: 1, b&#34;001&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># shares_restaurant_rating_with: 2, b&#34;010&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># shares_user_with: 4, b&#34;100&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>Note: we could directly parse 3-type of edges mapped to [0, 1, 2] from <code>hg.edata['_TYPE']</code>, referring to   <a href="https://docs.dgl.ai/en/0.9.x/generated/dgl.to_homogeneous.html" target="_blank" rel="noopener noreferrer">https://docs.dgl.ai/en/0.9.x/generated/dgl.to_homogeneous.html</a>, while I chose not to do so due to 0 cannot be appied to edge weight(it will end up 0 value in message passsing for this 0 type).</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># three types of edges</span>
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="n">g</span><span class="o">.</span><span class="n">etypes</span>
</span></span><span class="line"><span class="cl"><span class="n">Out</span><span class="p">[</span><span class="mi">1</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="s1">&#39;shares_restaurant_in_one_month_with&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"> <span class="s1">&#39;shares_restaurant_rating_with&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"> <span class="s1">&#39;shares_user_with&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">2</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">edges</span><span class="p">[</span><span class="s1">&#39;shares_restaurant_in_one_month_with&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="s1">&#39;he&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">ones</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">g</span><span class="o">.</span><span class="n">number_of_edges</span><span class="p">(</span><span class="s1">&#39;shares_restaurant_in_one_month_with&#39;</span><span class="p">),</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">int64</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">edges</span><span class="p">[</span><span class="s1">&#39;shares_restaurant_rating_with&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="s1">&#39;he&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">full</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">number_of_edges</span><span class="p">(</span><span class="s1">&#39;shares_restaurant_rating_with&#39;</span><span class="p">),),</span> <span class="mi">2</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">int64</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">edges</span><span class="p">[</span><span class="s1">&#39;shares_user_with&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="s1">&#39;he&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">full</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">number_of_edges</span><span class="p">(</span><span class="s1">&#39;shares_user_with&#39;</span><span class="p">),),</span> <span class="mi">4</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">int64</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">3</span><span class="p">]:</span> <span class="n">g</span><span class="o">.</span><span class="n">edata</span><span class="p">[</span><span class="s1">&#39;he&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">Out</span><span class="p">[</span><span class="mi">3</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl"><span class="p">{(</span><span class="s1">&#39;review&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;shares_restaurant_in_one_month_with&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;review&#39;</span><span class="p">):</span> <span class="n">tensor</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span>  <span class="o">...</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]),</span>
</span></span><span class="line"><span class="cl"> <span class="p">(</span><span class="s1">&#39;review&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;shares_restaurant_rating_with&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;review&#39;</span><span class="p">):</span> <span class="n">tensor</span><span class="p">([</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span>  <span class="o">...</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">]),</span>
</span></span><span class="line"><span class="cl"> <span class="p">(</span><span class="s1">&#39;review&#39;</span><span class="p">,</span> <span class="s1">&#39;shares_user_with&#39;</span><span class="p">,</span> <span class="s1">&#39;review&#39;</span><span class="p">):</span> <span class="n">tensor</span><span class="p">([</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span>  <span class="o">...</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">])}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>ref: <a href="https://discuss.dgl.ai/t/how-to-convert-from-a-heterogeneous-graph-to-a-homogeneous-graph-with-data/2764" target="_blank" rel="noopener noreferrer">https://discuss.dgl.ai/t/how-to-convert-from-a-heterogeneous-graph-to-a-homogeneous-graph-with-data/2764</a></p>
</blockquote>
<p>Then transform it to a homogeneous graph, with <code>he</code> as kept edata</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">hg</span> <span class="o">=</span> <span class="n">dgl</span><span class="o">.</span><span class="n">to_homogeneous</span><span class="p">(</span><span class="n">g</span><span class="p">,</span> <span class="n">edata</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;he&#39;</span><span class="p">],</span> <span class="n">ndata</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;feat&#39;</span><span class="p">,</span> <span class="s1">&#39;label&#39;</span><span class="p">,</span> <span class="s1">&#39;train_mask&#39;</span><span class="p">,</span> <span class="s1">&#39;val_mask&#39;</span><span class="p">,</span> <span class="s1">&#39;test_mask&#39;</span><span class="p">])</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>ref: <a href="https://docs.dgl.ai/en/latest/guide/graph-heterogeneous.html?highlight=to_homogeneous#converting-heterogeneous-graphs-to-homogeneous-graphs" target="_blank" rel="noopener noreferrer">https://docs.dgl.ai/en/latest/guide/graph-heterogeneous.html?highlight=to_homogeneous#converting-heterogeneous-graphs-to-homogeneous-graphs</a></p>
</blockquote>
<p>The vanilla GraphSAGE implementation in dgl doesn&rsquo;t consider edge feature, thus I override/changed that message passing part of code, which will be revealed later.</p>
<blockquote>
<p>Ref</p>
<ul>
<li><a href="https://discuss.dgl.ai/t/frequently-asked-questions-faq/1681" target="_blank" rel="noopener noreferrer">https://discuss.dgl.ai/t/frequently-asked-questions-faq/1681</a> （Question 13）</li>
<li><a href="https://discuss.dgl.ai/t/using-node-and-edge-features-in-message-passing/762" target="_blank" rel="noopener noreferrer">https://discuss.dgl.ai/t/using-node-and-edge-features-in-message-passing/762</a></li>
</ul>
</blockquote>
<p><strong>Code of model training</strong></p>
<p>We could refer to the dgl example of graphsage: <a href="https://github.com/dmlc/dgl/tree/master/examples/pytorch/graphsage" target="_blank" rel="noopener noreferrer">https://github.com/dmlc/dgl/tree/master/examples/pytorch/graphsage</a>.</p>
<p>As our graph comes with edge feature(due to the conversion), we could modify GraphSAGE in two ways:</p>
<p>a. Considering edge features, for example, if mean aggreation is used, change could be:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl">  graph.update_all(msg_fn, fn.mean(&#39;m&#39;, &#39;neigh&#39;))
</span></span><span class="line"><span class="cl"><span class="gi">+ graph.update_all(fn.copy_e(&#39;he&#39;, &#39;m&#39;), fn.mean(&#39;m&#39;, &#39;neigh&#39;))
</span></span></span><span class="line"><span class="cl"><span class="gi"></span><span class="gd">- h_neigh = graph.dstdata[&#39;neigh&#39;]
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+ h_neigh = torch.cat((graph.dstdata[&#39;neigh&#39;], graph.dstdata[&#39;neigh_e&#39;].reshape(-1, 1)), 1)
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Note that, apart from the above change, the feature dimension should be taken care, too.</p>
<p>b. Treate edge feature as edge weight:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl"><span class="gd">- graph.update_all(msg_fn, fn.mean(&#39;m&#39;, &#39;neigh&#39;))
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+ # consdier datatype with different weight, g.edata[&#39;he&#39;] as weight here
</span></span></span><span class="line"><span class="cl"><span class="gi">+ g.update_all(fn.u_mul_e(&#39;h&#39;, &#39;he&#39;, &#39;m&#39;), fn.mean(&#39;m&#39;, &#39;h&#39;))
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Here, I&rsquo;ll do it in b. as weight, with mean aggration:</p>
<p>Override the <code>SAGEConv</code>：</p>
<blockquote>
<p>With only the Message Passing part changed.</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">dgl</span> <span class="kn">import</span> <span class="n">function</span> <span class="k">as</span> <span class="n">fn</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">dgl.utils</span> <span class="kn">import</span> <span class="n">check_eq_shape</span><span class="p">,</span> <span class="n">expand_as_pair</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">SAGEConv</span><span class="p">(</span><span class="n">dglnn</span><span class="o">.</span><span class="n">SAGEConv</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">graph</span><span class="p">,</span> <span class="n">feat</span><span class="p">,</span> <span class="n">edge_weight</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="sa">r</span><span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">        Description
</span></span></span><span class="line"><span class="cl"><span class="s2">        -----------
</span></span></span><span class="line"><span class="cl"><span class="s2">        Compute GraphSAGE layer.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">        Parameters
</span></span></span><span class="line"><span class="cl"><span class="s2">        ----------
</span></span></span><span class="line"><span class="cl"><span class="s2">        graph : DGLGraph
</span></span></span><span class="line"><span class="cl"><span class="s2">            The graph.
</span></span></span><span class="line"><span class="cl"><span class="s2">        feat : torch.Tensor or pair of torch.Tensor
</span></span></span><span class="line"><span class="cl"><span class="s2">            If a torch.Tensor is given, it represents the input feature of shape
</span></span></span><span class="line"><span class="cl"><span class="s2">            :math:`(N, D_</span><span class="si">{in}</span><span class="s2">)`
</span></span></span><span class="line"><span class="cl"><span class="s2">            where :math:`D_</span><span class="si">{in}</span><span class="s2">` is size of input feature, :math:`N` is the number of nodes.
</span></span></span><span class="line"><span class="cl"><span class="s2">            If a pair of torch.Tensor is given, the pair must contain two tensors of shape
</span></span></span><span class="line"><span class="cl"><span class="s2">            :math:`(N_</span><span class="si">{in}</span><span class="s2">, D_{in_</span><span class="si">{src}</span><span class="s2">})` and :math:`(N_</span><span class="si">{out}</span><span class="s2">, D_{in_</span><span class="si">{dst}</span><span class="s2">})`.
</span></span></span><span class="line"><span class="cl"><span class="s2">        edge_weight : torch.Tensor, optional
</span></span></span><span class="line"><span class="cl"><span class="s2">            Optional tensor on the edge. If given, the convolution will weight
</span></span></span><span class="line"><span class="cl"><span class="s2">            with regard to the message.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">        Returns
</span></span></span><span class="line"><span class="cl"><span class="s2">        -------
</span></span></span><span class="line"><span class="cl"><span class="s2">        torch.Tensor
</span></span></span><span class="line"><span class="cl"><span class="s2">            The output feature of shape :math:`(N_</span><span class="si">{dst}</span><span class="s2">, D_</span><span class="si">{out}</span><span class="s2">)`
</span></span></span><span class="line"><span class="cl"><span class="s2">            where :math:`N_</span><span class="si">{dst}</span><span class="s2">` is the number of destination nodes in the input graph,
</span></span></span><span class="line"><span class="cl"><span class="s2">            :math:`D_</span><span class="si">{out}</span><span class="s2">` is the size of the output feature.
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">_compatibility_check</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="k">with</span> <span class="n">graph</span><span class="o">.</span><span class="n">local_scope</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">feat</span><span class="p">,</span> <span class="nb">tuple</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">                <span class="n">feat_src</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">feat_drop</span><span class="p">(</span><span class="n">feat</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">                <span class="n">feat_dst</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">feat_drop</span><span class="p">(</span><span class="n">feat</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">feat_src</span> <span class="o">=</span> <span class="n">feat_dst</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">feat_drop</span><span class="p">(</span><span class="n">feat</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="n">graph</span><span class="o">.</span><span class="n">is_block</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="n">feat_dst</span> <span class="o">=</span> <span class="n">feat_src</span><span class="p">[:</span><span class="n">graph</span><span class="o">.</span><span class="n">number_of_dst_nodes</span><span class="p">()]</span>
</span></span><span class="line"><span class="cl">            <span class="n">msg_fn</span> <span class="o">=</span> <span class="n">fn</span><span class="o">.</span><span class="n">copy_src</span><span class="p">(</span><span class="s1">&#39;h&#39;</span><span class="p">,</span> <span class="s1">&#39;m&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">edge_weight</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">assert</span> <span class="n">edge_weight</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">graph</span><span class="o">.</span><span class="n">number_of_edges</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                <span class="n">graph</span><span class="o">.</span><span class="n">edata</span><span class="p">[</span><span class="s1">&#39;_edge_weight&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">edge_weight</span>
</span></span><span class="line"><span class="cl">                <span class="n">msg_fn</span> <span class="o">=</span> <span class="n">fn</span><span class="o">.</span><span class="n">u_mul_e</span><span class="p">(</span><span class="s1">&#39;h&#39;</span><span class="p">,</span> <span class="s1">&#39;_edge_weight&#39;</span><span class="p">,</span> <span class="s1">&#39;m&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="n">h_self</span> <span class="o">=</span> <span class="n">feat_dst</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1"># Handle the case of graphs without edges</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">graph</span><span class="o">.</span><span class="n">number_of_edges</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">graph</span><span class="o">.</span><span class="n">dstdata</span><span class="p">[</span><span class="s1">&#39;neigh&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                    <span class="n">feat_dst</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="bp">self</span><span class="o">.</span><span class="n">_in_src_feats</span><span class="p">)</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">feat_dst</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1"># Determine whether to apply linear transformation before message passing A(XW)</span>
</span></span><span class="line"><span class="cl">            <span class="n">lin_before_mp</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_in_src_feats</span> <span class="o">&gt;</span> <span class="bp">self</span><span class="o">.</span><span class="n">_out_feats</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1"># Message Passing</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">_aggre_type</span> <span class="o">==</span> <span class="s1">&#39;mean&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">graph</span><span class="o">.</span><span class="n">srcdata</span><span class="p">[</span><span class="s1">&#39;h&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">fc_neigh</span><span class="p">(</span><span class="n">feat_src</span><span class="p">)</span> <span class="k">if</span> <span class="n">lin_before_mp</span> <span class="k">else</span> <span class="n">feat_src</span>
</span></span><span class="line"><span class="cl">                <span class="c1"># graph.update_all(msg_fn, fn.mean(&#39;m&#39;, &#39;neigh&#39;))</span>
</span></span><span class="line"><span class="cl">                <span class="c1">#########################################################################</span>
</span></span><span class="line"><span class="cl">                <span class="c1"># consdier datatype with different weight, g.edata[&#39;he&#39;] as weight here</span>
</span></span><span class="line"><span class="cl">                <span class="n">g</span><span class="o">.</span><span class="n">update_all</span><span class="p">(</span><span class="n">fn</span><span class="o">.</span><span class="n">u_mul_e</span><span class="p">(</span><span class="s1">&#39;h&#39;</span><span class="p">,</span> <span class="s1">&#39;he&#39;</span><span class="p">,</span> <span class="s1">&#39;m&#39;</span><span class="p">),</span> <span class="n">fn</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="s1">&#39;m&#39;</span><span class="p">,</span> <span class="s1">&#39;h&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                <span class="c1">#########################################################################</span>
</span></span><span class="line"><span class="cl">                <span class="n">h_neigh</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">dstdata</span><span class="p">[</span><span class="s1">&#39;neigh&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="ow">not</span> <span class="n">lin_before_mp</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="n">h_neigh</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">fc_neigh</span><span class="p">(</span><span class="n">h_neigh</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">_aggre_type</span> <span class="o">==</span> <span class="s1">&#39;gcn&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">check_eq_shape</span><span class="p">(</span><span class="n">feat</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">graph</span><span class="o">.</span><span class="n">srcdata</span><span class="p">[</span><span class="s1">&#39;h&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">fc_neigh</span><span class="p">(</span><span class="n">feat_src</span><span class="p">)</span> <span class="k">if</span> <span class="n">lin_before_mp</span> <span class="k">else</span> <span class="n">feat_src</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">feat</span><span class="p">,</span> <span class="nb">tuple</span><span class="p">):</span>  <span class="c1"># heterogeneous</span>
</span></span><span class="line"><span class="cl">                    <span class="n">graph</span><span class="o">.</span><span class="n">dstdata</span><span class="p">[</span><span class="s1">&#39;h&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">fc_neigh</span><span class="p">(</span><span class="n">feat_dst</span><span class="p">)</span> <span class="k">if</span> <span class="n">lin_before_mp</span> <span class="k">else</span> <span class="n">feat_dst</span>
</span></span><span class="line"><span class="cl">                <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="k">if</span> <span class="n">graph</span><span class="o">.</span><span class="n">is_block</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                        <span class="n">graph</span><span class="o">.</span><span class="n">dstdata</span><span class="p">[</span><span class="s1">&#39;h&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">srcdata</span><span class="p">[</span><span class="s1">&#39;h&#39;</span><span class="p">][:</span><span class="n">graph</span><span class="o">.</span><span class="n">num_dst_nodes</span><span class="p">()]</span>
</span></span><span class="line"><span class="cl">                    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                        <span class="n">graph</span><span class="o">.</span><span class="n">dstdata</span><span class="p">[</span><span class="s1">&#39;h&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">srcdata</span><span class="p">[</span><span class="s1">&#39;h&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">                <span class="n">graph</span><span class="o">.</span><span class="n">update_all</span><span class="p">(</span><span class="n">msg_fn</span><span class="p">,</span> <span class="n">fn</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="s1">&#39;m&#39;</span><span class="p">,</span> <span class="s1">&#39;neigh&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                <span class="n">graph</span><span class="o">.</span><span class="n">update_all</span><span class="p">(</span><span class="n">fn</span><span class="o">.</span><span class="n">copy_e</span><span class="p">(</span><span class="s1">&#39;he&#39;</span><span class="p">,</span> <span class="s1">&#39;m&#39;</span><span class="p">),</span> <span class="n">fn</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="s1">&#39;m&#39;</span><span class="p">,</span> <span class="s1">&#39;neigh&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                <span class="c1"># divide in_degrees</span>
</span></span><span class="line"><span class="cl">                <span class="n">degs</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">in_degrees</span><span class="p">()</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">feat_dst</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">h_neigh</span> <span class="o">=</span> <span class="p">(</span><span class="n">graph</span><span class="o">.</span><span class="n">dstdata</span><span class="p">[</span><span class="s1">&#39;neigh&#39;</span><span class="p">]</span> <span class="o">+</span> <span class="n">graph</span><span class="o">.</span><span class="n">dstdata</span><span class="p">[</span><span class="s1">&#39;h&#39;</span><span class="p">])</span> <span class="o">/</span> <span class="p">(</span><span class="n">degs</span><span class="o">.</span><span class="n">unsqueeze</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="ow">not</span> <span class="n">lin_before_mp</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="n">h_neigh</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">fc_neigh</span><span class="p">(</span><span class="n">h_neigh</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">_aggre_type</span> <span class="o">==</span> <span class="s1">&#39;pool&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">graph</span><span class="o">.</span><span class="n">srcdata</span><span class="p">[</span><span class="s1">&#39;h&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">F</span><span class="o">.</span><span class="n">relu</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">fc_pool</span><span class="p">(</span><span class="n">feat_src</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                <span class="n">graph</span><span class="o">.</span><span class="n">update_all</span><span class="p">(</span><span class="n">msg_fn</span><span class="p">,</span> <span class="n">fn</span><span class="o">.</span><span class="n">max</span><span class="p">(</span><span class="s1">&#39;m&#39;</span><span class="p">,</span> <span class="s1">&#39;neigh&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                <span class="n">graph</span><span class="o">.</span><span class="n">update_all</span><span class="p">(</span><span class="n">fn</span><span class="o">.</span><span class="n">copy_e</span><span class="p">(</span><span class="s1">&#39;he&#39;</span><span class="p">,</span> <span class="s1">&#39;m&#39;</span><span class="p">),</span> <span class="n">fn</span><span class="o">.</span><span class="n">max</span><span class="p">(</span><span class="s1">&#39;m&#39;</span><span class="p">,</span> <span class="s1">&#39;neigh&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                <span class="n">h_neigh</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">fc_neigh</span><span class="p">(</span><span class="n">graph</span><span class="o">.</span><span class="n">dstdata</span><span class="p">[</span><span class="s1">&#39;neigh&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">            <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">_aggre_type</span> <span class="o">==</span> <span class="s1">&#39;lstm&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">graph</span><span class="o">.</span><span class="n">srcdata</span><span class="p">[</span><span class="s1">&#39;h&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">feat_src</span>
</span></span><span class="line"><span class="cl">                <span class="n">graph</span><span class="o">.</span><span class="n">update_all</span><span class="p">(</span><span class="n">msg_fn</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">_lstm_reducer</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">h_neigh</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">fc_neigh</span><span class="p">(</span><span class="n">graph</span><span class="o">.</span><span class="n">dstdata</span><span class="p">[</span><span class="s1">&#39;neigh&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">raise</span> <span class="ne">KeyError</span><span class="p">(</span><span class="s1">&#39;Aggregator type </span><span class="si">{}</span><span class="s1"> not recognized.&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_aggre_type</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1"># GraphSAGE GCN does not require fc_self.</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">_aggre_type</span> <span class="o">==</span> <span class="s1">&#39;gcn&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">rst</span> <span class="o">=</span> <span class="n">h_neigh</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">rst</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">fc_self</span><span class="p">(</span><span class="n">h_self</span><span class="p">)</span> <span class="o">+</span> <span class="n">h_neigh</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1"># bias term</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">bias</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">rst</span> <span class="o">=</span> <span class="n">rst</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">bias</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1"># activation</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">activation</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">rst</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">activation</span><span class="p">(</span><span class="n">rst</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># normalization</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">norm</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">rst</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">norm</span><span class="p">(</span><span class="n">rst</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">rst</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Define the model structure</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">SAGE</span><span class="p">(</span><span class="n">nn</span><span class="o">.</span><span class="n">Module</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">in_size</span><span class="p">,</span> <span class="n">hid_size</span><span class="p">,</span> <span class="n">out_size</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="fm">__init__</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">layers</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">ModuleList</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># three-layer GraphSAGE-mean</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">layers</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">dglnn</span><span class="o">.</span><span class="n">SAGEConv</span><span class="p">(</span><span class="n">in_size</span><span class="p">,</span> <span class="n">hid_size</span><span class="p">,</span> <span class="s1">&#39;mean&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">layers</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">dglnn</span><span class="o">.</span><span class="n">SAGEConv</span><span class="p">(</span><span class="n">hid_size</span><span class="p">,</span> <span class="n">hid_size</span><span class="p">,</span> <span class="s1">&#39;mean&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">layers</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">dglnn</span><span class="o">.</span><span class="n">SAGEConv</span><span class="p">(</span><span class="n">hid_size</span><span class="p">,</span> <span class="n">out_size</span><span class="p">,</span> <span class="s1">&#39;mean&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">dropout</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">Dropout</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">hid_size</span> <span class="o">=</span> <span class="n">hid_size</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">out_size</span> <span class="o">=</span> <span class="n">out_size</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">blocks</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">h</span> <span class="o">=</span> <span class="n">x</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">l</span><span class="p">,</span> <span class="p">(</span><span class="n">layer</span><span class="p">,</span> <span class="n">block</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">layers</span><span class="p">,</span> <span class="n">blocks</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">            <span class="n">h</span> <span class="o">=</span> <span class="n">layer</span><span class="p">(</span><span class="n">block</span><span class="p">,</span> <span class="n">h</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">l</span> <span class="o">!=</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">layers</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">h</span> <span class="o">=</span> <span class="n">F</span><span class="o">.</span><span class="n">relu</span><span class="p">(</span><span class="n">h</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">h</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">dropout</span><span class="p">(</span><span class="n">h</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">h</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">inference</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">g</span><span class="p">,</span> <span class="n">device</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;Conduct layer-wise inference to get all the node embeddings.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="n">feat</span> <span class="o">=</span> <span class="n">g</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;feat&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">sampler</span> <span class="o">=</span> <span class="n">MultiLayerFullNeighborSampler</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">prefetch_node_feats</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;feat&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">        <span class="n">dataloader</span> <span class="o">=</span> <span class="n">DataLoader</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="n">g</span><span class="p">,</span> <span class="n">torch</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">num_nodes</span><span class="p">())</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">device</span><span class="p">),</span> <span class="n">sampler</span><span class="p">,</span> <span class="n">device</span><span class="o">=</span><span class="n">device</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="n">batch_size</span><span class="o">=</span><span class="n">batch_size</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span> <span class="n">drop_last</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="n">num_workers</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">buffer_device</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">device</span><span class="p">(</span><span class="s1">&#39;cpu&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">pin_memory</span> <span class="o">=</span> <span class="p">(</span><span class="n">buffer_device</span> <span class="o">!=</span> <span class="n">device</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">l</span><span class="p">,</span> <span class="n">layer</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">layers</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">y</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">empty</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="n">g</span><span class="o">.</span><span class="n">num_nodes</span><span class="p">(),</span> <span class="bp">self</span><span class="o">.</span><span class="n">hid_size</span> <span class="k">if</span> <span class="n">l</span> <span class="o">!=</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">layers</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span> <span class="k">else</span> <span class="bp">self</span><span class="o">.</span><span class="n">out_size</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="n">device</span><span class="o">=</span><span class="n">buffer_device</span><span class="p">,</span> <span class="n">pin_memory</span><span class="o">=</span><span class="n">pin_memory</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">feat</span> <span class="o">=</span> <span class="n">feat</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">input_nodes</span><span class="p">,</span> <span class="n">output_nodes</span><span class="p">,</span> <span class="n">blocks</span> <span class="ow">in</span> <span class="n">tqdm</span><span class="o">.</span><span class="n">tqdm</span><span class="p">(</span><span class="n">dataloader</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">                <span class="n">x</span> <span class="o">=</span> <span class="n">feat</span><span class="p">[</span><span class="n">input_nodes</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">                <span class="n">h</span> <span class="o">=</span> <span class="n">layer</span><span class="p">(</span><span class="n">blocks</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">x</span><span class="p">)</span> <span class="c1"># len(blocks) = 1</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="n">l</span> <span class="o">!=</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">layers</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="n">h</span> <span class="o">=</span> <span class="n">F</span><span class="o">.</span><span class="n">relu</span><span class="p">(</span><span class="n">h</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="n">h</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">dropout</span><span class="p">(</span><span class="n">h</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="c1"># by design, our output nodes are contiguous</span>
</span></span><span class="line"><span class="cl">                <span class="n">y</span><span class="p">[</span><span class="n">output_nodes</span><span class="p">[</span><span class="mi">0</span><span class="p">]:</span><span class="n">output_nodes</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">h</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">buffer_device</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">feat</span> <span class="o">=</span> <span class="n">y</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">y</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>The train, infer function:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">evaluate</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">graph</span><span class="p">,</span> <span class="n">dataloader</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">model</span><span class="o">.</span><span class="n">eval</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">ys</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="n">y_hats</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">it</span><span class="p">,</span> <span class="p">(</span><span class="n">input_nodes</span><span class="p">,</span> <span class="n">output_nodes</span><span class="p">,</span> <span class="n">blocks</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">dataloader</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">with</span> <span class="n">torch</span><span class="o">.</span><span class="n">no_grad</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">            <span class="n">x</span> <span class="o">=</span> <span class="n">blocks</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">srcdata</span><span class="p">[</span><span class="s1">&#39;feat&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="n">ys</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">blocks</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">dstdata</span><span class="p">[</span><span class="s1">&#39;label&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">            <span class="n">y_hats</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">model</span><span class="p">(</span><span class="n">blocks</span><span class="p">,</span> <span class="n">x</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">MF</span><span class="o">.</span><span class="n">accuracy</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">cat</span><span class="p">(</span><span class="n">y_hats</span><span class="p">),</span> <span class="n">torch</span><span class="o">.</span><span class="n">cat</span><span class="p">(</span><span class="n">ys</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">layerwise_infer</span><span class="p">(</span><span class="n">device</span><span class="p">,</span> <span class="n">graph</span><span class="p">,</span> <span class="n">nid</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">model</span><span class="o">.</span><span class="n">eval</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="n">torch</span><span class="o">.</span><span class="n">no_grad</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="n">pred</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">inference</span><span class="p">(</span><span class="n">graph</span><span class="p">,</span> <span class="n">device</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">)</span> <span class="c1"># pred in buffer_device</span>
</span></span><span class="line"><span class="cl">        <span class="n">pred</span> <span class="o">=</span> <span class="n">pred</span><span class="p">[</span><span class="n">nid</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">label</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;label&#39;</span><span class="p">][</span><span class="n">nid</span><span class="p">]</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">pred</span><span class="o">.</span><span class="n">device</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">MF</span><span class="o">.</span><span class="n">accuracy</span><span class="p">(</span><span class="n">pred</span><span class="p">,</span> <span class="n">label</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">train</span><span class="p">(</span><span class="n">device</span><span class="p">,</span> <span class="n">g</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">train_idx</span><span class="p">,</span> <span class="n">val_idx</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># create sampler &amp; dataloader</span>
</span></span><span class="line"><span class="cl">    <span class="n">sampler</span> <span class="o">=</span> <span class="n">NeighborSampler</span><span class="p">([</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">],</span>  <span class="c1"># fanout for [layer-0, layer-1, layer-2]</span>
</span></span><span class="line"><span class="cl">                              <span class="n">prefetch_node_feats</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;feat&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">                              <span class="n">prefetch_labels</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;label&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="n">use_uva</span> <span class="o">=</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl">    <span class="n">train_dataloader</span> <span class="o">=</span> <span class="n">DataLoader</span><span class="p">(</span><span class="n">g</span><span class="p">,</span> <span class="n">train_idx</span><span class="p">,</span> <span class="n">sampler</span><span class="p">,</span> <span class="n">device</span><span class="o">=</span><span class="n">device</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                  <span class="n">batch_size</span><span class="o">=</span><span class="mi">1024</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                  <span class="n">drop_last</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span> <span class="n">num_workers</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                  <span class="n">use_uva</span><span class="o">=</span><span class="n">use_uva</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">val_dataloader</span> <span class="o">=</span> <span class="n">DataLoader</span><span class="p">(</span><span class="n">g</span><span class="p">,</span> <span class="n">val_idx</span><span class="p">,</span> <span class="n">sampler</span><span class="p">,</span> <span class="n">device</span><span class="o">=</span><span class="n">device</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                <span class="n">batch_size</span><span class="o">=</span><span class="mi">1024</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                <span class="n">drop_last</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span> <span class="n">num_workers</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                <span class="n">use_uva</span><span class="o">=</span><span class="n">use_uva</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">opt</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">optim</span><span class="o">.</span><span class="n">Adam</span><span class="p">(</span><span class="n">model</span><span class="o">.</span><span class="n">parameters</span><span class="p">(),</span> <span class="n">lr</span><span class="o">=</span><span class="mf">1e-3</span><span class="p">,</span> <span class="n">weight_decay</span><span class="o">=</span><span class="mf">5e-4</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">epoch</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">model</span><span class="o">.</span><span class="n">train</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">total_loss</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">it</span><span class="p">,</span> <span class="p">(</span><span class="n">input_nodes</span><span class="p">,</span> <span class="n">output_nodes</span><span class="p">,</span> <span class="n">blocks</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">train_dataloader</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">x</span> <span class="o">=</span> <span class="n">blocks</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">srcdata</span><span class="p">[</span><span class="s1">&#39;feat&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="n">y</span> <span class="o">=</span> <span class="n">blocks</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">dstdata</span><span class="p">[</span><span class="s1">&#39;label&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="n">y_hat</span> <span class="o">=</span> <span class="n">model</span><span class="p">(</span><span class="n">blocks</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">loss</span> <span class="o">=</span> <span class="n">F</span><span class="o">.</span><span class="n">cross_entropy</span><span class="p">(</span><span class="n">y_hat</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">opt</span><span class="o">.</span><span class="n">zero_grad</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="n">loss</span><span class="o">.</span><span class="n">backward</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="n">opt</span><span class="o">.</span><span class="n">step</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="n">total_loss</span> <span class="o">+=</span> <span class="n">loss</span><span class="o">.</span><span class="n">item</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">acc</span> <span class="o">=</span> <span class="n">evaluate</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">g</span><span class="p">,</span> <span class="n">val_dataloader</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Epoch </span><span class="si">{:05d}</span><span class="s2"> | Loss </span><span class="si">{:.4f}</span><span class="s2"> | Accuracy </span><span class="si">{:.4f}</span><span class="s2"> &#34;</span>
</span></span><span class="line"><span class="cl">              <span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">epoch</span><span class="p">,</span> <span class="n">total_loss</span> <span class="o">/</span> <span class="p">(</span><span class="n">it</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span> <span class="n">acc</span><span class="o">.</span><span class="n">item</span><span class="p">()))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Load graph from NebulaGraph into DGL</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">nebula_dgl</span> <span class="kn">import</span> <span class="n">NebulaLoader</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">nebula_config</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;graph_hosts&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                <span class="p">(</span><span class="s1">&#39;graphd&#39;</span><span class="p">,</span> <span class="mi">9669</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                <span class="p">(</span><span class="s1">&#39;graphd1&#39;</span><span class="p">,</span> <span class="mi">9669</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                <span class="p">(</span><span class="s1">&#39;graphd2&#39;</span><span class="p">,</span> <span class="mi">9669</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;nebula_user&#34;</span><span class="p">:</span> <span class="s2">&#34;root&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;nebula_password&#34;</span><span class="p">:</span> <span class="s2">&#34;nebula&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;nebulagraph_yelp_dgl_mapper.yaml&#39;</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">     <span class="n">feature_mapper</span> <span class="o">=</span> <span class="n">yaml</span><span class="o">.</span><span class="n">safe_load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">nebula_loader</span> <span class="o">=</span> <span class="n">NebulaLoader</span><span class="p">(</span><span class="n">nebula_config</span><span class="p">,</span> <span class="n">feature_mapper</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">g</span> <span class="o">=</span> <span class="n">nebula_loader</span><span class="o">.</span><span class="n">load</span><span class="p">()</span> <span class="c1"># This will take you some time</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># We use CPU as a poor guy</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span> <span class="o">=</span> <span class="n">g</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="s1">&#39;cpu&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">device</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">device</span><span class="p">(</span><span class="s1">&#39;cpu&#39;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Split dataset into training, validation and test sets, and convert it into homo graph.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># Split the graph into train, validation and test sets</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">train_test_split</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># features are g.ndata[&#39;f0&#39;], g.ndata[&#39;f1&#39;], g.ndata[&#39;f2&#39;], ... g.ndata[&#39;f31&#39;]</span>
</span></span><span class="line"><span class="cl"><span class="c1"># label is in g.ndata[&#39;is_fraud&#39;]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># concatenate all features</span>
</span></span><span class="line"><span class="cl"><span class="n">features</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">32</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">features</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;f&#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;feat&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">stack</span><span class="p">(</span><span class="n">features</span><span class="p">,</span> <span class="n">dim</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;label&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">g</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;is_fraud&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="c1"># numpy array as index of range n</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">idx</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">tensor</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">number_of_nodes</span><span class="p">()),</span> <span class="n">device</span><span class="o">=</span><span class="n">device</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">int64</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># features.append(idx)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># concatenate one dim with index of node</span>
</span></span><span class="line"><span class="cl"><span class="c1"># feature_and_idx = torch.stack(features, dim=1)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># split based on value distribution of label: the property &#34;is_fraud&#34;, which is a binary variable.</span>
</span></span><span class="line"><span class="cl"><span class="n">X_train_and_val_idx</span><span class="p">,</span> <span class="n">X_test_idx</span><span class="p">,</span> <span class="n">y_train_and_val</span><span class="p">,</span> <span class="n">y_test</span> <span class="o">=</span> <span class="n">train_test_split</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">idx</span><span class="p">,</span> <span class="n">g</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;is_fraud&#39;</span><span class="p">],</span> <span class="n">test_size</span><span class="o">=</span><span class="mf">0.2</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">,</span> <span class="n">stratify</span><span class="o">=</span><span class="n">g</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;is_fraud&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># split train and val</span>
</span></span><span class="line"><span class="cl"><span class="n">X_train_idx</span><span class="p">,</span> <span class="n">X_val_idx</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">y_val</span> <span class="o">=</span> <span class="n">train_test_split</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">X_train_and_val_idx</span><span class="p">,</span> <span class="n">y_train_and_val</span><span class="p">,</span> <span class="n">test_size</span><span class="o">=</span><span class="mf">0.2</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">,</span> <span class="n">stratify</span><span class="o">=</span><span class="n">y_train_and_val</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># list of index to mask</span>
</span></span><span class="line"><span class="cl"><span class="n">train_mask</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">number_of_nodes</span><span class="p">(),</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">bool</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">train_mask</span><span class="p">[</span><span class="n">X_train_idx</span><span class="p">]</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">val_mask</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">number_of_nodes</span><span class="p">(),</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">bool</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">val_mask</span><span class="p">[</span><span class="n">X_val_idx</span><span class="p">]</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">test_mask</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">number_of_nodes</span><span class="p">(),</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">bool</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">test_mask</span><span class="p">[</span><span class="n">X_test_idx</span><span class="p">]</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;train_mask&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">train_mask</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;val_mask&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">val_mask</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;test_mask&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">test_mask</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># shares_restaurant_in_one_month_with: 1, b&#34;001&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># shares_restaurant_rating_with: 2, b&#34;010&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># shares_user_with: 4, b&#34;100&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># set edata of shares_restaurant_in_one_month_with to n of 1 tensor array</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">edges</span><span class="p">[</span><span class="s1">&#39;shares_restaurant_in_one_month_with&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="s1">&#39;he&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">ones</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">g</span><span class="o">.</span><span class="n">number_of_edges</span><span class="p">(</span><span class="s1">&#39;shares_restaurant_in_one_month_with&#39;</span><span class="p">),</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">float32</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">edges</span><span class="p">[</span><span class="s1">&#39;shares_restaurant_rating_with&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="s1">&#39;he&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">full</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">number_of_edges</span><span class="p">(</span><span class="s1">&#39;shares_restaurant_rating_with&#39;</span><span class="p">),),</span> <span class="mi">2</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">float32</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">edges</span><span class="p">[</span><span class="s1">&#39;shares_user_with&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="s1">&#39;he&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">full</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">number_of_edges</span><span class="p">(</span><span class="s1">&#39;shares_user_with&#39;</span><span class="p">),),</span> <span class="mi">4</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">float32</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># heterogeneous graph to heterogeneous graph, keep ndata and edata</span>
</span></span><span class="line"><span class="cl"><span class="n">hg</span> <span class="o">=</span> <span class="n">dgl</span><span class="o">.</span><span class="n">to_homogeneous</span><span class="p">(</span><span class="n">g</span><span class="p">,</span> <span class="n">edata</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;he&#39;</span><span class="p">],</span> <span class="n">ndata</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;feat&#39;</span><span class="p">,</span> <span class="s1">&#39;label&#39;</span><span class="p">,</span> <span class="s1">&#39;train_mask&#39;</span><span class="p">,</span> <span class="s1">&#39;val_mask&#39;</span><span class="p">,</span> <span class="s1">&#39;test_mask&#39;</span><span class="p">])</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Train and test the model</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># create GraphSAGE model</span>
</span></span><span class="line"><span class="cl"><span class="n">in_size</span> <span class="o">=</span> <span class="n">hg</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;feat&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">out_size</span> <span class="o">=</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl"><span class="n">model</span> <span class="o">=</span> <span class="n">SAGE</span><span class="p">(</span><span class="n">in_size</span><span class="p">,</span> <span class="mi">256</span><span class="p">,</span> <span class="n">out_size</span><span class="p">)</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># model training</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Training...&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">train</span><span class="p">(</span><span class="n">device</span><span class="p">,</span> <span class="n">hg</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">X_train_idx</span><span class="p">,</span> <span class="n">X_val_idx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># test the model</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Testing...&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">acc</span> <span class="o">=</span> <span class="n">layerwise_infer</span><span class="p">(</span><span class="n">device</span><span class="p">,</span> <span class="n">hg</span><span class="p">,</span> <span class="n">X_test_idx</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="mi">4096</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Test Accuracy </span><span class="si">{:.4f}</span><span class="s2">&#34;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">acc</span><span class="o">.</span><span class="n">item</span><span class="p">()))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 运行结果</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Test Accuracy 0.9996</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>After we have a trained model, it could be serialized as a file, and when needed, it could be loaded and used as a PyTorch model in your inference service.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># save model</span>
</span></span><span class="line"><span class="cl"><span class="n">torch</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="n">model</span><span class="o">.</span><span class="n">state_dict</span><span class="p">(),</span> <span class="s2">&#34;fraud_d.model&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># load model</span>
</span></span><span class="line"><span class="cl"><span class="n">device</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">device</span><span class="p">(</span><span class="s1">&#39;cpu&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">model</span> <span class="o">=</span> <span class="n">SAGE</span><span class="p">(</span><span class="mi">32</span><span class="p">,</span> <span class="mi">256</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">model</span><span class="o">.</span><span class="n">load_state_dict</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="s2">&#34;fraud_d.model&#34;</span><span class="p">))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Then, let&rsquo;s see how do make this model work in an online fraud detection system.</p>
<h5 id="inference-api" class="headerLink">
    <a href="#inference-api" class="header-mark"></a>1.5.1.4 Inference API</h5><p>As mentioned earlier, GraphSAGE is the simplest model to support Inductive Learning, thus our training inference process above is actually not yet the same as our test and training graphs, although the indexes of the training points are labeled, the whole graph is actually used as input.</p>
<p>In order to do Inductive Learning we just need to divide the training and testing into two non-intersecting subgraphs for training and final testing.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># Inductive Learning, our test dataset are new nodes and new edges</span>
</span></span><span class="line"><span class="cl"><span class="n">hg_train</span> <span class="o">=</span> <span class="n">hg</span><span class="o">.</span><span class="n">subgraph</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">cat</span><span class="p">([</span><span class="n">X_train_idx</span><span class="p">,</span> <span class="n">X_val_idx</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># model training</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Training...&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">train</span><span class="p">(</span><span class="n">device</span><span class="p">,</span> <span class="n">hg_train</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">torch</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="n">X_train_idx</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span> <span class="n">torch</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="n">X_train_idx</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">hg_train</span><span class="o">.</span><span class="n">num_nodes</span><span class="p">()))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># test the model</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Testing...&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">hg_test</span> <span class="o">=</span> <span class="n">hg</span><span class="o">.</span><span class="n">subgraph</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">cat</span><span class="p">([</span><span class="n">X_test_idx</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">sg_X_test_idx</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="n">hg_test</span><span class="o">.</span><span class="n">num_nodes</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">acc</span> <span class="o">=</span> <span class="n">layerwise_infer</span><span class="p">(</span><span class="n">device</span><span class="p">,</span> <span class="n">hg_test</span><span class="p">,</span> <span class="n">sg_X_test_idx</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="mi">4096</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Test Accuracy </span><span class="si">{:.4f}</span><span class="s2">&#34;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">acc</span><span class="o">.</span><span class="n">item</span><span class="p">()))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Result</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Test Accuracy 0.9990</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>As you can see, in our code above, the graph used for testing and the graph used for training are two completely different sets of data, which allows our online system to be data that we haven&rsquo;t encountered before at all.</p>
<p>Thus, we can simply write the data for a new incoming transaction request into NebulaGraph and then get a small subgraph that the online system can return from that point, and use it as input to the model inference to get the labels of the subgraph!</p>
<p><strong>A new trasnaction request</strong>：</p>
<p>Remember the flowchart of an online inference system with GNN?</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">      ┌─────────────────────┐                          ┌─────────────────┐      
</span></span><span class="line"><span class="cl">      │                     │                          │                 │
</span></span><span class="line"><span class="cl">─────▶│ Transaction Record  ├──────2. Fraud Risk ─────▶│  Inference API  │◀────┐
</span></span><span class="line"><span class="cl">      │                     │◀────Prediction with ─────┤                 │     │
</span></span><span class="line"><span class="cl">      │                     │        Sub Graph         │                 │     │
</span></span><span class="line"><span class="cl">      └─────────────────────┘                          └─────────────────┘     │
</span></span><span class="line"><span class="cl">           │           ▲                                        │              │
</span></span><span class="line"><span class="cl">           │           │                                        │              │
</span></span><span class="line"><span class="cl">       0. Insert   1. Get New                              3.req: Node         │
</span></span><span class="line"><span class="cl">         Record    Record Sub                            Classification        │
</span></span><span class="line"><span class="cl">           │         Graph                                      │              │
</span></span><span class="line"><span class="cl">           ▼           │                                        │              │
</span></span><span class="line"><span class="cl">┌──────────────────────┴─────────────────┐ ┌────────────────────┘      3.resp: │
</span></span><span class="line"><span class="cl">│┌──────────────────────────────────────┐│ │                          Predicted│
</span></span><span class="line"><span class="cl">││   Graph of Historical Transactions   ││ │                             Risk  │
</span></span><span class="line"><span class="cl">│└──────────────────────────────────────┘│ │                                   │
</span></span><span class="line"><span class="cl">│                   .─.              .   │ │                                   │
</span></span><span class="line"><span class="cl">│                  (   )◀───────────( )  │ │                                   │
</span></span><span class="line"><span class="cl">│                   `─&#39;              &#39;   │ │      ┌──────────────────────┐     │
</span></span><span class="line"><span class="cl">│  .       .─.       ╲             ◁     │ │      │ GNN Model Λ          │     │
</span></span><span class="line"><span class="cl">│ ( )◀────(   )       ╲           ╱      │ │  ┌───┴─┐        ╱ ╲      ┌──┴──┐  │
</span></span><span class="line"><span class="cl">│  &#39;       `─&#39;         ╲       . ╱       │ │  ├─────┤       ╱   ╲     ├─────┤  │
</span></span><span class="line"><span class="cl">│  ╲       ◀            ╲     ( )        │ └─▶├─────┼─────▶▕     ─────├─────┤──┘
</span></span><span class="line"><span class="cl">│   ╲  .  ╱              ◁     &#39;         │    ├─────┤       ╲   ╱     ├─────┤   
</span></span><span class="line"><span class="cl">│    ◀( )╱               .─.         .─. │    └───┬─┘        ╲ ╱      └──┬──┘   
</span></span><span class="line"><span class="cl">│      &#39;                (   )◀──────(   )│        │           V          │      
</span></span><span class="line"><span class="cl">│                        `─&#39;         `─&#39; │        └──────────────────────┘      
</span></span><span class="line"><span class="cl">└────────────────────────────────────────┘        
</span></span></code></pre></td></tr></table>
</div>
</div><p>Now, assume a new transaction request comes to the system, and corresponding relations has been already written to the graph database, we could randomly find one review to simulate that:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">n</span><span class="p">:</span><span class="o">`</span><span class="n">review</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="k">RETURN</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">1</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="o">+</span><span class="c
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="n">n</span><span class="wspan><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="p">(</span><span class="mi">2048</span><span class="w"> </span><span class="p">:</span><span class="n">review</span><span class="err">{</span><span class="n">f0</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="n">f1</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">08034700155258179</span><span class="p">,</span><span class="w"> </span><span class="n">f10</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">3952670097351074</span><span class="p">,</span><span class="w"> </span><span class="n">f11</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">18671999871730804</span><span class="p">,</span><span class="w"> </span><span class="n">f12</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">2836120128631592</span><span class="p">,</span><span class="w"> </span><span class="n">f13</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">2843089997768402</span><span class="p">,</span><span class="w"> </span><span class="n">f14</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">38148200511932373</span><span class="p">,</span><span class="w"> </span><span class="n">f15</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">3816460072994232</span><span class="p">,</span><span class="w"> </span><span class="n">f16</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">9999740123748779</span><span class="p">,</span><span class="w"> </span><span class="n">f17</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">6430919766426086</span><span class="p">,</span><span class="w"> </span><span class="n">f18</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">9999740123748779</span><span class="p">,</span><span class="w"> </span><span class="n">f19</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">5051100254058838</span><span class="p">,</span><span class="w"> </span><span class="n">f2</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">12382200360298157</span><span class="p">,</span><span class="w"> </span><span class="n">f20</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">4940490126609802</span><span class="p">,</span><span class="w"> </span><span class="n">f21</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">7766339778900146</span><span class="p">,</span><span class="w"> </span><span class="n">f22</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">7705119848251343</span><span class="p">,</span><span class="w"> </span><span class="n">f23</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">9480599761009216</span><span class="p">,</span><span class="w"> </span><span class="n">f24</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">4032529890537262</span><span class="p">,</span><span class="w"> </span><span class="n">f25</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">12437800318002701</span><span class="p">,</span><span class="w"> </span><span class="n">f26</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">3184080123901367</span><span class="p">,</span><span class="w"> </span><span class="n">f27</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">5223879814147949</span><span class="p">,</span><span class="w"> </span><span class="n">f28</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">4278610050678253</span><span class="p">,</span><span class="w"> </span><span class="n">f29</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">343284010887146</span><span class="p">,</span><span class="w"> </span><span class="n">f3</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">42868199944496155</span><span class="p">,</span><span class="w"> </span><span class="n">f30</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">37313398718833923</span><span class="p">,</span><span class="w"> </span><span class="n">f31</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">328357994556427</span><span class="p">,</span><span class="w"> </span><span class="n">f4</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">9999849796295166</span><span class="p">,</span><span class="w"> </span><span class="n">f5</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">9999849796295166</span><span class="p">,</span><span class="w"> </span><span class="n">f6</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">9999849796295166</span><span class="p">,</span><span class="w"> </span><span class="n">f7</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">4850809872150421</span><span class="p">,</span><span class="w"> </span><span class="n">f8</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">454602986574173</span><span class="p">,</span><span class="w"> </span><span class="n">f9</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">8863419890403748</span><span class="p">,</span><span class="w"> </span><span class="n">is_fraud</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="err">}</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>好，它是 2048 这个点。它的下一步是 <code>1. Get New Record Subgraph</code> 我们来获取它的子图：</p>
<p>OK, it&rsquo;s the vertex with ID <code>2048</code>, the next step in the flowchart is <code>1. Get New Record Subgraph</code> , and it&rsquo;s equivalent to this query:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-SQL" data-lang="SQL"><span class="line"><span class="cl"><span class="k">GET</span><span class="w"> </span><span class="n">SUBGRAPH</span><span class="w"> </span><span class="k">WITH</span><span class="w"> </span><span class="n">PROP</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="mi">2048</span><span class="w"> </span><span class="n">YIELD</span><span class="w"> </span><span class="n">VERTICES</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">nodes</span><span class="p">,</span><span class="w"> </span><span class="n">EDGES</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">relationships</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>If we render the result in NebulaGraph Studio or NebulaGraph Explorer, it looks like this:</p>
<p><a class="lightgallery" href="/en/fraud-detection-with-nebulagraph/subgraph_console_view.webp" title="/en/fraud-detection-with-nebulagraph/subgraph_console_view.webp" data-thumbnail="/en/fraud-detection-with-nebulagraph/subgraph_console_view.webp">
        
    </a></p>
<p><a class="lightgallery" href="/en/fraud-detection-with-nebulagraph/subgraph_viz.webp" title="/en/fraud-detection-with-nebulagraph/subgraph_viz.webp" data-thumbnail="/en/fraud-detection-with-nebulagraph/subgraph_viz.webp">
        
    </a></p>
<p>Below is the code for the SUBGRAPH fetching, the input is vertex_id, and output is a dgl graph, which will be sent to the inference API.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># get SUBGRAPH of one node</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">json</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">torch</span> <span class="kn">import</span> <span class="n">tensor</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">dgl</span> <span class="kn">import</span> <span class="n">DGLHeteroGraph</span><span class="p">,</span> <span class="n">heterograph</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">nebula3.gclient.net</span> <span class="kn">import</span> <span class="n">ConnectionPool</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">nebula3.Config</span> <span class="kn">import</span> <span class="n">Config</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">config</span> <span class="o">=</span> <span class="n">Config</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">config</span><span class="o">.</span><span class="n">max_connection_pool_size</span> <span class="o">=</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl"><span class="n">connection_pool</span> <span class="o">=</span> <span class="n">ConnectionPool</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">connection_pool</span><span class="o">.</span><span class="n">init</span><span class="p">([(</span><span class="s1">&#39;graphd&#39;</span><span class="p">,</span> <span class="mi">9669</span><span class="p">)],</span> <span class="n">config</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">vertex_id</span> <span class="o">=</span> <span class="mi">2048</span>
</span></span><span class="line"><span class="cl"><span class="n">client</span> <span class="o">=</span> <span class="n">connection_pool</span><span class="o">.</span><span class="n">get_session</span><span class="p">(</span><span class="s1">&#39;root&#39;</span><span class="p">,</span> <span class="s1">&#39;nebula&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">execute_json</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;USE yelp;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="sa">f</span><span class="s2">&#34;GET SUBGRAPH WITH PROP 2 STEPS FROM </span><span class="si">{</span><span class="n">vertex_id</span><span class="si">}</span><span class="s2"> YIELD VERTICES AS nodes, EDGES AS relationships;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">r</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">data</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;results&#39;</span><span class="p">,</span> <span class="p">[{}])[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>And Nebula-Python was used here, and we are leveraging <code>execute_json</code> to execute the GET SUBGRAPH query and get the subgraph in JSON.</p>
<p>Then, we will construct it as a DGL Graph Object:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># create node and nodedata</span>
</span></span><span class="line"><span class="cl"><span class="n">node_id_map</span> <span class="o">=</span> <span class="p">{}</span> <span class="c1"># key: vertex id in NebulaGraph, value: node id in dgl_graph</span>
</span></span><span class="line"><span class="cl"><span class="n">node_idx</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">features</span> <span class="o">=</span> <span class="p">[[]</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">32</span><span class="p">)]</span> <span class="o">+</span> <span class="p">[[]]</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">index</span><span class="p">,</span> <span class="n">node</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s1">&#39;meta&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">]):</span>
</span></span><span class="line"><span class="cl">        <span class="n">nodeid</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s1">&#39;meta&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="n">index</span><span class="p">][</span><span class="s1">&#39;id&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">nodeid</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">node_id_map</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">node_id_map</span><span class="p">[</span><span class="n">nodeid</span><span class="p">]</span> <span class="o">=</span> <span class="n">node_idx</span>
</span></span><span class="line"><span class="cl">            <span class="n">node_idx</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">32</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">                <span class="n">features</span><span class="p">[</span><span class="n">f</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s1">&#39;row&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="n">index</span><span class="p">][</span><span class="sa">f</span><span class="s2">&#34;review.f</span><span class="si">{</span><span class="n">f</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">            <span class="n">features</span><span class="p">[</span><span class="mi">32</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s1">&#39;row&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="n">index</span><span class="p">][</span><span class="s1">&#39;review.is_fraud&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">- R-U-R: shares_user_with
</span></span></span><span class="line"><span class="cl"><span class="s2">- R-S-R: shares_restaurant_rating_with
</span></span></span><span class="line"><span class="cl"><span class="s2">- R-T-R: shares_restaurant_in_one_month_with
</span></span></span><span class="line"><span class="cl"><span class="s2">&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">rur_start</span><span class="p">,</span> <span class="n">rur_end</span><span class="p">,</span> <span class="n">rsr_start</span><span class="p">,</span> <span class="n">rsr_end</span><span class="p">,</span> <span class="n">rtr_start</span><span class="p">,</span> <span class="n">rtr_end</span> <span class="o">=</span> <span class="p">[],</span> <span class="p">[],</span> <span class="p">[],</span> <span class="p">[],</span> <span class="p">[],</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">edge</span> <span class="ow">in</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s1">&#39;meta&#39;</span><span class="p">][</span><span class="mi">1</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">        <span class="n">edge</span> <span class="o">=</span> <span class="n">edge</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">edge</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;shares_user_with&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">rur_start</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node_id_map</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="s1">&#39;src&#39;</span><span class="p">]])</span>
</span></span><span class="line"><span class="cl">            <span class="n">rur_end</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node_id_map</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="s1">&#39;dst&#39;</span><span class="p">]])</span>
</span></span><span class="line"><span class="cl">        <span class="k">elif</span> <span class="n">edge</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;shares_restaurant_rating_with&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">rsr_start</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node_id_map</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="s1">&#39;src&#39;</span><span class="p">]])</span>
</span></span><span class="line"><span class="cl">            <span class="n">rsr_end</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node_id_map</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="s1">&#39;dst&#39;</span><span class="p">]])</span>
</span></span><span class="line"><span class="cl">        <span class="k">elif</span> <span class="n">edge</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;shares_restaurant_in_one_month_with&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">rtr_start</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node_id_map</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="s1">&#39;src&#39;</span><span class="p">]])</span>
</span></span><span class="line"><span class="cl">            <span class="n">rtr_end</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node_id_map</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="s1">&#39;dst&#39;</span><span class="p">]])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">data_dict</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">rur_start</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">data_dict</span><span class="p">[(</span><span class="s1">&#39;review&#39;</span><span class="p">,</span> <span class="s1">&#39;shares_user_with&#39;</span><span class="p">,</span> <span class="s1">&#39;review&#39;</span><span class="p">)]</span> <span class="o">=</span> <span class="n">tensor</span><span class="p">(</span><span class="n">rur_start</span><span class="p">),</span> <span class="n">tensor</span><span class="p">(</span><span class="n">rur_end</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">rsr_start</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">data_dict</span><span class="p">[(</span><span class="s1">&#39;review&#39;</span><span class="p">,</span> <span class="s1">&#39;shares_restaurant_rating_with&#39;</span><span class="p">,</span> <span class="s1">&#39;review&#39;</span><span class="p">)]</span> <span class="o">=</span> <span class="n">tensor</span><span class="p">(</span><span class="n">rsr_start</span><span class="p">),</span> <span class="n">tensor</span><span class="p">(</span><span class="n">rsr_end</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">rtr_start</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">data_dict</span><span class="p">[(</span><span class="s1">&#39;review&#39;</span><span class="p">,</span> <span class="s1">&#39;shares_restaurant_in_one_month_with&#39;</span><span class="p">,</span> <span class="s1">&#39;review&#39;</span><span class="p">)]</span> <span class="o">=</span> <span class="n">tensor</span><span class="p">(</span><span class="n">rtr_start</span><span class="p">),</span> <span class="n">tensor</span><span class="p">(</span><span class="n">rtr_end</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># construct a dgl_graph</span>
</span></span><span class="line"><span class="cl"><span class="n">dgl_graph</span><span class="p">:</span> <span class="n">DGLHeteroGraph</span> <span class="o">=</span> <span class="n">heterograph</span><span class="p">(</span><span class="n">data_dict</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>In fact, we just construct it following <a href="https://docs.dgl.ai/en/0.9.x/generated/dgl.heterograph.html" target="_blank" rel="noopener noreferrer">https://docs.dgl.ai/en/0.9.x/generated/dgl.heterograph.html</a>, which leverages <code>heterograph()</code> to create a dgl graph object from a data_dict. And <code>node_id_map</code> is the map between Vertex_id in NebulaGraph and the node_id in this object.</p>
<p>Finally, we load node features into the graph object, too.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># load node features to dgl_graph</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">32</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">dgl_graph</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="sa">f</span><span class="s2">&#34;f</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">tensor</span><span class="p">(</span><span class="n">features</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="n">dgl_graph</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;label&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">tensor</span><span class="p">(</span><span class="n">features</span><span class="p">[</span><span class="mi">32</span><span class="p">])</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Before the inferring call, we still need to convert it into homo graph, as we had done before during the training.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">torch</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># to homogeneous graph</span>
</span></span><span class="line"><span class="cl"><span class="n">features</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">32</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">features</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">dgl_graph</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="sa">f</span><span class="s2">&#34;f</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">dgl_graph</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;feat&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">stack</span><span class="p">(</span><span class="n">features</span><span class="p">,</span> <span class="n">dim</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">dgl_graph</span><span class="o">.</span><span class="n">edges</span><span class="p">[</span><span class="s1">&#39;shares_restaurant_in_one_month_with&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="s1">&#39;he&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">ones</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">dgl_graph</span><span class="o">.</span><span class="n">number_of_edges</span><span class="p">(</span><span class="s1">&#39;shares_restaurant_in_one_month_with&#39;</span><span class="p">),</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">float32</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">dgl_graph</span><span class="o">.</span><span class="n">edges</span><span class="p">[</span><span class="s1">&#39;shares_restaurant_rating_with&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="s1">&#39;he&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">full</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="n">dgl_graph</span><span class="o">.</span><span class="n">number_of_edges</span><span class="p">(</span><span class="s1">&#39;shares_restaurant_rating_with&#39;</span><span class="p">),),</span> <span class="mi">2</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">float32</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">dgl_graph</span><span class="o">.</span><span class="n">edges</span><span class="p">[</span><span class="s1">&#39;shares_user_with&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="s1">&#39;he&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">full</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="n">dgl_graph</span><span class="o">.</span><span class="n">number_of_edges</span><span class="p">(</span><span class="s1">&#39;shares_user_with&#39;</span><span class="p">),),</span> <span class="mi">4</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">float32</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># heterogeneous graph to heterogeneous graph, keep ndata and edata</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">dgl</span>
</span></span><span class="line"><span class="cl"><span class="n">hg</span> <span class="o">=</span> <span class="n">dgl</span><span class="o">.</span><span class="n">to_homogeneous</span><span class="p">(</span><span class="n">dgl_graph</span><span class="p">,</span> <span class="n">edata</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;he&#39;</span><span class="p">],</span> <span class="n">ndata</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;feat&#39;</span><span class="p">,</span> <span class="s1">&#39;label&#39;</span><span class="p">])</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>And here is the inference API:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">do_inference</span><span class="p">(</span><span class="n">device</span><span class="p">,</span> <span class="n">graph</span><span class="p">,</span> <span class="n">node_idx</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">model</span><span class="o">.</span><span class="n">eval</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="n">torch</span><span class="o">.</span><span class="n">no_grad</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="n">pred</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">inference</span><span class="p">(</span><span class="n">graph</span><span class="p">,</span> <span class="n">device</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">)</span> <span class="c1"># pred in buffer_device</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">pred</span><span class="p">[</span><span class="n">node_idx</span><span class="p">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Let&rsquo;s try calling it with this new vertex&rsquo;s subgraph:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">node_idx</span> <span class="o">=</span> <span class="n">node_id_map</span><span class="p">[</span><span class="n">vertex_id</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">batch_size</span> <span class="o">=</span> <span class="mi">4096</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">result</span> <span class="o">=</span> <span class="n">do_inference</span><span class="p">(</span><span class="n">device</span><span class="p">,</span> <span class="n">hg</span><span class="p">,</span> <span class="n">node_idx</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>And see its performance:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">test_inference</span><span class="p">(</span><span class="n">device</span><span class="p">,</span> <span class="n">graph</span><span class="p">,</span> <span class="n">nid</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">model</span><span class="o">.</span><span class="n">eval</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="n">torch</span><span class="o">.</span><span class="n">no_grad</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="n">pred</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">inference</span><span class="p">(</span><span class="n">graph</span><span class="p">,</span> <span class="n">device</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">)</span> <span class="c1"># pred in buffer_device</span>
</span></span><span class="line"><span class="cl">        <span class="n">pred</span> <span class="o">=</span> <span class="n">pred</span><span class="p">[</span><span class="n">nid</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">label</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;label&#39;</span><span class="p">][</span><span class="n">nid</span><span class="p">]</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">pred</span><span class="o">.</span><span class="n">device</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">MF</span><span class="o">.</span><span class="n">accuracy</span><span class="p">(</span><span class="n">pred</span><span class="p">,</span> <span class="n">label</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">node_idx</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">tensor</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">node_id_map</span><span class="o">.</span><span class="n">values</span><span class="p">()))</span>
</span></span><span class="line"><span class="cl"><span class="n">acc</span> <span class="o">=</span> <span class="n">test_inference</span><span class="p">(</span><span class="n">device</span><span class="p">,</span> <span class="n">hg</span><span class="p">,</span> <span class="n">node_idx</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="mi">4096</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Test Accuracy </span><span class="si">{:.4f}</span><span class="s2">&#34;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">acc</span><span class="o">.</span><span class="n">item</span><span class="p">()))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Result:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">307</span><span class="p">]:</span> <span class="k">def</span> <span class="nf">test_inference</span><span class="p">(</span><span class="n">device</span><span class="p">,</span> <span class="n">graph</span><span class="p">,</span> <span class="n">nid</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">     <span class="o">...</span><span class="p">:</span>     <span class="n">model</span><span class="o">.</span><span class="n">eval</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">     <span class="o">...</span><span class="p">:</span>     <span class="k">with</span> <span class="n">torch</span><span class="o">.</span><span class="n">no_grad</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">     <span class="o">...</span><span class="p">:</span>         <span class="n">pred</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">inference</span><span class="p">(</span><span class="n">graph</span><span class="p">,</span> <span class="n">device</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">)</span> <span class="c1"># pred in buffer</span>
</span></span><span class="line"><span class="cl">     <span class="o">...</span><span class="p">:</span> <span class="n">_device</span>
</span></span><span class="line"><span class="cl">     <span class="o">...</span><span class="p">:</span>         <span class="n">pred</span> <span class="o">=</span> <span class="n">pred</span><span class="p">[</span><span class="n">nid</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">     <span class="o">...</span><span class="p">:</span>         <span class="n">label</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;label&#39;</span><span class="p">][</span><span class="n">nid</span><span class="p">]</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">pred</span><span class="o">.</span><span class="n">device</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">     <span class="o">...</span><span class="p">:</span>         <span class="k">return</span> <span class="n">MF</span><span class="o">.</span><span class="n">accuracy</span><span class="p">(</span><span class="n">pred</span><span class="p">,</span> <span class="n">label</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">     <span class="o">...</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">     <span class="o">...</span><span class="p">:</span> <span class="n">node_idx</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">tensor</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">node_id_map</span><span class="o">.</span><span class="n">values</span><span class="p">()))</span>
</span></span><span class="line"><span class="cl">     <span class="o">...</span><span class="p">:</span> <span class="n">acc</span> <span class="o">=</span> <span class="n">test_inference</span><span class="p">(</span><span class="n">device</span><span class="p">,</span> <span class="n">hg</span><span class="p">,</span> <span class="n">node_idx</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="mi">4096</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">     <span class="o">...</span><span class="p">:</span> <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Test Accuracy </span><span class="si">{:.4f}</span><span class="s2">&#34;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">acc</span><span class="o">.</span><span class="n">item</span><span class="p">()))</span>
</span></span><span class="line"><span class="cl">     <span class="o">...</span><span class="p">:</span>
</span></span><span class="line"><span class="cl"><span class="mi">100</span><span class="o">%|</span><span class="err">████████████████████████████████████████████████</span><span class="o">|</span> <span class="mi">1</span><span class="o">/</span><span class="mi">1</span> <span class="p">[</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="o">&lt;</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">,</span> <span class="mf">130.31</span><span class="n">it</span><span class="o">/</span><span class="n">s</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="mi">100</span><span class="o">%|</span><span class="err">████████████████████████████████████████████████</span><span class="o">|</span> <span class="mi">1</span><span class="o">/</span><span class="mi">1</span> <span class="p">[</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="o">&lt;</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">,</span> <span class="mf">152.29</span><span class="n">it</span><span class="o">/</span><span class="n">s</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="mi">100</span><span class="o">%|</span><span class="err">████████████████████████████████████████████████</span><span class="o">|</span> <span class="mi">1</span><span class="o">/</span><span class="mi">1</span> <span class="p">[</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="o">&lt;</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">,</span> <span class="mf">173.55</span><span class="n">it</span><span class="o">/</span><span class="n">s</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">Test</span> <span class="n">Accuracy</span> <span class="mf">0.9688</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>The whole example code, including a frontend is <a href="https://github.com/wey-gu/NebulaGraph-Fraud-Detection-GNN" target="_blank" rel="noopener noreferrer">here</a> in the github, and this is a video demo:</p>
<video width="800" controls>
  <source src="https://user-images.githubusercontent.com/1651790/182651965-d489a218-36a6-40c9-9fab-ba288e8d959a.mov" type="video/mp4"> 
</video>
<h3 id="conclusion" class="headerLink">
    <a href="#conclusion" class="header-mark"></a>1.6 Conclusion</h3><!--

总结起来，欺诈检测的方法有：

- 在一个交易历史、风控的图谱上，通过图模式查询直接获得风险提示
- 定期利用图算法扩充风险标注，写回图库
- 定期计算图谱中的图特征，和其他特征一起用传统机器学习方法离线预测风险
- 将图谱中的属性处理成为点、边特征，用图神经网络方法离线预测风险，部分可以 Inductive Learning 的方法结合图库可以实现在线风险预测

-->
<p>To summarize, fraud detection with NebulaGraph Graph Database could be done:</p>
<ul>
<li>With graph queries to get risk metrics from graph database</li>
<li>With risky label being expanded by graph algorithms and written back to graph database</li>
<li>With ML methods including graph features being fetched from graph database</li>
<li>Process the property in the graph into the node and edge features to predict risk offline using GNN methods, some of which can be combined with the graph database to achieve online risk prediction by Inductive Learning methods</li>
</ul>
<blockquote>
<p>Feature Image credit goes to <a href="https://unsplash.com/photos/BW0vK-FA3eg" target="_blank" rel="noopener noreferrer">https://unsplash.com/photos/BW0vK-FA3eg</a></p>
</blockquote>]]></description>
</item><item>
    <title>Social Network with NebulaGraph</title>
    <link>https://siwei.io/en/nebulagraph-sns/</link>
    <pubDate>Thu, 29 Dec 2022 15:30:33 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/en/nebulagraph-sns/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/en/nebulagraph-sns/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>How NebulaGraph helps build social network systems.</p>
</blockquote>
<!--

[TOC]

-->
<p>This blog was origianlly posted on <a href="https://www.nebula-graph.io/posts/social-networks-with-graph-database-1" target="_blank" rel="noopener noreferrer">NebulaGraph Blog</a>.</p>
<p>Social networks are no stranger to everyone, whether it&rsquo;s Facebook, Twitter, Youtube, or services such as Yelp, Quora, Reddit, etc., the essence of their users has formed social networks.</p>
<p>In a social network system, we can use a graph database to represent users and their connection relationships. Graph databases allow efficient querying of relationships between users, making various business implementations on social networks based on connection findings, statistics, and analysis feasible and efficient.</p>
<p>For example, graph databases can be used to identify &ldquo;influential users&rdquo; in a network, to recommend new connections (friendships, content of interest) based on commonalities between users, or to find different groups of people and communities in a community to profile users. Graph databases are ideal for social networking systems where user relationships are constantly changing because they can support complex multi-hop queries and also real-time writes and updates.</p>
<h2 id="graph-modeling" class="headerLink">
    <a href="#graph-modeling" class="header-mark"></a>1 Graph Modeling</h2><p>To showcase the SNS graph use cases, I&rsquo;ll build most of the examples on a typically small social network, I started by adding extra data on top of the NebulaGraph default dataset, basketballplayer:</p>
<p>Three new tags of vertices:</p>
<ul>
<li>address</li>
<li>place</li>
<li>post</li>
</ul>
<p>Five new types of edges:</p>
<ul>
<li>created_post</li>
<li>commented_at</li>
<li>lived_in</li>
<li>belong_to</li>
</ul>
<p>It looks like this:</p>
<p><a class="lightgallery" href="/en/nebulagraph-sns/schema_sketch.webp" title="schema_sketch" data-thumbnail="/en/nebulagraph-sns/schema_sketch.webp">
        
    </a></p>
<h2 id="importing-the-data" class="headerLink">
    <a href="#importing-the-data" class="header-mark"></a>2 Importing the data</h2><h3 id="load-the-default-dataset" class="headerLink">
    <a href="#load-the-default-dataset" class="header-mark"></a>2.1 Load the default dataset</h3><ul>
<li>
<p>In the Command Line Console, we could just execute:play basketballplayer` to load the default dataset.</p>
</li>
<li>
<p>Or, if we do so from NebulaGraph Studio/Explorer, just click the Download from the Demos in the welcome page:</p>
<p><a class="lightgallery" href="/en/nebulagraph-sns/baskertballplayer_studio_starter.webp" title="baskertballplayer_studio_starter" data-thumbnail="/en/nebulagraph-sns/baskertballplayer_studio_starter.webp">
        
    </a></p>
</li>
</ul>
<h3 id="add-the-sns-graph-schema" class="headerLink">
    <a href="#add-the-sns-graph-schema" class="header-mark"></a>2.2 Add the SNS Graph schema</h3><p>First the DDL for those new tags and edges:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="k">IF</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">EXISTS</span><span class="w"> </span><span class="n">post</span><span class="p">(</span><span class="n">title</span><span class="w"> </span><span class="n">string</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">created_post</span><span class="p">(</span><span class="n">post_time</span><span class="w"> </span><span class="k">timestamp</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">commented_at</span><span class="p">(</span><span class="n">post_time</span><span class="w"> </span><span class="k">timestamp</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="n">address</span><span class="p">(</span><span class="n">address</span><span class="w"> </span><span class="n">string</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w"> </span><span class="o">`</span><span class="n">geo_point</span><span class="o">`</span><span class="w"> </span><span class="n">geography</span><span class="p">(</span><span class="n">point</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="n">place</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="n">string</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w"> </span><span class="o">`</span><span class="n">geo_point</span><span class="o">`</span><span class="w"> </span><span class="n">geography</span><span class="p">(</span><span class="n">point</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">belong_to</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">lived_in</span><span class="p">();</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="load-the-data" class="headerLink">
    <a href="#load-the-data" class="header-mark"></a>2.3 Load the data</h3><p>Then we load the DML part, to insert vertices and edges:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">INSERT</span><span class="w"> </span><span class="n">VERTEX</span><span class="w"> </span><span class="n">post</span><span class="p">(</span><span class="n">title</span><span class="p">)</span><span class="w"> </span><span class="k">values</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;post1&#34;</span><span class="p">:(</span><span class="s2">&#34;a beautify flower&#34;</span><span class="p">),</span><span class="w"> </span><span class="s2">&#34;post2&#34;</span><span class="p">:(</span><span class="s2">&#34;my first bike&#34;</span><span class="p">),</span><span class="w"> </span><span class="s2">&#34;post3&#34;</span><span class="p">:(</span><span class="s2">&#34;I can swim&#34;</span><span class="p">),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;post4&#34;</span><span class="p">:(</span><span class="s2">&#34;I love you, Dad&#34;</span><span class="p">),</span><span class="w"> </span><span class="s2">&#34;post5&#34;</span><span class="p">:(</span><span class="s2">&#34;I hate coriander&#34;</span><span class="p">),</span><span class="w"> </span><span class="s2">&#34;post6&#34;</span><span class="p">:(</span><span class="s2">&#34;my best friend, tom&#34;</span><span class="p">),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;post7&#34;</span><span class="p">:(</span><span class="s2">&#34;my best friend, jerry&#34;</span><span class="p">),</span><span class="w"> </span><span class="s2">&#34;post8&#34;</span><span class="p">:(</span><span class="s2">&#34;Frank, the cat&#34;</span><span class="p">),</span><span class="w"> </span><span class="s2">&#34;post9&#34;</span><span class="p">:(</span><span class="s2">&#34;sushi rocks&#34;</span><span class="p">),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;post10&#34;</span><span class="p">:(</span><span class="s2">&#34;I love you, Mom&#34;</span><span class="p">),</span><span class="w"> </span><span class="s2">&#34;post11&#34;</span><span class="p">:(</span><span class="s2">&#34;Let&#39;s have a party!&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">created_post</span><span class="p">(</span><span class="n">post_time</span><span class="p">)</span><span class="w"> </span><span class="k">values</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player100&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post1&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-01-01 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player111&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post2&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2016-11-23 10:04:50&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player101&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post3&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-11-11 10:44:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player103&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post4&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2014-12-01 20:45:11&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player102&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post5&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2015-03-01 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player104&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post6&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2017-09-21 23:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player125&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post7&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2018-01-01 00:44:23&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player106&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post8&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-01-01 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player117&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post9&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2022-01-01 22:23:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player108&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post10&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2011-01-01 10:00:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player100&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post11&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2021-11-01 11:10:30&#34;</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">commented_at</span><span class="p">(</span><span class="n">post_time</span><span class="p">)</span><span class="w"> </span><span class="k">values</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player105&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post1&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-01-02 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player109&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post1&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2016-11-24 10:04:50&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player113&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post3&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-11-13 10:44:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player101&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post4&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2014-12-04 20:45:11&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player102&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post1&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2015-03-03 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player103&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post1&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2017-09-23 23:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player102&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post7&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2018-01-04 00:44:23&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player101&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post8&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-01-04 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player106&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post9&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2022-01-02 22:23:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player105&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post10&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2011-01-11 10:00:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player130&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post1&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-01-02 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player131&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post2&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2016-11-24 10:04:50&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player131&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post3&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-11-13 10:44:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player133&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post4&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2014-12-04 20:45:11&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player132&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post5&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2015-03-03 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player134&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post6&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2017-09-23 23:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player135&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post7&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2018-01-04 00:44:23&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player136&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post8&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-01-04 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player137&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post9&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2022-01-02 22:23:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player138&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post10&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2011-01-11 10:00:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player141&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post1&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-01-03 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player142&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post2&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2016-11-25 10:04:50&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player143&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post3&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-11-14 10:44:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player144&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post4&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2014-12-05 20:45:11&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player145&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post5&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2015-03-04 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player146&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post6&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2017-09-24 23:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player147&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post7&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2018-01-05 00:44:23&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player148&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post8&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-01-05 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player139&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post9&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2022-01-03 22:23:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player140&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post10&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2011-01-12 10:01:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player141&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post1&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-01-04 00:34:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player102&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post2&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2016-11-26 10:06:50&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player103&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post3&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-11-15 10:45:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player104&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post4&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2014-12-06 20:47:11&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player105&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post5&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2015-03-05 00:32:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player106&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post6&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2017-09-25 23:31:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player107&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post7&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2018-01-06 00:46:23&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player118&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post8&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-01-06 00:35:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player119&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post9&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2022-01-04 22:26:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player110&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post10&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2011-01-15 10:00:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player111&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post1&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-01-06 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player104&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post11&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2022-01-15 10:00:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player125&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post11&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2022-02-15 10:00:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player113&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post11&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2022-03-15 10:00:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player102&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post11&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2022-04-15 10:00:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player108&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post11&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2022-05-15 10:00:30&#34;</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="n">VERTEX</span><span class="w"> </span><span class="o">`</span><span class="n">address</span><span class="o">`</span><span class="w"> </span><span class="p">(</span><span class="o">`</span><span class="n">address</span><span class="o">`</span><span class="p">,</span><span class="w"> </span><span class="o">`</span><span class="n">geo_point</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="k">VALUES</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_0&#34;</span><span class="p">:(</span><span class="s2">&#34;Brittany Forge Apt. 718 East Eric  WV 97881&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_1&#34;</span><span class="p">:(</span><span class="s2">&#34;Richard Curve Kingstad  AZ 05660&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_2&#34;</span><span class="p">:(</span><span class="s2">&#34;Schmidt Key Lake Charles  AL 36174&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">13</span><span class="p">.</span><span class="mi">13</span><span class="p">,</span><span class="o">-</span><span class="mi">87</span><span class="p">.</span><span class="mi">65</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_3&#34;</span><span class="p">:(</span><span class="s2">&#34;5 Joanna Key Suite 704 Frankshire  OK 03035&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_4&#34;</span><span class="p">:(</span><span class="s2">&#34;1 Payne Circle Mitchellfort  LA 73053&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_5&#34;</span><span class="p">:(</span><span class="s2">&#34;2 Klein Mission New Annetteton  HI 05775&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_6&#34;</span><span class="p">:(</span><span class="s2">&#34;1 Vanessa Stravenue Suite 184 Baileyville  NY 46381&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">11</span><span class="p">,</span><span class="mi">12</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_7&#34;</span><span class="p">:(</span><span class="s2">&#34;John Garden Port John  LA 54602&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">13</span><span class="p">,</span><span class="mi">14</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_8&#34;</span><span class="p">:(</span><span class="s2">&#34;11 Webb Groves Tiffanyside  MN 14566&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="mi">16</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_9&#34;</span><span class="p">:(</span><span class="s2">&#34;70 Robinson Locks Suite 113 East Veronica  ND 87845&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">17</span><span class="p">,</span><span class="mi">18</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_10&#34;</span><span class="p">:(</span><span class="s2">&#34;24 Mcknight Port Apt. 028 Sarahborough  MD 38195&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">19</span><span class="p">,</span><span class="mi">20</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_11&#34;</span><span class="p">:(</span><span class="s2">&#34;0337 Mason Corner Apt. 900 Toddmouth  FL 61464&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">21</span><span class="p">,</span><span class="mi">22</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_12&#34;</span><span class="p">:(</span><span class="s2">&#34;7 Davis Station Apt. 691 Pittmanfort  HI 29746&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">23</span><span class="p">,</span><span class="mi">24</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_13&#34;</span><span class="p">:(</span><span class="s2">&#34;1 Southport Street Apt. 098 Westport  KY 85907&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">120</span><span class="p">.</span><span class="mi">12</span><span class="p">,</span><span class="mi">30</span><span class="p">.</span><span class="mi">16</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_14&#34;</span><span class="p">:(</span><span class="s2">&#34;Weber Unions Eddieland  MT 64619&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">25</span><span class="p">,</span><span class="mi">26</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_15&#34;</span><span class="p">:(</span><span class="s2">&#34;1 Amanda Freeway Lisaland  NJ 94933&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">27</span><span class="p">,</span><span class="mi">28</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_16&#34;</span><span class="p">:(</span><span class="s2">&#34;2 Klein HI 05775&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_17&#34;</span><span class="p">:(</span><span class="s2">&#34;Schmidt Key Lake Charles AL 13617&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">13</span><span class="p">.</span><span class="mi">12</span><span class="p">,</span><span class="w"> </span><span class="o">-</span><span class="mi">87</span><span class="p">.</span><span class="mi">60</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_18&#34;</span><span class="p">:(</span><span class="s2">&#34;Rodriguez Track East Connorfort  NC 63144&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">29</span><span class="p">,</span><span class="mi">30</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="n">VERTEX</span><span class="w"> </span><span class="o">`</span><span class="n">place</span><span class="o">`</span><span class="w"> </span><span class="p">(</span><span class="o">`</span><span class="n">name</span><span class="o">`</span><span class="p">,</span><span class="w"> </span><span class="o">`</span><span class="n">geo_point</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="k">VALUES</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;WV&#34;</span><span class="p">:(</span><span class="s2">&#34;West Virginia&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">.</span><span class="mi">5</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;AZ&#34;</span><span class="p">:(</span><span class="s2">&#34;Arizona&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">.</span><span class="mi">5</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;AL&#34;</span><span class="p">:(</span><span class="s2">&#34;Alabama&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">13</span><span class="p">.</span><span class="mi">13</span><span class="p">,</span><span class="o">-</span><span class="mi">87</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;OK&#34;</span><span class="p">:(</span><span class="s2">&#34;Oklahoma&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">.</span><span class="mi">1</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;LA&#34;</span><span class="p">:(</span><span class="s2">&#34;Louisiana&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">.</span><span class="mi">1</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;HI&#34;</span><span class="p">:(</span><span class="s2">&#34;Hawaii&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="p">.</span><span class="mi">1</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;NY&#34;</span><span class="p">:(</span><span class="s2">&#34;New York&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">11</span><span class="p">,</span><span class="mi">12</span><span class="p">.</span><span class="mi">1</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;MN&#34;</span><span class="p">:(</span><span class="s2">&#34;Minnesota&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="mi">16</span><span class="p">.</span><span class="mi">1</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;ND&#34;</span><span class="p">:(</span><span class="s2">&#34;North Dakota&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">17</span><span class="p">,</span><span class="mi">18</span><span class="p">.</span><span class="mi">1</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;FL&#34;</span><span class="p">:(</span><span class="s2">&#34;Florida&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">21</span><span class="p">,</span><span class="mi">22</span><span class="p">.</span><span class="mi">1</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;KY&#34;</span><span class="p">:(</span><span class="s2">&#34;Kentucky&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">120</span><span class="p">.</span><span class="mi">12</span><span class="p">,</span><span class="mi">30</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;MT&#34;</span><span class="p">:(</span><span class="s2">&#34;Montana&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">25</span><span class="p">,</span><span class="mi">26</span><span class="p">.</span><span class="mi">1</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;NJ&#34;</span><span class="p">:(</span><span class="s2">&#34;New Jersey&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">27</span><span class="p">,</span><span class="mi">28</span><span class="p">.</span><span class="mi">1</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;NC&#34;</span><span class="p">:(</span><span class="s2">&#34;North Carolina&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">29</span><span class="p">,</span><span class="mi">30</span><span class="p">.</span><span class="mi">1</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="o">`</span><span class="n">belong_to</span><span class="o">`</span><span class="p">()</span><span class="w"> </span><span class="k">VALUES</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_0&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;WV&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_1&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;AZ&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_2&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;AL&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_3&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;OK&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_4&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;LA&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_5&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;HI&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_6&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;NY&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_7&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;LA&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_8&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;MN&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_9&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;ND&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_10&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;MD&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_11&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;FL&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_12&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;HI&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_13&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;KY&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_14&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;MT&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_15&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;NJ&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_16&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;HI&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_17&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;AL&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_18&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;NC&#34;</span><span class="p">:();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="o">`</span><span class="n">lived_in</span><span class="o">`</span><span class="p">()</span><span class="w"> </span><span class="k">VALUES</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player100&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_4&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player101&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_7&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player102&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_2&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player103&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_3&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player104&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_0&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player105&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_5&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player106&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_6&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player107&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_1&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player108&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_8&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player109&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_9&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player110&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_10&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player111&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_11&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player112&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_12&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player113&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_13&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player114&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_14&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player115&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_15&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player116&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_16&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player117&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_17&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player118&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_18&#34;</span><span class="p">:();</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="first-glance-at-the-data" class="headerLink">
    <a href="#first-glance-at-the-data" class="header-mark"></a>2.4 First glance at the data</h3><p>Let&rsquo;s start with the stats of the data.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="p">[</span><span class="n">basketballplayer</span><span class="p">]</span><span class="o">&gt;</span><span class="w"> </span><span class="n">SUBMIT</span><span class="w"> </span><span class="n">JOB</span><span class="w"> </span><span class="n">STATS</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">------------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="k">New</span><span class="w"> </span><span class="n">Job</span><span class="w"> </span><span class="n">Id</span><span class="w"> </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">------------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="mi">10</span><span class="w">         </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">------------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">[</span><span class="n">basketballplayer</span><span class="p">]</span><span class="o">&gt;</span><span class="w"> </span><span class="k">SHOW</span><span class="w"> </span><span class="n">STATS</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">---------+----------------+-------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="k">Type</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="n">Name</span><span class="w">           </span><span class="o">|</span><span class="w"> </span><span class="k">Count</span><span class="w"> </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">---------+----------------+-------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Tag&#34;</span><span class="w">   </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;address&#34;</span><span class="w">      </span><span class="o">|</span><span class="w"> </span><span class="mi">19</span><span class="w">    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Tag&#34;</span><span class="w">   </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;place&#34;</span><span class="w">        </span><span class="o">|</span><span class="w"> </span><span class="mi">14</span><span class="w">    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Tag&#34;</span><span class="w">   </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;player&#34;</span><span class="w">       </span><span class="o">|</span><span class="w"> </span><span class="mi">51</span><span class="w">    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Tag&#34;</span><span class="w">   </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;post&#34;</span><span class="w">         </span><span class="o">|</span><span class="w"> </span><span class="mi">10</span><span class="w">    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Tag&#34;</span><span class="w">   </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;team&#34;</span><span class="w">         </span><span class="o">|</span><span class="w"> </span><span class="mi">30</span><span class="w">    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Edge&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;belong_to&#34;</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="mi">19</span><span class="w">    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Edge&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;commented_at&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="mi">40</span><span class="w">    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Edge&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;created_post&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="mi">10</span><span class="w">    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Edge&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;follow&#34;</span><span class="w">       </span><span class="o">|</span><span class="w"> </span><span class="mi">81</span><span class="w">    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Edge&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;lived_in&#34;</span><span class="w">     </span><span class="o">|</span><span class="w"> </span><span class="mi">19</span><span class="w">    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Edge&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;serve&#34;</span><span class="w">        </span><span class="o">|</span><span class="w"> </span><span class="mi">152</span><span class="w">   </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Space&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;vertices&#34;</span><span class="w">     </span><span class="o">|</span><span class="w"> </span><span class="mi">124</span><span class="w">   </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Space&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;edges&#34;</span><span class="w">        </span><span class="o">|</span><span class="w"> </span><span class="mi">321</span><span class="w">   </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">---------+----------------+-------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Got</span><span class="w"> </span><span class="mi">13</span><span class="w"> </span><span class="k">rows</span><span class="w"> </span><span class="p">(</span><span class="n">time</span><span class="w"> </span><span class="n">spent</span><span class="w"> </span><span class="mi">1038</span><span class="o">/</span><span class="mi">51372</span><span class="w"> </span><span class="n">us</span><span class="p">)</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>We could get all of the data:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">()</span><span class="o">-</span><span class="p">[</span><span class="n">e</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">()</span><span class="w"> </span><span class="k">RETURN</span><span class="w"> </span><span class="n">e</span><span class="w"> </span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">10000</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>As the data volume is quite small, we could render them all in the canvas of NebulaGraph Explorer:</p>
<p><a class="lightgallery" href="/en/nebulagraph-sns/match_all.webp" title="match_all" data-thumbnail="/en/nebulagraph-sns/match_all.webp">
        
    </a></p>
<h2 id="identifying-key-people" class="headerLink">
    <a href="#identifying-key-people" class="header-mark"></a>3 Identifying key people</h2><p>Identifying influencers in social networks involves using a variety of metrics and methods to identify individuals who have a lot of influence in a given network. This is useful for many business scenarios, such as for marketing or researching the spread of information in a network.</p>
<p>There are many ways to identify them, and the specific methods and information, relationships, and perspectives considered also depend on the type of these key individuals, and the purpose of acquiring them.</p>
<p>Some common methods include looking at the number of followers a person has or the amount of content consumed, their reader engagement on their posts, videos, and the reach of their content (retweets, citations). These methods are also doable on the graph but are rather mundane, so I won&rsquo;t give examples. Here, we can try to derive these key people on the graph using graph algorithms that evaluate and calculate the importance of nodes.</p>
<h3 id="pagerank" class="headerLink">
    <a href="#pagerank" class="header-mark"></a>3.1 PageRank</h3><p>PageRank is a very classic graph algorithm that iterates through the number of relationships between points on a graph to get a score (Rank) for each point. It was originally proposed by Google founders Larry Page and Sergey Brin and used in the early Google search engine to sort search results, where Page can be a pun on Larry Page&rsquo;s last name and Web Page.</p>
<p>PageRank has long been abandoned as too simple in modern, complex search engines, but it still shines in other graph-structured web scenarios, where we can roughly assume that all links are of similar importance and run the algorithm to find those key users in social networks.</p>
<p>In NebulaGraph, we can use NebulaGraph Algorithm, NebulaGraph Analytics to run PageRank on large full graphs, while in the daily analysis, validation, and design phases, we don&rsquo;t need to run results on full data, but on very small subgraphs (up to tens of thousands), we can easily run various graph algorithms in the browser to derive methods that can be used for production.</p>
<p>Today, we will use the built-in in-browser graph algorithm function of NebulaGraph Explorer to execute PageRank (the specific method is omitted here, you can refer to the <a href="https://docs.nebula-graph.io/3.3.0/nebula-explorer/graph-explorer/graph-algorithm/" target="_blank" rel="noopener noreferrer">documentation</a>, but it&rsquo;s really just a matter of mouse clicks).</p>
<p><a class="lightgallery" href="/en/nebulagraph-sns/PageRank.webp" title="PageRank" data-thumbnail="/en/nebulagraph-sns/PageRank.webp">
        
    </a></p>
<p>We can see from the above that among all the green players (people) after PageRank calculation, &ldquo;player.name: Tim Duncan&rdquo; is the largest one, and the relationship associated with it does seem to be quite a lot, so we select him on the graph, then right-click to invert, select all the points except Tim Duncan, use the backspace key to delete all the other points, and then explore 1 to 5 steps in both directions with him as the starting point. In one step, we get Tim Duncan&rsquo;s subgraph.</p>
<p><a class="lightgallery" href="/en/nebulagraph-sns/TimDuncan.webp" title="TimDuncan" data-thumbnail="/en/nebulagraph-sns/TimDuncan.webp">
        
    </a></p>
<p>As you can see from the subgraphs, Tim Duncan is associated with a very large number of other players, while some other very popular players have served with him in the very popular Spurs team, which confirms the way PageRank is evaluated.</p>
<p>Now let&rsquo;s see if the algorithm will come to the same conclusion for the other dimensions of determination.</p>
<h3 id="betweenness-centrality" class="headerLink">
    <a href="#betweenness-centrality" class="header-mark"></a>3.2 Betweenness Centrality</h3><p>As you can see from the subgraphs, Tim Duncan is associated with a very large number of other players, while some other very popular players have served with him in the very popular Spurs team, which confirms the way PageRank is evaluated.</p>
<p>Now let&rsquo;s see if the algorithm will come to the same conclusion for the other dimensions of determination.</p>
<p><a class="lightgallery" href="/en/nebulagraph-sns/Betweeness_centrality.webp" title="Betweeness_centrality" data-thumbnail="/en/nebulagraph-sns/Betweeness_centrality.webp">
        
    </a></p>
<p>From its five-hop subgraph, it can be seen that unlike the star-shape of the key figure Tim Duncan obtained from PageRank before, Dejounte Murray&rsquo;s subgraph shows clusters, where it is sensory, intuitive to imagine that Dejounte Murray is really on the necessary path of the minimal path between many nodes, while Tim Duncan seems to be associated with more important connecters.</p>
<p><a class="lightgallery" href="/en/nebulagraph-sns/DejounteMurray.webp" title="DejounteMurray" data-thumbnail="/en/nebulagraph-sns/DejounteMurray.webp">
        
    </a></p>
<p>In practical application scenarios, we usually have to understand the definitions in different ways, experiment with different execution results, and analyze to find the structural features that affect the key people we care about, and use them to choose different algorithms for different needs.</p>
<h2 id="detect-communities-and-clusters" class="headerLink">
    <a href="#detect-communities-and-clusters" class="header-mark"></a>4 Detect communities and clusters</h2><p>Community detection in social networks is a technique to discover community structure by analyzing social relationships. A community structure is a set of nodes that are closely connected to each other in a social network, graph, and these nodes usually have similar characteristics or interests. For example, a community structure may manifest itself as a group of users who are clustered together based on common topics or interests.</p>
<p>The purpose of community detection is to identify the boundaries of different communities and determine the nodes in each community by analyzing the social network. This process can be done by using various algorithms such as label propagation algorithm, weakly connected component algorithm and Louvain algorithm. By discovering the community structure, we can better understand the structure and characteristics of social networks, and help social network service providers to better infer and predict behaviors in social networks, and help in good social network governance, advertisement placement, marketing, etc.</p>
<p>Since our dataset is fake-generated, the results I get under different algorithms do not show the real meaning, so this chapter just shows the results after community identification using several graph algorithms, in real-world cases, we should also use domain knowledge or other technical means on top of that to collaboratively give the portraits and labels of different groups and communities.</p>
<p>Effect of label propagation algorithm.</p>
<p><a class="lightgallery" href="/en/nebulagraph-sns/LPA.webp" title="LPA" data-thumbnail="/en/nebulagraph-sns/LPA.webp">
        
    </a></p>
<p>Louvain algorithm:</p>
<p><a class="lightgallery" href="/en/nebulagraph-sns/Louvain.webp" title="Louvain" data-thumbnail="/en/nebulagraph-sns/Louvain.webp">
        
    </a></p>
<p>WCC algorithm:</p>
<p><a class="lightgallery" href="/en/nebulagraph-sns/WCC.webp" title="WCC" data-thumbnail="/en/nebulagraph-sns/WCC.webp">
        
    </a></p>
<p>In later sections, we could in better chance verify these algorithms again on smaller and simpler subgraphs, with somewhat more interpretable results.</p>
<h2 id="friend-closeness" class="headerLink">
    <a href="#friend-closeness" class="header-mark"></a>5 Friend Closeness</h2><p>With the community detection algorithm, it is actually possible to obtain friends with similar interests and close associations to some extent, in a global calculation. So how do we get the other close friends of a given user? We can get this information by counting the number of friends this user has in common with him in order to get this information!</p>
<p>Let&rsquo;s take &ldquo;Tim Duncan&rdquo; for example, we know that his two-degree friends (friends of friends: <code>(:player{name: &quot;Tim Duncan&quot;})-[:follow]-(f:player)-[:follow]-(fof:player)</code>) are also his friends: Mutual Friend, then it is reasonable to believe that those who have more friends in common with Tim Duncan may have a higher closeness to him.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">start</span><span class="p">:</span><span class="o">`</span><span class="n">player</span><span class="o">`</span><span class="err">{</span><span class="n">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Tim Duncan&#34;</span><span class="err">}</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">f</span><span class="p">:</span><span class="o">`</span><span class="n">player</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">fof</span><span class="p">:</span><span class="o">`</span><span class="n">player</span><span class="o">`</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="n">start</span><span class="p">:</span><span class="o">`</span><span class="n">player</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">fof</span><span class="p">:</span><span class="o">`</span><span class="n">player</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">fof</span><span class="p">.</span><span class="o">`</span><span class="n">player</span><span class="o">`</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="nf">count</span><span class="p">(</span><span class="k">DISTINCT</span><span class="w"> </span><span class="n">f</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">NrOfMutualF</span><span class="w"> </span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">NrOfMutualF</span><span class="w"> </span><span class="k">DESC</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>This query shows that &ldquo;Tony Parker&rdquo; and Tim have 5 friends in common and are the closest.</p>
<table>
<thead>
<tr>
<th style="text-align:left">fof.player.name</th>
<th style="text-align:left">NrOfMutualF</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Tony Parker</td>
<td style="text-align:left">5</td>
</tr>
<tr>
<td style="text-align:left">Dejounte Murray</td>
<td style="text-align:left">4</td>
</tr>
<tr>
<td style="text-align:left">Manu Ginobili</td>
<td style="text-align:left">3</td>
</tr>
<tr>
<td style="text-align:left">Marco Belinelli</td>
<td style="text-align:left">3</td>
</tr>
<tr>
<td style="text-align:left">Danny Green</td>
<td style="text-align:left">2</td>
</tr>
<tr>
<td style="text-align:left">Boris Diaw</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">LaMarcus Aldridge</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">Tiago Splitter</td>
<td style="text-align:left">1</td>
</tr>
</tbody>
</table>
<p>Here, let&rsquo;s verify this result through visualization!</p>
<p>First, let&rsquo;s see who the common friends (f:) are for each of the friends.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">start</span><span class="p">:</span><span class="n">player</span><span class="err">{</span><span class="n">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Tim Duncan&#34;</span><span class="err">}</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">f</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">fof</span><span class="p">:</span><span class="n">player</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="n">start</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">fof</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">fof</span><span class="p">.</span><span class="n">player</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="nf">collect</span><span class="p">(</span><span class="k">DISTINCT</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">player</span><span class="p">.</span><span class="n">name</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>The result:</p>
<table>
<thead>
<tr>
<th style="text-align:left">fof.player.name</th>
<th style="text-align:left">collect(distinct f.player.name)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Boris Diaw</td>
<td style="text-align:left">[&ldquo;Tony Parker&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Manu Ginobili</td>
<td style="text-align:left">[&ldquo;Dejounte Murray&rdquo;, &ldquo;Tiago Splitter&rdquo;, &ldquo;Tony Parker&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">LaMarcus Aldridge</td>
<td style="text-align:left">[&ldquo;Tony Parker&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Tiago Splitter</td>
<td style="text-align:left">[&ldquo;Manu Ginobili&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Tony Parker</td>
<td style="text-align:left">[&ldquo;Dejounte Murray&rdquo;, &ldquo;Boris Diaw&rdquo;, &ldquo;Manu Ginobili&rdquo;, &ldquo;Marco Belinelli&rdquo;, &ldquo;LaMarcus Aldridge&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Dejounte Murray</td>
<td style="text-align:left">[&ldquo;Danny Green&rdquo;, &ldquo;Tony Parker&rdquo;, &ldquo;Manu Ginobili&rdquo;, &ldquo;Marco Belinelli&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Danny Green</td>
<td style="text-align:left">[&ldquo;Dejounte Murray&rdquo;, &ldquo;Marco Belinelli&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Marco Belinelli</td>
<td style="text-align:left">[&ldquo;Dejounte Murray&rdquo;, &ldquo;Danny Green&rdquo;, &ldquo;Tony Parker&rdquo;]</td>
</tr>
</tbody>
</table>
<p>Then we visualize the result on Explorer.</p>
<ul>
<li>First, let&rsquo;s find out all of Tim&rsquo;s 2-degree friend paths</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">start</span><span class="p">:</span><span class="n">player</span><span class="err">{</span><span class="n">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Tim Duncan&#34;</span><span class="err">}</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">f</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">follow</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">fof</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>Then we render the node size by degree in which we select Tim and Tony and find all paths between them for follow type edge, bidirectional, up to 2 hops:</li>
</ul>
<p>We can see that they are the closest of friends to each other and that their mutual friends are also in the paths.</p>
<p><code>[&quot;Dejounte Murray&quot;, &quot;Boris Diaw&quot;, &quot;Manu Ginobili&quot;, &quot;Marco Belinelli&quot;, &quot;LaMarcus Aldridge&quot;]</code></p>
<p><a class="lightgallery" href="/en/nebulagraph-sns/closest_friend.webp" title="closest_friend" data-thumbnail="/en/nebulagraph-sns/closest_friend.webp">
        
    </a></p>
<h3 id="small-groups-in-your-friends" class="headerLink">
    <a href="#small-groups-in-your-friends" class="header-mark"></a>5.1 Small groups in your friends</h3><p>At this point, as mentioned earlier, the non-authenticity of this dataset itself makes the results of the community discovery algorithm unable to get the insightful connotation of it. Now we can follow this small subgraph to see how groups and communities can be distinguished among Tim&rsquo;s friends.</p>
<ul>
<li>Weakly connected components can split Tim&rsquo;s friends into two or three parts that are not connected to each other, which is very much in line with the intuitive understanding and definition of connected components.</li>
</ul>
<p><a class="lightgallery" href="/en/nebulagraph-sns/Tim_wcc.webp" title="Tim_wcc" data-thumbnail="/en/nebulagraph-sns/Tim_wcc.webp">
        
    </a></p>
<ul>
<li>
<p>Label propagation, we can control the number of iterations on-demand to delineate different degrees of division by random propagation, which results in a certain degree of differentiation.</p>
<p>20 iterations</p>
<p><a class="lightgallery" href="/en/nebulagraph-sns/Tim_LPA.webp" title="Tim_LPA" data-thumbnail="/en/nebulagraph-sns/Tim_LPA.webp">
        
    </a></p>
<p>1000 iterations</p>
<p><a class="lightgallery" href="/en/nebulagraph-sns/Tim_LPA_1000.webp" title="Tim_LPA_1000" data-thumbnail="/en/nebulagraph-sns/Tim_LPA_1000.webp">
        
    </a></p>
</li>
<li>
<p>Louvain, a more efficient and stable algorithm, basically under this subgraph we can get a very intuitive division with a very small number of iterations.</p>
</li>
</ul>
<p><a class="lightgallery" href="/en/nebulagraph-sns/Tim_Louvain.webp" title="Tim_Louvain" data-thumbnail="/en/nebulagraph-sns/Tim_Louvain.webp">
        
    </a></p>
<h2 id="new-friend-recommendation" class="headerLink">
    <a href="#new-friend-recommendation" class="header-mark"></a>6 New friend recommendation</h2><p>Following the previous idea of 2-degree friends (friends of friends), we can easily add those 2-degree friends who are not yet friends as recommended friends, and the sorting rule is the number of friends they have in common with each other:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">start</span><span class="p">:</span><span class="n">player</span><span class="err">{</span><span class="n">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Tim Duncan&#34;</span><span class="err">}</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">f</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">fof</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="p">(</span><span class="n">start</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">fof</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">fof</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">start</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">fof</span><span class="p">.</span><span class="n">player</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="nf">count</span><span class="p">(</span><span class="k">DISTINCT</span><span class="w"> </span><span class="n">f</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">NrOfMutualF</span><span class="w"> </span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">NrOfMutualF</span><span class="w"> </span><span class="k">DESC</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><table>
<thead>
<tr>
<th style="text-align:left">fof.player.name</th>
<th style="text-align:left">NrOfMutualF</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">LeBron James</td>
<td style="text-align:left">2</td>
</tr>
<tr>
<td style="text-align:left">James Harden</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">Chris Paul</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">Yao Ming</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">Damian Lillard</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">JaVale McGee</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">Kevin Durant</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">Kyle Anderson</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">Rudy Gay</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">Russell Westbrook</td>
<td style="text-align:left">1</td>
</tr>
</tbody>
</table>
<p>Obviously, LeBron is the most recommended! And look at who these mutual friends are.</p>
<table>
<thead>
<tr>
<th style="text-align:left">fof.player.name</th>
<th style="text-align:left">collect(distinct f.player.name)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">James Harden</td>
<td style="text-align:left">[&ldquo;Dejounte Murray&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">LeBron James</td>
<td style="text-align:left">[&ldquo;Danny Green&rdquo;, &ldquo;Dejounte Murray&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Chris Paul</td>
<td style="text-align:left">[&ldquo;Dejounte Murray&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Yao Ming</td>
<td style="text-align:left">[&ldquo;Shaquille O&rsquo;Neal&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Damian Lillard</td>
<td style="text-align:left">[&ldquo;LaMarcus Aldridge&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">JaVale McGee</td>
<td style="text-align:left">[&ldquo;Shaquille O&rsquo;Neal&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Kevin Durant</td>
<td style="text-align:left">[&ldquo;Dejounte Murray&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Kyle Anderson</td>
<td style="text-align:left">[&ldquo;Dejounte Murray&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Rudy Gay</td>
<td style="text-align:left">[&ldquo;LaMarcus Aldridge&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Russell Westbrook</td>
<td style="text-align:left">[&ldquo;Dejounte Murray&rdquo;]</td>
</tr>
</tbody>
</table>
<p>同样，我们在刚才的子图里找找 LeBron James 吧！我们把它俩之间的两步、双向路径找出来，果然只会经过 <code>[&quot;Danny Green&quot;, &quot;Dejounte Murray&quot;]</code> 并且，没有直接的连接：</p>
<p>Again, let&rsquo;s look for LeBron James in the subgraph we just created! And find the two-step, two-way path between them, and sure enough, it only goes through <code>[&quot;Danny Green&quot;, &quot;Dejounte Murray&quot;]</code> and, without a direct connection.</p>
<p><a class="lightgallery" href="/en/nebulagraph-sns/Tim_newFriend.webp" title="Tim_newFriend" data-thumbnail="/en/nebulagraph-sns/Tim_newFriend.webp">
        
    </a></p>
<p>Now, the system could send reminders to both sides: &ldquo;HEY, maybe you two should make new friends!&rdquo;</p>
<h2 id="common-neighbor" class="headerLink">
    <a href="#common-neighbor" class="header-mark"></a>7 Common Neighbor</h2><p>Finding common neighbors is a very common graph database query, and its scenarios may bring different scenarios depending on different neighbor relationships and node types. The common buddy in the first two scenarios is essentially a common neighbor between two points, and directly querying such a relationship is very simple with OpenCypher.</p>
<h3 id="a-common-neighbor-between-two-vertices" class="headerLink">
    <a href="#a-common-neighbor-between-two-vertices" class="header-mark"></a>7.1 A common neighbor between two vertices</h3><p>For example, this expression can query the commonality, intersection between two users, the result may be common teams, places visited, interests, common participation in post replies, etc.:.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="o">`</span><span class="n">v0</span><span class="o">`</span><span class="p">)</span><span class="o">--</span><span class="p">()</span><span class="o">--</span><span class="p">(</span><span class="o">`</span><span class="n">v1</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="o">`</span><span class="n">v0</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;player100&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="o">`</span><span class="n">v1</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;player104&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>And after limiting the type of edge, this query is limited to the common friend query.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">v0</span><span class="p">)</span><span class="o">--</span><span class="p">(:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">)</span><span class="o">--</span><span class="p">(</span><span class="n">v1</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">v0</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;player100&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">v1</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;player104&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="common-neighbors-among-multiple-vertices-content-notification" class="headerLink">
    <a href="#common-neighbors-among-multiple-vertices-content-notification" class="header-mark"></a>7.2 Common neighbors among multiple vertices: content notification</h3><p>Below, we give a multi-nodes common neighbor scenario where we trigger from a post, find out all the users who have interacted on this post, and find the common neighbors in this group.</p>
<p>What is the use of this common neighbor? Naturally, if this common neighbor has not yet had any interaction with this article, we can recommend this article to him.</p>
<p>The implementation of this query is interesting.</p>
<ul>
<li>The first MATCH is to find the total number of people who left comments and authors on all post11 articles</li>
<li>After the second MATCH, we find the number of friends of the interacting users who have participated in the article that is exactly equal to the number of users who have participated in the article, and they are actually the common friends of all the participating users.</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">blog</span><span class="p">:</span><span class="n">post</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[</span><span class="n">e</span><span class="p">]</span><span class="o">-</span><span class="p">(:</span><span class="n">player</span><span class="p">)</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">blog</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;post11&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">blog</span><span class="p">,</span><span class="w"> </span><span class="nf">count</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">invoved_user_count</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">blog</span><span class="p">:</span><span class="n">post</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[]</span><span class="o">-</span><span class="p">(</span><span class="n">users</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">common_neighbor</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="nf">toSet</span><span class="p">(</span><span class="nf">collect</span><span class="p">(</span><span class="n">users</span><span class="p">))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">users</span><span class="p">,</span><span class="w"> </span><span class="n">common_neighbor</span><span class="p">,</span><span class="w"> </span><span class="n">invoved_user_count</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">size</span><span class="p">(</span><span class="n">users</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">invoved_user_count</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">common_neighbor</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>And that person is . . Tony!</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">+-----------------------------------------------------+
</span></span><span class="line"><span class="cl">| common_neighbor                                     |
</span></span><span class="line"><span class="cl">+-----------------------------------------------------+
</span></span><span class="line"><span class="cl">| (&#34;player101&#34; :player{age: 36, name: &#34;Tony Parker&#34;}) |
</span></span><span class="line"><span class="cl">+-----------------------------------------------------+
</span></span></code></pre></td></tr></table>
</div>
</div><p>And we can easily verify it in the visualization of the query:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">blog</span><span class="p">:</span><span class="n">post</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[]</span><span class="o">-</span><span class="p">(</span><span class="n">users</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">common_neighbor</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">blog</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;post11&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Rendering this query, and then looking for two-way, two-hop queries between the article called &ldquo;Let&rsquo;s have a party!&rdquo; and Tony&rsquo;s comments, posts, and followers, we can see that all the people involved in the article are, without exception, Tony&rsquo;s friends, and only Tony himself has not yet left a comment on the article!</p>
<p>And how can a party be without Tony? Is it his surprise birthday party, Opps, shouldn&rsquo;t we tell him, or?</p>
<p><a class="lightgallery" href="/en/nebulagraph-sns/common_nbrs_tony.webp" title="common_nbrs_tony" data-thumbnail="/en/nebulagraph-sns/common_nbrs_tony.webp">
        
    </a></p>
<h2 id="feed-generation" class="headerLink">
    <a href="#feed-generation" class="header-mark"></a>8 Feed Generation</h2><p>I have previously written about the implementation of recommendation systems based on graph technology, in which I described that content filtering and sorting methods in modern recommendation systems can be performed on graphs. It is also highly time-sensitive. The feed generation in a SNS is quite similar but slightly different.</p>
<h3 id="content-with-friend-engagement" class="headerLink">
    <a href="#content-with-friend-engagement" class="header-mark"></a>8.1 Content with friend engagement</h3><p>The simplest and most straightforward definition of content generation may be the facebook feed of content created and engaged by people you follow.</p>
<ul>
<li>Content created by friends within a certain period of time</li>
<li>the content of friends&rsquo; comments within a certain time frame</li>
</ul>
<p>We can use OpenCypher to express this query for the stream of information with user id player100.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">feed_owner</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">friend</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">feed_owner</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;player100&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">friend</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">newly_commented</span><span class="p">:</span><span class="n">commented_at</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(:</span><span class="n">post</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">created_post</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">feed_owner</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="n">newly_commented</span><span class="p">.</span><span class="n">post_time</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="kt">timestamp</span><span class="p">(</span><span class="s2">&#34;2010-01-01 00:00:00&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">friend</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">newly_created</span><span class="p">:</span><span class="n">created_post</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">po</span><span class="p">:</span><span class="n">post</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="n">newly_created</span><span class="p">.</span><span class="n">post_time</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="kt">timestamp</span><span class="p">(</span><span class="s2">&#34;2010-01-01 00:00:00&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="k">DISTINCT</span><span class="w"> </span><span class="n">friend</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nf">collect</span><span class="p">(</span><span class="k">DISTINCT</span><span class="w"> </span><span class="n">po</span><span class="p">.</span><span class="n">post</span><span class="p">.</span><span class="n">title</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nf">collect</span><span class="p">(</span><span class="s2">&#34;comment of &#34;</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nf">dst</span><span class="p">(</span><span class="n">newly_commented</span><span class="p">))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">AS</span><span class="w"> </span><span class="n">feeds</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">size</span><span class="p">(</span><span class="n">feeds</span><span class="p">)</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">friend</span><span class="p">.</span><span class="n">player</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">feeds</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><table>
<thead>
<tr>
<th style="text-align:left">friend.player.name</th>
<th style="text-align:left">feeds</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Boris Diaw</td>
<td style="text-align:left">[&ldquo;I love you, Mom&rdquo;, &ldquo;comment of post11&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Marco Belinelli</td>
<td style="text-align:left">[&ldquo;my best friend, tom&rdquo;, &ldquo;comment of post11&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Danny Green</td>
<td style="text-align:left">[&ldquo;comment of post1&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Tiago Splitter</td>
<td style="text-align:left">[&ldquo;comment of post1&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Dejounte Murray</td>
<td style="text-align:left">[&ldquo;comment of post11&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Tony Parker</td>
<td style="text-align:left">[&ldquo;I can swim&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">LaMarcus Aldridge</td>
<td style="text-align:left">[&ldquo;I hate coriander&rdquo;, &ldquo;comment of post11&rdquo;, &ldquo;comment of post1&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Manu Ginobili</td>
<td style="text-align:left">[&ldquo;my best friend, jerry&rdquo;, &ldquo;comment of post11&rdquo;, &ldquo;comment of post11&rdquo;]</td>
</tr>
</tbody>
</table>
<p>So, we can send these comments, articles to the user&rsquo;s feed.</p>
<p>Let&rsquo;s also see what they look like on the graph, we output all the paths we queried:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">feed_owner</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">friend</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">feed_owner</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;player100&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="n">p_comment</span><span class="o">=</span><span class="p">(</span><span class="n">friend</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">newly_commented</span><span class="p">:</span><span class="n">commented_at</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(:</span><span class="n">post</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">created_post</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">feed_owner</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="n">newly_commented</span><span class="p">.</span><span class="n">post_time</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="kt">timestamp</span><span class="p">(</span><span class="s2">&#34;2010-01-01 00:00:00&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="n">p_post</span><span class="o">=</span><span class="p">(</span><span class="n">friend</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">newly_created</span><span class="p">:</span><span class="n">created_post</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">po</span><span class="p">:</span><span class="n">post</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="n">newly_created</span><span class="p">.</span><span class="n">post_time</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="kt">timestamp</span><span class="p">(</span><span class="s2">&#34;2010-01-01 00:00:00&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="p">,</span><span class="w"> </span><span class="n">p_comment</span><span class="p">,</span><span class="w"> </span><span class="n">p_post</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Rendering on Explorer and selecting the &ldquo;Neural Network&rdquo; layout, you can clearly see the pink article nodes and the edges representing the comments.</p>
<p><a class="lightgallery" href="/en/nebulagraph-sns/feed_from_friends.webp" title="feed_from_friends" data-thumbnail="/en/nebulagraph-sns/feed_from_friends.webp">
        
    </a></p>
<h3 id="content-of-nearby-friends" class="headerLink">
    <a href="#content-of-nearby-friends" class="header-mark"></a>8.2 Content of nearby friends</h3><p>Let&rsquo;s go a step further and take geographic information(GeoSpatial) into account to get content related to friends whose addresses have a latitude and longitude less than a certain distance.</p>
<p>Here, we use NebulaGraph&rsquo;s GeoSpatial geography function, the constraint <code>ST_Distance(home.address.geo_point, friend_addr.address.geo_point) AS distance WHERE distance &lt; 1000000</code> helps us express the distance limit.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">home</span><span class="p">:</span><span class="n">address</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">lived_in</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">feed_owner</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">friend</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">lived_in</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">friend_addr</span><span class="p">:</span><span class="n">address</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">feed_owner</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;player100&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">feed_owner</span><span class="p">,</span><span class="w"> </span><span class="n">friend</span><span class="p">,</span><span class="w"> </span><span class="nf">ST_Distance</span><span class="p">(</span><span class="n">home</span><span class="p">.</span><span class="n">address</span><span class="p">.</span><span class="n">geo_point</span><span class="p">,</span><span class="w"> </span><span class="n">friend_addr</span><span class="p">.</span><span class="n">address</span><span class="p">.</span><span class="n">geo_point</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">distance</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">distance</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">1000000</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">friend</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">newly_commented</span><span class="p">:</span><span class="n">commented_at</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(:</span><span class="n">post</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">created_post</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">feed_owner</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="n">newly_commented</span><span class="p">.</span><span class="n">post_time</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="kt">timestamp</span><span class="p">(</span><span class="s2">&#34;2010-01-01 00:00:00&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">friend</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">newly_created</span><span class="p">:</span><span class="n">created_post</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">po</span><span class="p">:</span><span class="n">post</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="n">newly_created</span><span class="p">.</span><span class="n">post_time</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="kt">timestamp</span><span class="p">(</span><span class="s2">&#34;2010-01-01 00:00:00&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="k">DISTINCT</span><span class="w"> </span><span class="n">friend</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nf">collect</span><span class="p">(</span><span class="k">DISTINCT</span><span class="w"> </span><span class="n">po</span><span class="p">.</span><span class="n">post</span><span class="p">.</span><span class="n">title</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nf">collect</span><span class="p">(</span><span class="s2">&#34;comment of &#34;</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nf">dst</span><span class="p">(</span><span class="n">newly_commented</span><span class="p">))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">AS</span><span class="w"> </span><span class="n">feeds</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">size</span><span class="p">(</span><span class="n">feeds</span><span class="p">)</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">friend</span><span class="p">.</span><span class="n">player</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">feeds</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><table>
<thead>
<tr>
<th style="text-align:left">friend.player.name</th>
<th style="text-align:left">feeds</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Marco Belinelli</td>
<td style="text-align:left">[&ldquo;my best friend, tom&rdquo;, &ldquo;comment of post11&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Tony Parker</td>
<td style="text-align:left">[&ldquo;I can swim&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Danny Green</td>
<td style="text-align:left">[&ldquo;comment of post1&rdquo;]</td>
</tr>
</tbody>
</table>
<p>At this point, you can also see the relationship between addresses and their latitude and longitude information from the visualization of this result.</p>
<p>I manually arranged the nodes of the addresses on the graph according to their latitude and longitude and saw that the address (7, 8) of Tim(player100), the owner of this feed, is exactly in the middle of other friends&rsquo; addresses.</p>
<p><a class="lightgallery" href="/en/nebulagraph-sns/geo_feed.webp" title="geo_feed" data-thumbnail="/en/nebulagraph-sns/geo_feed.webp">
        
    </a></p>
<h2 id="spatio-temporal-relationship-tracking" class="headerLink">
    <a href="#spatio-temporal-relationship-tracking" class="header-mark"></a>9 Spatio-temporal relationship tracking</h2><p>Spatio-temporal relationship tracking is a typical application that uses graph traversal to make the most of complicated and messy information in scenarios such as public safety, logistics, and epidemic prevention and control. When we build such a graph, we often need only simple graph queries to gain very useful insights. In this section, I&rsquo;ll give an example of this application scenario.</p>
<h3 id="dataset" class="headerLink">
    <a href="#dataset" class="header-mark"></a>9.1 Dataset</h3><p>For this purpose, I created a fake dataset by which to build a spatio-temporal relationship graph. The dataset generation program and a file that can be used directly are placed on GitHub at <a href="https://github.com/wey-gu/covid-track-graph-datagen" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/covid-track-graph-datagen</a>.</p>
<p>It models the data as follows.</p>

<p>We could get the data ready in three lines in any Linux System:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># Install NebulaGraph + NebulaGraph Studio</span>
</span></span><span class="line"><span class="cl">curl -fsSL nebula-up.siwei.io/install.sh <span class="p">|</span> bash -s -- v3
</span></span><span class="line"><span class="cl"><span class="c1"># Clone the dataset</span>
</span></span><span class="line"><span class="cl">git clone https://github.com/wey-gu/covid-track-graph-datagen <span class="o">&amp;&amp;</span> <span class="nb">cd</span> covid-track-graph-datagen
</span></span><span class="line"><span class="cl"><span class="c1"># Load the dataset into NebulaGraph</span>
</span></span><span class="line"><span class="cl">docker run --rm -ti <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --network<span class="o">=</span>nebula-net <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v <span class="si">${</span><span class="nv">PWD</span><span class="si">}</span>/:/root <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    vesoft/nebula-importer:v3.2.0 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --config /root/nebula-importer-config.yaml
</span></span></code></pre></td></tr></table>
</div>
</div><p>Then we could inspect the data from console:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">~/.nebula-up/console.sh
</span></span><span class="line"><span class="cl"><span class="c1"># access console, and sse the covid_trace graph space</span>
</span></span><span class="line"><span class="cl">USE covid_trace<span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># check stats</span>
</span></span><span class="line"><span class="cl">SHOW STATS
</span></span></code></pre></td></tr></table>
</div>
</div><p>Results:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>root@nebula<span class="o">)</span> <span class="o">[</span>covid_trace<span class="o">]</span>&gt; SHOW STATS
</span></span><span class="line"><span class="cl">+---------+------------+--------+
</span></span><span class="line"><span class="cl"><span class="p">|</span> Type    <span class="p">|</span> Name       <span class="p">|</span> Count  <span class="p">|</span>
</span></span><span class="line"><span class="cl">+---------+------------+--------+
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Tag&#34;</span>   <span class="p">|</span> <span class="s2">&#34;人&#34;</span>       <span class="p">|</span> <span class="m">10000</span>  <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Tag&#34;</span>   <span class="p">|</span> <span class="s2">&#34;地址&#34;</span>     <span class="p">|</span> <span class="m">1000</span>   <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Tag&#34;</span>   <span class="p">|</span> <span class="s2">&#34;城市&#34;</span>     <span class="p">|</span> <span class="m">341</span>    <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Tag&#34;</span>   <span class="p">|</span> <span class="s2">&#34;村镇&#34;</span>     <span class="p">|</span> <span class="m">42950</span>  <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Tag&#34;</span>   <span class="p">|</span> <span class="s2">&#34;省份&#34;</span>     <span class="p">|</span> <span class="m">32</span>     <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Tag&#34;</span>   <span class="p">|</span> <span class="s2">&#34;联系方式&#34;</span> <span class="p">|</span> <span class="m">0</span>      <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Tag&#34;</span>   <span class="p">|</span> <span class="s2">&#34;行政区&#34;</span>   <span class="p">|</span> <span class="m">3134</span>   <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Tag&#34;</span>   <span class="p">|</span> <span class="s2">&#34;街道&#34;</span>     <span class="p">|</span> <span class="m">667911</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Edge&#34;</span>  <span class="p">|</span> <span class="s2">&#34;住址&#34;</span>     <span class="p">|</span> <span class="m">0</span>      <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Edge&#34;</span>  <span class="p">|</span> <span class="s2">&#34;到访&#34;</span>     <span class="p">|</span> <span class="m">19986</span>  <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Edge&#34;</span>  <span class="p">|</span> <span class="s2">&#34;同住&#34;</span>     <span class="p">|</span> <span class="m">19998</span>  <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Edge&#34;</span>  <span class="p">|</span> <span class="s2">&#34;属于&#34;</span>     <span class="p">|</span> <span class="m">715336</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Space&#34;</span> <span class="p">|</span> <span class="s2">&#34;vertices&#34;</span> <span class="p">|</span> <span class="m">725368</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Space&#34;</span> <span class="p">|</span> <span class="s2">&#34;edges&#34;</span>    <span class="p">|</span> <span class="m">755320</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl">+---------+------------+--------+
</span></span><span class="line"><span class="cl">Got <span class="m">14</span> rows <span class="o">(</span><span class="nb">time</span> spent 1087/46271 us<span class="o">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="connections-between-two" class="headerLink">
    <a href="#connections-between-two" class="header-mark"></a>9.2 Connections between two</h3><p>This could be done with <code>FIND PATH</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># SHORTEST
</span></span><span class="line"><span class="cl">FIND SHORTEST PATH FROM &#34;p_100&#34; TO &#34;p_101&#34; OVER * BIDIRECT YIELD PATH AS paths
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># ALL PATH
</span></span><span class="line"><span class="cl">FIND ALL PATH FROM &#34;p_100&#34; TO &#34;p_101&#34; OVER * BIDIRECT YIELD PATH AS paths | LIMIT 10
</span></span></code></pre></td></tr></table>
</div>
</div><p>SHORTEST Path result:</p>
<table>
<thead>
<tr>
<th style="text-align:left">paths</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">&lt;(&ldquo;p_100&rdquo;)&lt;-[:同住@0 {}]-(&ldquo;p_2136&rdquo;)&lt;-[:同住@0 {}]-(&ldquo;p_3708&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_125&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_101&rdquo;)&gt;</td>
</tr>
</tbody>
</table>
<p>ALL Path result:</p>
<table>
<thead>
<tr>
<th style="text-align:left">paths</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">&lt;(&ldquo;p_100&rdquo;)&lt;-[:同住@0 {}]-(&ldquo;p_2136&rdquo;)&lt;-[:同住@0 {}]-(&ldquo;p_3708&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_125&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_101&rdquo;)&gt;</td>
</tr>
<tr>
<td style="text-align:left">&lt;(&ldquo;p_100&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_328&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_6976&rdquo;)&lt;-[:同住@0 {}]-(&ldquo;p_261&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_352&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_101&rdquo;)&gt;</td>
</tr>
<tr>
<td style="text-align:left">&lt;(&ldquo;p_100&rdquo;)-[:同住@0 {}]-&gt;(&ldquo;p_8709&rdquo;)-[:同住@0 {}]-&gt;(&ldquo;p_9315&rdquo;)-[:同住@0 {}]-&gt;(&ldquo;p_261&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_352&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_101&rdquo;)&gt;</td>
</tr>
<tr>
<td style="text-align:left">&lt;(&ldquo;p_100&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_328&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_6311&rdquo;)-[:同住@0 {}]-&gt;(&ldquo;p_3941&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_345&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_101&rdquo;)&gt;</td>
</tr>
<tr>
<td style="text-align:left">&lt;(&ldquo;p_100&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_328&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_5046&rdquo;)-[:同住@0 {}]-&gt;(&ldquo;p_3993&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_144&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_101&rdquo;)&gt;</td>
</tr>
<tr>
<td style="text-align:left">&lt;(&ldquo;p_100&rdquo;)-[:同住@0 {}]-&gt;(&ldquo;p_3457&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_199&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_6771&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_458&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_101&rdquo;)&gt;</td>
</tr>
<tr>
<td style="text-align:left">&lt;(&ldquo;p_100&rdquo;)&lt;-[:同住@0 {}]-(&ldquo;p_1462&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_922&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_5869&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_345&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_101&rdquo;)&gt;</td>
</tr>
<tr>
<td style="text-align:left">&lt;(&ldquo;p_100&rdquo;)&lt;-[:同住@0 {}]-(&ldquo;p_9489&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_985&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_2733&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_458&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_101&rdquo;)&gt;</td>
</tr>
<tr>
<td style="text-align:left">&lt;(&ldquo;p_100&rdquo;)&lt;-[:同住@0 {}]-(&ldquo;p_9489&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_905&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_2733&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_458&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_101&rdquo;)&gt;</td>
</tr>
<tr>
<td style="text-align:left">&lt;(&ldquo;p_100&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_89&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_1333&rdquo;)&lt;-[:同住@0 {}]-(&ldquo;p_1683&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_345&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_101&rdquo;)&gt;</td>
</tr>
</tbody>
</table>
<p>We render all the paths visually, mark the two people at the starting node and end end, and check their shortest paths in between, and the inextricable relationship between them is clear at a glance, whether it is for business insight, public safety or epidemic prevention and control purposes, with this information, the corresponding work can progress downward like a tiger.</p>
<p><a class="lightgallery" href="/en/nebulagraph-sns/find_path_two_people.webp" title="find_path_two_people" data-thumbnail="/en/nebulagraph-sns/find_path_two_people.webp">
        
    </a></p>
<p>Of course, on a real world system, it may be that we only need to care about the proximity of the association between two users:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">FIND SHORTEST PATH FROM &#34;p_100&#34; TO &#34;p_101&#34; OVER * BIDIRECT YIELD PATH AS paths |
</span></span><span class="line"><span class="cl">    YIELD collect(length($-.paths)) AS len | YIELD coalesce($-.len[0], -1) AS len
</span></span></code></pre></td></tr></table>
</div>
</div><p>In the result we only care about the length of the shortest path between them as: 4.</p>
<table>
<thead>
<tr>
<th style="text-align:left">len</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">4</td>
</tr>
</tbody>
</table>
<h3 id="temporal-intersection-of-people" class="headerLink">
    <a href="#temporal-intersection-of-people" class="header-mark"></a>9.3 Temporal intersection of people</h3><p>Further we can use graph semantics to outline any patterns with temporal and spatial information that we want to identify and query them in real time in the graph, e.g. for a given person whose id is p_101, we differ all the people who have temporal and spatial intersection with him at a given time, which means that those people also stay and visit a place within the time period in which p_101 visits those places.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">p</span><span class="p">:</span><span class="n">person</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="o">`</span><span class="n">visit0</span><span class="o">`</span><span class="p">:</span><span class="n">visited</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="o">`</span><span class="n">addr</span><span class="o">`</span><span class="p">:</span><span class="n">address</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[</span><span class="o">`</span><span class="n">visit1</span><span class="o">`</span><span class="p">:</span><span class="n">visited</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">p1</span><span class="p">:</span><span class="n">person</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;p_101&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="o">`</span><span class="n">visit0</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">start_time</span><span class="o">`</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="o">`</span><span class="n">visit1</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">end_time</span><span class="o">`</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">RETURN</span><span class="w"> </span><span class="o">`</span><span class="n">addr</span><span class="o">`</span><span class="p">.</span><span class="n">address</span><span class="p">.</span><span class="o">`</span><span class="n">name</span><span class="o">`</span><span class="p">,</span><span class="w"> </span><span class="nf">collect</span><span class="p">(</span><span class="n">p1</span><span class="p">.</span><span class="n">person</span><span class="p">.</span><span class="o">`</span><span class="n">name</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>我们得到了在每一个到访地点的时空相交人列表如下：</p>
<p>We obtained the following list of temporal intersection people at each visited location.</p>
<table>
<thead>
<tr>
<th style="text-align:left">addr.address.name</th>
<th style="text-align:left">collect(p1.person.name)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">闵行仇路q座 255960</td>
<td style="text-align:left">[&ldquo;徐畅&rdquo;, &ldquo;王佳&rdquo;, &ldquo;曾亮&rdquo;, &ldquo;姜桂香&rdquo;, &ldquo;邵秀英&rdquo;, &ldquo;韦婷婷&rdquo;, &ldquo;陶玉&rdquo;, &ldquo;马坤&rdquo;, &ldquo;黄想&rdquo;, &ldquo;张秀芳&rdquo;, &ldquo;颜桂芳&rdquo;, &ldquo;张洋&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">丰都北京路J座 725701</td>
<td style="text-align:left">[&ldquo;陈春梅&rdquo;, &ldquo;施婷婷&rdquo;, &ldquo;井成&rdquo;, &ldquo;范文&rdquo;, &ldquo;王楠&rdquo;, &ldquo;尚明&rdquo;, &ldquo;薛秀珍&rdquo;, &ldquo;宋金凤&rdquo;, &ldquo;杨雪&rdquo;, &ldquo;邓丽华&rdquo;, &ldquo;李杨&rdquo;, &ldquo;温佳&rdquo;, &ldquo;叶玉&rdquo;, &ldquo;周明&rdquo;, &ldquo;王桂珍&rdquo;, &ldquo;段玉华&rdquo;, &ldquo;金成&rdquo;, &ldquo;黄鑫&rdquo;, &ldquo;邬兵&rdquo;, &ldquo;魏柳&rdquo;, &ldquo;王兰英&rdquo;, &ldquo;杨柳&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">普陀潜江路P座 210730</td>
<td style="text-align:left">[&ldquo;储平&rdquo;, &ldquo;洪红霞&rdquo;, &ldquo;沈玉英&rdquo;, &ldquo;王洁&rdquo;, &ldquo;董玉英&rdquo;, &ldquo;邓凤英&rdquo;, &ldquo;谢海燕&rdquo;, &ldquo;梁雷&rdquo;, &ldquo;张畅&rdquo;, &ldquo;任玉兰&rdquo;, &ldquo;贾宇&rdquo;, &ldquo;汪成&rdquo;, &ldquo;孙琴&rdquo;, &ldquo;纪红梅&rdquo;, &ldquo;王欣&rdquo;, &ldquo;陈兵&rdquo;, &ldquo;张成&rdquo;, &ldquo;王东&rdquo;, &ldquo;谷霞&rdquo;, &ldquo;林成&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">普陀武街f座 706352</td>
<td style="text-align:left">[&ldquo;邢成&rdquo;, &ldquo;张建军&rdquo;, &ldquo;张鑫&rdquo;, &ldquo;戴涛&rdquo;, &ldquo;蔡洋&rdquo;, &ldquo;汪燕&rdquo;, &ldquo;尹亮&rdquo;, &ldquo;何利&rdquo;, &ldquo;何玉&rdquo;, &ldquo;周波&rdquo;, &ldquo;金秀珍&rdquo;, &ldquo;杨波&rdquo;, &ldquo;张帅&rdquo;, &ldquo;周柳&rdquo;, &ldquo;马云&rdquo;, &ldquo;张建华&rdquo;, &ldquo;王丽丽&rdquo;, &ldquo;陈丽&rdquo;, &ldquo;万萍&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">城东贵阳街O座 110567</td>
<td style="text-align:left">[&ldquo;李洁&rdquo;, &ldquo;陈静&rdquo;, &ldquo;王建国&rdquo;, &ldquo;方淑华&rdquo;, &ldquo;古想&rdquo;, &ldquo;漆萍&rdquo;, &ldquo;詹桂花&rdquo;, &ldquo;王成&rdquo;, &ldquo;李慧&rdquo;, &ldquo;孙娜&rdquo;, &ldquo;马伟&rdquo;, &ldquo;谢杰&rdquo;, &ldquo;王鹏&rdquo;, &ldquo;鞠桂英&rdquo;, &ldquo;莫桂英&rdquo;, &ldquo;汪雷&rdquo;, &ldquo;黄彬&rdquo;, &ldquo;李玉梅&rdquo;, &ldquo;祝红梅&rdquo;]</td>
</tr>
</tbody>
</table>
<p>Now, let&rsquo;s visualize this result on a graph:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">p</span><span class="p">:</span><span class="n">person</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="o">`</span><span class="n">visit0</span><span class="o">`</span><span class="p">:</span><span class="n">visited</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="o">`</span><span class="n">addr</span><span class="o">`</span><span class="p">:</span><span class="n">address</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[</span><span class="o">`</span><span class="n">visit1</span><span class="o">`</span><span class="p">:</span><span class="n">visited</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">p1</span><span class="p">:</span><span class="n">person</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;p_101&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="o">`</span><span class="n">visit0</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">start_time</span><span class="o">`</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="o">`</span><span class="n">visit1</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">end_time</span><span class="o">`</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">RETURN</span><span class="w"> </span><span class="n">paths</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>In the result, we marked p_101 as a different icon, and identified the gathering community with the label propagation algorithm, isn&rsquo;t a graph worth a thousand words?</p>
<p><a class="lightgallery" href="/en/nebulagraph-sns/time_and_space.webp" title="time_and_space" data-thumbnail="/en/nebulagraph-sns/time_and_space.webp">
        
    </a></p>
<h3 id="most-recently-visited-provinces" class="headerLink">
    <a href="#most-recently-visited-provinces" class="header-mark"></a>9.4 Most recently visited provinces</h3><p>Finally, we then use a simple query pattern to express all the provinces a person has visited in a given time, say from a point in time:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">p</span><span class="p">:</span><span class="n">person</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">visit</span><span class="p">:</span><span class="n">visted</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="o">`</span><span class="n">addr</span><span class="o">`</span><span class="p">:</span><span class="n">address</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">belong_to</span><span class="o">*</span><span class="mi">5</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">prov</span><span class="p">:</span><span class="n">province</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;p_101&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">visit</span><span class="p">.</span><span class="n">start_time</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">1625469000</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">RETURN</span><span class="w"> </span><span class="n">prov</span><span class="p">.</span><span class="n">province</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="nf">collect</span><span class="p">(</span><span class="n">addr</span><span class="p">.</span><span class="n">address</span><span class="p">.</span><span class="n">name</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Result:</p>
<table>
<thead>
<tr>
<th style="text-align:left">prov.province.name</th>
<th style="text-align:left">collect(addr.address.name)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">四川省</td>
<td style="text-align:left">[&ldquo;闵行仇路q座 255960&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">山东省</td>
<td style="text-align:left">[&ldquo;城东贵阳街O座 110567&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">云南省</td>
<td style="text-align:left">[&ldquo;丰都北京路J座 725701&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">福建省</td>
<td style="text-align:left">[&ldquo;普陀潜江路P座 210730&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">内蒙古自治区</td>
<td style="text-align:left">[&ldquo;普陀武街f座 706352&rdquo;]</td>
</tr>
</tbody>
</table>
<p>The usual rules, let&rsquo;s look at the results on the graph, this time, we choose Dagre-LR layout rendering, and the result looks like:</p>
<p><a class="lightgallery" href="/en/nebulagraph-sns/visited_provinces.webp" title="visited_provinces" data-thumbnail="/en/nebulagraph-sns/visited_provinces.webp">
        
    </a></p>
<h2 id="recap" class="headerLink">
    <a href="#recap" class="header-mark"></a>10 Recap</h2><p>We have given quite a few examples of applications in social networks, including</p>
<ul>
<li>Finding key people</li>
<li>Identifying clusters of people, communities</li>
<li>Determining the closeness between two users</li>
<li>Recommending new friends</li>
<li>Pinpointing important content using common neighbors</li>
<li>Push information flow based on friend relationship and geographic location</li>
<li>Use spatio-temporal relationship mapping to query the relationship between people, get the people who intersected in time and space, and the provinces visited</li>
</ul>
<p>As a natural graph structure, social networks are well suited to use graph technology to store, query, compute, analyze and visualize to solve various problems on them. We hope you can have a preliminary understanding of the graph technology in SNS through this post.</p>
<blockquote>
<p>Feature image credit: <a href="https://unsplash.com/photos/IBaVuZsJJTo" target="_blank" rel="noopener noreferrer">Ryoji</a></p>
</blockquote>]]></description>
</item></channel>
</rss>
