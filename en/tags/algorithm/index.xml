<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Algorithm - Tag - siwei.io</title>
        <link>https://siwei.io/en/tags/algorithm/</link>
        <description>Algorithm - Tag - siwei.io</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>weyl.gu@gmail.com (Wey Gu)</managingEditor>
            <webMaster>weyl.gu@gmail.com (Wey Gu)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 02 May 2023 16:37:28 &#43;0800</lastBuildDate><atom:link href="https://siwei.io/en/tags/algorithm/" rel="self" type="application/rss+xml" /><item>
    <title>Nebulagraph Artificial Intelligence Suite</title>
    <link>https://siwei.io/en/nebulagraph-ai-suite/</link>
    <pubDate>Tue, 02 May 2023 16:37:28 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/en/nebulagraph-ai-suite/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/en/nebulagraph-ai-suite/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>Introducing a new project! ng_ai: NebulaGraph&rsquo;s graph algorithm suite, a user-friendly high-level Python Algorithm API for NebulaGraph. Its goal is to enable data scientist users of NebulaGraph to perform graph-related algorithmic tasks with minimal code.</p>
</blockquote>
<h2 id="nebulagraph-ai-suite" class="headerLink">
    <a href="#nebulagraph-ai-suite" class="header-mark"></a>1 Nebulagraph AI Suite</h2><p>This week, NebulaGraph 3.5.0 <a href="https://docs.nebula-graph.io/3.5.0/20.appendix/release-notes/nebula-comm-release-note/" target="_blank" rel="noopener noreferrer">has been released</a>, and @<strong><a href="https://github.com/whitewum" target="_blank" rel="noopener noreferrer">whitewum</a></strong> suggested that we make the new project <a href="https://github.com/wey-gu/nebulagraph-ai" target="_blank" rel="noopener noreferrer">ng_ai</a> that has been launched in the NebulaGraph community public. This blog is the first one to introduce ng_ai!</p>
<h3 id="what-is-ng_ai" class="headerLink">
    <a href="#what-is-ng_ai" class="header-mark"></a>1.1 What is ng_ai</h3><p>Nebulagraph AI Suite. As the name suggests, it is a Python suite for running algorithms on NebulaGraph. Its goal is to provide data scientist users of NebulaGraph with a natural, concise high-level API to perform graph-related algorithmic tasks with minimal code.</p>
<h3 id="features" class="headerLink">
    <a href="#features" class="header-mark"></a>1.2 Features</h3><blockquote>
<p>Simplifying things in surprising ways.</p>
</blockquote>
<p>To provide a smooth algorithmic experience for NebulaGraph community users, ng_ai has the following features:</p>
<ul>
<li>Tight integration with NebulaGraph</li>
<li>Support for multiple engines and backends, currently supporting Spark (NebulaGraph Algorithm) and NetworkX, with plans to support DGL and PyG in the future.</li>
<li>User-friendly and intuitive API design.</li>
<li>Seamless integration with NebulaGraph&rsquo;s UDF, allowing ng_ai tasks to be called from queries.</li>
<li>Friendly custom algorithm interface, making it easy for users to implement their own algorithms (WIP).</li>
<li>One-click playground setup (based on Docker Extension).</li>
</ul>
<h2 id="demos" class="headerLink">
    <a href="#demos" class="header-mark"></a>2 Demos</h2><h3 id="run-pagerank" class="headerLink">
    <a href="#run-pagerank" class="header-mark"></a>2.1 Run PageRank</h3><p>We could run distributed PageRank with Nebula-Algorithms(spark) backend:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">ng_ai</span> <span class="kn">import</span> <span class="n">NebulaReader</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># read data with spark engine, scan mode</span>
</span></span><span class="line"><span class="cl"><span class="n">reader</span> <span class="o">=</span> <span class="n">NebulaReader</span><span class="p">(</span><span class="n">engine</span><span class="o">=</span><span class="s2">&#34;spark&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">reader</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="n">edge</span><span class="o">=</span><span class="s2">&#34;follow&#34;</span><span class="p">,</span> <span class="n">props</span><span class="o">=</span><span class="s2">&#34;degree&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">df</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># run pagerank algorithm</span>
</span></span><span class="line"><span class="cl"><span class="n">pr_result</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">algo</span><span class="o">.</span><span class="n">pagerank</span><span class="p">(</span><span class="n">reset_prob</span><span class="o">=</span><span class="mf">0.15</span><span class="p">,</span> <span class="n">max_iter</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="write-algo-result-to-nebulagraph" class="headerLink">
    <a href="#write-algo-result-to-nebulagraph" class="header-mark"></a>2.2 Write Algo Result to NebulaGraph</h3><p>Assuming we want to run a label propagation algorithm and write the results back to NebulaGraph, we can do the following:</p>
<p>First, make sure that the schema of the TAG to be written back has been created, and write it to the label_propagation.cluster_id field:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="k">IF</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">EXISTS</span><span class="w"> </span><span class="n">label_propagation</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">cluster_id</span><span class="w"> </span><span class="n">string</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>The algorithm is run as follows:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">df_result</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">algo</span><span class="o">.</span><span class="n">label_propagation</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>We could see its schema:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">df_result</span><span class="o">.</span><span class="n">printSchema</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># result</span>
</span></span><span class="line"><span class="cl"><span class="n">root</span>
</span></span><span class="line"><span class="cl"> <span class="o">|--</span> <span class="n">_id</span><span class="p">:</span> <span class="n">string</span> <span class="p">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="n">false</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"> <span class="o">|--</span> <span class="n">lpa</span><span class="p">:</span> <span class="n">string</span> <span class="p">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="n">false</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Then, we write the result back to the cluster_id field in NebulaGraph (<code>{&quot;lpa&quot;: &quot;cluster_id&quot;}</code>):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">ng_ai</span> <span class="kn">import</span> <span class="n">NebulaWriter</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">ng_ai.config</span> <span class="kn">import</span> <span class="n">NebulaGraphConfig</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">config</span> <span class="o">=</span> <span class="n">NebulaGraphConfig</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">writer</span> <span class="o">=</span> <span class="n">NebulaWriter</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">data</span><span class="o">=</span><span class="n">df_result</span><span class="p">,</span> <span class="n">sink</span><span class="o">=</span><span class="s2">&#34;nebulagraph_vertex&#34;</span><span class="p">,</span> <span class="n">config</span><span class="o">=</span><span class="n">config</span><span class="p">,</span> <span class="n">engine</span><span class="o">=</span><span class="s2">&#34;spark&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># map column louvain into property cluster_id</span>
</span></span><span class="line"><span class="cl"><span class="n">properties</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;lpa&#34;</span><span class="p">:</span> <span class="s2">&#34;cluster_id&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">writer</span><span class="o">.</span><span class="n">set_options</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">tag</span><span class="o">=</span><span class="s2">&#34;label_propagation&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">vid_field</span><span class="o">=</span><span class="s2">&#34;_id&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">properties</span><span class="o">=</span><span class="n">properties</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">batch_size</span><span class="o">=</span><span class="mi">256</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">write_mode</span><span class="o">=</span><span class="s2">&#34;insert&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># write back to NebulaGraph</span>
</span></span><span class="line"><span class="cl"><span class="n">writer</span><span class="o">.</span><span class="n">write</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Finally, we can verify the results:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">USE basketballplayer;
</span></span><span class="line"><span class="cl">MATCH (v:label_propagation)
</span></span><span class="line"><span class="cl">RETURN id(v), v.label_propagation.cluster_id LIMIT 3;
</span></span></code></pre></td></tr></table>
</div>
</div><p>The results are as follows:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-SQL" data-lang="SQL"><span class="line"><span class="cl"><span class="o">+</span><span class="c1">-------------+--------------------------------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="n">id</span><span class="p">(</span><span class="n">v</span><span class="p">)</span><span class="w">       </span><span class="o">|</span><span class="w"> </span><span class="n">v</span><span class="p">.</span><span class="n">label_propagation</span><span class="p">.</span><span class="n">cluster_id</span><span class="w"> </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">-------------+--------------------------------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;player103&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;player101&#34;</span><span class="w">                    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;player113&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;player129&#34;</span><span class="w">                    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;player121&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;player129&#34;</span><span class="w">                    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">-------------+--------------------------------+
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>See more examples: <a href="https://github.com/wey-gu/nebulagraph-ai/blob/main/examples/spark_engine.ipynb" target="_blank" rel="noopener noreferrer">ng_ai/examples</a></p>
<h4 id="call-ng_ai-from-ngql-udf" class="headerLink">
    <a href="#call-ng_ai-from-ngql-udf" class="header-mark"></a>2.2.1 Call ng_ai from nGQL UDF</h4><p>Since NebulaGraph 3.5.0, we can write our own UDF to call our own functions from nGQL. ng_ai also uses this capability to implement an ng_ai function that can call ng_ai algorithms from nGQL, for example:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- Prepare the write schema
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">USE</span><span class="w"> </span><span class="n">basketballplayer</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="k">IF</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">EXISTS</span><span class="w"> </span><span class="n">pagerank</span><span class="p">(</span><span class="n">pagerank</span><span class="w"> </span><span class="n">string</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">:</span><span class="n">sleep</span><span class="w"> </span><span class="mi">20</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">-- Call with ng_ai()
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">ng_ai</span><span class="p">(</span><span class="s2">&#34;pagerank&#34;</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;follow&#34;</span><span class="p">],</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;degree&#34;</span><span class="p">],</span><span class="w"> </span><span class="s2">&#34;spark&#34;</span><span class="p">,</span><span class="w"> </span><span class="err">{</span><span class="k">space</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;basketballplayer&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">max_iter</span><span class="p">:</span><span class="w"> </span><span class="mi">10</span><span class="err">}</span><span class="p">,</span><span class="w"> </span><span class="err">{</span><span class="n">write_mode</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;insert&#34;</span><span class="err">}</span><span class="p">)</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>See more examples: <a href="https://github.com/wey-gu/nebulagraph-ai/blob/main/examples/ng_ai_from_ngql_udf.ipynb" target="_blank" rel="noopener noreferrer">ng_ai/examples</a></p>
<h4 id="example-with-networkx-engine" class="headerLink">
    <a href="#example-with-networkx-engine" class="header-mark"></a>2.2.2 Example with NetworkX Engine</h4><p>In a local environment, ng_ai supports running algorithms based on NetworkX, for example:</p>
<p>Read the graph as an ng_ai object:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">ng_ai</span> <span class="kn">import</span> <span class="n">NebulaReader</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">ng_ai.config</span> <span class="kn">import</span> <span class="n">NebulaGraphConfig</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># read data with nebula/networkx engine, query mode</span>
</span></span><span class="line"><span class="cl"><span class="n">config_dict</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;graphd_hosts&#34;</span><span class="p">:</span> <span class="s2">&#34;graphd:9669&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;user&#34;</span><span class="p">:</span> <span class="s2">&#34;root&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;password&#34;</span><span class="p">:</span> <span class="s2">&#34;nebula&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;space&#34;</span><span class="p">:</span> <span class="s2">&#34;basketballplayer&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">config</span> <span class="o">=</span> <span class="n">NebulaGraphConfig</span><span class="p">(</span><span class="o">**</span><span class="n">config_dict</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">reader</span> <span class="o">=</span> <span class="n">NebulaReader</span><span class="p">(</span><span class="n">engine</span><span class="o">=</span><span class="s2">&#34;nebula&#34;</span><span class="p">,</span> <span class="n">config</span><span class="o">=</span><span class="n">config</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">reader</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">edges</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;follow&#34;</span><span class="p">,</span> <span class="s2">&#34;serve&#34;</span><span class="p">],</span> <span class="n">props</span><span class="o">=</span><span class="p">[[</span><span class="s2">&#34;degree&#34;</span><span class="p">],</span> <span class="p">[]])</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Show and draw the graph:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">show</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">draw</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Run PageRank:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">pr_result</span> <span class="o">=</span> <span class="n">g</span><span class="o">.</span><span class="n">algo</span><span class="o">.</span><span class="n">pagerank</span><span class="p">(</span><span class="n">reset_prob</span><span class="o">=</span><span class="mf">0.15</span><span class="p">,</span> <span class="n">max_iter</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Write the result back to NebulaGraph:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">ng_ai</span> <span class="kn">import</span> <span class="n">NebulaWriter</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">writer</span> <span class="o">=</span> <span class="n">NebulaWriter</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">data</span><span class="o">=</span><span class="n">pr_result</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">sink</span><span class="o">=</span><span class="s2">&#34;nebulagraph_vertex&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">config</span><span class="o">=</span><span class="n">config</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">engine</span><span class="o">=</span><span class="s2">&#34;nebula&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># properties to write</span>
</span></span><span class="line"><span class="cl"><span class="n">properties</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;pagerank&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">writer</span><span class="o">.</span><span class="n">set_options</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">tag</span><span class="o">=</span><span class="s2">&#34;pagerank&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">properties</span><span class="o">=</span><span class="n">properties</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">batch_size</span><span class="o">=</span><span class="mi">256</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">write_mode</span><span class="o">=</span><span class="s2">&#34;insert&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># write back to NebulaGraph</span>
</span></span><span class="line"><span class="cl"><span class="n">writer</span><span class="o">.</span><span class="n">write</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Other algorithms are similar, for example:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># get all algorithms</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">algo</span><span class="o">.</span><span class="n">get_all_algo</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># get help of each algo</span>
</span></span><span class="line"><span class="cl"><span class="n">help</span><span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">algo</span><span class="o">.</span><span class="n">node2vec</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># call the algo</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">algo</span><span class="o">.</span><span class="n">node2vec</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>See more examples: <a href="https://github.com/wey-gu/nebulagraph-ai/blob/main/examples/networkx_engine.ipynb" target="_blank" rel="noopener noreferrer">ng_ai/examples</a></p>
<h4 id="plotting-with-networkx-engine" class="headerLink">
    <a href="#plotting-with-networkx-engine" class="header-mark"></a>2.2.3 Plotting with NetworkX Engine</h4><p>We could also run Louvain and PageRank and visualize the results with NetworkX engine:</p>
<p>First, we read the graph and run the algorithm:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">pr_result</span> <span class="o">=</span> <span class="n">g</span><span class="o">.</span><span class="n">algo</span><span class="o">.</span><span class="n">pagerank</span><span class="p">(</span><span class="n">reset_prob</span><span class="o">=</span><span class="mf">0.15</span><span class="p">,</span> <span class="n">max_iter</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">louvain_result</span> <span class="o">=</span> <span class="n">g</span><span class="o">.</span><span class="n">algo</span><span class="o">.</span><span class="n">louvain</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Now we create a fancy function to draw the graph:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">matplotlib.colors</span> <span class="kn">import</span> <span class="n">ListedColormap</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">draw_graph_louvain_pr</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">pr_result</span><span class="p">,</span> <span class="n">louvain_result</span><span class="p">,</span> <span class="n">colors</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;#1984c5&#34;</span><span class="p">,</span> <span class="s2">&#34;#22a7f0&#34;</span><span class="p">,</span> <span class="s2">&#34;#63bff0&#34;</span><span class="p">,</span> <span class="s2">&#34;#a7d5ed&#34;</span><span class="p">,</span> <span class="s2">&#34;#e2e2e2&#34;</span><span class="p">,</span> <span class="s2">&#34;#e1a692&#34;</span><span class="p">,</span> <span class="s2">&#34;#de6e56&#34;</span><span class="p">,</span> <span class="s2">&#34;#e14b31&#34;</span><span class="p">,</span> <span class="s2">&#34;#c23728&#34;</span><span class="p">]):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Define positions for the nodes</span>
</span></span><span class="line"><span class="cl">    <span class="n">pos</span> <span class="o">=</span> <span class="n">nx</span><span class="o">.</span><span class="n">spring_layout</span><span class="p">(</span><span class="n">G</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Create a figure and set the axis limits</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">35</span><span class="p">,</span> <span class="mi">15</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">ax</span><span class="o">.</span><span class="n">set_xlim</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">ax</span><span class="o">.</span><span class="n">set_ylim</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Create a colormap from the colors list</span>
</span></span><span class="line"><span class="cl">    <span class="n">cmap</span> <span class="o">=</span> <span class="n">ListedColormap</span><span class="p">(</span><span class="n">colors</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Draw the nodes and edges of the graph</span>
</span></span><span class="line"><span class="cl">    <span class="n">node_colors</span> <span class="o">=</span> <span class="p">[</span><span class="n">louvain_result</span><span class="p">[</span><span class="n">node</span><span class="p">]</span> <span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="n">G</span><span class="o">.</span><span class="n">nodes</span><span class="p">()]</span>
</span></span><span class="line"><span class="cl">    <span class="n">node_sizes</span> <span class="o">=</span> <span class="p">[</span><span class="mi">70000</span> <span class="o">*</span> <span class="n">pr_result</span><span class="p">[</span><span class="n">node</span><span class="p">]</span> <span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="n">G</span><span class="o">.</span><span class="n">nodes</span><span class="p">()]</span>
</span></span><span class="line"><span class="cl">    <span class="n">nx</span><span class="o">.</span><span class="n">draw_networkx_nodes</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">pos</span><span class="o">=</span><span class="n">pos</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span> <span class="n">node_color</span><span class="o">=</span><span class="n">node_colors</span><span class="p">,</span> <span class="n">node_size</span><span class="o">=</span><span class="n">node_sizes</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="n">cmap</span><span class="p">,</span> <span class="n">vmin</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">vmax</span><span class="o">=</span><span class="nb">max</span><span class="p">(</span><span class="n">louvain_result</span><span class="o">.</span><span class="n">values</span><span class="p">()))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">nx</span><span class="o">.</span><span class="n">draw_networkx_edges</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">pos</span><span class="o">=</span><span class="n">pos</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span> <span class="n">edge_color</span><span class="o">=</span><span class="s1">&#39;gray&#39;</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">connectionstyle</span><span class="o">=</span><span class="s1">&#39;arc3, rad=0.2&#39;</span><span class="p">,</span> <span class="n">arrowstyle</span><span class="o">=</span><span class="s1">&#39;-|&gt;&#39;</span><span class="p">,</span> <span class="n">arrows</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Extract edge labels as a dictionary</span>
</span></span><span class="line"><span class="cl">    <span class="n">edge_labels</span> <span class="o">=</span> <span class="n">nx</span><span class="o">.</span><span class="n">get_edge_attributes</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="s1">&#39;label&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Add edge labels to the graph</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">edge</span><span class="p">,</span> <span class="n">label</span> <span class="ow">in</span> <span class="n">edge_labels</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="n">ax</span><span class="o">.</span><span class="n">text</span><span class="p">((</span><span class="n">pos</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="mi">0</span><span class="p">]][</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">pos</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="mi">1</span><span class="p">]][</span><span class="mi">0</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="p">(</span><span class="n">pos</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="mi">0</span><span class="p">]][</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">pos</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="mi">1</span><span class="p">]][</span><span class="mi">1</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="n">label</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">12</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;black&#39;</span><span class="p">,</span> <span class="n">ha</span><span class="o">=</span><span class="s1">&#39;center&#39;</span><span class="p">,</span> <span class="n">va</span><span class="o">=</span><span class="s1">&#39;center&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Add node labels to the graph</span>
</span></span><span class="line"><span class="cl">    <span class="n">node_labels</span> <span class="o">=</span> <span class="p">{</span><span class="n">n</span><span class="p">:</span> <span class="n">G</span><span class="o">.</span><span class="n">nodes</span><span class="p">[</span><span class="n">n</span><span class="p">][</span><span class="s1">&#39;label&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="s1">&#39;label&#39;</span> <span class="ow">in</span> <span class="n">G</span><span class="o">.</span><span class="n">nodes</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="k">else</span> <span class="n">n</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">G</span><span class="o">.</span><span class="n">nodes</span><span class="p">()}</span>
</span></span><span class="line"><span class="cl">    <span class="n">nx</span><span class="o">.</span><span class="n">draw_networkx_labels</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">pos</span><span class="o">=</span><span class="n">pos</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span> <span class="n">labels</span><span class="o">=</span><span class="n">node_labels</span><span class="p">,</span> <span class="n">font_size</span><span class="o">=</span><span class="mi">12</span><span class="p">,</span> <span class="n">font_color</span><span class="o">=</span><span class="s1">&#39;black&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Add colorbar for community colors</span>
</span></span><span class="line"><span class="cl">    <span class="n">sm</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">cm</span><span class="o">.</span><span class="n">ScalarMappable</span><span class="p">(</span><span class="n">cmap</span><span class="o">=</span><span class="n">cmap</span><span class="p">,</span> <span class="n">norm</span><span class="o">=</span><span class="n">plt</span><span class="o">.</span><span class="n">Normalize</span><span class="p">(</span><span class="n">vmin</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">vmax</span><span class="o">=</span><span class="nb">max</span><span class="p">(</span><span class="n">louvain_result</span><span class="o">.</span><span class="n">values</span><span class="p">())))</span>
</span></span><span class="line"><span class="cl">    <span class="n">sm</span><span class="o">.</span><span class="n">set_array</span><span class="p">([])</span>
</span></span><span class="line"><span class="cl">    <span class="n">cbar</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">colorbar</span><span class="p">(</span><span class="n">sm</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span> <span class="n">ticks</span><span class="o">=</span><span class="nb">range</span><span class="p">(</span><span class="nb">max</span><span class="p">(</span><span class="n">louvain_result</span><span class="o">.</span><span class="n">values</span><span class="p">())</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span> <span class="n">shrink</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">cbar</span><span class="o">.</span><span class="n">ax</span><span class="o">.</span><span class="n">set_yticklabels</span><span class="p">([</span><span class="sa">f</span><span class="s1">&#39;Community </span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s1">&#39;</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">max</span><span class="p">(</span><span class="n">louvain_result</span><span class="o">.</span><span class="n">values</span><span class="p">())</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Show the figure</span>
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">draw_graph_louvain_pr</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">pr_result</span><span class="o">=</span><span class="n">pr_result</span><span class="p">,</span> <span class="n">louvain_result</span><span class="o">=</span><span class="n">louvain_result</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>And it will show the graph:</p>
<p><figure><a class="lightgallery" href="https://github.com/siwei-io/talks/assets/1651790/4d13eb2b-3e40-4085-8e0c-71459ca0843b" title="draw_graph_louvain_pr" data-thumbnail="https://github.com/siwei-io/talks/assets/1651790/4d13eb2b-3e40-4085-8e0c-71459ca0843b">
        <img
            
            loading="lazy"
            src="https://github.com/siwei-io/talks/assets/1651790/4d13eb2b-3e40-4085-8e0c-71459ca0843b"
            srcset="https://github.com/siwei-io/talks/assets/1651790/4d13eb2b-3e40-4085-8e0c-71459ca0843b, https://github.com/siwei-io/talks/assets/1651790/4d13eb2b-3e40-4085-8e0c-71459ca0843b 1.5x, https://github.com/siwei-io/talks/assets/1651790/4d13eb2b-3e40-4085-8e0c-71459ca0843b 2x"
            sizes="auto"
            alt="draw_graph_louvain_pr">
    </a></figure></p>
<p>See more examples: <a href="https://github.com/wey-gu/nebulagraph-ai/blob/main/examples/ng_ai_networkx_plot.ipynb" target="_blank" rel="noopener noreferrer">ng_ai/examples</a></p>
<h4 id="nebulagraph-jupyter-notebook-extension" class="headerLink">
    <a href="#nebulagraph-jupyter-notebook-extension" class="header-mark"></a>2.2.4 NebulaGraph Jupyter Notebook Extension</h4><p>Thanks to the NebulaGraph Jupyter Notebook extension: <a href="https://github.com/wey-gu/ipython-ngql" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/ipython-ngql</a>, we can operate NebulaGraph more conveniently:</p>
<p>Option 0, install the extension from ng_ai:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">%</span><span class="n">pip</span> <span class="n">install</span> <span class="n">ng_ai</span><span class="p">[</span><span class="n">jupyter</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="o">%</span><span class="n">load_ext</span> <span class="n">ngql</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Option 1, install the extension directly:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">%</span><span class="n">pip</span> <span class="n">install</span> <span class="n">ipython</span><span class="o">-</span><span class="n">ngql</span>
</span></span><span class="line"><span class="cl"><span class="o">%</span><span class="n">load_ext</span> <span class="n">ngql</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Then, we can use <code>%ngql</code> to execute NGQL statements in the Notebook:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">%</span><span class="n">ngql</span> <span class="o">--</span><span class="n">address</span> <span class="mf">127.0.0.1</span> <span class="o">--</span><span class="n">port</span> <span class="mi">9669</span> <span class="o">--</span><span class="n">user</span> <span class="n">root</span> <span class="o">--</span><span class="n">password</span> <span class="n">nebula</span>
</span></span><span class="line"><span class="cl"><span class="o">%</span><span class="n">ngql</span> <span class="n">USE</span> <span class="n">basketballplayer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="o">%</span><span class="n">ngql</span> <span class="n">MATCH</span> <span class="p">(</span><span class="n">v</span><span class="p">:</span><span class="n">player</span><span class="p">{</span><span class="n">name</span><span class="p">:</span><span class="s2">&#34;Tim Duncan&#34;</span><span class="p">})</span><span class="o">--&gt;</span><span class="p">(</span><span class="n">v2</span><span class="p">:</span><span class="n">player</span><span class="p">)</span> <span class="n">RETURN</span> <span class="n">v2</span><span class="o">.</span><span class="n">player</span><span class="o">.</span><span class="n">name</span> <span class="n">AS</span> <span class="n">Name</span><span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>Note, for multi-line query, use <code>%%ngql</code></p>
</blockquote>
<p>Finally, we can visualize the results in Jupyter Notebook with <code>%ng_draw</code>!</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">%</span><span class="n">ngql</span> <span class="k">match</span> <span class="n">p</span><span class="o">=</span><span class="p">(:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[]</span><span class="o">-&gt;</span><span class="p">()</span> <span class="k">return</span> <span class="n">p</span> <span class="n">LIMIT</span> <span class="mi">5</span>
</span></span><span class="line"><span class="cl"><span class="o">%</span><span class="n">ng_draw</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>And it will look like this:</p>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/236797874-c142cfd8-b0de-4689-95ef-1da386e137d3.png" title="ipython-ngql" data-thumbnail="https://user-images.githubusercontent.com/1651790/236797874-c142cfd8-b0de-4689-95ef-1da386e137d3.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/236797874-c142cfd8-b0de-4689-95ef-1da386e137d3.png"
            srcset="https://user-images.githubusercontent.com/1651790/236797874-c142cfd8-b0de-4689-95ef-1da386e137d3.png, https://user-images.githubusercontent.com/1651790/236797874-c142cfd8-b0de-4689-95ef-1da386e137d3.png 1.5x, https://user-images.githubusercontent.com/1651790/236797874-c142cfd8-b0de-4689-95ef-1da386e137d3.png 2x"
            sizes="auto"
            alt="ipython-ngql">
    </a></figure></p>
<h2 id="future-work" class="headerLink">
    <a href="#future-work" class="header-mark"></a>3 Future Work</h2><p>Now ng_ai is still under development, we still have a lot of work to do:</p>
<ul>
<li><i class="far fa-square fa-fw"></i> Improve the reader mode, now NebulaGraph/NetworkX only supports Query-Mode, we also need to support Scan-Mode</li>
<li><i class="far fa-square fa-fw"></i> Implement link prediction, node classification and other algorithms based on dgl (GNN), for example:</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">model</span> <span class="o">=</span> <span class="n">g</span><span class="o">.</span><span class="n">algo</span><span class="o">.</span><span class="n">gnn_link_prediction</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">result</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">train</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="c1"># query src, dst to be predicted</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">model</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">src_vertex</span><span class="p">,</span> <span class="n">dst_vertices</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><i class="far fa-square fa-fw"></i> UDA, custom algorithm</li>
<li><i class="far fa-square fa-fw"></i> Deployment tool</li>
</ul>
<p>ng_ai is completely built in public, and we welcome everyone in the community to participate in it and improve ng_ai together, making AI algorithms on NebulaGraph easier to use!</p>
<h2 id="try-ng_ai" class="headerLink">
    <a href="#try-ng_ai" class="header-mark"></a>4 Try ng_ai</h2><p>We have prepared a one-click deployment of NebulaGraph + Studio + ng_ai in Jupyter environment, you only need to search NebulaGraph from the Extension of Docker Desktop to try it out.</p>
<ul>
<li>Install <a href="https://www.docker.com/blog/distributed-cloud-native-graph-database-nebulagraph-docker-extension/" target="_blank" rel="noopener noreferrer">NebulaGraph Docker Extension</a></li>
</ul>
<p>Search NebulaGraph from docker extension marketplace, and install it.</p>
<p><figure><a class="lightgallery" href="https://github.com/siwei-io/talks/assets/1651790/e07e39d1-2b3a-486f-bb68-29a67bc3a714" title="https://github.com/siwei-io/talks/assets/1651790/e07e39d1-2b3a-486f-bb68-29a67bc3a714" data-thumbnail="https://github.com/siwei-io/talks/assets/1651790/e07e39d1-2b3a-486f-bb68-29a67bc3a714">
        <img
            
            loading="lazy"
            src="https://github.com/siwei-io/talks/assets/1651790/e07e39d1-2b3a-486f-bb68-29a67bc3a714"
            srcset="https://github.com/siwei-io/talks/assets/1651790/e07e39d1-2b3a-486f-bb68-29a67bc3a714, https://github.com/siwei-io/talks/assets/1651790/e07e39d1-2b3a-486f-bb68-29a67bc3a714 1.5x, https://github.com/siwei-io/talks/assets/1651790/e07e39d1-2b3a-486f-bb68-29a67bc3a714 2x"
            sizes="auto"
            alt="https://github.com/siwei-io/talks/assets/1651790/e07e39d1-2b3a-486f-bb68-29a67bc3a714">
    </a></figure></p>
<ul>
<li>Install ng_ai playground</li>
</ul>
<p>Go to NebulaGraph extension, click <strong>Install NX Mode</strong> to install ng_ai&rsquo;s NetworkX playground, it usually takes a few minutes to wait for the installation to complete.</p>
<p><figure><a class="lightgallery" href="https://github.com/siwei-io/talks/assets/1651790/3fca7e39-6e37-4ccb-8177-4771babb7b66" title="https://github.com/siwei-io/talks/assets/1651790/3fca7e39-6e37-4ccb-8177-4771babb7b66" data-thumbnail="https://github.com/siwei-io/talks/assets/1651790/3fca7e39-6e37-4ccb-8177-4771babb7b66">
        <img
            
            loading="lazy"
            src="https://github.com/siwei-io/talks/assets/1651790/3fca7e39-6e37-4ccb-8177-4771babb7b66"
            srcset="https://github.com/siwei-io/talks/assets/1651790/3fca7e39-6e37-4ccb-8177-4771babb7b66, https://github.com/siwei-io/talks/assets/1651790/3fca7e39-6e37-4ccb-8177-4771babb7b66 1.5x, https://github.com/siwei-io/talks/assets/1651790/3fca7e39-6e37-4ccb-8177-4771babb7b66 2x"
            sizes="auto"
            alt="https://github.com/siwei-io/talks/assets/1651790/3fca7e39-6e37-4ccb-8177-4771babb7b66">
    </a></figure></p>
<ul>
<li>Enter NetworkX playground</li>
</ul>
<p>Click <strong>Jupyter NB NetworkX</strong> to enter NetworkX playground.</p>
<p><figure><a class="lightgallery" href="https://github.com/siwei-io/talks/assets/1651790/48c2e5a2-490e-4626-809e-5894d6f833e9" title="https://github.com/siwei-io/talks/assets/1651790/48c2e5a2-490e-4626-809e-5894d6f833e9" data-thumbnail="https://github.com/siwei-io/talks/assets/1651790/48c2e5a2-490e-4626-809e-5894d6f833e9">
        <img
            
            loading="lazy"
            src="https://github.com/siwei-io/talks/assets/1651790/48c2e5a2-490e-4626-809e-5894d6f833e9"
            srcset="https://github.com/siwei-io/talks/assets/1651790/48c2e5a2-490e-4626-809e-5894d6f833e9, https://github.com/siwei-io/talks/assets/1651790/48c2e5a2-490e-4626-809e-5894d6f833e9 1.5x, https://github.com/siwei-io/talks/assets/1651790/48c2e5a2-490e-4626-809e-5894d6f833e9 2x"
            sizes="auto"
            alt="https://github.com/siwei-io/talks/assets/1651790/48c2e5a2-490e-4626-809e-5894d6f833e9">
    </a></figure></p>
<h2 id="ng_ai-architecture" class="headerLink">
    <a href="#ng_ai-architecture" class="header-mark"></a>5 ng_ai Architecture</h2><p>ng_ai is a Python library, it is mainly composed of the following modules:</p>
<ul>
<li>Writer: responsible for writing data to NebulaGraph</li>
<li>Engine: responsible for adapting different runtimes, such as Spark, DGL, NetowrkX, etc.</li>
<li>Algo: algorithm module, such as PageRank, Louvain, GNN_Link_Predict, etc.</li>
</ul>
<p>In addition, in order to support the call in nGQL, there are two more modules:</p>
<ul>
<li>ng_ai-udf: responsible for registering UDF to NebulaGraph, accepting query calls from ng_ai, and accessing ng_ai API</li>
<li>ng_ai-api: the API module of ng_ai, which is responsible for receiving requests from ng_ai-udf and calling the corresponding algorithm module</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">          ┌───────────────────────────────────────────────────┐
</span></span><span class="line"><span class="cl">          │   Spark Cluster                                   │
</span></span><span class="line"><span class="cl">          │    .─────.    .─────.    .─────.    .─────.       │
</span></span><span class="line"><span class="cl">          │   ;       :  ;       :  ;       :  ;       :      │
</span></span><span class="line"><span class="cl">       ┌─▶│   :       ;  :       ;  :       ;  :       ;      │
</span></span><span class="line"><span class="cl">       │  │    ╲     ╱    ╲     ╱    ╲     ╱    ╲     ╱       │
</span></span><span class="line"><span class="cl">       │  │     `───&#39;      `───&#39;      `───&#39;      `───&#39;        │
</span></span><span class="line"><span class="cl">  Algo Spark                                                  │
</span></span><span class="line"><span class="cl">    Engine└───────────────────────────────────────────────────┘
</span></span><span class="line"><span class="cl">       │  ┌────────────────────────────────────────────────────┬──────────┐
</span></span><span class="line"><span class="cl">       └──┤                                                    │          │
</span></span><span class="line"><span class="cl">          │   NebulaGraph AI Suite(ngai)                       │ ngai-api │◀─┐
</span></span><span class="line"><span class="cl">          │                                                    │          │  │
</span></span><span class="line"><span class="cl">          │                                                    └──────────┤  │
</span></span><span class="line"><span class="cl">          │     ┌────────┐    ┌──────┐    ┌────────┐   ┌─────┐            │  │
</span></span><span class="line"><span class="cl">          │     │ Reader │    │ Algo │    │ Writer │   │ GNN │            │  │
</span></span><span class="line"><span class="cl"> ┌───────▶│     └────────┘    └──────┘    └────────┘   └─────┘            │  │
</span></span><span class="line"><span class="cl"> │        │          │            │            │          │               │  │
</span></span><span class="line"><span class="cl"> │        │          ├────────────┴───┬────────┴─────┐    └──────┐        │  │
</span></span><span class="line"><span class="cl"> │        │          ▼                ▼              ▼           ▼        │  │
</span></span><span class="line"><span class="cl"> │        │   ┌─────────────┐ ┌──────────────┐ ┌──────────┐ ┌──────────┐  │  │
</span></span><span class="line"><span class="cl"> │     ┌──┤   │ SparkEngine │ │ NebulaEngine │ │ NetworkX │ │ DGLEngine│  │  │
</span></span><span class="line"><span class="cl"> │     │  │   └─────────────┘ └──────────────┘ └──────────┘ └──────────┘  │  │
</span></span><span class="line"><span class="cl"> │     │  └──────────┬────────────────────────────────────────────────────┘  │
</span></span><span class="line"><span class="cl"> │     │             │        Spark                                          │
</span></span><span class="line"><span class="cl"> │     │             └────────Reader ────────────┐                           │
</span></span><span class="line"><span class="cl"> │  Spark                   Query Mode           │                           │
</span></span><span class="line"><span class="cl"> │  Reader                                       │                           │
</span></span><span class="line"><span class="cl"> │Scan Mode                                      ▼                      ┌─────────┐
</span></span><span class="line"><span class="cl"> │     │  ┌───────────────────────────────────────────────────┬─────────┤ ngai-udf│◀─────────────┐
</span></span><span class="line"><span class="cl"> │     │  │                                                   │         └─────────┤              │
</span></span><span class="line"><span class="cl"> │     │  │  NebulaGraph Graph Engine         Nebula-GraphD   │   ngai-GraphD     │              │
</span></span><span class="line"><span class="cl"> │     │  ├──────────────────────────────┬────────────────────┼───────────────────┘              │
</span></span><span class="line"><span class="cl"> │     │  │                              │                    │                                  │
</span></span><span class="line"><span class="cl"> │     │  │  NebulaGraph Storage Engine  │                    │                                  │
</span></span><span class="line"><span class="cl"> │     │  │                              │                    │                                  │
</span></span><span class="line"><span class="cl"> │     └─▶│  Nebula-StorageD             │    Nebula-Metad    │                                  │
</span></span><span class="line"><span class="cl"> │        │                              │                    │                                  │
</span></span><span class="line"><span class="cl"> │        └──────────────────────────────┴────────────────────┘                                  │
</span></span><span class="line"><span class="cl"> │                                                                                               │
</span></span><span class="line"><span class="cl"> │    ┌───────────────────────────────────────────────────────────────────────────────────────┐  │
</span></span><span class="line"><span class="cl"> │    │ RETURN ng_ai(&#34;pagerank&#34;, [&#34;follow&#34;], [&#34;degree&#34;], &#34;spark&#34;, {space:&#34;basketballplayer&#34;}) │──┘
</span></span><span class="line"><span class="cl"> │    └───────────────────────────────────────────────────────────────────────────────────────┘
</span></span><span class="line"><span class="cl"> │  ┌─────────────────────────────────────────────────────────────┐
</span></span><span class="line"><span class="cl"> │  │ from ng_ai import NebulaReader                              │
</span></span><span class="line"><span class="cl"> │  │                                                             │
</span></span><span class="line"><span class="cl"> │  │ # read data with spark engine, scan mode                    │
</span></span><span class="line"><span class="cl"> │  │ reader = NebulaReader(engine=&#34;spark&#34;)                       │
</span></span><span class="line"><span class="cl"> │  │ reader.scan(edge=&#34;follow&#34;, props=&#34;degree&#34;)                  │
</span></span><span class="line"><span class="cl"> └──│ df = reader.read()                                          │
</span></span><span class="line"><span class="cl">    │                                                             │
</span></span><span class="line"><span class="cl">    │ # run pagerank algorithm                                    │
</span></span><span class="line"><span class="cl">    │ pr_result = df.algo.pagerank(reset_prob=0.15, max_iter=10)  │
</span></span><span class="line"><span class="cl">    │                                                             │
</span></span><span class="line"><span class="cl">    └─────────────────────────────────────────────────────────────┘  
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item></channel>
</rss>
