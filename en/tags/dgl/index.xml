<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>DGL - Tag - siwei.io</title>
        <link>https://siwei.io/en/tags/dgl/</link>
        <description>DGL - Tag - siwei.io</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>weyl.gu@gmail.com (Wey Gu)</managingEditor>
            <webMaster>weyl.gu@gmail.com (Wey Gu)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 01 Aug 2022 01:15:05 &#43;0800</lastBuildDate><atom:link href="https://siwei.io/en/tags/dgl/" rel="self" type="application/rss+xml" /><item>
    <title>Fraud Detection with NebulaGraph GraphDatabase in action</title>
    <link>https://siwei.io/en/fraud-detection-with-nebulagraph/</link>
    <pubDate>Mon, 01 Aug 2022 01:15:05 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/en/fraud-detection-with-nebulagraph/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/en/fraud-detection-with-nebulagraph/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>This is a review of Fraud Detection methods based on graph algorithms, graph databases, machine learning, and graph neural networks on NebulaGraph, and in addition to an introduction to the basic methodological ideas, I&rsquo;ve also got a Playground you can run. it&rsquo;s worth mentioning that this is the first time I&rsquo;ve introduced you to the Nebula-DGL project üòÅ.</p>
</blockquote>
<!--

[TOC]

-->
<h2 id="fraud-detection-methods-based-on-graph-database" class="headerLink">
    <a href="#fraud-detection-methods-based-on-graph-database" class="header-mark"></a>1 Fraud detection methods based on graph database</h2><h3 id="graph-modeling" class="headerLink">
    <a href="#graph-modeling" class="header-mark"></a>1.1 Graph Modeling</h3><p>We started the modeling with the existing historical data, annotated information oriented to the relationship of the property graph. The data source could be the transaction event records, user data, and risk control annotations in the banking, e-commerce, or insurance industries in multiple table structures.</p>
<p>The modeling process is to abstract the entities we care about, the relationships between them, and the meaningful properties attached to both entities and relationships.</p>
<p>In general, persons, corporate entities, phone numbers, addresses, devices (e.g., terminal devices, network addresses, WiFi SSIDs to which terminal devices are connected, etc.), and orders are entities we started with to consider, and other information such as is_risky label, and information about persons and corporate entities (occupation, income, education, etc.) are modeled as properties of entities.</p>
<p>The model looks like this and the corresponding dataset could be generated with <a href="https://github.com/wey-gu/fraud-detection-datagen" target="_blank" rel="noopener noreferrer">fraud-detection-datagen</a>, with which you could generate dataset in any expected scale and community sturcture.</p>
<p><figure><img
        
        loading="lazy"
        src="https://github.com/wey-gu/fraud-detection-datagen/raw/main/images/fraud_detection_graph_model.svg"
        srcset="https://github.com/wey-gu/fraud-detection-datagen/raw/main/images/fraud_detection_graph_model.svg, https://github.com/wey-gu/fraud-detection-datagen/raw/main/images/fraud_detection_graph_model.svg 1.5x, https://github.com/wey-gu/fraud-detection-datagen/raw/main/images/fraud_detection_graph_model.svg 2x"
        sizes="auto"
        alt="https://github.com/wey-gu/fraud-detection-datagen/raw/main/images/fraud_detection_graph_model.svg"
        title="https://github.com/wey-gu/fraud-detection-datagen/raw/main/images/fraud_detection_graph_model.svg" ></figure></p>
<h3 id="fraud-detection-with-graph-query" class="headerLink">
    <a href="#fraud-detection-with-graph-query" class="header-mark"></a>1.2 Fraud detection with Graph Query</h3><!--

Êúâ‰∫Ü‰∏ÄÂº†ÂõäÊã¨‰∫Ü‰∫∫„ÄÅÂÖ¨Âè∏„ÄÅÂéÜÂè≤Ë¥∑Ê¨æÁî≥ËØ∑ËÆ∞ÂΩï„ÄÅÁîµËØù„ÄÅÁ∫ø‰∏äÁî≥ËØ∑ÁΩëÁªúËÆæÂ§áÁöÑÂõæË∞±ÔºåÊàë‰ª¨ÂèØ‰ª•ÊåñÊéò‰∏Ä‰∫õÊúâÊÑèÊÄùÁöÑ‰ø°ÊÅØ„ÄÇ

-->
<p>With a graph that encompasses persons, companies, historical loan application records, phone calls, and online applications for web-based devices, we can uncover some interesting information with certain graph queries directly.</p>
<!--

‰∫ãÂÆû‰∏äÔºåÂæàÂ§öÂÄºÂæóË¢´ÂèëÁé∞„ÄÅÂπ∂ÊúâÊïàÈòªÊ≠¢‰ªéËÄåÊ≠¢ÊçüÁöÑÈ™ó‰øùË°å‰∏∫ÊòØÂÖ∑ÊúâÁæ§‰ΩìËÅöÈõÜÊÄßÁöÑ„ÄÇÊØîÂ¶ÇÊ¨∫ËØàÂõ¢‰ºôÂèØËÉΩÊòØ‰∏ÄÂ∞èÊâπ‰∫∫ÔºàÊØîÂ¶Ç3Âà∞5‰∫∫ÔºâÊúâÁªÑÁªáÂú∞Êî∂ÈõÜÊõ¥Â§ßËßÑÊ®°ÁöÑË∫´‰ªΩËØÅ‰ø°ÊÅØÔºàÊØîÂ¶Ç30Âº†ÔºâÔºåÂêåÊó∂ÂèëËµ∑Â§ö‰∏™ÈáëËûçÊú∫ÊûÑÂ§ßÈáèË¥∑Ê¨æÔºåÁÑ∂ÂêéÂú®ÊîæÊ¨æÂêéÈÄâÊã©‰∏¢ÂºÉËøôÊâπÁïô‰∏ã‰∫ÜËøùÁ∫¶ËÆ∞ÂΩïÁöÑË∫´‰ªΩËØÅÔºåÂÜçËøõ‰∏ÄÊ≠•ÈÄâÊã©‰∏ã‰∏ÄÊâπË∫´‰ªΩËØÅ‰ø°ÊÅØÂ¶ÇÊ≥ïÁÇÆÂà∂„ÄÇ

-->
<p>In fact, many frauds are clusterred in nature. For example, a fraud ring may be a small group of people (e.g., 3 to 5 people) who collect ID information on a larger scale (e.g., 30) in an organized manner, initiate a large number of loans from multiple financial institutions at the same time, and then choose to discard the batch of IDs that have left a record of default after they have been disbursed, and then further choose the next batch of ID information as they have done.</p>
<!--

ËøôÁßçÂõ¢‰ºô‰ΩúÊ°àÁöÑÊñπÂºèÂõ†‰∏∫Âà©Áî®‰∫ÜÂ§ßÈáèÊñ∞ÁöÑË∫´‰ªΩ‰ø°ÊÅØÔºåÂÆåÂÖ®Âà©Áî®ÂéÜÂè≤ËÆ∞ÂΩïÂéªÈªëÂêçÂçïËßÑÈÅøÈ£éÈô©ÁöÑÊñπÂºèÊòØÊó†ÊïàÁöÑ„ÄÇ‰∏çËøáÔºåÂÄüÂä©‰∫éÂÖ≥ËÅîÂÖ≥Á≥ªÁöÑËßÜËßíÔºåËøô‰∫õÊ®°ÂºèÊòØ‰∏ÄÂÆöÁ®ãÂ∫¶‰∏äÂèØ‰ª•Ë¢´ÂèäÊó∂ËØÜÂà´Âá∫Êù•ÁöÑ„ÄÇ

-->
<p>Due to the group of frauds keeps utilizing new identity information, it&rsquo;s hard to detect with historical records based blacklist mechanism. However, with the help of the patterns being queried in graph, such case could be resovled in real-time.</p>
<!--

Ëøô‰∫õÊ®°ÂºèÂèØ‰ª•Ë¢´ËØÜÂà´Âá∫ÁöÑËßÑÂæãÊàëÊääÂÆÉÂàÜÊàê‰∏§ÁßçÔºö

-->
<p>These patterns can be categorised into two types:</p>
<!--

‰∏ÄÁßçÊòØÈ£éÊéß‰∏ìÂÆ∂ÂèØ‰ª•Áõ¥Êé•Áî®ÊüêÁßçÊ®°ÂºèÊù•ÊèèËø∞ÁöÑÔºå‰æãÂ¶ÇÔºöÂíåÂ∑≤ÁªèË¢´Ê†áÊ≥®‰∏∫È´òÈ£éÈô©ÁöÑÂÆû‰ΩìÊúâÁõ¥Êé•ÊàñËÄÖÈó¥Êé•ÁöÑÂÖ≥ËÅîÂÖ≥Á≥ªÔºàÊñ∞ËÆ¢ÂçïÁî≥ËØ∑‰∫∫‰ΩøÁî®‰∫ÜÂíåËøáÂæÄÈ´òÈ£éÈô©ËÆ∞ÂΩïÁõ∏ÂêåÁöÑÁΩëÁªúËÆæÂ§áÔºâÔºåËøôÁßçÊ®°ÂºèÂØπÂ∫îÂà∞ÂõæË∞±‰∏≠ÔºåÈÄöËøá‰∏Ä‰∏™ÂõæÊü•ËØ¢Â∞±ÂèØ‰ª•ÂÆûÊó∂ÁªôÂá∫ÁªìÊûú„ÄÇ

Âè¶‰∏ÄÁßçÊòØÈöêÂê´Âú®Êï∞ÊçÆÁöÑÂÖ≥ËÅîÂÖ≥Á≥ªËÉåÂêéÔºåÈúÄË¶ÅÈÄöËøáÂõæÁÆóÊ≥ïÊåñÊéòÂæóÂá∫ÁöÑ‰∏Ä‰∫õÈ£éÈô©ÊèêÁ§∫Ôºå‰æãÂ¶ÇÔºöÂ∞ΩÁÆ°ÁªôÂÆöÁöÑÂÆû‰Ωì‰∏éÊúâÈôêÁöÑÊ†áÊ≥®È´òÈ£éÈô©ÂÆû‰ΩìÊ≤°ÊúâÂåπÈÖçÁöÑÂÖ≥ËÅîÔºå‰ΩÜÊòØÂÆÉÂú®Âõæ‰∏≠ÂΩ¢Êàê‰∫ÜËÅöÈõÜÊÄßÂèØËÉΩÊèêÁ§∫Êàë‰ª¨ËøôÂèØËÉΩÊòØ‰∏Ä‰∏™Â∞öÊú™ÂæóÊâãÁöÑËøõË°å‰∏≠ÁöÑÂõ¢‰ºôË¥∑Ê¨æËØàÈ™óÁöÑÂÖ∂‰∏≠‰∏ÄÊ¨°Áî≥ËØ∑ÔºåËøôÁßçÊÉÖÂÜµÂèØ‰ª•ÈÄöËøáÂÆöÊúüÂú®ÂéÜÂè≤Êï∞ÊçÆ‰∏≠ÊâπÈáèÊâßË°åÁ§æÂå∫ÂèëÁé∞ÁÆóÊ≥ïÂæóÂá∫ÔºåÂπ∂Âú®È´òËÅöÈõÜÁ§æÂå∫‰∏≠Âà©Áî®‰∏≠ÂøÉÊÄßÁÆóÊ≥ïÁªôÂá∫Ê†∏ÂøÉÂÆû‰ΩìÔºå‰∏ÄÂπ∂ÊèêÁ§∫ÁªôÈ£éÈô©‰∏ìÂÆ∂ËøõË°åÂêéÁª≠ËØÑ‰º∞ÂíåÈ£éÈô©Ê†áÊ≥®„ÄÇ

-->
<ul>
<li>
<p>One is that which can be directly described by the risk control expert in terms of some pattern, e.g., a direct or indirect association with an entity that has been marked as high risk (new order applicants use the same network devices as past high risk records), and this pattern corresponds to the graph, which gives results in real time through a graph query.</p>
</li>
<li>
<p>Another type of association is implicitly behind the correlation of the data, which needs to be mined by graph algorithms for some risk hints, e.g., although a given entity has no matching association with a limited number of labeled high-risk entities, the aggregation it forms in the graph may suggest that this may be one of the applications of an ongoing gang loan fraud that has not yet succeeded, which can be derived by periodically batching in the historical data This situation can be derived by periodically performing community discovery algorithms in bulk in historical data, and using centrality algorithms in highly aggregated communities to give core entities that are prompted to risk experts for subsequent evaluation and risk labeling.</p>
</li>
</ul>
<h4 id="fraud-detection-based-on-expert-graph-pattern-matching" class="headerLink">
    <a href="#fraud-detection-based-on-expert-graph-pattern-matching" class="header-mark"></a>1.2.1 Fraud detection based on expert graph pattern matching</h4><p>Before we get started, let&rsquo;s prepare for a NebulaGraph playground with the above graph dataset being loaded:</p>
<blockquote>
<p>Nebula Graph Playground setup, based on  <a href="https://github.com/wey-gu/nebula-up/" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/nebula-up/</a></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -fsSL nebula-up.siwei.io/install.sh <span class="p">|</span> bash
</span></span></code></pre></td></tr></table>
</div>
</div><p>Load graph dataset</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># clone dataset genarator repo</span>
</span></span><span class="line"><span class="cl">git clone https://github.com/wey-gu/fraud-detection-datagen.git
</span></span><span class="line"><span class="cl">cp -r data_sample_numerical_vertex_id data
</span></span><span class="line"><span class="cl"><span class="c1"># remove table head</span>
</span></span><span class="line"><span class="cl">sed -i <span class="s1">&#39;1d&#39;</span> data/*.csv
</span></span><span class="line"><span class="cl"><span class="c1"># load dataset to nebulagraph</span>
</span></span><span class="line"><span class="cl">docker run --rm -ti <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --network<span class="o">=</span>nebula-net <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v <span class="si">${</span><span class="nv">PWD</span><span class="si">}</span>:/root/ <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v <span class="si">${</span><span class="nv">PWD</span><span class="si">}</span>/data/:/data <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    vesoft/nebula-importer:v3.1.0 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --config /root/nebula_graph_importer.yaml
</span></span></code></pre></td></tr></table>
</div>
</div><p>With such a mapping, risk control experts can explore the relationships between entities on-demand in a visual exploration tool that maps the corresponding risk patterns:</p>
<p><figure><img
        
        loading="lazy"
        src="/en/fraud-detection-with-nebulagraph/viz_graph_query.webp"
        srcset="/en/fraud-detection-with-nebulagraph/viz_graph_query.webp, /en/fraud-detection-with-nebulagraph/viz_graph_query.webp 1.5x, /en/fraud-detection-with-nebulagraph/viz_graph_query.webp 2x"
        sizes="auto"
        alt="/en/fraud-detection-with-nebulagraph/viz_graph_query.webp"
        title="/en/fraud-detection-with-nebulagraph/viz_graph_query.webp" height="1700"   width="3102" ></figure></p>
<p>In this screenshot of rendered query, we can clearly see a risk pattern for a group-controlled device that can be given to a graph database developer and abstracted into NebulaGraph database statements that can be queried by anyone or certain application in real-time fashion:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="c1">## Query started from a person for given transaction
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;200000010265&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="n">p_shared_d</span><span class="o">=</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">used_device</span><span class="o">`</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">d</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="o">`</span><span class="n">used_device</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(:</span><span class="o">`</span><span class="n">applicant</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">with_phone_num</span><span class="o">`</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">pn</span><span class="p">:</span><span class="o">`</span><span class="n">phone_num</span><span class="o">`</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[</span><span class="n">e</span><span class="p">:</span><span class="o">`</span><span class="n">with_phone_num</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(:</span><span class="o">`</span><span class="n">applicant</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p_shared_d</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Then we could create an API based on queries like the following, which returns <code>count(e)</code> as a metrics.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="c1">## group controlled device metric
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;200000010265&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="n">p_shared_d</span><span class="o">=</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">used_device</span><span class="o">`</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">d</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="o">`</span><span class="n">used_device</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(:</span><span class="o">`</span><span class="n">applicant</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">with_phone_num</span><span class="o">`</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">pn</span><span class="p">:</span><span class="o">`</span><span class="n">phone_num</span><span class="o">`</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[</span><span class="n">e</span><span class="p">:</span><span class="o">`</span><span class="n">with_phone_num</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(:</span><span class="o">`</span><span class="n">applicant</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="nf">count</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>In this way, we can build an online risk control system that uses limited labeled data and expert resources to more efficiently control the risk of gang fraud.</p>
<p>Another example of leveraging labeled high-risk vertices could be like querying the count of ones whose <code>is_risky</code> flag is True:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p_</span><span class="o">=</span><span class="p">(</span><span class="n">p</span><span class="p">:</span><span class="o">`</span><span class="n">applicant</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="o">*</span><span class="mi">1</span><span class="p">..</span><span class="mi">2</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">p2</span><span class="p">:</span><span class="o">`</span><span class="n">applicant</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">==</span><span class="s2">&#34;200000014810&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">p2</span><span class="p">.</span><span class="o">`</span><span class="n">applicant</span><span class="o">`</span><span class="p">.</span><span class="n">is_risky</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;True&#34;</span><span class="w"> </span><span class="k">RETURN</span><span class="w"> </span><span class="n">p_</span><span class="w"> </span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">100</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><figure><img
        
        loading="lazy"
        src="/en/fraud-detection-with-nebulagraph/is_risky_label.webp"
        srcset="/en/fraud-detection-with-nebulagraph/is_risky_label.webp, /en/fraud-detection-with-nebulagraph/is_risky_label.webp 1.5x, /en/fraud-detection-with-nebulagraph/is_risky_label.webp 2x"
        sizes="auto"
        alt="/en/fraud-detection-with-nebulagraph/is_risky_label.webp"
        title="/en/fraud-detection-with-nebulagraph/is_risky_label.webp" height="525"   width="1192" ></figure></p>
<p>And the metric would be like:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">p</span><span class="p">:</span><span class="o">`</span><span class="n">applicant</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="o">*</span><span class="mi">1</span><span class="p">..</span><span class="mi">2</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">p2</span><span class="p">:</span><span class="o">`</span><span class="n">applicant</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">==</span><span class="s2">&#34;200000014810&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">p2</span><span class="p">.</span><span class="o">`</span><span class="n">applicant</span><span class="o">`</span><span class="p">.</span><span class="n">is_risky</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;True&#34;</span><span class="w"> </span><span class="k">RETURN</span><span class="w"> </span><span class="nf">count</span><span class="p">(</span><span class="n">p2</span><span class="p">)</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>However, in real world, most of our labeled data is still too expensive to obtain, so is there any way to more effectively use the limited risk labeling and graph structure to predict the risk?</p>
<p>The answer is yes.</p>
<h3 id="expand-labels-in-graph" class="headerLink">
    <a href="#expand-labels-in-graph" class="header-mark"></a>1.3 Expand labels in Graph</h3><!--

Xiaojin Z. Âíå Zoubin G. Âú®ËÆ∫ÊñáÔºö[Learning from Labeled and Unlabeled Data with Label Propagation](http://mlg.eng.cam.ac.uk/zoubin/papers/CMU-CALD-02-107.pdf) ÔºàCMU-CALD-02-107Ôºâ‰∏≠ÔºåÂà©Áî®Ê†áÁ≠æ‰º†Êí≠ÔºàLabel PropagationÔºâÁÆóÊ≥ïÊù•ÊääÊúâÈôêÁöÑÊ†áÊ≥®‰ø°ÊÅØÂú®Âõæ‰∏äÈÄöËøáÂÖ≥ËÅîÂÖ≥Á≥ª‰º†Êí≠Âà∞Êõ¥Â§öÂÆû‰Ωì‰∏≠„ÄÇ

-->
<p>In the paper: <a href="http://mlg.eng.cam.ac.uk/zoubin/papers/CMU-CALD-02-107.pdf" target="_blank" rel="noopener noreferrer">Learning from Labeled and Unlabeled Data with Label Propagation</a> (CMU-CALD-02-107) by Xiaojin Z. and Zoubin G., the Label Propagation algorithm is used to propagate limited labeled information on the graph to more entities through the edges.</p>
<p>In this way, we can easily &ldquo;propagate&rdquo; more labeled information with a limited number of high-risk annotations in the graphs we build. These extended labeles can, on the one hand, give more results in real-time graph queries and, on the other hand, serve as important input for risk control experts to help advance anti-fraud investigation actions.</p>
<p>In general, we can scan the graph data offline periodically, expand and update the labels by the graph algorithm, and then write the valid updated labels back to the graph.</p>
<blockquote>
<p>Note that there is a similar method, SIGNDiffusion, for those who are interested.</p>
</blockquote>
<h4 id="try-expanding-labels-in-graph" class="headerLink">
    <a href="#try-expanding-labels-in-graph" class="header-mark"></a>1.3.1 Try expanding labels in graph</h4><p>Here is an example that works.</p>
<p>In this example, I use the public Yelp dataset. This data will not only be used in this example, but also in the later cases in the GNN method, so you can be patient and import the data into NebulaGraph.</p>
<p>Load dataset into NebulaGraph</p>
<blockquote>
<p>More details in: <a href="https://github.com/wey-gu/nebulagraph-yelp-frauddetection" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/nebulagraph-yelp-frauddetection</a></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone https://github.com/wey-gu/nebulagraph-yelp-frauddetection
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> nebulagraph-yelp-frauddetection
</span></span><span class="line"><span class="cl">python3 -m pip install -r requirements.txt
</span></span><span class="line"><span class="cl"><span class="c1"># download and process dataset</span>
</span></span><span class="line"><span class="cl">python3 data_download.py
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># load it into NebulaGraph</span>
</span></span><span class="line"><span class="cl">docker run --rm -ti <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --network<span class="o">=</span>nebula-net <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v <span class="si">${</span><span class="nv">PWD</span><span class="si">}</span>/yelp_nebulagraph_importer.yaml:/root/importer.yaml <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v <span class="si">${</span><span class="nv">PWD</span><span class="si">}</span>/data:/root <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    vesoft/nebula-importer:v3.1.0 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --config /root/importer.yaml
</span></span></code></pre></td></tr></table>
</div>
</div><p>After it&rsquo;s done, we could see the data stats:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">~/.nebula-up/console.sh -e <span class="s2">&#34;USE yelp; SHOW STATS&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>It should look like:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>root@nebula<span class="o">)</span> <span class="o">[(</span>none<span class="o">)]</span>&gt; USE yelp<span class="p">;</span> SHOW STATS
</span></span><span class="line"><span class="cl">+---------+---------------------------------------+---------+
</span></span><span class="line"><span class="cl"><span class="p">|</span> Type    <span class="p">|</span> Name                                  <span class="p">|</span> Count   <span class="p">|</span>
</span></span><span class="line"><span class="cl">+---------+---------------------------------------+---------+
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Tag&#34;</span>   <span class="p">|</span> <span class="s2">&#34;review&#34;</span>                              <span class="p">|</span> <span class="m">45954</span>   <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Edge&#34;</span>  <span class="p">|</span> <span class="s2">&#34;shares_restaurant_in_one_month_with&#34;</span> <span class="p">|</span> <span class="m">1147232</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Edge&#34;</span>  <span class="p">|</span> <span class="s2">&#34;shares_restaurant_rating_with&#34;</span>       <span class="p">|</span> <span class="m">6805486</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Edge&#34;</span>  <span class="p">|</span> <span class="s2">&#34;shares_user_with&#34;</span>                    <span class="p">|</span> <span class="m">98630</span>   <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Space&#34;</span> <span class="p">|</span> <span class="s2">&#34;vertices&#34;</span>                            <span class="p">|</span> <span class="m">45954</span>   <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Space&#34;</span> <span class="p">|</span> <span class="s2">&#34;edges&#34;</span>                               <span class="p">|</span> <span class="m">8051348</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl">+---------+---------------------------------------+---------+
</span></span><span class="line"><span class="cl">Got <span class="m">6</span> rows <span class="o">(</span><span class="nb">time</span> spent 1911/4488 us<span class="o">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Currently, the general LPA tag propagation algorithm is used for community detection and few implementations are used for tag expansion (only SK-Learn has this implementation), here, we refer to the implementation given by [Thibaud M](<a href="https://datascience.stackexchange.com/users/77683/" target="_blank" rel="noopener noreferrer">https://datascience.stackexchange.com/users/77683/</a> thibaud-m) for the implementation given.</p>
<blockquote>
<p>The orginal talks could be referred: <a href="https://datascience.stackexchange.com/a/55720/138720" target="_blank" rel="noopener noreferrer">https://datascience.stackexchange.com/a/55720/138720</a></p>
</blockquote>
<p>To make this algorithm run faster, a subgraph is taken from the NebulaGraph and an expansion of the labeling is done on this small subgraph:</p>
<blockquote>
<p>First, we start a Playground for Jupyter.</p>
<p>More details in: <a href="https://github.com/wey-gu/nebula-dgl" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/nebula-dgl</a>.</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone https://github.com/wey-gu/nebula-dgl.git
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> nebula-dgl
</span></span><span class="line"><span class="cl"><span class="c1"># run the Jupyter Notebook</span>
</span></span><span class="line"><span class="cl">docker run -it --name dgl -p 8888:8888 --network nebula-net <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v <span class="s2">&#34;</span><span class="nv">$PWD</span><span class="s2">&#34;</span>:/home/jovyan/work jupyter/datascience-notebook <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    start-notebook.sh --NotebookApp.token<span class="o">=</span><span class="s1">&#39;nebulagraph&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>visit http://localhost:8888/lab/tree/work?token=nebulagraph</p>
<p>Install depednecies(they will be used in GNN examples, too)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="err">!</span><span class="n">python3</span> <span class="o">-</span><span class="n">m</span> <span class="n">pip</span> <span class="n">install</span> <span class="n">git</span><span class="o">+</span><span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">vesoft</span><span class="o">-</span><span class="n">inc</span><span class="o">/</span><span class="n">nebula</span><span class="o">-</span><span class="n">python</span><span class="o">.</span><span class="n">git</span><span class="o">@</span><span class="mi">8</span><span class="n">c328c534413b04ccecfd42e64ce6491e09c6ca8</span>
</span></span><span class="line"><span class="cl"><span class="err">!</span><span class="n">python3</span> <span class="o">-</span><span class="n">m</span> <span class="n">pip</span> <span class="n">install</span> <span class="o">.</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Then, let&rsquo;s sample a subgraph, starting from the vertex with ID <code>2048</code>, to get all vertecies in two steps:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">torch</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">json</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">torch</span> <span class="kn">import</span> <span class="n">tensor</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">dgl</span> <span class="kn">import</span> <span class="n">DGLHeteroGraph</span><span class="p">,</span> <span class="n">heterograph</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">nebula3.gclient.net</span> <span class="kn">import</span> <span class="n">ConnectionPool</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">nebula3.Config</span> <span class="kn">import</span> <span class="n">Config</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">config</span> <span class="o">=</span> <span class="n">Config</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">config</span><span class="o">.</span><span class="n">max_connection_pool_size</span> <span class="o">=</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl"><span class="n">connection_pool</span> <span class="o">=</span> <span class="n">ConnectionPool</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">connection_pool</span><span class="o">.</span><span class="n">init</span><span class="p">([(</span><span class="s1">&#39;graphd&#39;</span><span class="p">,</span> <span class="mi">9669</span><span class="p">)],</span> <span class="n">config</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">vertex_id</span> <span class="o">=</span> <span class="mi">2048</span>
</span></span><span class="line"><span class="cl"><span class="n">client</span> <span class="o">=</span> <span class="n">connection_pool</span><span class="o">.</span><span class="n">get_session</span><span class="p">(</span><span class="s1">&#39;root&#39;</span><span class="p">,</span> <span class="s1">&#39;nebula&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">execute_json</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;USE yelp;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="sa">f</span><span class="s2">&#34;GET SUBGRAPH WITH PROP 2 STEPS FROM </span><span class="si">{</span><span class="n">vertex_id</span><span class="si">}</span><span class="s2"> YIELD VERTICES AS nodes, EDGES AS relationships;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">r</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">data</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;results&#39;</span><span class="p">,</span> <span class="p">[{}])[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">columns</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;results&#39;</span><span class="p">,</span> <span class="p">[{}])[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;columns&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># create node and nodedata</span>
</span></span><span class="line"><span class="cl"><span class="n">node_id_map</span> <span class="o">=</span> <span class="p">{}</span> <span class="c1"># key: vertex id in NebulaGraph, value: node id in dgl_graph</span>
</span></span><span class="line"><span class="cl"><span class="n">node_idx</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">features</span> <span class="o">=</span> <span class="p">[[]</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">32</span><span class="p">)]</span> <span class="o">+</span> <span class="p">[[]]</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">index</span><span class="p">,</span> <span class="n">node</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s1">&#39;meta&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">]):</span>
</span></span><span class="line"><span class="cl">        <span class="n">nodeid</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s1">&#39;meta&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="n">index</span><span class="p">][</span><span class="s1">&#39;id&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">nodeid</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">node_id_map</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">node_id_map</span><span class="p">[</span><span class="n">nodeid</span><span class="p">]</span> <span class="o">=</span> <span class="n">node_idx</span>
</span></span><span class="line"><span class="cl">            <span class="n">node_idx</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">32</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">                <span class="n">features</span><span class="p">[</span><span class="n">f</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s1">&#39;row&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="n">index</span><span class="p">][</span><span class="sa">f</span><span class="s2">&#34;review.f</span><span class="si">{</span><span class="n">f</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">            <span class="n">features</span><span class="p">[</span><span class="mi">32</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s1">&#39;row&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="n">index</span><span class="p">][</span><span class="s1">&#39;review.is_fraud&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">rur_start</span><span class="p">,</span> <span class="n">rur_end</span><span class="p">,</span> <span class="n">rsr_start</span><span class="p">,</span> <span class="n">rsr_end</span><span class="p">,</span> <span class="n">rtr_start</span><span class="p">,</span> <span class="n">rtr_end</span> <span class="o">=</span> <span class="p">[],</span> <span class="p">[],</span> <span class="p">[],</span> <span class="p">[],</span> <span class="p">[],</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">edge</span> <span class="ow">in</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s1">&#39;meta&#39;</span><span class="p">][</span><span class="mi">1</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">        <span class="n">edge</span> <span class="o">=</span> <span class="n">edge</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">edge</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;shares_user_with&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">rur_start</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node_id_map</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="s1">&#39;src&#39;</span><span class="p">]])</span>
</span></span><span class="line"><span class="cl">            <span class="n">rur_end</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node_id_map</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="s1">&#39;dst&#39;</span><span class="p">]])</span>
</span></span><span class="line"><span class="cl">        <span class="k">elif</span> <span class="n">edge</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;shares_restaurant_rating_with&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">rsr_start</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node_id_map</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="s1">&#39;src&#39;</span><span class="p">]])</span>
</span></span><span class="line"><span class="cl">            <span class="n">rsr_end</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node_id_map</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="s1">&#39;dst&#39;</span><span class="p">]])</span>
</span></span><span class="line"><span class="cl">        <span class="k">elif</span> <span class="n">edge</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;shares_restaurant_in_one_month_with&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">rtr_start</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node_id_map</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="s1">&#39;src&#39;</span><span class="p">]])</span>
</span></span><span class="line"><span class="cl">            <span class="n">rtr_end</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node_id_map</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="s1">&#39;dst&#39;</span><span class="p">]])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">data_dict</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">rur_start</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">data_dict</span><span class="p">[(</span><span class="s1">&#39;review&#39;</span><span class="p">,</span> <span class="s1">&#39;shares_user_with&#39;</span><span class="p">,</span> <span class="s1">&#39;review&#39;</span><span class="p">)]</span> <span class="o">=</span> <span class="n">tensor</span><span class="p">(</span><span class="n">rur_start</span><span class="p">),</span> <span class="n">tensor</span><span class="p">(</span><span class="n">rur_end</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">rsr_start</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">data_dict</span><span class="p">[(</span><span class="s1">&#39;review&#39;</span><span class="p">,</span> <span class="s1">&#39;shares_restaurant_rating_with&#39;</span><span class="p">,</span> <span class="s1">&#39;review&#39;</span><span class="p">)]</span> <span class="o">=</span> <span class="n">tensor</span><span class="p">(</span><span class="n">rsr_start</span><span class="p">),</span> <span class="n">tensor</span><span class="p">(</span><span class="n">rsr_end</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">rtr_start</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">data_dict</span><span class="p">[(</span><span class="s1">&#39;review&#39;</span><span class="p">,</span> <span class="s1">&#39;shares_restaurant_in_one_month_with&#39;</span><span class="p">,</span> <span class="s1">&#39;review&#39;</span><span class="p">)]</span> <span class="o">=</span> <span class="n">tensor</span><span class="p">(</span><span class="n">rtr_start</span><span class="p">),</span> <span class="n">tensor</span><span class="p">(</span><span class="n">rtr_end</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># construct a dgl_graph, ref: https://docs.dgl.ai/en/0.9.x/generated/dgl.heterograph.html</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">dgl_graph</span><span class="p">:</span> <span class="n">DGLHeteroGraph</span> <span class="o">=</span> <span class="n">heterograph</span><span class="p">(</span><span class="n">data_dict</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># load node features to dgl_graph</span>
</span></span><span class="line"><span class="cl"><span class="n">dgl_graph</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;label&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">tensor</span><span class="p">(</span><span class="n">features</span><span class="p">[</span><span class="mi">32</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># heterogeneous graph to heterogeneous graph, keep ndata and edata</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">dgl</span>
</span></span><span class="line"><span class="cl"><span class="n">hg</span> <span class="o">=</span> <span class="n">dgl</span><span class="o">.</span><span class="n">to_homogeneous</span><span class="p">(</span><span class="n">dgl_graph</span><span class="p">,</span> <span class="n">ndata</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;label&#39;</span><span class="p">])</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Then, let&rsquo;s apply the Label Spreading algorithm mentioned above to this subgraph:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">abc</span> <span class="kn">import</span> <span class="n">abstractmethod</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">torch</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">BaseLabelPropagation</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Base class for label propagation models.
</span></span></span><span class="line"><span class="cl"><span class="s2">    
</span></span></span><span class="line"><span class="cl"><span class="s2">    Parameters
</span></span></span><span class="line"><span class="cl"><span class="s2">    ----------
</span></span></span><span class="line"><span class="cl"><span class="s2">    adj_matrix: torch.FloatTensor
</span></span></span><span class="line"><span class="cl"><span class="s2">        Adjacency matrix of the graph.
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">adj_matrix</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">norm_adj_matrix</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_normalize</span><span class="p">(</span><span class="n">adj_matrix</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">n_nodes</span> <span class="o">=</span> <span class="n">adj_matrix</span><span class="o">.</span><span class="n">size</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">one_hot_labels</span> <span class="o">=</span> <span class="kc">None</span> 
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">n_classes</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">labeled_mask</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">predictions</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@staticmethod</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@abstractmethod</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">_normalize</span><span class="p">(</span><span class="n">adj_matrix</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">raise</span> <span class="ne">NotImplementedError</span><span class="p">(</span><span class="s2">&#34;_normalize must be implemented&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@abstractmethod</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">_propagate</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">raise</span> <span class="ne">NotImplementedError</span><span class="p">(</span><span class="s2">&#34;_propagate must be implemented&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">_one_hot_encode</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">labels</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># Get the number of classes</span>
</span></span><span class="line"><span class="cl">        <span class="n">classes</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">unique</span><span class="p">(</span><span class="n">labels</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">classes</span> <span class="o">=</span> <span class="n">classes</span><span class="p">[</span><span class="n">classes</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">n_classes</span> <span class="o">=</span> <span class="n">classes</span><span class="o">.</span><span class="n">size</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1"># One-hot encode labeled data instances and zero rows corresponding to unlabeled instances</span>
</span></span><span class="line"><span class="cl">        <span class="n">unlabeled_mask</span> <span class="o">=</span> <span class="p">(</span><span class="n">labels</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">labels</span> <span class="o">=</span> <span class="n">labels</span><span class="o">.</span><span class="n">clone</span><span class="p">()</span>  <span class="c1"># defensive copying</span>
</span></span><span class="line"><span class="cl">        <span class="n">labels</span><span class="p">[</span><span class="n">unlabeled_mask</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">one_hot_labels</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="bp">self</span><span class="o">.</span><span class="n">n_nodes</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">n_classes</span><span class="p">),</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">float</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">one_hot_labels</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">one_hot_labels</span><span class="o">.</span><span class="n">scatter</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">labels</span><span class="o">.</span><span class="n">unsqueeze</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">one_hot_labels</span><span class="p">[</span><span class="n">unlabeled_mask</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">labeled_mask</span> <span class="o">=</span> <span class="o">~</span><span class="n">unlabeled_mask</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">fit</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">labels</span><span class="p">,</span> <span class="n">max_iter</span><span class="p">,</span> <span class="n">tol</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;Fits a semi-supervised learning label propagation model.
</span></span></span><span class="line"><span class="cl"><span class="s2">        
</span></span></span><span class="line"><span class="cl"><span class="s2">        labels: torch.LongTensor
</span></span></span><span class="line"><span class="cl"><span class="s2">            Tensor of size n_nodes indicating the class number of each node.
</span></span></span><span class="line"><span class="cl"><span class="s2">            Unlabeled nodes are denoted with -1.
</span></span></span><span class="line"><span class="cl"><span class="s2">        max_iter: int
</span></span></span><span class="line"><span class="cl"><span class="s2">            Maximum number of iterations allowed.
</span></span></span><span class="line"><span class="cl"><span class="s2">        tol: float
</span></span></span><span class="line"><span class="cl"><span class="s2">            Convergence tolerance: threshold to consider the system at steady state.
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">_one_hot_encode</span><span class="p">(</span><span class="n">labels</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">predictions</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">one_hot_labels</span><span class="o">.</span><span class="n">clone</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">prev_predictions</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="bp">self</span><span class="o">.</span><span class="n">n_nodes</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">n_classes</span><span class="p">),</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">float</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">max_iter</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># Stop iterations if the system is considered at a steady state</span>
</span></span><span class="line"><span class="cl">            <span class="n">variation</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">abs</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">predictions</span> <span class="o">-</span> <span class="n">prev_predictions</span><span class="p">)</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span><span class="o">.</span><span class="n">item</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">variation</span> <span class="o">&lt;</span> <span class="n">tol</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;The method stopped after </span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2"> iterations, variation=</span><span class="si">{</span><span class="n">variation</span><span class="si">:</span><span class="s2">.4f</span><span class="si">}</span><span class="s2">.&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">break</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="n">prev_predictions</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">predictions</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">_propagate</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">predict</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">predictions</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">predict_classes</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">predictions</span><span class="o">.</span><span class="n">max</span><span class="p">(</span><span class="n">dim</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">indices</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">LabelPropagation</span><span class="p">(</span><span class="n">BaseLabelPropagation</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">adj_matrix</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="fm">__init__</span><span class="p">(</span><span class="n">adj_matrix</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@staticmethod</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">_normalize</span><span class="p">(</span><span class="n">adj_matrix</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;Computes D^-1 * W&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="n">degs</span> <span class="o">=</span> <span class="n">adj_matrix</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">dim</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">degs</span><span class="p">[</span><span class="n">degs</span> <span class="o">==</span> <span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>  <span class="c1"># avoid division by 0 error</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">adj_matrix</span> <span class="o">/</span> <span class="n">degs</span><span class="p">[:,</span> <span class="kc">None</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">_propagate</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">predictions</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">matmul</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">norm_adj_matrix</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">predictions</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1"># Put back already known labels</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">predictions</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">labeled_mask</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">one_hot_labels</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">labeled_mask</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">fit</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">labels</span><span class="p">,</span> <span class="n">max_iter</span><span class="o">=</span><span class="mi">1000</span><span class="p">,</span> <span class="n">tol</span><span class="o">=</span><span class="mf">1e-3</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">labels</span><span class="p">,</span> <span class="n">max_iter</span><span class="p">,</span> <span class="n">tol</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">LabelSpreading</span><span class="p">(</span><span class="n">BaseLabelPropagation</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">adj_matrix</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="fm">__init__</span><span class="p">(</span><span class="n">adj_matrix</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@staticmethod</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">_normalize</span><span class="p">(</span><span class="n">adj_matrix</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;Computes D^-1/2 * W * D^-1/2&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="n">degs</span> <span class="o">=</span> <span class="n">adj_matrix</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">dim</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">norm</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">pow</span><span class="p">(</span><span class="n">degs</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">norm</span><span class="p">[</span><span class="n">torch</span><span class="o">.</span><span class="n">isinf</span><span class="p">(</span><span class="n">norm</span><span class="p">)]</span> <span class="o">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">adj_matrix</span> <span class="o">*</span> <span class="n">norm</span><span class="p">[:,</span> <span class="kc">None</span><span class="p">]</span> <span class="o">*</span> <span class="n">norm</span><span class="p">[</span><span class="kc">None</span><span class="p">,</span> <span class="p">:]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">_propagate</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">predictions</span> <span class="o">=</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">alpha</span> <span class="o">*</span> <span class="n">torch</span><span class="o">.</span><span class="n">matmul</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">norm_adj_matrix</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">predictions</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="o">+</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="bp">self</span><span class="o">.</span><span class="n">alpha</span><span class="p">)</span> <span class="o">*</span> <span class="bp">self</span><span class="o">.</span><span class="n">one_hot_labels</span>
</span></span><span class="line"><span class="cl">        <span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">fit</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">labels</span><span class="p">,</span> <span class="n">max_iter</span><span class="o">=</span><span class="mi">1000</span><span class="p">,</span> <span class="n">tol</span><span class="o">=</span><span class="mf">1e-3</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.5</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">        Parameters
</span></span></span><span class="line"><span class="cl"><span class="s2">        ----------
</span></span></span><span class="line"><span class="cl"><span class="s2">        alpha: float
</span></span></span><span class="line"><span class="cl"><span class="s2">            Clamping factor.
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="n">alpha</span>
</span></span><span class="line"><span class="cl">        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">labels</span><span class="p">,</span> <span class="n">max_iter</span><span class="p">,</span> <span class="n">tol</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">networkx</span> <span class="k">as</span> <span class="nn">nx</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">nx_hg</span> <span class="o">=</span> <span class="n">hg</span><span class="o">.</span><span class="n">to_networkx</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">adj_matrix</span> <span class="o">=</span> <span class="n">nx</span><span class="o">.</span><span class="n">adjacency_matrix</span><span class="p">(</span><span class="n">nx_hg</span><span class="p">)</span><span class="o">.</span><span class="n">toarray</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">labels</span> <span class="o">=</span> <span class="n">hg</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;label&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Create input tensors</span>
</span></span><span class="line"><span class="cl"><span class="n">adj_matrix_t</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">FloatTensor</span><span class="p">(</span><span class="n">adj_matrix</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">labels_t</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">LongTensor</span><span class="p">(</span><span class="n">labels</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Learn with Label Propagation</span>
</span></span><span class="line"><span class="cl"><span class="n">label_propagation</span> <span class="o">=</span> <span class="n">LabelPropagation</span><span class="p">(</span><span class="n">adj_matrix_t</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Label Propagation: &#34;</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">label_propagation</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">labels_t</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">label_propagation_output_labels</span> <span class="o">=</span> <span class="n">label_propagation</span><span class="o">.</span><span class="n">predict_classes</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Learn with Label Spreading</span>
</span></span><span class="line"><span class="cl"><span class="n">label_spreading</span> <span class="o">=</span> <span class="n">LabelSpreading</span><span class="p">(</span><span class="n">adj_matrix_t</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Label Spreading: &#34;</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">label_spreading</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">labels_t</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.8</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">label_spreading_output_labels</span> <span class="o">=</span> <span class="n">label_spreading</span><span class="o">.</span><span class="n">predict_classes</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Let&rsquo;s render label spread in color:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">color_map</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">:</span> <span class="s2">&#34;blue&#34;</span><span class="p">,</span> <span class="mi">1</span><span class="p">:</span> <span class="s2">&#34;green&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">input_labels_colors</span> <span class="o">=</span> <span class="p">[</span><span class="n">color_map</span><span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">l</span><span class="p">)]</span> <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">labels</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">lprop_labels_colors</span> <span class="o">=</span> <span class="p">[</span><span class="n">color_map</span><span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">l</span><span class="p">)]</span> <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">label_propagation_output_labels</span><span class="o">.</span><span class="n">numpy</span><span class="p">()]</span>
</span></span><span class="line"><span class="cl"><span class="n">lspread_labels_colors</span> <span class="o">=</span> <span class="p">[</span><span class="n">color_map</span><span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">l</span><span class="p">)]</span> <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">label_spreading_output_labels</span><span class="o">.</span><span class="n">numpy</span><span class="p">()]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">14</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">ax1</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ax2</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ax3</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ax1</span><span class="o">.</span><span class="n">title</span><span class="o">.</span><span class="n">set_text</span><span class="p">(</span><span class="s2">&#34;Raw data (2 classes)&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ax2</span><span class="o">.</span><span class="n">title</span><span class="o">.</span><span class="n">set_text</span><span class="p">(</span><span class="s2">&#34;Label Propagation&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ax3</span><span class="o">.</span><span class="n">title</span><span class="o">.</span><span class="n">set_text</span><span class="p">(</span><span class="s2">&#34;Label Spreading&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">pos</span> <span class="o">=</span> <span class="n">nx</span><span class="o">.</span><span class="n">spring_layout</span><span class="p">(</span><span class="n">nx_hg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">nx</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="n">nx_hg</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax1</span><span class="p">,</span> <span class="n">pos</span><span class="o">=</span><span class="n">pos</span><span class="p">,</span> <span class="n">node_color</span><span class="o">=</span><span class="n">input_labels_colors</span><span class="p">,</span> <span class="n">node_size</span><span class="o">=</span><span class="mi">50</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">nx</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="n">nx_hg</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax2</span><span class="p">,</span> <span class="n">pos</span><span class="o">=</span><span class="n">pos</span><span class="p">,</span> <span class="n">node_color</span><span class="o">=</span><span class="n">lprop_labels_colors</span><span class="p">,</span> <span class="n">node_size</span><span class="o">=</span><span class="mi">50</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">nx</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="n">nx_hg</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax3</span><span class="p">,</span> <span class="n">pos</span><span class="o">=</span><span class="n">pos</span><span class="p">,</span> <span class="n">node_color</span><span class="o">=</span><span class="n">lspread_labels_colors</span><span class="p">,</span> <span class="n">node_size</span><span class="o">=</span><span class="mi">50</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Legend</span>
</span></span><span class="line"><span class="cl"><span class="n">ax4</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ax4</span><span class="o">.</span><span class="n">axis</span><span class="p">(</span><span class="s2">&#34;off&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">legend_colors</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;orange&#34;</span><span class="p">,</span> <span class="s2">&#34;blue&#34;</span><span class="p">,</span> <span class="s2">&#34;green&#34;</span><span class="p">,</span> <span class="s2">&#34;red&#34;</span><span class="p">,</span> <span class="s2">&#34;cyan&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">legend_labels</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;unlabeled&#34;</span><span class="p">,</span> <span class="s2">&#34;class 0&#34;</span><span class="p">,</span> <span class="s2">&#34;class 1&#34;</span><span class="p">,</span> <span class="s2">&#34;class 2&#34;</span><span class="p">,</span> <span class="s2">&#34;class 3&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">dummy_legend</span> <span class="o">=</span> <span class="p">[</span><span class="n">ax4</span><span class="o">.</span><span class="n">plot</span><span class="p">([],</span> <span class="p">[],</span> <span class="n">ls</span><span class="o">=</span><span class="s1">&#39;-&#39;</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="n">c</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">legend_colors</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">legend</span><span class="p">(</span><span class="n">dummy_legend</span><span class="p">,</span> <span class="n">legend_labels</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>It looks like this:</p>
<p><figure><img
        
        loading="lazy"
        src="/en/fraud-detection-with-nebulagraph/lpa_spread_notation_matplot.webp"
        srcset="/en/fraud-detection-with-nebulagraph/lpa_spread_notation_matplot.webp, /en/fraud-detection-with-nebulagraph/lpa_spread_notation_matplot.webp 1.5x, /en/fraud-detection-with-nebulagraph/lpa_spread_notation_matplot.webp 2x"
        sizes="auto"
        alt="/en/fraud-detection-with-nebulagraph/lpa_spread_notation_matplot.webp"
        title="/en/fraud-detection-with-nebulagraph/lpa_spread_notation_matplot.webp" height="712"   width="1202" ></figure></p>
<p>We could see some of the label was spread(color change).</p>
<h3 id="machine-learning-with-graph-features" class="headerLink">
    <a href="#machine-learning-with-graph-features" class="header-mark"></a>1.4 Machine Learning with Graph Features</h3><!--

Âú®È£éÊéßÈ¢ÜÂüüÂºÄÂßãÂà©Áî®ÂõæÁöÑÊÄùÊÉ≥ÂíåËÉΩÂäõ‰πãÂâçÔºåÂ∑≤ÁªèÊúâÂæàÂ§öÂà©Áî®Êú∫Âô®Â≠¶‰π†ÁöÑÂàÜÁ±ªÁÆóÊ≥ïÂü∫‰∫éÂéÜÂè≤Êï∞ÊçÆÈ¢ÑÊµãÈ´òÈ£éÈô©Ë°å‰∏∫ÁöÑÊñπÊ≥ï‰∫ÜÔºåËøô‰∫õÊñπÊ≥ïÊääËÆ∞ÂΩï‰∏≠È¢ÜÂüü‰∏ìÂÆ∂ËÆ§‰∏∫ÊúâÂÖ≥ÁöÑ‰ø°ÊÅØÔºà‰æãÂ¶ÇÔºöÂπ¥ÈæÑ„ÄÅÂ≠¶ÂéÜ„ÄÅÊî∂ÂÖ•Ôºâ‰Ωú‰∏∫ÁâπÂæÅÔºåÂéÜÂè≤Ê†áÊ≥®‰ø°ÊÅØ‰Ωú‰∏∫Ê†áÁ≠æÂéªËÆ≠ÁªÉÈ£éÈô©È¢ÑÊµãÊ®°Âûã„ÄÇ

ÈÇ£‰πàËØªÂà∞ÁöÑËøôÈáåÔºåÊàë‰ª¨ÊòØÂê¶‰ºöÊÉ≥Âà∞Âú®Ëøô‰∫õÊñπÊ≥ïÁöÑÂü∫Á°Ä‰πã‰∏äÔºåÂ¶ÇÊûúÊääÂü∫‰∫éÂõæÁªìÊûÑÁöÑÂ±ûÊÄß‰πüËÄÉËôëËøõÊù•Ôºå‰Ωú‰∏∫ÁâπÂæÅÂéªËÆ≠ÁªÉÁöÑÊ®°ÂûãÂèØËÉΩÊõ¥ÊúâÊïàÂë¢ÔºüÁ≠îÊ°à‰πüÊòØËÇØÂÆöÁöÑÔºåÂ∑≤ÁªèÊúâÂæàÂ§öËÆ∫ÊñáÂíåÂ∑•Á®ãÂÆûË∑µÊè≠Á§∫ËøôÊ†∑ÁöÑÊ®°ÂûãÊØîÊú™ËÄÉËôëÂõæÁâπÂæÅÁöÑÁÆóÊ≥ïÊõ¥Âä†ÊúâÊïàÔºöËøô‰∫õË¢´Â∞ùËØïÊúâÊïàÁöÑÂõæÁªìÊûÑÁâπÂæÅÂèØËÉΩÊòØÂÆû‰ΩìÁöÑ PageRank ÂÄº„ÄÅDegree ÂÄºÊàñËÄÖÊòØÊüê‰∏Ä‰∏™Á§æÂå∫ÂèëÁé∞ÁÆóÊ≥ïÂæóÂá∫ÁöÑÁ§æÂå∫ id„ÄÇ

Âú®Áîü‰∫ß‰∏äÔºåÊàë‰ª¨ÂèØ‰ª•ÂÆöÊúü‰ªéÂõæË∞±‰∏≠Ëé∑ÂæóÂÆûÊó∂ÁöÑÂÖ®Âõæ‰ø°ÊÅØÔºåÂú®ÂõæËÆ°ÁÆóÂπ≥Âè∞‰∏≠ÂàÜÊûêËøêÁÆóËé∑ÂæóÊâÄÈúÄÁâπÂæÅÔºåÁªèËøáÈ¢ÑÂÆöÁöÑÊï∞ÊçÆÁÆ°ÈÅìÔºåÂØºÂÖ•Êú∫Âô®Â≠¶‰π†Ê®°Âûã‰∏≠Âë®ÊúüËé∑ÂæóÊñ∞ÁöÑÈ£éÈô©ÊèêÁ§∫ÔºåÂπ∂Â∞ÜÈÉ®ÂàÜÁªìÊûúÂÜôÂõûÂõæË∞±Êñπ‰æøÂÖ∂‰ªñÁ≥ªÁªüÂíå‰∏ìÂÆ∂ÊäΩÂèñ„ÄÅÂèÇËÄÉ„ÄÇ

-->
<p>Before the field of risk control started to leverage the methods of the graph, there have been many approaches to predict high-risk behavior based on historical data using machine learning classification algorithms that use information in records that domain experts consider relevant (e.g., age, education, income) as features and historical label information to train risk prediction models.</p>
<p>So reading this, does it occur to us that on top of these methods, models trained as features might be more effective if attributes based on graph structure were also taken into account?</p>
<p>The answer is also yes, and there have been many papers and engineering practices revealing that such models are more effective than algorithms that do not consider graph features: these graph structure features that are tried to be effective could be PageRank values of entities, Degree values, or community ids derived from one of the community discovery algorithms.</p>
<p>In production, we can periodically obtain real-time full graph information from the graph, analyze it in a graph computing platform to obtain the required features, go through a predefined data pipeline, import it into a machine learning model cycle to obtain new risk cues, and write some of the results back to the graph for easy extraction and reference by other systems and experts.</p>
<h4 id="example-of-ml-with-graph-features" class="headerLink">
    <a href="#example-of-ml-with-graph-features" class="header-mark"></a>1.4.1 Example of ML with Graph Features</h4><!--

ËøôÈáåÔºåÁ´ØÂà∞Á´ØÊú∫Âô®Â≠¶‰π†ÁöÑÊñπÊ≥ïÊàëÂ∞±‰∏çÊºîÁ§∫‰∫ÜÔºåÂ∞±ÊòØÂ∏∏ËßÅÁöÑÂàÜÁ±ªÊñπÊ≥ïÔºåÂú®Ê≠§‰πã‰∏äÔºåÊàë‰ª¨ÂèØ‰ª•Âú®Êï∞ÊçÆ‰∏≠ÈÄöËøáÂõæÁÆóÊ≥ïËé∑Âæó‰∏Ä‰∫õÊñ∞ÁöÑÂ±ûÊÄßÔºåËøô‰∫õÂ±ûÊÄßÂÜçÂ§ÑÁêÜ‰∏Ä‰∏ã‰Ωú‰∏∫Êñ∞ÁöÑÁâπÂæÅ„ÄÇÊàëÂè™ÊºîÁ§∫‰∏Ä‰∏™Á§æÂå∫ÂèëÁé∞ÁöÑÊñπÊ≥ïÔºåÊàë‰ª¨ÂèØ‰ª•ÂØπÂÖ®ÂõæË∑ë‰∏Ä‰∏™ LouvainÔºåÂæóÂá∫‰∏çÂêåËäÇÁÇπÁöÑÁ§æÂå∫ÂΩíÂ±ûÔºåÁÑ∂ÂêéÊääÁ§æÂå∫ÁöÑÂÄºÂΩìÂÅö‰∏Ä‰∏™ÂàÜÁ±ªÂ§ÑÁêÜÊàê‰∏∫Êï∞ÂÄºÁöÑÁâπÂæÅ„ÄÇ

Ëøô‰∏™‰æãÂ≠êÈáåÊàë‰ª¨ËøòÁî® https://github.com/wey-gu/fraud-detection-datagen Ëøô‰∏™Êï∞ÊçÆÔºåÂú®Ê≠§Âü∫Á°Ä‰∏äÔºåËøô‰∏™‰æãÂ≠êÊàëÁî®Âà∞‰∫Ü [Nebula-Algorithm](https://github.com/vesoft-inc/nebula-algorithm/) Ëøô‰∏™È°πÁõÆÔºåÂÆÉÊòØ‰∏Ä‰∏™ Spark Â∫îÁî®ÔºåÂèØ‰ª•Âú® NebulaGraph ÂõæÂ∫ì‰∏äËøêË°åÂæàÂ§öÂ∏∏Áî®ÁöÑÂõæÁÆóÊ≥ï„ÄÇ

-->
<p>Here, I will not demonstrate the end-to-end machine learning example, which is a common classification approach, on top of which we can get some new properties in the data by graph algorithms, which are then processed as new features. I will only demonstrate a community discovery method where we can run a Louvain on the full graph, derive the community identity of different nodes, and then process the community values as a classification into numerical features.</p>
<p>In this example we also use the data from <a href="https://github.com/wey-gu/fraud-detection-datagen" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/fraud-detection-datagen</a>, on top of which I used <a href="https://github.com/vesoft-inc/nebula-algorithm" target="_blank" rel="noopener noreferrer">NebulaGraph-Algorithm</a> project, a Spark application that runs many common graph algorithms on the NebulaGraph graph database.</p>
<p>First, let&rsquo;s set up a NebulaGraph cluster with Spark and NebulaGraph Algorithm, in one-liner thanks to Nebula-UP</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -fsSL nebula-up.siwei.io/all-in-one.sh <span class="p">|</span> bash -s -- v3 spark
</span></span></code></pre></td></tr></table>
</div>
</div><p>After it&rsquo;s done, as I had put needed configuration files inside Nebula-UP, we could call the Louvain algorithm with:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> ~/.nebula-up/nebula-up/spark <span class="o">&amp;&amp;</span> ls -l
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">docker <span class="nb">exec</span> -it sparkmaster /spark/bin/spark-submit <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --master <span class="s2">&#34;local&#34;</span> --conf spark.rpc.askTimeout<span class="o">=</span>6000s <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --class com.vesoft.nebula.algorithm.Main <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --driver-memory 4g /root/download/nebula-algo.jar <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -p /root/louvain.conf
</span></span></code></pre></td></tr></table>
</div>
</div><p>And the result will be stored in sparkmaster container, under path <code>/output</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># docker exec -it sparkmaster bash</span>
</span></span><span class="line"><span class="cl">ls -l /output
</span></span></code></pre></td></tr></table>
</div>
</div><p>After that, we can do some pre-processing on this Louvain&rsquo;s graph algorithm features and start the traditional model training.</p>
<h3 id="the-graph-neural-network-approach" class="headerLink">
    <a href="#the-graph-neural-network-approach" class="header-mark"></a>1.5 The Graph Neural Network approach</h3><!--

ÁÑ∂ËÄåÔºåÂâçËæπËøô‰∫õÂü∫‰∫éÂõæÁâπÂæÅÁöÑÊñπÊ≥ïÁöÑÈóÆÈ¢òÂú®‰∫éÔºö

1. ÂõæÁâπÂæÅÂπ∂‰∏çËÉΩÊääÂÖ≥ËÅîÂÖ≥Á≥ªÔºåÊï∞ÊçÆÁöÑÂ±ÄÈÉ®ÊÄßÂÖÖÂàÜÂèçÊò†Âà∞Êàë‰ª¨ÁöÑÊ®°Âûã„ÄÅÊñπÊ≥ïÈáåÔºõ
2. ÂõæÁöÑÁâπÂæÅÂ∑•Á®ãÊòØÂæàÊòÇË¥µ„ÄÅÁπÅÁêêÁöÑ„ÄÇ

Âú®ÊúÄËøëÂá†Âπ¥ÁöÑÊàêÊûú‰∏≠ÔºåÂü∫‰∫é GNN ÁöÑÊñπÊ≥ïÈÄöËøáÂ∞ÜÂõæÁªìÊûÑ‰∏éÂ±ûÊÄß‰ø°ÊÅØËøõË°åÂµåÂÖ•Ë°®Á§∫Ôºå‰ΩøÂæóÊàë‰ª¨ËÉΩÂú®‰∏çËøõË°åÂõæÁâπÂæÅÊäΩÂèñ„ÄÅÁâπÂæÅÂ∑•Á®ã„ÄÅ‰∏ìÂÆ∂‰∏éÂ∑•Á®ãÊñπÊ≥ïÁöÑÊï∞ÊçÆÊ†áÊ≥®ÁöÑÊÉÖÂÜµ‰∏ãÔºåÂæóÂà∞Áõ∏ÊØî‰∫éÂü∫‰∫é‰º†ÁªüÂõæÁâπÂæÅÁöÑÊú∫Âô®Â≠¶‰π†Êõ¥Â•ΩÁöÑÊïàÊûú„ÄÇÊúâÊÑèÊÄùÁöÑÊòØÔºåÁé∞Âú®Ê≠£ÊòØËøô‰∫õÊñπÊ≥ïÂø´ÈÄüË¢´ÂèëÁé∞„ÄÅÊºîËøõÁöÑÊó∂ÊúüÔºåÂü∫‰∫éÂõæÁöÑÊ∑±Â∫¶Â≠¶‰π†ÊòØ‰πãÂâçÂá†Âπ¥ÊúÄÁÉ≠Èó®ÁöÑÊú∫Âô®Â≠¶‰π†Á†îÁ©∂ÊñπÂêë‰πã‰∏Ä„ÄÇ

ÂêåÊó∂ÔºåÂõæÊ∑±Â∫¶Â≠¶‰π†ÁöÑ‰∏Ä‰∫õÊñπÊ≥ïÂèØ‰ª•ÂÅöÂà∞ Inductive Learning‚Äî‚ÄîÊ®°ÂûãÂèØ‰ª•Âú®Êñ∞ÁöÑÁÇπ„ÄÅËæπ‰∏äËøõË°åÊé®ÁêÜÔºåËøôÊ†∑ÔºåÈÖçÂêàÂõæÊï∞ÊçÆÂ∫ì‰∏äÁ∫ø‰∏äÁöÑÂ≠êÂõæÊü•ËØ¢ËÉΩÂäõÔºåÂú®Á∫øÂÆûÊó∂ÁöÑÈ£éÈô©È¢ÑÊµã‰πüÂèòÂæóÂæàÁÆÄÂçïÂèØË°å‰∫Ü„ÄÇ

-->
<p>However, the problem with these previous graph feature-based approaches is that</p>
<ol>
<li>graph features do not fully reflect the correlations and the locality nature of the data, into our models/ methods.</li>
<li>graph feature engineering could be expensive and cumbersome.</li>
</ol>
<p>In recent years, GNN-based approaches have enabled us to get better results than traditional graph feature-based machine learning by embedding graph structure and attribute information into the representation without graph feature extraction, feature engineering, and data annotation by experts and engineering methods. Interestingly, this is the period when these methods are rapidly being discovered and evolving, and graph-based deep learning is one of the hottest machine learning research directions in the previous years.</p>
<p>At the same time, some methods of graph deep learning can do Inductive Learning - models can inference/reason on new points and edges, so that, together with the ability to query subgraphs on the graph database online, online real-time risk prediction becomes simple and feasible.</p>
<h4 id="example-of-gnn-fraud-detection-system" class="headerLink">
    <a href="#example-of-gnn-fraud-detection-system" class="header-mark"></a>1.5.1 Example of GNN fraud detection system</h4><!--

Âà©Áî® GNN ÁöÑÊñπÊ≥ï‰∏≠ÔºåÂõæÊï∞ÊçÆÂ∫ìÂπ∂‰∏çÊòØÂøÖÈ°ªÁöÑÔºåÊï∞ÊçÆÁöÑÂ≠òÂÇ®ÂèØ‰ª•Âú®ÂÖ∂‰ªñÂá†ÁßçÂ∏∏ËßÅÁöÑ‰ªãË¥®‰πã‰∏≠Ôºå‰ΩÜÊòØÂõæÂ∫ìËÉΩÂ§üÊúÄÂ§ßÂåñÂä©ÁõäÊ®°ÂûãËÆ≠ÁªÉ„ÄÅÊ®°ÂûãÊõ¥Êñ∞„ÄÅÁ∫ø‰∏äÁªìÊûúÁöÑÊõ¥Êñ∞„ÄÇÂΩìÊàë‰ª¨ÊääÂõæÊï∞ÊçÆÂ∫ì‰Ωú‰∏∫Êï∞ÊçÆÁöÑÂçï‰∏ÄÊï∞ÊçÆÊù•Ê∫êÔºàsingle source of truthÔºâÁöÑÊó∂ÂÄôÔºåÊâÄÊúâÁöÑÂü∫‰∫éÁ∫ø‰∏ä„ÄÅÁ¶ªÁ∫ø„ÄÅÂõæË∞±ÁöÑÊñπÊ≥ïÂèØ‰ª•ÂæàÂÆπÊòìË¢´ÈõÜÊàêËµ∑Êù•Ôºå‰ªéËÄåÁªÑÂêàÊâÄÊúâÊñπÊ≥ïÁöÑ‰ºòÂäø‰∏éÁªìÊûúÔºåÂÅöÂá∫Êõ¥ÊúâÊïàÁöÑÊ¨∫ËØàÊ£ÄÊµãÂ§çÂêàÁ≥ªÁªü„ÄÇ

Âú®Ëøô‰∏™Á§∫‰æã‰∏≠Êàë‰ª¨‰∏ÄÊ†∑ÂàÜ‰∏∫Ôºö**Êï∞ÊçÆÂ§ÑÁêÜ**„ÄÅ**Ê®°ÂûãËÆ≠ÁªÉ**„ÄÅ**ÊûÑÂª∫Ê£ÄÊµãÁ≥ªÁªü**ËøôÂá†ÈÉ®ÂàÜ„ÄÇ

-->
<p>The storage of data can be in several other common media, but the graph database can maximize the benefit of model training, model updating, and online results updating. When we use the graph database as the single source of truth for the data, all online, offline, and graph-based approaches can be easily integrated to combine the advantages and results of all approaches to make a more effective composite system for fraud detection.</p>
<p>In this example we are divided into the same parts: <strong>Data processing</strong>, <strong>Model training</strong>, <strong>Building an online detection system</strong>.</p>
<blockquote>
<p>Note, I will use Deep Graph library(DGL), NebulaGraph and the bridge between them: Nebula-DGL.</p>
<ul>
<li>DGL: <a href="https://www.dgl.ai/" target="_blank" rel="noopener noreferrer">https://www.dgl.ai/</a></li>
<li>Nebula-DGL: <a href="https://github.com/wey-gu/nebula-dgl" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/nebula-dgl</a>, and yes, I am the author of this project :).</li>
</ul>
</blockquote>
<h5 id="dataset" class="headerLink">
    <a href="#dataset" class="header-mark"></a>1.5.1.1 Dataset</h5><p>In this case, the dataset we use is Yelp-Fraud, who comes from the paper [Enhancing Graph Neural Network-based Fraud Detectors against Camouflaged Fraudsters](https:// paperswithcode.com/paper/enhancing-graph-neural-network-based-fraud).</p>
<p>There is one type of vertex in this diagram and three types of edges.</p>
<ul>
<li>Top points: reviews from restaurants, hotels in Yelp with two types of attributes.
<ul>
<li>Each review has a label labeled whether it is a false or fraudulent review</li>
<li>32 numeric attributes that have been processed</li>
</ul>
</li>
<li>Edge: the association between the three types of reviews
<ul>
<li>R-U-R: two reviews issued by the same user shares_user_with</li>
<li>R-S-R: two reviews by the same restaurant with the same rating (rating can be 1 to 5) shares_restaurant_rating_with</li>
<li>R-T-R: two ratings are from the same restaurant in the same month of submission shares_restaurant_in_one_month_with</li>
</ul>
</li>
</ul>
<p>Before we start, it&rsquo;s asumed this grpah is already loaded into NebulaGraph.</p>
<blockquote>
<p>To load yelp dataset into NeublaGraph, in short, you just do:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># Deploy NebulaGraph</span>
</span></span><span class="line"><span class="cl">curl -fsSL nebula-up.siwei.io/install.sh <span class="p">|</span> bash
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Clone the datadownloader repo</span>
</span></span><span class="line"><span class="cl">git clone https://github.com/wey-gu/nebulagraph-yelp-frauddetection <span class="o">&amp;&amp;</span> <span class="nb">cd</span> nebulagraph-yelp-frauddetection
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Install dep</span>
</span></span><span class="line"><span class="cl">python3 -m pip install -r requirements.txt
</span></span><span class="line"><span class="cl">python3 data_download.py
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># load it into NebulaGraph</span>
</span></span><span class="line"><span class="cl">docker run --rm -ti <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span> --network<span class="o">=</span>nebula-net <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span> -v <span class="si">${</span><span class="nv">PWD</span><span class="si">}</span>/yelp_nebulagraph_importer.yaml:/root/importer.yaml <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span> -v <span class="si">${</span><span class="nv">PWD</span><span class="si">}</span>/data:/root <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span> vesoft/nebula-importer:v3.1.0 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span> --config /root/importer.yaml
</span></span></code></pre></td></tr></table>
</div>
</div><p>More detilas in: <a href="https://github.com/wey-gu/nebulagraph-yelp-frauddetection" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/nebulagraph-yelp-frauddetection</a></p>
</blockquote>
<h5 id="data-processing" class="headerLink">
    <a href="#data-processing" class="header-mark"></a>1.5.1.2 Data Processing</h5><!--

ËøôÈÉ®ÂàÜÁöÑ‰ªªÂä°ÊòØÂ∞ÜÂõæË∞±‰∏≠ÂíåÈ£éÈô©Áõ∏ÂÖ≥Â≠êÂõæÁöÑÊãìÊâëÁªìÊûÑË°®Á§∫ÂíåÂÖ∂‰∏≠ÊúâÂÖ≥ÁöÑÁâπÂæÅÔºàÂ±ûÊÄßÔºâËøõË°åÂ∑•Á®ãÂ§ÑÁêÜÔºåÂ∫èÂàóÂåñÊàê‰∏∫ DGL ÁöÑÂõæÂØπË±°„ÄÇ

DGL Êú¨Ë∫´ÊîØÊåÅ‰ªéÁÇπ„ÄÅËæπÂàóË°®ÔºàedgelistÔºâÂΩ¢Âºè CSV Êñá‰ª∂ÔºåÊàñËÄÖ‰ªé NetworkX Âíå SciPy ÁöÑÂ∫èÂàóÂåñÁ®ÄÁñèÁöÑÈÇªÊé•Áü©ÈòµÔºàadjacency matrixÔºâÁöÑÊï∞ÊçÆÊù•ÊûÑÈÄ†ÂÆÉÁöÑÂõæÂØπË±°ÔºåÊàë‰ª¨ÂèØ‰ª•ÊääÂéüÂßãÁöÑÂõæÊï∞ÊçÆÊàñËÄÖÂõæÂ∫ì‰∏≠ÁöÑÊï∞ÊçÆÂÖ®ÈáèÂØºÂá∫‰∏∫Ëøô‰∫õÂΩ¢ÂºèÔºå‰∏çËøáÂú®ÁúüÂÆûÁöÑ‰æãÂ≠ê‰∏≠ÂõæÂ∫ì‰∏≠ÁöÑÊï∞ÊçÆÊòØÂÆûÊó∂ÂèòÂåñÁöÑÔºåËÉΩÂ§üÁõ¥Êé•Âú® NebulaGraph ‰∏≠ÁöÑÂ≠êÂõæ‰∏äÂÅö GNN ËÆ≠ÁªÉ‰∏ÄËà¨Êù•ËØ¥ÊòØÊõ¥ÁêÜÊÉ≥„ÄÇÂæóÁõä‰∫é Nebula-DGL Ëøô‰∏™Â∫ìÔºåÂÅöËøô‰ª∂‰∫ãÂÑøÊòØÂæàËá™ÁÑ∂ÁöÑ„ÄÇ

> Ê≥®ÔºåDGL Â§ñÈÉ®Êï∞ÊçÆÂëòÂØºÂÖ•ÊñáÊ°£Ôºöhttps://docs.dgl.ai/guide/graph-external.html

Áé∞Âú®Êàë‰ª¨ÂºÄÂßãËøô‰∏™Êï∞ÊçÆÁöÑÂØºÂÖ•ÔºåÂú®Ëøô‰πãÂâçÔºåÊàëÂÖà‰ªãÁªç‰∏Ä‰∏ã Nebula-DGL„ÄÇ

Nebula-DGL ÂèØ‰ª•Ê†πÊçÆÁªôÂÆöÁöÑÊò†Â∞ÑÂíåËΩ¨Êç¢ËßÑÂàôÔºàYAML Ê†ºÂºèÔºâÔºåÂ∞Ü NebulaGraph ‰∏≠ÁöÑÈ°∂ÁÇπ„ÄÅËæπÔºåÂíåÂÆÉ‰ª¨ÁöÑÂ±ûÊÄßÊåâÁÖßËßÑÂàôÂ§ÑÁêÜÊàê‰∏∫ÁÇπ„ÄÅËæπ„ÄÅÂíåÂÖ∂‰∏≠ÁöÑÊ†áÊ≥®ÔºàLabelÔºâ‰∏éÁâπÂæÅÔºàFeatureÔºâÔºå‰ªéËÄåÊûÑÈÄ†‰∏∫ DGL ÁöÑÂõæÂØπË±°„ÄÇËøôÂÖ∂‰∏≠ÔºåÂÄºÂæó‰∏ÄÊèêÁöÑÊòØÂ±ûÊÄßÂà∞ÁâπÂæÅÁöÑËΩ¨Êç¢„ÄÇÊàë‰ª¨Áü•ÈÅìÔºåÁâπÂæÅÂèØËÉΩÊòØÊüê‰∏Ä‰∏™Â±ûÊÄßÁöÑÂÄº„ÄÅ‰∏Ä‰∏™ÊàñËÄÖÂ§ö‰∏™Â±ûÊÄßÁöÑÂÄºÂÅö‰∏ÄÂÆöÁöÑÊï∞Â≠¶ÂèòÊç¢„ÄÅ‰∫¶ÊàñÊòØÂ≠óÁ¨¶ÂûãÁöÑÂ±ûÊÄßÊåâÁÖßÊûö‰∏æËßÑÂàôËæìÂá∫‰∏∫Êï∞Â≠ó„ÄÇÁõ∏Â∫îÁöÑÔºåNebula-DGL Âú®ËßÑÂàô‰∏≠ÔºåÊàë‰ª¨ÈÉΩÂèØ‰ª•ÈíàÂØπËøôÂá†ÁßçÊÉÖÂÜµÂà©Áî® `filter` ËøõË°åË°®ËææÔºö

- ÁâπÂæÅÁõ¥Êé•ÈÄâÂèñÂ±ûÊÄßÁöÑÂÄºÔºö

-->
<p>The task of this part is to engineer the topological representation of the risk-related subgraphs of the graph and the related features (attributes) in them, and serialize them into graph objects of the DGL.</p>
<p>DGL itself supports constructing its graph objects from CSV files in the form of point and edge lists (edgelist), or from data in the serialized sparse adjacency matrix of NetworkX and SciPy, and we can export the raw graph data or the full amount of data in the graph library to these forms. However, in the real case the data in the library is changing in real time and it is generally better to do GNN training directly on the subgraphs in NebulaGraph. Thanks to the Nebula-DGL library, this is a natural thing to do.</p>
<blockquote>
<p>Note, the DGL external datamaster import documentation: <a href="https://docs.dgl.ai/guide/graph-external.html" target="_blank" rel="noopener noreferrer">https://docs.dgl.ai/guide/graph-external.html</a></p>
</blockquote>
<p>Now let&rsquo;s start this data import, before that I&rsquo;ll introduce Nebula-DGL.</p>
<p>Nebula-DGL can construct graph objects as DGL by processing vertices, edges, and their properties in NebulaGraph into vertecies, edges, and their labels and features according to the given mapping and transformation rules (YAML format). Among them, it is worth mentioning the property-to-feature conversion.</p>
<p>As we know, a feature can be:</p>
<ul>
<li>The value of a property</li>
<li>The value of one or more properties with certain mathematical transformations</li>
<li>The output of a character property as a number according to enumeration rules</li>
</ul>
<p>Thus, they can be expressed in the Nebula-DGL API using <code>filter</code> for each of these cases, and let&rsquo;s see how this could be done in examples:</p>
<ul>
<li>Featre extracted directly from value of vertex/edge property</li>
</ul>
<p>In this example, the edge type <code>follow</code> will be extracted, where the property <code>degree</code>&rsquo;s value will be treated as a feature directly, and its expression in Nebula-DGL is:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">edge_types</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">follow</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">start_vertex_tag</span><span class="p">:</span><span class="w"> </span><span class="l">player</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">end_vertex_tag</span><span class="p">:</span><span class="w"> </span><span class="l">player</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">features</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">degree</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">degree</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">int</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">nullable</span><span class="p">:</span><span class="w"> </span><span class="kc">False</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">filter</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">value</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>Feature comes from mathematical transformations of properties</li>
</ul>
<p>In this example, we take the two properties in the <code>serve</code> edge and process <code>(end_year - start_year) / 30</code> to become a feature called <code>service_time</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">edge_types</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">serve</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">start_vertex_tag</span><span class="p">:</span><span class="w"> </span><span class="l">player</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">end_vertex_tag</span><span class="p">:</span><span class="w"> </span><span class="l">team</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">features</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">service_time</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">start_year</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">int</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">nullable</span><span class="p">:</span><span class="w"> </span><span class="kc">False</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">end_year</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">int</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">nullable</span><span class="p">:</span><span class="w"> </span><span class="kc">False</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># The variable was mapped by order of properties</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">filter</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">function</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">function</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;lambda start_year, end_year: (end_year - start_year) / 30&#34;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>Enumerated property values into numeric features</li>
</ul>
<p>In this example, we enumerate the <code>name</code> perperty in the <code>team</code> vertex, based on the whether they are east cost or west coast.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">vertex_tags</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">team</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">features</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">coast</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">str</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">nullable</span><span class="p">:</span><span class="w"> </span><span class="kc">False</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">filter</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="c"># 0 stand for the east coast, 1 stand for the west coast</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">enumeration</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">enumeration</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">Celtics</span><span class="p">:</span><span class="w"> </span><span class="m">0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">Nets</span><span class="p">:</span><span class="w"> </span><span class="m">0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">Nuggets</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">Timberwolves</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">Thunder</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># ... not showing all teams here</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Now we could see the trasforming API of Neubla-DGL is quite straightforward, and you could see full examples with details in <a href="https://github.com/wey-gu/nebula-dgl/tree/main/example" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/nebula-dgl/tree/main/example</a>.</p>
<p>With this transforming API being undsood, let&rsquo;s started to process the Yelp dataset:</p>
<p>First, let&rsquo;s define this transforming rule, where, we transform TAG: review and all three EDGE Types, with their properties values directly transforming into features:</p>
<p><code>nebulagraph_yelp_dgl_mapper.yaml</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># If vertex id is string-typed, remap_vertex_id must be true.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">remap_vertex_id</span><span class="p">:</span><span class="w"> </span><span class="kc">True</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">space</span><span class="p">:</span><span class="w"> </span><span class="l">yelp</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># str or int</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">vertex_id_type</span><span class="p">:</span><span class="w"> </span><span class="l">int</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">vertex_tags</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">review</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">label</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">is_fraud</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">is_fraud</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">int</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">nullable</span><span class="p">:</span><span class="w"> </span><span class="kc">False</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">filter</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">value</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">features</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">f0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">f0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">float</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">nullable</span><span class="p">:</span><span class="w"> </span><span class="kc">False</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">filter</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">value</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">f1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">f1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">float</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">nullable</span><span class="p">:</span><span class="w"> </span><span class="kc">False</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">filter</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">value</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># ...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">f31</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">f31</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">float</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">nullable</span><span class="p">:</span><span class="w"> </span><span class="kc">False</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">filter</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">value</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">edge_types</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">shares_user_with</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">start_vertex_tag</span><span class="p">:</span><span class="w"> </span><span class="l">review</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">end_vertex_tag</span><span class="p">:</span><span class="w"> </span><span class="l">review</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">shares_restaurant_rating_with</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">start_vertex_tag</span><span class="p">:</span><span class="w"> </span><span class="l">review</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">end_vertex_tag</span><span class="p">:</span><span class="w"> </span><span class="l">review</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">shares_restaurant_in_one_month_with</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">start_vertex_tag</span><span class="p">:</span><span class="w"> </span><span class="l">review</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">end_vertex_tag</span><span class="p">:</span><span class="w"> </span><span class="l">review</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Then, after nebula-dgl being installed, we could construct a DGL <code>DGLHeteroGraph</code> in these following lines:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">nebula_dgl</span> <span class="kn">import</span> <span class="n">NebulaLoader</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">nebula_config</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;graph_hosts&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                <span class="p">(</span><span class="s1">&#39;graphd&#39;</span><span class="p">,</span> <span class="mi">9669</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                <span class="p">(</span><span class="s1">&#39;graphd1&#39;</span><span class="p">,</span> <span class="mi">9669</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                <span class="p">(</span><span class="s1">&#39;graphd2&#39;</span><span class="p">,</span> <span class="mi">9669</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;nebula_user&#34;</span><span class="p">:</span> <span class="s2">&#34;root&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;nebula_password&#34;</span><span class="p">:</span> <span class="s2">&#34;nebula&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># load feature_mapper from yaml file</span>
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;nebulagraph_yelp_dgl_mapper.yaml&#39;</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">feature_mapper</span> <span class="o">=</span> <span class="n">yaml</span><span class="o">.</span><span class="n">safe_load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">nebula_loader</span> <span class="o">=</span> <span class="n">NebulaLoader</span><span class="p">(</span><span class="n">nebula_config</span><span class="p">,</span> <span class="n">feature_mapper</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span> <span class="o">=</span> <span class="n">nebula_loader</span><span class="o">.</span><span class="n">load</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">g</span> <span class="o">=</span> <span class="n">g</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="s1">&#39;cpu&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">device</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">device</span><span class="p">(</span><span class="s1">&#39;cpu&#39;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h5 id="model-training" class="headerLink">
    <a href="#model-training" class="header-mark"></a>1.5.1.3 Model Training</h5><!--

ËøôÈáåÔºåÊàëÁî® [GraphSAGE](https://cs.stanford.edu/people/jure/pubs/graphsage-nips17.pdf) ÁÆóÊ≥ïÁöÑÁÇπÂàÜÁ±ªÔºàNode ClassificationÔºâÊñπÊ≥ïÊù•‰∏æ‰æãÔºåGraphSAGE ÁöÑÂéüÂßãÁâàÊú¨ÊòØ‰∏Ä‰∏™ÂΩíÁ∫≥Â≠¶‰π†ÔºàInductive LearningÔºâÁöÑÁÆóÊ≥ïÔºåËøôÈáåÔºåÂΩíÁ∫≥Â≠¶‰π†Âå∫Âà´‰∫éÂÆÉÁöÑÂèçÈù¢Ôºö Transductive Learning ÔºåÂèØ‰ª•ÊääÊñ∞ÁöÑÊï∞ÊçÆÁî®Âú®ÂÆåÂÖ®ÊóßÁöÑÂõæ‰πã‰∏ä‰π†ÂæóÁöÑÊ®°ÂûãÔºåËøôÊ†∑ËÆ≠ÁªÉÂá∫Êù•ÁöÑÊ®°ÂûãÂèØ‰ª•ËøõË°åÁ∫ø‰∏äÂ¢ûÈáèÊï∞ÊçÆÁöÑÊ¨∫ËØàÊ£ÄÊµãÔºàËÄå‰∏çÊòØÈúÄË¶ÅÈáçÊñ∞Âä†ËΩΩ‰∏∫ÂÖ®ÂõæËÆ≠ÁªÉÊâçÂèØ‰ª•Ôºâ„ÄÇ

-->
<p>Here, I use the Node Classification method of the <a href="https://cs.stanford.edu/people/jure/pubs/graphsage-nips17.pdf" target="_blank" rel="noopener noreferrer">GraphSAGE</a> algorithm as an example, the original version of GraphSAGE is an Inductive Learning algorithm.</p>
<p>An Inductive Learning algorithm, which is distinguished from its opposite: Transductive Learning, means that new data can be used on top of a completely old graph to acquire a model so that the trained model can be used for online incremental data fraud detection (instead of needing to be reloaded to the full graph for training).</p>
<p><figure><img
        
        loading="lazy"
        src="https://user-images.githubusercontent.com/1651790/182301784-21850dac-0d47-4dd5-b66f-a28b87fe9d4d.svg"
        srcset="https://user-images.githubusercontent.com/1651790/182301784-21850dac-0d47-4dd5-b66f-a28b87fe9d4d.svg, https://user-images.githubusercontent.com/1651790/182301784-21850dac-0d47-4dd5-b66f-a28b87fe9d4d.svg 1.5x, https://user-images.githubusercontent.com/1651790/182301784-21850dac-0d47-4dd5-b66f-a28b87fe9d4d.svg 2x"
        sizes="auto"
        alt="GraphSAGE_FraudDetection"
        title="GraphSAGE_FraudDetection" ></figure></p>
<p>Model training system (left).</p>
<ul>
<li>Input: A historical transaction graph with fraud annotation</li>
<li>Output: A GraphSAGE DGL model</li>
</ul>
<p>Online inference system (right).</p>
<ul>
<li>
<p>Model: GraphSAGE-based training based on historical transaction graphs with fraud annotations</p>
</li>
<li>
<p>Input: A new transaction</p>
</li>
<li>
<p>Output: Whether the transaction is suspected of being fraudulent</p>
</li>
</ul>
<p><strong>Dataset split</strong></p>
<!--

Êú∫Âô®Â≠¶‰π†ËÆ≠ÁªÉÁöÑËøáÁ®ãÈúÄË¶ÅÂú®Â∑≤ÁªèÊúâÁöÑÊï∞ÊçÆ„ÄÅ‰ø°ÊÅØ‰∏≠ÂàÜÂâ≤Âá∫Áî®Êù•ËÆ≠ÁªÉ„ÄÅÈ™åËØÅÂíåÊµãËØïÁöÑÂ≠êÈõÜÔºå‰ªñ‰ª¨ÂèØ‰ª•ÊòØ‰∏çÁõ∏‰∫§ÁöÑÊï¥‰ΩìÊï∞ÊçÆÁöÑÁúüÂ≠êÈõÜ‰πüÂèØ‰ª•ÂΩºÊ≠§ÊúâÈáçÂè†ÔºåÂú®ÂÆûÈôÖÁöÑÊÉÖÂÜµ‰∏≠ÔºåÊúâÊó∂ÂÄôÊàë‰ª¨ÂØπÊï∞ÊçÆÁöÑÊ†áÊ≥®Â∏∏Â∏∏ÊòØ‰∏çÂÖÖÂàÜÁöÑÔºåÊâÄ‰ª•ÊåâÁÖßÊ†áÊ≥®ÁöÑÊØî‰æãÂéªÂàÜÂâ≤Êï∞ÊçÆÂèØËÉΩÊõ¥ÊúâÊÑè‰πâ‰∏Ä‰∫õÔºå‰∏ãËæπÁöÑ‰æãÂ≠êÊòØÊàëÊåâÁÖßÁÇπ‰∏äÊòØÂê¶Ê†áÊ≥®Ê¨∫ËØà‰∏∫Ê†áÂáÜÂéªÂàÜÂâ≤Êï∞ÊçÆÈõÜ„ÄÇ

ËøôÈáåËæπÊúâ‰∏§‰∏™Âú∞ÊñπÂÄºÂæóÊ≥®ÊÑèÔºö

1. `train_test_split` ‰∏≠ÁöÑ `stratify=g.ndata['is_fraud']` ‰ª£Ë°®‰øùÊåÅ `is_fraud` ÁöÑÂÄºÁöÑÂàÜÂ∏ÉÂéªÂàÜÂâ≤ÔºåÁ¨¶ÂêàÊàë‰ª¨ÂâçËæπÊèêÂà∞ÁöÑÊÄùÊÉ≥„ÄÇ
2. Êàë‰ª¨ÂàÜÂâ≤ÁöÑÊòØ `idx` Á¥¢ÂºïÔºåËøôÊ†∑ÔºåÂèØ‰ª•ÊúÄÁªàËé∑Âæó‰∏â‰∏™ÈõÜÂêàÁöÑÁ¥¢ÂºïÔºå‰æõËÆ≠ÁªÉ„ÄÅÈ™åËØÅÂíåÊµãËØïÊó∂ÂÄô‰ΩøÁî®„ÄÇÂêåÊó∂Êàë‰ª¨ËøòÊääÂØπÂ∫îÈõÜÂêà mask ÊîæÂà∞ÂõæÂØπË±° `g` ÈáåËæπÂéª‰∫Ü„ÄÇ

-->
<p>The process of machine learning training requires partitioning the already available data, information for training, validation and testing subsets, they can be either disjoint true subsets of the overall data or overlap each other.</p>
<p>In practice, sometimes our labeling of data is often inadequate, so it may make more sense to partition the data according to the proportion of labeling, the following example I segmented the dataset according to whether the vertices are labeled with fraud or not.</p>
<p>There are two points worth noting here.</p>
<ol>
<li><code>stratify=g.ndata['is_fraud']</code> in <code>train_test_split</code> represents to keep the distribution of the values of <code>is_fraud</code> to split, which is in line with the idea we mentioned above.</li>
<li>we split the <code>idx</code> index, so that we can end up with three sets of indexes for training, validation and testing. At the same time, we also put the corresponding set of masks into the graph object <code>g</code>.</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># Split the graph into train, validation, and test sets</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">train_test_split</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># features are g.ndata[&#39;f0&#39;], g.ndata[&#39;f1&#39;], g.ndata[&#39;f2&#39;], ... g.ndata[&#39;f31&#39;]</span>
</span></span><span class="line"><span class="cl"><span class="c1"># label is in g.ndata[&#39;is_fraud&#39;]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># concatenate all features</span>
</span></span><span class="line"><span class="cl"><span class="n">features</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">32</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">features</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;f&#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;feat&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">stack</span><span class="p">(</span><span class="n">features</span><span class="p">,</span> <span class="n">dim</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;label&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">g</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;is_fraud&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="c1"># numpy array as an index of range n</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">idx</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">tensor</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">number_of_nodes</span><span class="p">()),</span> <span class="n">device</span><span class="o">=</span><span class="n">device</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">int64</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># split based on value distribution of label: the property &#34;is_fraud&#34;, which is a binary variable.</span>
</span></span><span class="line"><span class="cl"><span class="n">X_train_and_val_idx</span><span class="p">,</span> <span class="n">X_test_idx</span><span class="p">,</span> <span class="n">y_train_and_val</span><span class="p">,</span> <span class="n">y_test</span> <span class="o">=</span> <span class="n">train_test_split</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">idx</span><span class="p">,</span> <span class="n">g</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;is_fraud&#39;</span><span class="p">],</span> <span class="n">test_size</span><span class="o">=</span><span class="mf">0.2</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">,</span> <span class="n">stratify</span><span class="o">=</span><span class="n">g</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;is_fraud&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># split train and val</span>
</span></span><span class="line"><span class="cl"><span class="n">X_train_idx</span><span class="p">,</span> <span class="n">X_val_idx</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">y_val</span> <span class="o">=</span> <span class="n">train_test_split</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">X_train_and_val_idx</span><span class="p">,</span> <span class="n">y_train_and_val</span><span class="p">,</span> <span class="n">test_size</span><span class="o">=</span><span class="mf">0.2</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">,</span> <span class="n">stratify</span><span class="o">=</span><span class="n">y_train_and_val</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># list of index to mask</span>
</span></span><span class="line"><span class="cl"><span class="n">train_mask</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">number_of_nodes</span><span class="p">(),</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">bool</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">train_mask</span><span class="p">[</span><span class="n">X_train_idx</span><span class="p">]</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">val_mask</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">number_of_nodes</span><span class="p">(),</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">bool</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">val_mask</span><span class="p">[</span><span class="n">X_val_idx</span><span class="p">]</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">test_mask</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">number_of_nodes</span><span class="p">(),</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">bool</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">test_mask</span><span class="p">[</span><span class="n">X_test_idx</span><span class="p">]</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;train_mask&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">train_mask</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;val_mask&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">val_mask</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;test_mask&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">test_mask</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Heterogeneous graph to Homogeneous graph</strong></p>
<!--

GraphSAGE ÊòØÈíàÂØπÂêåÊûÑÂõæÔºå‰∏îËæπÊó† feature ÁöÑÁÆóÊ≥ïÔºåËÄåÊàë‰ª¨ÂΩì‰∏ãÁöÑ Yelp ÂõæË∞±ÊòØÂºÇÊûÑÁöÑÔºö‰∏ÄÁ±ªÁÇπ„ÄÅ‰∏âÁ±ªËæπ„ÄÇÈÇ£‰πàÔºåÂ¶Ç‰ΩïÊâçËÉΩÁî® GraphSAGE ÂéªÂª∫Ê®° Yelp ÂõæË∞±Âë¢Ôºü

Êàë‰ª¨Èô§‰∫ÜÈÄâÊã©Áî®ÈíàÂØπÂºÇÊûÑÂõæÁöÑ Inductive Learning ÊñπÊ≥ï‰πãÂ§ñÔºåËøòÂèØÊÉ≥ÂäûÊ≥ïÊääÂêåÊûÑÂõæËΩ¨Êç¢ÊàêÂºÇÊûÑÂõæ„ÄÇ‰∏∫‰∫ÜÂú®ËΩ¨Êç¢‰∏≠‰∏ç‰∏¢Â§±ÈáçË¶ÅÁöÑËæπÁ±ªÂûã‰ø°ÊÅØÔºåÊàë‰ª¨ÂèØ‰ª•ÊääËæπÁ±ªÂûãÂèòÊàêÊï∞ÂÄº„ÄÇ

ËøôÈáåÊàëÁªô‰∫Ü‰∏ÄÁª¥ÁöÑ edge featureÔºåÂΩìÁÑ∂Ôºà3-1Ôºâ‰∫åÁª¥‰πüÊòØÂèØ‰ª•ÁöÑ„ÄÇ

-->
<p>GraphSAGE is an algorithm for Homogeneous graphs with no feature on edges, while our current Yelp graph is Heterogeneous: one type of vertex(TAG) and three types of edges. So, how can we use GraphSAGE to model Yelp graphs?</p>
<p>Instead of finding another Inductive Learning to supports heterogeneous graphs, I actually find a way to convert homogeneous graph into a heterogeneous one. In order not to lose important edge type information in the conversion, we can make the edge type numeric.</p>
<p>Here I have given a one-dimensional edge feature, but of course (3-1) two-dimensional is also possible.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># shares_restaurant_in_one_month_with: 1, b&#34;001&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># shares_restaurant_rating_with: 2, b&#34;010&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># shares_user_with: 4, b&#34;100&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>Note: we could directly parse 3-type of edges mapped to [0, 1, 2] from <code>hg.edata['_TYPE']</code>, referring to   <a href="https://docs.dgl.ai/en/0.9.x/generated/dgl.to_homogeneous.html" target="_blank" rel="noopener noreferrer">https://docs.dgl.ai/en/0.9.x/generated/dgl.to_homogeneous.html</a>, while I chose not to do so due to 0 cannot be appied to edge weight(it will end up 0 value in message passsing for this 0 type).</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># three types of edges</span>
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="n">g</span><span class="o">.</span><span class="n">etypes</span>
</span></span><span class="line"><span class="cl"><span class="n">Out</span><span class="p">[</span><span class="mi">1</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="s1">&#39;shares_restaurant_in_one_month_with&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"> <span class="s1">&#39;shares_restaurant_rating_with&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"> <span class="s1">&#39;shares_user_with&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">2</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">edges</span><span class="p">[</span><span class="s1">&#39;shares_restaurant_in_one_month_with&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="s1">&#39;he&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">ones</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">g</span><span class="o">.</span><span class="n">number_of_edges</span><span class="p">(</span><span class="s1">&#39;shares_restaurant_in_one_month_with&#39;</span><span class="p">),</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">int64</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">edges</span><span class="p">[</span><span class="s1">&#39;shares_restaurant_rating_with&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="s1">&#39;he&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">full</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">number_of_edges</span><span class="p">(</span><span class="s1">&#39;shares_restaurant_rating_with&#39;</span><span class="p">),),</span> <span class="mi">2</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">int64</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">edges</span><span class="p">[</span><span class="s1">&#39;shares_user_with&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="s1">&#39;he&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">full</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">number_of_edges</span><span class="p">(</span><span class="s1">&#39;shares_user_with&#39;</span><span class="p">),),</span> <span class="mi">4</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">int64</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">3</span><span class="p">]:</span> <span class="n">g</span><span class="o">.</span><span class="n">edata</span><span class="p">[</span><span class="s1">&#39;he&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">Out</span><span class="p">[</span><span class="mi">3</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl"><span class="p">{(</span><span class="s1">&#39;review&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;shares_restaurant_in_one_month_with&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;review&#39;</span><span class="p">):</span> <span class="n">tensor</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span>  <span class="o">...</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]),</span>
</span></span><span class="line"><span class="cl"> <span class="p">(</span><span class="s1">&#39;review&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;shares_restaurant_rating_with&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;review&#39;</span><span class="p">):</span> <span class="n">tensor</span><span class="p">([</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span>  <span class="o">...</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">]),</span>
</span></span><span class="line"><span class="cl"> <span class="p">(</span><span class="s1">&#39;review&#39;</span><span class="p">,</span> <span class="s1">&#39;shares_user_with&#39;</span><span class="p">,</span> <span class="s1">&#39;review&#39;</span><span class="p">):</span> <span class="n">tensor</span><span class="p">([</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span>  <span class="o">...</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">])}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>ref: <a href="https://discuss.dgl.ai/t/how-to-convert-from-a-heterogeneous-graph-to-a-homogeneous-graph-with-data/2764" target="_blank" rel="noopener noreferrer">https://discuss.dgl.ai/t/how-to-convert-from-a-heterogeneous-graph-to-a-homogeneous-graph-with-data/2764</a></p>
</blockquote>
<p>Then transform it to a homogeneous graph, with <code>he</code> as kept edata</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">hg</span> <span class="o">=</span> <span class="n">dgl</span><span class="o">.</span><span class="n">to_homogeneous</span><span class="p">(</span><span class="n">g</span><span class="p">,</span> <span class="n">edata</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;he&#39;</span><span class="p">],</span> <span class="n">ndata</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;feat&#39;</span><span class="p">,</span> <span class="s1">&#39;label&#39;</span><span class="p">,</span> <span class="s1">&#39;train_mask&#39;</span><span class="p">,</span> <span class="s1">&#39;val_mask&#39;</span><span class="p">,</span> <span class="s1">&#39;test_mask&#39;</span><span class="p">])</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>ref: <a href="https://docs.dgl.ai/en/latest/guide/graph-heterogeneous.html?highlight=to_homogeneous#converting-heterogeneous-graphs-to-homogeneous-graphs" target="_blank" rel="noopener noreferrer">https://docs.dgl.ai/en/latest/guide/graph-heterogeneous.html?highlight=to_homogeneous#converting-heterogeneous-graphs-to-homogeneous-graphs</a></p>
</blockquote>
<p>The vanilla GraphSAGE implementation in dgl doesn&rsquo;t consider edge feature, thus I override/changed that message passing part of code, which will be revealed later.</p>
<blockquote>
<p>Ref</p>
<ul>
<li><a href="https://discuss.dgl.ai/t/frequently-asked-questions-faq/1681" target="_blank" rel="noopener noreferrer">https://discuss.dgl.ai/t/frequently-asked-questions-faq/1681</a> ÔºàQuestion 13Ôºâ</li>
<li><a href="https://discuss.dgl.ai/t/using-node-and-edge-features-in-message-passing/762" target="_blank" rel="noopener noreferrer">https://discuss.dgl.ai/t/using-node-and-edge-features-in-message-passing/762</a></li>
</ul>
</blockquote>
<p><strong>Code of model training</strong></p>
<p>We could refer to the dgl example of graphsage: <a href="https://github.com/dmlc/dgl/tree/master/examples/pytorch/graphsage" target="_blank" rel="noopener noreferrer">https://github.com/dmlc/dgl/tree/master/examples/pytorch/graphsage</a>.</p>
<p>As our graph comes with edge feature(due to the conversion), we could modify GraphSAGE in two ways:</p>
<p>a. Considering edge features, for example, if mean aggreation is used, change could be:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl">  graph.update_all(msg_fn, fn.mean(&#39;m&#39;, &#39;neigh&#39;))
</span></span><span class="line"><span class="cl"><span class="gi">+ graph.update_all(fn.copy_e(&#39;he&#39;, &#39;m&#39;), fn.mean(&#39;m&#39;, &#39;neigh&#39;))
</span></span></span><span class="line"><span class="cl"><span class="gi"></span><span class="gd">- h_neigh = graph.dstdata[&#39;neigh&#39;]
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+ h_neigh = torch.cat((graph.dstdata[&#39;neigh&#39;], graph.dstdata[&#39;neigh_e&#39;].reshape(-1, 1)), 1)
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Note that, apart from the above change, the feature dimension should be taken care, too.</p>
<p>b. Treate edge feature as edge weight:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl"><span class="gd">- graph.update_all(msg_fn, fn.mean(&#39;m&#39;, &#39;neigh&#39;))
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+ # consdier datatype with different weight, g.edata[&#39;he&#39;] as weight here
</span></span></span><span class="line"><span class="cl"><span class="gi">+ g.update_all(fn.u_mul_e(&#39;h&#39;, &#39;he&#39;, &#39;m&#39;), fn.mean(&#39;m&#39;, &#39;h&#39;))
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Here, I&rsquo;ll do it in b. as weight, with mean aggration:</p>
<p>Override the <code>SAGEConv</code>Ôºö</p>
<blockquote>
<p>With only the Message Passing part changed.</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">dgl</span> <span class="kn">import</span> <span class="n">function</span> <span class="k">as</span> <span class="n">fn</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">dgl.utils</span> <span class="kn">import</span> <span class="n">check_eq_shape</span><span class="p">,</span> <span class="n">expand_as_pair</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">SAGEConv</span><span class="p">(</span><span class="n">dglnn</span><span class="o">.</span><span class="n">SAGEConv</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">graph</span><span class="p">,</span> <span class="n">feat</span><span class="p">,</span> <span class="n">edge_weight</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="sa">r</span><span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">        Description
</span></span></span><span class="line"><span class="cl"><span class="s2">        -----------
</span></span></span><span class="line"><span class="cl"><span class="s2">        Compute GraphSAGE layer.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">        Parameters
</span></span></span><span class="line"><span class="cl"><span class="s2">        ----------
</span></span></span><span class="line"><span class="cl"><span class="s2">        graph : DGLGraph
</span></span></span><span class="line"><span class="cl"><span class="s2">            The graph.
</span></span></span><span class="line"><span class="cl"><span class="s2">        feat : torch.Tensor or pair of torch.Tensor
</span></span></span><span class="line"><span class="cl"><span class="s2">            If a torch.Tensor is given, it represents the input feature of shape
</span></span></span><span class="line"><span class="cl"><span class="s2">            :math:`(N, D_</span><span class="si">{in}</span><span class="s2">)`
</span></span></span><span class="line"><span class="cl"><span class="s2">            where :math:`D_</span><span class="si">{in}</span><span class="s2">` is size of input feature, :math:`N` is the number of nodes.
</span></span></span><span class="line"><span class="cl"><span class="s2">            If a pair of torch.Tensor is given, the pair must contain two tensors of shape
</span></span></span><span class="line"><span class="cl"><span class="s2">            :math:`(N_</span><span class="si">{in}</span><span class="s2">, D_{in_</span><span class="si">{src}</span><span class="s2">})` and :math:`(N_</span><span class="si">{out}</span><span class="s2">, D_{in_</span><span class="si">{dst}</span><span class="s2">})`.
</span></span></span><span class="line"><span class="cl"><span class="s2">        edge_weight : torch.Tensor, optional
</span></span></span><span class="line"><span class="cl"><span class="s2">            Optional tensor on the edge. If given, the convolution will weight
</span></span></span><span class="line"><span class="cl"><span class="s2">            with regard to the message.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">        Returns
</span></span></span><span class="line"><span class="cl"><span class="s2">        -------
</span></span></span><span class="line"><span class="cl"><span class="s2">        torch.Tensor
</span></span></span><span class="line"><span class="cl"><span class="s2">            The output feature of shape :math:`(N_</span><span class="si">{dst}</span><span class="s2">, D_</span><span class="si">{out}</span><span class="s2">)`
</span></span></span><span class="line"><span class="cl"><span class="s2">            where :math:`N_</span><span class="si">{dst}</span><span class="s2">` is the number of destination nodes in the input graph,
</span></span></span><span class="line"><span class="cl"><span class="s2">            :math:`D_</span><span class="si">{out}</span><span class="s2">` is the size of the output feature.
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">_compatibility_check</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="k">with</span> <span class="n">graph</span><span class="o">.</span><span class="n">local_scope</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">feat</span><span class="p">,</span> <span class="nb">tuple</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">                <span class="n">feat_src</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">feat_drop</span><span class="p">(</span><span class="n">feat</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">                <span class="n">feat_dst</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">feat_drop</span><span class="p">(</span><span class="n">feat</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">feat_src</span> <span class="o">=</span> <span class="n">feat_dst</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">feat_drop</span><span class="p">(</span><span class="n">feat</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="n">graph</span><span class="o">.</span><span class="n">is_block</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="n">feat_dst</span> <span class="o">=</span> <span class="n">feat_src</span><span class="p">[:</span><span class="n">graph</span><span class="o">.</span><span class="n">number_of_dst_nodes</span><span class="p">()]</span>
</span></span><span class="line"><span class="cl">            <span class="n">msg_fn</span> <span class="o">=</span> <span class="n">fn</span><span class="o">.</span><span class="n">copy_src</span><span class="p">(</span><span class="s1">&#39;h&#39;</span><span class="p">,</span> <span class="s1">&#39;m&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">edge_weight</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">assert</span> <span class="n">edge_weight</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">graph</span><span class="o">.</span><span class="n">number_of_edges</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                <span class="n">graph</span><span class="o">.</span><span class="n">edata</span><span class="p">[</span><span class="s1">&#39;_edge_weight&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">edge_weight</span>
</span></span><span class="line"><span class="cl">                <span class="n">msg_fn</span> <span class="o">=</span> <span class="n">fn</span><span class="o">.</span><span class="n">u_mul_e</span><span class="p">(</span><span class="s1">&#39;h&#39;</span><span class="p">,</span> <span class="s1">&#39;_edge_weight&#39;</span><span class="p">,</span> <span class="s1">&#39;m&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="n">h_self</span> <span class="o">=</span> <span class="n">feat_dst</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1"># Handle the case of graphs without edges</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">graph</span><span class="o">.</span><span class="n">number_of_edges</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">graph</span><span class="o">.</span><span class="n">dstdata</span><span class="p">[</span><span class="s1">&#39;neigh&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                    <span class="n">feat_dst</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="bp">self</span><span class="o">.</span><span class="n">_in_src_feats</span><span class="p">)</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">feat_dst</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1"># Determine whether to apply linear transformation before message passing A(XW)</span>
</span></span><span class="line"><span class="cl">            <span class="n">lin_before_mp</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_in_src_feats</span> <span class="o">&gt;</span> <span class="bp">self</span><span class="o">.</span><span class="n">_out_feats</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1"># Message Passing</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">_aggre_type</span> <span class="o">==</span> <span class="s1">&#39;mean&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">graph</span><span class="o">.</span><span class="n">srcdata</span><span class="p">[</span><span class="s1">&#39;h&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">fc_neigh</span><span class="p">(</span><span class="n">feat_src</span><span class="p">)</span> <span class="k">if</span> <span class="n">lin_before_mp</span> <span class="k">else</span> <span class="n">feat_src</span>
</span></span><span class="line"><span class="cl">                <span class="c1"># graph.update_all(msg_fn, fn.mean(&#39;m&#39;, &#39;neigh&#39;))</span>
</span></span><span class="line"><span class="cl">                <span class="c1">#########################################################################</span>
</span></span><span class="line"><span class="cl">                <span class="c1"># consdier datatype with different weight, g.edata[&#39;he&#39;] as weight here</span>
</span></span><span class="line"><span class="cl">                <span class="n">g</span><span class="o">.</span><span class="n">update_all</span><span class="p">(</span><span class="n">fn</span><span class="o">.</span><span class="n">u_mul_e</span><span class="p">(</span><span class="s1">&#39;h&#39;</span><span class="p">,</span> <span class="s1">&#39;he&#39;</span><span class="p">,</span> <span class="s1">&#39;m&#39;</span><span class="p">),</span> <span class="n">fn</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="s1">&#39;m&#39;</span><span class="p">,</span> <span class="s1">&#39;h&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                <span class="c1">#########################################################################</span>
</span></span><span class="line"><span class="cl">                <span class="n">h_neigh</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">dstdata</span><span class="p">[</span><span class="s1">&#39;neigh&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="ow">not</span> <span class="n">lin_before_mp</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="n">h_neigh</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">fc_neigh</span><span class="p">(</span><span class="n">h_neigh</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">_aggre_type</span> <span class="o">==</span> <span class="s1">&#39;gcn&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">check_eq_shape</span><span class="p">(</span><span class="n">feat</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">graph</span><span class="o">.</span><span class="n">srcdata</span><span class="p">[</span><span class="s1">&#39;h&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">fc_neigh</span><span class="p">(</span><span class="n">feat_src</span><span class="p">)</span> <span class="k">if</span> <span class="n">lin_before_mp</span> <span class="k">else</span> <span class="n">feat_src</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">feat</span><span class="p">,</span> <span class="nb">tuple</span><span class="p">):</span>  <span class="c1"># heterogeneous</span>
</span></span><span class="line"><span class="cl">                    <span class="n">graph</span><span class="o">.</span><span class="n">dstdata</span><span class="p">[</span><span class="s1">&#39;h&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">fc_neigh</span><span class="p">(</span><span class="n">feat_dst</span><span class="p">)</span> <span class="k">if</span> <span class="n">lin_before_mp</span> <span class="k">else</span> <span class="n">feat_dst</span>
</span></span><span class="line"><span class="cl">                <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="k">if</span> <span class="n">graph</span><span class="o">.</span><span class="n">is_block</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                        <span class="n">graph</span><span class="o">.</span><span class="n">dstdata</span><span class="p">[</span><span class="s1">&#39;h&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">srcdata</span><span class="p">[</span><span class="s1">&#39;h&#39;</span><span class="p">][:</span><span class="n">graph</span><span class="o">.</span><span class="n">num_dst_nodes</span><span class="p">()]</span>
</span></span><span class="line"><span class="cl">                    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                        <span class="n">graph</span><span class="o">.</span><span class="n">dstdata</span><span class="p">[</span><span class="s1">&#39;h&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">srcdata</span><span class="p">[</span><span class="s1">&#39;h&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">                <span class="n">graph</span><span class="o">.</span><span class="n">update_all</span><span class="p">(</span><span class="n">msg_fn</span><span class="p">,</span> <span class="n">fn</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="s1">&#39;m&#39;</span><span class="p">,</span> <span class="s1">&#39;neigh&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                <span class="n">graph</span><span class="o">.</span><span class="n">update_all</span><span class="p">(</span><span class="n">fn</span><span class="o">.</span><span class="n">copy_e</span><span class="p">(</span><span class="s1">&#39;he&#39;</span><span class="p">,</span> <span class="s1">&#39;m&#39;</span><span class="p">),</span> <span class="n">fn</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="s1">&#39;m&#39;</span><span class="p">,</span> <span class="s1">&#39;neigh&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                <span class="c1"># divide in_degrees</span>
</span></span><span class="line"><span class="cl">                <span class="n">degs</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">in_degrees</span><span class="p">()</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">feat_dst</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">h_neigh</span> <span class="o">=</span> <span class="p">(</span><span class="n">graph</span><span class="o">.</span><span class="n">dstdata</span><span class="p">[</span><span class="s1">&#39;neigh&#39;</span><span class="p">]</span> <span class="o">+</span> <span class="n">graph</span><span class="o">.</span><span class="n">dstdata</span><span class="p">[</span><span class="s1">&#39;h&#39;</span><span class="p">])</span> <span class="o">/</span> <span class="p">(</span><span class="n">degs</span><span class="o">.</span><span class="n">unsqueeze</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="ow">not</span> <span class="n">lin_before_mp</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="n">h_neigh</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">fc_neigh</span><span class="p">(</span><span class="n">h_neigh</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">_aggre_type</span> <span class="o">==</span> <span class="s1">&#39;pool&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">graph</span><span class="o">.</span><span class="n">srcdata</span><span class="p">[</span><span class="s1">&#39;h&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">F</span><span class="o">.</span><span class="n">relu</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">fc_pool</span><span class="p">(</span><span class="n">feat_src</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                <span class="n">graph</span><span class="o">.</span><span class="n">update_all</span><span class="p">(</span><span class="n">msg_fn</span><span class="p">,</span> <span class="n">fn</span><span class="o">.</span><span class="n">max</span><span class="p">(</span><span class="s1">&#39;m&#39;</span><span class="p">,</span> <span class="s1">&#39;neigh&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                <span class="n">graph</span><span class="o">.</span><span class="n">update_all</span><span class="p">(</span><span class="n">fn</span><span class="o">.</span><span class="n">copy_e</span><span class="p">(</span><span class="s1">&#39;he&#39;</span><span class="p">,</span> <span class="s1">&#39;m&#39;</span><span class="p">),</span> <span class="n">fn</span><span class="o">.</span><span class="n">max</span><span class="p">(</span><span class="s1">&#39;m&#39;</span><span class="p">,</span> <span class="s1">&#39;neigh&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                <span class="n">h_neigh</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">fc_neigh</span><span class="p">(</span><span class="n">graph</span><span class="o">.</span><span class="n">dstdata</span><span class="p">[</span><span class="s1">&#39;neigh&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">            <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">_aggre_type</span> <span class="o">==</span> <span class="s1">&#39;lstm&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">graph</span><span class="o">.</span><span class="n">srcdata</span><span class="p">[</span><span class="s1">&#39;h&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">feat_src</span>
</span></span><span class="line"><span class="cl">                <span class="n">graph</span><span class="o">.</span><span class="n">update_all</span><span class="p">(</span><span class="n">msg_fn</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">_lstm_reducer</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">h_neigh</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">fc_neigh</span><span class="p">(</span><span class="n">graph</span><span class="o">.</span><span class="n">dstdata</span><span class="p">[</span><span class="s1">&#39;neigh&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">raise</span> <span class="ne">KeyError</span><span class="p">(</span><span class="s1">&#39;Aggregator type </span><span class="si">{}</span><span class="s1"> not recognized.&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_aggre_type</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1"># GraphSAGE GCN does not require fc_self.</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">_aggre_type</span> <span class="o">==</span> <span class="s1">&#39;gcn&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">rst</span> <span class="o">=</span> <span class="n">h_neigh</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">rst</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">fc_self</span><span class="p">(</span><span class="n">h_self</span><span class="p">)</span> <span class="o">+</span> <span class="n">h_neigh</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1"># bias term</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">bias</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">rst</span> <span class="o">=</span> <span class="n">rst</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">bias</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1"># activation</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">activation</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">rst</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">activation</span><span class="p">(</span><span class="n">rst</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># normalization</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">norm</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">rst</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">norm</span><span class="p">(</span><span class="n">rst</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">rst</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Define the model structure</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">SAGE</span><span class="p">(</span><span class="n">nn</span><span class="o">.</span><span class="n">Module</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">in_size</span><span class="p">,</span> <span class="n">hid_size</span><span class="p">,</span> <span class="n">out_size</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="fm">__init__</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">layers</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">ModuleList</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># three-layer GraphSAGE-mean</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">layers</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">dglnn</span><span class="o">.</span><span class="n">SAGEConv</span><span class="p">(</span><span class="n">in_size</span><span class="p">,</span> <span class="n">hid_size</span><span class="p">,</span> <span class="s1">&#39;mean&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">layers</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">dglnn</span><span class="o">.</span><span class="n">SAGEConv</span><span class="p">(</span><span class="n">hid_size</span><span class="p">,</span> <span class="n">hid_size</span><span class="p">,</span> <span class="s1">&#39;mean&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">layers</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">dglnn</span><span class="o">.</span><span class="n">SAGEConv</span><span class="p">(</span><span class="n">hid_size</span><span class="p">,</span> <span class="n">out_size</span><span class="p">,</span> <span class="s1">&#39;mean&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">dropout</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">Dropout</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">hid_size</span> <span class="o">=</span> <span class="n">hid_size</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">out_size</span> <span class="o">=</span> <span class="n">out_size</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">blocks</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">h</span> <span class="o">=</span> <span class="n">x</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">l</span><span class="p">,</span> <span class="p">(</span><span class="n">layer</span><span class="p">,</span> <span class="n">block</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">layers</span><span class="p">,</span> <span class="n">blocks</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">            <span class="n">h</span> <span class="o">=</span> <span class="n">layer</span><span class="p">(</span><span class="n">block</span><span class="p">,</span> <span class="n">h</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">l</span> <span class="o">!=</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">layers</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">h</span> <span class="o">=</span> <span class="n">F</span><span class="o">.</span><span class="n">relu</span><span class="p">(</span><span class="n">h</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">h</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">dropout</span><span class="p">(</span><span class="n">h</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">h</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">inference</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">g</span><span class="p">,</span> <span class="n">device</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;Conduct layer-wise inference to get all the node embeddings.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="n">feat</span> <span class="o">=</span> <span class="n">g</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;feat&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">sampler</span> <span class="o">=</span> <span class="n">MultiLayerFullNeighborSampler</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">prefetch_node_feats</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;feat&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">        <span class="n">dataloader</span> <span class="o">=</span> <span class="n">DataLoader</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="n">g</span><span class="p">,</span> <span class="n">torch</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">num_nodes</span><span class="p">())</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">device</span><span class="p">),</span> <span class="n">sampler</span><span class="p">,</span> <span class="n">device</span><span class="o">=</span><span class="n">device</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="n">batch_size</span><span class="o">=</span><span class="n">batch_size</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span> <span class="n">drop_last</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="n">num_workers</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">buffer_device</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">device</span><span class="p">(</span><span class="s1">&#39;cpu&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">pin_memory</span> <span class="o">=</span> <span class="p">(</span><span class="n">buffer_device</span> <span class="o">!=</span> <span class="n">device</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">l</span><span class="p">,</span> <span class="n">layer</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">layers</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">y</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">empty</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="n">g</span><span class="o">.</span><span class="n">num_nodes</span><span class="p">(),</span> <span class="bp">self</span><span class="o">.</span><span class="n">hid_size</span> <span class="k">if</span> <span class="n">l</span> <span class="o">!=</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">layers</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span> <span class="k">else</span> <span class="bp">self</span><span class="o">.</span><span class="n">out_size</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="n">device</span><span class="o">=</span><span class="n">buffer_device</span><span class="p">,</span> <span class="n">pin_memory</span><span class="o">=</span><span class="n">pin_memory</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">feat</span> <span class="o">=</span> <span class="n">feat</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">input_nodes</span><span class="p">,</span> <span class="n">output_nodes</span><span class="p">,</span> <span class="n">blocks</span> <span class="ow">in</span> <span class="n">tqdm</span><span class="o">.</span><span class="n">tqdm</span><span class="p">(</span><span class="n">dataloader</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">                <span class="n">x</span> <span class="o">=</span> <span class="n">feat</span><span class="p">[</span><span class="n">input_nodes</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">                <span class="n">h</span> <span class="o">=</span> <span class="n">layer</span><span class="p">(</span><span class="n">blocks</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">x</span><span class="p">)</span> <span class="c1"># len(blocks) = 1</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="n">l</span> <span class="o">!=</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">layers</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="n">h</span> <span class="o">=</span> <span class="n">F</span><span class="o">.</span><span class="n">relu</span><span class="p">(</span><span class="n">h</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="n">h</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">dropout</span><span class="p">(</span><span class="n">h</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="c1"># by design, our output nodes are contiguous</span>
</span></span><span class="line"><span class="cl">                <span class="n">y</span><span class="p">[</span><span class="n">output_nodes</span><span class="p">[</span><span class="mi">0</span><span class="p">]:</span><span class="n">output_nodes</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">h</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">buffer_device</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">feat</span> <span class="o">=</span> <span class="n">y</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">y</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>The train, infer function:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">evaluate</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">graph</span><span class="p">,</span> <span class="n">dataloader</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">model</span><span class="o">.</span><span class="n">eval</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">ys</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="n">y_hats</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">it</span><span class="p">,</span> <span class="p">(</span><span class="n">input_nodes</span><span class="p">,</span> <span class="n">output_nodes</span><span class="p">,</span> <span class="n">blocks</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">dataloader</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">with</span> <span class="n">torch</span><span class="o">.</span><span class="n">no_grad</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">            <span class="n">x</span> <span class="o">=</span> <span class="n">blocks</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">srcdata</span><span class="p">[</span><span class="s1">&#39;feat&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="n">ys</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">blocks</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">dstdata</span><span class="p">[</span><span class="s1">&#39;label&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">            <span class="n">y_hats</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">model</span><span class="p">(</span><span class="n">blocks</span><span class="p">,</span> <span class="n">x</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">MF</span><span class="o">.</span><span class="n">accuracy</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">cat</span><span class="p">(</span><span class="n">y_hats</span><span class="p">),</span> <span class="n">torch</span><span class="o">.</span><span class="n">cat</span><span class="p">(</span><span class="n">ys</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">layerwise_infer</span><span class="p">(</span><span class="n">device</span><span class="p">,</span> <span class="n">graph</span><span class="p">,</span> <span class="n">nid</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">model</span><span class="o">.</span><span class="n">eval</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="n">torch</span><span class="o">.</span><span class="n">no_grad</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="n">pred</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">inference</span><span class="p">(</span><span class="n">graph</span><span class="p">,</span> <span class="n">device</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">)</span> <span class="c1"># pred in buffer_device</span>
</span></span><span class="line"><span class="cl">        <span class="n">pred</span> <span class="o">=</span> <span class="n">pred</span><span class="p">[</span><span class="n">nid</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">label</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;label&#39;</span><span class="p">][</span><span class="n">nid</span><span class="p">]</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">pred</span><span class="o">.</span><span class="n">device</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">MF</span><span class="o">.</span><span class="n">accuracy</span><span class="p">(</span><span class="n">pred</span><span class="p">,</span> <span class="n">label</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">train</span><span class="p">(</span><span class="n">device</span><span class="p">,</span> <span class="n">g</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">train_idx</span><span class="p">,</span> <span class="n">val_idx</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># create sampler &amp; dataloader</span>
</span></span><span class="line"><span class="cl">    <span class="n">sampler</span> <span class="o">=</span> <span class="n">NeighborSampler</span><span class="p">([</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">],</span>  <span class="c1"># fanout for [layer-0, layer-1, layer-2]</span>
</span></span><span class="line"><span class="cl">                              <span class="n">prefetch_node_feats</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;feat&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">                              <span class="n">prefetch_labels</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;label&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="n">use_uva</span> <span class="o">=</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl">    <span class="n">train_dataloader</span> <span class="o">=</span> <span class="n">DataLoader</span><span class="p">(</span><span class="n">g</span><span class="p">,</span> <span class="n">train_idx</span><span class="p">,</span> <span class="n">sampler</span><span class="p">,</span> <span class="n">device</span><span class="o">=</span><span class="n">device</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                  <span class="n">batch_size</span><span class="o">=</span><span class="mi">1024</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                  <span class="n">drop_last</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span> <span class="n">num_workers</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                  <span class="n">use_uva</span><span class="o">=</span><span class="n">use_uva</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">val_dataloader</span> <span class="o">=</span> <span class="n">DataLoader</span><span class="p">(</span><span class="n">g</span><span class="p">,</span> <span class="n">val_idx</span><span class="p">,</span> <span class="n">sampler</span><span class="p">,</span> <span class="n">device</span><span class="o">=</span><span class="n">device</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                <span class="n">batch_size</span><span class="o">=</span><span class="mi">1024</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                <span class="n">drop_last</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span> <span class="n">num_workers</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                <span class="n">use_uva</span><span class="o">=</span><span class="n">use_uva</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">opt</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">optim</span><span class="o">.</span><span class="n">Adam</span><span class="p">(</span><span class="n">model</span><span class="o">.</span><span class="n">parameters</span><span class="p">(),</span> <span class="n">lr</span><span class="o">=</span><span class="mf">1e-3</span><span class="p">,</span> <span class="n">weight_decay</span><span class="o">=</span><span class="mf">5e-4</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">epoch</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">model</span><span class="o">.</span><span class="n">train</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">total_loss</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">it</span><span class="p">,</span> <span class="p">(</span><span class="n">input_nodes</span><span class="p">,</span> <span class="n">output_nodes</span><span class="p">,</span> <span class="n">blocks</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">train_dataloader</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">x</span> <span class="o">=</span> <span class="n">blocks</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">srcdata</span><span class="p">[</span><span class="s1">&#39;feat&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="n">y</span> <span class="o">=</span> <span class="n">blocks</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">dstdata</span><span class="p">[</span><span class="s1">&#39;label&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="n">y_hat</span> <span class="o">=</span> <span class="n">model</span><span class="p">(</span><span class="n">blocks</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">loss</span> <span class="o">=</span> <span class="n">F</span><span class="o">.</span><span class="n">cross_entropy</span><span class="p">(</span><span class="n">y_hat</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">opt</span><span class="o">.</span><span class="n">zero_grad</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="n">loss</span><span class="o">.</span><span class="n">backward</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="n">opt</span><span class="o">.</span><span class="n">step</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="n">total_loss</span> <span class="o">+=</span> <span class="n">loss</span><span class="o">.</span><span class="n">item</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">acc</span> <span class="o">=</span> <span class="n">evaluate</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">g</span><span class="p">,</span> <span class="n">val_dataloader</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Epoch </span><span class="si">{:05d}</span><span class="s2"> | Loss </span><span class="si">{:.4f}</span><span class="s2"> | Accuracy </span><span class="si">{:.4f}</span><span class="s2"> &#34;</span>
</span></span><span class="line"><span class="cl">              <span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">epoch</span><span class="p">,</span> <span class="n">total_loss</span> <span class="o">/</span> <span class="p">(</span><span class="n">it</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span> <span class="n">acc</span><span class="o">.</span><span class="n">item</span><span class="p">()))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Load graph from NebulaGraph into DGL</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">nebula_dgl</span> <span class="kn">import</span> <span class="n">NebulaLoader</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">nebula_config</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;graph_hosts&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                <span class="p">(</span><span class="s1">&#39;graphd&#39;</span><span class="p">,</span> <span class="mi">9669</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                <span class="p">(</span><span class="s1">&#39;graphd1&#39;</span><span class="p">,</span> <span class="mi">9669</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                <span class="p">(</span><span class="s1">&#39;graphd2&#39;</span><span class="p">,</span> <span class="mi">9669</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;nebula_user&#34;</span><span class="p">:</span> <span class="s2">&#34;root&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;nebula_password&#34;</span><span class="p">:</span> <span class="s2">&#34;nebula&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;nebulagraph_yelp_dgl_mapper.yaml&#39;</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">     <span class="n">feature_mapper</span> <span class="o">=</span> <span class="n">yaml</span><span class="o">.</span><span class="n">safe_load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">nebula_loader</span> <span class="o">=</span> <span class="n">NebulaLoader</span><span class="p">(</span><span class="n">nebula_config</span><span class="p">,</span> <span class="n">feature_mapper</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">g</span> <span class="o">=</span> <span class="n">nebula_loader</span><span class="o">.</span><span class="n">load</span><span class="p">()</span> <span class="c1"># This will take you some time</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># We use CPU as a poor guy</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span> <span class="o">=</span> <span class="n">g</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="s1">&#39;cpu&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">device</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">device</span><span class="p">(</span><span class="s1">&#39;cpu&#39;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Split dataset into training, validation and test sets, and convert it into homo graph.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># Split the graph into train, validation and test sets</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">train_test_split</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># features are g.ndata[&#39;f0&#39;], g.ndata[&#39;f1&#39;], g.ndata[&#39;f2&#39;], ... g.ndata[&#39;f31&#39;]</span>
</span></span><span class="line"><span class="cl"><span class="c1"># label is in g.ndata[&#39;is_fraud&#39;]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># concatenate all features</span>
</span></span><span class="line"><span class="cl"><span class="n">features</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">32</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">features</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;f&#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;feat&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">stack</span><span class="p">(</span><span class="n">features</span><span class="p">,</span> <span class="n">dim</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;label&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">g</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;is_fraud&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="c1"># numpy array as index of range n</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">idx</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">tensor</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">number_of_nodes</span><span class="p">()),</span> <span class="n">device</span><span class="o">=</span><span class="n">device</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">int64</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># features.append(idx)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># concatenate one dim with index of node</span>
</span></span><span class="line"><span class="cl"><span class="c1"># feature_and_idx = torch.stack(features, dim=1)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># split based on value distribution of label: the property &#34;is_fraud&#34;, which is a binary variable.</span>
</span></span><span class="line"><span class="cl"><span class="n">X_train_and_val_idx</span><span class="p">,</span> <span class="n">X_test_idx</span><span class="p">,</span> <span class="n">y_train_and_val</span><span class="p">,</span> <span class="n">y_test</span> <span class="o">=</span> <span class="n">train_test_split</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">idx</span><span class="p">,</span> <span class="n">g</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;is_fraud&#39;</span><span class="p">],</span> <span class="n">test_size</span><span class="o">=</span><span class="mf">0.2</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">,</span> <span class="n">stratify</span><span class="o">=</span><span class="n">g</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;is_fraud&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># split train and val</span>
</span></span><span class="line"><span class="cl"><span class="n">X_train_idx</span><span class="p">,</span> <span class="n">X_val_idx</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">y_val</span> <span class="o">=</span> <span class="n">train_test_split</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">X_train_and_val_idx</span><span class="p">,</span> <span class="n">y_train_and_val</span><span class="p">,</span> <span class="n">test_size</span><span class="o">=</span><span class="mf">0.2</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">,</span> <span class="n">stratify</span><span class="o">=</span><span class="n">y_train_and_val</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># list of index to mask</span>
</span></span><span class="line"><span class="cl"><span class="n">train_mask</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">number_of_nodes</span><span class="p">(),</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">bool</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">train_mask</span><span class="p">[</span><span class="n">X_train_idx</span><span class="p">]</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">val_mask</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">number_of_nodes</span><span class="p">(),</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">bool</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">val_mask</span><span class="p">[</span><span class="n">X_val_idx</span><span class="p">]</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">test_mask</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">number_of_nodes</span><span class="p">(),</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">bool</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">test_mask</span><span class="p">[</span><span class="n">X_test_idx</span><span class="p">]</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;train_mask&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">train_mask</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;val_mask&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">val_mask</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;test_mask&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">test_mask</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># shares_restaurant_in_one_month_with: 1, b&#34;001&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># shares_restaurant_rating_with: 2, b&#34;010&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># shares_user_with: 4, b&#34;100&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># set edata of shares_restaurant_in_one_month_with to n of 1 tensor array</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">edges</span><span class="p">[</span><span class="s1">&#39;shares_restaurant_in_one_month_with&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="s1">&#39;he&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">ones</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">g</span><span class="o">.</span><span class="n">number_of_edges</span><span class="p">(</span><span class="s1">&#39;shares_restaurant_in_one_month_with&#39;</span><span class="p">),</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">float32</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">edges</span><span class="p">[</span><span class="s1">&#39;shares_restaurant_rating_with&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="s1">&#39;he&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">full</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">number_of_edges</span><span class="p">(</span><span class="s1">&#39;shares_restaurant_rating_with&#39;</span><span class="p">),),</span> <span class="mi">2</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">float32</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">edges</span><span class="p">[</span><span class="s1">&#39;shares_user_with&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="s1">&#39;he&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">full</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">number_of_edges</span><span class="p">(</span><span class="s1">&#39;shares_user_with&#39;</span><span class="p">),),</span> <span class="mi">4</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">float32</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># heterogeneous graph to heterogeneous graph, keep ndata and edata</span>
</span></span><span class="line"><span class="cl"><span class="n">hg</span> <span class="o">=</span> <span class="n">dgl</span><span class="o">.</span><span class="n">to_homogeneous</span><span class="p">(</span><span class="n">g</span><span class="p">,</span> <span class="n">edata</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;he&#39;</span><span class="p">],</span> <span class="n">ndata</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;feat&#39;</span><span class="p">,</span> <span class="s1">&#39;label&#39;</span><span class="p">,</span> <span class="s1">&#39;train_mask&#39;</span><span class="p">,</span> <span class="s1">&#39;val_mask&#39;</span><span class="p">,</span> <span class="s1">&#39;test_mask&#39;</span><span class="p">])</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Train and test the model</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># create GraphSAGE model</span>
</span></span><span class="line"><span class="cl"><span class="n">in_size</span> <span class="o">=</span> <span class="n">hg</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;feat&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">out_size</span> <span class="o">=</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl"><span class="n">model</span> <span class="o">=</span> <span class="n">SAGE</span><span class="p">(</span><span class="n">in_size</span><span class="p">,</span> <span class="mi">256</span><span class="p">,</span> <span class="n">out_size</span><span class="p">)</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># model training</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Training...&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">train</span><span class="p">(</span><span class="n">device</span><span class="p">,</span> <span class="n">hg</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">X_train_idx</span><span class="p">,</span> <span class="n">X_val_idx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># test the model</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Testing...&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">acc</span> <span class="o">=</span> <span class="n">layerwise_infer</span><span class="p">(</span><span class="n">device</span><span class="p">,</span> <span class="n">hg</span><span class="p">,</span> <span class="n">X_test_idx</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="mi">4096</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Test Accuracy </span><span class="si">{:.4f}</span><span class="s2">&#34;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">acc</span><span class="o">.</span><span class="n">item</span><span class="p">()))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ËøêË°åÁªìÊûú</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Test Accuracy 0.9996</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>After we have a trained model, it could be serialized as a file, and when needed, it could be loaded and used as a PyTorch model in your inference service.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># save model</span>
</span></span><span class="line"><span class="cl"><span class="n">torch</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="n">model</span><span class="o">.</span><span class="n">state_dict</span><span class="p">(),</span> <span class="s2">&#34;fraud_d.model&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># load model</span>
</span></span><span class="line"><span class="cl"><span class="n">device</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">device</span><span class="p">(</span><span class="s1">&#39;cpu&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">model</span> <span class="o">=</span> <span class="n">SAGE</span><span class="p">(</span><span class="mi">32</span><span class="p">,</span> <span class="mi">256</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">model</span><span class="o">.</span><span class="n">load_state_dict</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="s2">&#34;fraud_d.model&#34;</span><span class="p">))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Then, let&rsquo;s see how do make this model work in an online fraud detection system.</p>
<h5 id="inference-api" class="headerLink">
    <a href="#inference-api" class="header-mark"></a>1.5.1.4 Inference API</h5><p>As mentioned earlier, GraphSAGE is the simplest model to support Inductive Learning, thus our training inference process above is actually not yet the same as our test and training graphs, although the indexes of the training points are labeled, the whole graph is actually used as input.</p>
<p>In order to do Inductive Learning we just need to divide the training and testing into two non-intersecting subgraphs for training and final testing.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># Inductive Learning, our test dataset are new nodes and new edges</span>
</span></span><span class="line"><span class="cl"><span class="n">hg_train</span> <span class="o">=</span> <span class="n">hg</span><span class="o">.</span><span class="n">subgraph</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">cat</span><span class="p">([</span><span class="n">X_train_idx</span><span class="p">,</span> <span class="n">X_val_idx</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># model training</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Training...&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">train</span><span class="p">(</span><span class="n">device</span><span class="p">,</span> <span class="n">hg_train</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">torch</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="n">X_train_idx</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span> <span class="n">torch</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="n">X_train_idx</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">hg_train</span><span class="o">.</span><span class="n">num_nodes</span><span class="p">()))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># test the model</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Testing...&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">hg_test</span> <span class="o">=</span> <span class="n">hg</span><span class="o">.</span><span class="n">subgraph</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">cat</span><span class="p">([</span><span class="n">X_test_idx</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">sg_X_test_idx</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="n">hg_test</span><span class="o">.</span><span class="n">num_nodes</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">acc</span> <span class="o">=</span> <span class="n">layerwise_infer</span><span class="p">(</span><span class="n">device</span><span class="p">,</span> <span class="n">hg_test</span><span class="p">,</span> <span class="n">sg_X_test_idx</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="mi">4096</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Test Accuracy </span><span class="si">{:.4f}</span><span class="s2">&#34;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">acc</span><span class="o">.</span><span class="n">item</span><span class="p">()))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Result</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Test Accuracy 0.9990</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>As you can see, in our code above, the graph used for testing and the graph used for training are two completely different sets of data, which allows our online system to be data that we haven&rsquo;t encountered before at all.</p>
<p>Thus, we can simply write the data for a new incoming transaction request into NebulaGraph and then get a small subgraph that the online system can return from that point, and use it as input to the model inference to get the labels of the subgraph!</p>
<p><strong>A new trasnaction request</strong>Ôºö</p>
<p>Remember the flowchart of an online inference system with GNN?</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">      ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê                          ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê      
</span></span><span class="line"><span class="cl">      ‚îÇ                     ‚îÇ                          ‚îÇ                 ‚îÇ
</span></span><span class="line"><span class="cl">‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ∂‚îÇ Transaction Record  ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ2. Fraud Risk ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ∂‚îÇ  Inference API  ‚îÇ‚óÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
</span></span><span class="line"><span class="cl">      ‚îÇ                     ‚îÇ‚óÄ‚îÄ‚îÄ‚îÄ‚îÄPrediction with ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§                 ‚îÇ     ‚îÇ
</span></span><span class="line"><span class="cl">      ‚îÇ                     ‚îÇ        Sub Graph         ‚îÇ                 ‚îÇ     ‚îÇ
</span></span><span class="line"><span class="cl">      ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò                          ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò     ‚îÇ
</span></span><span class="line"><span class="cl">           ‚îÇ           ‚ñ≤                                        ‚îÇ              ‚îÇ
</span></span><span class="line"><span class="cl">           ‚îÇ           ‚îÇ                                        ‚îÇ              ‚îÇ
</span></span><span class="line"><span class="cl">       0. Insert   1. Get New                              3.req: Node         ‚îÇ
</span></span><span class="line"><span class="cl">         Record    Record Sub                            Classification        ‚îÇ
</span></span><span class="line"><span class="cl">           ‚îÇ         Graph                                      ‚îÇ              ‚îÇ
</span></span><span class="line"><span class="cl">           ‚ñº           ‚îÇ                                        ‚îÇ              ‚îÇ
</span></span><span class="line"><span class="cl">‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò      3.resp: ‚îÇ
</span></span><span class="line"><span class="cl">‚îÇ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê‚îÇ ‚îÇ                          Predicted‚îÇ
</span></span><span class="line"><span class="cl">‚îÇ‚îÇ   Graph of Historical Transactions   ‚îÇ‚îÇ ‚îÇ                             Risk  ‚îÇ
</span></span><span class="line"><span class="cl">‚îÇ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò‚îÇ ‚îÇ                                   ‚îÇ
</span></span><span class="line"><span class="cl">‚îÇ                   .‚îÄ.              .   ‚îÇ ‚îÇ                                   ‚îÇ
</span></span><span class="line"><span class="cl">‚îÇ                  (   )‚óÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ( )  ‚îÇ ‚îÇ                                   ‚îÇ
</span></span><span class="line"><span class="cl">‚îÇ                   `‚îÄ&#39;              &#39;   ‚îÇ ‚îÇ      ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê     ‚îÇ
</span></span><span class="line"><span class="cl">‚îÇ  .       .‚îÄ.       ‚ï≤             ‚óÅ     ‚îÇ ‚îÇ      ‚îÇ GNN Model Œõ          ‚îÇ     ‚îÇ
</span></span><span class="line"><span class="cl">‚îÇ ( )‚óÄ‚îÄ‚îÄ‚îÄ‚îÄ(   )       ‚ï≤           ‚ï±      ‚îÇ ‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îê        ‚ï± ‚ï≤      ‚îå‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îê  ‚îÇ
</span></span><span class="line"><span class="cl">‚îÇ  &#39;       `‚îÄ&#39;         ‚ï≤       . ‚ï±       ‚îÇ ‚îÇ  ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§       ‚ï±   ‚ï≤     ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§  ‚îÇ
</span></span><span class="line"><span class="cl">‚îÇ  ‚ï≤       ‚óÄ            ‚ï≤     ( )        ‚îÇ ‚îî‚îÄ‚ñ∂‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ∂‚ñï     ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§‚îÄ‚îÄ‚îò
</span></span><span class="line"><span class="cl">‚îÇ   ‚ï≤  .  ‚ï±              ‚óÅ     &#39;         ‚îÇ    ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§       ‚ï≤   ‚ï±     ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§   
</span></span><span class="line"><span class="cl">‚îÇ    ‚óÄ( )‚ï±               .‚îÄ.         .‚îÄ. ‚îÇ    ‚îî‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îò        ‚ï≤ ‚ï±      ‚îî‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îò   
</span></span><span class="line"><span class="cl">‚îÇ      &#39;                (   )‚óÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ(   )‚îÇ        ‚îÇ           V          ‚îÇ      
</span></span><span class="line"><span class="cl">‚îÇ                        `‚îÄ&#39;         `‚îÄ&#39; ‚îÇ        ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò      
</span></span><span class="line"><span class="cl">‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò        
</span></span></code></pre></td></tr></table>
</div>
</div><p>Now, assume a new transaction request comes to the system, and corresponding relations has been already written to the graph database, we could randomly find one review to simulate that:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">n</span><span class="p">:</span><span class="o">`</span><span class="n">review</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="k">RETURN</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">1</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="o">+</span><span class="c
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="n">n</span><span class="wspan><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="p">(</span><span class="mi">2048</span><span class="w"> </span><span class="p">:</span><span class="n">review</span><span class="err">{</span><span class="n">f0</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="n">f1</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">08034700155258179</span><span class="p">,</span><span class="w"> </span><span class="n">f10</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">3952670097351074</span><span class="p">,</span><span class="w"> </span><span class="n">f11</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">18671999871730804</span><span class="p">,</span><span class="w"> </span><span class="n">f12</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">2836120128631592</span><span class="p">,</span><span class="w"> </span><span class="n">f13</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">2843089997768402</span><span class="p">,</span><span class="w"> </span><span class="n">f14</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">38148200511932373</span><span class="p">,</span><span class="w"> </span><span class="n">f15</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">3816460072994232</span><span class="p">,</span><span class="w"> </span><span class="n">f16</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">9999740123748779</span><span class="p">,</span><span class="w"> </span><span class="n">f17</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">6430919766426086</span><span class="p">,</span><span class="w"> </span><span class="n">f18</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">9999740123748779</span><span class="p">,</span><span class="w"> </span><span class="n">f19</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">5051100254058838</span><span class="p">,</span><span class="w"> </span><span class="n">f2</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">12382200360298157</span><span class="p">,</span><span class="w"> </span><span class="n">f20</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">4940490126609802</span><span class="p">,</span><span class="w"> </span><span class="n">f21</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">7766339778900146</span><span class="p">,</span><span class="w"> </span><span class="n">f22</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">7705119848251343</span><span class="p">,</span><span class="w"> </span><span class="n">f23</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">9480599761009216</span><span class="p">,</span><span class="w"> </span><span class="n">f24</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">4032529890537262</span><span class="p">,</span><span class="w"> </span><span class="n">f25</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">12437800318002701</span><span class="p">,</span><span class="w"> </span><span class="n">f26</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">3184080123901367</span><span class="p">,</span><span class="w"> </span><span class="n">f27</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">5223879814147949</span><span class="p">,</span><span class="w"> </span><span class="n">f28</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">4278610050678253</span><span class="p">,</span><span class="w"> </span><span class="n">f29</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">343284010887146</span><span class="p">,</span><span class="w"> </span><span class="n">f3</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">42868199944496155</span><span class="p">,</span><span class="w"> </span><span class="n">f30</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">37313398718833923</span><span class="p">,</span><span class="w"> </span><span class="n">f31</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">328357994556427</span><span class="p">,</span><span class="w"> </span><span class="n">f4</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">9999849796295166</span><span class="p">,</span><span class="w"> </span><span class="n">f5</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">9999849796295166</span><span class="p">,</span><span class="w"> </span><span class="n">f6</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">9999849796295166</span><span class="p">,</span><span class="w"> </span><span class="n">f7</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">4850809872150421</span><span class="p">,</span><span class="w"> </span><span class="n">f8</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">454602986574173</span><span class="p">,</span><span class="w"> </span><span class="n">f9</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">8863419890403748</span><span class="p">,</span><span class="w"> </span><span class="n">is_fraud</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="err">}</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Â•ΩÔºåÂÆÉÊòØ 2048 Ëøô‰∏™ÁÇπ„ÄÇÂÆÉÁöÑ‰∏ã‰∏ÄÊ≠•ÊòØ <code>1. Get New Record Subgraph</code> Êàë‰ª¨Êù•Ëé∑ÂèñÂÆÉÁöÑÂ≠êÂõæÔºö</p>
<p>OK, it&rsquo;s the vertex with ID <code>2048</code>, the next step in the flowchart is <code>1. Get New Record Subgraph</code> , and it&rsquo;s equivalent to this query:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-SQL" data-lang="SQL"><span class="line"><span class="cl"><span class="k">GET</span><span class="w"> </span><span class="n">SUBGRAPH</span><span class="w"> </span><span class="k">WITH</span><span class="w"> </span><span class="n">PROP</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="mi">2048</span><span class="w"> </span><span class="n">YIELD</span><span class="w"> </span><span class="n">VERTICES</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">nodes</span><span class="p">,</span><span class="w"> </span><span class="n">EDGES</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">relationships</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>If we render the result in NebulaGraph Studio or NebulaGraph Explorer, it looks like this:</p>
<p><figure><img
        
        loading="lazy"
        src="/en/fraud-detection-with-nebulagraph/subgraph_console_view.webp"
        srcset="/en/fraud-detection-with-nebulagraph/subgraph_console_view.webp, /en/fraud-detection-with-nebulagraph/subgraph_console_view.webp 1.5x, /en/fraud-detection-with-nebulagraph/subgraph_console_view.webp 2x"
        sizes="auto"
        alt="/en/fraud-detection-with-nebulagraph/subgraph_console_view.webp"
        title="/en/fraud-detection-with-nebulagraph/subgraph_console_view.webp" height="2334"   width="4064" ></figure></p>
<p><figure><img
        
        loading="lazy"
        src="/en/fraud-detection-with-nebulagraph/subgraph_viz.webp"
        srcset="/en/fraud-detection-with-nebulagraph/subgraph_viz.webp, /en/fraud-detection-with-nebulagraph/subgraph_viz.webp 1.5x, /en/fraud-detection-with-nebulagraph/subgraph_viz.webp 2x"
        sizes="auto"
        alt="/en/fraud-detection-with-nebulagraph/subgraph_viz.webp"
        title="/en/fraud-detection-with-nebulagraph/subgraph_viz.webp" height="2334"   width="4064" ></figure></p>
<p>Below is the code for the SUBGRAPH fetching, the input is vertex_id, and output is a dgl graph, which will be sent to the inference API.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># get SUBGRAPH of one node</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">json</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">torch</span> <span class="kn">import</span> <span class="n">tensor</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">dgl</span> <span class="kn">import</span> <span class="n">DGLHeteroGraph</span><span class="p">,</span> <span class="n">heterograph</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">nebula3.gclient.net</span> <span class="kn">import</span> <span class="n">ConnectionPool</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">nebula3.Config</span> <span class="kn">import</span> <span class="n">Config</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">config</span> <span class="o">=</span> <span class="n">Config</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">config</span><span class="o">.</span><span class="n">max_connection_pool_size</span> <span class="o">=</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl"><span class="n">connection_pool</span> <span class="o">=</span> <span class="n">ConnectionPool</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">connection_pool</span><span class="o">.</span><span class="n">init</span><span class="p">([(</span><span class="s1">&#39;graphd&#39;</span><span class="p">,</span> <span class="mi">9669</span><span class="p">)],</span> <span class="n">config</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">vertex_id</span> <span class="o">=</span> <span class="mi">2048</span>
</span></span><span class="line"><span class="cl"><span class="n">client</span> <span class="o">=</span> <span class="n">connection_pool</span><span class="o">.</span><span class="n">get_session</span><span class="p">(</span><span class="s1">&#39;root&#39;</span><span class="p">,</span> <span class="s1">&#39;nebula&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">execute_json</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;USE yelp;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="sa">f</span><span class="s2">&#34;GET SUBGRAPH WITH PROP 2 STEPS FROM </span><span class="si">{</span><span class="n">vertex_id</span><span class="si">}</span><span class="s2"> YIELD VERTICES AS nodes, EDGES AS relationships;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">r</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">data</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;results&#39;</span><span class="p">,</span> <span class="p">[{}])[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>And Nebula-Python was used here, and we are leveraging <code>execute_json</code> to execute the GET SUBGRAPH query and get the subgraph in JSON.</p>
<p>Then, we will construct it as a DGL Graph Object:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># create node and nodedata</span>
</span></span><span class="line"><span class="cl"><span class="n">node_id_map</span> <span class="o">=</span> <span class="p">{}</span> <span class="c1"># key: vertex id in NebulaGraph, value: node id in dgl_graph</span>
</span></span><span class="line"><span class="cl"><span class="n">node_idx</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">features</span> <span class="o">=</span> <span class="p">[[]</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">32</span><span class="p">)]</span> <span class="o">+</span> <span class="p">[[]]</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">index</span><span class="p">,</span> <span class="n">node</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s1">&#39;meta&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">]):</span>
</span></span><span class="line"><span class="cl">        <span class="n">nodeid</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s1">&#39;meta&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="n">index</span><span class="p">][</span><span class="s1">&#39;id&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">nodeid</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">node_id_map</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">node_id_map</span><span class="p">[</span><span class="n">nodeid</span><span class="p">]</span> <span class="o">=</span> <span class="n">node_idx</span>
</span></span><span class="line"><span class="cl">            <span class="n">node_idx</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">32</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">                <span class="n">features</span><span class="p">[</span><span class="n">f</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s1">&#39;row&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="n">index</span><span class="p">][</span><span class="sa">f</span><span class="s2">&#34;review.f</span><span class="si">{</span><span class="n">f</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">            <span class="n">features</span><span class="p">[</span><span class="mi">32</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s1">&#39;row&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="n">index</span><span class="p">][</span><span class="s1">&#39;review.is_fraud&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">- R-U-R: shares_user_with
</span></span></span><span class="line"><span class="cl"><span class="s2">- R-S-R: shares_restaurant_rating_with
</span></span></span><span class="line"><span class="cl"><span class="s2">- R-T-R: shares_restaurant_in_one_month_with
</span></span></span><span class="line"><span class="cl"><span class="s2">&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">rur_start</span><span class="p">,</span> <span class="n">rur_end</span><span class="p">,</span> <span class="n">rsr_start</span><span class="p">,</span> <span class="n">rsr_end</span><span class="p">,</span> <span class="n">rtr_start</span><span class="p">,</span> <span class="n">rtr_end</span> <span class="o">=</span> <span class="p">[],</span> <span class="p">[],</span> <span class="p">[],</span> <span class="p">[],</span> <span class="p">[],</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">edge</span> <span class="ow">in</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s1">&#39;meta&#39;</span><span class="p">][</span><span class="mi">1</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">        <span class="n">edge</span> <span class="o">=</span> <span class="n">edge</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">edge</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;shares_user_with&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">rur_start</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node_id_map</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="s1">&#39;src&#39;</span><span class="p">]])</span>
</span></span><span class="line"><span class="cl">            <span class="n">rur_end</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node_id_map</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="s1">&#39;dst&#39;</span><span class="p">]])</span>
</span></span><span class="line"><span class="cl">        <span class="k">elif</span> <span class="n">edge</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;shares_restaurant_rating_with&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">rsr_start</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node_id_map</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="s1">&#39;src&#39;</span><span class="p">]])</span>
</span></span><span class="line"><span class="cl">            <span class="n">rsr_end</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node_id_map</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="s1">&#39;dst&#39;</span><span class="p">]])</span>
</span></span><span class="line"><span class="cl">        <span class="k">elif</span> <span class="n">edge</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;shares_restaurant_in_one_month_with&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">rtr_start</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node_id_map</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="s1">&#39;src&#39;</span><span class="p">]])</span>
</span></span><span class="line"><span class="cl">            <span class="n">rtr_end</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node_id_map</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="s1">&#39;dst&#39;</span><span class="p">]])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">data_dict</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">rur_start</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">data_dict</span><span class="p">[(</span><span class="s1">&#39;review&#39;</span><span class="p">,</span> <span class="s1">&#39;shares_user_with&#39;</span><span class="p">,</span> <span class="s1">&#39;review&#39;</span><span class="p">)]</span> <span class="o">=</span> <span class="n">tensor</span><span class="p">(</span><span class="n">rur_start</span><span class="p">),</span> <span class="n">tensor</span><span class="p">(</span><span class="n">rur_end</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">rsr_start</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">data_dict</span><span class="p">[(</span><span class="s1">&#39;review&#39;</span><span class="p">,</span> <span class="s1">&#39;shares_restaurant_rating_with&#39;</span><span class="p">,</span> <span class="s1">&#39;review&#39;</span><span class="p">)]</span> <span class="o">=</span> <span class="n">tensor</span><span class="p">(</span><span class="n">rsr_start</span><span class="p">),</span> <span class="n">tensor</span><span class="p">(</span><span class="n">rsr_end</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">rtr_start</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">data_dict</span><span class="p">[(</span><span class="s1">&#39;review&#39;</span><span class="p">,</span> <span class="s1">&#39;shares_restaurant_in_one_month_with&#39;</span><span class="p">,</span> <span class="s1">&#39;review&#39;</span><span class="p">)]</span> <span class="o">=</span> <span class="n">tensor</span><span class="p">(</span><span class="n">rtr_start</span><span class="p">),</span> <span class="n">tensor</span><span class="p">(</span><span class="n">rtr_end</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># construct a dgl_graph</span>
</span></span><span class="line"><span class="cl"><span class="n">dgl_graph</span><span class="p">:</span> <span class="n">DGLHeteroGraph</span> <span class="o">=</span> <span class="n">heterograph</span><span class="p">(</span><span class="n">data_dict</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>In fact, we just construct it following <a href="https://docs.dgl.ai/en/0.9.x/generated/dgl.heterograph.html" target="_blank" rel="noopener noreferrer">https://docs.dgl.ai/en/0.9.x/generated/dgl.heterograph.html</a>, which leverages <code>heterograph()</code> to create a dgl graph object from a data_dict. And <code>node_id_map</code> is the map between Vertex_id in NebulaGraph and the node_id in this object.</p>
<p>Finally, we load node features into the graph object, too.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># load node features to dgl_graph</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">32</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">dgl_graph</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="sa">f</span><span class="s2">&#34;f</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">tensor</span><span class="p">(</span><span class="n">features</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="n">dgl_graph</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;label&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">tensor</span><span class="p">(</span><span class="n">features</span><span class="p">[</span><span class="mi">32</span><span class="p">])</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Before the inferring call, we still need to convert it into homo graph, as we had done before during the training.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">torch</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># to homogeneous graph</span>
</span></span><span class="line"><span class="cl"><span class="n">features</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">32</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">features</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">dgl_graph</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="sa">f</span><span class="s2">&#34;f</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">dgl_graph</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;feat&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">stack</span><span class="p">(</span><span class="n">features</span><span class="p">,</span> <span class="n">dim</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">dgl_graph</span><span class="o">.</span><span class="n">edges</span><span class="p">[</span><span class="s1">&#39;shares_restaurant_in_one_month_with&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="s1">&#39;he&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">ones</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">dgl_graph</span><span class="o">.</span><span class="n">number_of_edges</span><span class="p">(</span><span class="s1">&#39;shares_restaurant_in_one_month_with&#39;</span><span class="p">),</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">float32</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">dgl_graph</span><span class="o">.</span><span class="n">edges</span><span class="p">[</span><span class="s1">&#39;shares_restaurant_rating_with&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="s1">&#39;he&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">full</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="n">dgl_graph</span><span class="o">.</span><span class="n">number_of_edges</span><span class="p">(</span><span class="s1">&#39;shares_restaurant_rating_with&#39;</span><span class="p">),),</span> <span class="mi">2</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">float32</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">dgl_graph</span><span class="o">.</span><span class="n">edges</span><span class="p">[</span><span class="s1">&#39;shares_user_with&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="s1">&#39;he&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">full</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="n">dgl_graph</span><span class="o">.</span><span class="n">number_of_edges</span><span class="p">(</span><span class="s1">&#39;shares_user_with&#39;</span><span class="p">),),</span> <span class="mi">4</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">float32</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># heterogeneous graph to heterogeneous graph, keep ndata and edata</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">dgl</span>
</span></span><span class="line"><span class="cl"><span class="n">hg</span> <span class="o">=</span> <span class="n">dgl</span><span class="o">.</span><span class="n">to_homogeneous</span><span class="p">(</span><span class="n">dgl_graph</span><span class="p">,</span> <span class="n">edata</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;he&#39;</span><span class="p">],</span> <span class="n">ndata</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;feat&#39;</span><span class="p">,</span> <span class="s1">&#39;label&#39;</span><span class="p">])</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>And here is the inference API:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">do_inference</span><span class="p">(</span><span class="n">device</span><span class="p">,</span> <span class="n">graph</span><span class="p">,</span> <span class="n">node_idx</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">model</span><span class="o">.</span><span class="n">eval</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="n">torch</span><span class="o">.</span><span class="n">no_grad</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="n">pred</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">inference</span><span class="p">(</span><span class="n">graph</span><span class="p">,</span> <span class="n">device</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">)</span> <span class="c1"># pred in buffer_device</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">pred</span><span class="p">[</span><span class="n">node_idx</span><span class="p">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Let&rsquo;s try calling it with this new vertex&rsquo;s subgraph:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">node_idx</span> <span class="o">=</span> <span class="n">node_id_map</span><span class="p">[</span><span class="n">vertex_id</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">batch_size</span> <span class="o">=</span> <span class="mi">4096</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">result</span> <span class="o">=</span> <span class="n">do_inference</span><span class="p">(</span><span class="n">device</span><span class="p">,</span> <span class="n">hg</span><span class="p">,</span> <span class="n">node_idx</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>And see its performance:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">test_inference</span><span class="p">(</span><span class="n">device</span><span class="p">,</span> <span class="n">graph</span><span class="p">,</span> <span class="n">nid</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">model</span><span class="o">.</span><span class="n">eval</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="n">torch</span><span class="o">.</span><span class="n">no_grad</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="n">pred</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">inference</span><span class="p">(</span><span class="n">graph</span><span class="p">,</span> <span class="n">device</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">)</span> <span class="c1"># pred in buffer_device</span>
</span></span><span class="line"><span class="cl">        <span class="n">pred</span> <span class="o">=</span> <span class="n">pred</span><span class="p">[</span><span class="n">nid</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">label</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;label&#39;</span><span class="p">][</span><span class="n">nid</span><span class="p">]</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">pred</span><span class="o">.</span><span class="n">device</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">MF</span><span class="o">.</span><span class="n">accuracy</span><span class="p">(</span><span class="n">pred</span><span class="p">,</span> <span class="n">label</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">node_idx</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">tensor</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">node_id_map</span><span class="o">.</span><span class="n">values</span><span class="p">()))</span>
</span></span><span class="line"><span class="cl"><span class="n">acc</span> <span class="o">=</span> <span class="n">test_inference</span><span class="p">(</span><span class="n">device</span><span class="p">,</span> <span class="n">hg</span><span class="p">,</span> <span class="n">node_idx</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="mi">4096</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Test Accuracy </span><span class="si">{:.4f}</span><span class="s2">&#34;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">acc</span><span class="o">.</span><span class="n">item</span><span class="p">()))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Result:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">307</span><span class="p">]:</span> <span class="k">def</span> <span class="nf">test_inference</span><span class="p">(</span><span class="n">device</span><span class="p">,</span> <span class="n">graph</span><span class="p">,</span> <span class="n">nid</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">     <span class="o">...</span><span class="p">:</span>     <span class="n">model</span><span class="o">.</span><span class="n">eval</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">     <span class="o">...</span><span class="p">:</span>     <span class="k">with</span> <span class="n">torch</span><span class="o">.</span><span class="n">no_grad</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">     <span class="o">...</span><span class="p">:</span>         <span class="n">pred</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">inference</span><span class="p">(</span><span class="n">graph</span><span class="p">,</span> <span class="n">device</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">)</span> <span class="c1"># pred in buffer</span>
</span></span><span class="line"><span class="cl">     <span class="o">...</span><span class="p">:</span> <span class="n">_device</span>
</span></span><span class="line"><span class="cl">     <span class="o">...</span><span class="p">:</span>         <span class="n">pred</span> <span class="o">=</span> <span class="n">pred</span><span class="p">[</span><span class="n">nid</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">     <span class="o">...</span><span class="p">:</span>         <span class="n">label</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">ndata</span><span class="p">[</span><span class="s1">&#39;label&#39;</span><span class="p">][</span><span class="n">nid</span><span class="p">]</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">pred</span><span class="o">.</span><span class="n">device</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">     <span class="o">...</span><span class="p">:</span>         <span class="k">return</span> <span class="n">MF</span><span class="o">.</span><span class="n">accuracy</span><span class="p">(</span><span class="n">pred</span><span class="p">,</span> <span class="n">label</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">     <span class="o">...</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">     <span class="o">...</span><span class="p">:</span> <span class="n">node_idx</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">tensor</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">node_id_map</span><span class="o">.</span><span class="n">values</span><span class="p">()))</span>
</span></span><span class="line"><span class="cl">     <span class="o">...</span><span class="p">:</span> <span class="n">acc</span> <span class="o">=</span> <span class="n">test_inference</span><span class="p">(</span><span class="n">device</span><span class="p">,</span> <span class="n">hg</span><span class="p">,</span> <span class="n">node_idx</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="mi">4096</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">     <span class="o">...</span><span class="p">:</span> <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Test Accuracy </span><span class="si">{:.4f}</span><span class="s2">&#34;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">acc</span><span class="o">.</span><span class="n">item</span><span class="p">()))</span>
</span></span><span class="line"><span class="cl">     <span class="o">...</span><span class="p">:</span>
</span></span><span class="line"><span class="cl"><span class="mi">100</span><span class="o">%|</span><span class="err">‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà</span><span class="o">|</span> <span class="mi">1</span><span class="o">/</span><span class="mi">1</span> <span class="p">[</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="o">&lt;</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">,</span> <span class="mf">130.31</span><span class="n">it</span><span class="o">/</span><span class="n">s</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="mi">100</span><span class="o">%|</span><span class="err">‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà</span><span class="o">|</span> <span class="mi">1</span><span class="o">/</span><span class="mi">1</span> <span class="p">[</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="o">&lt;</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">,</span> <span class="mf">152.29</span><span class="n">it</span><span class="o">/</span><span class="n">s</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="mi">100</span><span class="o">%|</span><span class="err">‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà</span><span class="o">|</span> <span class="mi">1</span><span class="o">/</span><span class="mi">1</span> <span class="p">[</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="o">&lt;</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">,</span> <span class="mf">173.55</span><span class="n">it</span><span class="o">/</span><span class="n">s</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">Test</span> <span class="n">Accuracy</span> <span class="mf">0.9688</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>The whole example code, including a frontend is <a href="https://github.com/wey-gu/NebulaGraph-Fraud-Detection-GNN" target="_blank" rel="noopener noreferrer">here</a> in the github, and this is a video demo:</p>
<video width="800" controls>
  <source src="https://user-images.githubusercontent.com/1651790/182651965-d489a218-36a6-40c9-9fab-ba288e8d959a.mov" type="video/mp4"> 
</video>
<h3 id="conclusion" class="headerLink">
    <a href="#conclusion" class="header-mark"></a>1.6 Conclusion</h3><!--

ÊÄªÁªìËµ∑Êù•ÔºåÊ¨∫ËØàÊ£ÄÊµãÁöÑÊñπÊ≥ïÊúâÔºö

- Âú®‰∏Ä‰∏™‰∫§ÊòìÂéÜÂè≤„ÄÅÈ£éÊéßÁöÑÂõæË∞±‰∏äÔºåÈÄöËøáÂõæÊ®°ÂºèÊü•ËØ¢Áõ¥Êé•Ëé∑ÂæóÈ£éÈô©ÊèêÁ§∫
- ÂÆöÊúüÂà©Áî®ÂõæÁÆóÊ≥ïÊâ©ÂÖÖÈ£éÈô©Ê†áÊ≥®ÔºåÂÜôÂõûÂõæÂ∫ì
- ÂÆöÊúüËÆ°ÁÆóÂõæË∞±‰∏≠ÁöÑÂõæÁâπÂæÅÔºåÂíåÂÖ∂‰ªñÁâπÂæÅ‰∏ÄËµ∑Áî®‰º†ÁªüÊú∫Âô®Â≠¶‰π†ÊñπÊ≥ïÁ¶ªÁ∫øÈ¢ÑÊµãÈ£éÈô©
- Â∞ÜÂõæË∞±‰∏≠ÁöÑÂ±ûÊÄßÂ§ÑÁêÜÊàê‰∏∫ÁÇπ„ÄÅËæπÁâπÂæÅÔºåÁî®ÂõæÁ•ûÁªèÁΩëÁªúÊñπÊ≥ïÁ¶ªÁ∫øÈ¢ÑÊµãÈ£éÈô©ÔºåÈÉ®ÂàÜÂèØ‰ª• Inductive Learning ÁöÑÊñπÊ≥ïÁªìÂêàÂõæÂ∫ìÂèØ‰ª•ÂÆûÁé∞Âú®Á∫øÈ£éÈô©È¢ÑÊµã

-->
<p>To summarize, fraud detection with NebulaGraph Graph Database could be done:</p>
<ul>
<li>With graph queries to get risk metrics from graph database</li>
<li>With risky label being expanded by graph algorithms and written back to graph database</li>
<li>With ML methods including graph features being fetched from graph database</li>
<li>Process the property in the graph into the node and edge features to predict risk offline using GNN methods, some of which can be combined with the graph database to achieve online risk prediction by Inductive Learning methods</li>
</ul>
<blockquote>
<p>Feature Image credit goes to <a href="https://unsplash.com/photos/BW0vK-FA3eg" target="_blank" rel="noopener noreferrer">https://unsplash.com/photos/BW0vK-FA3eg</a></p>
</blockquote>]]></description>
</item></channel>
</rss>
