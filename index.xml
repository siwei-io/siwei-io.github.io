<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>siwei.io</title>
        <link>https://siwei.io/</link>
        <description>Siwei(思为) builds things and believes in Open Source.</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>weyl.gu@gmail.com (Wey Gu)</managingEditor>
            <webMaster>weyl.gu@gmail.com (Wey Gu)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 15 Aug 2023 11:10:34 &#43;0800</lastBuildDate>
            <atom:link href="https://siwei.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>Graph RAG: 知识图谱结合 LLM 的检索增强</title>
    <link>https://siwei.io/graph-rag/</link>
    <pubDate>Tue, 15 Aug 2023 11:10:34 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/graph-rag/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/graph-rag/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>本文为大家揭示我们优先提出的 Graph RAG 方法，这种结合知识图谱、图数据库作为大模型结合私有知识系统最新的技术栈，作为之前的图上下文学习、text2cypher 文章的第三篇文章。</p>
</blockquote>
<p>本文为大家揭示我们优先提出的 Graph RAG 方法，这种结合知识图谱、图数据库作为大模型结合私有知识系统最新的技术栈，作为之前的图上下文学习、text2cypher 文章的第三篇文章。</p>
<h2 id="graph-rag" class="headerLink">
    <a href="#graph-rag" class="header-mark"></a>1 Graph RAG</h2><p>在<a href="https://siwei.io/en/graph-enabled-llama-index/" target="_blank" rel="noopener noreferrer">第一篇关于上下文学习的博客中</a>我们介绍过， RAG（Retrieval Argumented Generation）这种基于特定任务/问题的文档检索范式中，我们通常先收集必要的上下文，然后利用具有认知能力的机器学习模型进行上下文学习（in-context learning），来合成任务的答案。</p>
<p>借助 LLM 这个只需要“说话”就可以灵活处理复杂问题的感知层，只需要两步，就能搭建一个基于私有知识的智能应用：</p>
<ul>
<li>利用各种搜索方式（比如 Embedding 与向量数据库）从给定的文档中检索相关知识。</li>
<li>利用 LLM 理解并智能地合成答案。</li>
</ul>
<p>而这篇博客中，我们结合最新的探索进展和思考，尝试把 Graph RAG 和其他方法进行比较，说得更透一点。并且，我们决定开始用 Graph RAG 这个叫法来描述它。</p>
<blockquote>
<p>实际上，<a href="https://siwei.io/talks/graph-rag-with-jerry/" target="_blank" rel="noopener noreferrer">Graph RAG</a>，是最先又我<a href="https://www.youtube.com/watch?v=bPoNCkjDmco" target="_blank" rel="noopener noreferrer">和 Jerry Liu 的直播研讨会讨论</a>和<a href="https://twitter.com/wey_gu/status/1673362774930628608" target="_blank" rel="noopener noreferrer">相关的讨论的 Twitter Thread</a>中提到的，差不多的内容我在 <a href="https://www.bilibili.com/video/BV1Pp4y157nt" target="_blank" rel="noopener noreferrer">NebulaGraph 社区直播</a> 中也用中文介绍过。</p>
</blockquote>
<h2 id="在-rag-中知识图谱的价值" class="headerLink">
    <a href="#%e5%9c%a8-rag-%e4%b8%ad%e7%9f%a5%e8%af%86%e5%9b%be%e8%b0%b1%e7%9a%84%e4%bb%b7%e5%80%bc" class="header-mark"></a>2 在 RAG 中知识图谱的价值</h2><p>这部分内容我们在第一篇文章中阐述过，比如一个查询：“告诉我所有关于苹果和乔布斯的事”，基于乔布斯自传这本书进行问答，而这个问题涉及到的上下文分布在自传这本书的 30 页（分块）的时候，传统的“分割数据，Embedding 再向量搜索”方法在多个文档块里用 top-k 去搜索的方法很难得到这种分散，细粒的完整信息。而且，这种方法还很容易遗漏互相关联的文档块，从而导致信息检索不完整。</p>
<p>除此之外，在之后一次技术会议中，我有幸和 leadscloud.com 的徐旭讨论之后（他们因为有知识图谱的技术背景，也做了和我们类似的探索和尝试！），让我意识到知识图谱可以减少基于嵌入的语义搜索所导致的不准确性。徐旭给出的一个有趣的例子是“保温大棚”与“保温杯”，尽管在语义上两者是存在相关性的，但在大多数场景下，这种通用语义（Embedding）下的相关性常常是我们不希望产生的，进而作为错误的上下文而引入“幻觉”。</p>
<p>这时候，保有领域知识的知识图谱则是非常直接可以缓解、消除这种幻觉的手段。</p>
<h2 id="用-nebulagraph-实现-graph-rag" class="headerLink">
    <a href="#%e7%94%a8-nebulagraph-%e5%ae%9e%e7%8e%b0-graph-rag" class="header-mark"></a>3 用 NebulaGraph 实现 Graph RAG</h2><p>一个简单的 Graph RAG 可以如下去简单实现：</p>
<ol>
<li>使用LLM(或其他)模型从问题中提取关键实体。</li>
<li>根据这些实体检索子图，深入到一定的深度（例如，2）。</li>
<li>利用获得的上下文利用LLM产生答案。</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># 伪代码</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">_get_key_entities</span><span class="p">(</span><span class="n">query_str</span><span class="p">,</span> <span class="n">llm</span><span class="o">=</span><span class="kc">None</span> <span class="p">,</span><span class="n">with_llm</span><span class="o">=</span><span class="kc">True</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">_expand_synonyms</span><span class="p">(</span><span class="n">entities</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">_retrieve_subgraph_context</span><span class="p">(</span><span class="n">entities</span><span class="p">,</span> <span class="n">depth</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">limit</span><span class="o">=</span><span class="mi">30</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">nebulagraph_store</span><span class="o">.</span><span class="n">get_relations</span><span class="p">(</span><span class="n">entities</span><span class="p">,</span> <span class="n">depth</span><span class="p">,</span> <span class="n">limit</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">_synthesize_answer</span><span class="p">(</span><span class="n">query_str</span><span class="p">,</span> <span class="n">graph_rag_context</span><span class="p">,</span> <span class="n">llm</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">llm</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">PROMPT_SYNTHESIZE_AND_REFINE</span><span class="p">,</span> <span class="n">query_str</span><span class="p">,</span> <span class="n">graph_rag_context</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">simple_graph_rag</span><span class="p">(</span><span class="n">query_str</span><span class="p">,</span> <span class="n">nebulagraph_store</span><span class="p">,</span> <span class="n">llm</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">entities</span> <span class="o">=</span> <span class="n">_get_key_entities</span><span class="p">(</span><span class="n">query_str</span><span class="p">,</span> <span class="n">llm</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">graph_rag_context</span> <span class="o">=</span> <span class="n">_retrieve_subgraph_context</span><span class="p">(</span><span class="n">entities</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">_synthesize_answer</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">query_str</span><span class="p">,</span> <span class="n">graph_rag_context</span><span class="p">,</span> <span class="n">llm</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>然而，有了像 Llama Index 这样方便的 LLM 编排工具，开发者可以专注于 LLM 的编排逻辑和 pipeline 设计，而不用亲自处理很多细节的抽象与实现。</p>
<p>所以，用 Llama Index，我们可以轻松搭建 Graph RAG，甚至整合更复杂的 RAG 逻辑，比如 <a href="https://gpt-index.readthedocs.io/en/latest/examples/index_structs/knowledge_graph/KnowledgeGraphIndex_vs_VectorStoreIndex_vs_CustomIndex_combined.html" target="_blank" rel="noopener noreferrer">Graph+Vector RAG</a>。</p>
<p><figure><a class="lightgallery" href="https://github.com/siwei-io/talks/assets/1651790/f783b592-7a8f-4eab-bd61-cf0837e83870" title="https://github.com/siwei-io/talks/assets/1651790/f783b592-7a8f-4eab-bd61-cf0837e83870" data-thumbnail="https://github.com/siwei-io/talks/assets/1651790/f783b592-7a8f-4eab-bd61-cf0837e83870">
        <img
            
            loading="lazy"
            src="https://github.com/siwei-io/talks/assets/1651790/f783b592-7a8f-4eab-bd61-cf0837e83870"
            srcset="https://github.com/siwei-io/talks/assets/1651790/f783b592-7a8f-4eab-bd61-cf0837e83870, https://github.com/siwei-io/talks/assets/1651790/f783b592-7a8f-4eab-bd61-cf0837e83870 1.5x, https://github.com/siwei-io/talks/assets/1651790/f783b592-7a8f-4eab-bd61-cf0837e83870 2x"
            sizes="auto"
            alt="https://github.com/siwei-io/talks/assets/1651790/f783b592-7a8f-4eab-bd61-cf0837e83870">
    </a></figure></p>
<p>在 Llama Index 中，我们有两种方法实现 Graph RAG：</p>
<ul>
<li><code>KnowledgeGraphIndex</code> 用来从任何私有数据只是从零构建知识图谱（基于 LLM 或者其他语言模型），然后 4 行代码进行 Graph RAG。</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">graph_store = NebulaGraphStore(
</span></span><span class="line"><span class="cl">    space_name=space_name,
</span></span><span class="line"><span class="cl">    edge_types=edge_types,
</span></span><span class="line"><span class="cl">    rel_prop_names=rel_prop_names,
</span></span><span class="line"><span class="cl">    tags=tags,
</span></span><span class="line"><span class="cl">)
</span></span><span class="line"><span class="cl">storage_context = StorageContext.from_defaults(graph_store=graph_store)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Build KG
</span></span><span class="line"><span class="cl">kg_index = KnowledgeGraphIndex.from_documents(
</span></span><span class="line"><span class="cl">    documents,
</span></span><span class="line"><span class="cl">    storage_context=storage_context,
</span></span><span class="line"><span class="cl">    max_triplets_per_chunk=10,
</span></span><span class="line"><span class="cl">    space_name=space_name,
</span></span><span class="line"><span class="cl">    edge_types=edge_types,
</span></span><span class="line"><span class="cl">    rel_prop_names=rel_prop_names,
</span></span><span class="line"><span class="cl">    tags=tags,
</span></span><span class="line"><span class="cl">)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">kg_query_engine = kg_index.as_query_engine()
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>KnowledgeGraphRAGQueryEngine</code> 则可以在任何已经存在的知识图谱上进行 Graph RAG，不过我还没有完成这个 <a href="https://github.com/jerryjliu/llama_index/pull/7204" target="_blank" rel="noopener noreferrer">PR</a>。</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">graph_store = NebulaGraphStore(
</span></span><span class="line"><span class="cl">    space_name=space_name,
</span></span><span class="line"><span class="cl">    edge_types=edge_types,
</span></span><span class="line"><span class="cl">    rel_prop_names=rel_prop_names,
</span></span><span class="line"><span class="cl">    tags=tags,
</span></span><span class="line"><span class="cl">)
</span></span><span class="line"><span class="cl">storage_context = StorageContext.from_defaults(graph_store=graph_store)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">graph_rag_query_engine = KnowledgeGraphRAGQueryEngine(
</span></span><span class="line"><span class="cl">    storage_context=storage_context,
</span></span><span class="line"><span class="cl">)
</span></span></code></pre></td></tr></table>
</div>
</div><p>最后，我做了<a href="https://www.siwei.io/demos/graph-rag/" target="_blank" rel="noopener noreferrer">一个 streamlit 的 demo</a>来比较 Graph RAG 与 Vector RAG，从中我们可以看到 Graph RAG 并没有取代 Embedding、向量搜索的方法，而是增强了/补充了它的不足。</p>
<iframe width="800" height="857" src="https://github.com/siwei-io/talks/assets/1651790/102d00bc-6146-4856-a81f-f953c7254b29"> </iframe>
<h2 id="text2cypher" class="headerLink">
    <a href="#text2cypher" class="header-mark"></a>4 text2cypher</h2><p>基于图谱的 LLM 的另一种有趣方法是text2cypher。这种方法不依赖于实体的子图检索，而是将任务/问题翻译成一个面向答案的特定图查询，和我们常说的 text2sql 方法本质是一样的。</p>
<h3 id="在-nebulagraph-上进行-text2cypher" class="headerLink">
    <a href="#%e5%9c%a8-nebulagraph-%e4%b8%8a%e8%bf%9b%e8%a1%8c-text2cypher" class="header-mark"></a>4.1 在 NebulaGraph 上进行 text2cypher</h3><p>在之前的文章中我们已经介绍过，得益于 LLM，实现 text2cypher 比传统的 ML 方法更为简单和便宜。</p>
<p>比如，<a href="https://python.langchain.com/docs/use_cases/more/graph/graph_nebula_qa" target="_blank" rel="noopener noreferrer">LangChain: NebulaGraphQAChain</a> 和 <a href="https://gpt-index.readthedocs.io/en/latest/examples/query_engine/knowledge_graph_query_engine.html" target="_blank" rel="noopener noreferrer">Llama Index: KnowledgeGraphQueryEngine</a> 让我们 3 行代码就能跑起来 text2cypher。</p>
<h3 id="比较-text2cypher-和-subgraph-rag" class="headerLink">
    <a href="#%e6%af%94%e8%be%83-text2cypher-%e5%92%8c-subgraph-rag" class="header-mark"></a>4.2 比较 text2cypher 和 (Sub)Graph RAG</h3><p>这两种方法主要在其检索机制上有所不同。text2cypher 根据 KG 的 Schema 和给定的任务生成图形模式查询，而SubGraph RAG获取相关的子图以提供上下文。</p>
<p>两者都有其优点，为了大家更直观理解他们的特点，我做了这个 demo 视频：</p>
<p>我们可以看到两者的图查询模式在可视化下是有非常清晰的差异的。</p>
<iframe width="800" height="857" src="https://github.com/siwei-io/talks/assets/1651790/05d01e53-d819-4f43-9bf1-75549f7f2be9"> </iframe>
<h3 id="结合text2cypher的graph-rag" class="headerLink">
    <a href="#%e7%bb%93%e5%90%88text2cypher%e7%9a%84graph-rag" class="header-mark"></a>4.3 结合text2cypher的Graph RAG</h3><p>然而，两者并没有绝对的好与坏，不同场景下，它们各有优劣。</p>
<p>在现实世界中，我们可能并不总是知道哪种方法更有效（好帮助区分应该用哪一种），因此，我倾向于考虑同时利用两者，这样获取的两种检索结果作为上下文，一起来生成最终答案的效果可能是最好的。</p>
<p>具体的实现方法在<a href="https://github.com/jerryjliu/llama_index/pull/7204" target="_blank" rel="noopener noreferrer">这个 PR</a>中已经可以做到了，只需要设置<code>with_text2cypher=True</code>，Graph RAG 就会包含text2cypher 上下文，敬请期待它的合并。</p>
<h2 id="结论" class="headerLink">
    <a href="#%e7%bb%93%e8%ae%ba" class="header-mark"></a>5 结论</h2><p>通过将知识图谱、图存储集成到 LLM 技术栈中，Graph RAG 把 RAG 的上下文学习推向了一个新的高度。它能在 LLM 应用中，通过利用现有（或新建）的知识图谱，提取细粒度、精确调整、领域特定且互联的知识。</p>
<p>请继续关注图谱和LLM领域的更深入的探索和进一步的发展。</p>
<blockquote>
<p>题图 prompt： A vast open book serves as the backdrop, with intricately interwoven nodes and lines forming a Graph on its pages. At the center of this graph, there&rsquo;s a glowing brain symbolizing the Knowledge Graph. Rays of light emanate from the brain, reaching every corner of the graph, mirroring neural connections linking diverse information. On the right side of the illustration, a robotic arm with a pen is swiftly writing, representing the input and output of the AI large language model.</p>
</blockquote>]]></description>
</item><item>
    <title>Text2Cypher：大语言模型驱动的图谱查询生成</title>
    <link>https://siwei.io/llm-text-to-nebulagraph-query/</link>
    <pubDate>Mon, 17 Jul 2023 20:30:04 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/llm-text-to-nebulagraph-query/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/llm-text-to-nebulagraph-query/featured-image.webp" referrerpolicy="no-referrer">
            </div><p>从 GPT-3 开始展现出超出预期的”理解能力“开始，我们一直在做 Graph + LLM 技术组合、互补的研究、探索和阜分享，截止到现在 NebulaGraph 已经在 LlamaIndex 与 Langchain 项目做出了不少领先的贡献，从本文开始，我们就把其中一些阶段性的成功、方法单独分享给大家。</p>
<p>本文的主题是我们认为这个领域最低垂的果实，text2cypher：自然语言生成图查询。</p>
<h2 id="text2cypher" class="headerLink">
    <a href="#text2cypher" class="header-mark"></a>1 Text2Cypher</h2><p>顾名思义， Text2Cypher 做的就是把自然语言的文本转换成 Cypher 查询语句的这件事儿，和另一个大家可能已经比较熟悉的场景 Text2SQL：文本转换 SQL 在形式上没有什么区别。而本质上，大多数知识图谱、图数据库的应用都是在图上按照人类意愿进行查询，我们在图数据库上构造方便的可视化工具、封装方便的 API 的工作都是为这个目标服务的。</p>
<p>一直以来，阻碍图数据库、知识图谱被更广泛应用的主要因素可能就是查询图数据库的门槛了。那么，在没有大语言模型的时候，我们是怎么做的呢？</p>
<h2 id="传统的-text2cypher" class="headerLink">
    <a href="#%e4%bc%a0%e7%bb%9f%e7%9a%84-text2cypher" class="header-mark"></a>2 传统的 Text2Cypher</h2><p>文本到查询的这个领域在大语言模型之前就一直存在这样的需求，一直是知识图谱最常见的应用之一，比如 KBQA（基于知识库的问答系统）的系统内部本质上就是 text2cypher。</p>
<p>这里以我之前写的项目 <a href="https://www.siwei.io/siwi" target="_blank" rel="noopener noreferrer">Siwi</a> （发音：/ˈsɪwi/， 一个基于篮球运动员数据集的问答应用）为例，了解一下它的后端架构：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">┌─────────────┬───────────────────────────────────┐
</span></span><span class="line"><span class="cl">│      Speech │  Frontend                         │
</span></span><span class="line"><span class="cl">│  ┌──────────▼──────────┐ Siwi, /ˈsɪwi/          │
</span></span><span class="line"><span class="cl">│  │ Web_Speech_API      │ A PoC of Dialog System │
</span></span><span class="line"><span class="cl">│  │ Vue.JS              │ With Graph Database    │
</span></span><span class="line"><span class="cl">│  │                     │ Backed Knowledge Graph │
</span></span><span class="line"><span class="cl">│  └──────────┬──────────┘                        │
</span></span><span class="line"><span class="cl">│             │  Sentence  Backend                │
</span></span><span class="line"><span class="cl">│┌────────────┼────────────────────────────┐      │
</span></span><span class="line"><span class="cl">││ ┌──────────▼──────────┐                 │      │
</span></span><span class="line"><span class="cl">││ │ Web API, Flask      │ ./app/          │      │
</span></span><span class="line"><span class="cl">││ └──────────┬──────────┘                 │      │
</span></span><span class="line"><span class="cl">││            │  Sentence  ./bot/          │      │
</span></span><span class="line"><span class="cl">││ ┌──────────▼──────────┐                 │      │
</span></span><span class="line"><span class="cl">││ │ Intent Matching,    │ ./bot/classifier│      │
</span></span><span class="line"><span class="cl">││ │ Symentic Processing │                 │      │
</span></span><span class="line"><span class="cl">││ └──────────┬──────────┘                 │      │
</span></span><span class="line"><span class="cl">││            │  Intent, Enties            │      │
</span></span><span class="line"><span class="cl">││ ┌──────────▼──────────┐                 │      │
</span></span><span class="line"><span class="cl">││ │ Intent Actor        │ ./bot/actions   │      │
</span></span><span class="line"><span class="cl">│└─┴──────────┬──────────┴─────────────────┘      │
</span></span><span class="line"><span class="cl">│             │  Graph Query                      │
</span></span><span class="line"><span class="cl">│  ┌──────────▼──────────┐                        │
</span></span><span class="line"><span class="cl">│  │ Graph Database      │  NebulaGraph           │
</span></span><span class="line"><span class="cl">│  └─────────────────────┘                        │
</span></span><span class="line"><span class="cl">└─────────────────────────────────────────────────┘
</span></span></code></pre></td></tr></table>
</div>
</div><p>当一个问题语句发送过来之后，它首先要做意图识别（Intent）、实体识别（Entity），然后再利用 NLP 模型或者代码把相应的意图和实体构造成知识图谱的查询语句，最终查询图数据库，并根据返回结构构造答案。</p>
<p>可以想象，让程序能够：</p>
<ul>
<li>从自然语言中理解意图：对应到哪一类支持回答的问题</li>
<li>找出实体：问题中涉及到的主要个体</li>
<li>从意图和实体构造查询语句</li>
</ul>
<p>不可能是一个容易的开发工作，一个真正能够落地的实现要训练的模型或者实现的规则代码所考虑的边界条件可能非常多。</p>
<h2 id="用语言模型做-text2cypher" class="headerLink">
    <a href="#%e7%94%a8%e8%af%ad%e8%a8%80%e6%a8%a1%e5%9e%8b%e5%81%9a-text2cypher" class="header-mark"></a>3 用语言模型做 Text2Cypher</h2><p>而在”后大语言模型“时代，这种从前需要专门训练或者写规则的”智能“应用场景成了通用模型+提示工程（Prompt Engineering）就能完成的任务。</p>
<blockquote>
<p>注：提示工程指通过自然语言描述，让生成模型、语言模型完成”智能“任务的方法。</p>
</blockquote>
<p>事实上，在 GPT-3 刚发布之后，我就开始利用它帮助我写很多非常复杂的 Cypher 查询语句了，我发现它可以写很多非常复杂的模式匹配、多步条件那种之前我需要一点点调试半天才能写出来的语句，通常在它的答案之上，我只需要稍微修改就可以了，而且往往我还能从它的答案里知道我之前没了解到的 Cypher 语法盲区。</p>
<p>后来，在今年二月份的时候，我就试着实现了一个基于 GPT-3 （因为那时候还没有 GPT-3.5）的项目：<a href="https://ngql-gpt.siwei.io/" target="_blank" rel="noopener noreferrer">ngql-GPT</a>（<a href="https://github.com/wey-gu/NebulaGraph-GPT" target="_blank" rel="noopener noreferrer">代码仓库</a>）。</p>
<iframe width="800" height="450" src="https://user-images.githubusercontent.com/1651790/218627408-995b81e1-9b01-423c-ba90-849faaad6f5d.mp4"> </iframe>
<p>它的工作原理非常简单，和 Text2SQL 没有区别，语言模型已经通过公共领域学习了 Cypher 的语法表达，我们在提出任务的时候，只需要让大模型知道我们要查询的图的 Schema 作为上下文就可以了。</p>
<p>所以，基本上 Prompt 就是：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">你是一位 NebulaGraph Cypher 专家，请根据给定的图 Schema 和问题，写出查询语句。
</span></span><span class="line"><span class="cl">schema 如下：
</span></span><span class="line"><span class="cl">---
</span></span><span class="line"><span class="cl">{schema}
</span></span><span class="line"><span class="cl">---
</span></span><span class="line"><span class="cl">问题如下：
</span></span><span class="line"><span class="cl">---
</span></span><span class="line"><span class="cl">{question}
</span></span><span class="line"><span class="cl">---
</span></span><span class="line"><span class="cl">下面写出查询语句：
</span></span></code></pre></td></tr></table>
</div>
</div><p>然而，真实世界的 prompt 往往还需要增加额外的要求：</p>
<ul>
<li>只返回语句，不用给出解释，不用道歉</li>
<li>强调不要写超出 schema 之外的点、边类型</li>
</ul>
<p>感兴趣的同学可以参考我在 LlamaIndex 的 <a href="https://github.com/jerryjliu/llama_index/blob/71919f9dfa09e9628af8b3a59d497ad02a7a82f8/llama_index/query_engine/knowledge_graph_query_engine.py#L24" target="_blank" rel="noopener noreferrer">KnowlegeGraph Query Engine 中的实现</a>。</p>
<p>在真实场景中，我们想快速学习、构建大语言模型应用的时候，常常会用到 Langchain 或者 LlamaIndex 这样的编排（Orchestrator）工具，它们可以帮我们做很多合理的抽象，从而避免从头去实现很多通用的脚手架代码：</p>
<ul>
<li>和不同语言模型交互</li>
<li>和不同向量数据库交互</li>
<li>数据分割</li>
</ul>
<p>而且，这些编排工具还内置了很多工程方法的最佳实践，这样，我们常常调用一个方法就可以用到最新最好用的大语言模型研究论文的方法了，比如 <a href="https://github.com/jerryjliu/llama_index/tree/main/llama_index/query_engine/flare" target="_blank" rel="noopener noreferrer">FLARE</a>、<a href="https://github.com/jerryjliu/llama_index/blob/main/docs/community/integrations/guidance.md" target="_blank" rel="noopener noreferrer">Guidence</a>。</p>
<p>为此，我在 LlamaIndex 和 Langchain 中都贡献了可以方便进行 NebulaGraph 上 Text2Cypher 的工具，真正做到 3 行代码，Text2Cypher。</p>
<h2 id="nebulagraph-上的-text2cypher" class="headerLink">
    <a href="#nebulagraph-%e4%b8%8a%e7%9a%84-text2cypher" class="header-mark"></a>4 NebulaGraph 上的 Text2Cypher</h2><p>在 LlamaIndex 的 <code>KnowledgeQueryEngine</code> 和 LangChain 的 <code>NebulaGraphQAChain</code> 中：NebulaGraph 图数据库的 Schema 获取、Cypher 语句生成的 Prompt、各种 LLM 的调用、结果的处理、衔接我们可以全都不用关心，开箱即用！</p>
<h3 id="使用-llamaindex" class="headerLink">
    <a href="#%e4%bd%bf%e7%94%a8-llamaindex" class="header-mark"></a>4.1 使用 LlamaIndex</h3><p>用 LlamaIndex，我们只需要：</p>
<ul>
<li>创建一个 <code>NebulaGraphStore</code> 实例</li>
<li>创建一个 <code>KnowledgeQueryEngine</code></li>
</ul>
<p>就可以直接进行问答了，是不是超级简单？</p>
<blockquote>
<p>参考文档：https://gpt-index.readthedocs.io/en/latest/examples/query_engine/knowledge_graph_query_engine.html</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">llama_index.query_engine</span> <span class="kn">import</span> <span class="n">KnowledgeGraphQueryEngine</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">llama_index.storage.storage_context</span> <span class="kn">import</span> <span class="n">StorageContext</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">llama_index.graph_stores</span> <span class="kn">import</span> <span class="n">NebulaGraphStore</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">graph_store</span> <span class="o">=</span> <span class="n">NebulaGraphStore</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">space_name</span><span class="o">=</span><span class="n">space_name</span><span class="p">,</span> <span class="n">edge_types</span><span class="o">=</span><span class="n">edge_types</span><span class="p">,</span> <span class="n">rel_prop_names</span><span class="o">=</span><span class="n">rel_prop_names</span><span class="p">,</span> <span class="n">tags</span><span class="o">=</span><span class="n">tags</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">storage_context</span> <span class="o">=</span> <span class="n">StorageContext</span><span class="o">.</span><span class="n">from_defaults</span><span class="p">(</span><span class="n">graph_store</span><span class="o">=</span><span class="n">graph_store</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">nl2kg_query_engine</span> <span class="o">=</span> <span class="n">KnowledgeGraphQueryEngine</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">storage_context</span><span class="o">=</span><span class="n">storage_context</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">service_context</span><span class="o">=</span><span class="n">service_context</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">llm</span><span class="o">=</span><span class="n">llm</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">verbose</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 问答</span>
</span></span><span class="line"><span class="cl"><span class="n">response</span> <span class="o">=</span> <span class="n">nl2kg_query_engine</span><span class="o">.</span><span class="n">query</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Tell me about Peter Quill?&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 只生成语句</span>
</span></span><span class="line"><span class="cl"><span class="n">graph_query</span> <span class="o">=</span> <span class="n">nl2kg_query_engine</span><span class="o">.</span><span class="n">generate_query</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Tell me about Peter Quill?&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="使用-langchain" class="headerLink">
    <a href="#%e4%bd%bf%e7%94%a8-langchain" class="header-mark"></a>4.2 使用 Langchain</h3><p>类似的，在 Langchain 里，我们只需要：</p>
<ul>
<li>创建一个 <code>NebulaGraph</code>实例</li>
<li>创建一个 <code>NebulaGraphQAChain</code> 实例</li>
</ul>
<p>就可以直接提问了。</p>
<blockquote>
<p>参考文档：https://python.langchain.com/docs/modules/chains/additional/graph_nebula_qa</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">langchain.chat_models</span> <span class="kn">import</span> <span class="n">ChatOpenAI</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">langchain.chains</span> <span class="kn">import</span> <span class="n">NebulaGraphQAChain</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">langchain.graphs</span> <span class="kn">import</span> <span class="n">NebulaGraph</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">graph</span> <span class="o">=</span> <span class="n">NebulaGraph</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">space</span><span class="o">=</span><span class="n">space_name</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">username</span><span class="o">=</span><span class="s2">&#34;root&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">password</span><span class="o">=</span><span class="s2">&#34;nebula&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">address</span><span class="o">=</span><span class="s2">&#34;127.0.0.1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">port</span><span class="o">=</span><span class="mi">9669</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">session_pool_size</span><span class="o">=</span><span class="mi">30</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">chain</span> <span class="o">=</span> <span class="n">NebulaGraphQAChain</span><span class="o">.</span><span class="n">from_llm</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">llm</span><span class="p">,</span> <span class="n">graph</span><span class="o">=</span><span class="n">graph</span><span class="p">,</span> <span class="n">verbose</span><span class="o">=</span><span class="kc">True</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">chain</span><span class="o">.</span><span class="n">run</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Tell me about Peter Quill?&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="demo" class="headerLink">
    <a href="#demo" class="header-mark"></a>5 Demo</h2><p><a href="https://www.siwei.io/demos/text2cypher/" target="_blank" rel="noopener noreferrer">demo 地址</a></p>
<iframe width="800" height="857" src="https://user-images.githubusercontent.com/1651790/254521700-6de6aadf-4b62-495a-9276-ef866ebb4add.mp4"> </iframe>
<p>这个 Demo 展示了如何利用 LLM 从不同类型的信息源（以维基百科为例）中抽取知识三元组，并存储到图数据库 NebulaGraph 中。</p>
<p>本 Demo 中，我们先抽取了维基百科中关于《银河护卫队3》的信息，然后利用 LLM 生成的知识三元组，构建了一个图谱。 然后利用 Cypher 查询图谱，最后利用 LlamaIndex 和 Langchain 中的 Text2Cypher，实现了自然语言查询图谱的功能。</p>
<p>您可以点击其他标签亲自试玩图谱的可视化、Cypher 查询、自然语言查询（Text2Cypher）等功能。</p>
<p>这里可以<a href="https://www.siwei.io/demo-dumps/kg-llm/KG_Building.ipynb" target="_blank" rel="noopener noreferrer">下载</a> 完整的 Notebook。</p>
<h2 id="结论" class="headerLink">
    <a href="#%e7%bb%93%e8%ae%ba" class="header-mark"></a>6 结论</h2><p>有了 LLM，知识图谱、NebulaGraph 图数据库中的的数据中进行 Text2Cypher 从来没有这么简单过。</p>
<p>一个具有更强人机、机器接入的知识图谱可以代表了全新的时代，我们可能不需要从前那样高额成本去实现图库之上的后端服务，也不再需要培训才能让领域专家从图中获取重要的洞察了。</p>
<p>利用 LlamaIndex 或者 Langchain 中的生态集成，我们可以几乎没有开发成本地几行代码把自己的应用、图数据智能化。</p>
<p>然而，Text2Cypher 只是一个开始，请大家关注我们后续的文章，展现更多知识图谱、图数据库为大语言模型生态带来的变革。</p>
<blockquote>
<p>题图 <strong>prompt</strong>：</p>
<p><em>In an artful fusion of language and AI, this minimalist oil painting captures the essence of technological advancement. Delicate brushstrokes depict a harmony of binary code and flowing words, converging into a central point. With a refined color palette and clean composition, the artwork represents the symbiotic relationship between language and artificial intelligence, inviting contemplation and appreciation.</em></p>
</blockquote>]]></description>
</item><item>
    <title>NebulaGraph in Jupyter Notebook</title>
    <link>https://siwei.io/nebulagraph-in-jupyter-notebook/</link>
    <pubDate>Tue, 06 Jun 2023 13:34:52 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/nebulagraph-in-jupyter-notebook/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/nebulagraph-in-jupyter-notebook/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>现在，我们可以在 Jupyter Notebook 中更方便地玩 NebulaGraph 图数据库了，只需要<code>%ngql MATCH p=(n:player)-&gt;() RETURN p</code> 就可以直接查询 ，<code>%ng_draw</code> 就可以画出返回结果。</p>
</blockquote>
<p><a href="https://www.siwei.io/en/nebulagraph-in-jupyter-notebook/" target="_blank" rel="noopener noreferrer">English version</a></p>
<p>最近，我把两年前一直没完成的 NebulaGraph 的 Jupyter Notebook 扩展： <code>ipython-ngql</code> 重构，正式发布了，现在它除了完全适配 NebulaGrpah 3.x 所有查询之外，还支持了 Notebook 内的返回结果可视化，本文给大家介绍一下如何使用  <code>ipython-ngql</code> ！</p>
<h2 id="安装" class="headerLink">
    <a href="#%e5%ae%89%e8%a3%85" class="header-mark"></a>1 安装</h2><p>安装非常简单，只需要在 Jupyter Notebook 里边执行 <code>%pip install ipython-ngql</code> 然后再加载它就好：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">%</span><span class="n">pip</span> <span class="n">install</span> <span class="n">ipython</span><span class="o">-</span><span class="n">ngql</span>
</span></span><span class="line"><span class="cl"><span class="o">%</span><span class="n">load_ext</span> <span class="n">ngql</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后，我们就可以用 <code>%ngql</code> 这个 Jupyter Magic word 连接 NebulaGraph 了：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">%</span><span class="n">ngql</span> <span class="o">--</span><span class="n">address</span> <span class="mf">127.0.0.1</span> <span class="o">--</span><span class="n">port</span> <span class="mi">9669</span> <span class="o">--</span><span class="n">user</span> <span class="n">root</span> <span class="o">--</span><span class="n">password</span> <span class="n">nebula</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>当连接成功之后，<code>SHOW SPACES</code> 的结果会返回在这个 notebook cell 下。</p>
<blockquote>
<p>💡 注：你可以从 Docker 桌面版的扩展市场里搜索 NebulaGraph 一键安装本地开发环境，进入 NebulaGraph Docker 扩展内部，点击 NebulaGraph AI ，点击 <strong>Install NX Mode</strong> 安装本地的 NebulaGraph + Jupyter Notebook 开发环境。</p>
<p><figure><a class="lightgallery" href="/nebulagraph-in-jupyter-notebook/dd-extension-ai-playground.webp" title="/nebulagraph-in-jupyter-notebook/dd-extension-ai-playground.webp" data-thumbnail="/nebulagraph-in-jupyter-notebook/dd-extension-ai-playground.webp">
        <img
            
            loading="lazy"
            src="/nebulagraph-in-jupyter-notebook/dd-extension-ai-playground.webp"
            srcset="/nebulagraph-in-jupyter-notebook/dd-extension-ai-playground.webp, /nebulagraph-in-jupyter-notebook/dd-extension-ai-playground.webp 1.5x, /nebulagraph-in-jupyter-notebook/dd-extension-ai-playground.webp 2x"
            sizes="auto"
            alt="/nebulagraph-in-jupyter-notebook/dd-extension-ai-playground.webp" height="1778"  width="3038" >
    </a></figure></p>
</blockquote>
<h2 id="查询" class="headerLink">
    <a href="#%e6%9f%a5%e8%af%a2" class="header-mark"></a>2 查询</h2><p>现在支持两种语法 <code>%ngql</code> 接单行查询和 <code>%%ngql</code> 接多行查询。</p>
<h3 id="单行查询" class="headerLink">
    <a href="#%e5%8d%95%e8%a1%8c%e6%9f%a5%e8%af%a2" class="header-mark"></a>2.1 单行查询</h3><p>例如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">%ngql USE basketballplayer;
</span></span><span class="line"><span class="cl">%ngql MATCH (v:player{name:&#34;Tim Duncan&#34;})--&gt;(v2:player) RETURN v2.player.name AS Name;
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="多行查询" class="headerLink">
    <a href="#%e5%a4%9a%e8%a1%8c%e6%9f%a5%e8%af%a2" class="header-mark"></a>2.2 多行查询</h3><p>例如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">%%</span><span class="n">ngql</span>
</span></span><span class="line"><span class="cl"><span class="n">ADD</span> <span class="n">HOSTS</span> <span class="s2">&#34;storaged3&#34;</span><span class="p">:</span><span class="mi">9779</span><span class="p">,</span><span class="s2">&#34;storaged4&#34;</span><span class="p">:</span><span class="mi">9779</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">SHOW</span> <span class="n">HOSTS</span><span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="渲染结果" class="headerLink">
    <a href="#%e6%b8%b2%e6%9f%93%e7%bb%93%e6%9e%9c" class="header-mark"></a>3 渲染结果</h2><p>而在任意一个查询之后，紧跟着一个 <code>%ng_draw</code> 就可以把结果可视化渲染出来：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># one query</span>
</span></span><span class="line"><span class="cl"><span class="o">%</span><span class="n">ngql</span> <span class="n">GET</span> <span class="n">SUBGRAPH</span> <span class="mi">2</span> <span class="n">STEPS</span> <span class="n">FROM</span> <span class="s2">&#34;player101&#34;</span> <span class="n">YIELD</span> <span class="n">VERTICES</span> <span class="n">AS</span> <span class="n">nodes</span><span class="p">,</span> <span class="n">EDGES</span> <span class="n">AS</span> <span class="n">relationships</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="o">%</span><span class="n">ng_draw</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># another query</span>
</span></span><span class="line"><span class="cl"><span class="o">%</span><span class="n">ngql</span> <span class="k">match</span> <span class="n">p</span><span class="o">=</span><span class="p">(:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[]</span><span class="o">-&gt;</span><span class="p">()</span> <span class="k">return</span> <span class="n">p</span> <span class="n">LIMIT</span> <span class="mi">5</span>
</span></span><span class="line"><span class="cl"><span class="o">%</span><span class="n">ng_draw</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>效果：</p>
<p><figure><a class="lightgallery" href="/nebulagraph-in-jupyter-notebook/render_result.webp" title="render_result" data-thumbnail="/nebulagraph-in-jupyter-notebook/render_result.webp">
        <img
            
            loading="lazy"
            src="/nebulagraph-in-jupyter-notebook/render_result.webp"
            srcset="/nebulagraph-in-jupyter-notebook/render_result.webp, /nebulagraph-in-jupyter-notebook/render_result.webp 1.5x, /nebulagraph-in-jupyter-notebook/render_result.webp 2x"
            sizes="auto"
            alt="render_result" height="1526"  width="2274" >
    </a></figure></p>
<p>并且，渲染的结果还会被保存为<a href="https://github.com/wey-gu/ipython-ngql/blob/main/examples/nebulagraph_draw_match.html" target="_blank" rel="noopener noreferrer">单文件 html</a> ，这样我们可以内嵌到任意网页中，像是：</p>
<iframe src="nebulagraph_draw_match.html" style="height:500px;width:800px" title="Graph"></iframe>
<h2 id="高级应用" class="headerLink">
    <a href="#%e9%ab%98%e7%ba%a7%e5%ba%94%e7%94%a8" class="header-mark"></a>4 高级应用</h2><p>下面还有一些方便的高级应用。比如 <code>%ngql help</code>  可以获得更多帮助信息。</p>
<h3 id="操作查询结果为-pandas-df" class="headerLink">
    <a href="#%e6%93%8d%e4%bd%9c%e6%9f%a5%e8%af%a2%e7%bb%93%e6%9e%9c%e4%b8%ba-pandas-df" class="header-mark"></a>4.1 操作查询结果为 pandas df</h3><p>每一次 query 之后，返回的结果会被存到 <code>_</code> 变量中，我们可以对它进行读取：</p>
<p><figure><a class="lightgallery" href="/nebulagraph-in-jupyter-notebook/load_result.webp" title="load_result" data-thumbnail="/nebulagraph-in-jupyter-notebook/load_result.webp">
        <img
            
            loading="lazy"
            src="/nebulagraph-in-jupyter-notebook/load_result.webp"
            srcset="/nebulagraph-in-jupyter-notebook/load_result.webp, /nebulagraph-in-jupyter-notebook/load_result.webp 1.5x, /nebulagraph-in-jupyter-notebook/load_result.webp 2x"
            sizes="auto"
            alt="load_result" height="640"  width="1226" >
    </a></figure></p>
<h3 id="返回原始-resultset" class="headerLink">
    <a href="#%e8%bf%94%e5%9b%9e%e5%8e%9f%e5%a7%8b-resultset" class="header-mark"></a>4.2 返回原始 ResultSet</h3><p>默认，返回的结果的格式是 pandas df，而如果我们想在 Jupyter Notebook 中交互调试 Python 的 NebulaGraph 应用代码的时候，我们也可以将返回结果设置为原始的 ResultSet 格式，方便直观进行 Query 与结果解析，例如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="p">:</span> <span class="o">%</span><span class="n">config</span> <span class="n">IPythonNGQL</span><span class="o">.</span><span class="n">ngql_result_style</span><span class="o">=</span><span class="s2">&#34;raw&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="p">:</span> <span class="o">%%</span><span class="n">ngql</span> <span class="n">USE</span> <span class="n">pokemon_club</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span><span class="p">:</span> <span class="n">GO</span> <span class="n">FROM</span> <span class="s2">&#34;Tom&#34;</span> <span class="n">OVER</span> <span class="n">owns_pokemon</span> <span class="n">YIELD</span> <span class="n">owns_pokemon</span><span class="o">.</span><span class="n">_dst</span> <span class="k">as</span> <span class="n">pokemon_id</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span><span class="p">:</span> <span class="o">|</span> <span class="n">GO</span> <span class="n">FROM</span> <span class="err">$</span><span class="o">-.</span><span class="n">pokemon_id</span> <span class="n">OVER</span> <span class="n">owns_pokemon</span> <span class="n">REVERSELY</span> <span class="n">YIELD</span> <span class="n">owns_pokemon</span><span class="o">.</span><span class="n">_dst</span> <span class="n">AS</span> <span class="n">Trainer_Name</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span><span class="p">:</span>
</span></span><span class="line"><span class="cl"><span class="n">Out</span><span class="p">[</span><span class="mi">3</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl"><span class="n">ResultSet</span><span class="p">(</span><span class="n">ExecutionResponse</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">error_code</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">latency_in_us</span><span class="o">=</span><span class="mi">3270</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">data</span><span class="o">=</span><span class="n">DataSet</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">column_names</span><span class="o">=</span><span class="p">[</span><span class="sa">b</span><span class="s1">&#39;Trainer_Name&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="n">rows</span><span class="o">=</span><span class="p">[</span><span class="n">Row</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">values</span><span class="o">=</span><span class="p">[</span><span class="n">Value</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="n">sVal</span><span class="o">=</span><span class="sa">b</span><span class="s1">&#39;Tom&#39;</span><span class="p">)]),</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl">        <span class="n">Row</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">values</span><span class="o">=</span><span class="p">[</span><span class="n">Value</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="n">sVal</span><span class="o">=</span><span class="sa">b</span><span class="s1">&#39;Wey&#39;</span><span class="p">)])]),</span>
</span></span><span class="line"><span class="cl">    <span class="n">space_name</span><span class="o">=</span><span class="sa">b</span><span class="s1">&#39;pokemon_club&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">4</span><span class="p">]:</span> <span class="n">r</span> <span class="o">=</span> <span class="n">_</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">5</span><span class="p">]:</span> <span class="n">r</span><span class="o">.</span><span class="n">column_values</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="s1">&#39;Trainer_Name&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">cast</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">Out</span><span class="p">[</span><span class="mi">5</span><span class="p">]:</span> <span class="s1">&#39;Tom&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="查询模板" class="headerLink">
    <a href="#%e6%9f%a5%e8%af%a2%e6%a8%a1%e6%9d%bf" class="header-mark"></a>4.3 查询模板</h3><p>此外，我还给大家支持了模板功能，语法沿用了 <a href="https://jinja.palletsprojects.com/" target="_blank" rel="noopener noreferrer">Jinja2</a> 的 <code>{{ variable }}</code> ，详见这个例子：</p>
<p><figure><a class="lightgallery" href="/nebulagraph-in-jupyter-notebook/query_template.webp" title="query_template" data-thumbnail="/nebulagraph-in-jupyter-notebook/query_template.webp">
        <img
            
            loading="lazy"
            src="/nebulagraph-in-jupyter-notebook/query_template.webp"
            srcset="/nebulagraph-in-jupyter-notebook/query_template.webp, /nebulagraph-in-jupyter-notebook/query_template.webp 1.5x, /nebulagraph-in-jupyter-notebook/query_template.webp 2x"
            sizes="auto"
            alt="query_template" height="550"  width="2300" >
    </a></figure></p>
<h2 id="未来" class="headerLink">
    <a href="#%e6%9c%aa%e6%9d%a5" class="header-mark"></a>5 未来</h2><p>之后，我打算增强可视化的自定义选项，也欢迎社区里的大伙来贡献新的 feature、idea。</p>
<p>项目的 repo 在 👉🏻 <a href="https://github.com/wey-gu/ipython-ngql" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/ipython-ngql</a></p>]]></description>
</item><item>
    <title>图谱驱动的大语言模型 Llama Index</title>
    <link>https://siwei.io/graph-enabled-llama-index/</link>
    <pubDate>Thu, 01 Jun 2023 14:52:53 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/graph-enabled-llama-index/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/graph-enabled-llama-index/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>如何利用图谱构建更好的 In-context Learning 大语言模型应用。</p>
</blockquote>
<p><a href="https://www.siwei.io/en/graph-enabled-llama-index/" target="_blank" rel="noopener noreferrer">English version</a></p>
<blockquote>
<p>注：本文是我最初以英文撰写的，然后麻烦 ChatGPT 帮我翻译成了英文，翻译的 prompt 是：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">In this thread, you are a Chinese Tech blogger to help translate my blog in markdown from English into Chinese, the blog style is clear, fun yet professional. I will paste chapters in markdown to you and you will send back the translated and polished version.
</span></span></code></pre></td></tr></table>
</div>
</div></blockquote>
<h2 id="llm-应用的范式" class="headerLink">
    <a href="#llm-%e5%ba%94%e7%94%a8%e7%9a%84%e8%8c%83%e5%bc%8f" class="header-mark"></a>1 LLM 应用的范式</h2><p>作为认知智能的一大突破，LLM 已经改变了许多行业，以一种我们没有预料到的方式进行自动化、加速和启用。每天都会看到新的 LLN 应用被创建出来，我们仍然在探索如何利用这种魔力的新方法和用例。</p>
<p>将 LLM 引入流程的最典型模式之一是要求 LLM 根据专有的/特定领域的知识理解事物。目前，我们可以向 LLM 添加两种范式以获取这些知识：微调——fine-tune和<a href="https://en.wikipedia.org/wiki/In-context_learning_%28natural_language_processing%29" target="_blank" rel="noopener noreferrer">上下文学习</a>—— in-context learning。</p>
<p>微调是指对 LLM 模型进行附加训练，以增加额外的知识；而上下文学习是在查询提示中添加一些额外的知识。我们目前观察到，<a href="https://arxiv.org/abs/2305.16938" target="_blank" rel="noopener noreferrer">由于其简单性，上下文学习比微调更受欢迎</a>。</p>
<p>在本博客中，我将分享我们在上下文学习方法方面所做的工作。</p>
<h2 id="llama-index数据与-llm-之间的接口" class="headerLink">
    <a href="#llama-index%e6%95%b0%e6%8d%ae%e4%b8%8e-llm-%e4%b9%8b%e9%97%b4%e7%9a%84%e6%8e%a5%e5%8f%a3" class="header-mark"></a>2 Llama Index：数据与 LLM 之间的接口</h2><h3 id="上下文学习" class="headerLink">
    <a href="#%e4%b8%8a%e4%b8%8b%e6%96%87%e5%ad%a6%e4%b9%a0" class="header-mark"></a>2.1 上下文学习</h3><p>上下文学习的基本思想是使用现有的 LLM（未更新）来处理特定知识数据集的特殊任务。</p>
<p>例如，要构建一个可以回答关于某个人的任何问题，甚至扮演一个人的数字化化身的应用程序，我们可以将上下文学习应用于一本自传书籍和 LLM。在实践中，应用程序将使用用户的问题和从书中&quot;搜索&quot;到的一些信息构建提示，然后查询 LLM 来获取答案。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">┌───────┐         ┌─────────────────┐         ┌─────────┐
</span></span><span class="line"><span class="cl">│       │         │ Docs/Knowledge  │         │         │
</span></span><span class="line"><span class="cl">│       │         └─────────────────┘         │         │
</span></span><span class="line"><span class="cl">│ User  │─────────────────────────────────────▶   LLM   │
</span></span><span class="line"><span class="cl">│       │                                     │         │
</span></span><span class="line"><span class="cl">│       │                                     │         │
</span></span><span class="line"><span class="cl">└───────┘                                     └─────────┘
</span></span></code></pre></td></tr></table>
</div>
</div><p>在这种搜索方法中，实现从文档/知识（上述示例中的那本书）中获取与特定任务相关信息的最有效方式之一是利用嵌入（Embedding）。</p>
<h3 id="嵌入embedding" class="headerLink">
    <a href="#%e5%b5%8c%e5%85%a5embedding" class="header-mark"></a>2.2 嵌入（Embedding）</h3><p>嵌入通常指的是将现实世界的事物映射到多维空间中的向量的方法。例如，我们可以将图像映射到一个（64 x 64）维度的空间中，如果映射足够好，两个图像之间的距离可以反映它们的相似性。</p>
<p>嵌入的另一个例子是 word2vec 算法，它将每个单词都映射到一个向量中。例如，如果嵌入足够好，我们可以对它们进行加法和减法操作，可能会得到以下结果：</p>
<ul>
<li><code>vec(apple) + vec(pie) =~ vec(&quot;apple apie&quot;)</code></li>
</ul>
<p>或者向量测量值 <code>vec(apple) + vec(pie) - vec(&quot;apple apie&quot;)</code> 趋近于0：</p>
<ul>
<li><code>|vec(apple) + vec(pie) - vec(&quot;apple apie&quot;)| =~ 0</code></li>
</ul>
<p>类似地，&ldquo;pear&rdquo; 应该比 &ldquo;dinosaur&rdquo; 更接近 &ldquo;apple&rdquo;：</p>
<ul>
<li><code>|vec(apple) - vec(pear)| &lt; |vec(apple) - vec(dinosaur)|</code></li>
</ul>
<p>有了这个基础，理论上我们可以搜索与给定问题更相关的书籍片段。基本过程如下：</p>
<ul>
<li>将书籍分割为小片段，为每个片段创建嵌入并存储它们</li>
<li>当有一个问题时，计算问题的嵌入</li>
<li>通过计算距离找到与书籍片段最相似的前 K 个嵌入</li>
<li>使用问题和书籍片段构建提示</li>
<li>使用提示查询 LLM</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">                  ┌────┬────┬────┬────┐                  
</span></span><span class="line"><span class="cl">                  │ 1  │ 2  │ 3  │ 4  │                  
</span></span><span class="line"><span class="cl">                  ├────┴────┴────┴────┤                  
</span></span><span class="line"><span class="cl">                  │  Docs/Knowledge   │                  
</span></span><span class="line"><span class="cl">┌───────┐         │        ...        │       ┌─────────┐
</span></span><span class="line"><span class="cl">│       │         ├────┬────┬────┬────┤       │         │
</span></span><span class="line"><span class="cl">│       │         │ 95 │ 96 │    │    │       │         │
</span></span><span class="line"><span class="cl">│       │         └────┴────┴────┴────┘       │         │
</span></span><span class="line"><span class="cl">│ User  │─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─▶   LLM   │
</span></span><span class="line"><span class="cl">│       │                                     │         │
</span></span><span class="line"><span class="cl">│       │                                     │         │
</span></span><span class="line"><span class="cl">└───────┘    ┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐  └─────────┘
</span></span><span class="line"><span class="cl">    │          ┌──────────────────────────┐        ▲     
</span></span><span class="line"><span class="cl">    └────────┼▶│  Tell me ....., please   │├───────┘     
</span></span><span class="line"><span class="cl">               └──────────────────────────┘              
</span></span><span class="line"><span class="cl">             │ ┌────┐ ┌────┐               │             
</span></span><span class="line"><span class="cl">               │ 3  │ │ 96 │                             
</span></span><span class="line"><span class="cl">             │ └────┘ └────┘               │             
</span></span><span class="line"><span class="cl">              ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ 
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="llama-index" class="headerLink">
    <a href="#llama-index" class="header-mark"></a>2.3 Llama Index</h3><p>Llama Index 是一个开源工具包，它能帮助我们以最佳实践去做 in-context learning：</p>
<ul>
<li>它提供了各种数据加载器，以统一格式序列化文档/知识，例如 PDF、维基百科页面、Notion、Twitter 等等，这样我们可以无需自行处理预处理、将数据分割为片段等操作。</li>
<li>它还可以帮助我们创建嵌入（以及其他形式的索引），并以一行代码的方式存储嵌入（在内存中或<a href="https://github.com/openai/openai-cookbook/blob/main/examples/vector_databases/Using_vector_databases_for_embeddings_search.ipynb" target="_blank" rel="noopener noreferrer">向量数据库</a>中）。</li>
<li>它内置了提示和其他工程实现，因此我们无需从头开始创建和研究，例如，<a href="https://twitter.com/jerryjliu0/status/1663213212932902913" target="_blank" rel="noopener noreferrer">用4行代码在现有数据上创建一个聊天机器人</a>。</li>
</ul>
<h2 id="文档分割和嵌入的问题" class="headerLink">
    <a href="#%e6%96%87%e6%a1%a3%e5%88%86%e5%89%b2%e5%92%8c%e5%b5%8c%e5%85%a5%e7%9a%84%e9%97%ae%e9%a2%98" class="header-mark"></a>3 文档分割和嵌入的问题</h2><p>嵌入和向量搜索在许多情况下效果良好，但在某些情况下仍存在挑战，其中之一是可能丢失全局上下文/跨节点上下文。</p>
<p>想象一下，当查询&quot;请告诉我关于作者和 foo 的事情&quot;，在这本书中，假设编号为 1、3、6、19~25、30~44 和 96~99 的分段都涉及到 foo 这个主题。则在这种情况下，简单地搜索与书籍片段相关的前 k 个嵌入可能效果不尽人意，因为这时候只考虑与之最相关的几个片段（比如 k = 3），从而丢失了许多上下文信息。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">┌────┬────┬────┬────┐
</span></span><span class="line"><span class="cl">│ 1  │ 2  │ 3  │ 4  │
</span></span><span class="line"><span class="cl">├────┴────┴────┴────┤
</span></span><span class="line"><span class="cl">│  Docs/Knowledge   │
</span></span><span class="line"><span class="cl">│        ...        │
</span></span><span class="line"><span class="cl">├────┬────┬────┬────┤
</span></span><span class="line"><span class="cl">│ 95 │ 96 │    │    │
</span></span><span class="line"><span class="cl">└────┴────┴────┴────┘
</span></span></code></pre></td></tr></table>
</div>
</div><p>而解决、缓解这个问题的方法，在 Llama Index 工具的语境下，就是创建<a href="https://gpt-index.readthedocs.io/en/latest/how_to/index_structs/composability.html" target="_blank" rel="noopener noreferrer">组合索引</a>和<a href="https://gpt-index.readthedocs.io/en/latest/guides/primer/index_guide.html" target="_blank" rel="noopener noreferrer">综合索引</a>。</p>
<p>其中，向量存储（VectorStore）只是其中的一部分。除此之外，我们可以定义一个摘要索引和/或树形索引等，以<a href="https://gpt-index.readthedocs.io/en/latest/guides/tutorials/unified_query.html" target="_blank" rel="noopener noreferrer">将不同类型的问题路由到不同的索引</a>，从而避免在需要全局上下文时丧失它。</p>
<p>然而，借助知识图谱，我们可以采取更有意思的方法：</p>
<h2 id="知识图谱" class="headerLink">
    <a href="#%e7%9f%a5%e8%af%86%e5%9b%be%e8%b0%b1" class="header-mark"></a>4 知识图谱</h2><p>知识图谱这个术语最初由<a href="https://blog.google/products/search/introducing-knowledge-graph-things-not/" target="_blank" rel="noopener noreferrer">谷歌在2012年5月提出</a>，作为其增强搜索结果和向用户提供更多上下文信息的努力的一部分。知识图谱旨在理解实体之间的关系，并直接提供查询的答案，而不仅仅返回相关网页的列表。</p>
<p>知识图谱是一种以图形格式组织和连接信息的方式，其中节点表示实体，边表示实体之间的关系。图形结构允许高效地存储、检索和分析数据。</p>
<p>它的结构如下图所示：</p>
<iframe src="harry_potter_graph.html" style="height:500px;width:800px" title="Graph"></iframe>
<p>那么知识图谱到底能怎么帮到我们呢？</p>
<h2 id="嵌入和知识图谱的结合" class="headerLink">
    <a href="#%e5%b5%8c%e5%85%a5%e5%92%8c%e7%9f%a5%e8%af%86%e5%9b%be%e8%b0%b1%e7%9a%84%e7%bb%93%e5%90%88" class="header-mark"></a>5 嵌入和知识图谱的结合</h2><p>这里的基本思想是，作为信息的精炼格式，知识图谱可以以比我们对原始数据/文档进行的分割更小的粒度进行查询/搜索。因此，通过不替换大块的数据，而是将两者结合起来，我们可以更好地搜索需要全局/跨节点上下文的查询。</p>
<p>请看下面的图示，假设问题是关于 <code>x</code> 的，所有数据片段中有20个与它高度相关。现在，除了获取主要上下文的前3个文档片段（比如编号为 1、2 和 96 的文档片段），我们还从知识图谱中对 <code>x</code> 进行两次跳转查询，那么完整的上下文将包括：</p>
<ul>
<li>问题：&ldquo;Tell me things about the author and x&rdquo;</li>
<li>来自文档片段编号 1、2 和 96 的原始文档，在 Llama Index 中，它们被称为节点 1、节点 2 和节点 96。</li>
<li>包含 &ldquo;x&rdquo; 的知识图谱中的 10 个三元组，通过对 <code>x</code> 进行两层深度的图遍历得到：
<ul>
<li>x -&gt; y（来自节点 1）</li>
<li>x -&gt; a（来自节点 2）</li>
<li>x -&gt; m（来自<strong>节点 4</strong>）</li>
<li>x &lt;- b-&gt; c（来自<strong>节点 95</strong>）</li>
<li>x -&gt; d（来自节点 96）</li>
<li>n -&gt; x（来自<strong>节点 98</strong>）</li>
<li>x &lt;- z &lt;- i（来自<strong>节点 1 和节点 3</strong>）</li>
<li>x &lt;- z &lt;- b（来自<strong>节点 1 和节点 95</strong>）</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">┌──────────────────┬──────────────────┬──────────────────┬──────────────────┐
</span></span><span class="line"><span class="cl">│ .─.       .─.    │  .─.       .─.   │            .─.   │  .─.       .─.   │
</span></span><span class="line"><span class="cl">│( x )─────▶ y )   │ ( x )─────▶ a )  │           ( j )  │ ( m )◀────( x )  │
</span></span><span class="line"><span class="cl">│ `▲&#39;       `─&#39;    │  `─&#39;       `─&#39;   │            `─&#39;   │  `─&#39;       `─&#39;   │
</span></span><span class="line"><span class="cl">│  │     1         │        2         │        3    │    │        4         │
</span></span><span class="line"><span class="cl">│ .─.              │                  │            .▼.   │                  │
</span></span><span class="line"><span class="cl">│( z )─────────────┼──────────────────┼──────────▶( i )─┐│                  │
</span></span><span class="line"><span class="cl">│ `◀────┐          │                  │            `─&#39;  ││                  │
</span></span><span class="line"><span class="cl">├───────┼──────────┴──────────────────┴─────────────────┼┴──────────────────┤
</span></span><span class="line"><span class="cl">│       │                      Docs/Knowledge           │                   │
</span></span><span class="line"><span class="cl">│       │                            ...                │                   │
</span></span><span class="line"><span class="cl">│       │                                               │                   │
</span></span><span class="line"><span class="cl">├───────┼──────────┬──────────────────┬─────────────────┼┬──────────────────┤
</span></span><span class="line"><span class="cl">│  .─.  └──────.   │  .─.             │                 ││  .─.             │
</span></span><span class="line"><span class="cl">│ ( x ◀─────( b )  │ ( x )            │                 └┼▶( n )            │
</span></span><span class="line"><span class="cl">│  `─&#39;       `─&#39;   │  `─&#39;             │                  │  `─&#39;             │
</span></span><span class="line"><span class="cl">│        95   │    │   │    96        │                  │   │    98        │
</span></span><span class="line"><span class="cl">│            .▼.   │  .▼.             │                  │   ▼              │
</span></span><span class="line"><span class="cl">│           ( c )  │ ( d )            │                  │  .─.             │
</span></span><span class="line"><span class="cl">│            `─&#39;   │  `─&#39;             │                  │ ( x )            │
</span></span><span class="line"><span class="cl">└──────────────────┴──────────────────┴──────────────────┴──`─&#39;─────────────┘
</span></span></code></pre></td></tr></table>
</div>
</div><p>显然，那些（可能很宝贵的）涉及到主题 <code>x</code> 的精炼信息来自于其他节点以及跨节点的信息，都因为我们引入知识图谱的步骤，而能够被包含在 prompt 中，用于进行上下文学习，从而克服了前边提到的问题。</p>
<h2 id="llama-index-中的知识图谱进展" class="headerLink">
    <a href="#llama-index-%e4%b8%ad%e7%9a%84%e7%9f%a5%e8%af%86%e5%9b%be%e8%b0%b1%e8%bf%9b%e5%b1%95" class="header-mark"></a>6 Llama Index 中的知识图谱进展</h2><p>最初，<a href="https://github.com/jerryjliu/llama_index/pull/433" target="_blank" rel="noopener noreferrer">William F.H.</a>将知识图谱的抽象概念引入了 Llama Index，其中知识图谱中的三元组与关键词相关联，并存储在内存中的文档中，随后<a href="https://github.com/jerryjliu/llama_index/pull/487" target="_blank" rel="noopener noreferrer">Logan Markewich</a>还增加了每个三元组的嵌入。</p>
<p>最近的几周中，我一直在与社区合作，致力于<a href="https://github.com/jerryjliu/llama_index/pull/2581" target="_blank" rel="noopener noreferrer">将 &ldquo;GraphStore&rdquo; 存储上下文引入 Llama Index</a>，从而引入了知识图谱的外部存储。首个实现是使用我自从 2021 年以来一直在开发的开源分布式图数据库 NebulaGraph。</p>
<p>在实现过程中，还引入了遍历图的多个跳数选项以及在前 k 个节点中收集更多关键实体的选项（用于在知识图谱中搜索以获得更多全局上下文），我们仍在对这些变更进行完善。</p>
<p>引入 GraphStore 后，还可以从现有的知识图谱中进行上下文学习，并与其他索引结合使用，这也非常有前景，因为知识图谱被认为具有比其他结构化数据更高的信息密度。</p>
<p>在接下来的几周里，我将在本博客中更新有关 Llama Index 中的知识图谱相关工作的内容，然后在 <a href="https://github.com/jerryjliu/llama_index/pull/2581" target="_blank" rel="noopener noreferrer">PR</a> 合并后，分享端到端的演示项目和教程。请继续关注！</p>]]></description>
</item><item>
    <title>Nebulagraph Artificial Intelligence Suite</title>
    <link>https://siwei.io/nebulagraph-ai-suite/</link>
    <pubDate>Tue, 02 May 2023 16:37:28 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/nebulagraph-ai-suite/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/nebulagraph-ai-suite/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>介绍新项目！ ng_ai：NebulaGraph 的图算法套件，好用的 NebulaGraph 的 high-level Python Algorithm API，它的目标是让 NebulaGraph 的数据科学家用户能够用很少的代码量执行图上的算法相关的任务。</p>
</blockquote>
<h2 id="nebulagraph-ai-套件" class="headerLink">
    <a href="#nebulagraph-ai-%e5%a5%97%e4%bb%b6" class="header-mark"></a>1 Nebulagraph AI 套件</h2><p>这周，NebulaGraph 3.5.0 <a href="https://docs.nebula-graph.com.cn/3.5.0/20.appendix/release-notes/nebula-comm-release-note/" target="_blank" rel="noopener noreferrer">发布啦</a>，@<strong><a href="https://github.com/whitewum" target="_blank" rel="noopener noreferrer">whitewum</a></strong> 吴老师建议我们把而之前一段时间 NebulaGraph 社区里开启的新项目 <a href="https://github.com/wey-gu/nebulagraph-ai" target="_blank" rel="noopener noreferrer">ng_ai</a> 公开给大家，本文就是第一篇介绍 ng_ai 的文章！</p>
<h3 id="ng_ai-是什么" class="headerLink">
    <a href="#ng_ai-%e6%98%af%e4%bb%80%e4%b9%88" class="header-mark"></a>1.1 ng_ai 是什么</h3><p>ng_ai 的全名是：Nebulagraph AI Suite，顾名思义，它是在 NebulaGraph 之上跑算法的 Python 套件，希望能给 NebulaGraph 的数据科学家用户一个自然、简洁的高级 API，用很少的代码量执行图上的算法相关的任务。</p>
<p>在 ng_ai 这个开源项目里，我们希望快速迭代、公开讨论、演进它，而这背后的目标是：</p>
<blockquote>
<p>Simplifying things in surprising ways.</p>
</blockquote>
<h3 id="ng_ai-的特点" class="headerLink">
    <a href="#ng_ai-%e7%9a%84%e7%89%b9%e7%82%b9" class="header-mark"></a>1.2 ng_ai 的特点</h3><p>为了让 NebulaGraph 社区的同学拥有顺滑的算法体验，ng_ai 有以下特点：</p>
<ul>
<li>与 NebulaGraph 紧密结合，方便从其中读、写图数据</li>
<li>支持多引擎、后端，目前支持 Spark（NebulaGraph Algorithm）、NetworkX，之后会支持 <a href="https://www.dgl.ai/" target="_blank" rel="noopener noreferrer">DGL</a>、<a href="https://pytorch-geometric.readthedocs.io/en/latest/" target="_blank" rel="noopener noreferrer">PyG</a></li>
<li>友好、符合直觉的 API 设计</li>
<li>与 NebulaGraph 的 UDF 无缝结合，支持从 Query 中调用 ng_ai 任务</li>
<li>友好的自定义算法接口，方便用户自己实现算法（尚未完成）</li>
<li>一键试玩环境（基于 Docker Extention）</li>
</ul>
<h2 id="我可以用-ng_ai-干什么" class="headerLink">
    <a href="#%e6%88%91%e5%8f%af%e4%bb%a5%e7%94%a8-ng_ai-%e5%b9%b2%e4%bb%80%e4%b9%88" class="header-mark"></a>2 我可以用 ng_ai 干什么</h2><h3 id="跑分布式-pagerank-算法" class="headerLink">
    <a href="#%e8%b7%91%e5%88%86%e5%b8%83%e5%bc%8f-pagerank-%e7%ae%97%e6%b3%95" class="header-mark"></a>2.1 跑分布式 pagerank 算法</h3><p>如果在一个大图上，基于 Nebula-Algorithms 分布式地跑 pagerank 算法，我们可以这么做：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">ng_ai</span> <span class="kn">import</span> <span class="n">NebulaReader</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># read data with spark engine, scan mode</span>
</span></span><span class="line"><span class="cl"><span class="n">reader</span> <span class="o">=</span> <span class="n">NebulaReader</span><span class="p">(</span><span class="n">engine</span><span class="o">=</span><span class="s2">&#34;spark&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">reader</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="n">edge</span><span class="o">=</span><span class="s2">&#34;follow&#34;</span><span class="p">,</span> <span class="n">props</span><span class="o">=</span><span class="s2">&#34;degree&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">df</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># run pagerank algorithm</span>
</span></span><span class="line"><span class="cl"><span class="n">pr_result</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">algo</span><span class="o">.</span><span class="n">pagerank</span><span class="p">(</span><span class="n">reset_prob</span><span class="o">=</span><span class="mf">0.15</span><span class="p">,</span> <span class="n">max_iter</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="写回算法结果到-nebulagraph" class="headerLink">
    <a href="#%e5%86%99%e5%9b%9e%e7%ae%97%e6%b3%95%e7%bb%93%e6%9e%9c%e5%88%b0-nebulagraph" class="header-mark"></a>2.2 写回算法结果到 NebulaGraph</h3><p>假设我们要跑一个 label propagation 算法，然后把结果写回 NebulaGraph，我们可以这么做：</p>
<p>先确保要写回 TAG 的 schema 已经创建好了，写到 label_propagation.cluster_id 字段里：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="k">IF</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">EXISTS</span><span class="w"> </span><span class="n">label_propagation</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">cluster_id</span><span class="w"> </span><span class="n">string</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>我们先执行算法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">df_result</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">algo</span><span class="o">.</span><span class="n">label_propagation</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>再看一下结果的 schema：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">df_result</span><span class="o">.</span><span class="n">printSchema</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">root</span>
</span></span><span class="line"><span class="cl"> <span class="o">|--</span> <span class="n">_id</span><span class="p">:</span> <span class="n">string</span> <span class="p">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="n">false</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"> <span class="o">|--</span> <span class="n">lpa</span><span class="p">:</span> <span class="n">string</span> <span class="p">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="n">false</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后，代码里这么写，我们把 lpa 的结果写回 NebulaGraph 中的 cluster_id 字段里（<code>{&quot;lpa&quot;: &quot;cluster_id&quot;}</code>）：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">ng_ai</span> <span class="kn">import</span> <span class="n">NebulaWriter</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">ng_ai.config</span> <span class="kn">import</span> <span class="n">NebulaGraphConfig</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">config</span> <span class="o">=</span> <span class="n">NebulaGraphConfig</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">writer</span> <span class="o">=</span> <span class="n">NebulaWriter</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">data</span><span class="o">=</span><span class="n">df_result</span><span class="p">,</span> <span class="n">sink</span><span class="o">=</span><span class="s2">&#34;nebulagraph_vertex&#34;</span><span class="p">,</span> <span class="n">config</span><span class="o">=</span><span class="n">config</span><span class="p">,</span> <span class="n">engine</span><span class="o">=</span><span class="s2">&#34;spark&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># map column louvain into property cluster_id</span>
</span></span><span class="line"><span class="cl"><span class="n">properties</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;lpa&#34;</span><span class="p">:</span> <span class="s2">&#34;cluster_id&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">writer</span><span class="o">.</span><span class="n">set_options</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">tag</span><span class="o">=</span><span class="s2">&#34;label_propagation&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">vid_field</span><span class="o">=</span><span class="s2">&#34;_id&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">properties</span><span class="o">=</span><span class="n">properties</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">batch_size</span><span class="o">=</span><span class="mi">256</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">write_mode</span><span class="o">=</span><span class="s2">&#34;insert&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># write back to NebulaGraph</span>
</span></span><span class="line"><span class="cl"><span class="n">writer</span><span class="o">.</span><span class="n">write</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>最后，我们可以验证一下结果啦：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">USE basketballplayer;
</span></span><span class="line"><span class="cl">MATCH (v:label_propagation)
</span></span><span class="line"><span class="cl">RETURN id(v), v.label_propagation.cluster_id LIMIT 3;
</span></span></code></pre></td></tr></table>
</div>
</div><p>结果：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-SQL" data-lang="SQL"><span class="line"><span class="cl"><span class="o">+</span><span class="c1">-------------+--------------------------------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="n">id</span><span class="p">(</span><span class="n">v</span><span class="p">)</span><span class="w">       </span><span class="o">|</span><span class="w"> </span><span class="n">v</span><span class="p">.</span><span class="n">label_propagation</span><span class="p">.</span><span class="n">cluster_id</span><span class="w"> </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">-------------+--------------------------------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;player103&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;player101&#34;</span><span class="w">                    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;player113&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;player129&#34;</span><span class="w">                    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;player121&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;player129&#34;</span><span class="w">                    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">-------------+--------------------------------+
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>更详细的例子参考：<a href="https://github.com/wey-gu/nebulagraph-ai/blob/main/examples/spark_engine.ipynb" target="_blank" rel="noopener noreferrer">ng_ai/examples</a></p>
<h4 id="通过-ngql-调用算法" class="headerLink">
    <a href="#%e9%80%9a%e8%bf%87-ngql-%e8%b0%83%e7%94%a8%e7%ae%97%e6%b3%95" class="header-mark"></a>2.2.1 通过 nGQL 调用算法</h4><p>从 NebulaGraph 3.5.0 之后，我们可以写自己的 UDF 来从 nGQL 里调用自己实现的函数，ng_ai 也用这个能力来实现了一个 ng_ai 函数，它可以从 nGQL 里调用 ng_ai 的算法，例如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- Prepare the write schema
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">USE</span><span class="w"> </span><span class="n">basketballplayer</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="k">IF</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">EXISTS</span><span class="w"> </span><span class="n">pagerank</span><span class="p">(</span><span class="n">pagerank</span><span class="w"> </span><span class="n">string</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">:</span><span class="n">sleep</span><span class="w"> </span><span class="mi">20</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">-- Call with ng_ai()
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">ng_ai</span><span class="p">(</span><span class="s2">&#34;pagerank&#34;</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;follow&#34;</span><span class="p">],</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;degree&#34;</span><span class="p">],</span><span class="w"> </span><span class="s2">&#34;spark&#34;</span><span class="p">,</span><span class="w"> </span><span class="err">{</span><span class="k">space</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;basketballplayer&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">max_iter</span><span class="p">:</span><span class="w"> </span><span class="mi">10</span><span class="err">}</span><span class="p">,</span><span class="w"> </span><span class="err">{</span><span class="n">write_mode</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;insert&#34;</span><span class="err">}</span><span class="p">)</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>更详细的例子参考：<a href="https://github.com/wey-gu/nebulagraph-ai/blob/main/examples/ng_ai_from_ngql_udf.ipynb" target="_blank" rel="noopener noreferrer">ng_ai/examples</a></p>
<h4 id="单机运行算法" class="headerLink">
    <a href="#%e5%8d%95%e6%9c%ba%e8%bf%90%e8%a1%8c%e7%ae%97%e6%b3%95" class="header-mark"></a>2.2.2 单机运行算法</h4><p>在单机、本地的环境里，ng_ai 支持基于 NetworkX 运行算法，例如：</p>
<p>读取图为 ng_ai graph 对象：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">ng_ai</span> <span class="kn">import</span> <span class="n">NebulaReader</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">ng_ai.config</span> <span class="kn">import</span> <span class="n">NebulaGraphConfig</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># read data with nebula/networkx engine, query mode</span>
</span></span><span class="line"><span class="cl"><span class="n">config_dict</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;graphd_hosts&#34;</span><span class="p">:</span> <span class="s2">&#34;graphd:9669&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;user&#34;</span><span class="p">:</span> <span class="s2">&#34;root&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;password&#34;</span><span class="p">:</span> <span class="s2">&#34;nebula&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;space&#34;</span><span class="p">:</span> <span class="s2">&#34;basketballplayer&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">config</span> <span class="o">=</span> <span class="n">NebulaGraphConfig</span><span class="p">(</span><span class="o">**</span><span class="n">config_dict</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">reader</span> <span class="o">=</span> <span class="n">NebulaReader</span><span class="p">(</span><span class="n">engine</span><span class="o">=</span><span class="s2">&#34;nebula&#34;</span><span class="p">,</span> <span class="n">config</span><span class="o">=</span><span class="n">config</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">reader</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">edges</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;follow&#34;</span><span class="p">,</span> <span class="s2">&#34;serve&#34;</span><span class="p">],</span> <span class="n">props</span><span class="o">=</span><span class="p">[[</span><span class="s2">&#34;degree&#34;</span><span class="p">],</span> <span class="p">[]])</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>查看、画图：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">show</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">draw</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>运行算法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">pr_result</span> <span class="o">=</span> <span class="n">g</span><span class="o">.</span><span class="n">algo</span><span class="o">.</span><span class="n">pagerank</span><span class="p">(</span><span class="n">reset_prob</span><span class="o">=</span><span class="mf">0.15</span><span class="p">,</span> <span class="n">max_iter</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>写回 NebulaGraph：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">ng_ai</span> <span class="kn">import</span> <span class="n">NebulaWriter</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">writer</span> <span class="o">=</span> <span class="n">NebulaWriter</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">data</span><span class="o">=</span><span class="n">pr_result</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">sink</span><span class="o">=</span><span class="s2">&#34;nebulagraph_vertex&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">config</span><span class="o">=</span><span class="n">config</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">engine</span><span class="o">=</span><span class="s2">&#34;nebula&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># properties to write</span>
</span></span><span class="line"><span class="cl"><span class="n">properties</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;pagerank&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">writer</span><span class="o">.</span><span class="n">set_options</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">tag</span><span class="o">=</span><span class="s2">&#34;pagerank&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">properties</span><span class="o">=</span><span class="n">properties</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">batch_size</span><span class="o">=</span><span class="mi">256</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">write_mode</span><span class="o">=</span><span class="s2">&#34;insert&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># write back to NebulaGraph</span>
</span></span><span class="line"><span class="cl"><span class="n">writer</span><span class="o">.</span><span class="n">write</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>其他算法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># get all algorithms</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">algo</span><span class="o">.</span><span class="n">get_all_algo</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># get help of each algo</span>
</span></span><span class="line"><span class="cl"><span class="n">help</span><span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">algo</span><span class="o">.</span><span class="n">node2vec</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># call the algo</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">algo</span><span class="o">.</span><span class="n">node2vec</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>更详细的例子参考：<a href="https://github.com/wey-gu/nebulagraph-ai/blob/main/examples/networkx_engine.ipynb" target="_blank" rel="noopener noreferrer">ng_ai/examples</a></p>
<h4 id="可视化图算法结果" class="headerLink">
    <a href="#%e5%8f%af%e8%a7%86%e5%8c%96%e5%9b%be%e7%ae%97%e6%b3%95%e7%bb%93%e6%9e%9c" class="header-mark"></a>2.2.3 可视化图算法结果</h4><p>再演示一个 NetworkX 引擎情况下，计算 Louvain、PageRank 并可视化的例子：</p>
<p>先执行两个算法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">pr_result</span> <span class="o">=</span> <span class="n">g</span><span class="o">.</span><span class="n">algo</span><span class="o">.</span><span class="n">pagerank</span><span class="p">(</span><span class="n">reset_prob</span><span class="o">=</span><span class="mf">0.15</span><span class="p">,</span> <span class="n">max_iter</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">louvain_result</span> <span class="o">=</span> <span class="n">g</span><span class="o">.</span><span class="n">algo</span><span class="o">.</span><span class="n">louvain</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这次我们手写一个好看一点的画图函数：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">matplotlib.colors</span> <span class="kn">import</span> <span class="n">ListedColormap</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">draw_graph_louvain_pr</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">pr_result</span><span class="p">,</span> <span class="n">louvain_result</span><span class="p">,</span> <span class="n">colors</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;#1984c5&#34;</span><span class="p">,</span> <span class="s2">&#34;#22a7f0&#34;</span><span class="p">,</span> <span class="s2">&#34;#63bff0&#34;</span><span class="p">,</span> <span class="s2">&#34;#a7d5ed&#34;</span><span class="p">,</span> <span class="s2">&#34;#e2e2e2&#34;</span><span class="p">,</span> <span class="s2">&#34;#e1a692&#34;</span><span class="p">,</span> <span class="s2">&#34;#de6e56&#34;</span><span class="p">,</span> <span class="s2">&#34;#e14b31&#34;</span><span class="p">,</span> <span class="s2">&#34;#c23728&#34;</span><span class="p">]):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Define positions for the nodes</span>
</span></span><span class="line"><span class="cl">    <span class="n">pos</span> <span class="o">=</span> <span class="n">nx</span><span class="o">.</span><span class="n">spring_layout</span><span class="p">(</span><span class="n">G</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Create a figure and set the axis limits</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">35</span><span class="p">,</span> <span class="mi">15</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">ax</span><span class="o">.</span><span class="n">set_xlim</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">ax</span><span class="o">.</span><span class="n">set_ylim</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Create a colormap from the colors list</span>
</span></span><span class="line"><span class="cl">    <span class="n">cmap</span> <span class="o">=</span> <span class="n">ListedColormap</span><span class="p">(</span><span class="n">colors</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Draw the nodes and edges of the graph</span>
</span></span><span class="line"><span class="cl">    <span class="n">node_colors</span> <span class="o">=</span> <span class="p">[</span><span class="n">louvain_result</span><span class="p">[</span><span class="n">node</span><span class="p">]</span> <span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="n">G</span><span class="o">.</span><span class="n">nodes</span><span class="p">()]</span>
</span></span><span class="line"><span class="cl">    <span class="n">node_sizes</span> <span class="o">=</span> <span class="p">[</span><span class="mi">70000</span> <span class="o">*</span> <span class="n">pr_result</span><span class="p">[</span><span class="n">node</span><span class="p">]</span> <span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="n">G</span><span class="o">.</span><span class="n">nodes</span><span class="p">()]</span>
</span></span><span class="line"><span class="cl">    <span class="n">nx</span><span class="o">.</span><span class="n">draw_networkx_nodes</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">pos</span><span class="o">=</span><span class="n">pos</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span> <span class="n">node_color</span><span class="o">=</span><span class="n">node_colors</span><span class="p">,</span> <span class="n">node_size</span><span class="o">=</span><span class="n">node_sizes</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="n">cmap</span><span class="p">,</span> <span class="n">vmin</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">vmax</span><span class="o">=</span><span class="nb">max</span><span class="p">(</span><span class="n">louvain_result</span><span class="o">.</span><span class="n">values</span><span class="p">()))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">nx</span><span class="o">.</span><span class="n">draw_networkx_edges</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">pos</span><span class="o">=</span><span class="n">pos</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span> <span class="n">edge_color</span><span class="o">=</span><span class="s1">&#39;gray&#39;</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">connectionstyle</span><span class="o">=</span><span class="s1">&#39;arc3, rad=0.2&#39;</span><span class="p">,</span> <span class="n">arrowstyle</span><span class="o">=</span><span class="s1">&#39;-|&gt;&#39;</span><span class="p">,</span> <span class="n">arrows</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Extract edge labels as a dictionary</span>
</span></span><span class="line"><span class="cl">    <span class="n">edge_labels</span> <span class="o">=</span> <span class="n">nx</span><span class="o">.</span><span class="n">get_edge_attributes</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="s1">&#39;label&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Add edge labels to the graph</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">edge</span><span class="p">,</span> <span class="n">label</span> <span class="ow">in</span> <span class="n">edge_labels</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="n">ax</span><span class="o">.</span><span class="n">text</span><span class="p">((</span><span class="n">pos</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="mi">0</span><span class="p">]][</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">pos</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="mi">1</span><span class="p">]][</span><span class="mi">0</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="p">(</span><span class="n">pos</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="mi">0</span><span class="p">]][</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">pos</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="mi">1</span><span class="p">]][</span><span class="mi">1</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="n">label</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">12</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;black&#39;</span><span class="p">,</span> <span class="n">ha</span><span class="o">=</span><span class="s1">&#39;center&#39;</span><span class="p">,</span> <span class="n">va</span><span class="o">=</span><span class="s1">&#39;center&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Add node labels to the graph</span>
</span></span><span class="line"><span class="cl">    <span class="n">node_labels</span> <span class="o">=</span> <span class="p">{</span><span class="n">n</span><span class="p">:</span> <span class="n">G</span><span class="o">.</span><span class="n">nodes</span><span class="p">[</span><span class="n">n</span><span class="p">][</span><span class="s1">&#39;label&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="s1">&#39;label&#39;</span> <span class="ow">in</span> <span class="n">G</span><span class="o">.</span><span class="n">nodes</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="k">else</span> <span class="n">n</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">G</span><span class="o">.</span><span class="n">nodes</span><span class="p">()}</span>
</span></span><span class="line"><span class="cl">    <span class="n">nx</span><span class="o">.</span><span class="n">draw_networkx_labels</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">pos</span><span class="o">=</span><span class="n">pos</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span> <span class="n">labels</span><span class="o">=</span><span class="n">node_labels</span><span class="p">,</span> <span class="n">font_size</span><span class="o">=</span><span class="mi">12</span><span class="p">,</span> <span class="n">font_color</span><span class="o">=</span><span class="s1">&#39;black&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Add colorbar for community colors</span>
</span></span><span class="line"><span class="cl">    <span class="n">sm</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">cm</span><span class="o">.</span><span class="n">ScalarMappable</span><span class="p">(</span><span class="n">cmap</span><span class="o">=</span><span class="n">cmap</span><span class="p">,</span> <span class="n">norm</span><span class="o">=</span><span class="n">plt</span><span class="o">.</span><span class="n">Normalize</span><span class="p">(</span><span class="n">vmin</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">vmax</span><span class="o">=</span><span class="nb">max</span><span class="p">(</span><span class="n">louvain_result</span><span class="o">.</span><span class="n">values</span><span class="p">())))</span>
</span></span><span class="line"><span class="cl">    <span class="n">sm</span><span class="o">.</span><span class="n">set_array</span><span class="p">([])</span>
</span></span><span class="line"><span class="cl">    <span class="n">cbar</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">colorbar</span><span class="p">(</span><span class="n">sm</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span> <span class="n">ticks</span><span class="o">=</span><span class="nb">range</span><span class="p">(</span><span class="nb">max</span><span class="p">(</span><span class="n">louvain_result</span><span class="o">.</span><span class="n">values</span><span class="p">())</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span> <span class="n">shrink</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">cbar</span><span class="o">.</span><span class="n">ax</span><span class="o">.</span><span class="n">set_yticklabels</span><span class="p">([</span><span class="sa">f</span><span class="s1">&#39;Community </span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s1">&#39;</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">max</span><span class="p">(</span><span class="n">louvain_result</span><span class="o">.</span><span class="n">values</span><span class="p">())</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Show the figure</span>
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">draw_graph_louvain_pr</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">pr_result</span><span class="o">=</span><span class="n">pr_result</span><span class="p">,</span> <span class="n">louvain_result</span><span class="o">=</span><span class="n">louvain_result</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>效果如图：</p>
<p><figure><a class="lightgallery" href="https://github.com/siwei-io/talks/assets/1651790/4d13eb2b-3e40-4085-8e0c-71459ca0843b" title="draw_graph_louvain_pr" data-thumbnail="https://github.com/siwei-io/talks/assets/1651790/4d13eb2b-3e40-4085-8e0c-71459ca0843b">
        <img
            
            loading="lazy"
            src="https://github.com/siwei-io/talks/assets/1651790/4d13eb2b-3e40-4085-8e0c-71459ca0843b"
            srcset="https://github.com/siwei-io/talks/assets/1651790/4d13eb2b-3e40-4085-8e0c-71459ca0843b, https://github.com/siwei-io/talks/assets/1651790/4d13eb2b-3e40-4085-8e0c-71459ca0843b 1.5x, https://github.com/siwei-io/talks/assets/1651790/4d13eb2b-3e40-4085-8e0c-71459ca0843b 2x"
            sizes="auto"
            alt="draw_graph_louvain_pr">
    </a></figure></p>
<p>更详细的例子参考：<a href="https://github.com/wey-gu/nebulagraph-ai/blob/main/examples/ng_ai_networkx_plot.ipynb" target="_blank" rel="noopener noreferrer">ng_ai/examples</a></p>
<h4 id="更方便的-notebook-操作-nebulagraph" class="headerLink">
    <a href="#%e6%9b%b4%e6%96%b9%e4%be%bf%e7%9a%84-notebook-%e6%93%8d%e4%bd%9c-nebulagraph" class="header-mark"></a>2.2.4 更方便的 Notebook 操作 NebulaGraph</h4><p>结合 NebulaGraph 的 Jupyter Notebook 插件: <a href="https://github.com/wey-gu/ipython-ngql" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/ipython-ngql</a> ，我们还可以更方便的操作 NebulaGraph：</p>
<p>在 Jupyter Notbook 里安装这个插件可以通过 ng_ai 的 extras 安装：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">%</span><span class="n">pip</span> <span class="n">install</span> <span class="n">ng_ai</span><span class="p">[</span><span class="n">jupyter</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="o">%</span><span class="n">load_ext</span> <span class="n">ngql</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>也可以单独安装</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">%</span><span class="n">pip</span> <span class="n">install</span> <span class="n">ipython</span><span class="o">-</span><span class="n">ngql</span>
</span></span><span class="line"><span class="cl"><span class="o">%</span><span class="n">load_ext</span> <span class="n">ngql</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>之后，我们就可以在 Notebook 里直接使用 <code>%ngql</code> 命令来执行 NGQL 语句了：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">%</span><span class="n">ngql</span> <span class="o">--</span><span class="n">address</span> <span class="mf">127.0.0.1</span> <span class="o">--</span><span class="n">port</span> <span class="mi">9669</span> <span class="o">--</span><span class="n">user</span> <span class="n">root</span> <span class="o">--</span><span class="n">password</span> <span class="n">nebula</span>
</span></span><span class="line"><span class="cl"><span class="o">%</span><span class="n">ngql</span> <span class="n">USE</span> <span class="n">basketballplayer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="o">%</span><span class="n">ngql</span> <span class="n">MATCH</span> <span class="p">(</span><span class="n">v</span><span class="p">:</span><span class="n">player</span><span class="p">{</span><span class="n">name</span><span class="p">:</span><span class="s2">&#34;Tim Duncan&#34;</span><span class="p">})</span><span class="o">--&gt;</span><span class="p">(</span><span class="n">v2</span><span class="p">:</span><span class="n">player</span><span class="p">)</span> <span class="n">RETURN</span> <span class="n">v2</span><span class="o">.</span><span class="n">player</span><span class="o">.</span><span class="n">name</span> <span class="n">AS</span> <span class="n">Name</span><span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>注，多行的 Query 用两个百分号就好了 <code>%%ngql</code></p>
</blockquote>
<p>最后，我们还能在 Jupyter Notebook 里直接可视化渲染结果！只需要 <code>%ng_draw</code> 就可以啦！</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">%</span><span class="n">ngql</span> <span class="k">match</span> <span class="n">p</span><span class="o">=</span><span class="p">(:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[]</span><span class="o">-&gt;</span><span class="p">()</span> <span class="k">return</span> <span class="n">p</span> <span class="n">LIMIT</span> <span class="mi">5</span>
</span></span><span class="line"><span class="cl"><span class="o">%</span><span class="n">ng_draw</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>效果如下：</p>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/236797874-c142cfd8-b0de-4689-95ef-1da386e137d3.png" title="ipython-ngql" data-thumbnail="https://user-images.githubusercontent.com/1651790/236797874-c142cfd8-b0de-4689-95ef-1da386e137d3.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/236797874-c142cfd8-b0de-4689-95ef-1da386e137d3.png"
            srcset="https://user-images.githubusercontent.com/1651790/236797874-c142cfd8-b0de-4689-95ef-1da386e137d3.png, https://user-images.githubusercontent.com/1651790/236797874-c142cfd8-b0de-4689-95ef-1da386e137d3.png 1.5x, https://user-images.githubusercontent.com/1651790/236797874-c142cfd8-b0de-4689-95ef-1da386e137d3.png 2x"
            sizes="auto"
            alt="ipython-ngql">
    </a></figure></p>
<h2 id="未来工作" class="headerLink">
    <a href="#%e6%9c%aa%e6%9d%a5%e5%b7%a5%e4%bd%9c" class="header-mark"></a>3 未来工作</h2><p>现在 ng_ai 还在开发中，我们还有很多工作要做：</p>
<ul>
<li><i class="far fa-square fa-fw"></i> 完善 reader 模式，现在 NebulaGraph/NetworkX 的读取数据只支持 Query-Mode，还需要支持 Scan-Mode</li>
<li><i class="far fa-square fa-fw"></i> 实现基于 dgl(GNN) 的链路预测、节点分类等算法，例如：</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">model</span> <span class="o">=</span> <span class="n">g</span><span class="o">.</span><span class="n">algo</span><span class="o">.</span><span class="n">gnn_link_prediction</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">result</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">train</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="c1"># query src, dst to be predicted</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">model</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">src_vertex</span><span class="p">,</span> <span class="n">dst_vertices</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><i class="far fa-square fa-fw"></i> UDA，自定义算法</li>
<li><i class="far fa-square fa-fw"></i> 快速部署工具</li>
</ul>
<p>ng_ai 是完全 build in public 的，欢迎社区的大家们来参与，一起来完善 ng_ai，让 NebulaGraph 上的 AI 算法更加简单易用！</p>
<h2 id="试玩-ng_ai" class="headerLink">
    <a href="#%e8%af%95%e7%8e%a9-ng_ai" class="header-mark"></a>4 试玩 ng_ai</h2><p>我们已经准备好了一键部署的 NebulaGraph + Studio + ng_ai in Jupyter 的环境，只需要大家从 Docker Desktop 的 Extension（扩展）中搜索 NebulaGraph，就可以试完了。</p>
<ul>
<li>安装 <a href="https://www.docker.com/blog/distributed-cloud-native-graph-database-nebulagraph-docker-extension/" target="_blank" rel="noopener noreferrer">NebulaGraph Docker 插件</a></li>
</ul>
<p>在 Docker Desktop 的插件市场搜索 NebulaGraph，点击安装</p>
<p><figure><a class="lightgallery" href="https://github.com/siwei-io/talks/assets/1651790/e07e39d1-2b3a-486f-bb68-29a67bc3a714" title="https://github.com/siwei-io/talks/assets/1651790/e07e39d1-2b3a-486f-bb68-29a67bc3a714" data-thumbnail="https://github.com/siwei-io/talks/assets/1651790/e07e39d1-2b3a-486f-bb68-29a67bc3a714">
        <img
            
            loading="lazy"
            src="https://github.com/siwei-io/talks/assets/1651790/e07e39d1-2b3a-486f-bb68-29a67bc3a714"
            srcset="https://github.com/siwei-io/talks/assets/1651790/e07e39d1-2b3a-486f-bb68-29a67bc3a714, https://github.com/siwei-io/talks/assets/1651790/e07e39d1-2b3a-486f-bb68-29a67bc3a714 1.5x, https://github.com/siwei-io/talks/assets/1651790/e07e39d1-2b3a-486f-bb68-29a67bc3a714 2x"
            sizes="auto"
            alt="https://github.com/siwei-io/talks/assets/1651790/e07e39d1-2b3a-486f-bb68-29a67bc3a714">
    </a></figure></p>
<ul>
<li>安装 ng_ai playground</li>
</ul>
<p>进入 NebulaGraph 插件，点击<strong>Install NX Mode</strong>，安装 ng_ai 的 NetworkX playground，通常要等几分钟等待安装完成。</p>
<p><figure><a class="lightgallery" href="https://github.com/siwei-io/talks/assets/1651790/3fca7e39-6e37-4ccb-8177-4771babb7b66" title="https://github.com/siwei-io/talks/assets/1651790/3fca7e39-6e37-4ccb-8177-4771babb7b66" data-thumbnail="https://github.com/siwei-io/talks/assets/1651790/3fca7e39-6e37-4ccb-8177-4771babb7b66">
        <img
            
            loading="lazy"
            src="https://github.com/siwei-io/talks/assets/1651790/3fca7e39-6e37-4ccb-8177-4771babb7b66"
            srcset="https://github.com/siwei-io/talks/assets/1651790/3fca7e39-6e37-4ccb-8177-4771babb7b66, https://github.com/siwei-io/talks/assets/1651790/3fca7e39-6e37-4ccb-8177-4771babb7b66 1.5x, https://github.com/siwei-io/talks/assets/1651790/3fca7e39-6e37-4ccb-8177-4771babb7b66 2x"
            sizes="auto"
            alt="https://github.com/siwei-io/talks/assets/1651790/3fca7e39-6e37-4ccb-8177-4771babb7b66">
    </a></figure></p>
<ul>
<li>进入 NetworkX playground</li>
</ul>
<p>点击<strong>Jupyter NB NetworkX</strong>，进入 NetworkX playground。</p>
<p><figure><a class="lightgallery" href="https://github.com/siwei-io/talks/assets/1651790/48c2e5a2-490e-4626-809e-5894d6f833e9" title="https://github.com/siwei-io/talks/assets/1651790/48c2e5a2-490e-4626-809e-5894d6f833e9" data-thumbnail="https://github.com/siwei-io/talks/assets/1651790/48c2e5a2-490e-4626-809e-5894d6f833e9">
        <img
            
            loading="lazy"
            src="https://github.com/siwei-io/talks/assets/1651790/48c2e5a2-490e-4626-809e-5894d6f833e9"
            srcset="https://github.com/siwei-io/talks/assets/1651790/48c2e5a2-490e-4626-809e-5894d6f833e9, https://github.com/siwei-io/talks/assets/1651790/48c2e5a2-490e-4626-809e-5894d6f833e9 1.5x, https://github.com/siwei-io/talks/assets/1651790/48c2e5a2-490e-4626-809e-5894d6f833e9 2x"
            sizes="auto"
            alt="https://github.com/siwei-io/talks/assets/1651790/48c2e5a2-490e-4626-809e-5894d6f833e9">
    </a></figure></p>
<h2 id="ng_ai-的架构" class="headerLink">
    <a href="#ng_ai-%e7%9a%84%e6%9e%b6%e6%9e%84" class="header-mark"></a>5 ng_ai 的架构</h2><p>ng_ai 的架构如下，它的核心模块有：</p>
<ul>
<li>Reader：负责从 NebulaGraph 读取数据</li>
<li>Writer：负责将数据写入 NebulaGraph</li>
<li>*Engine：负责适配不同运行时，例如 Spark、DGL、NetowrkX 等</li>
<li>Algo：算法模块，例如 PageRank、Louvain、GNN_Link_Predict 等</li>
</ul>
<p>此外，为了支持 nGQL 中的调用，还有两个模块：</p>
<ul>
<li>ng_ai-udf：负责将 UDF 注册到 NebulaGraph，接受 ng_ai 的 query 调用，访问 ng_ai API</li>
<li>ng_ai-api：ng_ai 的 API 服务，接受 UDF 的调用，访问 ng_ai 核心模块</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">          ┌───────────────────────────────────────────────────┐
</span></span><span class="line"><span class="cl">          │   Spark Cluster                                   │
</span></span><span class="line"><span class="cl">          │    .─────.    .─────.    .─────.    .─────.       │
</span></span><span class="line"><span class="cl">          │   ;       :  ;       :  ;       :  ;       :      │
</span></span><span class="line"><span class="cl">       ┌─▶│   :       ;  :       ;  :       ;  :       ;      │
</span></span><span class="line"><span class="cl">       │  │    ╲     ╱    ╲     ╱    ╲     ╱    ╲     ╱       │
</span></span><span class="line"><span class="cl">       │  │     `───&#39;      `───&#39;      `───&#39;      `───&#39;        │
</span></span><span class="line"><span class="cl">  Algo Spark                                                  │
</span></span><span class="line"><span class="cl">    Engine└───────────────────────────────────────────────────┘
</span></span><span class="line"><span class="cl">       │  ┌────────────────────────────────────────────────────┬──────────┐
</span></span><span class="line"><span class="cl">       └──┤                                                    │          │
</span></span><span class="line"><span class="cl">          │   NebulaGraph AI Suite(ngai)                       │ ngai-api │◀─┐
</span></span><span class="line"><span class="cl">          │                                                    │          │  │
</span></span><span class="line"><span class="cl">          │                                                    └──────────┤  │
</span></span><span class="line"><span class="cl">          │     ┌────────┐    ┌──────┐    ┌────────┐   ┌─────┐            │  │
</span></span><span class="line"><span class="cl">          │     │ Reader │    │ Algo │    │ Writer │   │ GNN │            │  │
</span></span><span class="line"><span class="cl"> ┌───────▶│     └────────┘    └──────┘    └────────┘   └─────┘            │  │
</span></span><span class="line"><span class="cl"> │        │          │            │            │          │               │  │
</span></span><span class="line"><span class="cl"> │        │          ├────────────┴───┬────────┴─────┐    └──────┐        │  │
</span></span><span class="line"><span class="cl"> │        │          ▼                ▼              ▼           ▼        │  │
</span></span><span class="line"><span class="cl"> │        │   ┌─────────────┐ ┌──────────────┐ ┌──────────┐ ┌──────────┐  │  │
</span></span><span class="line"><span class="cl"> │     ┌──┤   │ SparkEngine │ │ NebulaEngine │ │ NetworkX │ │ DGLEngine│  │  │
</span></span><span class="line"><span class="cl"> │     │  │   └─────────────┘ └──────────────┘ └──────────┘ └──────────┘  │  │
</span></span><span class="line"><span class="cl"> │     │  └──────────┬────────────────────────────────────────────────────┘  │
</span></span><span class="line"><span class="cl"> │     │             │        Spark                                          │
</span></span><span class="line"><span class="cl"> │     │             └────────Reader ────────────┐                           │
</span></span><span class="line"><span class="cl"> │  Spark                   Query Mode           │                           │
</span></span><span class="line"><span class="cl"> │  Reader                                       │                           │
</span></span><span class="line"><span class="cl"> │Scan Mode                                      ▼                      ┌─────────┐
</span></span><span class="line"><span class="cl"> │     │  ┌───────────────────────────────────────────────────┬─────────┤ ngai-udf│◀─────────────┐
</span></span><span class="line"><span class="cl"> │     │  │                                                   │         └─────────┤              │
</span></span><span class="line"><span class="cl"> │     │  │  NebulaGraph Graph Engine         Nebula-GraphD   │   ngai-GraphD     │              │
</span></span><span class="line"><span class="cl"> │     │  ├──────────────────────────────┬────────────────────┼───────────────────┘              │
</span></span><span class="line"><span class="cl"> │     │  │                              │                    │                                  │
</span></span><span class="line"><span class="cl"> │     │  │  NebulaGraph Storage Engine  │                    │                                  │
</span></span><span class="line"><span class="cl"> │     │  │                              │                    │                                  │
</span></span><span class="line"><span class="cl"> │     └─▶│  Nebula-StorageD             │    Nebula-Metad    │                                  │
</span></span><span class="line"><span class="cl"> │        │                              │                    │                                  │
</span></span><span class="line"><span class="cl"> │        └──────────────────────────────┴────────────────────┘                                  │
</span></span><span class="line"><span class="cl"> │                                                                                               │
</span></span><span class="line"><span class="cl"> │    ┌───────────────────────────────────────────────────────────────────────────────────────┐  │
</span></span><span class="line"><span class="cl"> │    │ RETURN ng_ai(&#34;pagerank&#34;, [&#34;follow&#34;], [&#34;degree&#34;], &#34;spark&#34;, {space:&#34;basketballplayer&#34;}) │──┘
</span></span><span class="line"><span class="cl"> │    └───────────────────────────────────────────────────────────────────────────────────────┘
</span></span><span class="line"><span class="cl"> │  ┌─────────────────────────────────────────────────────────────┐
</span></span><span class="line"><span class="cl"> │  │ from ng_ai import NebulaReader                              │
</span></span><span class="line"><span class="cl"> │  │                                                             │
</span></span><span class="line"><span class="cl"> │  │ # read data with spark engine, scan mode                    │
</span></span><span class="line"><span class="cl"> │  │ reader = NebulaReader(engine=&#34;spark&#34;)                       │
</span></span><span class="line"><span class="cl"> │  │ reader.scan(edge=&#34;follow&#34;, props=&#34;degree&#34;)                  │
</span></span><span class="line"><span class="cl"> └──│ df = reader.read()                                          │
</span></span><span class="line"><span class="cl">    │                                                             │
</span></span><span class="line"><span class="cl">    │ # run pagerank algorithm                                    │
</span></span><span class="line"><span class="cl">    │ pr_result = df.algo.pagerank(reset_prob=0.15, max_iter=10)  │
</span></span><span class="line"><span class="cl">    │                                                             │
</span></span><span class="line"><span class="cl">    └─────────────────────────────────────────────────────────────┘  
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>图数据库驱动的基础设施运维示例</title>
    <link>https://siwei.io/graph-enabled-infra-ops/</link>
    <pubDate>Fri, 13 Jan 2023 22:22:44 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/graph-enabled-infra-ops/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/graph-enabled-infra-ops/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>图技术在大型、复杂基础设施之中 SRE/DevOps 的实践参考，本文以 OpenStack 系统之上的图数据库增强的运维案例为例，揭示图数据库、图算法的智能运维方法，全流程示例代码开源。</p>
</blockquote>
<p>因为有一些还未采用图技术的 DevOps/Infra 领域同学在 NebulaGraph 社区询问参考的案例，我最近试着实践了一下如何利用图的能力与优势去帮助在复杂基础设施上构建辅助运维系统，希望能帮助到感兴趣 Infra Ops 领域、同时感兴趣图数据库、图算法的大家，全过程都是可以复现、并且开源的。</p>
<p>复杂的基础设施运维环境通常包含非常多、不同层面的资源（manifest)，为了能够尽量还原真实世界的复杂环境、又保持这个实例项目的复杂度不会失控，我选择了用一个基础设施平台：OpenStack 作为例子。</p>
<p>本文实现了 OpenStack 系统上分别利用 Push 和 Pull 两种模式将资源之中被图谱建模的图中点、边信息加载到 NebulaGraph 里的 Graph ETL 管道的路径。</p>
<p>在图谱之上，本文探索如下用例：</p>
<ul>
<li>告警、状态的推理与传导；</li>
<li>网络直连与互联关系；</li>
<li>镜像、云盘、快照血缘管理；</li>
<li>高相关性虚机预警；</li>
<li>秘钥泄漏的图上风控分析；</li>
<li>镜像、云盘漏洞范围分析；</li>
<li>宿主机逃离影响范围分析；</li>
<li>脆弱依赖资源检测；</li>
</ul>
<h2 id="试验环境搭建" class="headerLink">
    <a href="#%e8%af%95%e9%aa%8c%e7%8e%af%e5%a2%83%e6%90%ad%e5%bb%ba" class="header-mark"></a>1 试验环境搭建</h2><h3 id="背景知识" class="headerLink">
    <a href="#%e8%83%8c%e6%99%af%e7%9f%a5%e8%af%86" class="header-mark"></a>1.1 背景知识</h3><p>OpenStack 是一个开源的云计算平台，提供了类似于 AWS 的云服务。它提供了一组可插拔的模块，包括了计算，存储和网络等功能，可以帮助用户构建和管理云环境。OpenStack采用分布式架构，支持多种操作系统和硬件平台，可以在企业级和服务提供商级环境中使用。</p>
<p><figure><a class="lightgallery" href="/graph-enabled-infra-ops/OpenStack-overview-diagram-new.webp" title="OpenStack-overview-diagram-new" data-thumbnail="/graph-enabled-infra-ops/OpenStack-overview-diagram-new.webp">
        <img
            
            loading="lazy"
            src="/graph-enabled-infra-ops/OpenStack-overview-diagram-new.webp"
            srcset="/graph-enabled-infra-ops/OpenStack-overview-diagram-new.webp, /graph-enabled-infra-ops/OpenStack-overview-diagram-new.webp 1.5x, /graph-enabled-infra-ops/OpenStack-overview-diagram-new.webp 2x"
            sizes="auto"
            alt="OpenStack-overview-diagram-new" height="1259"  width="1593" >
    </a></figure></p>
<p>最初由 <em>NASA</em> 和 <em>Rackspace</em> Inc. 发起的 nova （虚拟化计算项目）和 swift （兼容 S3 的对象存储）项目组成，OpenStack 现在由非常多不同的子项目组成：</p>
<p><figure><a class="lightgallery" href="/graph-enabled-infra-ops/openstack-map-v20221001.webp" title="openstack-map-v20221001" data-thumbnail="/graph-enabled-infra-ops/openstack-map-v20221001.webp">
        <img
            
            loading="lazy"
            src="/graph-enabled-infra-ops/openstack-map-v20221001.webp"
            srcset="/graph-enabled-infra-ops/openstack-map-v20221001.webp, /graph-enabled-infra-ops/openstack-map-v20221001.webp 1.5x, /graph-enabled-infra-ops/openstack-map-v20221001.webp 2x"
            sizes="auto"
            alt="openstack-map-v20221001" height="1080"  width="1920" >
    </a></figure></p>
<p>本实验中，我们设计的 OpenStack 主要项目有：</p>
<ul>
<li>Nova 是 OpenStack 的计算服务，用于管理虚拟机。</li>
<li>Cinder 是 OpenStack 的块存储服务，用于管理云存储。</li>
<li>Neutron 是 OpenStack 的网络服务，用于管理云网络。</li>
<li>Glance 是 OpenStack 的镜像服务，用于管理云镜像。</li>
<li>Horizon 是 OpenStack 的可视化控制台服务。</li>
</ul>
<p>除此之外，我还引入了 Vitrage 项目辅助我们收集部分资源数据：</p>
<ul>
<li>Vitrage 是 OpenStack 中的一个高级分析和可视化工具，用于分析和可视化 OpenStack 环境中的资源和事件。它可以汇集来自 OpenStack 各个服务的数据，并使用图形化方式展示出来。Vitrage 发现和诊断问题，提高 OpenStack 环境的可用性和可维护性。</li>
</ul>
<p>得益于 OpenStack Decouple 的设计理念，Vitrage 可以很容易、无侵入式（只需要修改需要收集的服务两行配置）就可以在 OpenStack 的消息队列中订阅资源信息的 push 消息。</p>
<p>不过比较遗憾的是 Vitrage 这个项目已经有好多个 release cycle 没有什么大的更新了，应该是比较不活跃的状态了，比如在 zed 里，它的 Vitrage Dashboard 作为 Horizon 插件已经无法正常工作了，本实验只利用它的资源收集能力。</p>
<h3 id="环境准备搭建" class="headerLink">
    <a href="#%e7%8e%af%e5%a2%83%e5%87%86%e5%a4%87%e6%90%ad%e5%bb%ba" class="header-mark"></a>1.2 环境准备搭建</h3><h4 id="nebulagraph-集群" class="headerLink">
    <a href="#nebulagraph-%e9%9b%86%e7%be%a4" class="header-mark"></a>1.2.1 NebulaGraph 集群</h4><p>首次快速试玩安装 NebulaGraph 的话，有这么几个选项：</p>
<ul>
<li>阿里云上的 NebulaGraph 企业版（带有企业版独有的满血版可视化工具：Explorer，可以图探索、画布内跑图算法），可以获得一个月所有资源免费使用资格：
<ul>
<li>访问 <a href="https://www.siwei.io/try-aliyun" target="_blank" rel="noopener noreferrer">https://www.siwei.io/try-aliyun</a> 获得</li>
</ul>
</li>
<li>Nebula-Up 一键安装 NebulaGraph 开源社区版本，需要一个带有 Docker、Docker Desktop 环境的机器
<ul>
<li>访问 <a href="https://github.com/wey-gu/nebula-up" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/nebula-up</a></li>
</ul>
</li>
<li>有经验的同学可以参考文档进行部署：
<ul>
<li>访问 <a href="https://docs.nebula-graph.com.cn/" target="_blank" rel="noopener noreferrer">https://docs.nebula-graph.com.cn/</a></li>
</ul>
</li>
</ul>
<h4 id="openstack-集群" class="headerLink">
    <a href="#openstack-%e9%9b%86%e7%be%a4" class="header-mark"></a>1.2.2 OpenStack 集群</h4><blockquote>
<p>注意：如果大家已经有现成的 OpenStack 集群，这一步可以忽略，您只需要再去安装 OpenStack Vitrage 就好了。</p>
</blockquote>
<p>本文需要的 OpenStack 集群是一个多机的环境，为此，我准备了在 Linux Server 上利用 Libvirt 和 Linux Bridge 搭建多个虚拟机用来模拟 OpenStack 的物理机，得益于 CPU 的嵌套虚拟化和 qemu，后边我们完全可以在虚拟机搭建的实验环境中模拟可正常工作的 OpenStack nova instance 虚机。</p>
<p>整个流程我都放在 <a href="https://github.com/wey-gu/openstack-graph/#environment-setup" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/openstack-graph/#environment-setup</a> 这里了，感兴趣的同学可以访问、获取。</p>
<p>虚拟机搭建之后，我们还需要模拟真实的 Infra 环境，创建很多资源：整个过程也在 <a href="https://github.com/wey-gu/openstack-graph/#create-resources-on-openstack" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/openstack-graph/#create-resources-on-openstack</a> 有详细列出，想要动手操作的同学可以参考来亲自上手一下。</p>
<p>参考如上步骤操作之后，我们应该可以通过 Horizon Dashboard 查看集群和资源：</p>
<p>我们创建了几个虚拟机：<figure><a class="lightgallery" href="/graph-enabled-infra-ops/nova_instance.webp" title="nova_instance" data-thumbnail="/graph-enabled-infra-ops/nova_instance.webp">
        <img
            
            loading="lazy"
            src="/graph-enabled-infra-ops/nova_instance.webp"
            srcset="/graph-enabled-infra-ops/nova_instance.webp, /graph-enabled-infra-ops/nova_instance.webp 1.5x, /graph-enabled-infra-ops/nova_instance.webp 2x"
            sizes="auto"
            alt="nova_instance" height="1900"  width="3508" >
    </a></figure></p>
<p>几个网盘，其中四个挂载在不同的虚拟机上</p>
<p><figure><a class="lightgallery" href="/graph-enabled-infra-ops/cinder_volume.webp" title="cinder_volume" data-thumbnail="/graph-enabled-infra-ops/cinder_volume.webp">
        <img
            
            loading="lazy"
            src="/graph-enabled-infra-ops/cinder_volume.webp"
            srcset="/graph-enabled-infra-ops/cinder_volume.webp, /graph-enabled-infra-ops/cinder_volume.webp 1.5x, /graph-enabled-infra-ops/cinder_volume.webp 2x"
            sizes="auto"
            alt="cinder_volume" height="1900"  width="3508" >
    </a></figure></p>
<p>集群租户的网络拓扑：<figure><a class="lightgallery" href="/graph-enabled-infra-ops/neutron_topology.webp" title="neutron_topology" data-thumbnail="/graph-enabled-infra-ops/neutron_topology.webp">
        <img
            
            loading="lazy"
            src="/graph-enabled-infra-ops/neutron_topology.webp"
            srcset="/graph-enabled-infra-ops/neutron_topology.webp, /graph-enabled-infra-ops/neutron_topology.webp 1.5x, /graph-enabled-infra-ops/neutron_topology.webp 2x"
            sizes="auto"
            alt="neutron_topology" height="2334"  width="4064" >
    </a></figure></p>
<p>我们还能通过 OpenStack Vitrage 的 API/CLI 获得部分主要资源的拓扑：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">source</span> openrc admin admin
</span></span><span class="line"><span class="cl">vitrage topology show --all-tenants
</span></span></code></pre></td></tr></table>
</div>
</div><p>它的结果是一个 JSON，里边已经按照边（links）和点（nodes）序列化图结构的数据了。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;directed&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;graph&#34;</span><span class="p">:</span> <span class="p">{},</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;links&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_is_deleted&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;relationship_type&#34;</span><span class="p">:</span> <span class="s2">&#34;contains&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;source&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;target&#34;</span><span class="p">:</span> <span class="mi">11</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;key&#34;</span><span class="p">:</span> <span class="s2">&#34;contains&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_is_deleted&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;relationship_type&#34;</span><span class="p">:</span> <span class="s2">&#34;contains&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;source&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;target&#34;</span><span class="p">:</span> <span class="mi">13</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;key&#34;</span><span class="p">:</span> <span class="s2">&#34;contains&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="err">...</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_is_deleted&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;relationship_type&#34;</span><span class="p">:</span> <span class="s2">&#34;attached&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;source&#34;</span><span class="p">:</span> <span class="mi">27</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;target&#34;</span><span class="p">:</span> <span class="mi">28</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;key&#34;</span><span class="p">:</span> <span class="s2">&#34;attached&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">],</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;multigraph&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;nodes&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="s2">&#34;node0&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_type&#34;</span><span class="p">:</span> <span class="s2">&#34;nova.host&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_category&#34;</span><span class="p">:</span> <span class="s2">&#34;RESOURCE&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_is_deleted&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;update_timestamp&#34;</span><span class="p">:</span> <span class="s2">&#34;2023-01-13T08:06:48Z&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_sample_timestamp&#34;</span><span class="p">:</span> <span class="s2">&#34;2023-01-13T08:06:49Z&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_is_placeholder&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_id&#34;</span><span class="p">:</span> <span class="s2">&#34;630b4c2c-5347-4073-91a3-255ec18dadfc&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;node0&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_cached_id&#34;</span><span class="p">:</span> <span class="s2">&#34;d043d278a6a712909e30e50ca8ec2364&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;is_real_vitrage_id&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_aggregated_state&#34;</span><span class="p">:</span> <span class="s2">&#34;AVAILABLE&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_operational_state&#34;</span><span class="p">:</span> <span class="s2">&#34;OK&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_datasource_name&#34;</span><span class="p">:</span> <span class="s2">&#34;nova.host&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;state&#34;</span><span class="p">:</span> <span class="s2">&#34;available&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;graph_index&#34;</span><span class="p">:</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="s2">&#34;nova&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_type&#34;</span><span class="p">:</span> <span class="s2">&#34;nova.zone&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_category&#34;</span><span class="p">:</span> <span class="s2">&#34;RESOURCE&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_is_deleted&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_sample_timestamp&#34;</span><span class="p">:</span> <span class="s2">&#34;2023-01-12T03:06:48Z&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_is_placeholder&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_id&#34;</span><span class="p">:</span> <span class="s2">&#34;a1e9c808-dac8-4b59-8f80-f21a90e9869d&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_cached_id&#34;</span><span class="p">:</span> <span class="s2">&#34;125f1d8c4451a6385cc2cfa2b0ba45be&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;is_real_vitrage_id&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_aggregated_state&#34;</span><span class="p">:</span> <span class="s2">&#34;AVAILABLE&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_operational_state&#34;</span><span class="p">:</span> <span class="s2">&#34;OK&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;state&#34;</span><span class="p">:</span> <span class="s2">&#34;available&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;update_timestamp&#34;</span><span class="p">:</span> <span class="s2">&#34;2023-01-12T03:06:48Z&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;nova&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_datasource_name&#34;</span><span class="p">:</span> <span class="s2">&#34;nova.zone&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;graph_index&#34;</span><span class="p">:</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="err">...</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;raw&#34;</span><span class="err">:</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl"><span class="err">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="图谱建模" class="headerLink">
    <a href="#%e5%9b%be%e8%b0%b1%e5%bb%ba%e6%a8%a1" class="header-mark"></a>2 图谱建模</h2><p>本实验环境中，我们考虑纳入如下资源进入图谱：</p>
<ul>
<li>nova instance: 是Nova服务中的虚拟机实例，每个nova instance都有自己的配置信息（如CPU、内存、磁盘等），有时候我们就叫它 server 或者 VM、虚机。</li>
<li>nova host是Nova服务中的物理主机，是nova instance运行的物理环境。nova host上面会运行nova-compute服务，这个服务负责管理和调度nova instance。nova host上面还可能运行其他服务，如网络服务等。</li>
<li>nova keypair: 是Nova服务中的密钥对，用于访问nova instance</li>
<li>cinder volume: 是Cinder服务中的云存储卷，可以 attach 到nova instance上做为硬盘</li>
<li>cinder snapshot: 是Cinder服务中的云存储快照，可以在cinder volume上做快照</li>
<li>glance image: 是Glance服务中的镜像，可以作为创建nova instance时候的启动硬盘</li>
<li>neutron network: 是Neutron服务中的网络，可以用于配置nova instance的网络连接</li>
<li>neutron port: 是Neutron服务中的端口，用来连接nova instance和neutron network之间，在 nova instance 虚拟机上，一个 port 常常对应一个网卡（如果不是 trunk port 的话）。</li>
</ul>
<p>他们之间的关系如下：</p>
<p><figure><a class="lightgallery" href="/graph-enabled-infra-ops/schema_draft.webp" title="schema_draft" data-thumbnail="/graph-enabled-infra-ops/schema_draft.webp">
        <img
            
            loading="lazy"
            src="/graph-enabled-infra-ops/schema_draft.webp"
            srcset="/graph-enabled-infra-ops/schema_draft.webp, /graph-enabled-infra-ops/schema_draft.webp 1.5x, /graph-enabled-infra-ops/schema_draft.webp 2x"
            sizes="auto"
            alt="schema_draft" height="1110"  width="1862" >
    </a></figure></p>
<h2 id="基础设施图-etl" class="headerLink">
    <a href="#%e5%9f%ba%e7%a1%80%e8%ae%be%e6%96%bd%e5%9b%be-etl" class="header-mark"></a>3 基础设施图 ETL</h2><p>接下来我们解决从基础设施中抽取资源元数据的问题，</p>
<h3 id="push-模式" class="headerLink">
    <a href="#push-%e6%a8%a1%e5%bc%8f" class="header-mark"></a>3.1 push 模式</h3><p>这里的 push 指的是基础设施为主语，从资源方向我们的图谱系统主动、事件驱动地发出资源变动的信息。它的好处是资源中的实时性好，但是坏处是依赖基础设施自身，很多非常瘦的、软件定义/可编程程度不高的组件、比如某些硬件设备没有 push 机制，或者像是古老的软件系统不一定能存在 push 的接口，改造起来有侵入性。</p>
<p>前边提及过，OpenStack 自身是存在 Push hook 的机制的，它的子项目 vitrage 就利用这个机制很优雅地收集系统资源、告警等信息进入图中，类似的机制在其他平台中也是可以实现的。</p>
<p>本实验中我们就利用 vitrage 的机制去收集一部分图谱中的资源信息，如下图，可以看到 vitrage 会在 OpenStack message bus 中订阅 nova/cinder/neutron 等服务中的资源时间，把事件传入 Entity Queue，经过处理，存储到 Entity Graph 中。</p>
<p>在此之上，我们可以通过 vitrage API 获取图谱的拓扑，来消费它。</p>
<blockquote>
<p>注意：实际上 Vitrage 服务还提供了推理告警、推理状态、定义决策事件的能力，这里我们并没有采用，后边我们在图上做的一些事情甚至还和它的能力有一些重叠。</p>
</blockquote>
<p><figure><a class="lightgallery" href="/graph-enabled-infra-ops/vitrage_arch.webp" title="vitrage_arch" data-thumbnail="/graph-enabled-infra-ops/vitrage_arch.webp">
        <img
            
            loading="lazy"
            src="/graph-enabled-infra-ops/vitrage_arch.webp"
            srcset="/graph-enabled-infra-ops/vitrage_arch.webp, /graph-enabled-infra-ops/vitrage_arch.webp 1.5x, /graph-enabled-infra-ops/vitrage_arch.webp 2x"
            sizes="auto"
            alt="vitrage_arch" height="1520"  width="2346" >
    </a></figure></p>
<p>这里我只是用它来展示 push 模式的工作机制，如果没有 Virtrage 这个项目存在，我们也可以比较容易通过 OpenStack 的 oslo.messaging 这个库很容易写出在 Message Bus（可能是 Kafka, RabbitMQ 等不同底层实现）上订阅资源时间的应用，然后把事件通过 Flink/ Kafka/ Pulsar 等方式接驳 NebulaGraph。</p>
<p>因为 Vitrage 的存在，我就偷懒不用去实现这部分逻辑，只消写一小部分代码调用 Vitrage API 取这个数据就可以了，讽刺的是，从这个角度来看，这其实是一种 pull 的模式了，不用拘泥它本质上算是哪一种方式，至少在资源发起测，我们把它当做 push 模式的例子看待吧。</p>
<p>这部分从 Vitrage 抓取的代码我放在 <a href="https://github.com/wey-gu/openstack-graph/blob/main/utils/vitrage_to_graph.py" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/openstack-graph/blob/main/utils/vitrage_to_graph.py</a> 了，调用方式很简单，在有 OpenStack 客户端的环境中，执行它就可以了，比如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 连到 node0 上</span>
</span></span><span class="line"><span class="cl">ssh stack@node0_ip
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 进入 devstack 目录</span>
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> devstack
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 下载 vitrage 中图数据，解析为 NeublaGraph DML/DQL 的工具</span>
</span></span><span class="line"><span class="cl">wget https://raw.githubusercontent.com/wey-gu/openstack-graph/main/utils/vitrage_to_graph.py
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 执行它</span>
</span></span><span class="line"><span class="cl">python3 vitrage_to_graph.py
</span></span></code></pre></td></tr></table>
</div>
</div><p>执行之后，会生成如下文件：</p>
<ul>
<li><code>schema.ngql</code> 图数据的 Schema 定义</li>
<li><code>vertices/</code> 点数据的文件夹</li>
<li><code>edges/</code> 边数据的文件夹</li>
</ul>
<h3 id="pull-模式" class="headerLink">
    <a href="#pull-%e6%a8%a1%e5%bc%8f" class="header-mark"></a>3.2 pull 模式</h3><p>反过来，pull 模式是从资源外部定期或者事件驱动地拉取资源，存入图谱的方式。刚好本实验中 vitrage 抓取的资源是有限的，有一些额外的资源我单独写了 python 的代码来主动全量抓取，pull 模式的好处是对资源方没有任何侵入性，只需要调用它的接口获取信息就可以了，坏处则是有的系统不太容易获得增量变化，可能只能全量去取。</p>
<p>这部分我抓取的关系如下：</p>
<ul>
<li>glance_used_by: <code>image -[:used_by]-&gt; instance (get from instance)</code></li>
<li>glance_created_from: <code>image -[:created_from]-&gt; volume (get from image)</code></li>
<li>nova_keypair_used_by: <code>keypair -[:used_by]-&gt; instance (get from instance)</code></li>
<li>cinder_snapshot_created_from: <code>volume snapshot -[:created_from]-&gt; volume (get from snapshot)</code></li>
<li>cinder_volume_created_from: <code>volume -[:created_from]-&gt; volume snapshot (get from volume)</code></li>
<li>cinder_volume_created_from: <code>volume -[:created_from]-&gt; image (get from volume)</code></li>
</ul>
<p>类似的，它的代码放在 <a href="https://github.com/wey-gu/openstack-graph/blob/main/utils/pull_resources_to_graph.py" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/openstack-graph/blob/main/utils/pull_resources_to_graph.py</a> 之中，在真实场景下，我们可能会用 Apache Airflow、dagster 甚至是 cron job 等方式定期执行它。</p>
<p>我们手动执行的方式也很简单：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 连到 node0 上</span>
</span></span><span class="line"><span class="cl">ssh stack@node0_ip
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 进入 devstack 目录</span>
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> devstack
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 下载抓取 OpenStack 资源，生成 NeublaGraph DML/DQL 的工具</span>
</span></span><span class="line"><span class="cl">wget https://raw.githubusercontent.com/wey-gu/openstack-graph/main/utils/pull_resources_to_graph.py.py
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 执行它</span>
</span></span><span class="line"><span class="cl">python3 pull_resources_to_graph.py
</span></span></code></pre></td></tr></table>
</div>
</div><p>执行之后，会生成点、边的 ngql 语句在两个文件夹下：</p>
<ul>
<li><code>vertices/</code> 点数据的文件夹</li>
<li><code>edges/</code> 边数据的文件夹</li>
</ul>
<h3 id="加载数据到-nebulagraph" class="headerLink">
    <a href="#%e5%8a%a0%e8%bd%bd%e6%95%b0%e6%8d%ae%e5%88%b0-nebulagraph" class="header-mark"></a>3.3 加载数据到 NebulaGraph</h3><p>我们只需要在 NebulaGraph Studio Console, Explorer Console 或者 NebulaGraph 命令行 Console 中执行上边生成的 <code>.ngql</code> 文件就好了：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># DDL from vitrage</span>
</span></span><span class="line"><span class="cl">cat schema.ngql
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># DDL and DML for both push and pull mode data</span>
</span></span><span class="line"><span class="cl">cat edges/*.ngql
</span></span><span class="line"><span class="cl">cat vertices/*.ngql
</span></span></code></pre></td></tr></table>
</div>
</div><p>之后，在 NebulaGraph 中我们会有一个叫做 <code>openstack</code> 的图空间，用这个查询可以查到所有数据：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">MATCH (n) WITH n LIMIT 1000
</span></span><span class="line"><span class="cl">OPTIONAL MATCH p=(n)--()
</span></span><span class="line"><span class="cl">RETURN p, n
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后渲染在 explorer 中，手动设置一下数据的图标，就可以看到我们 OpenStack 集群里的所有租户的资源图了：</p>
<p><figure><a class="lightgallery" href="/graph-enabled-infra-ops/all_graph_view.webp" title="all_graph_view" data-thumbnail="/graph-enabled-infra-ops/all_graph_view.webp">
        <img
            
            loading="lazy"
            src="/graph-enabled-infra-ops/all_graph_view.webp"
            srcset="/graph-enabled-infra-ops/all_graph_view.webp, /graph-enabled-infra-ops/all_graph_view.webp 1.5x, /graph-enabled-infra-ops/all_graph_view.webp 2x"
            sizes="auto"
            alt="all_graph_view" height="2334"  width="4064" >
    </a></figure></p>
<p>接下来我们终于可以在图上看看有意思的洞察了。</p>
<h2 id="基于图谱的基础设施运维示例" class="headerLink">
    <a href="#%e5%9f%ba%e4%ba%8e%e5%9b%be%e8%b0%b1%e7%9a%84%e5%9f%ba%e7%a1%80%e8%ae%be%e6%96%bd%e8%bf%90%e7%bb%b4%e7%a4%ba%e4%be%8b" class="header-mark"></a>4 基于图谱的基础设施运维示例</h2><p>作为非 SRE、DevOps 人员，我尝试藉由自己在 OpenStack 和图技术的理解想象出下边的一些实例，希望能帮助到需要的读者们。</p>
<h3 id="告警状态的推理与传导" class="headerLink">
    <a href="#%e5%91%8a%e8%ad%a6%e7%8a%b6%e6%80%81%e7%9a%84%e6%8e%a8%e7%90%86%e4%b8%8e%e4%bc%a0%e5%af%bc" class="header-mark"></a>4.1 告警、状态的推理与传导</h3><p>这部分我收到了 vitrage 项目的启发，参考它们给出的实例文档：<a href="https://github.com/openstack/vitrage/blob/master/doc/source/contributor/vitrage-templates.rst" target="_blank" rel="noopener noreferrer">这里</a>。</p>
<p>借助资源图谱实时图查询、图计算甚至图可视化能力，我们可以在图上推理、传导一些信息，把重要的时间藉由图上组织好的知识分发到需要收到通知的人、组织、系统。</p>
<p>一个简单的例子是，比如我们在 nova host（虚拟机的宿主机、hypervisor 机器，以下简称宿主机），中获得了一个告警、事件的时候，可能是网卡失败、物理硬盘预警、CPU占用过高之类的告警。我们可以借助图谱查询获得所有相关联的虚机，然后把（WARN）级别的告警发出去或者设置它们为（亚健康）的状态。</p>
<p>这样，获得通知的对象，往往是一些用户的系统，就可以根据他们预先定义好的策略做一些自动化运维，或者通知的 hook：</p>
<ul>
<li>收到“宿主机 CPU 过高”的告警的情形下，可以根据用户自己设定的不同策略把虚机迁移走，或者更高级复杂的撤离方式（开始不接受新的 traffic，创建新的替代 workload，然后 gracefully 关闭这个 workload）</li>
<li>“控制面网络故障”告警情况下，这时候往往无法成功进行主机的车里、迁移，故可以考虑触发备份主机、启动新 workload、关机</li>
<li>其他“（亚健康）状态”，可以作为负载层面出问题的根因分析（RCA）依据</li>
</ul>
<p>下边，我们给出一个在图谱上进行告警、状态传导的查询例子，我们假设 vid 为 <code>node0</code> 的宿主机出现了高 CPU 的告警，则这个查询可以得到所有其上的虚机，获得时间、告警通知列表：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">vm</span><span class="p">:</span><span class="n">nova_instance</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="o">`</span><span class="n">contains</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">host_CPU_high</span><span class="p">:</span><span class="n">nova_host</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">host_CPU_high</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;node0&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">vm</span><span class="p">.</span><span class="n">nova_instance</span><span class="p">.</span><span class="n">name</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">VM_to_raise_CPU_alarms</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这其中查询的图模式是从 <code>host_CPU_high</code> 这个 <code>nova_host</code> 向外经由 <code>contains</code> 这个关系指向 <code>vm</code> 这个 <code>nova_instance</code> 的：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="p">(</span><span class="n">vm</span><span class="p">:</span><span class="n">nova_instance</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="o">`</span><span class="n">contains</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">host_CPU_high</span><span class="p">:</span><span class="n">nova_host</span><span class="p">)</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>它的结果是：</p>
<table>
<thead>
<tr>
<th style="text-align:left">VM_to_raise_CPU_alarms</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">server-4</td>
</tr>
<tr>
<td style="text-align:left">server-3</td>
</tr>
<tr>
<td style="text-align:left">server-1</td>
</tr>
<tr>
<td style="text-align:left">server-0</td>
</tr>
</tbody>
</table>
<p>如果我们把查询改动一下，选择输出全路径，则可以看到这个信息传导的方向：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">vm</span><span class="p">:</span><span class="n">nova_instance</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="o">`</span><span class="n">contains</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">host_CPU_high</span><span class="p">:</span><span class="n">nova_host</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">host_CPU_high</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;node0&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>在 Explorer 中渲染，点击 N 跳检测：</p>
<video width="800" controls>
  <source src="https://user-images.githubusercontent.com/1651790/212291702-1754c9ce-f23f-4a68-930c-07a587c113be.mov" type="video/mp4"> 
</video>
<p>第一个例子比较简单，甚至不是很有必要用图的能力（这种因为一跳查询表结构中也是很轻松地，我们用一两个 nova API call 就可以搞定等价的信息获取了），这里只是一个例子，实际上我们在图上可以做很多更 Graphy（具有图属性的）、复杂、独特的工作，我们慢慢来看。</p>
<h3 id="网络可达检测" class="headerLink">
    <a href="#%e7%bd%91%e7%bb%9c%e5%8f%af%e8%be%be%e6%a3%80%e6%b5%8b" class="header-mark"></a>4.2 网络可达检测</h3><p>我们来考虑这样的场景，在 OpenStack 中，不同的主机可以连接到相同的子网（VPC），主机也可以连接到多个子网之中，这样，主机之间的网络连通性信息、与网络联通相关的推理、传导都可以在图上进行。</p>
<blockquote>
<p>注：在真实世界中，这里可能还要考虑 Security Group、Router、Switch 等因素，本利中我们用到的 OpenStack 是 L2 only 的 Setup，比较简化。</p>
</blockquote>
<p>获得与虚机 <code>server_a</code> 同一 VPC 的所有其他虚机看起来很容易表达了：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">server_a</span><span class="p">)</span><span class="o">--</span><span class="p">(:</span><span class="n">neutron_port</span><span class="p">)</span><span class="o">--</span><span class="p">(:</span><span class="n">neutron_network</span><span class="p">)</span><span class="o">--</span><span class="p">(:</span><span class="n">neutron_port</span><span class="p">)</span><span class="o">--</span><span class="p">(</span><span class="n">server_b</span><span class="p">:</span><span class="o">`</span><span class="n">nova_instance</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">server_a</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;server-0&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">server_b</span><span class="p">.</span><span class="n">nova_instance</span><span class="p">.</span><span class="n">name</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">L2_connected_server</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>结果如下：</p>
<table>
<thead>
<tr>
<th style="text-align:left">L2_connected_server</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">server-1</td>
</tr>
</tbody>
</table>
<p>看起来很初级呀，接下来我们再查询与虚机 <code>server_a</code> 同一 VPC、或者有可能通过跨网络虚机而互联的主机的所有其他虚机，这时候，我们除了共享 neutron network(VPC) 的情况，还要查询所有二层直连的虚机可能通过其他 VPC 连出去的的虚机，这里，我们用到了 <code>OPTIONAL MATCH</code> 的表达，表示可能匹配到的模式：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">server_a</span><span class="p">)</span><span class="o">--</span><span class="p">(:</span><span class="n">neutron_port</span><span class="p">)</span><span class="o">--</span><span class="p">(</span><span class="n">net</span><span class="p">:</span><span class="n">neutron_network</span><span class="p">)</span><span class="o">--</span><span class="p">(:</span><span class="n">neutron_port</span><span class="p">)</span><span class="o">--</span><span class="p">(</span><span class="n">server_b</span><span class="p">:</span><span class="o">`</span><span class="n">nova_instance</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">server_a</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;server-0&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">server_b</span><span class="p">)</span><span class="o">--</span><span class="p">()</span><span class="o">--</span><span class="p">(</span><span class="n">other_net</span><span class="p">:</span><span class="n">neutron_network</span><span class="p">)</span><span class="o">--</span><span class="p">(:</span><span class="n">neutron_port</span><span class="p">)</span><span class="o">--</span><span class="p">(</span><span class="n">server_c</span><span class="p">:</span><span class="o">`</span><span class="n">nova_instance</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WITH</span><span class="w"> </span><span class="n">server_a</span><span class="p">,</span><span class="w"> </span><span class="n">server_b</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">same_subnet_machines</span><span class="p">,</span><span class="w"> </span><span class="n">server_c</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">routeable_machines</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">routeable_machines</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">server_a</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">same_subnet_machines</span><span class="p">.</span><span class="n">nova_instance</span><span class="p">.</span><span class="n">name</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">L2_connected_server</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="n">routeable_machines</span><span class="p">.</span><span class="n">nova_instance</span><span class="p">.</span><span class="n">name</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">cross_vpc_server</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到结果里，跨网络潜在的相连主机还有 server-3：</p>
<table>
<thead>
<tr>
<th style="text-align:left">L2_connected_server</th>
<th style="text-align:left">cross_vpc_server</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">server-1</td>
<td style="text-align:left">server-3</td>
</tr>
</tbody>
</table>
<p>我们将其可视化，同样，修改输出为路径 <code>p</code> 和 <code>p1</code>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">server_a</span><span class="p">)</span><span class="o">--</span><span class="p">(:</span><span class="n">neutron_port</span><span class="p">)</span><span class="o">--</span><span class="p">(</span><span class="n">net</span><span class="p">:</span><span class="n">neutron_network</span><span class="p">)</span><span class="o">--</span><span class="p">(:</span><span class="n">neutron_port</span><span class="p">)</span><span class="o">--</span><span class="p">(</span><span class="n">server_b</span><span class="p">:</span><span class="o">`</span><span class="n">nova_instance</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">server_a</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;server-0&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="n">p1</span><span class="o">=</span><span class="p">(</span><span class="n">server_b</span><span class="p">)</span><span class="o">--</span><span class="p">()</span><span class="o">--</span><span class="p">(</span><span class="n">other_net</span><span class="p">:</span><span class="n">neutron_network</span><span class="p">)</span><span class="o">--</span><span class="p">(:</span><span class="n">neutron_port</span><span class="p">)</span><span class="o">--</span><span class="p">(</span><span class="n">server_c</span><span class="p">:</span><span class="o">`</span><span class="n">nova_instance</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="p">,</span><span class="w"> </span><span class="n">p1</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>它可能的连接路径一目了然</p>
<p><figure><a class="lightgallery" href="/graph-enabled-infra-ops/cross_vpc_vm.webp" title="cross_vpc_vm" data-thumbnail="/graph-enabled-infra-ops/cross_vpc_vm.webp">
        <img
            
            loading="lazy"
            src="/graph-enabled-infra-ops/cross_vpc_vm.webp"
            srcset="/graph-enabled-infra-ops/cross_vpc_vm.webp, /graph-enabled-infra-ops/cross_vpc_vm.webp 1.5x, /graph-enabled-infra-ops/cross_vpc_vm.webp 2x"
            sizes="auto"
            alt="cross_vpc_vm" height="2334"  width="4064" >
    </a></figure></p>
<p>有了获得这些信息的能力，我们可以可编程地连接告警、状态、安全风控、网络等方方面面系统了，因为这不是本文的重点，这里就不加以赘述了，欢迎大家来 NebulaGraph 社区分享你们的图洞察使用方式。</p>
<p>接下来我们来看看存储相关的例子。</p>
<h3 id="镜像云盘快照的血缘" class="headerLink">
    <a href="#%e9%95%9c%e5%83%8f%e4%ba%91%e7%9b%98%e5%bf%ab%e7%85%a7%e7%9a%84%e8%a1%80%e7%bc%98" class="header-mark"></a>4.3 镜像、云盘、快照的血缘</h3><p>在基础设施中，云盘（iSCSI、Ceph、NFS）、镜像、快照之间有多重复杂的关系，比如：</p>
<ul>
<li>一个系统镜像可能从某一个虚拟机挂载的云盘或者一个快照创建</li>
<li>一个云盘可能是从一个系统镜像、一个快照或者另一个云盘创建</li>
<li>一个快照是从一个云盘创建的</li>
</ul>
<p>这种血缘信息的识别和管理是很有必要的。下边的查询可以获得给定的虚机 <code>server-0</code> 的所有存储血缘：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">server_a</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">attached</span><span class="o">`|</span><span class="n">created_from</span><span class="o">|</span><span class="n">used_by</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">step1</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">server_a</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;server-0&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="n">p1</span><span class="o">=</span><span class="p">(</span><span class="n">step1</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">created_from</span><span class="o">*</span><span class="mi">1</span><span class="p">..</span><span class="mi">5</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">step2</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="p">,</span><span class="w"> </span><span class="n">p1</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>我们可以看到结果中：</p>
<ul>
<li><code>server-0</code> 的启动镜像（这里它是从本地盘启动的，没有挂载云盘）是从 <code>volume-1</code> 创建的</li>
<li><code>volume-1</code> 是从 <code>cirros-0.5.2-x86_64-disk</code> 这个镜像创建的</li>
<li>此外，还有其他有分叉关系的存储资源和他们也息息相关</li>
</ul>
<p><figure><a class="lightgallery" href="/graph-enabled-infra-ops/storage_lineage_0.webp" title="storage_lineage_0" data-thumbnail="/graph-enabled-infra-ops/storage_lineage_0.webp">
        <img
            
            loading="lazy"
            src="/graph-enabled-infra-ops/storage_lineage_0.webp"
            srcset="/graph-enabled-infra-ops/storage_lineage_0.webp, /graph-enabled-infra-ops/storage_lineage_0.webp 1.5x, /graph-enabled-infra-ops/storage_lineage_0.webp 2x"
            sizes="auto"
            alt="storage_lineage_0" height="2334"  width="4064" >
    </a></figure></p>
<p>接下来，我们不只考虑存储资源，再看看涉及云盘（cinder_volume）挂载（attached）这层关系下的血缘关系：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">server_a</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">attached</span><span class="o">`|</span><span class="n">created_from</span><span class="o">|</span><span class="n">used_by</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">step1</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">server_a</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;server-4&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="n">p1</span><span class="o">=</span><span class="p">(</span><span class="n">step1</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">created_from</span><span class="o">|</span><span class="n">attached</span><span class="o">*</span><span class="mi">1</span><span class="p">..</span><span class="mi">5</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">step2</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="p">,</span><span class="w"> </span><span class="n">p1</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这次，我们可以从渲染图中读出这样的洞察：</p>
<ul>
<li><code>server-4</code> 的启动镜像（这里它是从本地盘启动的）是从 <code>volume-1</code> 创建的
<ul>
<li>而 <code>volume-1</code> 现在挂载在 <code>server-6</code> 上</li>
<li><code>volume-1</code> 是从 <code>cirros-0.5.2-x86_64-disk</code> 这个镜像创建的</li>
<li>同样 <code>cirros-0.5.2-x86_64-disk</code> 镜像被很多其他虚机在采用</li>
</ul>
</li>
<li><code>server-4</code> 同时挂载了数据盘 <code>volume-2</code>
<ul>
<li>而 <code>volume-2</code> 是一个多挂载的盘，它同时挂载在 <code>server-3</code> 之上</li>
<li><code>server-3</code> 的系统启动盘是从快照 <code>snapshot-202301111800-volume-1</code> 克隆创建的</li>
<li>快照 <code>snapshot-202301111800-volume-1</code> 是曾经从 <code>volume-1</code> 创建的</li>
<li><code>volume-1</code> 现在挂载在 <code>server-6</code> 上
<ul>
<li>快照不一定是从 <code>server-6</code> 而来，因为镜像可能被重新挂载过</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><figure><a class="lightgallery" href="/graph-enabled-infra-ops/storage_lineage_1.webp" title="storage_lineage_1" data-thumbnail="/graph-enabled-infra-ops/storage_lineage_1.webp">
        <img
            
            loading="lazy"
            src="/graph-enabled-infra-ops/storage_lineage_1.webp"
            srcset="/graph-enabled-infra-ops/storage_lineage_1.webp, /graph-enabled-infra-ops/storage_lineage_1.webp 1.5x, /graph-enabled-infra-ops/storage_lineage_1.webp 2x"
            sizes="auto"
            alt="storage_lineage_1" height="2334"  width="4064" >
    </a></figure></p>
<p>而这些血缘信息可以被用在资源生命周期管理、根因分析、安全告警、状态传导上，这里不加以赘述。</p>
<h3 id="高相关性虚机预警" class="headerLink">
    <a href="#%e9%ab%98%e7%9b%b8%e5%85%b3%e6%80%a7%e8%99%9a%e6%9c%ba%e9%a2%84%e8%ad%a6" class="header-mark"></a>4.4 高相关性虚机预警</h3><p>下面再给一个节点相似度的应用，我们可以在全图或者子图上，利用图算法找到与一个虚机在图上关系的维度上最相似的其他虚机，基于在这种相关性增加新的关系，并在关系上做风险事件预警。</p>
<p>这次的图算法应用中，我们按照一个典型的从[快速子图验证]到[全图生产应用的]工作流。</p>
<h4 id="在子图上快速验证浏览器内算法" class="headerLink">
    <a href="#%e5%9c%a8%e5%ad%90%e5%9b%be%e4%b8%8a%e5%bf%ab%e9%80%9f%e9%aa%8c%e8%af%81%e6%b5%8f%e8%a7%88%e5%99%a8%e5%86%85%e7%ae%97%e6%b3%95" class="header-mark"></a>4.4.1 在子图上快速验证：浏览器内算法</h4><p>首先，我们试着从 <code>server-0</code> 的三度子图上做算法的验证。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">GET SUBGRAPH 3 STEPS FROM &#34;server-0&#34;
</span></span><span class="line"><span class="cl">YIELD VERTICES AS nodes, EDGES AS relationships;
</span></span></code></pre></td></tr></table>
</div>
</div><p>将结果渲染在画布上，我们可以看到子图中包含了其他几个虚机：</p>
<p><figure><a class="lightgallery" href="/graph-enabled-infra-ops/server_subgraph.webp" title="server_subgraph" data-thumbnail="/graph-enabled-infra-ops/server_subgraph.webp">
        <img
            
            loading="lazy"
            src="/graph-enabled-infra-ops/server_subgraph.webp"
            srcset="/graph-enabled-infra-ops/server_subgraph.webp, /graph-enabled-infra-ops/server_subgraph.webp 1.5x, /graph-enabled-infra-ops/server_subgraph.webp 2x"
            sizes="auto"
            alt="server_subgraph" height="2334"  width="4064" >
    </a></figure></p>
<p>然后，我们利用 explorer 中的浏览器内图算法，可以非常方便地验证我们的想法，这里，我们使用 Jaccard SImilarity 相似性算法，进行 <code>server-0</code> 与 <code>server-1,server-3,server-4,server-6</code> 迭代分别得到相似性：</p>
<p><figure><a class="lightgallery" href="/graph-enabled-infra-ops/jacc_sim_browser.webp" title="jacc_sim_browser" data-thumbnail="/graph-enabled-infra-ops/jacc_sim_browser.webp">
        <img
            
            loading="lazy"
            src="/graph-enabled-infra-ops/jacc_sim_browser.webp"
            srcset="/graph-enabled-infra-ops/jacc_sim_browser.webp, /graph-enabled-infra-ops/jacc_sim_browser.webp 1.5x, /graph-enabled-infra-ops/jacc_sim_browser.webp 2x"
            sizes="auto"
            alt="jacc_sim_browser" height="2334"  width="4064" >
    </a></figure></p>
<p>可以看出，在 3 步子图内，和 <code>server-0</code> 最近接的虚机是 <code>server-4</code>。进一步我们可以简单在子图上看看两者之间的路径作为相似性的解释：</p>
<p><figure><a class="lightgallery" href="/graph-enabled-infra-ops/sim_explain.webp" title="sim_explain" data-thumbnail="/graph-enabled-infra-ops/sim_explain.webp">
        <img
            
            loading="lazy"
            src="/graph-enabled-infra-ops/sim_explain.webp"
            srcset="/graph-enabled-infra-ops/sim_explain.webp, /graph-enabled-infra-ops/sim_explain.webp 1.5x, /graph-enabled-infra-ops/sim_explain.webp 2x"
            sizes="auto"
            alt="sim_explain" height="2334"  width="4064" >
    </a></figure></p>
<p>在这个可解释结果中，我们知道 <code>server-0</code> 与 <code>server-4</code> 相似的原因可能是：</p>
<ul>
<li>坐落在同一个宿主机：node-0</li>
<li>使用同一个镜像：cirros_mod_from_volume-1</li>
</ul>
<p>如此，我们最终落地的预警机制可能是，当 <code>server-0</code> 出现某一问题、告警时候，给相似的 server-4 也设定预警，预警理由就是它们在同样主机、同样镜像。</p>
<h4 id="落地算法为应用workflowanalytics" class="headerLink">
    <a href="#%e8%90%bd%e5%9c%b0%e7%ae%97%e6%b3%95%e4%b8%ba%e5%ba%94%e7%94%a8workflowanalytics" class="header-mark"></a>4.4.2 落地算法为应用：Workflow+Analytics</h4><p>有了前边的快速实验，我们可以借助 workflow + NebulaGraph Analytics 把它落地为全图上的算法，利用 Analytics 分布式能力去执行。</p>
<p>在生产上，我们利用 Workflow 的 DAG 编排能力创建两个前后相连的任务：</p>
<ul>
<li>取临近虚机</li>
<li>全图算相似度</li>
</ul>
<p>第一个任务如下，它实时从给定的虚机（这里写死了 server-0，但是 workflow 可以把这里作为参数化，并封装任务为可以被 API 触发的异步服务）：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="o">*</span><span class="mi">1</span><span class="p">..</span><span class="mi">5</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">nova_instance</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;server-0&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">m</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="k">distinct</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">m</span><span class="p">)</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这里 Query job 我们输出待比较的其他虚机的 vid。</p>
<p><figure><a class="lightgallery" href="/graph-enabled-infra-ops/query_sim_server.webp" title="query_sim_server" data-thumbnail="/graph-enabled-infra-ops/query_sim_server.webp">
        <img
            
            loading="lazy"
            src="/graph-enabled-infra-ops/query_sim_server.webp"
            srcset="/graph-enabled-infra-ops/query_sim_server.webp, /graph-enabled-infra-ops/query_sim_server.webp 1.5x, /graph-enabled-infra-ops/query_sim_server.webp 2x"
            sizes="auto"
            alt="query_sim_server" height="2334"  width="4064" >
    </a></figure></p>
<p>接着，JaccardSImilarity job 中，我们选择 ids1 为 server-0（这里如上，上线时是参数化的），ids2 从上游取（前边的 Query job），选择在 openstack 全图扫描所有类型的边。<figure><a class="lightgallery" href="/graph-enabled-infra-ops/jacc_sim_workflow.webp" title="jacc_sim_workflow" data-thumbnail="/graph-enabled-infra-ops/jacc_sim_workflow.webp">
        <img
            
            loading="lazy"
            src="/graph-enabled-infra-ops/jacc_sim_workflow.webp"
            srcset="/graph-enabled-infra-ops/jacc_sim_workflow.webp, /graph-enabled-infra-ops/jacc_sim_workflow.webp 1.5x, /graph-enabled-infra-ops/jacc_sim_workflow.webp 2x"
            sizes="auto"
            alt="jacc_sim_workflow" height="2334"  width="4064" >
    </a></figure></p>
<p>保存、运行，我们可以看到，结果如下，区别是这次它运算了更多的目标虚机，并且迭代作用范围是全图而非一个子图，可以看到结果是一致的，这是因为子图上关联度大的点和相近的边在 Jaccard 算法里起到了更主要的作用。</p>
<p><figure><a class="lightgallery" href="/graph-enabled-infra-ops/jacc_result.webp" title="jacc_result" data-thumbnail="/graph-enabled-infra-ops/jacc_result.webp">
        <img
            
            loading="lazy"
            src="/graph-enabled-infra-ops/jacc_result.webp"
            srcset="/graph-enabled-infra-ops/jacc_result.webp, /graph-enabled-infra-ops/jacc_result.webp 1.5x, /graph-enabled-infra-ops/jacc_result.webp 2x"
            sizes="auto"
            alt="jacc_result" height="2334"  width="4064" >
    </a></figure></p>
<h3 id="安全相关场景" class="headerLink">
    <a href="#%e5%ae%89%e5%85%a8%e7%9b%b8%e5%85%b3%e5%9c%ba%e6%99%af" class="header-mark"></a>4.5 安全相关场景</h3><p>基础设施资源中的关联关系和金融、内容系统、电商领域的风控场景有相似的地方，很多场景本质上利用到了图谱关系中的知识，在图库上实时获取这些复杂多跳天然带有可解释性的安全洞察非常适合。</p>
<h4 id="秘钥泄漏风控分析" class="headerLink">
    <a href="#%e7%a7%98%e9%92%a5%e6%b3%84%e6%bc%8f%e9%a3%8e%e6%8e%a7%e5%88%86%e6%9e%90" class="header-mark"></a>4.5.1 秘钥泄漏风控分析</h4><p>先看一个秘钥泄漏的场景：假设 <code>key-0</code> 被安全部门确定被泄漏了，我们可以在毫秒时间内获得如下查询：</p>
<ul>
<li>直接采用了密钥的虚机</li>
<li>与采用秘钥的虚机网络直连的机器</li>
<li>与采用秘钥的虚机跨网络相连的机器</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">key_leaked</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">used_by</span><span class="o">`</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">involved_server</span><span class="p">:</span><span class="n">nova_instance</span><span class="p">)</span><span class="o">--</span><span class="p">(:</span><span class="n">neutron_port</span><span class="p">)</span><span class="o">--</span><span class="p">(</span><span class="n">net</span><span class="p">:</span><span class="n">neutron_network</span><span class="p">)</span><span class="o">--</span><span class="p">(:</span><span class="n">neutron_port</span><span class="p">)</span><span class="o">--</span><span class="p">(</span><span class="n">server_b</span><span class="p">:</span><span class="n">nova_instance</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">key_leaked</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;key-0&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">server_b</span><span class="p">)</span><span class="o">--</span><span class="p">()</span><span class="o">--</span><span class="p">(</span><span class="n">other_net</span><span class="p">:</span><span class="n">neutron_network</span><span class="p">)</span><span class="o">--</span><span class="p">(:</span><span class="n">neutron_port</span><span class="p">)</span><span class="o">--</span><span class="p">(</span><span class="n">server_c</span><span class="p">:</span><span class="n">nova_instance</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WITH</span><span class="w"> </span><span class="n">involved_server</span><span class="p">,</span><span class="w"> </span><span class="n">server_b</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">same_subnet_machines</span><span class="p">,</span><span class="w"> </span><span class="n">server_c</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">cross_net_machines</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">WHERE</span><span class="w"> </span><span class="n">cross_net_machines</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">involved_server</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">involved_server</span><span class="p">.</span><span class="n">nova_instance</span><span class="p">.</span><span class="n">name</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">with_key</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">same_subnet_machines</span><span class="p">.</span><span class="n">nova_instance</span><span class="p">.</span><span class="n">name</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">l2_vms</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">cross_net_machines</span><span class="p">.</span><span class="n">nova_instance</span><span class="p">.</span><span class="n">name</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">cross_vpc_vms</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>贴一下部分结果，我们知道 server-4 采用了这个 keypair，并且 server-6 和它在同一个网络，同时，有一定可能，通过 server-6，server-1,2,0,5 也受到了威胁、影响，相关的机器可以被触发不同级别的告警来降低安全事故的影响。</p>
<table>
<thead>
<tr>
<th style="text-align:left">with_key</th>
<th style="text-align:left">l2_vms</th>
<th style="text-align:left">cross_vpc_vms</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">server-4</td>
<td style="text-align:left">server-6</td>
<td style="text-align:left">server-1</td>
</tr>
<tr>
<td style="text-align:left">server-4</td>
<td style="text-align:left">server-6</td>
<td style="text-align:left">server-2</td>
</tr>
<tr>
<td style="text-align:left">server-4</td>
<td style="text-align:left">server-6</td>
<td style="text-align:left">server-0</td>
</tr>
<tr>
<td style="text-align:left">server-4</td>
<td style="text-align:left">server-6</td>
<td style="text-align:left">server-5</td>
</tr>
</tbody>
</table>
<p>这个查询改造为可视化结果：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">key_leaked</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">used_by</span><span class="o">`</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">involved_server</span><span class="p">:</span><span class="n">nova_instance</span><span class="p">)</span><span class="o">--</span><span class="p">(:</span><span class="n">neutron_port</span><span class="p">)</span><span class="o">--</span><span class="p">(</span><span class="n">net</span><span class="p">:</span><span class="n">neutron_network</span><span class="p">)</span><span class="o">--</span><span class="p">(:</span><span class="n">neutron_port</span><span class="p">)</span><span class="o">--</span><span class="p">(</span><span class="n">server_b</span><span class="p">:</span><span class="n">nova_instance</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">key_leaked</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;key-0&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="n">p1</span><span class="o">=</span><span class="p">(</span><span class="n">server_b</span><span class="p">)</span><span class="o">--</span><span class="p">()</span><span class="o">--</span><span class="p">(</span><span class="n">other_net</span><span class="p">:</span><span class="n">neutron_network</span><span class="p">)</span><span class="o">--</span><span class="p">(:</span><span class="n">neutron_port</span><span class="p">)</span><span class="o">--</span><span class="p">(</span><span class="n">server_c</span><span class="p">:</span><span class="n">nova_instance</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="p">,</span><span class="n">p1</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>在 explorer 里 应用 Dagre-LR 的布局，一关联关系很清晰的被展示出来，也许可以考虑把它引用在安全事故的报告分发给虚机租户。</p>
<p><figure><a class="lightgallery" href="/graph-enabled-infra-ops/key_leaked.webp" title="key_leaked" data-thumbnail="/graph-enabled-infra-ops/key_leaked.webp">
        <img
            
            loading="lazy"
            src="/graph-enabled-infra-ops/key_leaked.webp"
            srcset="/graph-enabled-infra-ops/key_leaked.webp, /graph-enabled-infra-ops/key_leaked.webp 1.5x, /graph-enabled-infra-ops/key_leaked.webp 2x"
            sizes="auto"
            alt="key_leaked" height="2334"  width="4064" >
    </a></figure></p>
<h4 id="镜像云盘漏洞范围分析" class="headerLink">
    <a href="#%e9%95%9c%e5%83%8f%e4%ba%91%e7%9b%98%e6%bc%8f%e6%b4%9e%e8%8c%83%e5%9b%b4%e5%88%86%e6%9e%90" class="header-mark"></a>4.5.2 镜像、云盘漏洞范围分析</h4><p>类似的，一个镜像被扫出漏洞，我们可以瞬间查到涉及到的资源，并做出相应</p>
<ul>
<li>镜像文件有漏洞</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">image_risky</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">created_from</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">step1</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">image_risky</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;cirros-0.5.2-x86_64-disk&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="n">p1</span><span class="o">=</span><span class="p">(</span><span class="n">step1</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">created_from</span><span class="o">*</span><span class="mi">1</span><span class="p">..</span><span class="mi">5</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">step2</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="p">,</span><span class="w"> </span><span class="n">p1</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><figure><a class="lightgallery" href="/graph-enabled-infra-ops/image_vulnerability.webp" title="image_vulnerability" data-thumbnail="/graph-enabled-infra-ops/image_vulnerability.webp">
        <img
            
            loading="lazy"
            src="/graph-enabled-infra-ops/image_vulnerability.webp"
            srcset="/graph-enabled-infra-ops/image_vulnerability.webp, /graph-enabled-infra-ops/image_vulnerability.webp 1.5x, /graph-enabled-infra-ops/image_vulnerability.webp 2x"
            sizes="auto"
            alt="image_vulnerability" height="2334"  width="4064" >
    </a></figure></p>
<ul>
<li>一个云盘有漏洞</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">volume_risky</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">created_from</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">step1</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">volume_risky</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;volume-1&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="n">p1</span><span class="o">=</span><span class="p">(</span><span class="n">step1</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">created_from</span><span class="o">*</span><span class="mi">1</span><span class="p">..</span><span class="mi">5</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">step2</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="p">,</span><span class="w"> </span><span class="n">p1</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><figure><a class="lightgallery" href="/graph-enabled-infra-ops/volume_vulnerability.webp" title="volume_vulnerability" data-thumbnail="/graph-enabled-infra-ops/volume_vulnerability.webp">
        <img
            
            loading="lazy"
            src="/graph-enabled-infra-ops/volume_vulnerability.webp"
            srcset="/graph-enabled-infra-ops/volume_vulnerability.webp, /graph-enabled-infra-ops/volume_vulnerability.webp 1.5x, /graph-enabled-infra-ops/volume_vulnerability.webp 2x"
            sizes="auto"
            alt="volume_vulnerability" height="2334"  width="4064" >
    </a></figure></p>
<h4 id="潜在宿主机逃离影响范围分析" class="headerLink">
    <a href="#%e6%bd%9c%e5%9c%a8%e5%ae%bf%e4%b8%bb%e6%9c%ba%e9%80%83%e7%a6%bb%e5%bd%b1%e5%93%8d%e8%8c%83%e5%9b%b4%e5%88%86%e6%9e%90" class="header-mark"></a>4.5.3 潜在宿主机逃离影响范围分析</h4><p>最后，我们讨论一个比较严重的安全问题：宿主机逃离。</p>
<p>在极端的情况下如果在我们得到消息，<code>server-0</code> 发生了有可能影响宿主机的安全时间的时候，仅仅关闭这个宿主机是不够的，受影响的范围可能已经扩大了，然而，我们不可能因为这样关闭整个机房，所以，利用图谱辅助找出受影响范围会有一些帮助。</p>
<p>下面的查询模式是：</p>
<ul>
<li>找出可能被影响的子网（VPC），标记最高级别风险子网为后续定位做准备</li>
<li>找到可能被控制了的宿主机</li>
<li>从宿主机触发，找出同主机的其他虚机</li>
<li>从其他虚机触发，找到它们的子网（VPC）</li>
<li>从其他虚机触发，找到可能已经被影响的网盘（防止被挂载到其他机器，扩大影响）</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">server_escaping_hypervisor</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="o">`</span><span class="n">contains</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">hypervisor_compromised</span><span class="p">:</span><span class="n">nova_host</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">server_escaping_hypervisor</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;server-0&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">server_escaping_hypervisor</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">attached</span><span class="p">]</span><span class="o">-</span><span class="p">(:</span><span class="n">neutron_port</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">contains</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">impacted_subnet_high</span><span class="p">:</span><span class="n">neutron_network</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">hypervisor_compromised</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">contains</span><span class="o">`</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">server_same_host</span><span class="p">:</span><span class="n">nova_instance</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">server_same_host</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">attached</span><span class="p">]</span><span class="o">-</span><span class="p">(:</span><span class="n">neutron_port</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">contains</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">impacted_subnet</span><span class="p">:</span><span class="n">neutron_network</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">server_same_host</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">attached</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">impacted_volume</span><span class="p">:</span><span class="n">cinder_volume</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">impacted_subnet_high</span><span class="p">.</span><span class="n">neutron_network</span><span class="p">.</span><span class="n">name</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">impacted_subnet_high</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="n">hypervisor_compromised</span><span class="p">.</span><span class="n">nova_host</span><span class="p">.</span><span class="n">name</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">hypervisor_compromised</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="n">impacted_subnet</span><span class="p">.</span><span class="n">neutron_network</span><span class="p">.</span><span class="n">name</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">impacted_subnet</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="p">[</span><span class="n">server_same_host</span><span class="p">.</span><span class="n">nova_instance</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">server_same_host</span><span class="p">.</span><span class="n">nova_instance</span><span class="p">.</span><span class="n">instance_name</span><span class="p">]</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">server_same_host</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="n">impacted_volume</span><span class="p">.</span><span class="n">cinder_volume</span><span class="p">.</span><span class="n">name</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">impacted_volume</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>结果中列出了 server-0 被控制之后，考虑宿主机逃离的情况下可能受影响的扩散范围。</p>
<table>
<thead>
<tr>
<th style="text-align:left">impacted_subnet_high</th>
<th style="text-align:left">hypervisor_compromised</th>
<th style="text-align:left">impacted_subnet</th>
<th style="text-align:left">server_same_host</th>
<th style="text-align:left">impacted_volume</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">shared</td>
<td style="text-align:left">node0</td>
<td style="text-align:left">shared</td>
<td style="text-align:left">[&ldquo;server-0&rdquo;, &ldquo;instance-00000001&rdquo;]</td>
<td style="text-align:left"><strong>Empty</strong></td>
</tr>
<tr>
<td style="text-align:left">shared</td>
<td style="text-align:left">node0</td>
<td style="text-align:left">shared</td>
<td style="text-align:left">[&ldquo;server-1&rdquo;, &ldquo;instance-00000002&rdquo;]</td>
<td style="text-align:left">ffaeb199-47f4-4d95-89b2-97fba3c1bcfe</td>
</tr>
<tr>
<td style="text-align:left">shared</td>
<td style="text-align:left">node0</td>
<td style="text-align:left">private</td>
<td style="text-align:left">[&ldquo;server-1&rdquo;, &ldquo;instance-00000002&rdquo;]</td>
<td style="text-align:left">ffaeb199-47f4-4d95-89b2-97fba3c1bcfe</td>
</tr>
<tr>
<td style="text-align:left">shared</td>
<td style="text-align:left">node0</td>
<td style="text-align:left">private</td>
<td style="text-align:left">[&ldquo;server-3&rdquo;, &ldquo;instance-00000005&rdquo;]</td>
<td style="text-align:left">c9db7c2e-c712-49d6-8019-14b82de8542d</td>
</tr>
<tr>
<td style="text-align:left">shared</td>
<td style="text-align:left">node0</td>
<td style="text-align:left">private</td>
<td style="text-align:left">[&ldquo;server-3&rdquo;, &ldquo;instance-00000005&rdquo;]</td>
<td style="text-align:left">volume-2</td>
</tr>
<tr>
<td style="text-align:left">shared</td>
<td style="text-align:left">node0</td>
<td style="text-align:left">public</td>
<td style="text-align:left">[&ldquo;server-4&rdquo;, &ldquo;instance-00000006&rdquo;]</td>
<td style="text-align:left">volume-2</td>
</tr>
</tbody>
</table>
<p>咱们再看看它的可视化结果。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">server_escaping_hypervisor</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="o">`</span><span class="n">contains</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">hypervisor_compromised</span><span class="p">:</span><span class="n">nova_host</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">server_escaping_hypervisor</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;server-0&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="n">p0</span><span class="o">=</span><span class="p">(</span><span class="n">server_escaping_hypervisor</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">attached</span><span class="p">]</span><span class="o">-</span><span class="p">(:</span><span class="n">neutron_port</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">contains</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">impacted_subnet_high</span><span class="p">:</span><span class="n">neutron_network</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="n">p1</span><span class="o">=</span><span class="p">(</span><span class="n">hypervisor_compromised</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">contains</span><span class="o">`</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">server_same_host</span><span class="p">:</span><span class="n">nova_instance</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="n">p2</span><span class="o">=</span><span class="p">(</span><span class="n">server_same_host</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">attached</span><span class="p">]</span><span class="o">-</span><span class="p">(:</span><span class="n">neutron_port</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">contains</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">impacted_subnet</span><span class="p">:</span><span class="n">neutron_network</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="n">p3</span><span class="o">=</span><span class="p">(</span><span class="n">server_same_host</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">attached</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">impacted_volume</span><span class="p">:</span><span class="n">cinder_volume</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="p">,</span><span class="n">p0</span><span class="p">,</span><span class="n">p1</span><span class="p">,</span><span class="n">p2</span><span class="p">,</span><span class="n">p3</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>选择 Dagre 布局之后，可以比较清晰看出影响资源的范围，从这些可能受影响的虚机、网络、网盘出发，可以进一步采取需要的措施了。</p>
<p><figure><a class="lightgallery" href="/graph-enabled-infra-ops/hypervisor_escape.webp" title="hypervisor_escape" data-thumbnail="/graph-enabled-infra-ops/hypervisor_escape.webp">
        <img
            
            loading="lazy"
            src="/graph-enabled-infra-ops/hypervisor_escape.webp"
            srcset="/graph-enabled-infra-ops/hypervisor_escape.webp, /graph-enabled-infra-ops/hypervisor_escape.webp 1.5x, /graph-enabled-infra-ops/hypervisor_escape.webp 2x"
            sizes="auto"
            alt="hypervisor_escape" height="2334"  width="4064" >
    </a></figure></p>
<h3 id="重点关注资源检测" class="headerLink">
    <a href="#%e9%87%8d%e7%82%b9%e5%85%b3%e6%b3%a8%e8%b5%84%e6%ba%90%e6%a3%80%e6%b5%8b" class="header-mark"></a>4.6 重点关注资源检测</h3><p>最后，利用 Betweenness Centrality 算法，我们可以得出基础设施中影响面大的那些，”脆弱环节“，这些资源不一定真的处在危险的状态，只是说，它们处在了比较重要的资源之间的交汇处，一旦它们出问题，出问题的代价可能会非常大。</p>
<p>识别出这样的资源之后我们可以考虑：</p>
<ul>
<li>有针对性采用更激进、昂贵的健康检查策略；</li>
<li>设定更高的支持、关切级别；</li>
<li>主动迁移相关联的资源以降低”脆弱环节“对整体基础设施可用性的影响范围；</li>
</ul>
<p>这次，我们就只在浏览器内部的子图上做算法流程验证，读者朋友们可以自己试着利用开源的 NebulaGraph Algorithm 或者付费的 NebulaGraph Workflow+Analytics 做全图上的等价操作。</p>
<p>首先，我们在前边用过的方式去扫描图上 1000 个点，并且从其出发，跳一跳，获得一个比较随机的子图，在我们当前的数据集下，这实际上捞取了全图的数据：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">MATCH (n) WITH n LIMIT 1000
</span></span><span class="line"><span class="cl">OPTIONAL MATCH p=(n)--()
</span></span><span class="line"><span class="cl">RETURN p, n
</span></span></code></pre></td></tr></table>
</div>
</div><p>在其之上，我们运行 Betweenness Centrality 之后，得到 <code>node0</code> 是分值最大的”脆弱一环“，的确，它是我们当前实验中负载最大的宿主机，可以想象它确实是故障之后全局影响最大的一个资源。</p>
<p><figure><a class="lightgallery" href="/graph-enabled-infra-ops/bwteeness_centrality.webp" title="bwteeness_centrality" data-thumbnail="/graph-enabled-infra-ops/bwteeness_centrality.webp">
        <img
            
            loading="lazy"
            src="/graph-enabled-infra-ops/bwteeness_centrality.webp"
            srcset="/graph-enabled-infra-ops/bwteeness_centrality.webp, /graph-enabled-infra-ops/bwteeness_centrality.webp 1.5x, /graph-enabled-infra-ops/bwteeness_centrality.webp 2x"
            sizes="auto"
            alt="bwteeness_centrality" height="2334"  width="4064" >
    </a></figure></p>
<h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>5 总结</h2><p>在海量数据、企业云、混合云的复杂基础设施运维场景下，利用图数据库图算法的能力做高效的辅助运维工作是一个十分值得的尝试与技术投资。</p>
<p>NebulaGraph 作为高性能、开源、分布式的新一代云原生图数据库，是一个很值得考虑的图基础设施选型目标。</p>
<p>欢迎大家在文末留言讨论，本文的可复现环境和示例的 ETL 管道的代码、示例数据全都在 <a href="https://github.com/wey-gu/openstack-graph/" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/openstack-graph/</a> 开源，欢迎大家来一起完善。</p>
<blockquote>
<p>题图版权：<a href="https://unsplash.com/photos/Wv2U24G2F78" target="_blank" rel="noopener noreferrer">Ivan</a></p>
</blockquote>]]></description>
</item><item>
    <title>连接微信群、Slack 和 GitHub：社区开放沟通的基础设施搭建</title>
    <link>https://siwei.io/build-open-communication-infra/</link>
    <pubDate>Mon, 19 Dec 2022 19:45:53 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/build-open-communication-infra/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/build-open-communication-infra/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>NebulaGraph 社区如何构建工具让 Slack、WeChat 中宝贵的群聊讨论同步到公共领域</p>
</blockquote>
<!--

[TOC]

-->
<h2 id="要开放不要封闭" class="headerLink">
    <a href="#%e8%a6%81%e5%bc%80%e6%94%be%e4%b8%8d%e8%a6%81%e5%b0%81%e9%97%ad" class="header-mark"></a>1 要开放，不要封闭</h2><p>在开源社区中，开放的一个重要意义是社区内的沟通、讨论应该是透明、包容并且方便所有成员访问的。这意味着社区中的任何人都应该能够参与讨论和决策过程，并且所有相关信息应该公开和自由地共享。</p>
<p>在公共场合进行沟通在开源理念中是重要的，正式这种方式使得社区的成员可以进行有效地共同工作，分享想法和反馈，为项目或社区做出贡献。</p>
<p>为了更清楚表达，我举几个反面的例子：</p>
<ul>
<li>
<p>要求贡献者使用对他们来说难以访问或难以使用的工具可能会妨碍开源社区中的开放沟通。
这可能是由于多种原因，例如：</p>
<ul>
<li>工具可能昂贵或需要许可证，而并非所有贡献者都能负担得起。</li>
<li>工具可能难以使用或需要很高的技术经验积累，而并非所有贡献者都具备。</li>
<li>工具可能在某些操作系统或设备上不兼容，这可能使一些贡献者难以访问它们。</li>
</ul>
</li>
<li>
<p>在不与社区其他成员分享上下文、过程或结果的情况下，只在线下（例如通过当面沟通、IM 或电话会议）进行决策可能会使很重要的知识只被少数贡献者掌握。</p>
<p>这可能会阻止其他人在这些知识之上做贡献或从中学习，阻碍了开源社区所必需的开放沟通和协作。</p>
</li>
<li>
<p>没有把系统、功能设计和提案信息以公开方式文档化、归档下来，例如只提供某一个公司内网的链接，从而可能伤害开源社区的透明度和包容性。</p>
<p>因为这样的结果是社区的其他成员很难保持对社区进展的正常了解、就更不用说参与进来做贡献了。为了促进透明度和包容性，开源社区应尽量确保所有重要的信息公开和自由地共享、尽可能保有细节地被公开归档。</p>
</li>
</ul>
<h2 id="挑战" class="headerLink">
    <a href="#%e6%8c%91%e6%88%98" class="header-mark"></a>2 挑战</h2><p>为了使社区（或工作环境）的沟通保持透明、高效和健康，其实已经存在一些共识，和通用的做法：</p>
<ul>
<li>
<p>异步优于同步，在分布式和全球协作的情况下，同步通信在大多数情况下成本高且效率低。</p>
<p>因此，推荐使用 GitHub Discussion 和 StackOverflow 进行提问式的沟通。</p>
</li>
<li>
<p>专题（Thread）讨论优于广播（Fan out)，注意力是宝贵的，向所有人群发最终常常导致重要信息没有人真的读。</p>
<p>因此，我们在 GitHub Discussion 和 Slack 中设有分类、频道。建立 SIG 来讨论一些有趣的主题（并归档沟通的结果），而不是将所有事情带到社区会议广泛讨论。</p>
</li>
<li>
<p>优先选择可搜索/文本、版本控制、协作的方式与工具，并在可能的情况下鼓励成员们给其他人反馈；在基础设施上跟踪文档、设计流程，并且提供评论、review 的能力。</p>
<p>为此，我们用 etherpad.opendev.org 来记录社区会议文档。</p>
</li>
</ul>
<p>但是，就像我们还是需要同步的沟通、有 IM 和会议的需求一样，还是存在一些特例的情况，我们不能盲目追求异步、绝对的开放的，正如前边提到的，能让更多参与者公平、方便与社区连结本身也是开放的一部分，尽管使用的基础设施是可能是封闭的。事实上，几乎所有的开源社区都在用类似的方式建立他们的开源社区沟通平台：</p>
<ul>
<li>
<p>Slack 在 IM 消息中中支持丰富的格式化（支持 markdown！）和 Thread 系统，其现代化设计和开放/软定义接口使我们的工作流程可能非常优美流畅。</p>
</li>
<li>
<p>与 Slack 相比，微信在技术社区中在许多方面都很不理想（只是因为它不是专为这样场景而设计的！），但在国内，它是社区中所有人都可以访问的唯一平台。每个人都有一个微信账号，而只有很少一部分人会每天查邮件。</p>
</li>
</ul>
<p>于是，我们面临的问题是，在 NebulaGraph 社区中有两个平台承担了沟通的重要部分，但这些信息在几个月后就会消失，它们在短时间内只能被割裂的一部分贡献者看到，而未来没有人或其他平台可以读到、搜到和参考、引用这些有价值的讨论。</p>
<h2 id="我们摸索的方案" class="headerLink">
    <a href="#%e6%88%91%e4%bb%ac%e6%91%b8%e7%b4%a2%e7%9a%84%e6%96%b9%e6%a1%88" class="header-mark"></a>3 我们摸索的方案</h2><p>曾经有一段时间，我们会自己手动收集 Slack、微信群里的讨论摘要，定期分享、归档在公共领域，这个方法也确实带来了一些价值，然而，我们最后都没坚持下去，原因很简单：1. 这太费事儿了，完全不 scale；2. 这种摘要其实不好平衡能被归档信息的裁剪程度，有时候细节非常重要却不容易被摘要保留。</p>
<h3 id="搞定-slack-的信息孤岛" class="headerLink">
    <a href="#%e6%90%9e%e5%ae%9a-slack-%e7%9a%84%e4%bf%a1%e6%81%af%e5%ad%a4%e5%b2%9b" class="header-mark"></a>3.1 搞定 Slack 的信息孤岛</h3><p>2022 年 10 月，我注意到了 linen.dev 这个开源项目同时也是一个 SaaS 服务，有了它，我们可以把 Discord 和 Slack 中的每个 thread 保留，它整站看起来和 Discord/ Slack 机会样，但是，它完全是可以匿名被访问、引用和被搜索引擎搜索的。</p>
<p>经过几个月的评估，我们最终决定了订阅 linen.dev 服务。为此，我们可以获得：</p>
<ul>
<li>不用去碰现有的 Slack，所有 Slack 的好处都能得以保留</li>
<li>有了这样一个社区的站点 <a href="https://community-chat.nebula-graph.io/" target="_blank" rel="noopener noreferrer">https://community-chat.nebula-graph.io/</a>，其中，Slack 中的每个公共频道内容都能被匿名访问、能被搜索引擎收录，而访客还可以很容易知道怎么加入我们的 Slack，如图右上角：</li>
</ul>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/208391200-8670f7f7-6e7a-4f62-84d3-3d2594ab9083.png" title="https://user-images.githubusercontent.com/1651790/208391200-8670f7f7-6e7a-4f62-84d3-3d2594ab9083.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/208391200-8670f7f7-6e7a-4f62-84d3-3d2594ab9083.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/208391200-8670f7f7-6e7a-4f62-84d3-3d2594ab9083.png"
            srcset="https://user-images.githubusercontent.com/1651790/208391200-8670f7f7-6e7a-4f62-84d3-3d2594ab9083.png, https://user-images.githubusercontent.com/1651790/208391200-8670f7f7-6e7a-4f62-84d3-3d2594ab9083.png 1.5x, https://user-images.githubusercontent.com/1651790/208391200-8670f7f7-6e7a-4f62-84d3-3d2594ab9083.png 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/208391200-8670f7f7-6e7a-4f62-84d3-3d2594ab9083.png">
    </a></figure>
这个站会实时同步 Slack 里的消息，重要的是，它是面向搜索引擎优化的，你可以搜搜 Kotlin 社区通过 linen 被收录的网页有多少，搜这个：<a href="https://www.google.com/search?q=site%3A&#43;slack-chats.kotlinlang.org" target="_blank" rel="noopener noreferrer">&ldquo;site: slack-chats.kotlinlang.org&rdquo;</a>。</p>
<ul>
<li>每一个 thread 都有一个无需登录的只读 URL，我们可以方便去分享、引用它，虽然这件事儿本身就是超链接、URL的作用，但是在现在已经变得非常不容易了，比如<a href="https://www.nytimes.com/2022/09/16/technology/gen-z-tiktok-search-engine.html" target="_blank" rel="noopener noreferrer">这个新闻</a>里提到现在新一代的人们更倾向于在抖音里搜索而不是在公共领域里。
有了它，我们可以非常开心地在 GitHub 里引用任意一个 Slack 讨论话题：
<figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/208390478-7a7a6213-677b-4385-8b3e-ea57f65ece7b.png" title="https://user-images.githubusercontent.com/1651790/208390478-7a7a6213-677b-4385-8b3e-ea57f65ece7b.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/208390478-7a7a6213-677b-4385-8b3e-ea57f65ece7b.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/208390478-7a7a6213-677b-4385-8b3e-ea57f65ece7b.png"
            srcset="https://user-images.githubusercontent.com/1651790/208390478-7a7a6213-677b-4385-8b3e-ea57f65ece7b.png, https://user-images.githubusercontent.com/1651790/208390478-7a7a6213-677b-4385-8b3e-ea57f65ece7b.png 1.5x, https://user-images.githubusercontent.com/1651790/208390478-7a7a6213-677b-4385-8b3e-ea57f65ece7b.png 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/208390478-7a7a6213-677b-4385-8b3e-ea57f65ece7b.png">
    </a></figure></li>
</ul>
<p>解决了 Slack 的问题之后，唯一剩下的痛点就是微信群了，每周都有挺多非常宝贵的讨论在社区群中进行却不能被保留下来，真实太令人心疼了，终于有一天，我们决定把这个问题解决。</p>
<h3 id="解决微信群的信息公开化" class="headerLink">
    <a href="#%e8%a7%a3%e5%86%b3%e5%be%ae%e4%bf%a1%e7%be%a4%e7%9a%84%e4%bf%a1%e6%81%af%e5%85%ac%e5%bc%80%e5%8c%96" class="header-mark"></a>3.2 解决微信群的信息公开化</h3><p>首先，能不能直接用 Linen 一把梭，同步群消息呢？我确实<a href="https://github.com/Linen-dev/linen.dev/issues/553" target="_blank" rel="noopener noreferrer">在 Linen 社区和他们的 Kam 讨论</a>直接解决 IM 同步的可能，不过到现在，他们都没有优先考虑😭。</p>
<p>然后，我就在想如果直接把微信同步到 Slack，Linen 不就能把微信的信息也收录了吗？</p>
<p>在 <a href="https://twitter.com/wey_gu/status/1603307477239750657" target="_blank" rel="noopener noreferrer">Twitter 上</a> 求助黑客/开源社区 + 一番调研确定了没有这样的东西存在之后，我<a href="https://twitter.com/wey_gu/status/1603307477239750657?s=20&amp;t=UG6g_ASQ89QWnMqjLfmdqA" target="_blank" rel="noopener noreferrer">决定搞一个，做成开源项目</a>，我花了一点时间实现了最初的版本。</p>
<blockquote class="twitter-tweet" data-dnt="true"><p lang="zh" dir="ltr">石头汤来了 👉🏻：<a href="https://t.co/Fdhm9MkoBb">https://t.co/Fdhm9MkoBb</a><a href="https://twitter.com/hashtag/NebulaGraph?src=hash&amp;ref_src=twsrc%5Etfw">#NebulaGraph</a> 社区微信群现在已经会被同步到 slack 了。</p>&mdash; Wey Gu 古思为 (@wey_gu) <a href="https://twitter.com/wey_gu/status/1603307477239750657?ref_src=twsrc%5Etfw">December 15, 2022</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>万万没想到，当我做到把消息从微信同步到 Slack 之后，<a href="https://github.com/Linen-dev/linen.dev/issues/761" target="_blank" rel="noopener noreferrer">随之而来的问题</a>是，通过 Slack API 发出的消息 Linen 并不会收录。</p>
<p>为此，我放弃了 linen 一把梭的美好愿望，转而考虑把消息同步到其他公共领域，而我第一个想到的就是 GitHub Discussions 之中，又花了周末的下午加晚上，把它做出来了：</p>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/208398641-e7e8dcc8-eeaf-4647-8c5c-f37f118094f5.png" title="wechat-to-gh-discussion" data-thumbnail="https://user-images.githubusercontent.com/1651790/208398641-e7e8dcc8-eeaf-4647-8c5c-f37f118094f5.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/208398641-e7e8dcc8-eeaf-4647-8c5c-f37f118094f5.png"
            srcset="https://user-images.githubusercontent.com/1651790/208398641-e7e8dcc8-eeaf-4647-8c5c-f37f118094f5.png, https://user-images.githubusercontent.com/1651790/208398641-e7e8dcc8-eeaf-4647-8c5c-f37f118094f5.png 1.5x, https://user-images.githubusercontent.com/1651790/208398641-e7e8dcc8-eeaf-4647-8c5c-f37f118094f5.png 2x"
            sizes="auto"
            alt="wechat-to-gh-discussion">
    </a></figure></p>
<p>现在，这个机器人程序会把配置好的微信群消息同时同步到 Slack 频道和 GitHub Discussion 中给定的标签下的主题中，每一个群一个礼拜是一个主题，所有的消息都是主题下的评论。</p>
<h3 id="小结" class="headerLink">
    <a href="#%e5%b0%8f%e7%bb%93" class="header-mark"></a>3.3 小结</h3><p>现在，我们保留了所有 Slack/微信的美好的一面的同时，把它们中的讨论消息历史全都归档、索引并公开到这两个域之下了，是不是很酷呢？</p>
<ul>
<li><a href="https://community-chat.nebula-graph.io/" target="_blank" rel="noopener noreferrer">https://community-chat.nebula-graph.io/</a></li>
<li><a href="https://github.com/vesoft-inc/nebula-community/discussions/categories/wechat-chat-history" target="_blank" rel="noopener noreferrer">https://github.com/vesoft-inc/nebula-community/discussions/categories/wechat-chat-history</a></li>
</ul>
<h3 id="后续工作" class="headerLink">
    <a href="#%e5%90%8e%e7%bb%ad%e5%b7%a5%e4%bd%9c" class="header-mark"></a>3.4 后续工作</h3><p>这个同步微信的项目是 Apache 2.0 协议开源的，并且现在由<a href="https://github.com/wey-gu" target="_blank" rel="noopener noreferrer">我</a>和<a href="https://github.com/frostming" target="_blank" rel="noopener noreferrer">Frost Ming</a>在维护，<a href="https://github.com/wey-gu/chatroom-syncer/issues" target="_blank" rel="noopener noreferrer">这里</a>还有很多待增强、实现的新功能、新任务，欢迎大家来试玩、贡献。让我们一起把开源社区的沟通做的多一点开放、少一点封闭吧~</p>
<p>项目地址 👉🏻 <a href="https://github.com/wey-gu/chatroom-syncer" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/chatroom-syncer</a>.</p>
<h2 id="结论" class="headerLink">
    <a href="#%e7%bb%93%e8%ae%ba" class="header-mark"></a>4 结论</h2><p>有效的沟通是成功的开源社区的基石，因为它让协作、分享思想与知识、以及所有成员的参与成为可能。为了确保沟通透明、包容和有效，对于开源社区来说，让所有成员有机会参与讨论和决策以及公开自由地分享相关信息是非常重要的。</p>
<p>我们 NebulaGraph 社区的建设者/贡献者将继续寻找和黑客方法，以开放和良好的方式使人们连接在一起，和大家共建更好的开源、技术社区。</p>
<blockquote>
<p>题图版权：<a href="https://unsplash.com/photos/N35J0N8ZglQ" target="_blank" rel="noopener noreferrer">Artem Beliaikin</a></p>
</blockquote>]]></description>
</item><item>
    <title>图数据库的社交网络应用</title>
    <link>https://siwei.io/nebulagraph-sns/</link>
    <pubDate>Thu, 08 Dec 2022 15:30:33 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/nebulagraph-sns/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/nebulagraph-sns/featured-image.webp" referrerpolicy="no-referrer">
            </div><h1 id="图数据库的社交网络应用" class="headerLink">
    <a href="#%e5%9b%be%e6%95%b0%e6%8d%ae%e5%ba%93%e7%9a%84%e7%a4%be%e4%ba%a4%e7%bd%91%e7%bb%9c%e5%ba%94%e7%94%a8" class="header-mark"></a>图数据库的社交网络应用</h1><blockquote>
<p>本文是一个基于 NebulaGraph 上解决社交网络问题的常规方法综述。其中介绍的方法提供都了 Playground 供大家学习、玩耍。</p>
</blockquote>
<!--

[TOC]

-->
<p>社交网络大家都不陌生，无论是微信、微博、B 站还是大众点评、知乎、陌陌等服务，其本质上的用户都形成了社交网络。</p>
<p>在一个社交网络系统中，我们可以用图数据库来表示用户和他们的连接关系。图数据库能允许对用户之间的关系进行有效的查询，使得各种基于连接查找、统计、分析的社交网络上的业务实现变得可行、高效。</p>
<p>例如，图形数据库可以用来识别网络中的“有影响力用户”，或者根据用户之间的共同点对新的连接（好友关系、关心的内容）进行推荐，再或者寻找社群中相聚集的不同人群、社区，进行用户画像。图形数据库因为在能支撑复杂多跳查询的同时也能支持实时写入、更新，使其非常适合应用在用户关系不断变化的社交网络系统之上。</p>
<h2 id="图建模" class="headerLink">
    <a href="#%e5%9b%be%e5%bb%ba%e6%a8%a1" class="header-mark"></a>1 图建模</h2><p>为了给出一些常见社交场景的应用示例，我会把大多数例子建立在一个典型的小型社交网络上，社交网络天然就是一张网络、图的形态。</p>
<p>为此，我在 NebulaGraph 官方示例数据集：篮球运动员之上，增加了三种点：</p>
<ul>
<li>地址</li>
<li>地点</li>
<li>文章</li>
</ul>
<p>五种边：</p>
<ul>
<li>发文</li>
<li>评论</li>
<li>住在</li>
<li>属于（地点）</li>
</ul>
<p>它的建模非常自然：</p>
<p><figure><a class="lightgallery" href="/nebulagraph-sns/schema_sketch.webp" title="schema_sketch" data-thumbnail="/nebulagraph-sns/schema_sketch.webp">
        <img
            
            loading="lazy"
            src="/nebulagraph-sns/schema_sketch.webp"
            srcset="/nebulagraph-sns/schema_sketch.webp, /nebulagraph-sns/schema_sketch.webp 1.5x, /nebulagraph-sns/schema_sketch.webp 2x"
            sizes="auto"
            alt="schema_sketch" height="1006"  width="1752" >
    </a></figure></p>
<h2 id="数据导入" class="headerLink">
    <a href="#%e6%95%b0%e6%8d%ae%e5%af%bc%e5%85%a5" class="header-mark"></a>2 数据导入</h2><h3 id="加载默认数据集" class="headerLink">
    <a href="#%e5%8a%a0%e8%bd%bd%e9%bb%98%e8%ae%a4%e6%95%b0%e6%8d%ae%e9%9b%86" class="header-mark"></a>2.1 加载默认数据集</h3><p>首先，我们加载默认的 basketballplayer 数据集。</p>
<ul>
<li>
<p>在命令行 console 之中，我们只需要执行 <code>:play basketballplayer</code> 就可以。</p>
</li>
<li>
<p>而在 NebulaGraph Studio/Explorer 之中，我们可以在欢迎页点击下载就部署这份基础数据集。</p>
<p><figure><a class="lightgallery" href="/nebulagraph-sns/baskertballplayer_studio_starter.webp" title="baskertballplayer_studio_starter" data-thumbnail="/nebulagraph-sns/baskertballplayer_studio_starter.webp">
        <img
            
            loading="lazy"
            src="/nebulagraph-sns/baskertballplayer_studio_starter.webp"
            srcset="/nebulagraph-sns/baskertballplayer_studio_starter.webp, /nebulagraph-sns/baskertballplayer_studio_starter.webp 1.5x, /nebulagraph-sns/baskertballplayer_studio_starter.webp 2x"
            sizes="auto"
            alt="baskertballplayer_studio_starter" height="1138"  width="1818" >
    </a></figure></p>
</li>
</ul>
<h3 id="加载社交网络-schema" class="headerLink">
    <a href="#%e5%8a%a0%e8%bd%bd%e7%a4%be%e4%ba%a4%e7%bd%91%e7%bb%9c-schema" class="header-mark"></a>2.2 加载社交网络 schema</h3><p>其次我们执行下边的语句，首先是 Schema 定义的语句：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="k">IF</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">EXISTS</span><span class="w"> </span><span class="n">post</span><span class="p">(</span><span class="n">title</span><span class="w"> </span><span class="n">string</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">created_post</span><span class="p">(</span><span class="n">post_time</span><span class="w"> </span><span class="k">timestamp</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">commented_at</span><span class="p">(</span><span class="n">post_time</span><span class="w"> </span><span class="k">timestamp</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="n">address</span><span class="p">(</span><span class="n">address</span><span class="w"> </span><span class="n">string</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w"> </span><span class="o">`</span><span class="n">geo_point</span><span class="o">`</span><span class="w"> </span><span class="n">geography</span><span class="p">(</span><span class="n">point</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="n">place</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="n">string</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w"> </span><span class="o">`</span><span class="n">geo_point</span><span class="o">`</span><span class="w"> </span><span class="n">geography</span><span class="p">(</span><span class="n">point</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">belong_to</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">lived_in</span><span class="p">();</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="加载数据" class="headerLink">
    <a href="#%e5%8a%a0%e8%bd%bd%e6%95%b0%e6%8d%ae" class="header-mark"></a>2.3 加载数据</h3><p>然后，在等两个心跳时间以上之后（20秒），我们可以执行数据插入：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">INSERT</span><span class="w"> </span><span class="n">VERTEX</span><span class="w"> </span><span class="n">post</span><span class="p">(</span><span class="n">title</span><span class="p">)</span><span class="w"> </span><span class="k">values</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;post1&#34;</span><span class="p">:(</span><span class="s2">&#34;a beautify flower&#34;</span><span class="p">),</span><span class="w"> </span><span class="s2">&#34;post2&#34;</span><span class="p">:(</span><span class="s2">&#34;my first bike&#34;</span><span class="p">),</span><span class="w"> </span><span class="s2">&#34;post3&#34;</span><span class="p">:(</span><span class="s2">&#34;I can swim&#34;</span><span class="p">),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;post4&#34;</span><span class="p">:(</span><span class="s2">&#34;I love you, Dad&#34;</span><span class="p">),</span><span class="w"> </span><span class="s2">&#34;post5&#34;</span><span class="p">:(</span><span class="s2">&#34;I hate coriander&#34;</span><span class="p">),</span><span class="w"> </span><span class="s2">&#34;post6&#34;</span><span class="p">:(</span><span class="s2">&#34;my best friend, tom&#34;</span><span class="p">),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;post7&#34;</span><span class="p">:(</span><span class="s2">&#34;my best friend, jerry&#34;</span><span class="p">),</span><span class="w"> </span><span class="s2">&#34;post8&#34;</span><span class="p">:(</span><span class="s2">&#34;Frank, the cat&#34;</span><span class="p">),</span><span class="w"> </span><span class="s2">&#34;post9&#34;</span><span class="p">:(</span><span class="s2">&#34;sushi rocks&#34;</span><span class="p">),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;post10&#34;</span><span class="p">:(</span><span class="s2">&#34;I love you, Mom&#34;</span><span class="p">),</span><span class="w"> </span><span class="s2">&#34;post11&#34;</span><span class="p">:(</span><span class="s2">&#34;Let&#39;s have a party!&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">created_post</span><span class="p">(</span><span class="n">post_time</span><span class="p">)</span><span class="w"> </span><span class="k">values</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player100&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post1&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-01-01 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player111&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post2&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2016-11-23 10:04:50&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player101&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post3&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-11-11 10:44:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player103&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post4&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2014-12-01 20:45:11&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player102&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post5&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2015-03-01 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player104&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post6&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2017-09-21 23:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player125&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post7&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2018-01-01 00:44:23&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player106&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post8&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-01-01 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player117&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post9&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2022-01-01 22:23:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player108&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post10&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2011-01-01 10:00:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player100&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post11&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2021-11-01 11:10:30&#34;</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">commented_at</span><span class="p">(</span><span class="n">post_time</span><span class="p">)</span><span class="w"> </span><span class="k">values</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player105&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post1&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-01-02 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player109&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post1&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2016-11-24 10:04:50&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player113&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post3&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-11-13 10:44:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player101&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post4&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2014-12-04 20:45:11&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player102&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post1&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2015-03-03 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player103&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post1&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2017-09-23 23:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player102&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post7&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2018-01-04 00:44:23&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player101&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post8&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-01-04 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player106&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post9&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2022-01-02 22:23:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player105&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post10&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2011-01-11 10:00:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player130&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post1&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-01-02 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player131&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post2&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2016-11-24 10:04:50&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player131&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post3&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-11-13 10:44:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player133&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post4&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2014-12-04 20:45:11&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player132&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post5&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2015-03-03 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player134&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post6&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2017-09-23 23:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player135&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post7&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2018-01-04 00:44:23&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player136&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post8&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-01-04 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player137&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post9&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2022-01-02 22:23:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player138&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post10&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2011-01-11 10:00:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player141&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post1&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-01-03 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player142&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post2&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2016-11-25 10:04:50&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player143&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post3&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-11-14 10:44:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player144&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post4&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2014-12-05 20:45:11&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player145&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post5&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2015-03-04 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player146&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post6&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2017-09-24 23:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player147&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post7&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2018-01-05 00:44:23&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player148&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post8&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-01-05 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player139&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post9&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2022-01-03 22:23:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player140&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post10&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2011-01-12 10:01:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player141&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post1&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-01-04 00:34:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player102&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post2&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2016-11-26 10:06:50&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player103&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post3&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-11-15 10:45:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player104&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post4&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2014-12-06 20:47:11&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player105&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post5&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2015-03-05 00:32:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player106&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post6&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2017-09-25 23:31:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player107&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post7&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2018-01-06 00:46:23&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player118&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post8&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-01-06 00:35:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player119&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post9&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2022-01-04 22:26:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player110&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post10&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2011-01-15 10:00:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player111&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post1&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-01-06 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player104&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post11&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2022-01-15 10:00:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player125&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post11&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2022-02-15 10:00:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player113&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post11&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2022-03-15 10:00:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player102&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post11&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2022-04-15 10:00:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player108&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post11&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2022-05-15 10:00:30&#34;</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="n">VERTEX</span><span class="w"> </span><span class="o">`</span><span class="n">address</span><span class="o">`</span><span class="w"> </span><span class="p">(</span><span class="o">`</span><span class="n">address</span><span class="o">`</span><span class="p">,</span><span class="w"> </span><span class="o">`</span><span class="n">geo_point</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="k">VALUES</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_0&#34;</span><span class="p">:(</span><span class="s2">&#34;Brittany Forge Apt. 718 East Eric  WV 97881&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_1&#34;</span><span class="p">:(</span><span class="s2">&#34;Richard Curve Kingstad  AZ 05660&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_2&#34;</span><span class="p">:(</span><span class="s2">&#34;Schmidt Key Lake Charles  AL 36174&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">13</span><span class="p">.</span><span class="mi">13</span><span class="p">,</span><span class="o">-</span><span class="mi">87</span><span class="p">.</span><span class="mi">65</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_3&#34;</span><span class="p">:(</span><span class="s2">&#34;5 Joanna Key Suite 704 Frankshire  OK 03035&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_4&#34;</span><span class="p">:(</span><span class="s2">&#34;1 Payne Circle Mitchellfort  LA 73053&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_5&#34;</span><span class="p">:(</span><span class="s2">&#34;2 Klein Mission New Annetteton  HI 05775&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_6&#34;</span><span class="p">:(</span><span class="s2">&#34;1 Vanessa Stravenue Suite 184 Baileyville  NY 46381&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">11</span><span class="p">,</span><span class="mi">12</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_7&#34;</span><span class="p">:(</span><span class="s2">&#34;John Garden Port John  LA 54602&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">13</span><span class="p">,</span><span class="mi">14</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_8&#34;</span><span class="p">:(</span><span class="s2">&#34;11 Webb Groves Tiffanyside  MN 14566&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="mi">16</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_9&#34;</span><span class="p">:(</span><span class="s2">&#34;70 Robinson Locks Suite 113 East Veronica  ND 87845&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">17</span><span class="p">,</span><span class="mi">18</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_10&#34;</span><span class="p">:(</span><span class="s2">&#34;24 Mcknight Port Apt. 028 Sarahborough  MD 38195&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">19</span><span class="p">,</span><span class="mi">20</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_11&#34;</span><span class="p">:(</span><span class="s2">&#34;0337 Mason Corner Apt. 900 Toddmouth  FL 61464&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">21</span><span class="p">,</span><span class="mi">22</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_12&#34;</span><span class="p">:(</span><span class="s2">&#34;7 Davis Station Apt. 691 Pittmanfort  HI 29746&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">23</span><span class="p">,</span><span class="mi">24</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_13&#34;</span><span class="p">:(</span><span class="s2">&#34;1 Southport Street Apt. 098 Westport  KY 85907&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">120</span><span class="p">.</span><span class="mi">12</span><span class="p">,</span><span class="mi">30</span><span class="p">.</span><span class="mi">16</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_14&#34;</span><span class="p">:(</span><span class="s2">&#34;Weber Unions Eddieland  MT 64619&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">25</span><span class="p">,</span><span class="mi">26</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_15&#34;</span><span class="p">:(</span><span class="s2">&#34;1 Amanda Freeway Lisaland  NJ 94933&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">27</span><span class="p">,</span><span class="mi">28</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_16&#34;</span><span class="p">:(</span><span class="s2">&#34;2 Klein HI 05775&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_17&#34;</span><span class="p">:(</span><span class="s2">&#34;Schmidt Key Lake Charles AL 13617&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">13</span><span class="p">.</span><span class="mi">12</span><span class="p">,</span><span class="w"> </span><span class="o">-</span><span class="mi">87</span><span class="p">.</span><span class="mi">60</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_18&#34;</span><span class="p">:(</span><span class="s2">&#34;Rodriguez Track East Connorfort  NC 63144&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">29</span><span class="p">,</span><span class="mi">30</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="n">VERTEX</span><span class="w"> </span><span class="o">`</span><span class="n">place</span><span class="o">`</span><span class="w"> </span><span class="p">(</span><span class="o">`</span><span class="n">name</span><span class="o">`</span><span class="p">,</span><span class="w"> </span><span class="o">`</span><span class="n">geo_point</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="k">VALUES</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;WV&#34;</span><span class="p">:(</span><span class="s2">&#34;West Virginia&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">.</span><span class="mi">5</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;AZ&#34;</span><span class="p">:(</span><span class="s2">&#34;Arizona&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">.</span><span class="mi">5</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;AL&#34;</span><span class="p">:(</span><span class="s2">&#34;Alabama&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">13</span><span class="p">.</span><span class="mi">13</span><span class="p">,</span><span class="o">-</span><span class="mi">87</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;OK&#34;</span><span class="p">:(</span><span class="s2">&#34;Oklahoma&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">.</span><span class="mi">1</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;LA&#34;</span><span class="p">:(</span><span class="s2">&#34;Louisiana&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">.</span><span class="mi">1</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;HI&#34;</span><span class="p">:(</span><span class="s2">&#34;Hawaii&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="p">.</span><span class="mi">1</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;NY&#34;</span><span class="p">:(</span><span class="s2">&#34;New York&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">11</span><span class="p">,</span><span class="mi">12</span><span class="p">.</span><span class="mi">1</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;MN&#34;</span><span class="p">:(</span><span class="s2">&#34;Minnesota&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="mi">16</span><span class="p">.</span><span class="mi">1</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;ND&#34;</span><span class="p">:(</span><span class="s2">&#34;North Dakota&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">17</span><span class="p">,</span><span class="mi">18</span><span class="p">.</span><span class="mi">1</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;FL&#34;</span><span class="p">:(</span><span class="s2">&#34;Florida&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">21</span><span class="p">,</span><span class="mi">22</span><span class="p">.</span><span class="mi">1</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;KY&#34;</span><span class="p">:(</span><span class="s2">&#34;Kentucky&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">120</span><span class="p">.</span><span class="mi">12</span><span class="p">,</span><span class="mi">30</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;MT&#34;</span><span class="p">:(</span><span class="s2">&#34;Montana&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">25</span><span class="p">,</span><span class="mi">26</span><span class="p">.</span><span class="mi">1</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;NJ&#34;</span><span class="p">:(</span><span class="s2">&#34;New Jersey&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">27</span><span class="p">,</span><span class="mi">28</span><span class="p">.</span><span class="mi">1</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;NC&#34;</span><span class="p">:(</span><span class="s2">&#34;North Carolina&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">29</span><span class="p">,</span><span class="mi">30</span><span class="p">.</span><span class="mi">1</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="o">`</span><span class="n">belong_to</span><span class="o">`</span><span class="p">()</span><span class="w"> </span><span class="k">VALUES</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_0&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;WV&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_1&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;AZ&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_2&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;AL&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_3&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;OK&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_4&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;LA&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_5&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;HI&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_6&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;NY&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_7&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;LA&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_8&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;MN&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_9&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;ND&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_10&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;MD&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_11&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;FL&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_12&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;HI&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_13&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;KY&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_14&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;MT&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_15&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;NJ&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_16&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;HI&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_17&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;AL&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_18&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;NC&#34;</span><span class="p">:();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="o">`</span><span class="n">lived_in</span><span class="o">`</span><span class="p">()</span><span class="w"> </span><span class="k">VALUES</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player100&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_4&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player101&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_7&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player102&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_2&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player103&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_3&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player104&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_0&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player105&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_5&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player106&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_6&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player107&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_1&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player108&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_8&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player109&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_9&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player110&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_10&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player111&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_11&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player112&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_12&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player113&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_13&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player114&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_14&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player115&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_15&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player116&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_16&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player117&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_17&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player118&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_18&#34;</span><span class="p">:();</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="数据初探" class="headerLink">
    <a href="#%e6%95%b0%e6%8d%ae%e5%88%9d%e6%8e%a2" class="header-mark"></a>2.4 数据初探</h3><p>首先，我们看看数据统计</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="p">[</span><span class="n">basketballplayer</span><span class="p">]</span><span class="o">&gt;</span><span class="w"> </span><span class="n">SUBMIT</span><span class="w"> </span><span class="n">JOB</span><span class="w"> </span><span class="n">STATS</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">------------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="k">New</span><span class="w"> </span><span class="n">Job</span><span class="w"> </span><span class="n">Id</span><span class="w"> </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">------------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="mi">10</span><span class="w">         </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">------------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">[</span><span class="n">basketballplayer</span><span class="p">]</span><span class="o">&gt;</span><span class="w"> </span><span class="k">SHOW</span><span class="w"> </span><span class="n">STATS</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">---------+----------------+-------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="k">Type</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="n">Name</span><span class="w">           </span><span class="o">|</span><span class="w"> </span><span class="k">Count</span><span class="w"> </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">---------+----------------+-------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Tag&#34;</span><span class="w">   </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;address&#34;</span><span class="w">      </span><span class="o">|</span><span class="w"> </span><span class="mi">19</span><span class="w">    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Tag&#34;</span><span class="w">   </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;place&#34;</span><span class="w">        </span><span class="o">|</span><span class="w"> </span><span class="mi">14</span><span class="w">    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Tag&#34;</span><span class="w">   </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;player&#34;</span><span class="w">       </span><span class="o">|</span><span class="w"> </span><span class="mi">51</span><span class="w">    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Tag&#34;</span><span class="w">   </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;post&#34;</span><span class="w">         </span><span class="o">|</span><span class="w"> </span><span class="mi">10</span><span class="w">    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Tag&#34;</span><span class="w">   </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;team&#34;</span><span class="w">         </span><span class="o">|</span><span class="w"> </span><span class="mi">30</span><span class="w">    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Edge&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;belong_to&#34;</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="mi">19</span><span class="w">    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Edge&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;commented_at&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="mi">40</span><span class="w">    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Edge&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;created_post&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="mi">10</span><span class="w">    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Edge&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;follow&#34;</span><span class="w">       </span><span class="o">|</span><span class="w"> </span><span class="mi">81</span><span class="w">    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Edge&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;lived_in&#34;</span><span class="w">     </span><span class="o">|</span><span class="w"> </span><span class="mi">19</span><span class="w">    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Edge&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;serve&#34;</span><span class="w">        </span><span class="o">|</span><span class="w"> </span><span class="mi">152</span><span class="w">   </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Space&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;vertices&#34;</span><span class="w">     </span><span class="o">|</span><span class="w"> </span><span class="mi">124</span><span class="w">   </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Space&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;edges&#34;</span><span class="w">        </span><span class="o">|</span><span class="w"> </span><span class="mi">321</span><span class="w">   </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">---------+----------------+-------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Got</span><span class="w"> </span><span class="mi">13</span><span class="w"> </span><span class="k">rows</span><span class="w"> </span><span class="p">(</span><span class="n">time</span><span class="w"> </span><span class="n">spent</span><span class="w"> </span><span class="mi">1038</span><span class="o">/</span><span class="mi">51372</span><span class="w"> </span><span class="n">us</span><span class="p">)</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>查一下所有的数据</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">()</span><span class="o">-</span><span class="p">[</span><span class="n">e</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">()</span><span class="w"> </span><span class="k">RETURN</span><span class="w"> </span><span class="n">e</span><span class="w"> </span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">10000</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>因为数据量太小了，所以可以把所有数据在 NebulaGraph Explorer 中渲染出来：</p>
<p><figure><a class="lightgallery" href="/nebulagraph-sns/match_all.webp" title="match_all" data-thumbnail="/nebulagraph-sns/match_all.webp">
        <img
            
            loading="lazy"
            src="/nebulagraph-sns/match_all.webp"
            srcset="/nebulagraph-sns/match_all.webp, /nebulagraph-sns/match_all.webp 1.5x, /nebulagraph-sns/match_all.webp 2x"
            sizes="auto"
            alt="match_all" height="2334"  width="4064" >
    </a></figure></p>
<h2 id="找出网络中的关键人物" class="headerLink">
    <a href="#%e6%89%be%e5%87%ba%e7%bd%91%e7%bb%9c%e4%b8%ad%e7%9a%84%e5%85%b3%e9%94%ae%e4%ba%ba%e7%89%a9" class="header-mark"></a>3 找出网络中的关键人物</h2><p>识别社交网络中的有影响的关键人物们（influencers）涉及使用各种指标和方法来识别在特定网络中拥有大量影响力的个人。这对很多业务场景都有帮助都很有用，比如用于营销或研究网络中的信息传播。</p>
<p>识别他们的方法有很多，具体的方法和考量的信息、关系、角度也取决于这些关键人物的类型、和获取他们的目的。</p>
<p>一些常见的方法包括看一个人拥有的粉丝或内容被消费的数量，他们在其帖子、视频上读者的参与度，以及他们的内容的影响力（转发、引用）。这些方法在图上也是可以做的，但是比较平凡，我就不举例了，在这里，我们可以试着用评估、计算节点重要性的图算法，在图上得出这些关键人物。</p>
<h3 id="pagerank" class="headerLink">
    <a href="#pagerank" class="header-mark"></a>3.1 PageRank</h3><p>PageRank 是一个非常“古老的”图算法，它通过考虑图上点之间的关系数量去迭代，得到每一个点的得分（Rank），最初由 Google 的创始人 Larry Page 和 Sergey Brin 提出并应用在早期的 Google 搜索引擎中，用来排序搜索结果，这里的 Page 可以是 Larry Page 的姓和 Web Page 的双关了。</p>
<p>在现代、复杂的搜索引擎中，PageRank 早就因为其过于简单而被弃用，但是在其他图结构网络场景中，PageRank 仍然在发光发热，社交网络中我们可以粗略地认为所有链接的重要程度类似，去运行这个算法找出那些关键的用户。</p>
<p>在 NebulaGraph 中，我们可以利用 NebulaGraph Algorithm、NebulaGraph Analytics 去在大的全图上运行 PageRank，而在日常的分析、验证、设计阶段，我们不需要在全量数据上跑结果，而在很小的子图上（最多上万），我们可以轻松地在浏览器里边运行各种图算法去得出线上业务可以用的方法。</p>
<p>今天，我们就用 NebulaGraph Explorer 内置的浏览器内图算法功能执行一下 PageRank 看看（具体方法这里略去，可以参考<a href="https://docs.nebula-graph.com.cn/3.3.0/nebula-explorer/graph-explorer/graph-algorithm/" target="_blank" rel="noopener noreferrer">文档</a>，不过其实就是点一下鼠标的事儿）：</p>
<p><figure><a class="lightgallery" href="/nebulagraph-sns/PageRank.webp" title="PageRank" data-thumbnail="/nebulagraph-sns/PageRank.webp">
        <img
            
            loading="lazy"
            src="/nebulagraph-sns/PageRank.webp"
            srcset="/nebulagraph-sns/PageRank.webp, /nebulagraph-sns/PageRank.webp 1.5x, /nebulagraph-sns/PageRank.webp 2x"
            sizes="auto"
            alt="PageRank" height="2334"  width="4064" >
    </a></figure></p>
<p>我们可以从上边看到，PageRank 计算之后所有绿色的 player（人）中，&ldquo;player.name: Tim Duncan&rdquo; 是最大的一个点，与之相关联的关系看起来的确不少，我们在图上选择他，再右键反选，选择除了 Tim Duncan 之外的所有点，用退格键删除所有其他的点，然后在他作为起点双向探索出1到5步，可以得到 Tim Duncan 的子图：</p>
<p><figure><a class="lightgallery" href="/nebulagraph-sns/TimDuncan.webp" title="TimDuncan" data-thumbnail="/nebulagraph-sns/TimDuncan.webp">
        <img
            
            loading="lazy"
            src="/nebulagraph-sns/TimDuncan.webp"
            srcset="/nebulagraph-sns/TimDuncan.webp, /nebulagraph-sns/TimDuncan.webp 1.5x, /nebulagraph-sns/TimDuncan.webp 2x"
            sizes="auto"
            alt="TimDuncan" height="2334"  width="4064" >
    </a></figure></p>
<p>从子图中可以看到 Tim Duncan 和非常多其他球员有关注的关系的同时，一些其他很受欢迎的队员和他一起一样服役过非常热门的热刺（Spurs）队，这些都印证了 PageRank 的评估方式。</p>
<p>现在我们再看看其他判定维度下的算法会不会得出一样的结论呢？</p>
<h3 id="betweenness-centrality" class="headerLink">
    <a href="#betweenness-centrality" class="header-mark"></a>3.2 Betweenness Centrality</h3><p>作为另一个流行的节点重要性算法，通过计算一个节点对于图中的中介、桥梁作用来衡量节点的重要性，这里的桥梁作用是有数学定义的量化算法，这里就不展开说了，不过从感官上可以看出它是另一个角度很符合直觉地去评估重要性的方法。</p>
<p>我们重新在画布上查询所有的点边之后，在浏览器里运行 Betweenness Centrality 算法，这次的结果是：</p>
<p><figure><a class="lightgallery" href="/nebulagraph-sns/Betweeness_centrality.webp" title="Betweeness_centrality" data-thumbnail="/nebulagraph-sns/Betweeness_centrality.webp">
        <img
            
            loading="lazy"
            src="/nebulagraph-sns/Betweeness_centrality.webp"
            srcset="/nebulagraph-sns/Betweeness_centrality.webp, /nebulagraph-sns/Betweeness_centrality.webp 1.5x, /nebulagraph-sns/Betweeness_centrality.webp 2x"
            sizes="auto"
            alt="Betweeness_centrality" height="2334"  width="4064" >
    </a></figure></p>
<p>从它的五跳内子图可以看出，与之前 PageRank 所得的关键人物 Tim Duncan 呈现的星星状态不同，Dejounte Murray 的子图呈现簇状，在感官、直觉上可以想象 Dejounte Murray 真的在很多节点之间的最小路径的必经之路上，而 Tim Duncan 则似乎和更多的重要连接者产生了关联。</p>
<p><figure><a class="lightgallery" href="/nebulagraph-sns/DejounteMurray.webp" title="DejounteMurray" data-thumbnail="/nebulagraph-sns/DejounteMurray.webp">
        <img
            
            loading="lazy"
            src="/nebulagraph-sns/DejounteMurray.webp"
            srcset="/nebulagraph-sns/DejounteMurray.webp, /nebulagraph-sns/DejounteMurray.webp 1.5x, /nebulagraph-sns/DejounteMurray.webp 2x"
            sizes="auto"
            alt="DejounteMurray" height="2334"  width="4064" >
    </a></figure></p>
<p>在实际的应用场景中，我们通常要通过不同方式的定义的理解、不同执行结果的试验、分析去找到我们关注的关键人物产生影响的结构特征，用来针对不同需求选择不同的算法。</p>
<h2 id="找出社区聚集群体" class="headerLink">
    <a href="#%e6%89%be%e5%87%ba%e7%a4%be%e5%8c%ba%e8%81%9a%e9%9b%86%e7%be%a4%e4%bd%93" class="header-mark"></a>4 找出社区、聚集群体</h2><p>社交网络中的社区检测是一种通过分析社交关系来发现社区结构的技术。社区结构是指在社交网络、图谱中相互联系密切的一组节点，这些节点通常具有相似的特征或兴趣。例如，社区结构可能表现为用户根据共同的话题或兴趣聚集在一起的一组用户。</p>
<p>社区检测的目的是通过对社交网络进行分析，找出不同社区的边界，并确定每个社区中的节点。这一过程可以通过使用各种算法来完成，例如标签传播算法、弱联通分量算法和 Louvain 算法等。通过发现社区结构，可以更好地了解社交网络的结构和特征，并有助于社交网络服务提供方更好地推断和预测社交网络中的行为，帮助做好社交网络的治理、广告投放、市场营销等。</p>
<p>由于我们的数据集是非真实的，我在不同的算法之下得出的结果并不能展现出真实的意涵，所以本章只是展示一下利用几个图算法进行社区识别之后的结果，在真实世界的案例中，我们还应该在此基础之上利用领域知识或者其他技术手段协同给出不同群体、社区的画像、标签。</p>
<p>标签传播算法效果：</p>
<p><figure><a class="lightgallery" href="/nebulagraph-sns/LPA.webp" title="LPA" data-thumbnail="/nebulagraph-sns/LPA.webp">
        <img
            
            loading="lazy"
            src="/nebulagraph-sns/LPA.webp"
            srcset="/nebulagraph-sns/LPA.webp, /nebulagraph-sns/LPA.webp 1.5x, /nebulagraph-sns/LPA.webp 2x"
            sizes="auto"
            alt="LPA" height="2334"  width="4064" >
    </a></figure></p>
<p>Louvain 算法效果：</p>
<p><figure><a class="lightgallery" href="/nebulagraph-sns/Louvain.webp" title="Louvain" data-thumbnail="/nebulagraph-sns/Louvain.webp">
        <img
            
            loading="lazy"
            src="/nebulagraph-sns/Louvain.webp"
            srcset="/nebulagraph-sns/Louvain.webp, /nebulagraph-sns/Louvain.webp 1.5x, /nebulagraph-sns/Louvain.webp 2x"
            sizes="auto"
            alt="Louvain" height="2334"  width="4064" >
    </a></figure></p>
<p>弱联通分量算法效果：</p>
<p><figure><a class="lightgallery" href="/nebulagraph-sns/WCC.webp" title="WCC" data-thumbnail="/nebulagraph-sns/WCC.webp">
        <img
            
            loading="lazy"
            src="/nebulagraph-sns/WCC.webp"
            srcset="/nebulagraph-sns/WCC.webp, /nebulagraph-sns/WCC.webp 1.5x, /nebulagraph-sns/WCC.webp 2x"
            sizes="auto"
            alt="WCC" height="2334"  width="4064" >
    </a></figure></p>
<p>在后边的章节，我们有机会可以在更小、更简单的子图上再次验证这几个算法，结果会更有可解释性一些。</p>
<h2 id="好友亲密度" class="headerLink">
    <a href="#%e5%a5%bd%e5%8f%8b%e4%ba%b2%e5%af%86%e5%ba%a6" class="header-mark"></a>5 好友亲密度</h2><p>通过社区识别算法，其实是能够在一定程度上，在全局计算获得兴趣相近、关联紧密的好友的。那么如何获得一个给定用户的其他亲密好友呢？我们可以通过计算这个用户的好友中，和他共同好友的个数来排序获得这一信息！</p>
<p>我们拿 &ldquo;Tim Duncan&rdquo; 举例，我们知道，他的两度好友（好友的好友：<code>(:player{name: &quot;Tim Duncan&quot;})-[:follow]-(f:player)-[:follow]-(fof:player)</code>）如果同时也是他的好友的话，那么他们这个中间的好友就是他和这个朋友的共同好友（Mutual Friend），那么有理由相信那些和 Tim Duncan 有更多共同好友的人可能跟他有更高亲密度：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">start</span><span class="p">:</span><span class="o">`</span><span class="n">player</span><span class="o">`</span><span class="err">{</span><span class="n">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Tim Duncan&#34;</span><span class="err">}</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">f</span><span class="p">:</span><span class="o">`</span><span class="n">player</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">fof</span><span class="p">:</span><span class="o">`</span><span class="n">player</span><span class="o">`</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="n">start</span><span class="p">:</span><span class="o">`</span><span class="n">player</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">fof</span><span class="p">:</span><span class="o">`</span><span class="n">player</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">fof</span><span class="p">.</span><span class="o">`</span><span class="n">player</span><span class="o">`</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="nf">count</span><span class="p">(</span><span class="k">DISTINCT</span><span class="w"> </span><span class="n">f</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">NrOfMutualF</span><span class="w"> </span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">NrOfMutualF</span><span class="w"> </span><span class="k">DESC</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这个计算结果是，&ldquo;Tony Parker&rdquo; 和 Tim 有 5 个共同好友，最为亲密。</p>
<table>
<thead>
<tr>
<th style="text-align:left">fof.player.name</th>
<th style="text-align:left">NrOfMutualF</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Tony Parker</td>
<td style="text-align:left">5</td>
</tr>
<tr>
<td style="text-align:left">Dejounte Murray</td>
<td style="text-align:left">4</td>
</tr>
<tr>
<td style="text-align:left">Manu Ginobili</td>
<td style="text-align:left">3</td>
</tr>
<tr>
<td style="text-align:left">Marco Belinelli</td>
<td style="text-align:left">3</td>
</tr>
<tr>
<td style="text-align:left">Danny Green</td>
<td style="text-align:left">2</td>
</tr>
<tr>
<td style="text-align:left">Boris Diaw</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">LaMarcus Aldridge</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">Tiago Splitter</td>
<td style="text-align:left">1</td>
</tr>
</tbody>
</table>
<p>下面，咱们通过可视化来验证一下这个结果吧！</p>
<p>先看看每一个好友的共同好友(f:)都是谁？</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">start</span><span class="p">:</span><span class="n">player</span><span class="err">{</span><span class="n">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Tim Duncan&#34;</span><span class="err">}</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">f</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">fof</span><span class="p">:</span><span class="n">player</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="n">start</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">fof</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">fof</span><span class="p">.</span><span class="n">player</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="nf">collect</span><span class="p">(</span><span class="k">DISTINCT</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">player</span><span class="p">.</span><span class="n">name</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>结果如下：</p>
<table>
<thead>
<tr>
<th style="text-align:left">fof.player.name</th>
<th style="text-align:left">collect(distinct f.player.name)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Boris Diaw</td>
<td style="text-align:left">[&ldquo;Tony Parker&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Manu Ginobili</td>
<td style="text-align:left">[&ldquo;Dejounte Murray&rdquo;, &ldquo;Tiago Splitter&rdquo;, &ldquo;Tony Parker&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">LaMarcus Aldridge</td>
<td style="text-align:left">[&ldquo;Tony Parker&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Tiago Splitter</td>
<td style="text-align:left">[&ldquo;Manu Ginobili&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Tony Parker</td>
<td style="text-align:left">[&ldquo;Dejounte Murray&rdquo;, &ldquo;Boris Diaw&rdquo;, &ldquo;Manu Ginobili&rdquo;, &ldquo;Marco Belinelli&rdquo;, &ldquo;LaMarcus Aldridge&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Dejounte Murray</td>
<td style="text-align:left">[&ldquo;Danny Green&rdquo;, &ldquo;Tony Parker&rdquo;, &ldquo;Manu Ginobili&rdquo;, &ldquo;Marco Belinelli&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Danny Green</td>
<td style="text-align:left">[&ldquo;Dejounte Murray&rdquo;, &ldquo;Marco Belinelli&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Marco Belinelli</td>
<td style="text-align:left">[&ldquo;Dejounte Murray&rdquo;, &ldquo;Danny Green&rdquo;, &ldquo;Tony Parker&rdquo;]</td>
</tr>
</tbody>
</table>
<p>然后我们在 Explorer 上可视化一下这个结果：</p>
<ul>
<li>首先，我们把 Tim 的量度好友路径全查出来</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">start</span><span class="p">:</span><span class="n">player</span><span class="err">{</span><span class="n">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Tim Duncan&#34;</span><span class="err">}</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">f</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">follow</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">fof</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>然后我们在其中按照度去渲染节点大小，并选中 Tim 和 Tony，并在两者之间查询 follow 类型边、双向、最多 2 跳的全部路径：</li>
</ul>
<p>可以看出他们之间是最亲密的朋友没跑了，而且他们的共同好友也在路径之中：</p>
<p><code>[&quot;Dejounte Murray&quot;, &quot;Boris Diaw&quot;, &quot;Manu Ginobili&quot;, &quot;Marco Belinelli&quot;, &quot;LaMarcus Aldridge&quot;]</code></p>
<p><figure><a class="lightgallery" href="/nebulagraph-sns/closest_friend.webp" title="closest_friend" data-thumbnail="/nebulagraph-sns/closest_friend.webp">
        <img
            
            loading="lazy"
            src="/nebulagraph-sns/closest_friend.webp"
            srcset="/nebulagraph-sns/closest_friend.webp, /nebulagraph-sns/closest_friend.webp 1.5x, /nebulagraph-sns/closest_friend.webp 2x"
            sizes="auto"
            alt="closest_friend" height="2334"  width="4064" >
    </a></figure></p>
<h3 id="朋友圈子里的小群体" class="headerLink">
    <a href="#%e6%9c%8b%e5%8f%8b%e5%9c%88%e5%ad%90%e9%87%8c%e7%9a%84%e5%b0%8f%e7%be%a4%e4%bd%93" class="header-mark"></a>5.1 朋友圈子里的小群体</h3><p>这时候，如前边提到，这份数据集本身的非真实性，使得社区发现算法的结果不能得到其中洞察的内涵，现在我们可以接着这个小的子图，看看 Tim 的好友中可以如何区分群组、社区呢，咱们跑一个 Louvain 、弱联通分量、标签传播看看：</p>
<ul>
<li>弱联通分量，可以把 Tim 等朋友们大体分割出两三个相互不连通的部分，非常符合连通分量的直观理解和定义。</li>
</ul>
<p><figure><a class="lightgallery" href="/nebulagraph-sns/Tim_wcc.webp" title="Tim_wcc" data-thumbnail="/nebulagraph-sns/Tim_wcc.webp">
        <img
            
            loading="lazy"
            src="/nebulagraph-sns/Tim_wcc.webp"
            srcset="/nebulagraph-sns/Tim_wcc.webp, /nebulagraph-sns/Tim_wcc.webp 1.5x, /nebulagraph-sns/Tim_wcc.webp 2x"
            sizes="auto"
            alt="Tim_wcc" height="2334"  width="4064" >
    </a></figure></p>
<ul>
<li>
<p>标签传播，我们可以通过控制迭代次数按需去通过随机的传播划定出不同的划分度，结果可以有一定的区分度：</p>
<p>20 次迭代</p>
<p><figure><a class="lightgallery" href="/nebulagraph-sns/Tim_LPA.webp" title="Tim_LPA" data-thumbnail="/nebulagraph-sns/Tim_LPA.webp">
        <img
            
            loading="lazy"
            src="/nebulagraph-sns/Tim_LPA.webp"
            srcset="/nebulagraph-sns/Tim_LPA.webp, /nebulagraph-sns/Tim_LPA.webp 1.5x, /nebulagraph-sns/Tim_LPA.webp 2x"
            sizes="auto"
            alt="Tim_LPA" height="2334"  width="4064" >
    </a></figure></p>
<p>1000 次迭代</p>
<p><figure><a class="lightgallery" href="/nebulagraph-sns/Tim_LPA_1000.webp" title="Tim_LPA_1000" data-thumbnail="/nebulagraph-sns/Tim_LPA_1000.webp">
        <img
            
            loading="lazy"
            src="/nebulagraph-sns/Tim_LPA_1000.webp"
            srcset="/nebulagraph-sns/Tim_LPA_1000.webp, /nebulagraph-sns/Tim_LPA_1000.webp 1.5x, /nebulagraph-sns/Tim_LPA_1000.webp 2x"
            sizes="auto"
            alt="Tim_LPA_1000" height="2334"  width="4064" >
    </a></figure></p>
</li>
<li>
<p>Louvain，是一个比较高效、稳定的算法，基本上在这个子图下我们可以在很小的迭代次数下得到很符合直觉的划分：</p>
</li>
</ul>
<p><figure><a class="lightgallery" href="/nebulagraph-sns/Tim_Louvain.webp" title="Tim_Louvain" data-thumbnail="/nebulagraph-sns/Tim_Louvain.webp">
        <img
            
            loading="lazy"
            src="/nebulagraph-sns/Tim_Louvain.webp"
            srcset="/nebulagraph-sns/Tim_Louvain.webp, /nebulagraph-sns/Tim_Louvain.webp 1.5x, /nebulagraph-sns/Tim_Louvain.webp 2x"
            sizes="auto"
            alt="Tim_Louvain" height="2334"  width="4064" >
    </a></figure></p>
<h2 id="新朋友推荐" class="headerLink">
    <a href="#%e6%96%b0%e6%9c%8b%e5%8f%8b%e6%8e%a8%e8%8d%90" class="header-mark"></a>6 新朋友推荐</h2><p>接着前边二度朋友（朋友的朋友）的思路，我们可以很容易把那些还不是朋友的二度朋友作为推荐添加的好友，而排序规则则是他们之间的共同好友数量：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">start</span><span class="p">:</span><span class="n">player</span><span class="err">{</span><span class="n">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Tim Duncan&#34;</span><span class="err">}</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">f</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">fof</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="p">(</span><span class="n">start</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">fof</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">fof</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">start</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">fof</span><span class="p">.</span><span class="n">player</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="nf">count</span><span class="p">(</span><span class="k">DISTINCT</span><span class="w"> </span><span class="n">f</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">NrOfMutualF</span><span class="w"> </span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">NrOfMutualF</span><span class="w"> </span><span class="k">DESC</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><table>
<thead>
<tr>
<th style="text-align:left">fof.player.name</th>
<th style="text-align:left">NrOfMutualF</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">LeBron James</td>
<td style="text-align:left">2</td>
</tr>
<tr>
<td style="text-align:left">James Harden</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">Chris Paul</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">Yao Ming</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">Damian Lillard</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">JaVale McGee</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">Kevin Durant</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">Kyle Anderson</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">Rudy Gay</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">Russell Westbrook</td>
<td style="text-align:left">1</td>
</tr>
</tbody>
</table>
<p>显然，LeBron 最值得推荐！再看看这些共同好友都是谁？</p>
<table>
<thead>
<tr>
<th style="text-align:left">fof.player.name</th>
<th style="text-align:left">collect(distinct f.player.name)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">James Harden</td>
<td style="text-align:left">[&ldquo;Dejounte Murray&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">LeBron James</td>
<td style="text-align:left">[&ldquo;Danny Green&rdquo;, &ldquo;Dejounte Murray&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Chris Paul</td>
<td style="text-align:left">[&ldquo;Dejounte Murray&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Yao Ming</td>
<td style="text-align:left">[&ldquo;Shaquille O&rsquo;Neal&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Damian Lillard</td>
<td style="text-align:left">[&ldquo;LaMarcus Aldridge&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">JaVale McGee</td>
<td style="text-align:left">[&ldquo;Shaquille O&rsquo;Neal&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Kevin Durant</td>
<td style="text-align:left">[&ldquo;Dejounte Murray&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Kyle Anderson</td>
<td style="text-align:left">[&ldquo;Dejounte Murray&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Rudy Gay</td>
<td style="text-align:left">[&ldquo;LaMarcus Aldridge&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Russell Westbrook</td>
<td style="text-align:left">[&ldquo;Dejounte Murray&rdquo;]</td>
</tr>
</tbody>
</table>
<p>同样，我们在刚才的子图里找找 LeBron James 吧！我们把它俩之间的两步、双向路径找出来，果然只会经过 <code>[&quot;Danny Green&quot;, &quot;Dejounte Murray&quot;]</code> 并且，没有直接的连接：</p>
<p><figure><a class="lightgallery" href="/nebulagraph-sns/Tim_newFriend.webp" title="Tim_newFriend" data-thumbnail="/nebulagraph-sns/Tim_newFriend.webp">
        <img
            
            loading="lazy"
            src="/nebulagraph-sns/Tim_newFriend.webp"
            srcset="/nebulagraph-sns/Tim_newFriend.webp, /nebulagraph-sns/Tim_newFriend.webp 1.5x, /nebulagraph-sns/Tim_newFriend.webp 2x"
            sizes="auto"
            alt="Tim_newFriend" height="2334"  width="4064" >
    </a></figure></p>
<p>现在，系统会给两边发提醒：“hey，也许你们应该交个朋友！”</p>
<h2 id="共同邻居" class="headerLink">
    <a href="#%e5%85%b1%e5%90%8c%e9%82%bb%e5%b1%85" class="header-mark"></a>7 共同邻居</h2><p>查找共同邻居是一个很常见的图库查询，它的场景可能根据不同的邻居关系，节点类型，同构、异构，带来不同的场景，前边两个场景下的共同好友本质上是两点之间的共同邻居，直接查询这样的关系用 OpenCypher 的表达非常简单。</p>
<h3 id="两点之间的共同邻居" class="headerLink">
    <a href="#%e4%b8%a4%e7%82%b9%e4%b9%8b%e9%97%b4%e7%9a%84%e5%85%b1%e5%90%8c%e9%82%bb%e5%b1%85" class="header-mark"></a>7.1 两点之间的共同邻居</h3><p>比如这个表达可以查询两个用户之间的共性、交集，结果可能是共同团队、去过的地方、兴趣爱好、共同参与的帖子回复等等：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="o">`</span><span class="n">v0</span><span class="o">`</span><span class="p">)</span><span class="o">--</span><span class="p">()</span><span class="o">--</span><span class="p">(</span><span class="o">`</span><span class="n">v1</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="o">`</span><span class="n">v0</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;player100&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="o">`</span><span class="n">v1</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;player104&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>而限定了边的类型之后，这个查询就限定在共同好友的查询了。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">v0</span><span class="p">)</span><span class="o">--</span><span class="p">(:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">)</span><span class="o">--</span><span class="p">(</span><span class="n">v1</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">v0</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;player100&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">v1</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;player104&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="多点之间的共同邻居内容推送" class="headerLink">
    <a href="#%e5%a4%9a%e7%82%b9%e4%b9%8b%e9%97%b4%e7%9a%84%e5%85%b1%e5%90%8c%e9%82%bb%e5%b1%85%e5%86%85%e5%ae%b9%e6%8e%a8%e9%80%81" class="header-mark"></a>7.2 多点之间的共同邻居：内容推送</h3><p>下面，我们给出一个多点共同邻居的场景，我们从一个文章触发，查出所有在这个文章上有互动的用户，找到这一群体中的共同邻居。</p>
<p>这个共同邻居有什么用处呢？很自然，如果这个共同邻居还没有和这个文章有任何交互，我们可以把这个文章推荐给他。</p>
<p>这个查询的实现很有意思：</p>
<ul>
<li>第一个 MATCH 是查到所有 post11 文章下留言和作者这些人的总人数</li>
<li>在第二个 MATCH 之后，我们查到所有这群人的一度好友路径中，这些文章过的交互用户的一度好友的参与过文章的朋友数量刚好等于这个参与文章的用户的数量的这些人，他们其实就是这些所有参与用户的共同好友。</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">blog</span><span class="p">:</span><span class="n">post</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[</span><span class="n">e</span><span class="p">]</span><span class="o">-</span><span class="p">(:</span><span class="n">player</span><span class="p">)</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">blog</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;post11&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">blog</span><span class="p">,</span><span class="w"> </span><span class="nf">count</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">invoved_user_count</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">blog</span><span class="p">:</span><span class="n">post</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[]</span><span class="o">-</span><span class="p">(</span><span class="n">users</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">common_neighbor</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="nf">toSet</span><span class="p">(</span><span class="nf">collect</span><span class="p">(</span><span class="n">users</span><span class="p">))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">users</span><span class="p">,</span><span class="w"> </span><span class="n">common_neighbor</span><span class="p">,</span><span class="w"> </span><span class="n">invoved_user_count</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">size</span><span class="p">(</span><span class="n">users</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">invoved_user_count</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">common_neighbor</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>而这个人就是&hellip;Tony！</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">+-----------------------------------------------------+
</span></span><span class="line"><span class="cl">| common_neighbor                                     |
</span></span><span class="line"><span class="cl">+-----------------------------------------------------+
</span></span><span class="line"><span class="cl">| (&#34;player101&#34; :player{age: 36, name: &#34;Tony Parker&#34;}) |
</span></span><span class="line"><span class="cl">+-----------------------------------------------------+
</span></span></code></pre></td></tr></table>
</div>
</div><p>而我们可以很容易在可视化中国验证它：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">blog</span><span class="p">:</span><span class="n">post</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[]</span><span class="o">-</span><span class="p">(</span><span class="n">users</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">common_neighbor</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">blog</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;post11&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>渲染这个查询结果，然后再这篇叫做 &ldquo;Let&rsquo;s have a party!&rdquo; 的文章与 Tony 之间查找评论、po文、关注三类边的双向、两跳查询，就可以看到这些参与文章的人们无一例外，都是 Tony 的好友，而只有 Tony 自己还没去文章里留言！</p>
<p>而 Party 怎么可以少了 Tony 呢？难道是他的惊喜生日 Party，Opps，我们是不是不应该告诉他？</p>
<p><figure><a class="lightgallery" href="/nebulagraph-sns/common_nbrs_tony.webp" title="common_nbrs_tony" data-thumbnail="/nebulagraph-sns/common_nbrs_tony.webp">
        <img
            
            loading="lazy"
            src="/nebulagraph-sns/common_nbrs_tony.webp"
            srcset="/nebulagraph-sns/common_nbrs_tony.webp, /nebulagraph-sns/common_nbrs_tony.webp 1.5x, /nebulagraph-sns/common_nbrs_tony.webp 2x"
            sizes="auto"
            alt="common_nbrs_tony" height="2334"  width="4064" >
    </a></figure></p>
<h2 id="信息流" class="headerLink">
    <a href="#%e4%bf%a1%e6%81%af%e6%b5%81" class="header-mark"></a>8 信息流</h2><p>我在之前写过基于图技术的推荐系统实现方法，其中描述了现代推荐系统中内容过滤、排序方法可以在图谱上进行，社交网络中有一点相似但又不同的场景是信息流（Feed），它的产生类似于推荐系统中的个性化，同时有具有很高的时效性，借助于包含了内容行为知识的社交图谱可以很直观、高效去实现个性化的信息流生成。</p>
<h3 id="好友参与的内容" class="headerLink">
    <a href="#%e5%a5%bd%e5%8f%8b%e5%8f%82%e4%b8%8e%e7%9a%84%e5%86%85%e5%ae%b9" class="header-mark"></a>8.1 好友参与的内容</h3><p>最简单、直接的信息流定义可能就是在朋友圈、微博 feed 上刷一下关注的人创建、参与的内容列表了，先不考虑排序的问题，这些内容一定是：</p>
<ul>
<li>一定时间段内好友创建的内容</li>
<li>一定时间端内好友评论的内容</li>
</ul>
<p>我们可以用 cypher 表达这个查询用户 id 为 player100 的信息流：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">feed_owner</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">friend</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">feed_owner</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;player100&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">friend</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">newly_commented</span><span class="p">:</span><span class="n">commented_at</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(:</span><span class="n">post</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">created_post</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">feed_owner</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="n">newly_commented</span><span class="p">.</span><span class="n">post_time</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="kt">timestamp</span><span class="p">(</span><span class="s2">&#34;2010-01-01 00:00:00&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">friend</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">newly_created</span><span class="p">:</span><span class="n">created_post</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">po</span><span class="p">:</span><span class="n">post</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="n">newly_created</span><span class="p">.</span><span class="n">post_time</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="kt">timestamp</span><span class="p">(</span><span class="s2">&#34;2010-01-01 00:00:00&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="k">DISTINCT</span><span class="w"> </span><span class="n">friend</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nf">collect</span><span class="p">(</span><span class="k">DISTINCT</span><span class="w"> </span><span class="n">po</span><span class="p">.</span><span class="n">post</span><span class="p">.</span><span class="n">title</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nf">collect</span><span class="p">(</span><span class="s2">&#34;comment of &#34;</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nf">dst</span><span class="p">(</span><span class="n">newly_commented</span><span class="p">))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">AS</span><span class="w"> </span><span class="n">feeds</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">size</span><span class="p">(</span><span class="n">feeds</span><span class="p">)</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">friend</span><span class="p">.</span><span class="n">player</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">feeds</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><table>
<thead>
<tr>
<th style="text-align:left">friend.player.name</th>
<th style="text-align:left">feeds</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Boris Diaw</td>
<td style="text-align:left">[&ldquo;I love you, Mom&rdquo;, &ldquo;comment of post11&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Marco Belinelli</td>
<td style="text-align:left">[&ldquo;my best friend, tom&rdquo;, &ldquo;comment of post11&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Danny Green</td>
<td style="text-align:left">[&ldquo;comment of post1&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Tiago Splitter</td>
<td style="text-align:left">[&ldquo;comment of post1&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Dejounte Murray</td>
<td style="text-align:left">[&ldquo;comment of post11&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Tony Parker</td>
<td style="text-align:left">[&ldquo;I can swim&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">LaMarcus Aldridge</td>
<td style="text-align:left">[&ldquo;I hate coriander&rdquo;, &ldquo;comment of post11&rdquo;, &ldquo;comment of post1&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Manu Ginobili</td>
<td style="text-align:left">[&ldquo;my best friend, jerry&rdquo;, &ldquo;comment of post11&rdquo;, &ldquo;comment of post11&rdquo;]</td>
</tr>
</tbody>
</table>
<p>于是，我们可以把这些评论、文章发送到用户的 feed 之上了。</p>
<p>我们也来看看他们在图上的样子吧，我们输出所有查到的路径：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">feed_owner</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">friend</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">feed_owner</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;player100&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="n">p_comment</span><span class="o">=</span><span class="p">(</span><span class="n">friend</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">newly_commented</span><span class="p">:</span><span class="n">commented_at</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(:</span><span class="n">post</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">created_post</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">feed_owner</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="n">newly_commented</span><span class="p">.</span><span class="n">post_time</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="kt">timestamp</span><span class="p">(</span><span class="s2">&#34;2010-01-01 00:00:00&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="n">p_post</span><span class="o">=</span><span class="p">(</span><span class="n">friend</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">newly_created</span><span class="p">:</span><span class="n">created_post</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">po</span><span class="p">:</span><span class="n">post</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="n">newly_created</span><span class="p">.</span><span class="n">post_time</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="kt">timestamp</span><span class="p">(</span><span class="s2">&#34;2010-01-01 00:00:00&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="p">,</span><span class="w"> </span><span class="n">p_comment</span><span class="p">,</span><span class="w"> </span><span class="n">p_post</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>渲染在 Explorer 上，选择“神经网络”这个布局，可以很清晰看出这些粉色的文章节点，还有代表评论的边。</p>
<p><figure><a class="lightgallery" href="/nebulagraph-sns/feed_from_friends.webp" title="feed_from_friends" data-thumbnail="/nebulagraph-sns/feed_from_friends.webp">
        <img
            
            loading="lazy"
            src="/nebulagraph-sns/feed_from_friends.webp"
            srcset="/nebulagraph-sns/feed_from_friends.webp, /nebulagraph-sns/feed_from_friends.webp 1.5x, /nebulagraph-sns/feed_from_friends.webp 2x"
            sizes="auto"
            alt="feed_from_friends" height="2334"  width="4064" >
    </a></figure></p>
<h3 id="附近好友的内容" class="headerLink">
    <a href="#%e9%99%84%e8%bf%91%e5%a5%bd%e5%8f%8b%e7%9a%84%e5%86%85%e5%ae%b9" class="header-mark"></a>8.2 附近好友的内容</h3><p>我们再进一步，把地理信息考虑进来，获取那些住址的经纬度小于一定距离朋友相关的内容。</p>
<p>这里，我们用到了 NebulaGraph 的 GeoSpatial 地理功能，<code>ST_Distance(home.address.geo_point, friend_addr.address.geo_point) AS distance WHERE distance &lt; 1000000</code> 的约束条件帮我们表达了距离的限制。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">home</span><span class="p">:</span><span class="n">address</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">lived_in</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">feed_owner</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">friend</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">lived_in</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">friend_addr</span><span class="p">:</span><span class="n">address</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">feed_owner</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;player100&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">feed_owner</span><span class="p">,</span><span class="w"> </span><span class="n">friend</span><span class="p">,</span><span class="w"> </span><span class="nf">ST_Distance</span><span class="p">(</span><span class="n">home</span><span class="p">.</span><span class="n">address</span><span class="p">.</span><span class="n">geo_point</span><span class="p">,</span><span class="w"> </span><span class="n">friend_addr</span><span class="p">.</span><span class="n">address</span><span class="p">.</span><span class="n">geo_point</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">distance</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">distance</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">1000000</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">friend</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">newly_commented</span><span class="p">:</span><span class="n">commented_at</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(:</span><span class="n">post</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">created_post</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">feed_owner</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="n">newly_commented</span><span class="p">.</span><span class="n">post_time</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="kt">timestamp</span><span class="p">(</span><span class="s2">&#34;2010-01-01 00:00:00&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">friend</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">newly_created</span><span class="p">:</span><span class="n">created_post</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">po</span><span class="p">:</span><span class="n">post</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="n">newly_created</span><span class="p">.</span><span class="n">post_time</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="kt">timestamp</span><span class="p">(</span><span class="s2">&#34;2010-01-01 00:00:00&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="k">DISTINCT</span><span class="w"> </span><span class="n">friend</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nf">collect</span><span class="p">(</span><span class="k">DISTINCT</span><span class="w"> </span><span class="n">po</span><span class="p">.</span><span class="n">post</span><span class="p">.</span><span class="n">title</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nf">collect</span><span class="p">(</span><span class="s2">&#34;comment of &#34;</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nf">dst</span><span class="p">(</span><span class="n">newly_commented</span><span class="p">))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">AS</span><span class="w"> </span><span class="n">feeds</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">size</span><span class="p">(</span><span class="n">feeds</span><span class="p">)</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">friend</span><span class="p">.</span><span class="n">player</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">feeds</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><table>
<thead>
<tr>
<th style="text-align:left">friend.player.name</th>
<th style="text-align:left">feeds</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Marco Belinelli</td>
<td style="text-align:left">[&ldquo;my best friend, tom&rdquo;, &ldquo;comment of post11&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Tony Parker</td>
<td style="text-align:left">[&ldquo;I can swim&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Danny Green</td>
<td style="text-align:left">[&ldquo;comment of post1&rdquo;]</td>
</tr>
</tbody>
</table>
<p>这时候，从可视化这个结果也可以看到住址这一关系，以及它们的经纬度信息，我手动根据它们的经纬度，把地址的节点在图上排布了一下可以看到这个 feed 的主人 Tim(player100) 的住址（7，8）刚好在其他好友住址的中间位置，这些临近好友的相关的文章和参与评论的内容将被作为信息流推送给 Tim：</p>
<p><figure><a class="lightgallery" href="/nebulagraph-sns/geo_feed.webp" title="geo_feed" data-thumbnail="/nebulagraph-sns/geo_feed.webp">
        <img
            
            loading="lazy"
            src="/nebulagraph-sns/geo_feed.webp"
            srcset="/nebulagraph-sns/geo_feed.webp, /nebulagraph-sns/geo_feed.webp 1.5x, /nebulagraph-sns/geo_feed.webp 2x"
            sizes="auto"
            alt="geo_feed" height="2334"  width="4064" >
    </a></figure></p>
<h2 id="时空关系追踪" class="headerLink">
    <a href="#%e6%97%b6%e7%a9%ba%e5%85%b3%e7%b3%bb%e8%bf%bd%e8%b8%aa" class="header-mark"></a>9 时空关系追踪</h2><p>时空关系追踪这个图谱应用是在公共安全、物流、疫情防控等场景下，利用图遍历将繁杂、凌乱的信息充分利用起来的典型应用。当我们建立起这样的图谱之后往往只需要简单的图查询就可以获得非常有用的洞察。本章节我给大家距离一下这个应用场景。</p>
<h3 id="数据集" class="headerLink">
    <a href="#%e6%95%b0%e6%8d%ae%e9%9b%86" class="header-mark"></a>9.1 数据集</h3><p>为此，我创建了一个虚拟的数据集由来构建一个时空关系图谱。数据集的生成程序和一份可以直接用的文件都放在了 GitHub 上，仓库地址是： <a href="https://github.com/wey-gu/covid-track-graph-datagen" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/covid-track-graph-datagen</a> 。</p>
<p>它的数据建模如下：</p>
<img src="schema_covid.webp" alt="schema_covid" style="zoom:40%;" />
<p>在一个全新的环境里，我们可以用下边的 3 行命令就准备好这个图谱：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 安装 NebulaGraph + NebulaGraph Studio</span>
</span></span><span class="line"><span class="cl">curl -fsSL nebula-up.siwei.io/install.sh <span class="p">|</span> bash -s -- v3
</span></span><span class="line"><span class="cl"><span class="c1"># 下载数据集</span>
</span></span><span class="line"><span class="cl">git clone https://github.com/wey-gu/covid-track-graph-datagen <span class="o">&amp;&amp;</span> <span class="nb">cd</span> covid-track-graph-datagen
</span></span><span class="line"><span class="cl"><span class="c1"># 导入数据集</span>
</span></span><span class="line"><span class="cl">docker run --rm -ti <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --network<span class="o">=</span>nebula-net <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v <span class="si">${</span><span class="nv">PWD</span><span class="si">}</span>/:/root <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    vesoft/nebula-importer:v3.2.0 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --config /root/nebula-importer-config.yaml
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后我们在 console 里查看一下数据</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">~/.nebula-up/console.sh
</span></span><span class="line"><span class="cl"><span class="c1"># 进入 console 了，进到 covid_trace 图空间（刚才创建的）</span>
</span></span><span class="line"><span class="cl">USE covid_trace<span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 执行数据统计的任务</span>
</span></span><span class="line"><span class="cl">SHOW JOB STATS
</span></span></code></pre></td></tr></table>
</div>
</div><p>结果：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>root@nebula<span class="o">)</span> <span class="o">[</span>covid_trace<span class="o">]</span>&gt; SHOW STATS
</span></span><span class="line"><span class="cl">+---------+------------+--------+
</span></span><span class="line"><span class="cl"><span class="p">|</span> Type    <span class="p">|</span> Name       <span class="p">|</span> Count  <span class="p">|</span>
</span></span><span class="line"><span class="cl">+---------+------------+--------+
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Tag&#34;</span>   <span class="p">|</span> <span class="s2">&#34;人&#34;</span>       <span class="p">|</span> <span class="m">10000</span>  <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Tag&#34;</span>   <span class="p">|</span> <span class="s2">&#34;地址&#34;</span>     <span class="p">|</span> <span class="m">1000</span>   <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Tag&#34;</span>   <span class="p">|</span> <span class="s2">&#34;城市&#34;</span>     <span class="p">|</span> <span class="m">341</span>    <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Tag&#34;</span>   <span class="p">|</span> <span class="s2">&#34;村镇&#34;</span>     <span class="p">|</span> <span class="m">42950</span>  <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Tag&#34;</span>   <span class="p">|</span> <span class="s2">&#34;省份&#34;</span>     <span class="p">|</span> <span class="m">32</span>     <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Tag&#34;</span>   <span class="p">|</span> <span class="s2">&#34;联系方式&#34;</span> <span class="p">|</span> <span class="m">0</span>      <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Tag&#34;</span>   <span class="p">|</span> <span class="s2">&#34;行政区&#34;</span>   <span class="p">|</span> <span class="m">3134</span>   <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Tag&#34;</span>   <span class="p">|</span> <span class="s2">&#34;街道&#34;</span>     <span class="p">|</span> <span class="m">667911</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Edge&#34;</span>  <span class="p">|</span> <span class="s2">&#34;住址&#34;</span>     <span class="p">|</span> <span class="m">0</span>      <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Edge&#34;</span>  <span class="p">|</span> <span class="s2">&#34;到访&#34;</span>     <span class="p">|</span> <span class="m">19986</span>  <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Edge&#34;</span>  <span class="p">|</span> <span class="s2">&#34;同住&#34;</span>     <span class="p">|</span> <span class="m">19998</span>  <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Edge&#34;</span>  <span class="p">|</span> <span class="s2">&#34;属于&#34;</span>     <span class="p">|</span> <span class="m">715336</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Space&#34;</span> <span class="p">|</span> <span class="s2">&#34;vertices&#34;</span> <span class="p">|</span> <span class="m">725368</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Space&#34;</span> <span class="p">|</span> <span class="s2">&#34;edges&#34;</span>    <span class="p">|</span> <span class="m">755320</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl">+---------+------------+--------+
</span></span><span class="line"><span class="cl">Got <span class="m">14</span> rows <span class="o">(</span><span class="nb">time</span> spent 1087/46271 us<span class="o">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="两人之间的关联" class="headerLink">
    <a href="#%e4%b8%a4%e4%ba%ba%e4%b9%8b%e9%97%b4%e7%9a%84%e5%85%b3%e8%81%94" class="header-mark"></a>9.2 两人之间的关联</h3><p>很自然，利用路径查询就可以了：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># 最短
</span></span><span class="line"><span class="cl">FIND SHORTEST PATH FROM &#34;p_100&#34; TO &#34;p_101&#34; OVER * BIDIRECT YIELD PATH AS paths
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 所有路径
</span></span><span class="line"><span class="cl">FIND ALL PATH FROM &#34;p_100&#34; TO &#34;p_101&#34; OVER * BIDIRECT YIELD PATH AS paths | LIMIT 10
</span></span></code></pre></td></tr></table>
</div>
</div><p>最短路径结果：</p>
<table>
<thead>
<tr>
<th style="text-align:left">paths</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">&lt;(&ldquo;p_100&rdquo;)&lt;-[:同住@0 {}]-(&ldquo;p_2136&rdquo;)&lt;-[:同住@0 {}]-(&ldquo;p_3708&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_125&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_101&rdquo;)&gt;</td>
</tr>
</tbody>
</table>
<p>所有路径结果：</p>
<table>
<thead>
<tr>
<th style="text-align:left">paths</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">&lt;(&ldquo;p_100&rdquo;)&lt;-[:同住@0 {}]-(&ldquo;p_2136&rdquo;)&lt;-[:同住@0 {}]-(&ldquo;p_3708&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_125&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_101&rdquo;)&gt;</td>
</tr>
<tr>
<td style="text-align:left">&lt;(&ldquo;p_100&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_328&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_6976&rdquo;)&lt;-[:同住@0 {}]-(&ldquo;p_261&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_352&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_101&rdquo;)&gt;</td>
</tr>
<tr>
<td style="text-align:left">&lt;(&ldquo;p_100&rdquo;)-[:同住@0 {}]-&gt;(&ldquo;p_8709&rdquo;)-[:同住@0 {}]-&gt;(&ldquo;p_9315&rdquo;)-[:同住@0 {}]-&gt;(&ldquo;p_261&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_352&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_101&rdquo;)&gt;</td>
</tr>
<tr>
<td style="text-align:left">&lt;(&ldquo;p_100&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_328&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_6311&rdquo;)-[:同住@0 {}]-&gt;(&ldquo;p_3941&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_345&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_101&rdquo;)&gt;</td>
</tr>
<tr>
<td style="text-align:left">&lt;(&ldquo;p_100&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_328&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_5046&rdquo;)-[:同住@0 {}]-&gt;(&ldquo;p_3993&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_144&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_101&rdquo;)&gt;</td>
</tr>
<tr>
<td style="text-align:left">&lt;(&ldquo;p_100&rdquo;)-[:同住@0 {}]-&gt;(&ldquo;p_3457&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_199&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_6771&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_458&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_101&rdquo;)&gt;</td>
</tr>
<tr>
<td style="text-align:left">&lt;(&ldquo;p_100&rdquo;)&lt;-[:同住@0 {}]-(&ldquo;p_1462&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_922&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_5869&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_345&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_101&rdquo;)&gt;</td>
</tr>
<tr>
<td style="text-align:left">&lt;(&ldquo;p_100&rdquo;)&lt;-[:同住@0 {}]-(&ldquo;p_9489&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_985&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_2733&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_458&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_101&rdquo;)&gt;</td>
</tr>
<tr>
<td style="text-align:left">&lt;(&ldquo;p_100&rdquo;)&lt;-[:同住@0 {}]-(&ldquo;p_9489&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_905&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_2733&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_458&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_101&rdquo;)&gt;</td>
</tr>
<tr>
<td style="text-align:left">&lt;(&ldquo;p_100&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_89&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_1333&rdquo;)&lt;-[:同住@0 {}]-(&ldquo;p_1683&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_345&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_101&rdquo;)&gt;</td>
</tr>
</tbody>
</table>
<p>我们把所有路径进行可视化渲染，标记出起点终点的两人，并在其中查到他们的最短路径，他们之间的千丝万缕关系就一目了然了，无论是商业洞察、公共安全还是疫情防控的目的，有了这个信息，相应的工作都可以如虎添翼地向下进展。</p>
<p><figure><a class="lightgallery" href="/nebulagraph-sns/find_path_two_people.webp" title="find_path_two_people" data-thumbnail="/nebulagraph-sns/find_path_two_people.webp">
        <img
            
            loading="lazy"
            src="/nebulagraph-sns/find_path_two_people.webp"
            srcset="/nebulagraph-sns/find_path_two_people.webp, /nebulagraph-sns/find_path_two_people.webp 1.5x, /nebulagraph-sns/find_path_two_people.webp 2x"
            sizes="auto"
            alt="find_path_two_people" height="2334"  width="4064" >
    </a></figure></p>
<p>当然，在真实的系统上，可能我们只需要关心两个用户之间的关联远近，得出量化的评估：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">FIND SHORTEST PATH FROM &#34;p_100&#34; TO &#34;p_101&#34; OVER * BIDIRECT YIELD PATH AS paths |
</span></span><span class="line"><span class="cl">    YIELD collect(length($-.paths)) AS len | YIELD coalesce($-.len[0], -1) AS len
</span></span></code></pre></td></tr></table>
</div>
</div><p>结果中我们只关心他们之间最短路径的长度为：4。</p>
<table>
<thead>
<tr>
<th style="text-align:left">len</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">4</td>
</tr>
</tbody>
</table>
<h3 id="时空相交的人" class="headerLink">
    <a href="#%e6%97%b6%e7%a9%ba%e7%9b%b8%e4%ba%a4%e7%9a%84%e4%ba%ba" class="header-mark"></a>9.3 时空相交的人</h3><p>进一步我们可以用图语义勾勒出我们想确定的任何带有时间与空间信息的模式，在图谱中实时查询出来，比如对给定的人，他的 id 是 p_101，我们相差在特定时间里所有和他有时空相交的人，这意味着那些人在 p_101 访问某一地方的时间段之内也逗留、访问了这些地方：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">p</span><span class="p">:</span><span class="err">人</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="o">`</span><span class="n">visit0</span><span class="o">`</span><span class="p">:</span><span class="err">到访</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="o">`</span><span class="n">addr</span><span class="o">`</span><span class="p">:</span><span class="err">地址</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[</span><span class="o">`</span><span class="n">visit1</span><span class="o">`</span><span class="p">:</span><span class="err">到访</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">p1</span><span class="p">:</span><span class="err">人</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;p_101&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="o">`</span><span class="n">visit0</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">start_time</span><span class="o">`</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="o">`</span><span class="n">visit1</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">end_time</span><span class="o">`</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="o">`</span><span class="n">visit0</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">end_time</span><span class="o">`</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="o">`</span><span class="n">visit1</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">start_time</span><span class="o">`</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">RETURN</span><span class="w"> </span><span class="o">`</span><span class="n">addr</span><span class="o">`</span><span class="p">.</span><span class="err">地址</span><span class="p">.</span><span class="o">`</span><span class="n">name</span><span class="o">`</span><span class="p">,</span><span class="w"> </span><span class="nf">collect</span><span class="p">(</span><span class="n">p1</span><span class="p">.</span><span class="err">人</span><span class="p">.</span><span class="o">`</span><span class="n">name</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>我们得到了再每一个到访地点的时空相交人列表如下：</p>
<table>
<thead>
<tr>
<th style="text-align:left">addr.地址.name</th>
<th style="text-align:left">collect(p1.人.name)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">闵行仇路q座 255960</td>
<td style="text-align:left">[&ldquo;徐畅&rdquo;, &ldquo;王佳&rdquo;, &ldquo;曾亮&rdquo;, &ldquo;姜桂香&rdquo;, &ldquo;邵秀英&rdquo;, &ldquo;韦婷婷&rdquo;, &ldquo;陶玉&rdquo;, &ldquo;马坤&rdquo;, &ldquo;黄想&rdquo;, &ldquo;张秀芳&rdquo;, &ldquo;颜桂芳&rdquo;, &ldquo;张洋&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">丰都北京路J座 725701</td>
<td style="text-align:left">[&ldquo;陈春梅&rdquo;, &ldquo;施婷婷&rdquo;, &ldquo;井成&rdquo;, &ldquo;范文&rdquo;, &ldquo;王楠&rdquo;, &ldquo;尚明&rdquo;, &ldquo;薛秀珍&rdquo;, &ldquo;宋金凤&rdquo;, &ldquo;杨雪&rdquo;, &ldquo;邓丽华&rdquo;, &ldquo;李杨&rdquo;, &ldquo;温佳&rdquo;, &ldquo;叶玉&rdquo;, &ldquo;周明&rdquo;, &ldquo;王桂珍&rdquo;, &ldquo;段玉华&rdquo;, &ldquo;金成&rdquo;, &ldquo;黄鑫&rdquo;, &ldquo;邬兵&rdquo;, &ldquo;魏柳&rdquo;, &ldquo;王兰英&rdquo;, &ldquo;杨柳&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">普陀潜江路P座 210730</td>
<td style="text-align:left">[&ldquo;储平&rdquo;, &ldquo;洪红霞&rdquo;, &ldquo;沈玉英&rdquo;, &ldquo;王洁&rdquo;, &ldquo;董玉英&rdquo;, &ldquo;邓凤英&rdquo;, &ldquo;谢海燕&rdquo;, &ldquo;梁雷&rdquo;, &ldquo;张畅&rdquo;, &ldquo;任玉兰&rdquo;, &ldquo;贾宇&rdquo;, &ldquo;汪成&rdquo;, &ldquo;孙琴&rdquo;, &ldquo;纪红梅&rdquo;, &ldquo;王欣&rdquo;, &ldquo;陈兵&rdquo;, &ldquo;张成&rdquo;, &ldquo;王东&rdquo;, &ldquo;谷霞&rdquo;, &ldquo;林成&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">普陀武街f座 706352</td>
<td style="text-align:left">[&ldquo;邢成&rdquo;, &ldquo;张建军&rdquo;, &ldquo;张鑫&rdquo;, &ldquo;戴涛&rdquo;, &ldquo;蔡洋&rdquo;, &ldquo;汪燕&rdquo;, &ldquo;尹亮&rdquo;, &ldquo;何利&rdquo;, &ldquo;何玉&rdquo;, &ldquo;周波&rdquo;, &ldquo;金秀珍&rdquo;, &ldquo;杨波&rdquo;, &ldquo;张帅&rdquo;, &ldquo;周柳&rdquo;, &ldquo;马云&rdquo;, &ldquo;张建华&rdquo;, &ldquo;王丽丽&rdquo;, &ldquo;陈丽&rdquo;, &ldquo;万萍&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">城东贵阳街O座 110567</td>
<td style="text-align:left">[&ldquo;李洁&rdquo;, &ldquo;陈静&rdquo;, &ldquo;王建国&rdquo;, &ldquo;方淑华&rdquo;, &ldquo;古想&rdquo;, &ldquo;漆萍&rdquo;, &ldquo;詹桂花&rdquo;, &ldquo;王成&rdquo;, &ldquo;李慧&rdquo;, &ldquo;孙娜&rdquo;, &ldquo;马伟&rdquo;, &ldquo;谢杰&rdquo;, &ldquo;王鹏&rdquo;, &ldquo;鞠桂英&rdquo;, &ldquo;莫桂英&rdquo;, &ldquo;汪雷&rdquo;, &ldquo;黄彬&rdquo;, &ldquo;李玉梅&rdquo;, &ldquo;祝红梅&rdquo;]</td>
</tr>
</tbody>
</table>
<p>现在，我们在图上可视化这个结果看看：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">p</span><span class="p">:</span><span class="err">人</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="o">`</span><span class="n">visit0</span><span class="o">`</span><span class="p">:</span><span class="err">到访</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="o">`</span><span class="n">addr</span><span class="o">`</span><span class="p">:</span><span class="err">地址</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[</span><span class="o">`</span><span class="n">visit1</span><span class="o">`</span><span class="p">:</span><span class="err">到访</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">p1</span><span class="p">:</span><span class="err">人</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;p_101&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="o">`</span><span class="n">visit0</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">start_time</span><span class="o">`</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="o">`</span><span class="n">visit1</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">end_time</span><span class="o">`</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="o">`</span><span class="n">visit0</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">end_time</span><span class="o">`</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="o">`</span><span class="n">visit1</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">start_time</span><span class="o">`</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">RETURN</span><span class="w"> </span><span class="n">paths</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>结果中我们标记了 p_101 为不同的图标，在用标签传播算法识别一下聚集社区，是不是一图胜千言呢？</p>
<p><figure><a class="lightgallery" href="/nebulagraph-sns/time_and_space.webp" title="time_and_space" data-thumbnail="/nebulagraph-sns/time_and_space.webp">
        <img
            
            loading="lazy"
            src="/nebulagraph-sns/time_and_space.webp"
            srcset="/nebulagraph-sns/time_and_space.webp, /nebulagraph-sns/time_and_space.webp 1.5x, /nebulagraph-sns/time_and_space.webp 2x"
            sizes="auto"
            alt="time_and_space" height="2334"  width="4064" >
    </a></figure></p>
<h3 id="最近去过的省份" class="headerLink">
    <a href="#%e6%9c%80%e8%bf%91%e5%8e%bb%e8%bf%87%e7%9a%84%e7%9c%81%e4%bb%bd" class="header-mark"></a>9.4 最近去过的省份</h3><p>最后，我们再用简单的查询模式表达出一个人在给定时间内，比如从一个时间点开始，到访过的所有省份</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">p</span><span class="p">:</span><span class="err">人</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">visit</span><span class="p">:</span><span class="err">到访</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="o">`</span><span class="n">addr</span><span class="o">`</span><span class="p">:</span><span class="err">地址</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="err">属于</span><span class="o">*</span><span class="mi">5</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">province</span><span class="p">:</span><span class="err">省份</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;p_101&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">visit</span><span class="p">.</span><span class="n">start_time</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">1625469000</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">RETURN</span><span class="w"> </span><span class="n">province</span><span class="p">.</span><span class="err">省份</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="nf">collect</span><span class="p">(</span><span class="n">addr</span><span class="p">.</span><span class="err">地址</span><span class="p">.</span><span class="n">name</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>看起来他/她去过不少地方呢：</p>
<table>
<thead>
<tr>
<th style="text-align:left">province.省份.name</th>
<th style="text-align:left">collect(addr.地址.name)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">四川省</td>
<td style="text-align:left">[&ldquo;闵行仇路q座 255960&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">山东省</td>
<td style="text-align:left">[&ldquo;城东贵阳街O座 110567&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">云南省</td>
<td style="text-align:left">[&ldquo;丰都北京路J座 725701&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">福建省</td>
<td style="text-align:left">[&ldquo;普陀潜江路P座 210730&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">内蒙古自治区</td>
<td style="text-align:left">[&ldquo;普陀武街f座 706352&rdquo;]</td>
</tr>
</tbody>
</table>
<p>老轨迹，我们在图上看看这个结果吧，这次，我们选择 Dagre-LR 这个布局渲染，结果是不是非常清晰呢？</p>
<p><figure><a class="lightgallery" href="/nebulagraph-sns/visited_provinces.webp" title="visited_provinces" data-thumbnail="/nebulagraph-sns/visited_provinces.webp">
        <img
            
            loading="lazy"
            src="/nebulagraph-sns/visited_provinces.webp"
            srcset="/nebulagraph-sns/visited_provinces.webp, /nebulagraph-sns/visited_provinces.webp 1.5x, /nebulagraph-sns/visited_provinces.webp 2x"
            sizes="auto"
            alt="visited_provinces" height="2334"  width="4064" >
    </a></figure></p>
<h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>10 总结</h2><p>我们给出了不少社交网络里的应用案例，包括：</p>
<ul>
<li>查找关键的人</li>
<li>识别聚集的人群、社群</li>
<li>判定两个用户之间的亲密度</li>
<li>推荐新朋友</li>
<li>利用共同邻居精准推送重要内容</li>
<li>根据好友关系、地理位置推送信息流</li>
<li>利用时空关系图谱查询人与人之间关系、获取时空相交的人、访问过的省份</li>
</ul>
<p>社交网络作为天然的图结构，非常适合用图的技术来存储、查询、计算、分析与可视化去解决其上的各式各样的问题，NebulaGraph 的强大处理能力和可视化能力使得我们已知很多公司在使用它作为社交领域的图存储、计算层，这其中包括：网易游戏、微信、Line、Soul、快手和知乎等等很多行业领先的团队，希望大家通过本章能对社交领域的图技术应有有一个初步的认识。</p>
<blockquote>
<p>题图版权：by <a href="https://unsplash.com/photos/IBaVuZsJJTo" target="_blank" rel="noopener noreferrer">Ryoji</a></p>
</blockquote>]]></description>
</item><item>
    <title>chatGPT 加 NebulaGraph 预测 2022 世界杯冠军球队</title>
    <link>https://siwei.io/chatgpt-and-nebulagraph-predict-fifa-world-cup/</link>
    <pubDate>Tue, 06 Dec 2022 18:01:55 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/chatgpt-and-nebulagraph-predict-fifa-world-cup/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/chatgpt-and-nebulagraph-predict-fifa-world-cup/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>一次利用 chatGPT 给出数据抓取代码，借助 NebulaGraph 图数据库与图算法预测体育赛事的尝试。</p>
</blockquote>
<!--

> chatGPT and Nebulagraph Predict Fifa World Cup

[TOC]

-->
<h2 id="蹭热度" class="headerLink">
    <a href="#%e8%b9%ad%e7%83%ad%e5%ba%a6" class="header-mark"></a>1 蹭热度</h2><p>最近因为世界杯进行时，被这篇 <a href="https://cambridge-intelligence.com/fifa-world-cup-2022-prediction/" target="_blank" rel="noopener noreferrer">Cambridge Intelligence</a> 的文章启发（仅仅利用有限的信息量和条件，借助图算法的方法做合理的冠军预测），讨论到也可以试着用 NebulaGraph 玩玩冠军预测，还能顺道科普一波图库技术和图算法。</p>
<p>本来想着几个小时撸出来一个方案，被数据集的收集劝退了，我是是在懒得去 <a href="https://en.wikipedia.org/wiki/2022_FIFA_World_Cup_squads" target="_blank" rel="noopener noreferrer">wikepedia</a> 里抓取出来需要的数据，索性就按下放了几天。</p>
<p>同时，另一个热潮是最近 OpenAI 发布了 chatGPT 服务，它可以实现各种语言可是实现的复杂任务设计包括：</p>
<ul>
<li>随时帮你实现一段什么样的代码</li>
<li>模拟成任意一个 prompt 界面：shell、python、virtual machine、甚至你创造的语言</li>
<li>假设、带入你给定的人设，和你聊天</li>
<li>写诗歌、rap、散文</li>
<li>找出一段代码的 bug</li>
<li>解释一段复杂的正则表达式的含义</li>
</ul>
<p>chatGPT 的上下文能力、理解力到的前所未有的程度以至于所有人都在讨论新的工作方式：如何掌握让机器帮助我们完成任务。</p>
<p>所以，当我试过让 chatGPT 帮我写复杂的图数据库查询语句、解释复杂图查询语句的含义、解释一大段 <em>Bison</em> 代码含义之后我才意识到：为什么不让 chatGPT 帮我写好抓取数据的代码呢？</p>
<h2 id="抓取数据" class="headerLink">
    <a href="#%e6%8a%93%e5%8f%96%e6%95%b0%e6%8d%ae" class="header-mark"></a>2 抓取数据</h2><p>我真试了一下，结果是：完全可以，而且似乎真的很容易。</p>
<p>整个过程基本上我像是一个代码考试的面试官、或者是一个产品经理，提出我的需求，chatGPT 给出代码的实现。我们再试着跑起来代码，找到代码中不合理的地方，指出来、给出建议，chatGPT 就真的能理解我指出的点，并给出相应的修正，像是：</p>
<p><figure><a class="lightgallery" href="/chatgpt-and-nebulagraph-predict-fifa-world-cup/chatGPT-correction-process.webp" title="/chatgpt-and-nebulagraph-predict-fifa-world-cup/chatGPT-correction-process.webp" data-thumbnail="/chatgpt-and-nebulagraph-predict-fifa-world-cup/chatGPT-correction-process.webp">
        <img
            
            loading="lazy"
            src="/chatgpt-and-nebulagraph-predict-fifa-world-cup/chatGPT-correction-process.webp"
            srcset="/chatgpt-and-nebulagraph-predict-fifa-world-cup/chatGPT-correction-process.webp, /chatgpt-and-nebulagraph-predict-fifa-world-cup/chatGPT-correction-process.webp 1.5x, /chatgpt-and-nebulagraph-predict-fifa-world-cup/chatGPT-correction-process.webp 2x"
            sizes="auto"
            alt="/chatgpt-and-nebulagraph-predict-fifa-world-cup/chatGPT-correction-process.webp" height="1806"  width="1426" >
    </a></figure></p>
<p>这一全过程我就不在这里列出来了，不过我把生成的代码和整个讨论的过程都分享在<a href="https://gist.github.com/wey-gu/78cb28bee130966e7d6e9d573b51deff" target="_blank" rel="noopener noreferrer">这里</a>，感兴趣的同学可以去看看。</p>
<p>最终生成的数据是一个 CSV 文件：</p>
<ul>
<li>
<p>代码生成的文件 <a href="https://github.com/siwei-io/talks/files/10152775/world_cup_squads.csv" target="_blank" rel="noopener noreferrer">world_cup_squads.csv</a></p>
</li>
<li>
<p>手动修改、分开了生日和年龄的列 <a href="https://github.com/siwei-io/talks/files/10152923/world_cup_squads.csv" target="_blank" rel="noopener noreferrer">world_cup_squads_v0.csv</a></p>
<p>它像这样，包含的信息有：球队、小组、编号、位置、球员名字、生日、年龄、参加国际比赛场次、进球数、服役俱乐部。</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Team,Group,No.,Pos.,Player,DOB,Age,Caps,Goals,Club
</span></span><span class="line"><span class="cl">Ecuador,A,1,1GK,Hernán Galíndez,(1987-03-30)30 March 1987,35,12,0,Aucas
</span></span><span class="line"><span class="cl">Ecuador,A,2,2DF,Félix Torres,(1997-01-11)11 January 1997,25,17,2,Santos Laguna
</span></span><span class="line"><span class="cl">Ecuador,A,3,2DF,Piero Hincapié,(2002-01-09)9 January 2002,20,21,1,Bayer Leverkusen
</span></span><span class="line"><span class="cl">Ecuador,A,4,2DF,Robert Arboleda,(1991-10-22)22 October 1991,31,33,2,São Paulo
</span></span><span class="line"><span class="cl">Ecuador,A,5,3MF,José Cifuentes,(1999-03-12)12 March 1999,23,11,0,Los Angeles FC
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>手动删除了 CSV 表头 <a href="https://github.com/siwei-io/talks/files/10152974/world_cup_squads_no_headers.csv" target="_blank" rel="noopener noreferrer">world_cup_squads_no_headers.csv</a></li>
</ul>
<h2 id="图方法预测2022世界杯" class="headerLink">
    <a href="#%e5%9b%be%e6%96%b9%e6%b3%95%e9%a2%84%e6%b5%8b2022%e4%b8%96%e7%95%8c%e6%9d%af" class="header-mark"></a>3 图方法预测2022世界杯</h2><h3 id="图建模" class="headerLink">
    <a href="#%e5%9b%be%e5%bb%ba%e6%a8%a1" class="header-mark"></a>3.1 图建模</h3><blockquote>
<p>前提，本文使用 NebulaGraph 和 NebulaGraph Explorer，你可以在阿里云上免费申请半个月的试用，入口链接是👉🏻 <a href="http://c.nxw.so/d52oz" target="_blank" rel="noopener noreferrer">http://c.nxw.so/d52oz</a> ，不要被这个陌生的短链接域名吓到，它只是帮助我们统计有多少同学通过这里访问到 <a href="https://market.aliyun.com" target="_blank" rel="noopener noreferrer">https://market.aliyun.com</a> 而已。</p>
</blockquote>
<p>图建模（Graph Modeling）是把真实世界信息以”点&ndash;&gt;边“的图形式去抽象与表示。</p>
<p>这里，我们根据公共领域能够容易获得信息、把它映射成如下的点与边：</p>
<p>点：</p>
<ul>
<li>player（球员）</li>
<li>team（球队）</li>
<li>group（小组）</li>
<li>club（俱乐部）</li>
</ul>
<p>边：</p>
<ul>
<li>groupedin（球队属于哪一小组）</li>
<li>belongto（队员属于国家队）</li>
<li>serve（队员在俱乐部服役）</li>
</ul>
<p>而队员的年龄、参加国际场次（caps）、进球数（goals）则很自然作为 player 这一类点的属性。</p>
<p>下图是这个 schema 在 NebulaGraph Studio/Explorer（后边称 Studio/Explorer） 中的截图：</p>
<p><figure><a class="lightgallery" href="/chatgpt-and-nebulagraph-predict-fifa-world-cup/schema_fifa.webp" title="schema_fifa" data-thumbnail="/chatgpt-and-nebulagraph-predict-fifa-world-cup/schema_fifa.webp">
        <img
            
            loading="lazy"
            src="/chatgpt-and-nebulagraph-predict-fifa-world-cup/schema_fifa.webp"
            srcset="/chatgpt-and-nebulagraph-predict-fifa-world-cup/schema_fifa.webp, /chatgpt-and-nebulagraph-predict-fifa-world-cup/schema_fifa.webp 1.5x, /chatgpt-and-nebulagraph-predict-fifa-world-cup/schema_fifa.webp 2x"
            sizes="auto"
            alt="schema_fifa" height="2334"  width="4064" >
    </a></figure></p>
<p>然后，我们可以在右上角把它保存，创建一个新的图空间，应用这个图建模到图空间里。</p>
<blockquote>
<p>注：参考文档 <a href="https://docs.nebula-graph.com.cn/3.3.0/nebula-explorer/db-management/draft/" target="_blank" rel="noopener noreferrer">https://docs.nebula-graph.com.cn/3.3.0/nebula-explorer/db-management/draft/</a></p>
</blockquote>
<h3 id="导入数据进-nebulagraph" class="headerLink">
    <a href="#%e5%af%bc%e5%85%a5%e6%95%b0%e6%8d%ae%e8%bf%9b-nebulagraph" class="header-mark"></a>3.2 导入数据进 NebulaGraph</h3><p>有了图建模，我们可以把之前的 CSV 文件（无表头版本）上传到 Studio 或者 Explorer 里，通过点、选关联不同的列到点边中的 vid 和属性：</p>
<p><figure><a class="lightgallery" href="/chatgpt-and-nebulagraph-predict-fifa-world-cup/importer_config_mapping.webp" title="/chatgpt-and-nebulagraph-predict-fifa-world-cup/importer_config_mapping.webp" data-thumbnail="/chatgpt-and-nebulagraph-predict-fifa-world-cup/importer_config_mapping.webp">
        <img
            
            loading="lazy"
            src="/chatgpt-and-nebulagraph-predict-fifa-world-cup/importer_config_mapping.webp"
            srcset="/chatgpt-and-nebulagraph-predict-fifa-world-cup/importer_config_mapping.webp, /chatgpt-and-nebulagraph-predict-fifa-world-cup/importer_config_mapping.webp 1.5x, /chatgpt-and-nebulagraph-predict-fifa-world-cup/importer_config_mapping.webp 2x"
            sizes="auto"
            alt="/chatgpt-and-nebulagraph-predict-fifa-world-cup/importer_config_mapping.webp" height="2334"  width="4064" >
    </a></figure></p>
<p>之后点击导入，就把整个图导入到 NebulaGraph 了，成功之后，我们还得到了整个csv &ndash;&gt; Nebula Importer 的关联配置文件：<a href="https://github.com/siwei-io/talks/files/10164014/config_fifa.yml.txt" target="_blank" rel="noopener noreferrer">nebula_importer_config_fifa.yml</a>，你可以直接拖拽整个配置，不用自己去配置它了。</p>
<p><figure><a class="lightgallery" href="/chatgpt-and-nebulagraph-predict-fifa-world-cup/importer_log.webp" title="/chatgpt-and-nebulagraph-predict-fifa-world-cup/importer_log.webp" data-thumbnail="/chatgpt-and-nebulagraph-predict-fifa-world-cup/importer_log.webp">
        <img
            
            loading="lazy"
            src="/chatgpt-and-nebulagraph-predict-fifa-world-cup/importer_log.webp"
            srcset="/chatgpt-and-nebulagraph-predict-fifa-world-cup/importer_log.webp, /chatgpt-and-nebulagraph-predict-fifa-world-cup/importer_log.webp 1.5x, /chatgpt-and-nebulagraph-predict-fifa-world-cup/importer_log.webp 2x"
            sizes="auto"
            alt="/chatgpt-and-nebulagraph-predict-fifa-world-cup/importer_log.webp" height="2334"  width="4064" >
    </a></figure></p>
<blockquote>
<p>注：参考文档 <a href="https://docs.nebula-graph.com.cn/3.3.0/nebula-explorer/db-management/11.import-data/" target="_blank" rel="noopener noreferrer">https://docs.nebula-graph.com.cn/3.3.0/nebula-explorer/db-management/11.import-data/</a></p>
</blockquote>
<p>导入之后，我们可以在 schema 界面里查看数据统计，我们可以看到有 831 名球员参加了 2022 卡塔尔世界杯，他们服役在 295 个不同的俱乐部：</p>
<p><figure><a class="lightgallery" href="/chatgpt-and-nebulagraph-predict-fifa-world-cup/data_stats.webp" title="/chatgpt-and-nebulagraph-predict-fifa-world-cup/data_stats.webp" data-thumbnail="/chatgpt-and-nebulagraph-predict-fifa-world-cup/data_stats.webp">
        <img
            
            loading="lazy"
            src="/chatgpt-and-nebulagraph-predict-fifa-world-cup/data_stats.webp"
            srcset="/chatgpt-and-nebulagraph-predict-fifa-world-cup/data_stats.webp, /chatgpt-and-nebulagraph-predict-fifa-world-cup/data_stats.webp 1.5x, /chatgpt-and-nebulagraph-predict-fifa-world-cup/data_stats.webp 2x"
            sizes="auto"
            alt="/chatgpt-and-nebulagraph-predict-fifa-world-cup/data_stats.webp" height="2334"  width="4064" >
    </a></figure></p>
<blockquote>
<p>注：参考文档 <a href="https://docs.nebula-graph.com.cn/3.3.0/nebula-explorer/db-management/10.create-schema/#_6" target="_blank" rel="noopener noreferrer">https://docs.nebula-graph.com.cn/3.3.0/nebula-explorer/db-management/10.create-schema/#_6</a></p>
</blockquote>
<h3 id="探索数据" class="headerLink">
    <a href="#%e6%8e%a2%e7%b4%a2%e6%95%b0%e6%8d%ae" class="header-mark"></a>3.3 探索数据</h3><h4 id="查询数据" class="headerLink">
    <a href="#%e6%9f%a5%e8%af%a2%e6%95%b0%e6%8d%ae" class="header-mark"></a>3.3.1 查询数据</h4><p>下面，我们试着把所有的数据展示出来看看吧，首先，借助 NebulaGraph Explorer，我用拖拽的方式画出来任意类型的点（TAG）和任意类型点（TAG）之间的边，这里我们知道所有的点都是至少包含在一个边里的，所以不会漏掉任何孤立的点。</p>
<p><figure><a class="lightgallery" href="/chatgpt-and-nebulagraph-predict-fifa-world-cup/query-builder-0.webp" title="/chatgpt-and-nebulagraph-predict-fifa-world-cup/query-builder-0.webp" data-thumbnail="/chatgpt-and-nebulagraph-predict-fifa-world-cup/query-builder-0.webp">
        <img
            
            loading="lazy"
            src="/chatgpt-and-nebulagraph-predict-fifa-world-cup/query-builder-0.webp"
            srcset="/chatgpt-and-nebulagraph-predict-fifa-world-cup/query-builder-0.webp, /chatgpt-and-nebulagraph-predict-fifa-world-cup/query-builder-0.webp 1.5x, /chatgpt-and-nebulagraph-predict-fifa-world-cup/query-builder-0.webp 2x"
            sizes="auto"
            alt="/chatgpt-and-nebulagraph-predict-fifa-world-cup/query-builder-0.webp" height="2146"  width="3320" >
    </a></figure></p>
<p>让它帮我生成查询的语句，这里，它默认 LIMIT 100 了，我们手动改大一些（ LIMIT 10000），让它在 Console 里执行。</p>
<p><figure><a class="lightgallery" href="/chatgpt-and-nebulagraph-predict-fifa-world-cup/query-builder-1.webp" title="/chatgpt-and-nebulagraph-predict-fifa-world-cup/query-builder-1.webp" data-thumbnail="/chatgpt-and-nebulagraph-predict-fifa-world-cup/query-builder-1.webp">
        <img
            
            loading="lazy"
            src="/chatgpt-and-nebulagraph-predict-fifa-world-cup/query-builder-1.webp"
            srcset="/chatgpt-and-nebulagraph-predict-fifa-world-cup/query-builder-1.webp, /chatgpt-and-nebulagraph-predict-fifa-world-cup/query-builder-1.webp 1.5x, /chatgpt-and-nebulagraph-predict-fifa-world-cup/query-builder-1.webp 2x"
            sizes="auto"
            alt="/chatgpt-and-nebulagraph-predict-fifa-world-cup/query-builder-1.webp" height="2146"  width="3320" >
    </a></figure></p>
<h4 id="初步观察数据" class="headerLink">
    <a href="#%e5%88%9d%e6%ad%a5%e8%a7%82%e5%af%9f%e6%95%b0%e6%8d%ae" class="header-mark"></a>3.3.2 初步观察数据</h4><p>结果渲染出来是这样子，可以看到它天然形成了一簇一簇的模式。</p>
<p><figure><a class="lightgallery" href="/chatgpt-and-nebulagraph-predict-fifa-world-cup/bird_view.webp" title="/chatgpt-and-nebulagraph-predict-fifa-world-cup/bird_view.webp" data-thumbnail="/chatgpt-and-nebulagraph-predict-fifa-world-cup/bird_view.webp">
        <img
            
            loading="lazy"
            src="/chatgpt-and-nebulagraph-predict-fifa-world-cup/bird_view.webp"
            srcset="/chatgpt-and-nebulagraph-predict-fifa-world-cup/bird_view.webp, /chatgpt-and-nebulagraph-predict-fifa-world-cup/bird_view.webp 1.5x, /chatgpt-and-nebulagraph-predict-fifa-world-cup/bird_view.webp 2x"
            sizes="auto"
            alt="/chatgpt-and-nebulagraph-predict-fifa-world-cup/bird_view.webp" height="2334"  width="4064" >
    </a></figure></p>
<p>这些外围、形成的簇多是一些由非传统意义上的有全球影响力的俱乐部，和非传统的足球厉害的国家队的球员组成，因为通常这些俱乐部只有一两个球员，而且他们还集中在一个国家队、地区，所以没有和很多其他球员、国家队产生连接。</p>
<p><figure><a class="lightgallery" href="/chatgpt-and-nebulagraph-predict-fifa-world-cup/edge_teams.webp" title="/chatgpt-and-nebulagraph-predict-fifa-world-cup/edge_teams.webp" data-thumbnail="/chatgpt-and-nebulagraph-predict-fifa-world-cup/edge_teams.webp">
        <img
            
            loading="lazy"
            src="/chatgpt-and-nebulagraph-predict-fifa-world-cup/edge_teams.webp"
            srcset="/chatgpt-and-nebulagraph-predict-fifa-world-cup/edge_teams.webp, /chatgpt-and-nebulagraph-predict-fifa-world-cup/edge_teams.webp 1.5x, /chatgpt-and-nebulagraph-predict-fifa-world-cup/edge_teams.webp 2x"
            sizes="auto"
            alt="/chatgpt-and-nebulagraph-predict-fifa-world-cup/edge_teams.webp" height="1268"  width="1576" >
    </a></figure></p>
<h4 id="图算法辅助分析" class="headerLink">
    <a href="#%e5%9b%be%e7%ae%97%e6%b3%95%e8%be%85%e5%8a%a9%e5%88%86%e6%9e%90" class="header-mark"></a>3.3.3 图算法辅助分析</h4><p>在我点击了 Explorer 中的两个按钮之后（详细参考后边的文档链接），在浏览器里，我们可以看到整个图已经变成：</p>
<p><figure><a class="lightgallery" href="/chatgpt-and-nebulagraph-predict-fifa-world-cup/Barcelona.webp" title="/chatgpt-and-nebulagraph-predict-fifa-world-cup/Barcelona.webp" data-thumbnail="/chatgpt-and-nebulagraph-predict-fifa-world-cup/Barcelona.webp">
        <img
            
            loading="lazy"
            src="/chatgpt-and-nebulagraph-predict-fifa-world-cup/Barcelona.webp"
            srcset="/chatgpt-and-nebulagraph-predict-fifa-world-cup/Barcelona.webp, /chatgpt-and-nebulagraph-predict-fifa-world-cup/Barcelona.webp 1.5x, /chatgpt-and-nebulagraph-predict-fifa-world-cup/Barcelona.webp 2x"
            sizes="auto"
            alt="/chatgpt-and-nebulagraph-predict-fifa-world-cup/Barcelona.webp" height="2334"  width="4064" >
    </a></figure></p>
<blockquote>
<p>注：这部分功能可以参考文档 <a href="https://docs.nebula-graph.com.cn/3.3.0/nebula-explorer/graph-explorer/graph-algorithm/" target="_blank" rel="noopener noreferrer">https://docs.nebula-graph.com.cn/3.3.0/nebula-explorer/graph-explorer/graph-algorithm/</a></p>
</blockquote>
<p>这里，利用到了两个图算法来分析这里的洞察：</p>
<ol>
<li>利用点的出入度，改变他们的显示大小突出重要程度</li>
<li>利用 Louvain 算法区分点的社区分割</li>
</ol>
<p>可以看到红色的大点是鼎鼎大名的巴塞罗那，而它的球员们也被红色标记了。</p>
<h3 id="预测冠军算法" class="headerLink">
    <a href="#%e9%a2%84%e6%b5%8b%e5%86%a0%e5%86%9b%e7%ae%97%e6%b3%95" class="header-mark"></a>3.4 预测冠军算法</h3><p>为了能充分利用图的魔法（与图上的隐含条件、信息），我的思路是选择一种利用链接进行节点重要程度分析的图算法，找出拥有更高重要性的点，对他们全局迭代、排序，从而获得前几名的国家队排名。</p>
<p>这些方法其实就体现在厉害的球员同时拥有更大的社区、连接度，同时，为了增加传统强队之间的区分度，我准备把出场率、进球数的信息也考虑进来。</p>
<p>最终，我的算法是：</p>
<ul>
<li>取出所有的 (球员)-服役-&gt;(俱乐部) 的关系，过滤其中进球数过少、单场进球过少的球员（以平衡一些弱队的老球员带来的过大影响）</li>
<li>从所有过滤之后的球员中向外探索，获得国家队</li>
<li>在以上的子图上运行 Betweenness Centrality 算法，计算节点重要度评分</li>
</ul>
<h4 id="算法过程" class="headerLink">
    <a href="#%e7%ae%97%e6%b3%95%e8%bf%87%e7%a8%8b" class="header-mark"></a>3.4.1 算法过程</h4><p>首先，我们取出所有进球数超过 10，场均进球超过 0.2 的 (球员)-服役-&gt;(俱乐部) 的子图：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">MATCH ()-[e]-&gt;()
</span></span><span class="line"><span class="cl">WITH e LIMIT 10000
</span></span><span class="line"><span class="cl">WITH e AS e WHERE e.goals &gt; 10 AND toFloat(e.goals)/e.caps &gt; 0.2
</span></span><span class="line"><span class="cl">RETURN e
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>注：为了方便，我把进球数和出场数也作为了 serve 边上的属性了。</p>
</blockquote>
<p><figure><a class="lightgallery" href="/chatgpt-and-nebulagraph-predict-fifa-world-cup/query_step0.webp" title="/chatgpt-and-nebulagraph-predict-fifa-world-cup/query_step0.webp" data-thumbnail="/chatgpt-and-nebulagraph-predict-fifa-world-cup/query_step0.webp">
        <img
            
            loading="lazy"
            src="/chatgpt-and-nebulagraph-predict-fifa-world-cup/query_step0.webp"
            srcset="/chatgpt-and-nebulagraph-predict-fifa-world-cup/query_step0.webp, /chatgpt-and-nebulagraph-predict-fifa-world-cup/query_step0.webp 1.5x, /chatgpt-and-nebulagraph-predict-fifa-world-cup/query_step0.webp 2x"
            sizes="auto"
            alt="/chatgpt-and-nebulagraph-predict-fifa-world-cup/query_step0.webp" height="2334"  width="4064" >
    </a></figure></p>
<p>然后，我们全选图上的所有点，点击左边的工具栏，选择出方向的 <code>belongto</code> 边，向外进行图拓展（遍历），同时选择将拓展得到的新点标记为旗帜的 icon：</p>
<p><figure><a class="lightgallery" href="/chatgpt-and-nebulagraph-predict-fifa-world-cup/treversal_step1.webp" title="treversal_step1" data-thumbnail="/chatgpt-and-nebulagraph-predict-fifa-world-cup/treversal_step1.webp">
        <img
            
            loading="lazy"
            src="/chatgpt-and-nebulagraph-predict-fifa-world-cup/treversal_step1.webp"
            srcset="/chatgpt-and-nebulagraph-predict-fifa-world-cup/treversal_step1.webp, /chatgpt-and-nebulagraph-predict-fifa-world-cup/treversal_step1.webp 1.5x, /chatgpt-and-nebulagraph-predict-fifa-world-cup/treversal_step1.webp 2x"
            sizes="auto"
            alt="treversal_step1" height="2334"  width="4064" >
    </a></figure></p>
<p>现在，我们获得了最终的子图，我们利用工具栏里的浏览器内的图算法功能，执行 BNC（Betweenness Centrality）</p>
<p><figure><a class="lightgallery" href="/chatgpt-and-nebulagraph-predict-fifa-world-cup/bnc_step2.webp" title="bnc_step2" data-thumbnail="/chatgpt-and-nebulagraph-predict-fifa-world-cup/bnc_step2.webp">
        <img
            
            loading="lazy"
            src="/chatgpt-and-nebulagraph-predict-fifa-world-cup/bnc_step2.webp"
            srcset="/chatgpt-and-nebulagraph-predict-fifa-world-cup/bnc_step2.webp, /chatgpt-and-nebulagraph-predict-fifa-world-cup/bnc_step2.webp 1.5x, /chatgpt-and-nebulagraph-predict-fifa-world-cup/bnc_step2.webp 2x"
            sizes="auto"
            alt="bnc_step2" height="2334"  width="4064" >
    </a></figure></p>
<p>然后，这个子图变成了这样子：</p>
<p><figure><a class="lightgallery" href="/chatgpt-and-nebulagraph-predict-fifa-world-cup/bnc_predict.webp" title="bnc_predict" data-thumbnail="/chatgpt-and-nebulagraph-predict-fifa-world-cup/bnc_predict.webp">
        <img
            
            loading="lazy"
            src="/chatgpt-and-nebulagraph-predict-fifa-world-cup/bnc_predict.webp"
            srcset="/chatgpt-and-nebulagraph-predict-fifa-world-cup/bnc_predict.webp, /chatgpt-and-nebulagraph-predict-fifa-world-cup/bnc_predict.webp 1.5x, /chatgpt-and-nebulagraph-predict-fifa-world-cup/bnc_predict.webp 2x"
            sizes="auto"
            alt="bnc_predict" height="2334"  width="4064" >
    </a></figure></p>
<h2 id="预测结果" class="headerLink">
    <a href="#%e9%a2%84%e6%b5%8b%e7%bb%93%e6%9e%9c" class="header-mark"></a>4 预测结果</h2><p>最终，我们根据 Betweenness Centrality 的值，排序，可以得到最终的获胜球队应该是：巴西 🇧🇷！</p>
<p>其次是比利时、德国、英格兰、法国、阿根廷，让我们等两个礼拜回来看看预测结果是否准确吧 :D。</p>
<p>注：排序数据（其中还有非参赛球队的点）</p>
<table>
<thead>
<tr>
<th>Vertex</th>
<th><strong>Betweenness Centrality</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Brazil</strong>🇧🇷</td>
<td>3499</td>
</tr>
<tr>
<td><strong>Paris Saint-Germain</strong></td>
<td>3073.3333333333300</td>
</tr>
<tr>
<td><strong>Neymar</strong></td>
<td>3000</td>
</tr>
<tr>
<td><strong>Tottenham Hotspur</strong></td>
<td>2740</td>
</tr>
<tr>
<td><strong>Belgium</strong>🇧🇪</td>
<td>2587.833333333330</td>
</tr>
<tr>
<td><strong>Richarlison</strong></td>
<td>2541</td>
</tr>
<tr>
<td><strong>Kevin De Bruyne</strong></td>
<td>2184</td>
</tr>
<tr>
<td><strong>Manchester City</strong></td>
<td>2125</td>
</tr>
<tr>
<td><strong>İlkay Gündoğan</strong></td>
<td>2064</td>
</tr>
<tr>
<td><strong>Germany</strong>🇩🇪</td>
<td>2046</td>
</tr>
<tr>
<td><strong>Harry Kane (captain</strong></td>
<td>1869</td>
</tr>
<tr>
<td><strong>England</strong>🏴󠁧󠁢󠁥󠁮󠁧󠁿</td>
<td>1864</td>
</tr>
<tr>
<td><strong>France</strong>🇫🇷</td>
<td>1858.6666666666700</td>
</tr>
<tr>
<td><strong>Argentina</strong>🇦🇷</td>
<td>1834.6666666666700</td>
</tr>
<tr>
<td><strong>Bayern Munich</strong></td>
<td>1567</td>
</tr>
<tr>
<td><strong>Kylian Mbappé</strong></td>
<td>1535.3333333333300</td>
</tr>
<tr>
<td><strong>Lionel Messi (captain</strong></td>
<td>1535.3333333333300</td>
</tr>
<tr>
<td><strong>Gabriel Jesus</strong></td>
<td>1344</td>
</tr>
</tbody>
</table>
<blockquote>
<p>题图：这个文章的图也是用 OpenAI DALL-E 2 生成，并用 DALL-E 2 Outpainting 扩充的，<a href="https://user-images.githubusercontent.com/1651790/205881462-ff007725-e270-4b1e-9062-7702f01021c1.png" target="_blank" rel="noopener noreferrer">原图</a>。</p>
</blockquote>]]></description>
</item><item>
    <title>基于开源技术栈的数据血缘、治理参考解决方案</title>
    <link>https://siwei.io/data-lineage-oss-ref-solution/</link>
    <pubDate>Fri, 25 Nov 2022 16:20:43 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/data-lineage-oss-ref-solution/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/data-lineage-oss-ref-solution/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>也许我们没有必要从头在 NebulaGraph 上搭建自己的数据血缘项目，本文分享如何用开源、现代的 DataOps、ETL、Dashboard、元数据、数据血缘管理系统构建大数据治理基础设施</p>
</blockquote>
<h2 id="元数据治理系统" class="headerLink">
    <a href="#%e5%85%83%e6%95%b0%e6%8d%ae%e6%b2%bb%e7%90%86%e7%b3%bb%e7%bb%9f" class="header-mark"></a>1 元数据治理系统</h2><p><strong>元数据治理</strong>系统是一个提供了所有数据在哪、它们的格式化方式、生成、转换、依赖、呈现和所属的<strong>一站式视图</strong>。</p>
<p>元数据治理系统是所有数据仓库、数据库、表、仪表板、ETL 作业等的<strong>目录接口</strong>（catalog），有了它，我们就不用在群里喊“大家好，我可以更改这个表的 schema 吗？”， “请问谁知道我如何找到 table-view-foo-bar 的原始数据？”，一个成熟的数据治理方案中的元数据治理系统，对成规模的数据团队来说非常必要。</p>
<p>对于另一个词：<strong>数据血缘</strong>则是众多需要管理的元数据之一，例如，某些 Dashboard 是 某一个 Table View 的下游，而这个 Table View 又是从另外两个上游的表 JOIN 而来两。 我们显然应该清晰的掌握、管理这些信息，去构建一个可信、可控的系统和数据质量控制体系。</p>
<h2 id="参考解决方案" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88" class="header-mark"></a>2 参考解决方案</h2><h3 id="方案的动机" class="headerLink">
    <a href="#%e6%96%b9%e6%a1%88%e7%9a%84%e5%8a%a8%e6%9c%ba" class="header-mark"></a>2.1 方案的动机</h3><p>元数据和数据血缘本质上非常适合图数据建模、图数据库的场景。这里典型的查询就是面向图关系的查询了，像“查找每个给定组件（即表）的所有 n 深度数据血缘”就是一个 NebulaGraph 中的<code>FIND ALL PATH</code> 查询。</p>
<p>作为 NebulaGraph 社区中的一员，我发现人们在论坛、群里讨论的查询和图建模总能看出来很多人都在 NebulaGraph 上从头搭建自己的数据血缘系统，而这些工作看起来大多数都是重复造轮子（而且轮子并不容易造）。</p>
<p>我们来看看这样的元数据治理系统的轮子里，都需要那些功能组件：</p>
<ul>
<li>元数据 extractor
<ul>
<li>这部分需要从数据栈的不同方（如数据库、数仓、Dashboard，甚至从 ETL Pipeline 和应用、服务等等）中以拉或者推的方式获取。</li>
</ul>
</li>
<li>元数据存储
<ul>
<li>可以存在数据库、图数据库里，或者有时候存成超大的 JSON manifest 文件都行</li>
</ul>
</li>
<li>元数据目录接口系统（Catalog）
<ul>
<li>提供 API 和/或 GUI 界面以读取/写入元数据和数据血缘的系统</li>
</ul>
</li>
</ul>
<p>在 NebulaGraph 社区中，我看到不少人因为提问的查询和建模中明显有数据血缘的痕迹，意识到大家都在从头搭建数据血缘系统。考虑到系统中元数据的提取对象都是从各种知名数据库、数仓、最终的需求也大相径庭，这种重复的开发、研究、探索是一种大大的浪费。</p>
<p>所以，我准备搭建一个能够启发大家的参考数据血缘、治理方案，利用到市面上最好的开源项目。希望能让打算在 NebulaGraph 上定义和迭代自己的 Graph Model 并创建内部元数据和 pipeline 的人可以从这个项目中受益，从而拥有一个相对完善、设计精美的开箱即用的元数据治理系统，和相对更完善的图模型。</p>
<p>我尽量把这个方案做的完备、端到端（不只有元数据管理），希望也能为考虑做基于图做数据治理的新手一些启发和参考。</p>
<p>下图是整个方案的简单示意图：</p>
<p>其中上方是元数据的来源与导入、下方是元数据的存储与展示、发现。</p>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168849779-4826f50e-ff87-4e78-b17f-076f91182c43.svg" title="diagram-of-ref-project" data-thumbnail="https://user-images.githubusercontent.com/1651790/168849779-4826f50e-ff87-4e78-b17f-076f91182c43.svg">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/168849779-4826f50e-ff87-4e78-b17f-076f91182c43.svg"
            srcset="https://user-images.githubusercontent.com/1651790/168849779-4826f50e-ff87-4e78-b17f-076f91182c43.svg, https://user-images.githubusercontent.com/1651790/168849779-4826f50e-ff87-4e78-b17f-076f91182c43.svg 1.5x, https://user-images.githubusercontent.com/1651790/168849779-4826f50e-ff87-4e78-b17f-076f91182c43.svg 2x"
            sizes="auto"
            alt="diagram-of-ref-project">
    </a></figure></p>
<h3 id="技术栈介绍" class="headerLink">
    <a href="#%e6%8a%80%e6%9c%af%e6%a0%88%e4%bb%8b%e7%bb%8d" class="header-mark"></a>2.2 技术栈介绍</h3><p>下边介绍一下其中的每一部分。</p>
<h4 id="数据库和数仓" class="headerLink">
    <a href="#%e6%95%b0%e6%8d%ae%e5%ba%93%e5%92%8c%e6%95%b0%e4%bb%93" class="header-mark"></a>2.2.1 数据库和数仓</h4><p>为了处理和使用原始和中间数据，这里一定涉及至少一个数据库或者数仓。</p>
<p>它可以是 Hive、Apache Delta、TiDB、Cassandra、MySQL 或 Postgres，在这个参考项目中，我们选一个简单、流行的 Postgres。</p>
<p>✅ - 数据仓库：Postgres</p>
<h4 id="数据运维-dataops" class="headerLink">
    <a href="#%e6%95%b0%e6%8d%ae%e8%bf%90%e7%bb%b4-dataops" class="header-mark"></a>2.2.2 数据运维 DataOps</h4><p>我们应该有某种 DataOps 的方案，让 Pipeline 和环境具有可重复性、可测试性和版本控制性。</p>
<p>在这里，我们使用了 GitLab 创建的 <a href="https://gitlab.com/meltano/meltano" target="_blank" rel="noopener noreferrer">Meltano</a>。</p>
<p>Meltano 是一个 just-work 的 DataOps 平台，它以一种神奇而优雅的方式将 <a href="https://singer.io/" target="_blank" rel="noopener noreferrer">Singer</a> 作为 EL 和 <a href="https://getdbt.com/" target="_blank" rel="noopener noreferrer">dbt</a> 作为 T 连接起来，它还连接到其他一些 dataInfra 实用程序，例如 Apache Superset 和 Apache Airflow 等。</p>
<p>至此，我们又纳入了一个成员：</p>
<p>✅ - GitOps：Meltano <a href="https://gitlab.com/meltano/meltano" target="_blank" rel="noopener noreferrer">https://gitlab.com/meltano/meltano</a></p>
<h4 id="etl" class="headerLink">
    <a href="#etl" class="header-mark"></a>2.2.3 ETL</h4><p>如前边提到，我们还利用 <a href="https://singer.io/" target="_blank" rel="noopener noreferrer">Singer</a> 与 Meltano 一起将来自许多不同数据源的数据 E（提取）和 L（加载）数据目标，并使用 <a href="https://getdbt.com/" target="_blank" rel="noopener noreferrer">dbt</a> 作为 Transform 的平台。</p>
<p>✅ - EL：Singer <a href="https://singer.io/" target="_blank" rel="noopener noreferrer">https://singer.io/</a></p>
<p>✅ - T: dbt <a href="https://getdbt.com/" target="_blank" rel="noopener noreferrer">https://getdbt.com/</a></p>
<h4 id="数据可视化" class="headerLink">
    <a href="#%e6%95%b0%e6%8d%ae%e5%8f%af%e8%a7%86%e5%8c%96" class="header-mark"></a>2.2.4 数据可视化</h4><p>在数据之上创建 Dashboard、图表和表格来获得洞察是很直接的需求（可以想象为想象大数据之上的 excel 图标功能）。</p>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/172800854-8e01acae-696d-4e07-8e3e-a7d34dec8278.png" title="https://user-images.githubusercontent.com/1651790/172800854-8e01acae-696d-4e07-8e3e-a7d34dec8278.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/172800854-8e01acae-696d-4e07-8e3e-a7d34dec8278.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/172800854-8e01acae-696d-4e07-8e3e-a7d34dec8278.png"
            srcset="https://user-images.githubusercontent.com/1651790/172800854-8e01acae-696d-4e07-8e3e-a7d34dec8278.png, https://user-images.githubusercontent.com/1651790/172800854-8e01acae-696d-4e07-8e3e-a7d34dec8278.png 1.5x, https://user-images.githubusercontent.com/1651790/172800854-8e01acae-696d-4e07-8e3e-a7d34dec8278.png 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/172800854-8e01acae-696d-4e07-8e3e-a7d34dec8278.png">
    </a></figure></p>
<p><a href="https://superset.apache.org/" target="_blank" rel="noopener noreferrer">Apache Superset</a> 是我很喜欢的开源数据可视化项目，我准备用它来作为被治理管理的目标之一，同时，也会利用它的可视化作为元数据洞察功能的一部分。</p>
<p>✅ - Dashboard：Apache Superset <a href="https://superset.apache.org/" target="_blank" rel="noopener noreferrer">https://superset.apache.org/</a></p>
<h4 id="任务编排dag-job-orchestration" class="headerLink">
    <a href="#%e4%bb%bb%e5%8a%a1%e7%bc%96%e6%8e%92dag-job-orchestration" class="header-mark"></a>2.2.5 任务编排（DAG Job Orchestration）</h4><p>在大多数情况下，我们的 DataOps 作业、任务会增长到需要一个编排系统的规模，我们可以用 <a href="https://airflow.apache.org/" target="_blank" rel="noopener noreferrer">Apache Airflow</a> 来负责这一块。</p>
<p>✅ - DAG：Apache Airflow <a href="https://airflow.apache.org/" target="_blank" rel="noopener noreferrer">https://airflow.apache.org/</a></p>
<h4 id="元数据治理" class="headerLink">
    <a href="#%e5%85%83%e6%95%b0%e6%8d%ae%e6%b2%bb%e7%90%86" class="header-mark"></a>2.2.6 元数据治理</h4><p>随着越来越多的组件和数据被引入数据基础设施，在数据库、表、数据建模(schema)、Dashboard、DAG（编排系统中的有向无环图）、应用与服务的所有生命周期中都将存在海量的元数据，需要对它们的管理员和团队进行协同管理、连接和发现。</p>
<p><a href="https://www.amundsen.io/amundsen/" target="_blank" rel="noopener noreferrer">Linux Foundation Amundsen</a> 是我认为可以解决这个问题的最佳项目之一。</p>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/172801018-ecd67fa9-2743-451f-8734-b14f2a814199.png" title="https://user-images.githubusercontent.com/1651790/172801018-ecd67fa9-2743-451f-8734-b14f2a814199.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/172801018-ecd67fa9-2743-451f-8734-b14f2a814199.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/172801018-ecd67fa9-2743-451f-8734-b14f2a814199.png"
            srcset="https://user-images.githubusercontent.com/1651790/172801018-ecd67fa9-2743-451f-8734-b14f2a814199.png, https://user-images.githubusercontent.com/1651790/172801018-ecd67fa9-2743-451f-8734-b14f2a814199.png 1.5x, https://user-images.githubusercontent.com/1651790/172801018-ecd67fa9-2743-451f-8734-b14f2a814199.png 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/172801018-ecd67fa9-2743-451f-8734-b14f2a814199.png">
    </a></figure></p>
<p>✅ - 数据发现：Linux Foundation Amundsen <a href="https://www.amundsen.io/amundsen/" target="_blank" rel="noopener noreferrer">https://www.amundsen.io/amundsen/</a></p>
<p>Amundsen 用图数据库为事实源（single source of truth）以加速多跳查询，Elastic Search 为全文搜索引擎，它能对所有元数据及其血缘进行了顺滑的处理还提供了优雅的 UI 和 API。</p>
<p>Amundsen 支持多种图数据库为后端，这里咱们用 <a href="https://nebula-graph.com.cn" target="_blank" rel="noopener noreferrer">NebulaGraph</a>。</p>
<p>✅ - 全文搜索：Elastic Search</p>
<p>✅ - 图数据库：NebulaGraph</p>
<p>现在，所有组件都齐活了，开始组装它们吧。</p>
<h2 id="环境搭建与各组件初识" class="headerLink">
    <a href="#%e7%8e%af%e5%a2%83%e6%90%ad%e5%bb%ba%e4%b8%8e%e5%90%84%e7%bb%84%e4%bb%b6%e5%88%9d%e8%af%86" class="header-mark"></a>3 环境搭建与各组件初识</h2><p>整个项目方案都是开源的，大家可以在这里找到它的所有细节：</p>
<ul>
<li><a href="https://github.com/wey-gu/data-lineage-ref-solution" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/data-lineage-ref-solution</a></li>
</ul>
<p>整个项目大家的实验中我遵循尽量干净、鼓励的原则，需要假设在一个 unix-like 的系统上运行，有互联网和 Docker-Compose。</p>
<blockquote>
<p>注：参考 <a href="https://docs.docker.com/compose/install/" target="_blank" rel="noopener noreferrer">https://docs.docker.com/compose/install/</a> 在继续之前安装 Docker 和 Docker Compose。</p>
</blockquote>
<p>这里我们在 Ubuntu 20.04 LTS X86_64 上运行它，但在其他发行版或 Linux 版本上应该也没有问题。</p>
<h3 id="运行一个数仓数据库" class="headerLink">
    <a href="#%e8%bf%90%e8%a1%8c%e4%b8%80%e4%b8%aa%e6%95%b0%e4%bb%93%e6%95%b0%e6%8d%ae%e5%ba%93" class="header-mark"></a>3.1 运行一个数仓、数据库</h3><p>首先，安装 Postgres 作为我们的数仓。</p>
<p>这个单行命令会创建一个使用 docker 在后台运行的 Postgres，进程关闭之后容器不会残留而是被清理掉（因为参数<code>--rm</code>）。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run --rm --name postgres <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -e <span class="nv">POSTGRES_PASSWORD</span><span class="o">=</span>lineage_ref <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -e <span class="nv">POSTGRES_USER</span><span class="o">=</span>lineage_ref <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -e <span class="nv">POSTGRES_DB</span><span class="o">=</span>warehouse -d <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -p 5432:5432 postgres
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后我们可以使用 Postgres CLI 或 GUI 客户端来验证它。</p>
<blockquote>
<p>提示：可以用 VS Code 插件：<a href="https://marketplace.visualstudio.com/items?itemName=mtxr.sqltools" target="_blank" rel="noopener noreferrer">SQL TOOLS</a> 快速以 GUI 方式连接到数据库（支持 MariaDB、Postgres 、Cassandra 等）</p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=mtxr.sqltools" target="_blank" rel="noopener noreferrer">https://marketplace.visualstudio.com/items?itemName=mtxr.sqltools</a></p>
</blockquote>
<h3 id="dataops-工具链部署" class="headerLink">
    <a href="#dataops-%e5%b7%a5%e5%85%b7%e9%93%be%e9%83%a8%e7%bd%b2" class="header-mark"></a>3.2 DataOps 工具链部署</h3><p>然后，安装有机结合了 Singler 和 dbt 的 Meltano。</p>
<p>Meltano 帮助我们管理 ETL 工具（作为插件）及其所有配置和 pipeline。 这些元信息位于 meltano 配置及其系统数据库（https://docs.meltano.com/concepts/project#system-database）中，其中配置是基于文件的（可以使用 GitOps 管理），它的默认系统数据库是 SQLite。</p>
<h4 id="安装-meltano" class="headerLink">
    <a href="#%e5%ae%89%e8%a3%85-meltano" class="header-mark"></a>3.2.1 安装 Meltano</h4><p>使用 Meltano 的工作流是启动一个“meltano 项目”并开始将 E、L 和 T 添加到配置文件中。 项目的启动只需要一个 CLI 命令调用：<code>meltano init yourprojectname</code>，在那之前，可以先用 Python 的包管理器：pip 或者 Docker 镜像安装 Meltano：</p>
<ul>
<li>在 python 虚拟环境中使用 pip 安装 Meltano：</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkdir .venv
</span></span><span class="line"><span class="cl"><span class="c1"># example in a debian flavor Linux distro</span>
</span></span><span class="line"><span class="cl">sudo apt-get install python3-dev python3-pip python3-venv python3-wheel -y
</span></span><span class="line"><span class="cl">python3 -m venv .venv/meltano
</span></span><span class="line"><span class="cl"><span class="nb">source</span> .venv/meltano/bin/activate
</span></span><span class="line"><span class="cl">python3 -m pip install wheel
</span></span><span class="line"><span class="cl">python3 -m pip install meltano
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># init a project</span>
</span></span><span class="line"><span class="cl">mkdir meltano_projects <span class="o">&amp;&amp;</span> <span class="nb">cd</span> meltano_projects
</span></span><span class="line"><span class="cl"><span class="c1"># replace &lt;yourprojectname&gt; with your own one</span>
</span></span><span class="line"><span class="cl">touch .env
</span></span><span class="line"><span class="cl">meltano init &lt;yourprojectname&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>或者用容器安装 Meltano：</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker pull meltano/meltano:latest
</span></span><span class="line"><span class="cl">docker run --rm meltano/meltano --version
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># init a project</span>
</span></span><span class="line"><span class="cl">mkdir meltano_projects <span class="o">&amp;&amp;</span> <span class="nb">cd</span> meltano_projects
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># replace &lt;yourprojectname&gt; with your own one</span>
</span></span><span class="line"><span class="cl">touch .env
</span></span><span class="line"><span class="cl">docker run --rm -v <span class="s2">&#34;</span><span class="k">$(</span><span class="nb">pwd</span><span class="k">)</span><span class="s2">&#34;</span>:/projects <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>             -w /projects --env-file .env <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>             meltano/meltano init &lt;yourprojectname&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p>除了 <code>meltano init</code>，还有一些其他命令，例如 <code>meltano etl</code> 表示 ETL 的执行，还有 <code>meltano invoke &lt;plugin&gt;</code> 来调用插件命令，详细可以参考它的速查表（https://docs.meltano.com/reference/command-line-interface）。</p>
<h4 id="meltano-gui-界面" class="headerLink">
    <a href="#meltano-gui-%e7%95%8c%e9%9d%a2" class="header-mark"></a>3.2.2 Meltano GUI 界面</h4><p>Meltano 还带有一个基于 Web 的 UI，执行 <code>ui</code> 子命令就是启动它：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">meltano ui
</span></span></code></pre></td></tr></table>
</div>
</div><p>默认他会跑在 http://localhost:5000 上。</p>
<p>对于 Docker 运行的情况，只需要在暴露 5000 端口的情况下运行容器即可，由于容器的默认命令已经是 <code>meltano ui</code>，所以 <code>run</code> 的命令只需：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run -v <span class="s2">&#34;</span><span class="k">$(</span><span class="nb">pwd</span><span class="k">)</span><span class="s2">&#34;</span>:/project <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>             -w /project <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>             -p 5000:5000 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>             meltano/meltano
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="meltano-项目示例" class="headerLink">
    <a href="#meltano-%e9%a1%b9%e7%9b%ae%e7%a4%ba%e4%be%8b" class="header-mark"></a>3.2.3 Meltano 项目示例</h4><p>写到这里的时候，我注意到 <a href="https://github.com/pnadolny13" target="_blank" rel="noopener noreferrer">Pat Nadolny</a> 创建了很好的示例项目在 <a href="https://github.com/pnadolny13/meltano_example_implementations/tree/main/meltano_projects/singer_dbt_jaffle" target="_blank" rel="noopener noreferrer">https://github.com/pnadolny13/meltano_example_implementations/tree/main/meltano_projects/singer_dbt_jaffle</a>，它利用 dbt 的 Meltano 示例数据集，采用 Airflow 编排 ETL 任务（https://github.com/pnadolny13/meltano_example_implementations/tree/main/meltano_projects/dbt_orchestration，还有利用 Superset 的例子（https://github.com/pnadolny13/meltano_example_implementations/tree/main/meltano_projects/jaffle_superset）。</p>
<p>这里，我就不重复造轮子了，直接利用他的例子吧。</p>
<p>咱们可以参照 <a href="https://github.com/pnadolny13/meltano_example_implementations/tree/main/meltano_projects/singer_dbt_jaffle" target="_blank" rel="noopener noreferrer">https://github.com/pnadolny13/meltano_example_implementations/tree/main/meltano_projects/singer_dbt_jaffle</a>，运行这样的数据管道（pipeline）：</p>
<ul>
<li><a href="https://hub.meltano.com/taps/csv" target="_blank" rel="noopener noreferrer">tap-CSV</a>(Singer)，从 CSV 文件中提取数据</li>
<li><a href="https://hub.meltano.com/targets/postgres" target="_blank" rel="noopener noreferrer">target-postgres</a>(Singer)，将数据加载到 Postgres</li>
<li><a href="https://hub.meltano.com/transformers/dbt" target="_blank" rel="noopener noreferrer">dbt</a>，将数据转换为聚合表或视图</li>
</ul>
<blockquote>
<p>注意，前边我们已经启动了 postgres，那一步可以跳过。</p>
</blockquote>
<p>操作过程是：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone https://github.com/pnadolny13/meltano_example_implementations.git
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> meltano_example_implementations/meltano_projects/singer_dbt_jaffle/
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">meltano install
</span></span><span class="line"><span class="cl">touch .env
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="nv">PG_PASSWORD</span><span class="o">=</span><span class="s2">&#34;lineage_ref&#34;</span> &gt;&gt; .env
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="nv">PG_USERNAME</span><span class="o">=</span><span class="s2">&#34;lineage_ref&#34;</span> &gt;&gt; .env
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Extract and Load(with Singer)</span>
</span></span><span class="line"><span class="cl">meltano run tap-csv target-postgres
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Trasnform(with dbt)</span>
</span></span><span class="line"><span class="cl">meltano run dbt:run
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Generate dbt docs</span>
</span></span><span class="line"><span class="cl">meltano invoke dbt docs generate
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Serve generated dbt docs</span>
</span></span><span class="line"><span class="cl">meltano invoke dbt docs to serve
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Then visit http://localhost:8080</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>现在，我们可以连接到 Postgres 来查看 加载和转换后的数据预览如下，截图来自 VS Code 的 SQLTool：</p>
<p>Payments 表里长这样子：</p>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/167540494-01e3dbd2-6ab1-41d2-998e-3b79f755bdc7.png" title="https://user-images.githubusercontent.com/1651790/167540494-01e3dbd2-6ab1-41d2-998e-3b79f755bdc7.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/167540494-01e3dbd2-6ab1-41d2-998e-3b79f755bdc7.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/167540494-01e3dbd2-6ab1-41d2-998e-3b79f755bdc7.png"
            srcset="https://user-images.githubusercontent.com/1651790/167540494-01e3dbd2-6ab1-41d2-998e-3b79f755bdc7.png, https://user-images.githubusercontent.com/1651790/167540494-01e3dbd2-6ab1-41d2-998e-3b79f755bdc7.png 1.5x, https://user-images.githubusercontent.com/1651790/167540494-01e3dbd2-6ab1-41d2-998e-3b79f755bdc7.png 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/167540494-01e3dbd2-6ab1-41d2-998e-3b79f755bdc7.png">
    </a></figure></p>
<h3 id="搭一个-bi-dashboard-系统" class="headerLink">
    <a href="#%e6%90%ad%e4%b8%80%e4%b8%aa-bi-dashboard-%e7%b3%bb%e7%bb%9f" class="header-mark"></a>3.3 搭一个 BI Dashboard 系统</h3><p>现在，我们有了数据仓库中的一些数据，用 ETL 工具链将不同的数据源导了进去，接下来可以试着用一下这些数据了。</p>
<p>像仪表大盘 Dashbaord 这样的 BI 工具能帮助我们从数据中获得有用的洞察，使用 Apache Superset，可以很容易地创建和管理基于这些数据源的 Dashboard 和各式各样的图表。</p>
<p>本章的重点不在于 Apache Superset 本身，所以，咱们还是复用 <a href="https://github.com/pnadolny13" target="_blank" rel="noopener noreferrer">Pat Nadolny</a> 在的例子 <a href="https://github.com/pnadolny13/meltano_example_implementations/tree/main/meltano_projects/jaffle_superset" target="_blank" rel="noopener noreferrer">https://github.com/pnadolny13/meltano_example_implementations/tree/main/meltano_projects/jaffle_superset</a>。</p>
<h4 id="bootstrap-meltano-和-superset" class="headerLink">
    <a href="#bootstrap-meltano-%e5%92%8c-superset" class="header-mark"></a>3.3.1 Bootstrap Meltano 和 Superset</h4><p>创建一个安装了 Meltano 的 python venv：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkdir .venv
</span></span><span class="line"><span class="cl">python3 -m venv .venv/meltano
</span></span><span class="line"><span class="cl"><span class="nb">source</span> .venv/meltano/bin/activate
</span></span><span class="line"><span class="cl">python3 -m pip install wheel
</span></span><span class="line"><span class="cl">python3 -m pip install meltano
</span></span></code></pre></td></tr></table>
</div>
</div><p>参考 Pat 的 Guide（https://github.com/pnadolny13/meltano_example_implementations/tree/main/meltano_projects/jaffle_superset），稍微做一些修改：</p>
<ul>
<li>克隆 repo，进入 <code>jaffle_superset</code> 项目</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone https://github.com/pnadolny13/meltano_example_implementations.git
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> meltano_example_implementations/meltano_projects/jaffle_superset/
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>修改meltano配置文件，让 Superset 连接到我们创建的 Postgres：</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">vim meltano_projects/jaffle_superset/meltano.yml
</span></span></code></pre></td></tr></table>
</div>
</div><p>这里，我将主机名更改为“10.1.1.111”，这是我当前主机的 IP，而如果读者在 Windows 或者 macOS 机器的 Docker Desktop 上跑的话，这里不要修改，否则要参考我去改成自己实际的地址：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl"><span class="gd">--- a/meltano_projects/jaffle_superset/meltano.yml
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+++ b/meltano_projects/jaffle_superset/meltano.yml
</span></span></span><span class="line"><span class="cl"><span class="gi"></span><span class="gu">@@ -71,7 +71,7 @@ plugins:
</span></span></span><span class="line"><span class="cl"><span class="gu"></span>               A list of database driver dependencies can be found here https://superset.apache.org/docs/databases/installing-database-drivers
</span></span><span class="line"><span class="cl">     config:
</span></span><span class="line"><span class="cl">       database_name: my_postgres
</span></span><span class="line"><span class="cl"><span class="gd">-      sqlalchemy_uri: postgresql+psycopg2://${PG_USERNAME}:${PG_PASSWORD}@host.docker.internal:${PG_PORT}/${PG_DATABASE}
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+      sqlalchemy_uri: postgresql+psycopg2://${PG_USERNAME}:${PG_PASSWORD}@10.1.1.168:${PG_PORT}/${PG_DATABASE}
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>       tables:
</span></span><span class="line"><span class="cl">       - model.my_meltano_project.customers
</span></span><span class="line"><span class="cl">       - model.my_meltano_project.orders
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>添加 Postgres 登录的信息到  <code>.env</code> 文件：</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">echo</span> <span class="nv">PG_USERNAME</span><span class="o">=</span>lineage_ref &gt;&gt; .env
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="nv">PG_PASSWORD</span><span class="o">=</span>lineage_ref &gt;&gt; .env
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>安装 Meltano 项目，运行 ETL 任务</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">meltano install
</span></span><span class="line"><span class="cl">meltano run tap-csv target-postgres dbt:run
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>调用、启动 superset，这里注意 <code>ui</code> 不是 meltano 的内部命令，而是一个配置进去的自定义行为（user-defined action）</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">meltano invoke superset:ui
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>在另一个命令行终端，执行另一个自定义的命令 <code>load_datasources</code></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">meltano invoke superset:load_datasources
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>通过浏览器访问 http://localhost:8088/ 就是Superset 的图形界面了：</li>
</ul>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168570300-186b56a5-58e8-4ff1-bc06-89fd77d74166.png" title="https://user-images.githubusercontent.com/1651790/168570300-186b56a5-58e8-4ff1-bc06-89fd77d74166.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168570300-186b56a5-58e8-4ff1-bc06-89fd77d74166.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/168570300-186b56a5-58e8-4ff1-bc06-89fd77d74166.png"
            srcset="https://user-images.githubusercontent.com/1651790/168570300-186b56a5-58e8-4ff1-bc06-89fd77d74166.png, https://user-images.githubusercontent.com/1651790/168570300-186b56a5-58e8-4ff1-bc06-89fd77d74166.png 1.5x, https://user-images.githubusercontent.com/1651790/168570300-186b56a5-58e8-4ff1-bc06-89fd77d74166.png 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/168570300-186b56a5-58e8-4ff1-bc06-89fd77d74166.png">
    </a></figure></p>
<h4 id="创建一个-dashboard" class="headerLink">
    <a href="#%e5%88%9b%e5%bb%ba%e4%b8%80%e4%b8%aa-dashboard" class="header-mark"></a>3.3.2 创建一个 Dashboard</h4><p>试一下在这个 Meltano 项目中定义的 Postgres 中的 ETL 数据上创建一个 Dashboard 吧</p>
<ul>
<li>点击 <code>+ DASHBOARD</code>，填写仪表盘名称，然后点击 <code>SAVE</code>，然后点击 <code>+ CREATE A NEW CHART</code></li>
</ul>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168570363-c6b4f929-2aad-4f03-8e3e-b1b61f560ce5.png" title="https://user-images.githubusercontent.com/1651790/168570363-c6b4f929-2aad-4f03-8e3e-b1b61f560ce5.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168570363-c6b4f929-2aad-4f03-8e3e-b1b61f560ce5.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/168570363-c6b4f929-2aad-4f03-8e3e-b1b61f560ce5.png"
            srcset="https://user-images.githubusercontent.com/1651790/168570363-c6b4f929-2aad-4f03-8e3e-b1b61f560ce5.png, https://user-images.githubusercontent.com/1651790/168570363-c6b4f929-2aad-4f03-8e3e-b1b61f560ce5.png 1.5x, https://user-images.githubusercontent.com/1651790/168570363-c6b4f929-2aad-4f03-8e3e-b1b61f560ce5.png 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/168570363-c6b4f929-2aad-4f03-8e3e-b1b61f560ce5.png">
    </a></figure></p>
<ul>
<li>在新图表（Create a new chart）视图中，我们应该选择图表类型和数据集。 在这里，我选择了 <code>orders</code> 表作为数据源和 <code>Pie Chart</code> 图表类型：</li>
</ul>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168570927-9559a2a1-fed7-43be-9f6a-f6fb3c263830.png" title="https://user-images.githubusercontent.com/1651790/168570927-9559a2a1-fed7-43be-9f6a-f6fb3c263830.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168570927-9559a2a1-fed7-43be-9f6a-f6fb3c263830.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/168570927-9559a2a1-fed7-43be-9f6a-f6fb3c263830.png"
            srcset="https://user-images.githubusercontent.com/1651790/168570927-9559a2a1-fed7-43be-9f6a-f6fb3c263830.png, https://user-images.githubusercontent.com/1651790/168570927-9559a2a1-fed7-43be-9f6a-f6fb3c263830.png 1.5x, https://user-images.githubusercontent.com/1651790/168570927-9559a2a1-fed7-43be-9f6a-f6fb3c263830.png 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/168570927-9559a2a1-fed7-43be-9f6a-f6fb3c263830.png">
    </a></figure></p>
<ul>
<li>点击“CREATE NEW CHART”后，我们在图表定义视图中，我选择了“status”的“Query”为“DIMENSIONS”，“COUNT(amount)”为“METRIC”。 至此，咱们就可以看到每个订单状态分布的饼图了。</li>
</ul>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168571130-a65ba88e-1ebe-4699-8783-08e5ecf54a0c.png" title="https://user-images.githubusercontent.com/1651790/168571130-a65ba88e-1ebe-4699-8783-08e5ecf54a0c.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168571130-a65ba88e-1ebe-4699-8783-08e5ecf54a0c.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/168571130-a65ba88e-1ebe-4699-8783-08e5ecf54a0c.png"
            srcset="https://user-images.githubusercontent.com/1651790/168571130-a65ba88e-1ebe-4699-8783-08e5ecf54a0c.png, https://user-images.githubusercontent.com/1651790/168571130-a65ba88e-1ebe-4699-8783-08e5ecf54a0c.png 1.5x, https://user-images.githubusercontent.com/1651790/168571130-a65ba88e-1ebe-4699-8783-08e5ecf54a0c.png 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/168571130-a65ba88e-1ebe-4699-8783-08e5ecf54a0c.png">
    </a></figure></p>
<ul>
<li>点击 <code>SAVE</code> ，它会询问应该将此图表添加到哪个 Dashboard，选择后，单击 <code>SAVE &amp; GO TO DASHBOARD</code>。</li>
</ul>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168571301-8ae69983-eda8-4e75-99cf-6904f583fc7c.png" title="https://user-images.githubusercontent.com/1651790/168571301-8ae69983-eda8-4e75-99cf-6904f583fc7c.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168571301-8ae69983-eda8-4e75-99cf-6904f583fc7c.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/168571301-8ae69983-eda8-4e75-99cf-6904f583fc7c.png"
            srcset="https://user-images.githubusercontent.com/1651790/168571301-8ae69983-eda8-4e75-99cf-6904f583fc7c.png, https://user-images.githubusercontent.com/1651790/168571301-8ae69983-eda8-4e75-99cf-6904f583fc7c.png 1.5x, https://user-images.githubusercontent.com/1651790/168571301-8ae69983-eda8-4e75-99cf-6904f583fc7c.png 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/168571301-8ae69983-eda8-4e75-99cf-6904f583fc7c.png">
    </a></figure></p>
<ul>
<li>然后，在 Dashboard 中，我们可以看到那里的所有图表。 您可以看到我还添加了另一个图表来显示客户订单数量分布：</li>
</ul>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168571878-30a77057-1f66-448a-9bbd-0dedcee24cc9.png" title="https://user-images.githubusercontent.com/1651790/168571878-30a77057-1f66-448a-9bbd-0dedcee24cc9.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168571878-30a77057-1f66-448a-9bbd-0dedcee24cc9.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/168571878-30a77057-1f66-448a-9bbd-0dedcee24cc9.png"
            srcset="https://user-images.githubusercontent.com/1651790/168571878-30a77057-1f66-448a-9bbd-0dedcee24cc9.png, https://user-images.githubusercontent.com/1651790/168571878-30a77057-1f66-448a-9bbd-0dedcee24cc9.png 1.5x, https://user-images.githubusercontent.com/1651790/168571878-30a77057-1f66-448a-9bbd-0dedcee24cc9.png 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/168571878-30a77057-1f66-448a-9bbd-0dedcee24cc9.png">
    </a></figure></p>
<ul>
<li>点  <code>···</code> 的话，还能看到刷新率设置、下载渲染图等其他的功能。</li>
</ul>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168573874-b5d57919-2866-4b3c-a4e5-55b6e6ef342e.png" title="https://user-images.githubusercontent.com/1651790/168573874-b5d57919-2866-4b3c-a4e5-55b6e6ef342e.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168573874-b5d57919-2866-4b3c-a4e5-55b6e6ef342e.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/168573874-b5d57919-2866-4b3c-a4e5-55b6e6ef342e.png"
            srcset="https://user-images.githubusercontent.com/1651790/168573874-b5d57919-2866-4b3c-a4e5-55b6e6ef342e.png, https://user-images.githubusercontent.com/1651790/168573874-b5d57919-2866-4b3c-a4e5-55b6e6ef342e.png 1.5x, https://user-images.githubusercontent.com/1651790/168573874-b5d57919-2866-4b3c-a4e5-55b6e6ef342e.png 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/168573874-b5d57919-2866-4b3c-a4e5-55b6e6ef342e.png">
    </a></figure></p>
<p>目前，我们有一个简单但典型的 homelab 数据技术栈了，并且所有东西都是开源的！</p>
<p>想象一下，我们在 CSV 中有 100 个数据集，在数据仓库中有 200 个表，并且有几个数据工程师在运行不同的项目，这些项目使用、生成不同的应用与服务、Dashbaord 和数据库。 当有人想要查找、发现或者修改其中的一些表、数据集、Dashbaord 和管道，在沟通和工程方面可能都是非常不好管理的。</p>
<p>如前边提到的，我们需要这个示例项目的主要部分：元数据发现系统。</p>
<h3 id="元数据发现系统" class="headerLink">
    <a href="#%e5%85%83%e6%95%b0%e6%8d%ae%e5%8f%91%e7%8e%b0%e7%b3%bb%e7%bb%9f" class="header-mark"></a>3.4 元数据发现系统</h3><p>然后，我们部署一个带有 NebulaGraph 和 Elasticsearch 的 Amundsen。</p>
<blockquote>
<p>注：目前【NebulaGraph 作为 Amundsen 后端的 PR】（https://github.com/amundsen-io/amundsen/pull/1817）尚未合并，我还在与 Amundsen 团队合作（https://github.com/amundsen-io/rfcs/pull/48）来实现它。</p>
</blockquote>
<p>有了 Amundsen，我们可以在一个地方发现和管理整个数据栈中的所有元数据。</p>
<p>Amundsen 主要有两个部分组成：</p>
<ul>
<li>元数据导入 Metadata Ingestion
<ul>
<li><a href="https://www.amundsen.io/amundsen/databuilder/" target="_blank" rel="noopener noreferrer">Amundsen Data builder</a></li>
</ul>
</li>
<li>元数据目录服务 Metadata Catalog
<ul>
<li><a href="https://www.amundsen.io/amundsen/frontend/" target="_blank" rel="noopener noreferrer">Amundsen Frontend service</a></li>
<li><a href="https://www.amundsen.io/amundsen/metadata/" target="_blank" rel="noopener noreferrer">Amundsen Metadata service</a></li>
<li><a href="https://www.amundsen.io/amundsen/search/" target="_blank" rel="noopener noreferrer">Amundsen Search service</a></li>
</ul>
</li>
</ul>
<p>它的工作原理是：利用 <code>Data builder</code> 从不同来源提取元数据，并将元数据持久化到 <code>Meta service</code> 的后端存储和 <code>Search service</code> 的后端存储中，用户从 <code>Froent service</code> 或通过 <code>Meta Service</code> 的API。</p>
<h4 id="部署-amundsen" class="headerLink">
    <a href="#%e9%83%a8%e7%bd%b2-amundsen" class="header-mark"></a>3.4.1 部署 Amundsen</h4><h5 id="元数据服务-metadata-service" class="headerLink">
    <a href="#%e5%85%83%e6%95%b0%e6%8d%ae%e6%9c%8d%e5%8a%a1-metadata-service" class="header-mark"></a>3.4.1.1 元数据服务 Metadata service</h5><p>我们用 docker-compose 文件部署一个 Amundsen 集群。 由于 NebulaGraph 后端支持尚未合并，还不能用官方的代码，先用我自己的分叉版本。</p>
<p>首先，让我们克隆包含所有子模块的 repo：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone -b amundsen_nebula_graph --recursive git@github.com:wey-gu/amundsen.git
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> amundsen
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后，启动所有目录服务（catalog services）及其后端存储：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker-compose -f docker-amundsen-nebula.yml up
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>注：可以添加 <code>-d</code> 来让容器在后台运行：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker-compose -f docker-amundsen-nebula.yml up -d
</span></span></code></pre></td></tr></table>
</div>
</div><p>关闭后台运行的集群</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker-compose -f docker-amundsen-nebula.yml stop
</span></span></code></pre></td></tr></table>
</div>
</div><p>删除后台运行的集群</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker-compose -f docker-amundsen-nebula.yml down
</span></span></code></pre></td></tr></table>
</div>
</div></blockquote>
<p>由于这个 docker-compose 文件是供开发人员试玩、调试 Amundsen 用的，而不是给生产部署准备的，它在启动的时候会从代码库构建镜像，第一次跑的时候启动会慢一些。</p>
<p>部署好了之后，我们使用 Data builder 将一些示例、虚构的数据加载存储里。</p>
<h5 id="抓取元数据-data-builder" class="headerLink">
    <a href="#%e6%8a%93%e5%8f%96%e5%85%83%e6%95%b0%e6%8d%ae-data-builder" class="header-mark"></a>3.4.1.2 抓取元数据 Data builder</h5><p>Amundsen Data builder 就像 Meltano 系统一样，只不过是用在元数据的上的 ETL ，它把元数据加载到“Meta service”和“Search service”的后端存储：NebulaGraph 和 Elasticsearch 里。 这里的 Data builder 只是一个 python 模块，所有的元数据 ETL 作业可以作为脚本运行，也可以用 Apache Airflow 等 DAG 平台进行编排。</p>
<p>安装 <a href="https://github.com/amundsen-io/amundsen/tree/main/databuilder" target="_blank" rel="noopener noreferrer">Amundsen Data builder</a>：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> databuilder
</span></span><span class="line"><span class="cl">python3 -m venv .venv
</span></span><span class="line"><span class="cl"><span class="nb">source</span> .venv/bin/activate
</span></span><span class="line"><span class="cl">python3 -m pip install wheel
</span></span><span class="line"><span class="cl">python3 -m pip install -r requirements.txt
</span></span><span class="line"><span class="cl">python3 setup.py install
</span></span></code></pre></td></tr></table>
</div>
</div><p>调用这个示例数据构建器 ETL 脚本来把示例的虚拟数据导进去。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">python3 example/scripts/sample_data_loader_nebula.py
</span></span></code></pre></td></tr></table>
</div>
</div><h5 id="验证一下-amundsen" class="headerLink">
    <a href="#%e9%aa%8c%e8%af%81%e4%b8%80%e4%b8%8b-amundsen" class="header-mark"></a>3.4.1.3 验证一下 Amundsen</h5><p>在访问 Amundsen 之前，我们需要创建一个测试用户：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># run a container with curl attached to amundsenfrontend</span>
</span></span><span class="line"><span class="cl">docker run -it --rm --net container:amundsenfrontend nicolaka/netshoot
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Create a user with id test_user_id</span>
</span></span><span class="line"><span class="cl">curl -X PUT -v http://amundsenmetadata:5002/user <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -H <span class="s2">&#34;Content-Type: application/json&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --data <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="s1">&#39;{&#34;user_id&#34;:&#34;test_user_id&#34;,&#34;first_name&#34;:&#34;test&#34;,&#34;last_name&#34;:&#34;user&#34;, &#34;email&#34;:&#34;test_user_id@mail.com&#34;}&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">exit</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后我们可以在 <a href="http://localhost:5000/" target="_blank" rel="noopener noreferrer">http://localhost:5000</a> 查看 UI 并尝试搜索 <code>test</code>，它应该会返回一些结果。</p>
<p><figure><a class="lightgallery" href="https://github.com/amundsen-io/amundsen/raw/master/docs/img/search-page.png" title="https://github.com/amundsen-io/amundsen/raw/master/docs/img/search-page.png" data-thumbnail="https://github.com/amundsen-io/amundsen/raw/master/docs/img/search-page.png">
        <img
            
            loading="lazy"
            src="https://github.com/amundsen-io/amundsen/raw/master/docs/img/search-page.png"
            srcset="https://github.com/amundsen-io/amundsen/raw/master/docs/img/search-page.png, https://github.com/amundsen-io/amundsen/raw/master/docs/img/search-page.png 1.5x, https://github.com/amundsen-io/amundsen/raw/master/docs/img/search-page.png 2x"
            sizes="auto"
            alt="https://github.com/amundsen-io/amundsen/raw/master/docs/img/search-page.png">
    </a></figure></p>
<p>然后，可以单击并浏览在“sample_data_loader_nebula.py”期间加载到 Amundsen 的那些示例元数据。</p>
<p>此外，我们还可以通过 NebulaStudio(http://localhost:7001) 访问 NebulaGraph 里的这些数据。</p>
<blockquote>
<p>注意在 Nebula Studio 中，默认登录字段为：</p>
<ul>
<li>主机：<code>graphd:9669</code></li>
<li>用户：<code>root</code></li>
<li>密码：<code>nebula</code></li>
</ul>
</blockquote>
<p>下图显示了有关 Amundsen 组件的更多详细信息：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">       ┌────────────────────────┐ ┌────────────────────────────────────────┐
</span></span><span class="line"><span class="cl">       │ Frontend:5000          │ │ Metadata Sources                       │
</span></span><span class="line"><span class="cl">       ├────────────────────────┤ │ ┌────────┐ ┌─────────┐ ┌─────────────┐ │
</span></span><span class="line"><span class="cl">       │ Metaservice:5001       │ │ │        │ │         │ │             │ │
</span></span><span class="line"><span class="cl">       │ ┌──────────────┐       │ │ │ Foo DB │ │ Bar App │ │ X Dashboard │ │
</span></span><span class="line"><span class="cl">  ┌────┼─┤ Nebula Proxy │       │ │ │        │ │         │ │             │ │
</span></span><span class="line"><span class="cl">  │    │ └──────────────┘       │ │ │        │ │         │ │             │ │
</span></span><span class="line"><span class="cl">  │    ├────────────────────────┤ │ └────────┘ └─────┬───┘ └─────────────┘ │
</span></span><span class="line"><span class="cl">┌─┼────┤ Search searvice:5002   │ │                  │                     │
</span></span><span class="line"><span class="cl">│ │    └────────────────────────┘ └──────────────────┼─────────────────────┘
</span></span><span class="line"><span class="cl">│ │    ┌─────────────────────────────────────────────┼───────────────────────┐
</span></span><span class="line"><span class="cl">│ │    │                                             │                       │
</span></span><span class="line"><span class="cl">│ │    │ Databuilder     ┌───────────────────────────┘                       │
</span></span><span class="line"><span class="cl">│ │    │                 │                                                   │
</span></span><span class="line"><span class="cl">│ │    │ ┌───────────────▼────────────────┐ ┌──────────────────────────────┐ │
</span></span><span class="line"><span class="cl">│ │ ┌──┼─► Extractor of Sources           ├─► nebula_search_data_extractor │ │
</span></span><span class="line"><span class="cl">│ │ │  │ └───────────────┬────────────────┘ └──────────────┬───────────────┘ │
</span></span><span class="line"><span class="cl">│ │ │  │ ┌───────────────▼────────────────┐ ┌──────────────▼───────────────┐ │
</span></span><span class="line"><span class="cl">│ │ │  │ │ Loader filesystem_csv_nebula   │ │ Loader Elastic FS loader     │ │
</span></span><span class="line"><span class="cl">│ │ │  │ └───────────────┬────────────────┘ └──────────────┬───────────────┘ │
</span></span><span class="line"><span class="cl">│ │ │  │ ┌───────────────▼────────────────┐ ┌──────────────▼───────────────┐ │
</span></span><span class="line"><span class="cl">│ │ │  │ │ Publisher nebula_csv_publisher │ │ Publisher Elasticsearch      │ │
</span></span><span class="line"><span class="cl">│ │ │  │ └───────────────┬────────────────┘ └──────────────┬───────────────┘ │
</span></span><span class="line"><span class="cl">│ │ │  └─────────────────┼─────────────────────────────────┼─────────────────┘
</span></span><span class="line"><span class="cl">│ │ └────────────────┐   │                                 │
</span></span><span class="line"><span class="cl">│ │    ┌─────────────┼───►─────────────────────────┐ ┌─────▼─────┐
</span></span><span class="line"><span class="cl">│ │    │ Nebula Graph│   │                         │ │           │
</span></span><span class="line"><span class="cl">│ └────┼─────┬───────┴───┼───────────┐     ┌─────┐ │ │           │
</span></span><span class="line"><span class="cl">│      │     │           │           │     │MetaD│ │ │           │
</span></span><span class="line"><span class="cl">│      │ ┌───▼──┐    ┌───▼──┐    ┌───▼──┐  └─────┘ │ │           │
</span></span><span class="line"><span class="cl">│ ┌────┼─►GraphD│    │GraphD│    │GraphD│          │ │           │
</span></span><span class="line"><span class="cl">│ │    │ └──────┘    └──────┘    └──────┘  ┌─────┐ │ │           │
</span></span><span class="line"><span class="cl">│ │    │ :9669                             │MetaD│ │ │  Elastic  │
</span></span><span class="line"><span class="cl">│ │    │ ┌────────┐ ┌────────┐ ┌────────┐  └─────┘ │ │  Search   │
</span></span><span class="line"><span class="cl">│ │    │ │        │ │        │ │        │          │ │  Cluster  │
</span></span><span class="line"><span class="cl">│ │    │ │StorageD│ │StorageD│ │StorageD│  ┌─────┐ │ │  :9200    │
</span></span><span class="line"><span class="cl">│ │    │ │        │ │        │ │        │  │MetaD│ │ │           │
</span></span><span class="line"><span class="cl">│ │    │ └────────┘ └────────┘ └────────┘  └─────┘ │ │           │
</span></span><span class="line"><span class="cl">│ │    ├───────────────────────────────────────────┤ │           │
</span></span><span class="line"><span class="cl">│ └────┤ Nebula Studio:7001                        │ │           │
</span></span><span class="line"><span class="cl">│      └───────────────────────────────────────────┘ └─────▲─────┘
</span></span><span class="line"><span class="cl">└──────────────────────────────────────────────────────────┘
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="穿针引线元数据发现" class="headerLink">
    <a href="#%e7%a9%bf%e9%92%88%e5%bc%95%e7%ba%bf%e5%85%83%e6%95%b0%e6%8d%ae%e5%8f%91%e7%8e%b0" class="header-mark"></a>4 穿针引线：元数据发现</h2><p>设置好基本环境后，让我们把所有东西穿起来。还记得我们有 ELT 一些数据到 PostgreSQL 吗？</p>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/167540494-01e3dbd2-6ab1-41d2-998e-3b79f755bdc7.png" title="https://user-images.githubusercontent.com/1651790/167540494-01e3dbd2-6ab1-41d2-998e-3b79f755bdc7.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/167540494-01e3dbd2-6ab1-41d2-998e-3b79f755bdc7.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/167540494-01e3dbd2-6ab1-41d2-998e-3b79f755bdc7.png"
            srcset="https://user-images.githubusercontent.com/1651790/167540494-01e3dbd2-6ab1-41d2-998e-3b79f755bdc7.png, https://user-images.githubusercontent.com/1651790/167540494-01e3dbd2-6ab1-41d2-998e-3b79f755bdc7.png 1.5x, https://user-images.githubusercontent.com/1651790/167540494-01e3dbd2-6ab1-41d2-998e-3b79f755bdc7.png 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/167540494-01e3dbd2-6ab1-41d2-998e-3b79f755bdc7.png">
    </a></figure></p>
<p>那么，我们如何让 Amundsen 发现有关这些数据和 ETL 的元数据呢？</p>
<h3 id="提取-postgres-元数据" class="headerLink">
    <a href="#%e6%8f%90%e5%8f%96-postgres-%e5%85%83%e6%95%b0%e6%8d%ae" class="header-mark"></a>4.1 提取 Postgres 元数据</h3><p>我们从数据源开始：首先是 Postgres。</p>
<p>我们为 python3 安装 Postgres 客户端：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo apt-get install libpq-dev
</span></span><span class="line"><span class="cl">pip3 install Psycopg2
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="执行-postgres-元数据-etl" class="headerLink">
    <a href="#%e6%89%a7%e8%a1%8c-postgres-%e5%85%83%e6%95%b0%e6%8d%ae-etl" class="header-mark"></a>4.1.1 执行 Postgres 元数据 ETL</h4><p>运行一个脚本来解析 Postgres 元数据：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">CREDENTIALS_POSTGRES_USER</span><span class="o">=</span>lineage_ref
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">CREDENTIALS_POSTGRES_PASSWORD</span><span class="o">=</span>lineage_ref
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">CREDENTIALS_POSTGRES_DATABASE</span><span class="o">=</span>warehouse
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">python3 example/scripts/sample_postgres_loader_nebula.py
</span></span></code></pre></td></tr></table>
</div>
</div><p>If you look into the code of the sample script for loading Postgres metadata to Nebula, the main lines are quite straightforward:</p>
<p>我们看看把 Postgres 元数据加载到 NebulaGraph 的示例脚本的代码，非常简单直接：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># part 1: PostgressMetadata --&gt; CSV --&gt; Nebula Graph</span>
</span></span><span class="line"><span class="cl"><span class="n">job</span> <span class="o">=</span> <span class="n">DefaultJob</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">      <span class="n">conf</span><span class="o">=</span><span class="n">job_config</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">task</span><span class="o">=</span><span class="n">DefaultTask</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">          <span class="n">extractor</span><span class="o">=</span><span class="n">PostgresMetadataExtractor</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">          <span class="n">loader</span><span class="o">=</span><span class="n">FsNebulaCSVLoader</span><span class="p">()),</span>
</span></span><span class="line"><span class="cl">      <span class="n">publisher</span><span class="o">=</span><span class="n">NebulaCsvPublisher</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="c1"># part 2: Metadata stored in NebulaGraph --&gt; Elasticsearch</span>
</span></span><span class="line"><span class="cl"><span class="n">extractor</span> <span class="o">=</span> <span class="n">NebulaSearchDataExtractor</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">task</span> <span class="o">=</span> <span class="n">SearchMetadatatoElasticasearchTask</span><span class="p">(</span><span class="n">extractor</span><span class="o">=</span><span class="n">extractor</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">job</span> <span class="o">=</span> <span class="n">DefaultJob</span><span class="p">(</span><span class="n">conf</span><span class="o">=</span><span class="n">job_config</span><span class="p">,</span> <span class="n">task</span><span class="o">=</span><span class="n">task</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>第一个工作路径是：<code>PostgressMetadata --&gt; CSV --&gt; Nebula Graph</code></p>
<ul>
<li><code>PostgresMetadataExtractor</code> 用于从 Postgres 中提取/提取元数据，可以参考文档（https://www.amundsen.io/amundsen/databuilder/#postgresmetadataextractor）。</li>
<li><code>FsNebulaCSVLoader</code> 用于将提取的数据中间放置为 CSV 文件</li>
<li><code>NebulaCsvPublisher</code> 用于将元数据以 CSV 的形式发布到 NebulaGraph</li>
</ul>
<p>第二个工作路径是：<code>Metadata stored in NebulaGraph --&gt; Elasticsearch</code></p>
<ul>
<li><code>NebulaSearchDataExtractor</code> 用于获取存储在 Nebula Graph 中的元数据</li>
<li><code>SearchMetadatatoElasticasearchTask</code> 用于使 Elasticsearch 对元数据进行索引。</li>
</ul>
<blockquote>
<p>请注意，在生产环境中，我们可以在脚本中或使用 Apache Airflow 等编排平台触发这些作业。</p>
</blockquote>
<h4 id="验证-postgres-中元数据的获取" class="headerLink">
    <a href="#%e9%aa%8c%e8%af%81-postgres-%e4%b8%ad%e5%85%83%e6%95%b0%e6%8d%ae%e7%9a%84%e8%8e%b7%e5%8f%96" class="header-mark"></a>4.1.2 验证 Postgres 中元数据的获取</h4><p>搜索<code>payments</code>或者直接访问http://localhost:5000/table_detail/warehouse/postgres/public/payments，你可以看到我们 Postgres 的元数据，比如：</p>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168475180-ebfaa188-268c-4fbe-a614-135d56d07e5d.png" title="https://user-images.githubusercontent.com/1651790/168475180-ebfaa188-268c-4fbe-a614-135d56d07e5d.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168475180-ebfaa188-268c-4fbe-a614-135d56d07e5d.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/168475180-ebfaa188-268c-4fbe-a614-135d56d07e5d.png"
            srcset="https://user-images.githubusercontent.com/1651790/168475180-ebfaa188-268c-4fbe-a614-135d56d07e5d.png, https://user-images.githubusercontent.com/1651790/168475180-ebfaa188-268c-4fbe-a614-135d56d07e5d.png 1.5x, https://user-images.githubusercontent.com/1651790/168475180-ebfaa188-268c-4fbe-a614-135d56d07e5d.png 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/168475180-ebfaa188-268c-4fbe-a614-135d56d07e5d.png">
    </a></figure></p>
<p>然后，像上面的屏幕截图一样，可以轻松完成元数据管理操作，如添加标签、所有者和描述。</p>
<h3 id="提取-dbt-元数据" class="headerLink">
    <a href="#%e6%8f%90%e5%8f%96-dbt-%e5%85%83%e6%95%b0%e6%8d%ae" class="header-mark"></a>4.2 提取 dbt 元数据</h3><p>实际上，我们也可以从 <a href="https://www.getdbt.com/" target="_blank" rel="noopener noreferrer">dbt</a> 本身提取元数据。</p>
<p>Amundsen <a href="https://www.amundsen.io/amundsen/databuilder/#dbtextractor" target="_blank" rel="noopener noreferrer">DbtExtractor</a> 会解析 <code>catalog.json</code> 或 <code>manifest.json</code> 文件以将元数据加载到 Amundsen 存储（NebulaGraph 和 Elasticsearch )。</p>
<p>在上面的 meltano 章节中，我们已经使用 <code>meltano invoke dbt docs generate</code> 生成了这个文件：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">14:23:15  Done.
</span></span><span class="line"><span class="cl">14:23:15  Building catalog
</span></span><span class="line"><span class="cl">14:23:15  Catalog written to /home/ubuntu/ref-data-lineage/meltano_example_implementations/meltano_projects/singer_dbt_jaffle/.meltano/transformers/dbt/target/catalog.json
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="dbt-元数据-etl-的执行" class="headerLink">
    <a href="#dbt-%e5%85%83%e6%95%b0%e6%8d%ae-etl-%e7%9a%84%e6%89%a7%e8%a1%8c" class="header-mark"></a>4.2.1 dbt 元数据 ETL 的执行</h4><p>我们试着解析示例 dbt 文件中的元数据吧：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ls -l example/sample_data/dbt/
</span></span><span class="line"><span class="cl">total <span class="m">184</span>
</span></span><span class="line"><span class="cl">-rw-rw-r-- <span class="m">1</span> w w   <span class="m">5320</span> May <span class="m">15</span> 07:17 catalog.json
</span></span><span class="line"><span class="cl">-rw-rw-r-- <span class="m">1</span> w w <span class="m">177163</span> May <span class="m">15</span> 07:17 manifest.json
</span></span></code></pre></td></tr></table>
</div>
</div><p>我写的这个示例的加载例子如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">python3 example/scripts/sample_dbt_loader_nebula.py
</span></span></code></pre></td></tr></table>
</div>
</div><p>其中主要的代码如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># part 1: Dbt manifest --&gt; CSV --&gt; Nebula Graph</span>
</span></span><span class="line"><span class="cl"><span class="n">job</span> <span class="o">=</span> <span class="n">DefaultJob</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">      <span class="n">conf</span><span class="o">=</span><span class="n">job_config</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">task</span><span class="o">=</span><span class="n">DefaultTask</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">          <span class="n">extractor</span><span class="o">=</span><span class="n">DbtExtractor</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">          <span class="n">loader</span><span class="o">=</span><span class="n">FsNebulaCSVLoader</span><span class="p">()),</span>
</span></span><span class="line"><span class="cl">      <span class="n">publisher</span><span class="o">=</span><span class="n">NebulaCsvPublisher</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="c1"># part 2: Metadata stored in NebulaGraph --&gt; Elasticsearch</span>
</span></span><span class="line"><span class="cl"><span class="n">extractor</span> <span class="o">=</span> <span class="n">NebulaSearchDataExtractor</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">task</span> <span class="o">=</span> <span class="n">SearchMetadatatoElasticasearchTask</span><span class="p">(</span><span class="n">extractor</span><span class="o">=</span><span class="n">extractor</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">job</span> <span class="o">=</span> <span class="n">DefaultJob</span><span class="p">(</span><span class="n">conf</span><span class="o">=</span><span class="n">job_config</span><span class="p">,</span> <span class="n">task</span><span class="o">=</span><span class="n">task</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>它和 Postgres 元数据 ETL 的唯一区别是 <code>extractor=DbtExtractor()</code>，它带有以下配置以获取有关 dbt 项目的以下信息：</p>
<ul>
<li>数据库名称</li>
<li>目录_json</li>
<li>manifest_json</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">job_config</span> <span class="o">=</span> <span class="n">ConfigFactory</span><span class="o">.</span><span class="n">from_dict</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;extractor.dbt.database_name&#39;</span><span class="p">:</span> <span class="n">database_name</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;extractor.dbt.catalog_json&#39;</span><span class="p">:</span> <span class="n">catalog_file_loc</span><span class="p">,</span>  <span class="c1"># File</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;extractor.dbt.manifest_json&#39;</span><span class="p">:</span> <span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">manifest_data</span><span class="p">),</span>  <span class="c1"># JSON Dumped objecy</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;extractor.dbt.source_url&#39;</span><span class="p">:</span> <span class="n">source_url</span><span class="p">})</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="验证-dbt-抓取结果" class="headerLink">
    <a href="#%e9%aa%8c%e8%af%81-dbt-%e6%8a%93%e5%8f%96%e7%bb%93%e6%9e%9c" class="header-mark"></a>4.2.2 验证 dbt 抓取结果</h4><p>搜索 <code>dbt_demo</code> 或者直接访问 http://localhost:5000/table_detail/dbt_demo/snowflake/public/raw_inventory_value，可以看到</p>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168479864-2f73ea73-265f-4cd2-999f-e7effbaf3ec1.png" title="https://user-images.githubusercontent.com/1651790/168479864-2f73ea73-265f-4cd2-999f-e7effbaf3ec1.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168479864-2f73ea73-265f-4cd2-999f-e7effbaf3ec1.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/168479864-2f73ea73-265f-4cd2-999f-e7effbaf3ec1.png"
            srcset="https://user-images.githubusercontent.com/1651790/168479864-2f73ea73-265f-4cd2-999f-e7effbaf3ec1.png, https://user-images.githubusercontent.com/1651790/168479864-2f73ea73-265f-4cd2-999f-e7effbaf3ec1.png 1.5x, https://user-images.githubusercontent.com/1651790/168479864-2f73ea73-265f-4cd2-999f-e7effbaf3ec1.png 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/168479864-2f73ea73-265f-4cd2-999f-e7effbaf3ec1.png">
    </a></figure></p>
<blockquote>
<p>小提示：我们可以选择启用 DEBUG log 级别去看已发送到 Elasticsearch 和 NebulaGraph 的内容。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl"><span class="gd">- logging.basicConfig(level=logging.INFO)
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+ logging.basicConfig(level=logging.DEBUG)
</span></span></span></code></pre></td></tr></table>
</div>
</div></blockquote>
<p>或者，在 NebulaStudio 中探索导入的数据：</p>
<p>首先，点击 “Start with Vertices”，填写顶点 vid：<code>snowflake://dbt_demo.public/fact_warehouse_inventory</code></p>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168480047-26c28cde-5df8-40af-8da4-6ab0203094e2.png" title="https://user-images.githubusercontent.com/1651790/168480047-26c28cde-5df8-40af-8da4-6ab0203094e2.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168480047-26c28cde-5df8-40af-8da4-6ab0203094e2.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/168480047-26c28cde-5df8-40af-8da4-6ab0203094e2.png"
            srcset="https://user-images.githubusercontent.com/1651790/168480047-26c28cde-5df8-40af-8da4-6ab0203094e2.png, https://user-images.githubusercontent.com/1651790/168480047-26c28cde-5df8-40af-8da4-6ab0203094e2.png 1.5x, https://user-images.githubusercontent.com/1651790/168480047-26c28cde-5df8-40af-8da4-6ab0203094e2.png 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/168480047-26c28cde-5df8-40af-8da4-6ab0203094e2.png">
    </a></figure></p>
<p>然后，我们可以看到顶点显示为粉红色的点。 让我们修改 <code>Expand</code> / ”拓展“选项：</p>
<ul>
<li>方向：双向</li>
<li>步数：单向、三步</li>
</ul>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168480101-7b7b5824-06d9-4155-87c9-798db0dc7612.png" title="https://user-images.githubusercontent.com/1651790/168480101-7b7b5824-06d9-4155-87c9-798db0dc7612.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168480101-7b7b5824-06d9-4155-87c9-798db0dc7612.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/168480101-7b7b5824-06d9-4155-87c9-798db0dc7612.png"
            srcset="https://user-images.githubusercontent.com/1651790/168480101-7b7b5824-06d9-4155-87c9-798db0dc7612.png, https://user-images.githubusercontent.com/1651790/168480101-7b7b5824-06d9-4155-87c9-798db0dc7612.png 1.5x, https://user-images.githubusercontent.com/1651790/168480101-7b7b5824-06d9-4155-87c9-798db0dc7612.png 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/168480101-7b7b5824-06d9-4155-87c9-798db0dc7612.png">
    </a></figure></p>
<p>并双击顶点（点），它将双向拓展 3 步：</p>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168480280-1dc88d1b-1f1e-48fd-9997-972965522ef5.png" title="https://user-images.githubusercontent.com/1651790/168480280-1dc88d1b-1f1e-48fd-9997-972965522ef5.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168480280-1dc88d1b-1f1e-48fd-9997-972965522ef5.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/168480280-1dc88d1b-1f1e-48fd-9997-972965522ef5.png"
            srcset="https://user-images.githubusercontent.com/1651790/168480280-1dc88d1b-1f1e-48fd-9997-972965522ef5.png, https://user-images.githubusercontent.com/1651790/168480280-1dc88d1b-1f1e-48fd-9997-972965522ef5.png 1.5x, https://user-images.githubusercontent.com/1651790/168480280-1dc88d1b-1f1e-48fd-9997-972965522ef5.png 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/168480280-1dc88d1b-1f1e-48fd-9997-972965522ef5.png">
    </a></figure></p>
<p>从上边这个截图里我们可以发现，在可视化之后的图数据库中，这些元数据可以很容易被查看、分析，并从中获得洞察。</p>
<blockquote>
<p>小贴士，您可以点击 👁 图标选择一些要显示的属性，我在截图之前就是通过它让一些信息显示出来的。</p>
</blockquote>
<p>而且，我们在 NebulaStudio 中看到的也与 Amundsen 元数据服务的数据模型相呼应：</p>
<p><figure><a class="lightgallery" href="https://www.amundsen.io/amundsen/img/graph_model.png" title="https://www.amundsen.io/amundsen/img/graph_model.png" data-thumbnail="https://www.amundsen.io/amundsen/img/graph_model.png">
        <img
            
            loading="lazy"
            src="https://www.amundsen.io/amundsen/img/graph_model.png"
            srcset="https://www.amundsen.io/amundsen/img/graph_model.png, https://www.amundsen.io/amundsen/img/graph_model.png 1.5x, https://www.amundsen.io/amundsen/img/graph_model.png 2x"
            sizes="auto"
            alt="https://www.amundsen.io/amundsen/img/graph_model.png">
    </a></figure></p>
<p>最后，请记住我们曾利用 dbt 来转换meltano 中的一些数据，并且清单文件路径是<code>.meltano/transformers/dbt/target/catalog.json</code>，您可以尝试创建一个数据构建器作业来导入它。</p>
<h3 id="提取-superset-中的元数据" class="headerLink">
    <a href="#%e6%8f%90%e5%8f%96-superset-%e4%b8%ad%e7%9a%84%e5%85%83%e6%95%b0%e6%8d%ae" class="header-mark"></a>4.3 提取 Superset 中的元数据</h3><p>Amundsen 的 Superset extractor 可以获取</p>
<ul>
<li>Dashboard 元数据抽取 <a href="https://www.amundsen.io/amundsen/databuilder/databuilder/extractor/dashboard/apache_superset/apache_superset_metadata_extractor.py" target="_blank" rel="noopener noreferrer">https://www.amundsen.io/amundsen/databuilder/databuilder/extractor/dashboard/apache_superset/apache_superset_metadata_extractor.py</a></li>
<li>图表元数据抽取 <a href="https://www.amundsen.io/amundsen/databuilder/databuilder" target="_blank" rel="noopener noreferrer">https://www.amundsen.io/amundsen/databuilder/databuilder</a> /extractor/dashboard/apache_superset/apache_superset_chart_extractor.py</li>
<li>Superset 元素与数据源（表）的关系抽取 <a href="https://www.amundsen.io/amundsen/databuilder/databuilder/extractor/dashboard/apache_superset/apache_superset_table_extractor.py" target="_blank" rel="noopener noreferrer">https://www.amundsen.io/amundsen/databuilder/databuilder/extractor/dashboard/apache_superset/apache_superset_table_extractor.py</a></li>
</ul>
<p>咱们现在就尝试摄取之前创建的 Superset Dashboard 的元数据。</p>
<h4 id="superset-元数据-etl-的执行" class="headerLink">
    <a href="#superset-%e5%85%83%e6%95%b0%e6%8d%ae-etl-%e7%9a%84%e6%89%a7%e8%a1%8c" class="header-mark"></a>4.3.1 Superset 元数据 ETL 的执行</h4><p>下边执行的示例 Superset 提取脚本可以从中获取数据并将元数据加载到 NebulaGraph 和 Elasticsearch 中。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">python3</span> <span class="n">sample_superset_data_loader_nebula</span><span class="o">.</span><span class="n">py</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果我们将日志记录级别设置为“DEBUG”，我们实际上可以看到这些中间的过程日志：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># fetching metadata from superset</span>
</span></span><span class="line"><span class="cl"><span class="n">DEBUG</span><span class="p">:</span><span class="n">urllib3</span><span class="o">.</span><span class="n">connectionpool</span><span class="p">:</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">localhost</span><span class="p">:</span><span class="mi">8088</span> <span class="s2">&#34;POST /api/v1/security/login HTTP/1.1&#34;</span> <span class="mi">200</span> <span class="mi">280</span>
</span></span><span class="line"><span class="cl"><span class="n">INFO</span><span class="p">:</span><span class="n">databuilder</span><span class="o">.</span><span class="n">task</span><span class="o">.</span><span class="n">task</span><span class="p">:</span><span class="n">Running</span> <span class="n">a</span> <span class="n">task</span>
</span></span><span class="line"><span class="cl"><span class="n">DEBUG</span><span class="p">:</span><span class="n">urllib3</span><span class="o">.</span><span class="n">connectionpool</span><span class="p">:</span><span class="n">Starting</span> <span class="n">new</span> <span class="n">HTTP</span> <span class="n">connection</span> <span class="p">(</span><span class="mi">1</span><span class="p">):</span> <span class="n">localhost</span><span class="p">:</span><span class="mi">8088</span>
</span></span><span class="line"><span class="cl"><span class="n">DEBUG</span><span class="p">:</span><span class="n">urllib3</span><span class="o">.</span><span class="n">connectionpool</span><span class="p">:</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">localhost</span><span class="p">:</span><span class="mi">8088</span> <span class="s2">&#34;GET /api/v1/dashboard?q=(page_size:20,page:0,order_direction:desc) HTTP/1.1&#34;</span> <span class="mi">308</span> <span class="mi">374</span>
</span></span><span class="line"><span class="cl"><span class="n">DEBUG</span><span class="p">:</span><span class="n">urllib3</span><span class="o">.</span><span class="n">connectionpool</span><span class="p">:</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">localhost</span><span class="p">:</span><span class="mi">8088</span> <span class="s2">&#34;GET /api/v1/dashboard/?q=(page_size:20,page:0,order_direction:desc) HTTP/1.1&#34;</span> <span class="mi">200</span> <span class="mi">1058</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># insert Dashboard</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">DEBUG</span><span class="p">:</span><span class="n">databuilder</span><span class="o">.</span><span class="n">publisher</span><span class="o">.</span><span class="n">nebula_csv_publisher</span><span class="p">:</span><span class="n">Query</span><span class="p">:</span> <span class="n">INSERT</span> <span class="n">VERTEX</span> <span class="err">`</span><span class="n">Dashboard</span><span class="err">`</span> <span class="p">(</span><span class="err">`</span><span class="n">dashboard_url</span><span class="err">`</span><span class="p">,</span> <span class="err">`</span><span class="n">name</span><span class="err">`</span><span class="p">,</span> <span class="n">published_tag</span><span class="p">,</span> <span class="n">publisher_last_updated_epoch_ms</span><span class="p">)</span> <span class="n">VALUES</span>  <span class="s2">&#34;superset_dashboard://my_cluster.1/3&#34;</span><span class="p">:(</span><span class="s2">&#34;http://localhost:8088/superset/dashboard/3/&#34;</span><span class="p">,</span><span class="s2">&#34;my_dashboard&#34;</span><span class="p">,</span><span class="s2">&#34;unique_tag&#34;</span><span class="p">,</span><span class="n">timestamp</span><span class="p">());</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># insert a DASHBOARD_WITH_TABLE relationship/edge</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">INFO</span><span class="p">:</span><span class="n">databuilder</span><span class="o">.</span><span class="n">publisher</span><span class="o">.</span><span class="n">nebula_csv_publisher</span><span class="p">:</span><span class="n">Importing</span> <span class="n">data</span> <span class="ow">in</span> <span class="n">edge</span> <span class="n">files</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;/tmp/amundsen/dashboard/relationships/Dashboard_Table_DASHBOARD_WITH_TABLE.csv&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">DEBUG</span><span class="p">:</span><span class="n">databuilder</span><span class="o">.</span><span class="n">publisher</span><span class="o">.</span><span class="n">nebula_csv_publisher</span><span class="p">:</span><span class="n">Query</span><span class="p">:</span>
</span></span><span class="line"><span class="cl"><span class="n">INSERT</span> <span class="n">edge</span> <span class="err">`</span><span class="n">DASHBOARD_WITH_TABLE</span><span class="err">`</span> <span class="p">(</span><span class="err">`</span><span class="n">END_LABEL</span><span class="err">`</span><span class="p">,</span> <span class="err">`</span><span class="n">START_LABEL</span><span class="err">`</span><span class="p">,</span> <span class="n">published_tag</span><span class="p">,</span> <span class="n">publisher_last_updated_epoch_ms</span><span class="p">)</span> <span class="n">VALUES</span> <span class="s2">&#34;superset_dashboard://my_cluster.1/3&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;postgresql+psycopg2://my_cluster.warehouse/orders&#34;</span><span class="p">:(</span><span class="s2">&#34;Table&#34;</span><span class="p">,</span><span class="s2">&#34;Dashboard&#34;</span><span class="p">,</span><span class="s2">&#34;unique_tag&#34;</span><span class="p">,</span> <span class="n">timestamp</span><span class="p">()),</span> <span class="s2">&#34;superset_dashboard://my_cluster.1/3&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;postgresql+psycopg2://my_cluster.warehouse/customers&#34;</span><span class="p">:(</span><span class="s2">&#34;Table&#34;</span><span class="p">,</span><span class="s2">&#34;Dashboard&#34;</span><span class="p">,</span><span class="s2">&#34;unique_tag&#34;</span><span class="p">,</span> <span class="n">timestamp</span><span class="p">());</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="验证-superset-dashboard-元数据" class="headerLink">
    <a href="#%e9%aa%8c%e8%af%81-superset-dashboard-%e5%85%83%e6%95%b0%e6%8d%ae" class="header-mark"></a>4.3.2 验证 Superset Dashboard 元数据</h4><p>通过在 Amundsen 中搜索它，我们现在可以获得 Dashboard 信息。</p>
<p>我们也可以从 NebulaStudio 进行验证。</p>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168719624-738323dd-4c6e-475f-a370-f149181c6184.png" title="https://user-images.githubusercontent.com/1651790/168719624-738323dd-4c6e-475f-a370-f149181c6184.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168719624-738323dd-4c6e-475f-a370-f149181c6184.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/168719624-738323dd-4c6e-475f-a370-f149181c6184.png"
            srcset="https://user-images.githubusercontent.com/1651790/168719624-738323dd-4c6e-475f-a370-f149181c6184.png, https://user-images.githubusercontent.com/1651790/168719624-738323dd-4c6e-475f-a370-f149181c6184.png 1.5x, https://user-images.githubusercontent.com/1651790/168719624-738323dd-4c6e-475f-a370-f149181c6184.png 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/168719624-738323dd-4c6e-475f-a370-f149181c6184.png">
    </a></figure></p>
<blockquote>
<p>注：可以参阅 <a href="https://www.amundsen.io/amundsen/databuilder/docs/dashboard_ingestion_guide/" target="_blank" rel="noopener noreferrer">Dashboard 抓取指南</a> 中的 Amundsen Dashboard 图建模：</p>
<p><figure><a class="lightgallery" href="https://www.amundsen.io/amundsen/databuilder/docs/assets/dashboard_graph_modeling.png?raw=true" title="dashboard_graph_modeling" data-thumbnail="https://www.amundsen.io/amundsen/databuilder/docs/assets/dashboard_graph_modeling.png?raw=true">
        <img
            
            loading="lazy"
            src="https://www.amundsen.io/amundsen/databuilder/docs/assets/dashboard_graph_modeling.png?raw=true"
            srcset="https://www.amundsen.io/amundsen/databuilder/docs/assets/dashboard_graph_modeling.png?raw=true, https://www.amundsen.io/amundsen/databuilder/docs/assets/dashboard_graph_modeling.png?raw=true 1.5x, https://www.amundsen.io/amundsen/databuilder/docs/assets/dashboard_graph_modeling.png?raw=true 2x"
            sizes="auto"
            alt="dashboard_graph_modeling">
    </a></figure></p>
</blockquote>
<h3 id="用-superset-预览数据" class="headerLink">
    <a href="#%e7%94%a8-superset-%e9%a2%84%e8%a7%88%e6%95%b0%e6%8d%ae" class="header-mark"></a>4.4 用 Superset 预览数据</h3><p>Superset可以用来预览这样的表格数据。 相应的文档可以参考 <a href="https://www.amundsen.io/amundsen/frontend/docs/configuration/#preview-client" target="_blank" rel="noopener noreferrer">https://www.amundsen.io/amundsen/frontend/docs/configuration/#preview-client</a> ，其中 <code>/superset/sql_json/</code> 的 API 被 Amundsen Frontend service 调用，取得预览信息。</p>
<p><figure><a class="lightgallery" href="https://github.com/amundsen-io/amundsenfrontendlibrary/blob/master/docs/img/data_preview.png?raw=true" title="https://github.com/amundsen-io/amundsenfrontendlibrary/blob/master/docs/img/data_preview.png?raw=true" data-thumbnail="https://github.com/amundsen-io/amundsenfrontendlibrary/blob/master/docs/img/data_preview.png?raw=true">
        <img
            
            loading="lazy"
            src="https://github.com/amundsen-io/amundsenfrontendlibrary/blob/master/docs/img/data_preview.png?raw=true"
            srcset="https://github.com/amundsen-io/amundsenfrontendlibrary/blob/master/docs/img/data_preview.png?raw=true, https://github.com/amundsen-io/amundsenfrontendlibrary/blob/master/docs/img/data_preview.png?raw=true 1.5x, https://github.com/amundsen-io/amundsenfrontendlibrary/blob/master/docs/img/data_preview.png?raw=true 2x"
            sizes="auto"
            alt="https://github.com/amundsen-io/amundsenfrontendlibrary/blob/master/docs/img/data_preview.png?raw=true">
    </a></figure></p>
<h3 id="开启数据血缘信息" class="headerLink">
    <a href="#%e5%bc%80%e5%90%af%e6%95%b0%e6%8d%ae%e8%a1%80%e7%bc%98%e4%bf%a1%e6%81%af" class="header-mark"></a>4.5 开启数据血缘信息</h3><p>默认情况下，数据血缘是关闭的，我们可以通过以下方式启用它：</p>
<ol start="0">
<li><code>cd</code> 到 Amundsen 代码仓库下，这也是我们运行 <code>docker-compose -f docker-amundsen-nebula.yml up</code> 命令的地方</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> amundsen
</span></span></code></pre></td></tr></table>
</div>
</div><ol>
<li>修改 frontend 下的 typescript 配置</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl"><span class="gd">--- a/frontend/amundsen_application/static/js/config/config-default.ts
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+++ b/frontend/amundsen_application/static/js/config/config-default.ts
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>   tableLineage: {
</span></span><span class="line"><span class="cl"><span class="gd">-    inAppListEnabled: false,
</span></span></span><span class="line"><span class="cl"><span class="gd">-    inAppPageEnabled: false,
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+    inAppListEnabled: true,
</span></span></span><span class="line"><span class="cl"><span class="gi">+    inAppPageEnabled: true,
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>     externalEnabled: false,
</span></span><span class="line"><span class="cl">     iconPath: &#39;PATH_TO_ICON&#39;,
</span></span><span class="line"><span class="cl">     isBeta: false,
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="2">
<li>重新构建 docker 镜像，其中将重建前端图像。</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker-compose -f docker-amundsen-nebula.yml build
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后，重新运行 <code>up -d</code> 以确保前端用新的配置：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker-compose -f docker-amundsen-nebula.yml up -d
</span></span></code></pre></td></tr></table>
</div>
</div><p>结果大概长这样子：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker-compose -f docker-amundsen-nebula.yml up -d
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">Recreating amundsenfrontend           ... <span class="k">done</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>之后，我们可以访问 http://localhost:5000/lineage/table/gold/hive/test_schema/test_table1 看到 <code>Lineage （beta）</code> 血缘按钮已经显示出来了：</p>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168838731-79d0e3bc-439e-4f6b-8ef7-83b37e9bcb12.png" title="https://user-images.githubusercontent.com/1651790/168838731-79d0e3bc-439e-4f6b-8ef7-83b37e9bcb12.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168838731-79d0e3bc-439e-4f6b-8ef7-83b37e9bcb12.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/168838731-79d0e3bc-439e-4f6b-8ef7-83b37e9bcb12.png"
            srcset="https://user-images.githubusercontent.com/1651790/168838731-79d0e3bc-439e-4f6b-8ef7-83b37e9bcb12.png, https://user-images.githubusercontent.com/1651790/168838731-79d0e3bc-439e-4f6b-8ef7-83b37e9bcb12.png 1.5x, https://user-images.githubusercontent.com/1651790/168838731-79d0e3bc-439e-4f6b-8ef7-83b37e9bcb12.png 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/168838731-79d0e3bc-439e-4f6b-8ef7-83b37e9bcb12.png">
    </a></figure></p>
<p>我们可以点击 <code>Downstream</code> 在存在的时候查看该表的下游资源：</p>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168839251-efd523af-d729-44cf-a40b-fa83a0852654.png" title="https://user-images.githubusercontent.com/1651790/168839251-efd523af-d729-44cf-a40b-fa83a0852654.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168839251-efd523af-d729-44cf-a40b-fa83a0852654.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/168839251-efd523af-d729-44cf-a40b-fa83a0852654.png"
            srcset="https://user-images.githubusercontent.com/1651790/168839251-efd523af-d729-44cf-a40b-fa83a0852654.png, https://user-images.githubusercontent.com/1651790/168839251-efd523af-d729-44cf-a40b-fa83a0852654.png 1.5x, https://user-images.githubusercontent.com/1651790/168839251-efd523af-d729-44cf-a40b-fa83a0852654.png 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/168839251-efd523af-d729-44cf-a40b-fa83a0852654.png">
    </a></figure></p>
<p>或者点血缘按钮查看血缘的图表式：</p>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168838814-e6ff5152-c24b-470e-a46a-48f183ba7201.png" title="https://user-images.githubusercontent.com/1651790/168838814-e6ff5152-c24b-470e-a46a-48f183ba7201.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168838814-e6ff5152-c24b-470e-a46a-48f183ba7201.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/168838814-e6ff5152-c24b-470e-a46a-48f183ba7201.png"
            srcset="https://user-images.githubusercontent.com/1651790/168838814-e6ff5152-c24b-470e-a46a-48f183ba7201.png, https://user-images.githubusercontent.com/1651790/168838814-e6ff5152-c24b-470e-a46a-48f183ba7201.png 1.5x, https://user-images.githubusercontent.com/1651790/168838814-e6ff5152-c24b-470e-a46a-48f183ba7201.png 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/168838814-e6ff5152-c24b-470e-a46a-48f183ba7201.png">
    </a></figure></p>
<p>也有用于血缘查询的 API。 这个例子中我们用 cURL 调用下这个 API：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run -it --rm --net container:amundsenfrontend nicolaka/netshoot
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">curl <span class="s2">&#34;http://amundsenmetadata:5002/table/snowflake://dbt_demo.public/raw_inventory_value/lineage?depth=3&amp;direction=both&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>上面的 API 调用是查询上游和下游方向的 linage，表 <code>snowflake://dbt_demo.public/raw_inventory_value</code> 的深度为 3。</p>
<p>结果应该是这样的：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;depth&#34;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;downstream_entities&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;level&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;usage&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;key&#34;</span><span class="p">:</span> <span class="s2">&#34;snowflake://dbt_demo.public/fact_daily_expenses&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;parent&#34;</span><span class="p">:</span> <span class="s2">&#34;snowflake://dbt_demo.public/fact_warehouse_inventory&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;badges&#34;</span><span class="p">:</span> <span class="p">[],</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;source&#34;</span><span class="p">:</span> <span class="s2">&#34;snowflake&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;level&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;usage&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;key&#34;</span><span class="p">:</span> <span class="s2">&#34;snowflake://dbt_demo.public/fact_warehouse_inventory&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;parent&#34;</span><span class="p">:</span> <span class="s2">&#34;snowflake://dbt_demo.public/raw_inventory_value&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;badges&#34;</span><span class="p">:</span> <span class="p">[],</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;source&#34;</span><span class="p">:</span> <span class="s2">&#34;snowflake&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;key&#34;</span><span class="p">:</span> <span class="s2">&#34;snowflake://dbt_demo.public/raw_inventory_value&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;direction&#34;</span><span class="p">:</span> <span class="s2">&#34;both&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;upstream_entities&#34;</span><span class="p">:</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>实际上，这个血缘数据就是在我们的 <a href="https://github.com/amundsen-io/amundsen/blob/main/databuilder/databuilder/extractor/dbt_extractor.py" target="_blank" rel="noopener noreferrer">DbtExtractor</a> 执行期间提取和加载的，其中 <code>extractor .dbt.{DbtExtractor.EXTRACT_LINEAGE}</code> 默认为 <code>True</code>，因此创建了血缘元数据并将其加载到了 Amundsen。</p>
<h4 id="在-nebulagraph-中洞察血缘" class="headerLink">
    <a href="#%e5%9c%a8-nebulagraph-%e4%b8%ad%e6%b4%9e%e5%af%9f%e8%a1%80%e7%bc%98" class="header-mark"></a>4.5.1 在 NebulaGraph 中洞察血缘</h4><p>使用图数据库作为元数据存储的两个优点是：</p>
<ul>
<li>图查询本身是一个灵活的 DSL for lineage API，例如，这个查询帮助我们执行 Amundsen 元数据 API 的等价的查询：</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">t</span><span class="p">:</span><span class="o">`</span><span class="k">Table</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">HAS_UPSTREAM</span><span class="o">`|</span><span class="p">:</span><span class="o">`</span><span class="n">HAS_DOWNSTREAM</span><span class="o">`</span><span class="w"> </span><span class="o">*</span><span class="mi">1</span><span class="p">..</span><span class="mi">3</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">t</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;snowflake://dbt_demo.public/raw_inventory_value&#34;</span><span class="w"> </span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>我们现在甚至可以在 NebulaGraph Studio 或者 Explorer 的控制台中查询它</li>
</ul>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168844882-ca3d0587-7946-4e17-8264-9dc973a44673.png" title="https://user-images.githubusercontent.com/1651790/168844882-ca3d0587-7946-4e17-8264-9dc973a44673.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168844882-ca3d0587-7946-4e17-8264-9dc973a44673.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/168844882-ca3d0587-7946-4e17-8264-9dc973a44673.png"
            srcset="https://user-images.githubusercontent.com/1651790/168844882-ca3d0587-7946-4e17-8264-9dc973a44673.png, https://user-images.githubusercontent.com/1651790/168844882-ca3d0587-7946-4e17-8264-9dc973a44673.png 1.5x, https://user-images.githubusercontent.com/1651790/168844882-ca3d0587-7946-4e17-8264-9dc973a44673.png 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/168844882-ca3d0587-7946-4e17-8264-9dc973a44673.png">
    </a></figure></p>
<p>​    然后渲染这个结果：</p>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168845155-b0e7a5ce-3ddf-4cc9-89a3-aaf1bbb0f5ec.png" title="https://user-images.githubusercontent.com/1651790/168845155-b0e7a5ce-3ddf-4cc9-89a3-aaf1bbb0f5ec.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168845155-b0e7a5ce-3ddf-4cc9-89a3-aaf1bbb0f5ec.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/168845155-b0e7a5ce-3ddf-4cc9-89a3-aaf1bbb0f5ec.png"
            srcset="https://user-images.githubusercontent.com/1651790/168845155-b0e7a5ce-3ddf-4cc9-89a3-aaf1bbb0f5ec.png, https://user-images.githubusercontent.com/1651790/168845155-b0e7a5ce-3ddf-4cc9-89a3-aaf1bbb0f5ec.png 1.5x, https://user-images.githubusercontent.com/1651790/168845155-b0e7a5ce-3ddf-4cc9-89a3-aaf1bbb0f5ec.png 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/168845155-b0e7a5ce-3ddf-4cc9-89a3-aaf1bbb0f5ec.png">
    </a></figure></p>
<h4 id="提取数据血缘" class="headerLink">
    <a href="#%e6%8f%90%e5%8f%96%e6%95%b0%e6%8d%ae%e8%a1%80%e7%bc%98" class="header-mark"></a>4.5.2 提取数据血缘</h4><p>这些血缘信息是需要我们明确指定、获取的，获取的方式可以是自己写的 extractor，也可以是一些已经有的方式。比如 dbt 的 extractor和 Open Lineage 项目的 Amundsen extractor。</p>
<h5 id="通过-dbt" class="headerLink">
    <a href="#%e9%80%9a%e8%bf%87-dbt" class="header-mark"></a>4.5.2.1 通过 dbt</h5><p>这个在刚才已经展示过了，Dbt 的 Extractor 会从表级别获取血缘和其他 dbt 中产生的元数据信息一起被拿到。</p>
<h5 id="通过-open-lineage" class="headerLink">
    <a href="#%e9%80%9a%e8%bf%87-open-lineage" class="header-mark"></a>4.5.2.2 通过 Open Lineage</h5><p>Amundsen 中的另一个开箱即用的血缘 Extractor 是 <a href="https://www.amundsen.io/amundsen/databuilder/#openlineagetablelineageextractor" target="_blank" rel="noopener noreferrer">OpenLineageTableLineageExtractor</a>。</p>
<p><a href="https://openlineage.io/" target="_blank" rel="noopener noreferrer">Open Lineage</a> 是一个开放的框架，可以将不同来源的血统数据收集到一个地方，它可以将血统信息输出为 JSON 文件：https://www.amundsen.io/amundsen/databuilder/#openlineagetablelineageextractor</p>
<p>下边是它的 Amundsen data builder 例子：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">dict_config</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">    <span class="sa">f</span><span class="s1">&#39;extractor.openlineage_tablelineage.</span><span class="si">{</span><span class="n">OpenLineageTableLineageExtractor</span><span class="o">.</span><span class="n">CLUSTER_NAME</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">:</span> <span class="s1">&#39;datalab&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="sa">f</span><span class="s1">&#39;extractor.openlineage_tablelineage.</span><span class="si">{</span><span class="n">OpenLineageTableLineageExtractor</span><span class="o">.</span><span class="n">OL_DATASET_NAMESPACE_OVERRIDE</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">:</span> <span class="s1">&#39;hive_table&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="sa">f</span><span class="s1">&#39;extractor.openlineage_tablelineage.</span><span class="si">{</span><span class="n">OpenLineageTableLineageExtractor</span><span class="o">.</span><span class="n">TABLE_LINEAGE_FILE_LOCATION</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">:</span> <span class="s1">&#39;input_dir/openlineage_nd.json&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">task</span> <span class="o">=</span> <span class="n">DefaultTask</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">extractor</span><span class="o">=</span><span class="n">OpenLineageTableLineageExtractor</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">    <span class="n">loader</span><span class="o">=</span><span class="n">FsNebulaCSVLoader</span><span class="p">())</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="回顾" class="headerLink">
    <a href="#%e5%9b%9e%e9%a1%be" class="header-mark"></a>5 回顾</h2><p>整套元数据治理/发现的方案思路如下：</p>
<ul>
<li>将整个数据技术栈中的组件作为元数据源（从任何数据库、数仓，到 dbt、Airflow、Openlineage、Superset 等各级项目）</li>
<li>使用 Databuilder（作为脚本或 DAG）运行元数据 ETL，以使用 NebulaGraph 和 Elasticsearch 存储和索引</li>
<li>从前端 UI（使用 Superset 预览）或 API 去使用、消费、管理和发现元数据</li>
<li>通过查询和 UI 对 NebulaGraph，我们可以获得更多的可能性、灵活性和数据、血缘的洞察</li>
</ul>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168849779-4826f50e-ff87-4e78-b17f-076f91182c43.svg" title="https://user-images.githubusercontent.com/1651790/168849779-4826f50e-ff87-4e78-b17f-076f91182c43.svg" data-thumbnail="https://user-images.githubusercontent.com/1651790/168849779-4826f50e-ff87-4e78-b17f-076f91182c43.svg">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/168849779-4826f50e-ff87-4e78-b17f-076f91182c43.svg"
            srcset="https://user-images.githubusercontent.com/1651790/168849779-4826f50e-ff87-4e78-b17f-076f91182c43.svg, https://user-images.githubusercontent.com/1651790/168849779-4826f50e-ff87-4e78-b17f-076f91182c43.svg 1.5x, https://user-images.githubusercontent.com/1651790/168849779-4826f50e-ff87-4e78-b17f-076f91182c43.svg 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/168849779-4826f50e-ff87-4e78-b17f-076f91182c43.svg">
    </a></figure></p>
<h3 id="涉及到的开源" class="headerLink">
    <a href="#%e6%b6%89%e5%8f%8a%e5%88%b0%e7%9a%84%e5%bc%80%e6%ba%90" class="header-mark"></a>5.1 涉及到的开源</h3><p>此参考项目中使用的所有项目都按字典顺序在下面列出。</p>
<ul>
<li>Amundsen</li>
<li>Apache Airflow</li>
<li>Apache Superset</li>
<li>dbt</li>
<li>Elasticsearch</li>
<li>meltano</li>
<li>Nebula Graph</li>
<li>Open Lineage</li>
<li>singer</li>
</ul>
<blockquote>
<p>题图版权： <a href="https://unsplash.com/photos/PhnJhjH9Y9s" target="_blank" rel="noopener noreferrer">Phil Hearing</a></p>
</blockquote>]]></description>
</item></channel>
</rss>
