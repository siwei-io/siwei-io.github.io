<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>siwei.io</title>
        <link>https://siwei.io/</link>
        <description>Siwei(思为) builds things and believes in Open Source.</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>weyl.gu@gmail.com (Wey Gu)</managingEditor>
            <webMaster>weyl.gu@gmail.com (Wey Gu)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 02 May 2023 16:37:28 &#43;0800</lastBuildDate>
            <atom:link href="https://siwei.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>Nebulagraph Artificial Intelligence Suite</title>
    <link>https://siwei.io/nebulagraph-ai-suite/</link>
    <pubDate>Tue, 02 May 2023 16:37:28 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/nebulagraph-ai-suite/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/nebulagraph-ai-suite/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>介绍新项目！ ng_ai：NebulaGraph 的图算法套件，好用的 NebulaGraph 的 high-level Python Algorithm API，它的目标是让 NebulaGraph 的数据科学家用户能够用很少的代码量执行图上的算法相关的任务。</p>
</blockquote>
<h2 id="nebulagraph-ai-套件" class="headerLink">
    <a href="#nebulagraph-ai-%e5%a5%97%e4%bb%b6" class="header-mark"></a>1 Nebulagraph AI 套件</h2><p>这周，NebulaGraph 3.5.0 <a href="https://docs.nebula-graph.com.cn/3.5.0/20.appendix/release-notes/nebula-comm-release-note/" target="_blank" rel="noopener noreferrer">发布啦</a>，@<strong><a href="https://github.com/whitewum" target="_blank" rel="noopener noreferrer">whitewum</a></strong> 吴老师建议我们把而之前一段时间 NebulaGraph 社区里开启的新项目 <a href="https://github.com/wey-gu/nebulagraph-ai" target="_blank" rel="noopener noreferrer">ng_ai</a> 公开给大家，本文就是第一篇介绍 ng_ai 的文章！</p>
<h3 id="ng_ai-是什么" class="headerLink">
    <a href="#ng_ai-%e6%98%af%e4%bb%80%e4%b9%88" class="header-mark"></a>1.1 ng_ai 是什么</h3><p>ng_ai 的全名是：Nebulagraph AI Suite，顾名思义，它是在 NebulaGraph 之上跑算法的 Python 套件，希望能给 NebulaGraph 的数据科学家用户一个自然、简洁的高级 API，用很少的代码量执行图上的算法相关的任务。</p>
<p>在 ng_ai 这个开源项目里，我们希望快速迭代、公开讨论、演进它，而这背后的目标是：</p>
<blockquote>
<p>Simplifying things in surprising ways.</p>
</blockquote>
<h3 id="ng_ai-的特点" class="headerLink">
    <a href="#ng_ai-%e7%9a%84%e7%89%b9%e7%82%b9" class="header-mark"></a>1.2 ng_ai 的特点</h3><p>为了让 NebulaGraph 社区的同学拥有顺滑的算法体验，ng_ai 有以下特点：</p>
<ul>
<li>与 NebulaGraph 紧密结合，方便从其中读、写图数据</li>
<li>支持多引擎、后端，目前支持 Spark（NebulaGraph Algorithm）、NetworkX，之后会支持 (DGL)[https://www.dgl.ai/]、(PyG)[https://pytorch-geometric.readthedocs.io/en/latest/]</li>
<li>友好、符合直觉的 API 设计</li>
<li>与 NebulaGraph 的 UDF 无缝结合，支持从 Query 中调用 ng_ai 任务</li>
<li>友好的自定义算法接口，方便用户自己实现算法（尚未完成）</li>
<li>一键试玩环境（基于 Docker Extention）</li>
</ul>
<h2 id="我可以用-ng_ai-干什么" class="headerLink">
    <a href="#%e6%88%91%e5%8f%af%e4%bb%a5%e7%94%a8-ng_ai-%e5%b9%b2%e4%bb%80%e4%b9%88" class="header-mark"></a>2 我可以用 ng_ai 干什么</h2><h3 id="跑分布式-pagerank-算法" class="headerLink">
    <a href="#%e8%b7%91%e5%88%86%e5%b8%83%e5%bc%8f-pagerank-%e7%ae%97%e6%b3%95" class="header-mark"></a>2.1 跑分布式 pagerank 算法</h3><p>如果在一个大图上，基于 Nebula-Algorithms 分布式地跑 pagerank 算法，我们可以这么做：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">ng_ai</span> <span class="kn">import</span> <span class="n">NebulaReader</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># read data with spark engine, scan mode</span>
</span></span><span class="line"><span class="cl"><span class="n">reader</span> <span class="o">=</span> <span class="n">NebulaReader</span><span class="p">(</span><span class="n">engine</span><span class="o">=</span><span class="s2">&#34;spark&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">reader</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="n">edge</span><span class="o">=</span><span class="s2">&#34;follow&#34;</span><span class="p">,</span> <span class="n">props</span><span class="o">=</span><span class="s2">&#34;degree&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">df</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># run pagerank algorithm</span>
</span></span><span class="line"><span class="cl"><span class="n">pr_result</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">algo</span><span class="o">.</span><span class="n">pagerank</span><span class="p">(</span><span class="n">reset_prob</span><span class="o">=</span><span class="mf">0.15</span><span class="p">,</span> <span class="n">max_iter</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="写回算法结果到-nebulagraph" class="headerLink">
    <a href="#%e5%86%99%e5%9b%9e%e7%ae%97%e6%b3%95%e7%bb%93%e6%9e%9c%e5%88%b0-nebulagraph" class="header-mark"></a>2.2 写回算法结果到 NebulaGraph</h3><p>假设我们要跑一个 label propagation 算法，然后把结果写回 NebulaGraph，我们可以这么做：</p>
<p>先确保要写回 TAG 的 schema 已经创建好了，写到 label_propagation.cluster_id 字段里：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="k">IF</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">EXISTS</span><span class="w"> </span><span class="n">label_propagation</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">cluster_id</span><span class="w"> </span><span class="n">string</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>我们先执行算法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">df_result</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">algo</span><span class="o">.</span><span class="n">label_propagation</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>再看一下结果的 schema：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">df_result</span><span class="o">.</span><span class="n">printSchema</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">root</span>
</span></span><span class="line"><span class="cl"> <span class="o">|--</span> <span class="n">_id</span><span class="p">:</span> <span class="n">string</span> <span class="p">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="n">false</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"> <span class="o">|--</span> <span class="n">lpa</span><span class="p">:</span> <span class="n">string</span> <span class="p">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="n">false</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后，代码里这么写，我们把 lpa 的结果写回 NebulaGraph 中的 cluster_id 字段里（<code>{&quot;lpa&quot;: &quot;cluster_id&quot;}</code>）：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">ng_ai</span> <span class="kn">import</span> <span class="n">NebulaWriter</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">ng_ai.config</span> <span class="kn">import</span> <span class="n">NebulaGraphConfig</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">config</span> <span class="o">=</span> <span class="n">NebulaGraphConfig</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">writer</span> <span class="o">=</span> <span class="n">NebulaWriter</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">data</span><span class="o">=</span><span class="n">df_result</span><span class="p">,</span> <span class="n">sink</span><span class="o">=</span><span class="s2">&#34;nebulagraph_vertex&#34;</span><span class="p">,</span> <span class="n">config</span><span class="o">=</span><span class="n">config</span><span class="p">,</span> <span class="n">engine</span><span class="o">=</span><span class="s2">&#34;spark&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># map column louvain into property cluster_id</span>
</span></span><span class="line"><span class="cl"><span class="n">properties</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;lpa&#34;</span><span class="p">:</span> <span class="s2">&#34;cluster_id&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">writer</span><span class="o">.</span><span class="n">set_options</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">tag</span><span class="o">=</span><span class="s2">&#34;label_propagation&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">vid_field</span><span class="o">=</span><span class="s2">&#34;_id&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">properties</span><span class="o">=</span><span class="n">properties</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">batch_size</span><span class="o">=</span><span class="mi">256</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">write_mode</span><span class="o">=</span><span class="s2">&#34;insert&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># write back to NebulaGraph</span>
</span></span><span class="line"><span class="cl"><span class="n">writer</span><span class="o">.</span><span class="n">write</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>最后，我们可以验证一下结果啦：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">USE basketballplayer;
</span></span><span class="line"><span class="cl">MATCH (v:label_propagation)
</span></span><span class="line"><span class="cl">RETURN id(v), v.label_propagation.cluster_id LIMIT 3;
</span></span></code></pre></td></tr></table>
</div>
</div><p>结果：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-SQL" data-lang="SQL"><span class="line"><span class="cl"><span class="o">+</span><span class="c1">-------------+--------------------------------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="n">id</span><span class="p">(</span><span class="n">v</span><span class="p">)</span><span class="w">       </span><span class="o">|</span><span class="w"> </span><span class="n">v</span><span class="p">.</span><span class="n">label_propagation</span><span class="p">.</span><span class="n">cluster_id</span><span class="w"> </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">-------------+--------------------------------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;player103&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;player101&#34;</span><span class="w">                    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;player113&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;player129&#34;</span><span class="w">                    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;player121&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;player129&#34;</span><span class="w">                    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">-------------+--------------------------------+
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>更详细的例子参考：<a href="https://github.com/wey-gu/nebulagraph-ai/blob/main/examples/spark_engine.ipynb" target="_blank" rel="noopener noreferrer">ng_ai/examples</a></p>
<h4 id="通过-ngql-调用算法" class="headerLink">
    <a href="#%e9%80%9a%e8%bf%87-ngql-%e8%b0%83%e7%94%a8%e7%ae%97%e6%b3%95" class="header-mark"></a>2.2.1 通过 nGQL 调用算法</h4><p>从 NebulaGraph 3.5.0 之后，我们可以写自己的 UDF 来从 nGQL 里调用自己实现的函数，ng_ai 也用这个能力来实现了一个 ng_ai 函数，它可以从 nGQL 里调用 ng_ai 的算法，例如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- Prepare the write schema
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">USE</span><span class="w"> </span><span class="n">basketballplayer</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="k">IF</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">EXISTS</span><span class="w"> </span><span class="n">pagerank</span><span class="p">(</span><span class="n">pagerank</span><span class="w"> </span><span class="n">string</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">:</span><span class="n">sleep</span><span class="w"> </span><span class="mi">20</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">-- Call with ng_ai()
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">ng_ai</span><span class="p">(</span><span class="s2">&#34;pagerank&#34;</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;follow&#34;</span><span class="p">],</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;degree&#34;</span><span class="p">],</span><span class="w"> </span><span class="s2">&#34;spark&#34;</span><span class="p">,</span><span class="w"> </span><span class="err">{</span><span class="k">space</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;basketballplayer&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">max_iter</span><span class="p">:</span><span class="w"> </span><span class="mi">10</span><span class="err">}</span><span class="p">,</span><span class="w"> </span><span class="err">{</span><span class="n">write_mode</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;insert&#34;</span><span class="err">}</span><span class="p">)</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>更详细的例子参考：<a href="https://github.com/wey-gu/nebulagraph-ai/blob/main/examples/ng_ai_from_ngql_udf.ipynb" target="_blank" rel="noopener noreferrer">ng_ai/examples</a></p>
<h4 id="单机运行算法" class="headerLink">
    <a href="#%e5%8d%95%e6%9c%ba%e8%bf%90%e8%a1%8c%e7%ae%97%e6%b3%95" class="header-mark"></a>2.2.2 单机运行算法</h4><p>在单机、本地的环境里，ng_ai 支持基于 NetworkX 运行算法，例如：</p>
<p>读取图为 ng_ai graph 对象：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">ng_ai</span> <span class="kn">import</span> <span class="n">NebulaReader</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">ng_ai.config</span> <span class="kn">import</span> <span class="n">NebulaGraphConfig</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># read data with nebula/networkx engine, query mode</span>
</span></span><span class="line"><span class="cl"><span class="n">config_dict</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;graphd_hosts&#34;</span><span class="p">:</span> <span class="s2">&#34;graphd:9669&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;user&#34;</span><span class="p">:</span> <span class="s2">&#34;root&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;password&#34;</span><span class="p">:</span> <span class="s2">&#34;nebula&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;space&#34;</span><span class="p">:</span> <span class="s2">&#34;basketballplayer&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">config</span> <span class="o">=</span> <span class="n">NebulaGraphConfig</span><span class="p">(</span><span class="o">**</span><span class="n">config_dict</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">reader</span> <span class="o">=</span> <span class="n">NebulaReader</span><span class="p">(</span><span class="n">engine</span><span class="o">=</span><span class="s2">&#34;nebula&#34;</span><span class="p">,</span> <span class="n">config</span><span class="o">=</span><span class="n">config</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">reader</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">edges</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;follow&#34;</span><span class="p">,</span> <span class="s2">&#34;serve&#34;</span><span class="p">],</span> <span class="n">props</span><span class="o">=</span><span class="p">[[</span><span class="s2">&#34;degree&#34;</span><span class="p">],</span> <span class="p">[]])</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>查看、画图：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">show</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">draw</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>运行算法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">pr_result</span> <span class="o">=</span> <span class="n">g</span><span class="o">.</span><span class="n">algo</span><span class="o">.</span><span class="n">pagerank</span><span class="p">(</span><span class="n">reset_prob</span><span class="o">=</span><span class="mf">0.15</span><span class="p">,</span> <span class="n">max_iter</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>写回 NebulaGraph：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">ng_ai</span> <span class="kn">import</span> <span class="n">NebulaWriter</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">writer</span> <span class="o">=</span> <span class="n">NebulaWriter</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">data</span><span class="o">=</span><span class="n">pr_result</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">sink</span><span class="o">=</span><span class="s2">&#34;nebulagraph_vertex&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">config</span><span class="o">=</span><span class="n">config</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">engine</span><span class="o">=</span><span class="s2">&#34;nebula&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># properties to write</span>
</span></span><span class="line"><span class="cl"><span class="n">properties</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;pagerank&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">writer</span><span class="o">.</span><span class="n">set_options</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">tag</span><span class="o">=</span><span class="s2">&#34;pagerank&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">properties</span><span class="o">=</span><span class="n">properties</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">batch_size</span><span class="o">=</span><span class="mi">256</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">write_mode</span><span class="o">=</span><span class="s2">&#34;insert&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># write back to NebulaGraph</span>
</span></span><span class="line"><span class="cl"><span class="n">writer</span><span class="o">.</span><span class="n">write</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>其他算法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># get all algorithms</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">algo</span><span class="o">.</span><span class="n">get_all_algo</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># get help of each algo</span>
</span></span><span class="line"><span class="cl"><span class="n">help</span><span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">algo</span><span class="o">.</span><span class="n">node2vec</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># call the algo</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">.</span><span class="n">algo</span><span class="o">.</span><span class="n">node2vec</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>更详细的例子参考：<a href="https://github.com/wey-gu/nebulagraph-ai/blob/main/examples/networkx_engine.ipynb" target="_blank" rel="noopener noreferrer">ng_ai/examples</a></p>
<h4 id="可视化图算法结果" class="headerLink">
    <a href="#%e5%8f%af%e8%a7%86%e5%8c%96%e5%9b%be%e7%ae%97%e6%b3%95%e7%bb%93%e6%9e%9c" class="header-mark"></a>2.2.3 可视化图算法结果</h4><p>再演示一个 NetworkX 引擎情况下，计算 Louvain、PageRank 并可视化的例子：</p>
<p>先执行两个算法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">pr_result</span> <span class="o">=</span> <span class="n">g</span><span class="o">.</span><span class="n">algo</span><span class="o">.</span><span class="n">pagerank</span><span class="p">(</span><span class="n">reset_prob</span><span class="o">=</span><span class="mf">0.15</span><span class="p">,</span> <span class="n">max_iter</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">louvain_result</span> <span class="o">=</span> <span class="n">g</span><span class="o">.</span><span class="n">algo</span><span class="o">.</span><span class="n">louvain</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这次我们手写一个好看一点的画图函数：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">matplotlib.colors</span> <span class="kn">import</span> <span class="n">ListedColormap</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">draw_graph_louvain_pr</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">pr_result</span><span class="p">,</span> <span class="n">louvain_result</span><span class="p">,</span> <span class="n">colors</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;#1984c5&#34;</span><span class="p">,</span> <span class="s2">&#34;#22a7f0&#34;</span><span class="p">,</span> <span class="s2">&#34;#63bff0&#34;</span><span class="p">,</span> <span class="s2">&#34;#a7d5ed&#34;</span><span class="p">,</span> <span class="s2">&#34;#e2e2e2&#34;</span><span class="p">,</span> <span class="s2">&#34;#e1a692&#34;</span><span class="p">,</span> <span class="s2">&#34;#de6e56&#34;</span><span class="p">,</span> <span class="s2">&#34;#e14b31&#34;</span><span class="p">,</span> <span class="s2">&#34;#c23728&#34;</span><span class="p">]):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Define positions for the nodes</span>
</span></span><span class="line"><span class="cl">    <span class="n">pos</span> <span class="o">=</span> <span class="n">nx</span><span class="o">.</span><span class="n">spring_layout</span><span class="p">(</span><span class="n">G</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Create a figure and set the axis limits</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">35</span><span class="p">,</span> <span class="mi">15</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">ax</span><span class="o">.</span><span class="n">set_xlim</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">ax</span><span class="o">.</span><span class="n">set_ylim</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Create a colormap from the colors list</span>
</span></span><span class="line"><span class="cl">    <span class="n">cmap</span> <span class="o">=</span> <span class="n">ListedColormap</span><span class="p">(</span><span class="n">colors</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Draw the nodes and edges of the graph</span>
</span></span><span class="line"><span class="cl">    <span class="n">node_colors</span> <span class="o">=</span> <span class="p">[</span><span class="n">louvain_result</span><span class="p">[</span><span class="n">node</span><span class="p">]</span> <span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="n">G</span><span class="o">.</span><span class="n">nodes</span><span class="p">()]</span>
</span></span><span class="line"><span class="cl">    <span class="n">node_sizes</span> <span class="o">=</span> <span class="p">[</span><span class="mi">70000</span> <span class="o">*</span> <span class="n">pr_result</span><span class="p">[</span><span class="n">node</span><span class="p">]</span> <span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="n">G</span><span class="o">.</span><span class="n">nodes</span><span class="p">()]</span>
</span></span><span class="line"><span class="cl">    <span class="n">nx</span><span class="o">.</span><span class="n">draw_networkx_nodes</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">pos</span><span class="o">=</span><span class="n">pos</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span> <span class="n">node_color</span><span class="o">=</span><span class="n">node_colors</span><span class="p">,</span> <span class="n">node_size</span><span class="o">=</span><span class="n">node_sizes</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="n">cmap</span><span class="p">,</span> <span class="n">vmin</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">vmax</span><span class="o">=</span><span class="nb">max</span><span class="p">(</span><span class="n">louvain_result</span><span class="o">.</span><span class="n">values</span><span class="p">()))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">nx</span><span class="o">.</span><span class="n">draw_networkx_edges</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">pos</span><span class="o">=</span><span class="n">pos</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span> <span class="n">edge_color</span><span class="o">=</span><span class="s1">&#39;gray&#39;</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">connectionstyle</span><span class="o">=</span><span class="s1">&#39;arc3, rad=0.2&#39;</span><span class="p">,</span> <span class="n">arrowstyle</span><span class="o">=</span><span class="s1">&#39;-|&gt;&#39;</span><span class="p">,</span> <span class="n">arrows</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Extract edge labels as a dictionary</span>
</span></span><span class="line"><span class="cl">    <span class="n">edge_labels</span> <span class="o">=</span> <span class="n">nx</span><span class="o">.</span><span class="n">get_edge_attributes</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="s1">&#39;label&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Add edge labels to the graph</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">edge</span><span class="p">,</span> <span class="n">label</span> <span class="ow">in</span> <span class="n">edge_labels</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="n">ax</span><span class="o">.</span><span class="n">text</span><span class="p">((</span><span class="n">pos</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="mi">0</span><span class="p">]][</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">pos</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="mi">1</span><span class="p">]][</span><span class="mi">0</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="p">(</span><span class="n">pos</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="mi">0</span><span class="p">]][</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">pos</span><span class="p">[</span><span class="n">edge</span><span class="p">[</span><span class="mi">1</span><span class="p">]][</span><span class="mi">1</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="n">label</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">12</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;black&#39;</span><span class="p">,</span> <span class="n">ha</span><span class="o">=</span><span class="s1">&#39;center&#39;</span><span class="p">,</span> <span class="n">va</span><span class="o">=</span><span class="s1">&#39;center&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Add node labels to the graph</span>
</span></span><span class="line"><span class="cl">    <span class="n">node_labels</span> <span class="o">=</span> <span class="p">{</span><span class="n">n</span><span class="p">:</span> <span class="n">G</span><span class="o">.</span><span class="n">nodes</span><span class="p">[</span><span class="n">n</span><span class="p">][</span><span class="s1">&#39;label&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="s1">&#39;label&#39;</span> <span class="ow">in</span> <span class="n">G</span><span class="o">.</span><span class="n">nodes</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="k">else</span> <span class="n">n</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">G</span><span class="o">.</span><span class="n">nodes</span><span class="p">()}</span>
</span></span><span class="line"><span class="cl">    <span class="n">nx</span><span class="o">.</span><span class="n">draw_networkx_labels</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">pos</span><span class="o">=</span><span class="n">pos</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span> <span class="n">labels</span><span class="o">=</span><span class="n">node_labels</span><span class="p">,</span> <span class="n">font_size</span><span class="o">=</span><span class="mi">12</span><span class="p">,</span> <span class="n">font_color</span><span class="o">=</span><span class="s1">&#39;black&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Add colorbar for community colors</span>
</span></span><span class="line"><span class="cl">    <span class="n">sm</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">cm</span><span class="o">.</span><span class="n">ScalarMappable</span><span class="p">(</span><span class="n">cmap</span><span class="o">=</span><span class="n">cmap</span><span class="p">,</span> <span class="n">norm</span><span class="o">=</span><span class="n">plt</span><span class="o">.</span><span class="n">Normalize</span><span class="p">(</span><span class="n">vmin</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">vmax</span><span class="o">=</span><span class="nb">max</span><span class="p">(</span><span class="n">louvain_result</span><span class="o">.</span><span class="n">values</span><span class="p">())))</span>
</span></span><span class="line"><span class="cl">    <span class="n">sm</span><span class="o">.</span><span class="n">set_array</span><span class="p">([])</span>
</span></span><span class="line"><span class="cl">    <span class="n">cbar</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">colorbar</span><span class="p">(</span><span class="n">sm</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span> <span class="n">ticks</span><span class="o">=</span><span class="nb">range</span><span class="p">(</span><span class="nb">max</span><span class="p">(</span><span class="n">louvain_result</span><span class="o">.</span><span class="n">values</span><span class="p">())</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span> <span class="n">shrink</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">cbar</span><span class="o">.</span><span class="n">ax</span><span class="o">.</span><span class="n">set_yticklabels</span><span class="p">([</span><span class="sa">f</span><span class="s1">&#39;Community </span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s1">&#39;</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">max</span><span class="p">(</span><span class="n">louvain_result</span><span class="o">.</span><span class="n">values</span><span class="p">())</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Show the figure</span>
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">draw_graph_louvain_pr</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">pr_result</span><span class="o">=</span><span class="n">pr_result</span><span class="p">,</span> <span class="n">louvain_result</span><span class="o">=</span><span class="n">louvain_result</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>效果如图：</p>
<p><figure><a class="lightgallery" href="https://github.com/siwei-io/talks/assets/1651790/4d13eb2b-3e40-4085-8e0c-71459ca0843b" title="draw_graph_louvain_pr" data-thumbnail="https://github.com/siwei-io/talks/assets/1651790/4d13eb2b-3e40-4085-8e0c-71459ca0843b">
        <img
            
            loading="lazy"
            src="https://github.com/siwei-io/talks/assets/1651790/4d13eb2b-3e40-4085-8e0c-71459ca0843b"
            srcset="https://github.com/siwei-io/talks/assets/1651790/4d13eb2b-3e40-4085-8e0c-71459ca0843b, https://github.com/siwei-io/talks/assets/1651790/4d13eb2b-3e40-4085-8e0c-71459ca0843b 1.5x, https://github.com/siwei-io/talks/assets/1651790/4d13eb2b-3e40-4085-8e0c-71459ca0843b 2x"
            sizes="auto"
            alt="https://github.com/siwei-io/talks/assets/1651790/4d13eb2b-3e40-4085-8e0c-71459ca0843b">
    </a></figure></p>
<p>更详细的例子参考：<a href="https://github.com/wey-gu/nebulagraph-ai/blob/main/examples/ng_ai_networkx_plot.ipynb" target="_blank" rel="noopener noreferrer">ng_ai/examples</a></p>
<h4 id="更方便的-notebook-操作-nebulagraph" class="headerLink">
    <a href="#%e6%9b%b4%e6%96%b9%e4%be%bf%e7%9a%84-notebook-%e6%93%8d%e4%bd%9c-nebulagraph" class="header-mark"></a>2.2.4 更方便的 Notebook 操作 NebulaGraph</h4><p>结合 NebulaGraph 的 Jupyter Notebook 插件: <a href="https://github.com/wey-gu/ipython-ngql" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/ipython-ngql</a> ，我们还可以更方便的操作 NebulaGraph：</p>
<p>在 Jupyter Notbook 里安装这个插件可以通过 ng_ai 的 extras 安装：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">%</span><span class="n">pip</span> <span class="n">install</span> <span class="n">ng_ai</span><span class="p">[</span><span class="n">jupyter</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="o">%</span><span class="n">load_ext</span> <span class="n">ngql</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>也可以单独安装</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">%</span><span class="n">pip</span> <span class="n">install</span> <span class="n">ipython</span><span class="o">-</span><span class="n">ngql</span>
</span></span><span class="line"><span class="cl"><span class="o">%</span><span class="n">load_ext</span> <span class="n">ngql</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>之后，我们就可以在 Notebook 里直接使用 <code>%ngql</code> 命令来执行 NGQL 语句了：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">%</span><span class="n">ngql</span> <span class="o">--</span><span class="n">address</span> <span class="mf">127.0.0.1</span> <span class="o">--</span><span class="n">port</span> <span class="mi">9669</span> <span class="o">--</span><span class="n">user</span> <span class="n">root</span> <span class="o">--</span><span class="n">password</span> <span class="n">nebula</span>
</span></span><span class="line"><span class="cl"><span class="o">%</span><span class="n">ngql</span> <span class="n">USE</span> <span class="n">basketballplayer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="o">%</span><span class="n">ngql</span> <span class="n">MATCH</span> <span class="p">(</span><span class="n">v</span><span class="p">:</span><span class="n">player</span><span class="p">{</span><span class="n">name</span><span class="p">:</span><span class="s2">&#34;Tim Duncan&#34;</span><span class="p">})</span><span class="o">--&gt;</span><span class="p">(</span><span class="n">v2</span><span class="p">:</span><span class="n">player</span><span class="p">)</span> <span class="n">RETURN</span> <span class="n">v2</span><span class="o">.</span><span class="n">player</span><span class="o">.</span><span class="n">name</span> <span class="n">AS</span> <span class="n">Name</span><span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>注，多行的 Query 用两个百分号就好了 <code>%%ngql</code></p>
</blockquote>
<p>最后，我们还能在 Jupyter Notebook 里直接可视化渲染结果！只需要 <code>%ng_draw</code> 就可以啦！</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">%</span><span class="n">ngql</span> <span class="n">match</span> <span class="n">p</span><span class="o">=</span><span class="p">(:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[]</span><span class="o">-&gt;</span><span class="p">()</span> <span class="k">return</span> <span class="n">p</span> <span class="n">LIMIT</span> <span class="mi">5</span>
</span></span><span class="line"><span class="cl"><span class="o">%</span><span class="n">ng_draw</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>效果如下：</p>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/236797874-c142cfd8-b0de-4689-95ef-1da386e137d3.png" title="ipython-ngql" data-thumbnail="https://user-images.githubusercontent.com/1651790/236797874-c142cfd8-b0de-4689-95ef-1da386e137d3.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/236797874-c142cfd8-b0de-4689-95ef-1da386e137d3.png"
            srcset="https://user-images.githubusercontent.com/1651790/236797874-c142cfd8-b0de-4689-95ef-1da386e137d3.png, https://user-images.githubusercontent.com/1651790/236797874-c142cfd8-b0de-4689-95ef-1da386e137d3.png 1.5x, https://user-images.githubusercontent.com/1651790/236797874-c142cfd8-b0de-4689-95ef-1da386e137d3.png 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/236797874-c142cfd8-b0de-4689-95ef-1da386e137d3.png">
    </a></figure></p>
<h2 id="未来工作" class="headerLink">
    <a href="#%e6%9c%aa%e6%9d%a5%e5%b7%a5%e4%bd%9c" class="header-mark"></a>3 未来工作</h2><p>现在 ng_ai 还在开发中，我们还有很多工作要做：</p>
<ul>
<li><i class="far fa-square fa-fw"></i> 完善 reader 模式，现在 NebulaGraph/NetworkX 的读取数据只支持 Query-Mode，还需要支持 Scan-Mode</li>
<li><i class="far fa-square fa-fw"></i> 实现基于 dgl(GNN) 的链路预测、节点分类等算法，例如：</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">model</span> <span class="o">=</span> <span class="n">g</span><span class="o">.</span><span class="n">algo</span><span class="o">.</span><span class="n">gnn_link_prediction</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">result</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">train</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="c1"># query src, dst to be predicted</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">model</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">src_vertex</span><span class="p">,</span> <span class="n">dst_vertices</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><i class="far fa-square fa-fw"></i> UDA，自定义算法</li>
<li><i class="far fa-square fa-fw"></i> 快速部署工具</li>
</ul>
<p>ng_ai 是完全 build in public 的，欢迎社区的大家们来参与，一起来完善 ng_ai，让 NebulaGraph 上的 AI 算法更加简单易用！</p>
<h2 id="试玩-ng_ai" class="headerLink">
    <a href="#%e8%af%95%e7%8e%a9-ng_ai" class="header-mark"></a>4 试玩 ng_ai</h2><p>我们已经准备好了一键部署的 NebulaGraph + Studio + ng_ai in Jupyter 的环境，只需要大家从 Docker Desktop 的 Extension（扩展）中搜索 NebulaGraph，就可以试完了。</p>
<ul>
<li>安装 NebulaGraph</li>
</ul>
<p>在 Docker Desktop 的插件市场搜索 NebulaGraph，点击安装</p>
<p><figure><a class="lightgallery" href="https://github.com/siwei-io/talks/assets/1651790/e07e39d1-2b3a-486f-bb68-29a67bc3a714" title="https://github.com/siwei-io/talks/assets/1651790/e07e39d1-2b3a-486f-bb68-29a67bc3a714" data-thumbnail="https://github.com/siwei-io/talks/assets/1651790/e07e39d1-2b3a-486f-bb68-29a67bc3a714">
        <img
            
            loading="lazy"
            src="https://github.com/siwei-io/talks/assets/1651790/e07e39d1-2b3a-486f-bb68-29a67bc3a714"
            srcset="https://github.com/siwei-io/talks/assets/1651790/e07e39d1-2b3a-486f-bb68-29a67bc3a714, https://github.com/siwei-io/talks/assets/1651790/e07e39d1-2b3a-486f-bb68-29a67bc3a714 1.5x, https://github.com/siwei-io/talks/assets/1651790/e07e39d1-2b3a-486f-bb68-29a67bc3a714 2x"
            sizes="auto"
            alt="https://github.com/siwei-io/talks/assets/1651790/e07e39d1-2b3a-486f-bb68-29a67bc3a714">
    </a></figure></p>
<ul>
<li>安装 ng_ai playground</li>
</ul>
<p>进入 NebulaGraph 插件，点击<strong>Install NX Mode</strong>，安装 ng_ai 的 NetworkX playground，通常要等几分钟等待安装完成。</p>
<p><figure><a class="lightgallery" href="https://github.com/siwei-io/talks/assets/1651790/3fca7e39-6e37-4ccb-8177-4771babb7b66" title="https://github.com/siwei-io/talks/assets/1651790/3fca7e39-6e37-4ccb-8177-4771babb7b66" data-thumbnail="https://github.com/siwei-io/talks/assets/1651790/3fca7e39-6e37-4ccb-8177-4771babb7b66">
        <img
            
            loading="lazy"
            src="https://github.com/siwei-io/talks/assets/1651790/3fca7e39-6e37-4ccb-8177-4771babb7b66"
            srcset="https://github.com/siwei-io/talks/assets/1651790/3fca7e39-6e37-4ccb-8177-4771babb7b66, https://github.com/siwei-io/talks/assets/1651790/3fca7e39-6e37-4ccb-8177-4771babb7b66 1.5x, https://github.com/siwei-io/talks/assets/1651790/3fca7e39-6e37-4ccb-8177-4771babb7b66 2x"
            sizes="auto"
            alt="https://github.com/siwei-io/talks/assets/1651790/3fca7e39-6e37-4ccb-8177-4771babb7b66">
    </a></figure></p>
<ul>
<li>进入 NetworkX playground</li>
</ul>
<p>点击<strong>Jupyter NB NetworkX</strong>，进入 NetworkX playground。</p>
<p><figure><a class="lightgallery" href="https://github.com/siwei-io/talks/assets/1651790/48c2e5a2-490e-4626-809e-5894d6f833e9" title="https://github.com/siwei-io/talks/assets/1651790/48c2e5a2-490e-4626-809e-5894d6f833e9" data-thumbnail="https://github.com/siwei-io/talks/assets/1651790/48c2e5a2-490e-4626-809e-5894d6f833e9">
        <img
            
            loading="lazy"
            src="https://github.com/siwei-io/talks/assets/1651790/48c2e5a2-490e-4626-809e-5894d6f833e9"
            srcset="https://github.com/siwei-io/talks/assets/1651790/48c2e5a2-490e-4626-809e-5894d6f833e9, https://github.com/siwei-io/talks/assets/1651790/48c2e5a2-490e-4626-809e-5894d6f833e9 1.5x, https://github.com/siwei-io/talks/assets/1651790/48c2e5a2-490e-4626-809e-5894d6f833e9 2x"
            sizes="auto"
            alt="https://github.com/siwei-io/talks/assets/1651790/48c2e5a2-490e-4626-809e-5894d6f833e9">
    </a></figure></p>
<h2 id="ng_ai-的架构" class="headerLink">
    <a href="#ng_ai-%e7%9a%84%e6%9e%b6%e6%9e%84" class="header-mark"></a>5 ng_ai 的架构</h2><p>ng_ai 的架构如下，它的核心模块有：</p>
<ul>
<li>Reader：负责从 NebulaGraph 读取数据</li>
<li>Writer：负责将数据写入 NebulaGraph</li>
<li>*Engine：负责适配不同运行时，例如 Spark、DGL、NetowrkX 等</li>
<li>Algo：算法模块，例如 PageRank、Louvain、GNN_Link_Predict 等</li>
</ul>
<p>此外，为了支持 nGQL 中的调用，还有两个模块：</p>
<ul>
<li>ng_ai-udf：负责将 UDF 注册到 NebulaGraph，接受 ng_ai 的 query 调用，访问 ng_ai API</li>
<li>ng_ai-api：ng_ai 的 API 服务，接受 UDF 的调用，访问 ng_ai 核心模块</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">          ┌───────────────────────────────────────────────────┐
</span></span><span class="line"><span class="cl">          │   Spark Cluster                                   │
</span></span><span class="line"><span class="cl">          │    .─────.    .─────.    .─────.    .─────.       │
</span></span><span class="line"><span class="cl">          │   ;       :  ;       :  ;       :  ;       :      │
</span></span><span class="line"><span class="cl">       ┌─▶│   :       ;  :       ;  :       ;  :       ;      │
</span></span><span class="line"><span class="cl">       │  │    ╲     ╱    ╲     ╱    ╲     ╱    ╲     ╱       │
</span></span><span class="line"><span class="cl">       │  │     `───&#39;      `───&#39;      `───&#39;      `───&#39;        │
</span></span><span class="line"><span class="cl">  Algo Spark                                                  │
</span></span><span class="line"><span class="cl">    Engine└───────────────────────────────────────────────────┘
</span></span><span class="line"><span class="cl">       │  ┌────────────────────────────────────────────────────┬──────────┐
</span></span><span class="line"><span class="cl">       └──┤                                                    │          │
</span></span><span class="line"><span class="cl">          │   NebulaGraph AI Suite(ngai)                       │ ngai-api │◀─┐
</span></span><span class="line"><span class="cl">          │                                                    │          │  │
</span></span><span class="line"><span class="cl">          │                                                    └──────────┤  │
</span></span><span class="line"><span class="cl">          │     ┌────────┐    ┌──────┐    ┌────────┐   ┌─────┐            │  │
</span></span><span class="line"><span class="cl">          │     │ Reader │    │ Algo │    │ Writer │   │ GNN │            │  │
</span></span><span class="line"><span class="cl"> ┌───────▶│     └────────┘    └──────┘    └────────┘   └─────┘            │  │
</span></span><span class="line"><span class="cl"> │        │          │            │            │          │               │  │
</span></span><span class="line"><span class="cl"> │        │          ├────────────┴───┬────────┴─────┐    └──────┐        │  │
</span></span><span class="line"><span class="cl"> │        │          ▼                ▼              ▼           ▼        │  │
</span></span><span class="line"><span class="cl"> │        │   ┌─────────────┐ ┌──────────────┐ ┌──────────┐ ┌──────────┐  │  │
</span></span><span class="line"><span class="cl"> │     ┌──┤   │ SparkEngine │ │ NebulaEngine │ │ NetworkX │ │ DGLEngine│  │  │
</span></span><span class="line"><span class="cl"> │     │  │   └─────────────┘ └──────────────┘ └──────────┘ └──────────┘  │  │
</span></span><span class="line"><span class="cl"> │     │  └──────────┬────────────────────────────────────────────────────┘  │
</span></span><span class="line"><span class="cl"> │     │             │        Spark                                          │
</span></span><span class="line"><span class="cl"> │     │             └────────Reader ────────────┐                           │
</span></span><span class="line"><span class="cl"> │  Spark                   Query Mode           │                           │
</span></span><span class="line"><span class="cl"> │  Reader                                       │                           │
</span></span><span class="line"><span class="cl"> │Scan Mode                                      ▼                      ┌─────────┐
</span></span><span class="line"><span class="cl"> │     │  ┌───────────────────────────────────────────────────┬─────────┤ ngai-udf│◀─────────────┐
</span></span><span class="line"><span class="cl"> │     │  │                                                   │         └─────────┤              │
</span></span><span class="line"><span class="cl"> │     │  │  NebulaGraph Graph Engine         Nebula-GraphD   │   ngai-GraphD     │              │
</span></span><span class="line"><span class="cl"> │     │  ├──────────────────────────────┬────────────────────┼───────────────────┘              │
</span></span><span class="line"><span class="cl"> │     │  │                              │                    │                                  │
</span></span><span class="line"><span class="cl"> │     │  │  NebulaGraph Storage Engine  │                    │                                  │
</span></span><span class="line"><span class="cl"> │     │  │                              │                    │                                  │
</span></span><span class="line"><span class="cl"> │     └─▶│  Nebula-StorageD             │    Nebula-Metad    │                                  │
</span></span><span class="line"><span class="cl"> │        │                              │                    │                                  │
</span></span><span class="line"><span class="cl"> │        └──────────────────────────────┴────────────────────┘                                  │
</span></span><span class="line"><span class="cl"> │                                                                                               │
</span></span><span class="line"><span class="cl"> │    ┌───────────────────────────────────────────────────────────────────────────────────────┐  │
</span></span><span class="line"><span class="cl"> │    │ RETURN ng_ai(&#34;pagerank&#34;, [&#34;follow&#34;], [&#34;degree&#34;], &#34;spark&#34;, {space:&#34;basketballplayer&#34;}) │──┘
</span></span><span class="line"><span class="cl"> │    └───────────────────────────────────────────────────────────────────────────────────────┘
</span></span><span class="line"><span class="cl"> │  ┌─────────────────────────────────────────────────────────────┐
</span></span><span class="line"><span class="cl"> │  │ from ng_ai import NebulaReader                              │
</span></span><span class="line"><span class="cl"> │  │                                                             │
</span></span><span class="line"><span class="cl"> │  │ # read data with spark engine, scan mode                    │
</span></span><span class="line"><span class="cl"> │  │ reader = NebulaReader(engine=&#34;spark&#34;)                       │
</span></span><span class="line"><span class="cl"> │  │ reader.scan(edge=&#34;follow&#34;, props=&#34;degree&#34;)                  │
</span></span><span class="line"><span class="cl"> └──│ df = reader.read()                                          │
</span></span><span class="line"><span class="cl">    │                                                             │
</span></span><span class="line"><span class="cl">    │ # run pagerank algorithm                                    │
</span></span><span class="line"><span class="cl">    │ pr_result = df.algo.pagerank(reset_prob=0.15, max_iter=10)  │
</span></span><span class="line"><span class="cl">    │                                                             │
</span></span><span class="line"><span class="cl">    └─────────────────────────────────────────────────────────────┘  
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>图数据库驱动的基础设施运维示例</title>
    <link>https://siwei.io/graph-enabled-infra-ops/</link>
    <pubDate>Fri, 13 Jan 2023 22:22:44 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/graph-enabled-infra-ops/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/graph-enabled-infra-ops/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>图技术在大型、复杂基础设施之中 SRE/DevOps 的实践参考，本文以 OpenStack 系统之上的图数据库增强的运维案例为例，揭示图数据库、图算法的智能运维方法，全流程示例代码开源。</p>
</blockquote>
<p>因为有一些还未采用图技术的 DevOps/Infra 领域同学在 NebulaGraph 社区询问参考的案例，我最近试着实践了一下如何利用图的能力与优势去帮助在复杂基础设施上构建辅助运维系统，希望能帮助到感兴趣 Infra Ops 领域、同时感兴趣图数据库、图算法的大家，全过程都是可以复现、并且开源的。</p>
<p>复杂的基础设施运维环境通常包含非常多、不同层面的资源（manifest)，为了能够尽量还原真实世界的复杂环境、又保持这个实例项目的复杂度不会失控，我选择了用一个基础设施平台：OpenStack 作为例子。</p>
<p>本文实现了 OpenStack 系统上分别利用 Push 和 Pull 两种模式将资源之中被图谱建模的图中点、边信息加载到 NebulaGraph 里的 Graph ETL 管道的路径。</p>
<p>在图谱之上，本文探索如下用例：</p>
<ul>
<li>告警、状态的推理与传导；</li>
<li>网络直连与互联关系；</li>
<li>镜像、云盘、快照血缘管理；</li>
<li>高相关性虚机预警；</li>
<li>秘钥泄漏的图上风控分析；</li>
<li>镜像、云盘漏洞范围分析；</li>
<li>宿主机逃离影响范围分析；</li>
<li>脆弱依赖资源检测；</li>
</ul>
<h2 id="试验环境搭建" class="headerLink">
    <a href="#%e8%af%95%e9%aa%8c%e7%8e%af%e5%a2%83%e6%90%ad%e5%bb%ba" class="header-mark"></a>1 试验环境搭建</h2><h3 id="背景知识" class="headerLink">
    <a href="#%e8%83%8c%e6%99%af%e7%9f%a5%e8%af%86" class="header-mark"></a>1.1 背景知识</h3><p>OpenStack 是一个开源的云计算平台，提供了类似于 AWS 的云服务。它提供了一组可插拔的模块，包括了计算，存储和网络等功能，可以帮助用户构建和管理云环境。OpenStack采用分布式架构，支持多种操作系统和硬件平台，可以在企业级和服务提供商级环境中使用。</p>
<p><figure><a class="lightgallery" href="/graph-enabled-infra-ops/OpenStack-overview-diagram-new.webp" title="OpenStack-overview-diagram-new" data-thumbnail="/graph-enabled-infra-ops/OpenStack-overview-diagram-new.webp">
        <img
            
            loading="lazy"
            src="/graph-enabled-infra-ops/OpenStack-overview-diagram-new.webp"
            srcset="/graph-enabled-infra-ops/OpenStack-overview-diagram-new.webp, /graph-enabled-infra-ops/OpenStack-overview-diagram-new.webp 1.5x, /graph-enabled-infra-ops/OpenStack-overview-diagram-new.webp 2x"
            sizes="auto"
            alt="/graph-enabled-infra-ops/OpenStack-overview-diagram-new.webp">
    </a></figure></p>
<p>最初由 <em>NASA</em> 和 <em>Rackspace</em> Inc. 发起的 nova （虚拟化计算项目）和 swift （兼容 S3 的对象存储）项目组成，OpenStack 现在由非常多不同的子项目组成：</p>
<p><figure><a class="lightgallery" href="/graph-enabled-infra-ops/openstack-map-v20221001.webp" title="openstack-map-v20221001" data-thumbnail="/graph-enabled-infra-ops/openstack-map-v20221001.webp">
        <img
            
            loading="lazy"
            src="/graph-enabled-infra-ops/openstack-map-v20221001.webp"
            srcset="/graph-enabled-infra-ops/openstack-map-v20221001.webp, /graph-enabled-infra-ops/openstack-map-v20221001.webp 1.5x, /graph-enabled-infra-ops/openstack-map-v20221001.webp 2x"
            sizes="auto"
            alt="/graph-enabled-infra-ops/openstack-map-v20221001.webp">
    </a></figure></p>
<p>本实验中，我们设计的 OpenStack 主要项目有：</p>
<ul>
<li>Nova 是 OpenStack 的计算服务，用于管理虚拟机。</li>
<li>Cinder 是 OpenStack 的块存储服务，用于管理云存储。</li>
<li>Neutron 是 OpenStack 的网络服务，用于管理云网络。</li>
<li>Glance 是 OpenStack 的镜像服务，用于管理云镜像。</li>
<li>Horizon 是 OpenStack 的可视化控制台服务。</li>
</ul>
<p>除此之外，我还引入了 Vitrage 项目辅助我们收集部分资源数据：</p>
<ul>
<li>Vitrage 是 OpenStack 中的一个高级分析和可视化工具，用于分析和可视化 OpenStack 环境中的资源和事件。它可以汇集来自 OpenStack 各个服务的数据，并使用图形化方式展示出来。Vitrage 发现和诊断问题，提高 OpenStack 环境的可用性和可维护性。</li>
</ul>
<p>得益于 OpenStack Decouple 的设计理念，Vitrage 可以很容易、无侵入式（只需要修改需要收集的服务两行配置）就可以在 OpenStack 的消息队列中订阅资源信息的 push 消息。</p>
<p>不过比较遗憾的是 Vitrage 这个项目已经有好多个 release cycle 没有什么大的更新了，应该是比较不活跃的状态了，比如在 zed 里，它的 Vitrage Dashboard 作为 Horizon 插件已经无法正常工作了，本实验只利用它的资源收集能力。</p>
<h3 id="环境准备搭建" class="headerLink">
    <a href="#%e7%8e%af%e5%a2%83%e5%87%86%e5%a4%87%e6%90%ad%e5%bb%ba" class="header-mark"></a>1.2 环境准备搭建</h3><h4 id="nebulagraph-集群" class="headerLink">
    <a href="#nebulagraph-%e9%9b%86%e7%be%a4" class="header-mark"></a>1.2.1 NebulaGraph 集群</h4><p>首次快速试玩安装 NebulaGraph 的话，有这么几个选项：</p>
<ul>
<li>阿里云上的 NebulaGraph 企业版（带有企业版独有的满血版可视化工具：Explorer，可以图探索、画布内跑图算法），可以获得一个月所有资源免费使用资格：
<ul>
<li>访问 <a href="https://www.siwei.io/try-aliyun" target="_blank" rel="noopener noreferrer">https://www.siwei.io/try-aliyun</a> 获得</li>
</ul>
</li>
<li>Nebula-Up 一键安装 NebulaGraph 开源社区版本，需要一个带有 Docker、Docker Desktop 环境的机器
<ul>
<li>访问 <a href="https://github.com/wey-gu/nebula-up" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/nebula-up</a></li>
</ul>
</li>
<li>有经验的同学可以参考文档进行部署：
<ul>
<li>访问 <a href="https://docs.nebula-graph.com.cn/" target="_blank" rel="noopener noreferrer">https://docs.nebula-graph.com.cn/</a></li>
</ul>
</li>
</ul>
<h4 id="openstack-集群" class="headerLink">
    <a href="#openstack-%e9%9b%86%e7%be%a4" class="header-mark"></a>1.2.2 OpenStack 集群</h4><blockquote>
<p>注意：如果大家已经有现成的 OpenStack 集群，这一步可以忽略，您只需要再去安装 OpenStack Vitrage 就好了。</p>
</blockquote>
<p>本文需要的 OpenStack 集群是一个多机的环境，为此，我准备了在 Linux Server 上利用 Libvirt 和 Linux Bridge 搭建多个虚拟机用来模拟 OpenStack 的物理机，得益于 CPU 的嵌套虚拟化和 qemu，后边我们完全可以在虚拟机搭建的实验环境中模拟可正常工作的 OpenStack nova instance 虚机。</p>
<p>整个流程我都放在 <a href="https://github.com/wey-gu/openstack-graph/#environment-setup" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/openstack-graph/#environment-setup</a> 这里了，感兴趣的同学可以访问、获取。</p>
<p>虚拟机搭建之后，我们还需要模拟真实的 Infra 环境，创建很多资源：整个过程也在 <a href="https://github.com/wey-gu/openstack-graph/#create-resources-on-openstack" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/openstack-graph/#create-resources-on-openstack</a> 有详细列出，想要动手操作的同学可以参考来亲自上手一下。</p>
<p>参考如上步骤操作之后，我们应该可以通过 Horizon Dashboard 查看集群和资源：</p>
<p>我们创建了几个虚拟机：<figure><a class="lightgallery" href="/graph-enabled-infra-ops/nova_instance.webp" title="nova_instance" data-thumbnail="/graph-enabled-infra-ops/nova_instance.webp">
        <img
            
            loading="lazy"
            src="/graph-enabled-infra-ops/nova_instance.webp"
            srcset="/graph-enabled-infra-ops/nova_instance.webp, /graph-enabled-infra-ops/nova_instance.webp 1.5x, /graph-enabled-infra-ops/nova_instance.webp 2x"
            sizes="auto"
            alt="/graph-enabled-infra-ops/nova_instance.webp">
    </a></figure></p>
<p>几个网盘，其中四个挂载在不同的虚拟机上</p>
<p><figure><a class="lightgallery" href="/graph-enabled-infra-ops/cinder_volume.webp" title="cinder_volume" data-thumbnail="/graph-enabled-infra-ops/cinder_volume.webp">
        <img
            
            loading="lazy"
            src="/graph-enabled-infra-ops/cinder_volume.webp"
            srcset="/graph-enabled-infra-ops/cinder_volume.webp, /graph-enabled-infra-ops/cinder_volume.webp 1.5x, /graph-enabled-infra-ops/cinder_volume.webp 2x"
            sizes="auto"
            alt="/graph-enabled-infra-ops/cinder_volume.webp">
    </a></figure></p>
<p>集群租户的网络拓扑：<figure><a class="lightgallery" href="/graph-enabled-infra-ops/neutron_topology.webp" title="neutron_topology" data-thumbnail="/graph-enabled-infra-ops/neutron_topology.webp">
        <img
            
            loading="lazy"
            src="/graph-enabled-infra-ops/neutron_topology.webp"
            srcset="/graph-enabled-infra-ops/neutron_topology.webp, /graph-enabled-infra-ops/neutron_topology.webp 1.5x, /graph-enabled-infra-ops/neutron_topology.webp 2x"
            sizes="auto"
            alt="/graph-enabled-infra-ops/neutron_topology.webp">
    </a></figure></p>
<p>我们还能通过 OpenStack Vitrage 的 API/CLI 获得部分主要资源的拓扑：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">source</span> openrc admin admin
</span></span><span class="line"><span class="cl">vitrage topology show --all-tenants
</span></span></code></pre></td></tr></table>
</div>
</div><p>它的结果是一个 JSON，里边已经按照边（links）和点（nodes）序列化图结构的数据了。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;directed&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;graph&#34;</span><span class="p">:</span> <span class="p">{},</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;links&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_is_deleted&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;relationship_type&#34;</span><span class="p">:</span> <span class="s2">&#34;contains&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;source&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;target&#34;</span><span class="p">:</span> <span class="mi">11</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;key&#34;</span><span class="p">:</span> <span class="s2">&#34;contains&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_is_deleted&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;relationship_type&#34;</span><span class="p">:</span> <span class="s2">&#34;contains&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;source&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;target&#34;</span><span class="p">:</span> <span class="mi">13</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;key&#34;</span><span class="p">:</span> <span class="s2">&#34;contains&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="err">...</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_is_deleted&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;relationship_type&#34;</span><span class="p">:</span> <span class="s2">&#34;attached&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;source&#34;</span><span class="p">:</span> <span class="mi">27</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;target&#34;</span><span class="p">:</span> <span class="mi">28</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;key&#34;</span><span class="p">:</span> <span class="s2">&#34;attached&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">],</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;multigraph&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;nodes&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="s2">&#34;node0&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_type&#34;</span><span class="p">:</span> <span class="s2">&#34;nova.host&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_category&#34;</span><span class="p">:</span> <span class="s2">&#34;RESOURCE&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_is_deleted&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;update_timestamp&#34;</span><span class="p">:</span> <span class="s2">&#34;2023-01-13T08:06:48Z&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_sample_timestamp&#34;</span><span class="p">:</span> <span class="s2">&#34;2023-01-13T08:06:49Z&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_is_placeholder&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_id&#34;</span><span class="p">:</span> <span class="s2">&#34;630b4c2c-5347-4073-91a3-255ec18dadfc&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;node0&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_cached_id&#34;</span><span class="p">:</span> <span class="s2">&#34;d043d278a6a712909e30e50ca8ec2364&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;is_real_vitrage_id&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_aggregated_state&#34;</span><span class="p">:</span> <span class="s2">&#34;AVAILABLE&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_operational_state&#34;</span><span class="p">:</span> <span class="s2">&#34;OK&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_datasource_name&#34;</span><span class="p">:</span> <span class="s2">&#34;nova.host&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;state&#34;</span><span class="p">:</span> <span class="s2">&#34;available&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;graph_index&#34;</span><span class="p">:</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="s2">&#34;nova&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_type&#34;</span><span class="p">:</span> <span class="s2">&#34;nova.zone&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_category&#34;</span><span class="p">:</span> <span class="s2">&#34;RESOURCE&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_is_deleted&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_sample_timestamp&#34;</span><span class="p">:</span> <span class="s2">&#34;2023-01-12T03:06:48Z&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_is_placeholder&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_id&#34;</span><span class="p">:</span> <span class="s2">&#34;a1e9c808-dac8-4b59-8f80-f21a90e9869d&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_cached_id&#34;</span><span class="p">:</span> <span class="s2">&#34;125f1d8c4451a6385cc2cfa2b0ba45be&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;is_real_vitrage_id&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_aggregated_state&#34;</span><span class="p">:</span> <span class="s2">&#34;AVAILABLE&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_operational_state&#34;</span><span class="p">:</span> <span class="s2">&#34;OK&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;state&#34;</span><span class="p">:</span> <span class="s2">&#34;available&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;update_timestamp&#34;</span><span class="p">:</span> <span class="s2">&#34;2023-01-12T03:06:48Z&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;nova&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vitrage_datasource_name&#34;</span><span class="p">:</span> <span class="s2">&#34;nova.zone&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;graph_index&#34;</span><span class="p">:</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="err">...</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;raw&#34;</span><span class="err">:</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl"><span class="err">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="图谱建模" class="headerLink">
    <a href="#%e5%9b%be%e8%b0%b1%e5%bb%ba%e6%a8%a1" class="header-mark"></a>2 图谱建模</h2><p>本实验环境中，我们考虑纳入如下资源进入图谱：</p>
<ul>
<li>nova instance: 是Nova服务中的虚拟机实例，每个nova instance都有自己的配置信息（如CPU、内存、磁盘等），有时候我们就叫它 server 或者 VM、虚机。</li>
<li>nova host是Nova服务中的物理主机，是nova instance运行的物理环境。nova host上面会运行nova-compute服务，这个服务负责管理和调度nova instance。nova host上面还可能运行其他服务，如网络服务等。</li>
<li>nova keypair: 是Nova服务中的密钥对，用于访问nova instance</li>
<li>cinder volume: 是Cinder服务中的云存储卷，可以 attach 到nova instance上做为硬盘</li>
<li>cinder snapshot: 是Cinder服务中的云存储快照，可以在cinder volume上做快照</li>
<li>glance image: 是Glance服务中的镜像，可以作为创建nova instance时候的启动硬盘</li>
<li>neutron network: 是Neutron服务中的网络，可以用于配置nova instance的网络连接</li>
<li>neutron port: 是Neutron服务中的端口，用来连接nova instance和neutron network之间，在 nova instance 虚拟机上，一个 port 常常对应一个网卡（如果不是 trunk port 的话）。</li>
</ul>
<p>他们之间的关系如下：</p>
<p><figure><a class="lightgallery" href="/graph-enabled-infra-ops/schema_draft.webp" title="schema_draft" data-thumbnail="/graph-enabled-infra-ops/schema_draft.webp">
        <img
            
            loading="lazy"
            src="/graph-enabled-infra-ops/schema_draft.webp"
            srcset="/graph-enabled-infra-ops/schema_draft.webp, /graph-enabled-infra-ops/schema_draft.webp 1.5x, /graph-enabled-infra-ops/schema_draft.webp 2x"
            sizes="auto"
            alt="/graph-enabled-infra-ops/schema_draft.webp">
    </a></figure></p>
<h2 id="基础设施图-etl" class="headerLink">
    <a href="#%e5%9f%ba%e7%a1%80%e8%ae%be%e6%96%bd%e5%9b%be-etl" class="header-mark"></a>3 基础设施图 ETL</h2><p>接下来我们解决从基础设施中抽取资源元数据的问题，</p>
<h3 id="push-模式" class="headerLink">
    <a href="#push-%e6%a8%a1%e5%bc%8f" class="header-mark"></a>3.1 push 模式</h3><p>这里的 push 指的是基础设施为主语，从资源方向我们的图谱系统主动、事件驱动地发出资源变动的信息。它的好处是资源中的实时性好，但是坏处是依赖基础设施自身，很多非常瘦的、软件定义/可编程程度不高的组件、比如某些硬件设备没有 push 机制，或者像是古老的软件系统不一定能存在 push 的接口，改造起来有侵入性。</p>
<p>前边提及过，OpenStack 自身是存在 Push hook 的机制的，它的子项目 vitrage 就利用这个机制很优雅地收集系统资源、告警等信息进入图中，类似的机制在其他平台中也是可以实现的。</p>
<p>本实验中我们就利用 vitrage 的机制去收集一部分图谱中的资源信息，如下图，可以看到 vitrage 会在 OpenStack message bus 中订阅 nova/cinder/neutron 等服务中的资源时间，把事件传入 Entity Queue，经过处理，存储到 Entity Graph 中。</p>
<p>在此之上，我们可以通过 vitrage API 获取图谱的拓扑，来消费它。</p>
<blockquote>
<p>注意：实际上 Vitrage 服务还提供了推理告警、推理状态、定义决策事件的能力，这里我们并没有采用，后边我们在图上做的一些事情甚至还和它的能力有一些重叠。</p>
</blockquote>
<p><figure><a class="lightgallery" href="/graph-enabled-infra-ops/vitrage_arch.webp" title="vitrage_arch" data-thumbnail="/graph-enabled-infra-ops/vitrage_arch.webp">
        <img
            
            loading="lazy"
            src="/graph-enabled-infra-ops/vitrage_arch.webp"
            srcset="/graph-enabled-infra-ops/vitrage_arch.webp, /graph-enabled-infra-ops/vitrage_arch.webp 1.5x, /graph-enabled-infra-ops/vitrage_arch.webp 2x"
            sizes="auto"
            alt="/graph-enabled-infra-ops/vitrage_arch.webp">
    </a></figure></p>
<p>这里我只是用它来展示 push 模式的工作机制，如果没有 Virtrage 这个项目存在，我们也可以比较容易通过 OpenStack 的 oslo.messaging 这个库很容易写出在 Message Bus（可能是 Kafka, RabbitMQ 等不同底层实现）上订阅资源时间的应用，然后把事件通过 Flink/ Kafka/ Pulsar 等方式接驳 NebulaGraph。</p>
<p>因为 Vitrage 的存在，我就偷懒不用去实现这部分逻辑，只消写一小部分代码调用 Vitrage API 取这个数据就可以了，讽刺的是，从这个角度来看，这其实是一种 pull 的模式了，不用拘泥它本质上算是哪一种方式，至少在资源发起测，我们把它当做 push 模式的例子看待吧。</p>
<p>这部分从 Vitrage 抓取的代码我放在 <a href="https://github.com/wey-gu/openstack-graph/blob/main/utils/vitrage_to_graph.py" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/openstack-graph/blob/main/utils/vitrage_to_graph.py</a> 了，调用方式很简单，在有 OpenStack 客户端的环境中，执行它就可以了，比如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 连到 node0 上</span>
</span></span><span class="line"><span class="cl">ssh stack@node0_ip
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 进入 devstack 目录</span>
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> devstack
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 下载 vitrage 中图数据，解析为 NeublaGraph DML/DQL 的工具</span>
</span></span><span class="line"><span class="cl">wget https://raw.githubusercontent.com/wey-gu/openstack-graph/main/utils/vitrage_to_graph.py
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 执行它</span>
</span></span><span class="line"><span class="cl">python3 vitrage_to_graph.py
</span></span></code></pre></td></tr></table>
</div>
</div><p>执行之后，会生成如下文件：</p>
<ul>
<li><code>schema.ngql</code> 图数据的 Schema 定义</li>
<li><code>vertices/</code> 点数据的文件夹</li>
<li><code>edges/</code> 边数据的文件夹</li>
</ul>
<h3 id="pull-模式" class="headerLink">
    <a href="#pull-%e6%a8%a1%e5%bc%8f" class="header-mark"></a>3.2 pull 模式</h3><p>反过来，pull 模式是从资源外部定期或者事件驱动地拉取资源，存入图谱的方式。刚好本实验中 vitrage 抓取的资源是有限的，有一些额外的资源我单独写了 python 的代码来主动全量抓取，pull 模式的好处是对资源方没有任何侵入性，只需要调用它的接口获取信息就可以了，坏处则是有的系统不太容易获得增量变化，可能只能全量去取。</p>
<p>这部分我抓取的关系如下：</p>
<ul>
<li>glance_used_by: <code>image -[:used_by]-&gt; instance (get from instance)</code></li>
<li>glance_created_from: <code>image -[:created_from]-&gt; volume (get from image)</code></li>
<li>nova_keypair_used_by: <code>keypair -[:used_by]-&gt; instance (get from instance)</code></li>
<li>cinder_snapshot_created_from: <code>volume snapshot -[:created_from]-&gt; volume (get from snapshot)</code></li>
<li>cinder_volume_created_from: <code>volume -[:created_from]-&gt; volume snapshot (get from volume)</code></li>
<li>cinder_volume_created_from: <code>volume -[:created_from]-&gt; image (get from volume)</code></li>
</ul>
<p>类似的，它的代码放在 <a href="https://github.com/wey-gu/openstack-graph/blob/main/utils/pull_resources_to_graph.py" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/openstack-graph/blob/main/utils/pull_resources_to_graph.py</a> 之中，在真实场景下，我们可能会用 Apache Airflow、dagster 甚至是 cron job 等方式定期执行它。</p>
<p>我们手动执行的方式也很简单：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 连到 node0 上</span>
</span></span><span class="line"><span class="cl">ssh stack@node0_ip
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 进入 devstack 目录</span>
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> devstack
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 下载抓取 OpenStack 资源，生成 NeublaGraph DML/DQL 的工具</span>
</span></span><span class="line"><span class="cl">wget https://raw.githubusercontent.com/wey-gu/openstack-graph/main/utils/pull_resources_to_graph.py.py
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 执行它</span>
</span></span><span class="line"><span class="cl">python3 pull_resources_to_graph.py
</span></span></code></pre></td></tr></table>
</div>
</div><p>执行之后，会生成点、边的 ngql 语句在两个文件夹下：</p>
<ul>
<li><code>vertices/</code> 点数据的文件夹</li>
<li><code>edges/</code> 边数据的文件夹</li>
</ul>
<h3 id="加载数据到-nebulagraph" class="headerLink">
    <a href="#%e5%8a%a0%e8%bd%bd%e6%95%b0%e6%8d%ae%e5%88%b0-nebulagraph" class="header-mark"></a>3.3 加载数据到 NebulaGraph</h3><p>我们只需要在 NebulaGraph Studio Console, Explorer Console 或者 NebulaGraph 命令行 Console 中执行上边生成的 <code>.ngql</code> 文件就好了：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># DDL from vitrage</span>
</span></span><span class="line"><span class="cl">cat schema.ngql
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># DDL and DML for both push and pull mode data</span>
</span></span><span class="line"><span class="cl">cat edges/*.ngql
</span></span><span class="line"><span class="cl">cat vertices/*.ngql
</span></span></code></pre></td></tr></table>
</div>
</div><p>之后，在 NebulaGraph 中我们会有一个叫做 <code>openstack</code> 的图空间，用这个查询可以查到所有数据：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">MATCH (n) WITH n LIMIT 1000
</span></span><span class="line"><span class="cl">OPTIONAL MATCH p=(n)--()
</span></span><span class="line"><span class="cl">RETURN p, n
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后渲染在 explorer 中，手动设置一下数据的图标，就可以看到我们 OpenStack 集群里的所有租户的资源图了：</p>
<p><figure><a class="lightgallery" href="/graph-enabled-infra-ops/all_graph_view.webp" title="all_graph_view" data-thumbnail="/graph-enabled-infra-ops/all_graph_view.webp">
        <img
            
            loading="lazy"
            src="/graph-enabled-infra-ops/all_graph_view.webp"
            srcset="/graph-enabled-infra-ops/all_graph_view.webp, /graph-enabled-infra-ops/all_graph_view.webp 1.5x, /graph-enabled-infra-ops/all_graph_view.webp 2x"
            sizes="auto"
            alt="/graph-enabled-infra-ops/all_graph_view.webp">
    </a></figure></p>
<p>接下来我们终于可以在图上看看有意思的洞察了。</p>
<h2 id="基于图谱的基础设施运维示例" class="headerLink">
    <a href="#%e5%9f%ba%e4%ba%8e%e5%9b%be%e8%b0%b1%e7%9a%84%e5%9f%ba%e7%a1%80%e8%ae%be%e6%96%bd%e8%bf%90%e7%bb%b4%e7%a4%ba%e4%be%8b" class="header-mark"></a>4 基于图谱的基础设施运维示例</h2><p>作为非 SRE、DevOps 人员，我尝试藉由自己在 OpenStack 和图技术的理解想象出下边的一些实例，希望能帮助到需要的读者们。</p>
<h3 id="告警状态的推理与传导" class="headerLink">
    <a href="#%e5%91%8a%e8%ad%a6%e7%8a%b6%e6%80%81%e7%9a%84%e6%8e%a8%e7%90%86%e4%b8%8e%e4%bc%a0%e5%af%bc" class="header-mark"></a>4.1 告警、状态的推理与传导</h3><p>这部分我收到了 vitrage 项目的启发，参考它们给出的实例文档：<a href="https://github.com/openstack/vitrage/blob/master/doc/source/contributor/vitrage-templates.rst" target="_blank" rel="noopener noreferrer">这里</a>。</p>
<p>借助资源图谱实时图查询、图计算甚至图可视化能力，我们可以在图上推理、传导一些信息，把重要的时间藉由图上组织好的知识分发到需要收到通知的人、组织、系统。</p>
<p>一个简单的例子是，比如我们在 nova host（虚拟机的宿主机、hypervisor 机器，以下简称宿主机），中获得了一个告警、事件的时候，可能是网卡失败、物理硬盘预警、CPU占用过高之类的告警。我们可以借助图谱查询获得所有相关联的虚机，然后把（WARN）级别的告警发出去或者设置它们为（亚健康）的状态。</p>
<p>这样，获得通知的对象，往往是一些用户的系统，就可以根据他们预先定义好的策略做一些自动化运维，或者通知的 hook：</p>
<ul>
<li>收到“宿主机 CPU 过高”的告警的情形下，可以根据用户自己设定的不同策略把虚机迁移走，或者更高级复杂的撤离方式（开始不接受新的 traffic，创建新的替代 workload，然后 gracefully 关闭这个 workload）</li>
<li>“控制面网络故障”告警情况下，这时候往往无法成功进行主机的车里、迁移，故可以考虑触发备份主机、启动新 workload、关机</li>
<li>其他“（亚健康）状态”，可以作为负载层面出问题的根因分析（RCA）依据</li>
</ul>
<p>下边，我们给出一个在图谱上进行告警、状态传导的查询例子，我们假设 vid 为 <code>node0</code> 的宿主机出现了高 CPU 的告警，则这个查询可以得到所有其上的虚机，获得时间、告警通知列表：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">vm</span><span class="p">:</span><span class="n">nova_instance</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="o">`</span><span class="n">contains</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">host_CPU_high</span><span class="p">:</span><span class="n">nova_host</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">host_CPU_high</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;node0&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">vm</span><span class="p">.</span><span class="n">nova_instance</span><span class="p">.</span><span class="n">name</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">VM_to_raise_CPU_alarms</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这其中查询的图模式是从 <code>host_CPU_high</code> 这个 <code>nova_host</code> 向外经由 <code>contains</code> 这个关系指向 <code>vm</code> 这个 <code>nova_instance</code> 的：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="p">(</span><span class="n">vm</span><span class="p">:</span><span class="n">nova_instance</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="o">`</span><span class="n">contains</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">host_CPU_high</span><span class="p">:</span><span class="n">nova_host</span><span class="p">)</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>它的结果是：</p>
<table>
<thead>
<tr>
<th style="text-align:left">VM_to_raise_CPU_alarms</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">server-4</td>
</tr>
<tr>
<td style="text-align:left">server-3</td>
</tr>
<tr>
<td style="text-align:left">server-1</td>
</tr>
<tr>
<td style="text-align:left">server-0</td>
</tr>
</tbody>
</table>
<p>如果我们把查询改动一下，选择输出全路径，则可以看到这个信息传导的方向：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">vm</span><span class="p">:</span><span class="n">nova_instance</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="o">`</span><span class="n">contains</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">host_CPU_high</span><span class="p">:</span><span class="n">nova_host</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">host_CPU_high</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;node0&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>在 Explorer 中渲染，点击 N 跳检测：</p>
<video width="800" controls>
  <source src="https://user-images.githubusercontent.com/1651790/212291702-1754c9ce-f23f-4a68-930c-07a587c113be.mov" type="video/mp4"> 
</video>
<p>第一个例子比较简单，甚至不是很有必要用图的能力（这种因为一跳查询表结构中也是很轻松地，我们用一两个 nova API call 就可以搞定等价的信息获取了），这里只是一个例子，实际上我们在图上可以做很多更 Graphy（具有图属性的）、复杂、独特的工作，我们慢慢来看。</p>
<h3 id="网络可达检测" class="headerLink">
    <a href="#%e7%bd%91%e7%bb%9c%e5%8f%af%e8%be%be%e6%a3%80%e6%b5%8b" class="header-mark"></a>4.2 网络可达检测</h3><p>我们来考虑这样的场景，在 OpenStack 中，不同的主机可以连接到相同的子网（VPC），主机也可以连接到多个子网之中，这样，主机之间的网络连通性信息、与网络联通相关的推理、传导都可以在图上进行。</p>
<blockquote>
<p>注：在真实世界中，这里可能还要考虑 Security Group、Router、Switch 等因素，本利中我们用到的 OpenStack 是 L2 only 的 Setup，比较简化。</p>
</blockquote>
<p>获得与虚机 <code>server_a</code> 同一 VPC 的所有其他虚机看起来很容易表达了：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">server_a</span><span class="p">)</span><span class="o">--</span><span class="p">(:</span><span class="n">neutron_port</span><span class="p">)</span><span class="o">--</span><span class="p">(:</span><span class="n">neutron_network</span><span class="p">)</span><span class="o">--</span><span class="p">(:</span><span class="n">neutron_port</span><span class="p">)</span><span class="o">--</span><span class="p">(</span><span class="n">server_b</span><span class="p">:</span><span class="o">`</span><span class="n">nova_instance</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">server_a</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;server-0&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">server_b</span><span class="p">.</span><span class="n">nova_instance</span><span class="p">.</span><span class="n">name</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">L2_connected_server</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>结果如下：</p>
<table>
<thead>
<tr>
<th style="text-align:left">L2_connected_server</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">server-1</td>
</tr>
</tbody>
</table>
<p>看起来很初级呀，接下来我们再查询与虚机 <code>server_a</code> 同一 VPC、或者有可能通过跨网络虚机而互联的主机的所有其他虚机，这时候，我们除了共享 neutron network(VPC) 的情况，还要查询所有二层直连的虚机可能通过其他 VPC 连出去的的虚机，这里，我们用到了 <code>OPTIONAL MATCH</code> 的表达，表示可能匹配到的模式：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">server_a</span><span class="p">)</span><span class="o">--</span><span class="p">(:</span><span class="n">neutron_port</span><span class="p">)</span><span class="o">--</span><span class="p">(</span><span class="n">net</span><span class="p">:</span><span class="n">neutron_network</span><span class="p">)</span><span class="o">--</span><span class="p">(:</span><span class="n">neutron_port</span><span class="p">)</span><span class="o">--</span><span class="p">(</span><span class="n">server_b</span><span class="p">:</span><span class="o">`</span><span class="n">nova_instance</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">server_a</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;server-0&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">server_b</span><span class="p">)</span><span class="o">--</span><span class="p">()</span><span class="o">--</span><span class="p">(</span><span class="n">other_net</span><span class="p">:</span><span class="n">neutron_network</span><span class="p">)</span><span class="o">--</span><span class="p">(:</span><span class="n">neutron_port</span><span class="p">)</span><span class="o">--</span><span class="p">(</span><span class="n">server_c</span><span class="p">:</span><span class="o">`</span><span class="n">nova_instance</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WITH</span><span class="w"> </span><span class="n">server_a</span><span class="p">,</span><span class="w"> </span><span class="n">server_b</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">same_subnet_machines</span><span class="p">,</span><span class="w"> </span><span class="n">server_c</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">routeable_machines</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">routeable_machines</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">server_a</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">same_subnet_machines</span><span class="p">.</span><span class="n">nova_instance</span><span class="p">.</span><span class="n">name</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">L2_connected_server</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="n">routeable_machines</span><span class="p">.</span><span class="n">nova_instance</span><span class="p">.</span><span class="n">name</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">cross_vpc_server</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到结果里，跨网络潜在的相连主机还有 server-3：</p>
<table>
<thead>
<tr>
<th style="text-align:left">L2_connected_server</th>
<th style="text-align:left">cross_vpc_server</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">server-1</td>
<td style="text-align:left">server-3</td>
</tr>
</tbody>
</table>
<p>我们将其可视化，同样，修改输出为路径 <code>p</code> 和 <code>p1</code>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">server_a</span><span class="p">)</span><span class="o">--</span><span class="p">(:</span><span class="n">neutron_port</span><span class="p">)</span><span class="o">--</span><span class="p">(</span><span class="n">net</span><span class="p">:</span><span class="n">neutron_network</span><span class="p">)</span><span class="o">--</span><span class="p">(:</span><span class="n">neutron_port</span><span class="p">)</span><span class="o">--</span><span class="p">(</span><span class="n">server_b</span><span class="p">:</span><span class="o">`</span><span class="n">nova_instance</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">server_a</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;server-0&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="n">p1</span><span class="o">=</span><span class="p">(</span><span class="n">server_b</span><span class="p">)</span><span class="o">--</span><span class="p">()</span><span class="o">--</span><span class="p">(</span><span class="n">other_net</span><span class="p">:</span><span class="n">neutron_network</span><span class="p">)</span><span class="o">--</span><span class="p">(:</span><span class="n">neutron_port</span><span class="p">)</span><span class="o">--</span><span class="p">(</span><span class="n">server_c</span><span class="p">:</span><span class="o">`</span><span class="n">nova_instance</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="p">,</span><span class="w"> </span><span class="n">p1</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>它可能的连接路径一目了然</p>
<p><figure><a class="lightgallery" href="/graph-enabled-infra-ops/cross_vpc_vm.webp" title="cross_vpc_vm" data-thumbnail="/graph-enabled-infra-ops/cross_vpc_vm.webp">
        <img
            
            loading="lazy"
            src="/graph-enabled-infra-ops/cross_vpc_vm.webp"
            srcset="/graph-enabled-infra-ops/cross_vpc_vm.webp, /graph-enabled-infra-ops/cross_vpc_vm.webp 1.5x, /graph-enabled-infra-ops/cross_vpc_vm.webp 2x"
            sizes="auto"
            alt="/graph-enabled-infra-ops/cross_vpc_vm.webp">
    </a></figure></p>
<p>有了获得这些信息的能力，我们可以可编程地连接告警、状态、安全风控、网络等方方面面系统了，因为这不是本文的重点，这里就不加以赘述了，欢迎大家来 NebulaGraph 社区分享你们的图洞察使用方式。</p>
<p>接下来我们来看看存储相关的例子。</p>
<h3 id="镜像云盘快照的血缘" class="headerLink">
    <a href="#%e9%95%9c%e5%83%8f%e4%ba%91%e7%9b%98%e5%bf%ab%e7%85%a7%e7%9a%84%e8%a1%80%e7%bc%98" class="header-mark"></a>4.3 镜像、云盘、快照的血缘</h3><p>在基础设施中，云盘（iSCSI、Ceph、NFS）、镜像、快照之间有多重复杂的关系，比如：</p>
<ul>
<li>一个系统镜像可能从某一个虚拟机挂载的云盘或者一个快照创建</li>
<li>一个云盘可能是从一个系统镜像、一个快照或者另一个云盘创建</li>
<li>一个快照是从一个云盘创建的</li>
</ul>
<p>这种血缘信息的识别和管理是很有必要的。下边的查询可以获得给定的虚机 <code>server-0</code> 的所有存储血缘：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">server_a</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">attached</span><span class="o">`|</span><span class="n">created_from</span><span class="o">|</span><span class="n">used_by</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">step1</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">server_a</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;server-0&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="n">p1</span><span class="o">=</span><span class="p">(</span><span class="n">step1</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">created_from</span><span class="o">*</span><span class="mi">1</span><span class="p">..</span><span class="mi">5</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">step2</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="p">,</span><span class="w"> </span><span class="n">p1</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>我们可以看到结果中：</p>
<ul>
<li><code>server-0</code> 的启动镜像（这里它是从本地盘启动的，没有挂载云盘）是从 <code>volume-1</code> 创建的</li>
<li><code>volume-1</code> 是从 <code>cirros-0.5.2-x86_64-disk</code> 这个镜像创建的</li>
<li>此外，还有其他有分叉关系的存储资源和他们也息息相关</li>
</ul>
<p><figure><a class="lightgallery" href="/graph-enabled-infra-ops/storage_lineage_0.webp" title="storage_lineage_0" data-thumbnail="/graph-enabled-infra-ops/storage_lineage_0.webp">
        <img
            
            loading="lazy"
            src="/graph-enabled-infra-ops/storage_lineage_0.webp"
            srcset="/graph-enabled-infra-ops/storage_lineage_0.webp, /graph-enabled-infra-ops/storage_lineage_0.webp 1.5x, /graph-enabled-infra-ops/storage_lineage_0.webp 2x"
            sizes="auto"
            alt="/graph-enabled-infra-ops/storage_lineage_0.webp">
    </a></figure></p>
<p>接下来，我们不只考虑存储资源，再看看涉及云盘（cinder_volume）挂载（attached）这层关系下的血缘关系：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">server_a</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">attached</span><span class="o">`|</span><span class="n">created_from</span><span class="o">|</span><span class="n">used_by</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">step1</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">server_a</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;server-4&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="n">p1</span><span class="o">=</span><span class="p">(</span><span class="n">step1</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">created_from</span><span class="o">|</span><span class="n">attached</span><span class="o">*</span><span class="mi">1</span><span class="p">..</span><span class="mi">5</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">step2</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="p">,</span><span class="w"> </span><span class="n">p1</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这次，我们可以从渲染图中读出这样的洞察：</p>
<ul>
<li><code>server-4</code> 的启动镜像（这里它是从本地盘启动的）是从 <code>volume-1</code> 创建的
<ul>
<li>而 <code>volume-1</code> 现在挂载在 <code>server-6</code> 上</li>
<li><code>volume-1</code> 是从 <code>cirros-0.5.2-x86_64-disk</code> 这个镜像创建的</li>
<li>同样 <code>cirros-0.5.2-x86_64-disk</code> 镜像被很多其他虚机在采用</li>
</ul>
</li>
<li><code>server-4</code> 同时挂载了数据盘 <code>volume-2</code>
<ul>
<li>而 <code>volume-2</code> 是一个多挂载的盘，它同时挂载在 <code>server-3</code> 之上</li>
<li><code>server-3</code> 的系统启动盘是从快照 <code>snapshot-202301111800-volume-1</code> 克隆创建的</li>
<li>快照 <code>snapshot-202301111800-volume-1</code> 是曾经从 <code>volume-1</code> 创建的</li>
<li><code>volume-1</code> 现在挂载在 <code>server-6</code> 上
<ul>
<li>快照不一定是从 <code>server-6</code> 而来，因为镜像可能被重新挂载过</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><figure><a class="lightgallery" href="/graph-enabled-infra-ops/storage_lineage_1.webp" title="storage_lineage_1" data-thumbnail="/graph-enabled-infra-ops/storage_lineage_1.webp">
        <img
            
            loading="lazy"
            src="/graph-enabled-infra-ops/storage_lineage_1.webp"
            srcset="/graph-enabled-infra-ops/storage_lineage_1.webp, /graph-enabled-infra-ops/storage_lineage_1.webp 1.5x, /graph-enabled-infra-ops/storage_lineage_1.webp 2x"
            sizes="auto"
            alt="/graph-enabled-infra-ops/storage_lineage_1.webp">
    </a></figure></p>
<p>而这些血缘信息可以被用在资源生命周期管理、根因分析、安全告警、状态传导上，这里不加以赘述。</p>
<h3 id="高相关性虚机预警" class="headerLink">
    <a href="#%e9%ab%98%e7%9b%b8%e5%85%b3%e6%80%a7%e8%99%9a%e6%9c%ba%e9%a2%84%e8%ad%a6" class="header-mark"></a>4.4 高相关性虚机预警</h3><p>下面再给一个节点相似度的应用，我们可以在全图或者子图上，利用图算法找到与一个虚机在图上关系的维度上最相似的其他虚机，基于在这种相关性增加新的关系，并在关系上做风险事件预警。</p>
<p>这次的图算法应用中，我们按照一个典型的从[快速子图验证]到[全图生产应用的]工作流。</p>
<h4 id="在子图上快速验证浏览器内算法" class="headerLink">
    <a href="#%e5%9c%a8%e5%ad%90%e5%9b%be%e4%b8%8a%e5%bf%ab%e9%80%9f%e9%aa%8c%e8%af%81%e6%b5%8f%e8%a7%88%e5%99%a8%e5%86%85%e7%ae%97%e6%b3%95" class="header-mark"></a>4.4.1 在子图上快速验证：浏览器内算法</h4><p>首先，我们试着从 <code>server-0</code> 的三度子图上做算法的验证。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">GET SUBGRAPH 3 STEPS FROM &#34;server-0&#34;
</span></span><span class="line"><span class="cl">YIELD VERTICES AS nodes, EDGES AS relationships;
</span></span></code></pre></td></tr></table>
</div>
</div><p>将结果渲染在画布上，我们可以看到子图中包含了其他几个虚机：</p>
<p><figure><a class="lightgallery" href="/graph-enabled-infra-ops/server_subgraph.webp" title="server_subgraph" data-thumbnail="/graph-enabled-infra-ops/server_subgraph.webp">
        <img
            
            loading="lazy"
            src="/graph-enabled-infra-ops/server_subgraph.webp"
            srcset="/graph-enabled-infra-ops/server_subgraph.webp, /graph-enabled-infra-ops/server_subgraph.webp 1.5x, /graph-enabled-infra-ops/server_subgraph.webp 2x"
            sizes="auto"
            alt="/graph-enabled-infra-ops/server_subgraph.webp">
    </a></figure></p>
<p>然后，我们利用 explorer 中的浏览器内图算法，可以非常方便地验证我们的想法，这里，我们使用 Jaccard SImilarity 相似性算法，进行 <code>server-0</code> 与 <code>server-1,server-3,server-4,server-6</code> 迭代分别得到相似性：</p>
<p><figure><a class="lightgallery" href="/graph-enabled-infra-ops/jacc_sim_browser.webp" title="jacc_sim_browser" data-thumbnail="/graph-enabled-infra-ops/jacc_sim_browser.webp">
        <img
            
            loading="lazy"
            src="/graph-enabled-infra-ops/jacc_sim_browser.webp"
            srcset="/graph-enabled-infra-ops/jacc_sim_browser.webp, /graph-enabled-infra-ops/jacc_sim_browser.webp 1.5x, /graph-enabled-infra-ops/jacc_sim_browser.webp 2x"
            sizes="auto"
            alt="/graph-enabled-infra-ops/jacc_sim_browser.webp">
    </a></figure></p>
<p>可以看出，在 3 步子图内，和 <code>server-0</code> 最近接的虚机是 <code>server-4</code>。进一步我们可以简单在子图上看看两者之间的路径作为相似性的解释：</p>
<p><figure><a class="lightgallery" href="/graph-enabled-infra-ops/sim_explain.webp" title="sim_explain" data-thumbnail="/graph-enabled-infra-ops/sim_explain.webp">
        <img
            
            loading="lazy"
            src="/graph-enabled-infra-ops/sim_explain.webp"
            srcset="/graph-enabled-infra-ops/sim_explain.webp, /graph-enabled-infra-ops/sim_explain.webp 1.5x, /graph-enabled-infra-ops/sim_explain.webp 2x"
            sizes="auto"
            alt="/graph-enabled-infra-ops/sim_explain.webp">
    </a></figure></p>
<p>在这个可解释结果中，我们知道 <code>server-0</code> 与 <code>server-4</code> 相似的原因可能是：</p>
<ul>
<li>坐落在同一个宿主机：node-0</li>
<li>使用同一个镜像：cirros_mod_from_volume-1</li>
</ul>
<p>如此，我们最终落地的预警机制可能是，当 <code>server-0</code> 出现某一问题、告警时候，给相似的 server-4 也设定预警，预警理由就是它们在同样主机、同样镜像。</p>
<h4 id="落地算法为应用workflowanalytics" class="headerLink">
    <a href="#%e8%90%bd%e5%9c%b0%e7%ae%97%e6%b3%95%e4%b8%ba%e5%ba%94%e7%94%a8workflowanalytics" class="header-mark"></a>4.4.2 落地算法为应用：Workflow+Analytics</h4><p>有了前边的快速实验，我们可以借助 workflow + NebulaGraph Analytics 把它落地为全图上的算法，利用 Analytics 分布式能力去执行。</p>
<p>在生产上，我们利用 Workflow 的 DAG 编排能力创建两个前后相连的任务：</p>
<ul>
<li>取临近虚机</li>
<li>全图算相似度</li>
</ul>
<p>第一个任务如下，它实时从给定的虚机（这里写死了 server-0，但是 workflow 可以把这里作为参数化，并封装任务为可以被 API 触发的异步服务）：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="o">*</span><span class="mi">1</span><span class="p">..</span><span class="mi">5</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">nova_instance</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;server-0&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">m</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="k">distinct</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">m</span><span class="p">)</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这里 Query job 我们输出待比较的其他虚机的 vid。</p>
<p><figure><a class="lightgallery" href="/graph-enabled-infra-ops/query_sim_server.webp" title="query_sim_server" data-thumbnail="/graph-enabled-infra-ops/query_sim_server.webp">
        <img
            
            loading="lazy"
            src="/graph-enabled-infra-ops/query_sim_server.webp"
            srcset="/graph-enabled-infra-ops/query_sim_server.webp, /graph-enabled-infra-ops/query_sim_server.webp 1.5x, /graph-enabled-infra-ops/query_sim_server.webp 2x"
            sizes="auto"
            alt="/graph-enabled-infra-ops/query_sim_server.webp">
    </a></figure></p>
<p>接着，JaccardSImilarity job 中，我们选择 ids1 为 server-0（这里如上，上线时是参数化的），ids2 从上游取（前边的 Query job），选择在 openstack 全图扫描所有类型的边。<figure><a class="lightgallery" href="/graph-enabled-infra-ops/jacc_sim_workflow.webp" title="jacc_sim_workflow" data-thumbnail="/graph-enabled-infra-ops/jacc_sim_workflow.webp">
        <img
            
            loading="lazy"
            src="/graph-enabled-infra-ops/jacc_sim_workflow.webp"
            srcset="/graph-enabled-infra-ops/jacc_sim_workflow.webp, /graph-enabled-infra-ops/jacc_sim_workflow.webp 1.5x, /graph-enabled-infra-ops/jacc_sim_workflow.webp 2x"
            sizes="auto"
            alt="/graph-enabled-infra-ops/jacc_sim_workflow.webp">
    </a></figure></p>
<p>保存、运行，我们可以看到，结果如下，区别是这次它运算了更多的目标虚机，并且迭代作用范围是全图而非一个子图，可以看到结果是一致的，这是因为子图上关联度大的点和相近的边在 Jaccard 算法里起到了更主要的作用。</p>
<p><figure><a class="lightgallery" href="/graph-enabled-infra-ops/jacc_result.webp" title="jacc_result" data-thumbnail="/graph-enabled-infra-ops/jacc_result.webp">
        <img
            
            loading="lazy"
            src="/graph-enabled-infra-ops/jacc_result.webp"
            srcset="/graph-enabled-infra-ops/jacc_result.webp, /graph-enabled-infra-ops/jacc_result.webp 1.5x, /graph-enabled-infra-ops/jacc_result.webp 2x"
            sizes="auto"
            alt="/graph-enabled-infra-ops/jacc_result.webp">
    </a></figure></p>
<h3 id="安全相关场景" class="headerLink">
    <a href="#%e5%ae%89%e5%85%a8%e7%9b%b8%e5%85%b3%e5%9c%ba%e6%99%af" class="header-mark"></a>4.5 安全相关场景</h3><p>基础设施资源中的关联关系和金融、内容系统、电商领域的风控场景有相似的地方，很多场景本质上利用到了图谱关系中的知识，在图库上实时获取这些复杂多跳天然带有可解释性的安全洞察非常适合。</p>
<h4 id="秘钥泄漏风控分析" class="headerLink">
    <a href="#%e7%a7%98%e9%92%a5%e6%b3%84%e6%bc%8f%e9%a3%8e%e6%8e%a7%e5%88%86%e6%9e%90" class="header-mark"></a>4.5.1 秘钥泄漏风控分析</h4><p>先看一个秘钥泄漏的场景：假设 <code>key-0</code> 被安全部门确定被泄漏了，我们可以在毫秒时间内获得如下查询：</p>
<ul>
<li>直接采用了密钥的虚机</li>
<li>与采用秘钥的虚机网络直连的机器</li>
<li>与采用秘钥的虚机跨网络相连的机器</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">key_leaked</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">used_by</span><span class="o">`</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">involved_server</span><span class="p">:</span><span class="n">nova_instance</span><span class="p">)</span><span class="o">--</span><span class="p">(:</span><span class="n">neutron_port</span><span class="p">)</span><span class="o">--</span><span class="p">(</span><span class="n">net</span><span class="p">:</span><span class="n">neutron_network</span><span class="p">)</span><span class="o">--</span><span class="p">(:</span><span class="n">neutron_port</span><span class="p">)</span><span class="o">--</span><span class="p">(</span><span class="n">server_b</span><span class="p">:</span><span class="n">nova_instance</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">key_leaked</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;key-0&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">server_b</span><span class="p">)</span><span class="o">--</span><span class="p">()</span><span class="o">--</span><span class="p">(</span><span class="n">other_net</span><span class="p">:</span><span class="n">neutron_network</span><span class="p">)</span><span class="o">--</span><span class="p">(:</span><span class="n">neutron_port</span><span class="p">)</span><span class="o">--</span><span class="p">(</span><span class="n">server_c</span><span class="p">:</span><span class="n">nova_instance</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WITH</span><span class="w"> </span><span class="n">involved_server</span><span class="p">,</span><span class="w"> </span><span class="n">server_b</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">same_subnet_machines</span><span class="p">,</span><span class="w"> </span><span class="n">server_c</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">cross_net_machines</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">WHERE</span><span class="w"> </span><span class="n">cross_net_machines</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">involved_server</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">involved_server</span><span class="p">.</span><span class="n">nova_instance</span><span class="p">.</span><span class="n">name</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">with_key</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">same_subnet_machines</span><span class="p">.</span><span class="n">nova_instance</span><span class="p">.</span><span class="n">name</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">l2_vms</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">cross_net_machines</span><span class="p">.</span><span class="n">nova_instance</span><span class="p">.</span><span class="n">name</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">cross_vpc_vms</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>贴一下部分结果，我们知道 server-4 采用了这个 keypair，并且 server-6 和它在同一个网络，同时，有一定可能，通过 server-6，server-1,2,0,5 也受到了威胁、影响，相关的机器可以被触发不同级别的告警来降低安全事故的影响。</p>
<table>
<thead>
<tr>
<th style="text-align:left">with_key</th>
<th style="text-align:left">l2_vms</th>
<th style="text-align:left">cross_vpc_vms</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">server-4</td>
<td style="text-align:left">server-6</td>
<td style="text-align:left">server-1</td>
</tr>
<tr>
<td style="text-align:left">server-4</td>
<td style="text-align:left">server-6</td>
<td style="text-align:left">server-2</td>
</tr>
<tr>
<td style="text-align:left">server-4</td>
<td style="text-align:left">server-6</td>
<td style="text-align:left">server-0</td>
</tr>
<tr>
<td style="text-align:left">server-4</td>
<td style="text-align:left">server-6</td>
<td style="text-align:left">server-5</td>
</tr>
</tbody>
</table>
<p>这个查询改造为可视化结果：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">key_leaked</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">used_by</span><span class="o">`</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">involved_server</span><span class="p">:</span><span class="n">nova_instance</span><span class="p">)</span><span class="o">--</span><span class="p">(:</span><span class="n">neutron_port</span><span class="p">)</span><span class="o">--</span><span class="p">(</span><span class="n">net</span><span class="p">:</span><span class="n">neutron_network</span><span class="p">)</span><span class="o">--</span><span class="p">(:</span><span class="n">neutron_port</span><span class="p">)</span><span class="o">--</span><span class="p">(</span><span class="n">server_b</span><span class="p">:</span><span class="n">nova_instance</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">key_leaked</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;key-0&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="n">p1</span><span class="o">=</span><span class="p">(</span><span class="n">server_b</span><span class="p">)</span><span class="o">--</span><span class="p">()</span><span class="o">--</span><span class="p">(</span><span class="n">other_net</span><span class="p">:</span><span class="n">neutron_network</span><span class="p">)</span><span class="o">--</span><span class="p">(:</span><span class="n">neutron_port</span><span class="p">)</span><span class="o">--</span><span class="p">(</span><span class="n">server_c</span><span class="p">:</span><span class="n">nova_instance</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="p">,</span><span class="n">p1</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>在 explorer 里 应用 Dagre-LR 的布局，一关联关系很清晰的被展示出来，也许可以考虑把它引用在安全事故的报告分发给虚机租户。</p>
<p><figure><a class="lightgallery" href="/graph-enabled-infra-ops/key_leaked.webp" title="key_leaked" data-thumbnail="/graph-enabled-infra-ops/key_leaked.webp">
        <img
            
            loading="lazy"
            src="/graph-enabled-infra-ops/key_leaked.webp"
            srcset="/graph-enabled-infra-ops/key_leaked.webp, /graph-enabled-infra-ops/key_leaked.webp 1.5x, /graph-enabled-infra-ops/key_leaked.webp 2x"
            sizes="auto"
            alt="/graph-enabled-infra-ops/key_leaked.webp">
    </a></figure></p>
<h4 id="镜像云盘漏洞范围分析" class="headerLink">
    <a href="#%e9%95%9c%e5%83%8f%e4%ba%91%e7%9b%98%e6%bc%8f%e6%b4%9e%e8%8c%83%e5%9b%b4%e5%88%86%e6%9e%90" class="header-mark"></a>4.5.2 镜像、云盘漏洞范围分析</h4><p>类似的，一个镜像被扫出漏洞，我们可以瞬间查到涉及到的资源，并做出相应</p>
<ul>
<li>镜像文件有漏洞</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">image_risky</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">created_from</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">step1</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">image_risky</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;cirros-0.5.2-x86_64-disk&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="n">p1</span><span class="o">=</span><span class="p">(</span><span class="n">step1</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">created_from</span><span class="o">*</span><span class="mi">1</span><span class="p">..</span><span class="mi">5</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">step2</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="p">,</span><span class="w"> </span><span class="n">p1</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><figure><a class="lightgallery" href="/graph-enabled-infra-ops/image_vulnerability.webp" title="image_vulnerability" data-thumbnail="/graph-enabled-infra-ops/image_vulnerability.webp">
        <img
            
            loading="lazy"
            src="/graph-enabled-infra-ops/image_vulnerability.webp"
            srcset="/graph-enabled-infra-ops/image_vulnerability.webp, /graph-enabled-infra-ops/image_vulnerability.webp 1.5x, /graph-enabled-infra-ops/image_vulnerability.webp 2x"
            sizes="auto"
            alt="/graph-enabled-infra-ops/image_vulnerability.webp">
    </a></figure></p>
<ul>
<li>一个云盘有漏洞</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">volume_risky</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">created_from</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">step1</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">volume_risky</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;volume-1&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="n">p1</span><span class="o">=</span><span class="p">(</span><span class="n">step1</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">created_from</span><span class="o">*</span><span class="mi">1</span><span class="p">..</span><span class="mi">5</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">step2</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="p">,</span><span class="w"> </span><span class="n">p1</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><figure><a class="lightgallery" href="/graph-enabled-infra-ops/volume_vulnerability.webp" title="volume_vulnerability" data-thumbnail="/graph-enabled-infra-ops/volume_vulnerability.webp">
        <img
            
            loading="lazy"
            src="/graph-enabled-infra-ops/volume_vulnerability.webp"
            srcset="/graph-enabled-infra-ops/volume_vulnerability.webp, /graph-enabled-infra-ops/volume_vulnerability.webp 1.5x, /graph-enabled-infra-ops/volume_vulnerability.webp 2x"
            sizes="auto"
            alt="/graph-enabled-infra-ops/volume_vulnerability.webp">
    </a></figure></p>
<h4 id="潜在宿主机逃离影响范围分析" class="headerLink">
    <a href="#%e6%bd%9c%e5%9c%a8%e5%ae%bf%e4%b8%bb%e6%9c%ba%e9%80%83%e7%a6%bb%e5%bd%b1%e5%93%8d%e8%8c%83%e5%9b%b4%e5%88%86%e6%9e%90" class="header-mark"></a>4.5.3 潜在宿主机逃离影响范围分析</h4><p>最后，我们讨论一个比较严重的安全问题：宿主机逃离。</p>
<p>在极端的情况下如果在我们得到消息，<code>server-0</code> 发生了有可能影响宿主机的安全时间的时候，仅仅关闭这个宿主机是不够的，受影响的范围可能已经扩大了，然而，我们不可能因为这样关闭整个机房，所以，利用图谱辅助找出受影响范围会有一些帮助。</p>
<p>下面的查询模式是：</p>
<ul>
<li>找出可能被影响的子网（VPC），标记最高级别风险子网为后续定位做准备</li>
<li>找到可能被控制了的宿主机</li>
<li>从宿主机触发，找出同主机的其他虚机</li>
<li>从其他虚机触发，找到它们的子网（VPC）</li>
<li>从其他虚机触发，找到可能已经被影响的网盘（防止被挂载到其他机器，扩大影响）</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">server_escaping_hypervisor</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="o">`</span><span class="n">contains</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">hypervisor_compromised</span><span class="p">:</span><span class="n">nova_host</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">server_escaping_hypervisor</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;server-0&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">server_escaping_hypervisor</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">attached</span><span class="p">]</span><span class="o">-</span><span class="p">(:</span><span class="n">neutron_port</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">contains</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">impacted_subnet_high</span><span class="p">:</span><span class="n">neutron_network</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">hypervisor_compromised</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">contains</span><span class="o">`</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">server_same_host</span><span class="p">:</span><span class="n">nova_instance</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">server_same_host</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">attached</span><span class="p">]</span><span class="o">-</span><span class="p">(:</span><span class="n">neutron_port</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">contains</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">impacted_subnet</span><span class="p">:</span><span class="n">neutron_network</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">server_same_host</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">attached</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">impacted_volume</span><span class="p">:</span><span class="n">cinder_volume</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">impacted_subnet_high</span><span class="p">.</span><span class="n">neutron_network</span><span class="p">.</span><span class="n">name</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">impacted_subnet_high</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="n">hypervisor_compromised</span><span class="p">.</span><span class="n">nova_host</span><span class="p">.</span><span class="n">name</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">hypervisor_compromised</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="n">impacted_subnet</span><span class="p">.</span><span class="n">neutron_network</span><span class="p">.</span><span class="n">name</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">impacted_subnet</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="p">[</span><span class="n">server_same_host</span><span class="p">.</span><span class="n">nova_instance</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">server_same_host</span><span class="p">.</span><span class="n">nova_instance</span><span class="p">.</span><span class="n">instance_name</span><span class="p">]</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">server_same_host</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="n">impacted_volume</span><span class="p">.</span><span class="n">cinder_volume</span><span class="p">.</span><span class="n">name</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">impacted_volume</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>结果中列出了 server-0 被控制之后，考虑宿主机逃离的情况下可能受影响的扩散范围。</p>
<table>
<thead>
<tr>
<th style="text-align:left">impacted_subnet_high</th>
<th style="text-align:left">hypervisor_compromised</th>
<th style="text-align:left">impacted_subnet</th>
<th style="text-align:left">server_same_host</th>
<th style="text-align:left">impacted_volume</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">shared</td>
<td style="text-align:left">node0</td>
<td style="text-align:left">shared</td>
<td style="text-align:left">[&ldquo;server-0&rdquo;, &ldquo;instance-00000001&rdquo;]</td>
<td style="text-align:left"><strong>Empty</strong></td>
</tr>
<tr>
<td style="text-align:left">shared</td>
<td style="text-align:left">node0</td>
<td style="text-align:left">shared</td>
<td style="text-align:left">[&ldquo;server-1&rdquo;, &ldquo;instance-00000002&rdquo;]</td>
<td style="text-align:left">ffaeb199-47f4-4d95-89b2-97fba3c1bcfe</td>
</tr>
<tr>
<td style="text-align:left">shared</td>
<td style="text-align:left">node0</td>
<td style="text-align:left">private</td>
<td style="text-align:left">[&ldquo;server-1&rdquo;, &ldquo;instance-00000002&rdquo;]</td>
<td style="text-align:left">ffaeb199-47f4-4d95-89b2-97fba3c1bcfe</td>
</tr>
<tr>
<td style="text-align:left">shared</td>
<td style="text-align:left">node0</td>
<td style="text-align:left">private</td>
<td style="text-align:left">[&ldquo;server-3&rdquo;, &ldquo;instance-00000005&rdquo;]</td>
<td style="text-align:left">c9db7c2e-c712-49d6-8019-14b82de8542d</td>
</tr>
<tr>
<td style="text-align:left">shared</td>
<td style="text-align:left">node0</td>
<td style="text-align:left">private</td>
<td style="text-align:left">[&ldquo;server-3&rdquo;, &ldquo;instance-00000005&rdquo;]</td>
<td style="text-align:left">volume-2</td>
</tr>
<tr>
<td style="text-align:left">shared</td>
<td style="text-align:left">node0</td>
<td style="text-align:left">public</td>
<td style="text-align:left">[&ldquo;server-4&rdquo;, &ldquo;instance-00000006&rdquo;]</td>
<td style="text-align:left">volume-2</td>
</tr>
</tbody>
</table>
<p>咱们再看看它的可视化结果。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">server_escaping_hypervisor</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="o">`</span><span class="n">contains</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">hypervisor_compromised</span><span class="p">:</span><span class="n">nova_host</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">server_escaping_hypervisor</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;server-0&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="n">p0</span><span class="o">=</span><span class="p">(</span><span class="n">server_escaping_hypervisor</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">attached</span><span class="p">]</span><span class="o">-</span><span class="p">(:</span><span class="n">neutron_port</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">contains</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">impacted_subnet_high</span><span class="p">:</span><span class="n">neutron_network</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="n">p1</span><span class="o">=</span><span class="p">(</span><span class="n">hypervisor_compromised</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">contains</span><span class="o">`</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">server_same_host</span><span class="p">:</span><span class="n">nova_instance</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="n">p2</span><span class="o">=</span><span class="p">(</span><span class="n">server_same_host</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">attached</span><span class="p">]</span><span class="o">-</span><span class="p">(:</span><span class="n">neutron_port</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">contains</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">impacted_subnet</span><span class="p">:</span><span class="n">neutron_network</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="n">p3</span><span class="o">=</span><span class="p">(</span><span class="n">server_same_host</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">attached</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">impacted_volume</span><span class="p">:</span><span class="n">cinder_volume</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="p">,</span><span class="n">p0</span><span class="p">,</span><span class="n">p1</span><span class="p">,</span><span class="n">p2</span><span class="p">,</span><span class="n">p3</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>选择 Dagre 布局之后，可以比较清晰看出影响资源的范围，从这些可能受影响的虚机、网络、网盘出发，可以进一步采取需要的措施了。</p>
<p><figure><a class="lightgallery" href="/graph-enabled-infra-ops/hypervisor_escape.webp" title="hypervisor_escape" data-thumbnail="/graph-enabled-infra-ops/hypervisor_escape.webp">
        <img
            
            loading="lazy"
            src="/graph-enabled-infra-ops/hypervisor_escape.webp"
            srcset="/graph-enabled-infra-ops/hypervisor_escape.webp, /graph-enabled-infra-ops/hypervisor_escape.webp 1.5x, /graph-enabled-infra-ops/hypervisor_escape.webp 2x"
            sizes="auto"
            alt="/graph-enabled-infra-ops/hypervisor_escape.webp">
    </a></figure></p>
<h3 id="重点关注资源检测" class="headerLink">
    <a href="#%e9%87%8d%e7%82%b9%e5%85%b3%e6%b3%a8%e8%b5%84%e6%ba%90%e6%a3%80%e6%b5%8b" class="header-mark"></a>4.6 重点关注资源检测</h3><p>最后，利用 Betweenness Centrality 算法，我们可以得出基础设施中影响面大的那些，”脆弱环节“，这些资源不一定真的处在危险的状态，只是说，它们处在了比较重要的资源之间的交汇处，一旦它们出问题，出问题的代价可能会非常大。</p>
<p>识别出这样的资源之后我们可以考虑：</p>
<ul>
<li>有针对性采用更激进、昂贵的健康检查策略；</li>
<li>设定更高的支持、关切级别；</li>
<li>主动迁移相关联的资源以降低”脆弱环节“对整体基础设施可用性的影响范围；</li>
</ul>
<p>这次，我们就只在浏览器内部的子图上做算法流程验证，读者朋友们可以自己试着利用开源的 NebulaGraph Algorithm 或者付费的 NebulaGraph Workflow+Analytics 做全图上的等价操作。</p>
<p>首先，我们在前边用过的方式去扫描图上 1000 个点，并且从其出发，跳一跳，获得一个比较随机的子图，在我们当前的数据集下，这实际上捞取了全图的数据：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">MATCH (n) WITH n LIMIT 1000
</span></span><span class="line"><span class="cl">OPTIONAL MATCH p=(n)--()
</span></span><span class="line"><span class="cl">RETURN p, n
</span></span></code></pre></td></tr></table>
</div>
</div><p>在其之上，我们运行 Betweenness Centrality 之后，得到 <code>node0</code> 是分值最大的”脆弱一环“，的确，它是我们当前实验中负载最大的宿主机，可以想象它确实是故障之后全局影响最大的一个资源。</p>
<p><figure><a class="lightgallery" href="/graph-enabled-infra-ops/bwteeness_centrality.webp" title="bwteeness_centrality" data-thumbnail="/graph-enabled-infra-ops/bwteeness_centrality.webp">
        <img
            
            loading="lazy"
            src="/graph-enabled-infra-ops/bwteeness_centrality.webp"
            srcset="/graph-enabled-infra-ops/bwteeness_centrality.webp, /graph-enabled-infra-ops/bwteeness_centrality.webp 1.5x, /graph-enabled-infra-ops/bwteeness_centrality.webp 2x"
            sizes="auto"
            alt="/graph-enabled-infra-ops/bwteeness_centrality.webp">
    </a></figure></p>
<h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>5 总结</h2><p>在海量数据、企业云、混合云的复杂基础设施运维场景下，利用图数据库图算法的能力做高效的辅助运维工作是一个十分值得的尝试与技术投资。</p>
<p>NebulaGraph 作为高性能、开源、分布式的新一代云原生图数据库，是一个很值得考虑的图基础设施选型目标。</p>
<p>欢迎大家在文末留言讨论，本文的可复现环境和示例的 ETL 管道的代码、示例数据全都在 <a href="https://github.com/wey-gu/openstack-graph/" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/openstack-graph/</a> 开源，欢迎大家来一起完善。</p>
<blockquote>
<p>题图版权：<a href="https://unsplash.com/photos/Wv2U24G2F78" target="_blank" rel="noopener noreferrer">Ivan</a></p>
</blockquote>]]></description>
</item><item>
    <title>连接微信群、Slack 和 GitHub：社区开放沟通的基础设施搭建</title>
    <link>https://siwei.io/build-open-communication-infra/</link>
    <pubDate>Mon, 19 Dec 2022 19:45:53 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/build-open-communication-infra/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/build-open-communication-infra/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>NebulaGraph 社区如何构建工具让 Slack、WeChat 中宝贵的群聊讨论同步到公共领域</p>
</blockquote>
<!--

[TOC]

-->
<h2 id="要开放不要封闭" class="headerLink">
    <a href="#%e8%a6%81%e5%bc%80%e6%94%be%e4%b8%8d%e8%a6%81%e5%b0%81%e9%97%ad" class="header-mark"></a>1 要开放，不要封闭</h2><p>在开源社区中，开放的一个重要意义是社区内的沟通、讨论应该是透明、包容并且方便所有成员访问的。这意味着社区中的任何人都应该能够参与讨论和决策过程，并且所有相关信息应该公开和自由地共享。</p>
<p>在公共场合进行沟通在开源理念中是重要的，正式这种方式使得社区的成员可以进行有效地共同工作，分享想法和反馈，为项目或社区做出贡献。</p>
<p>为了更清楚表达，我举几个反面的例子：</p>
<ul>
<li>
<p>要求贡献者使用对他们来说难以访问或难以使用的工具可能会妨碍开源社区中的开放沟通。
这可能是由于多种原因，例如：</p>
<ul>
<li>工具可能昂贵或需要许可证，而并非所有贡献者都能负担得起。</li>
<li>工具可能难以使用或需要很高的技术经验积累，而并非所有贡献者都具备。</li>
<li>工具可能在某些操作系统或设备上不兼容，这可能使一些贡献者难以访问它们。</li>
</ul>
</li>
<li>
<p>在不与社区其他成员分享上下文、过程或结果的情况下，只在线下（例如通过当面沟通、IM 或电话会议）进行决策可能会使很重要的知识只被少数贡献者掌握。</p>
<p>这可能会阻止其他人在这些知识之上做贡献或从中学习，阻碍了开源社区所必需的开放沟通和协作。</p>
</li>
<li>
<p>没有把系统、功能设计和提案信息以公开方式文档化、归档下来，例如只提供某一个公司内网的链接，从而可能伤害开源社区的透明度和包容性。</p>
<p>因为这样的结果是社区的其他成员很难保持对社区进展的正常了解、就更不用说参与进来做贡献了。为了促进透明度和包容性，开源社区应尽量确保所有重要的信息公开和自由地共享、尽可能保有细节地被公开归档。</p>
</li>
</ul>
<h2 id="挑战" class="headerLink">
    <a href="#%e6%8c%91%e6%88%98" class="header-mark"></a>2 挑战</h2><p>为了使社区（或工作环境）的沟通保持透明、高效和健康，其实已经存在一些共识，和通用的做法：</p>
<ul>
<li>
<p>异步优于同步，在分布式和全球协作的情况下，同步通信在大多数情况下成本高且效率低。</p>
<p>因此，推荐使用 GitHub Discussion 和 StackOverflow 进行提问式的沟通。</p>
</li>
<li>
<p>专题（Thread）讨论优于广播（Fan out)，注意力是宝贵的，向所有人群发最终常常导致重要信息没有人真的读。</p>
<p>因此，我们在 GitHub Discussion 和 Slack 中设有分类、频道。建立 SIG 来讨论一些有趣的主题（并归档沟通的结果），而不是将所有事情带到社区会议广泛讨论。</p>
</li>
<li>
<p>优先选择可搜索/文本、版本控制、协作的方式与工具，并在可能的情况下鼓励成员们给其他人反馈；在基础设施上跟踪文档、设计流程，并且提供评论、review 的能力。</p>
<p>为此，我们用 etherpad.opendev.org 来记录社区会议文档。</p>
</li>
</ul>
<p>但是，就像我们还是需要同步的沟通、有 IM 和会议的需求一样，还是存在一些特例的情况，我们不能盲目追求异步、绝对的开放的，正如前边提到的，能让更多参与者公平、方便与社区连结本身也是开放的一部分，尽管使用的基础设施是可能是封闭的。事实上，几乎所有的开源社区都在用类似的方式建立他们的开源社区沟通平台：</p>
<ul>
<li>
<p>Slack 在 IM 消息中中支持丰富的格式化（支持 markdown！）和 Thread 系统，其现代化设计和开放/软定义接口使我们的工作流程可能非常优美流畅。</p>
</li>
<li>
<p>与 Slack 相比，微信在技术社区中在许多方面都很不理想（只是因为它不是专为这样场景而设计的！），但在国内，它是社区中所有人都可以访问的唯一平台。每个人都有一个微信账号，而只有很少一部分人会每天查邮件。</p>
</li>
</ul>
<p>于是，我们面临的问题是，在 NebulaGraph 社区中有两个平台承担了沟通的重要部分，但这些信息在几个月后就会消失，它们在短时间内只能被割裂的一部分贡献者看到，而未来没有人或其他平台可以读到、搜到和参考、引用这些有价值的讨论。</p>
<h2 id="我们摸索的方案" class="headerLink">
    <a href="#%e6%88%91%e4%bb%ac%e6%91%b8%e7%b4%a2%e7%9a%84%e6%96%b9%e6%a1%88" class="header-mark"></a>3 我们摸索的方案</h2><p>曾经有一段时间，我们会自己手动收集 Slack、微信群里的讨论摘要，定期分享、归档在公共领域，这个方法也确实带来了一些价值，然而，我们最后都没坚持下去，原因很简单：1. 这太费事儿了，完全不 scale；2. 这种摘要其实不好平衡能被归档信息的裁剪程度，有时候细节非常重要却不容易被摘要保留。</p>
<h3 id="搞定-slack-的信息孤岛" class="headerLink">
    <a href="#%e6%90%9e%e5%ae%9a-slack-%e7%9a%84%e4%bf%a1%e6%81%af%e5%ad%a4%e5%b2%9b" class="header-mark"></a>3.1 搞定 Slack 的信息孤岛</h3><p>2022 年 10 月，我注意到了 linen.dev 这个开源项目同时也是一个 SaaS 服务，有了它，我们可以把 Discord 和 Slack 中的每个 thread 保留，它整站看起来和 Discord/ Slack 机会样，但是，它完全是可以匿名被访问、引用和被搜索引擎搜索的。</p>
<p>经过几个月的评估，我们最终决定了订阅 linen.dev 服务。为此，我们可以获得：</p>
<ul>
<li>不用去碰现有的 Slack，所有 Slack 的好处都能得以保留</li>
<li>有了这样一个社区的站点 <a href="https://community-chat.nebula-graph.io/" target="_blank" rel="noopener noreferrer">https://community-chat.nebula-graph.io/</a>，其中，Slack 中的每个公共频道内容都能被匿名访问、能被搜索引擎收录，而访客还可以很容易知道怎么加入我们的 Slack，如图右上角：</li>
</ul>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/208391200-8670f7f7-6e7a-4f62-84d3-3d2594ab9083.png" title="https://user-images.githubusercontent.com/1651790/208391200-8670f7f7-6e7a-4f62-84d3-3d2594ab9083.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/208391200-8670f7f7-6e7a-4f62-84d3-3d2594ab9083.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/208391200-8670f7f7-6e7a-4f62-84d3-3d2594ab9083.png"
            srcset="https://user-images.githubusercontent.com/1651790/208391200-8670f7f7-6e7a-4f62-84d3-3d2594ab9083.png, https://user-images.githubusercontent.com/1651790/208391200-8670f7f7-6e7a-4f62-84d3-3d2594ab9083.png 1.5x, https://user-images.githubusercontent.com/1651790/208391200-8670f7f7-6e7a-4f62-84d3-3d2594ab9083.png 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/208391200-8670f7f7-6e7a-4f62-84d3-3d2594ab9083.png">
    </a></figure>
这个站会实时同步 Slack 里的消息，重要的是，它是面向搜索引擎优化的，你可以搜搜 Kotlin 社区通过 linen 被收录的网页有多少，搜这个：<a href="https://www.google.com/search?q=site%3A&#43;slack-chats.kotlinlang.org" target="_blank" rel="noopener noreferrer">&ldquo;site: slack-chats.kotlinlang.org&rdquo;</a>。</p>
<ul>
<li>每一个 thread 都有一个无需登录的只读 URL，我们可以方便去分享、引用它，虽然这件事儿本身就是超链接、URL的作用，但是在现在已经变得非常不容易了，比如<a href="https://www.nytimes.com/2022/09/16/technology/gen-z-tiktok-search-engine.html" target="_blank" rel="noopener noreferrer">这个新闻</a>里提到现在新一代的人们更倾向于在抖音里搜索而不是在公共领域里。
有了它，我们可以非常开心地在 GitHub 里引用任意一个 Slack 讨论话题：
<figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/208390478-7a7a6213-677b-4385-8b3e-ea57f65ece7b.png" title="https://user-images.githubusercontent.com/1651790/208390478-7a7a6213-677b-4385-8b3e-ea57f65ece7b.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/208390478-7a7a6213-677b-4385-8b3e-ea57f65ece7b.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/208390478-7a7a6213-677b-4385-8b3e-ea57f65ece7b.png"
            srcset="https://user-images.githubusercontent.com/1651790/208390478-7a7a6213-677b-4385-8b3e-ea57f65ece7b.png, https://user-images.githubusercontent.com/1651790/208390478-7a7a6213-677b-4385-8b3e-ea57f65ece7b.png 1.5x, https://user-images.githubusercontent.com/1651790/208390478-7a7a6213-677b-4385-8b3e-ea57f65ece7b.png 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/208390478-7a7a6213-677b-4385-8b3e-ea57f65ece7b.png">
    </a></figure></li>
</ul>
<p>解决了 Slack 的问题之后，唯一剩下的痛点就是微信群了，每周都有挺多非常宝贵的讨论在社区群中进行却不能被保留下来，真实太令人心疼了，终于有一天，我们决定把这个问题解决。</p>
<h3 id="解决微信群的信息公开化" class="headerLink">
    <a href="#%e8%a7%a3%e5%86%b3%e5%be%ae%e4%bf%a1%e7%be%a4%e7%9a%84%e4%bf%a1%e6%81%af%e5%85%ac%e5%bc%80%e5%8c%96" class="header-mark"></a>3.2 解决微信群的信息公开化</h3><p>首先，能不能直接用 Linen 一把梭，同步群消息呢？我确实<a href="https://github.com/Linen-dev/linen.dev/issues/553" target="_blank" rel="noopener noreferrer">在 Linen 社区和他们的 Kam 讨论</a>直接解决 IM 同步的可能，不过到现在，他们都没有优先考虑😭。</p>
<p>然后，我就在想如果直接把微信同步到 Slack，Linen 不就能把微信的信息也收录了吗？</p>
<p>在 <a href="https://twitter.com/wey_gu/status/1603307477239750657" target="_blank" rel="noopener noreferrer">Twitter 上</a> 求助黑客/开源社区 + 一番调研确定了没有这样的东西存在之后，我<a href="https://twitter.com/wey_gu/status/1603307477239750657?s=20&amp;t=UG6g_ASQ89QWnMqjLfmdqA" target="_blank" rel="noopener noreferrer">决定搞一个，做成开源项目</a>，我花了一点时间实现了最初的版本。</p>
<blockquote class="twitter-tweet" data-dnt="true"><p lang="zh" dir="ltr">石头汤来了 👉🏻：<a href="https://t.co/Fdhm9MkoBb">https://t.co/Fdhm9MkoBb</a><a href="https://twitter.com/hashtag/NebulaGraph?src=hash&amp;ref_src=twsrc%5Etfw">#NebulaGraph</a> 社区微信群现在已经会被同步到 slack 了。</p>&mdash; Wey Gu 古思为 (@wey_gu) <a href="https://twitter.com/wey_gu/status/1603307477239750657?ref_src=twsrc%5Etfw">December 15, 2022</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>万万没想到，当我做到把消息从微信同步到 Slack 之后，<a href="https://github.com/Linen-dev/linen.dev/issues/761" target="_blank" rel="noopener noreferrer">随之而来的问题</a>是，通过 Slack API 发出的消息 Linen 并不会收录。</p>
<p>为此，我放弃了 linen 一把梭的美好愿望，转而考虑把消息同步到其他公共领域，而我第一个想到的就是 GitHub Discussions 之中，又花了周末的下午加晚上，把它做出来了：</p>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/208398641-e7e8dcc8-eeaf-4647-8c5c-f37f118094f5.png" title="wechat-to-gh-discussion" data-thumbnail="https://user-images.githubusercontent.com/1651790/208398641-e7e8dcc8-eeaf-4647-8c5c-f37f118094f5.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/208398641-e7e8dcc8-eeaf-4647-8c5c-f37f118094f5.png"
            srcset="https://user-images.githubusercontent.com/1651790/208398641-e7e8dcc8-eeaf-4647-8c5c-f37f118094f5.png, https://user-images.githubusercontent.com/1651790/208398641-e7e8dcc8-eeaf-4647-8c5c-f37f118094f5.png 1.5x, https://user-images.githubusercontent.com/1651790/208398641-e7e8dcc8-eeaf-4647-8c5c-f37f118094f5.png 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/208398641-e7e8dcc8-eeaf-4647-8c5c-f37f118094f5.png">
    </a></figure></p>
<p>现在，这个机器人程序会把配置好的微信群消息同时同步到 Slack 频道和 GitHub Discussion 中给定的标签下的主题中，每一个群一个礼拜是一个主题，所有的消息都是主题下的评论。</p>
<h3 id="小结" class="headerLink">
    <a href="#%e5%b0%8f%e7%bb%93" class="header-mark"></a>3.3 小结</h3><p>现在，我们保留了所有 Slack/微信的美好的一面的同时，把它们中的讨论消息历史全都归档、索引并公开到这两个域之下了，是不是很酷呢？</p>
<ul>
<li><a href="https://community-chat.nebula-graph.io/" target="_blank" rel="noopener noreferrer">https://community-chat.nebula-graph.io/</a></li>
<li><a href="https://github.com/vesoft-inc/nebula-community/discussions/categories/wechat-chat-history" target="_blank" rel="noopener noreferrer">https://github.com/vesoft-inc/nebula-community/discussions/categories/wechat-chat-history</a></li>
</ul>
<h3 id="后续工作" class="headerLink">
    <a href="#%e5%90%8e%e7%bb%ad%e5%b7%a5%e4%bd%9c" class="header-mark"></a>3.4 后续工作</h3><p>这个同步微信的项目是 Apache 2.0 协议开源的，并且现在由<a href="https://github.com/wey-gu" target="_blank" rel="noopener noreferrer">我</a>和<a href="https://github.com/frostming" target="_blank" rel="noopener noreferrer">Frost Ming</a>在维护，<a href="https://github.com/wey-gu/chatroom-syncer/issues" target="_blank" rel="noopener noreferrer">这里</a>还有很多待增强、实现的新功能、新任务，欢迎大家来试玩、贡献。让我们一起把开源社区的沟通做的多一点开放、少一点封闭吧~</p>
<p>项目地址 👉🏻 <a href="https://github.com/wey-gu/chatroom-syncer" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/chatroom-syncer</a>.</p>
<h2 id="结论" class="headerLink">
    <a href="#%e7%bb%93%e8%ae%ba" class="header-mark"></a>4 结论</h2><p>有效的沟通是成功的开源社区的基石，因为它让协作、分享思想与知识、以及所有成员的参与成为可能。为了确保沟通透明、包容和有效，对于开源社区来说，让所有成员有机会参与讨论和决策以及公开自由地分享相关信息是非常重要的。</p>
<p>我们 NebulaGraph 社区的建设者/贡献者将继续寻找和黑客方法，以开放和良好的方式使人们连接在一起，和大家共建更好的开源、技术社区。</p>
<blockquote>
<p>题图版权：<a href="https://unsplash.com/photos/N35J0N8ZglQ" target="_blank" rel="noopener noreferrer">Artem Beliaikin</a></p>
</blockquote>]]></description>
</item><item>
    <title>图数据库的社交网络应用</title>
    <link>https://siwei.io/nebulagraph-sns/</link>
    <pubDate>Thu, 08 Dec 2022 15:30:33 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/nebulagraph-sns/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/nebulagraph-sns/featured-image.webp" referrerpolicy="no-referrer">
            </div><h1 id="图数据库的社交网络应用" class="headerLink">
    <a href="#%e5%9b%be%e6%95%b0%e6%8d%ae%e5%ba%93%e7%9a%84%e7%a4%be%e4%ba%a4%e7%bd%91%e7%bb%9c%e5%ba%94%e7%94%a8" class="header-mark"></a>图数据库的社交网络应用</h1><blockquote>
<p>本文是一个基于 NebulaGraph 上解决社交网络问题的常规方法综述。其中介绍的方法提供都了 Playground 供大家学习、玩耍。</p>
</blockquote>
<!--

[TOC]

-->
<p>社交网络大家都不陌生，无论是微信、微博、B 站还是大众点评、知乎、陌陌等服务，其本质上的用户都形成了社交网络。</p>
<p>在一个社交网络系统中，我们可以用图数据库来表示用户和他们的连接关系。图数据库能允许对用户之间的关系进行有效的查询，使得各种基于连接查找、统计、分析的社交网络上的业务实现变得可行、高效。</p>
<p>例如，图形数据库可以用来识别网络中的“有影响力用户”，或者根据用户之间的共同点对新的连接（好友关系、关心的内容）进行推荐，再或者寻找社群中相聚集的不同人群、社区，进行用户画像。图形数据库因为在能支撑复杂多跳查询的同时也能支持实时写入、更新，使其非常适合应用在用户关系不断变化的社交网络系统之上。</p>
<h2 id="图建模" class="headerLink">
    <a href="#%e5%9b%be%e5%bb%ba%e6%a8%a1" class="header-mark"></a>1 图建模</h2><p>为了给出一些常见社交场景的应用示例，我会把大多数例子建立在一个典型的小型社交网络上，社交网络天然就是一张网络、图的形态。</p>
<p>为此，我在 NebulaGraph 官方示例数据集：篮球运动员之上，增加了三种点：</p>
<ul>
<li>地址</li>
<li>地点</li>
<li>文章</li>
</ul>
<p>五种边：</p>
<ul>
<li>发文</li>
<li>评论</li>
<li>住在</li>
<li>属于（地点）</li>
</ul>
<p>它的建模非常自然：</p>
<p><figure><a class="lightgallery" href="/nebulagraph-sns/schema_sketch.webp" title="schema_sketch" data-thumbnail="/nebulagraph-sns/schema_sketch.webp">
        <img
            
            loading="lazy"
            src="/nebulagraph-sns/schema_sketch.webp"
            srcset="/nebulagraph-sns/schema_sketch.webp, /nebulagraph-sns/schema_sketch.webp 1.5x, /nebulagraph-sns/schema_sketch.webp 2x"
            sizes="auto"
            alt="/nebulagraph-sns/schema_sketch.webp">
    </a></figure></p>
<h2 id="数据导入" class="headerLink">
    <a href="#%e6%95%b0%e6%8d%ae%e5%af%bc%e5%85%a5" class="header-mark"></a>2 数据导入</h2><h3 id="加载默认数据集" class="headerLink">
    <a href="#%e5%8a%a0%e8%bd%bd%e9%bb%98%e8%ae%a4%e6%95%b0%e6%8d%ae%e9%9b%86" class="header-mark"></a>2.1 加载默认数据集</h3><p>首先，我们加载默认的 basketballplayer 数据集。</p>
<ul>
<li>
<p>在命令行 console 之中，我们只需要执行 <code>:play basketballplayer</code> 就可以。</p>
</li>
<li>
<p>而在 NebulaGraph Studio/Explorer 之中，我们可以在欢迎页点击下载就部署这份基础数据集。</p>
<p><figure><a class="lightgallery" href="/nebulagraph-sns/baskertballplayer_studio_starter.webp" title="baskertballplayer_studio_starter" data-thumbnail="/nebulagraph-sns/baskertballplayer_studio_starter.webp">
        <img
            
            loading="lazy"
            src="/nebulagraph-sns/baskertballplayer_studio_starter.webp"
            srcset="/nebulagraph-sns/baskertballplayer_studio_starter.webp, /nebulagraph-sns/baskertballplayer_studio_starter.webp 1.5x, /nebulagraph-sns/baskertballplayer_studio_starter.webp 2x"
            sizes="auto"
            alt="/nebulagraph-sns/baskertballplayer_studio_starter.webp">
    </a></figure></p>
</li>
</ul>
<h3 id="加载社交网络-schema" class="headerLink">
    <a href="#%e5%8a%a0%e8%bd%bd%e7%a4%be%e4%ba%a4%e7%bd%91%e7%bb%9c-schema" class="header-mark"></a>2.2 加载社交网络 schema</h3><p>其次我们执行下边的语句，首先是 Schema 定义的语句：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="k">IF</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">EXISTS</span><span class="w"> </span><span class="n">post</span><span class="p">(</span><span class="n">title</span><span class="w"> </span><span class="n">string</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">created_post</span><span class="p">(</span><span class="n">post_time</span><span class="w"> </span><span class="k">timestamp</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">commented_at</span><span class="p">(</span><span class="n">post_time</span><span class="w"> </span><span class="k">timestamp</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="n">address</span><span class="p">(</span><span class="n">address</span><span class="w"> </span><span class="n">string</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w"> </span><span class="o">`</span><span class="n">geo_point</span><span class="o">`</span><span class="w"> </span><span class="n">geography</span><span class="p">(</span><span class="n">point</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="n">place</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="n">string</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w"> </span><span class="o">`</span><span class="n">geo_point</span><span class="o">`</span><span class="w"> </span><span class="n">geography</span><span class="p">(</span><span class="n">point</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">belong_to</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">lived_in</span><span class="p">();</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="加载数据" class="headerLink">
    <a href="#%e5%8a%a0%e8%bd%bd%e6%95%b0%e6%8d%ae" class="header-mark"></a>2.3 加载数据</h3><p>然后，在等两个心跳时间以上之后（20秒），我们可以执行数据插入：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">INSERT</span><span class="w"> </span><span class="n">VERTEX</span><span class="w"> </span><span class="n">post</span><span class="p">(</span><span class="n">title</span><span class="p">)</span><span class="w"> </span><span class="k">values</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;post1&#34;</span><span class="p">:(</span><span class="s2">&#34;a beautify flower&#34;</span><span class="p">),</span><span class="w"> </span><span class="s2">&#34;post2&#34;</span><span class="p">:(</span><span class="s2">&#34;my first bike&#34;</span><span class="p">),</span><span class="w"> </span><span class="s2">&#34;post3&#34;</span><span class="p">:(</span><span class="s2">&#34;I can swim&#34;</span><span class="p">),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;post4&#34;</span><span class="p">:(</span><span class="s2">&#34;I love you, Dad&#34;</span><span class="p">),</span><span class="w"> </span><span class="s2">&#34;post5&#34;</span><span class="p">:(</span><span class="s2">&#34;I hate coriander&#34;</span><span class="p">),</span><span class="w"> </span><span class="s2">&#34;post6&#34;</span><span class="p">:(</span><span class="s2">&#34;my best friend, tom&#34;</span><span class="p">),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;post7&#34;</span><span class="p">:(</span><span class="s2">&#34;my best friend, jerry&#34;</span><span class="p">),</span><span class="w"> </span><span class="s2">&#34;post8&#34;</span><span class="p">:(</span><span class="s2">&#34;Frank, the cat&#34;</span><span class="p">),</span><span class="w"> </span><span class="s2">&#34;post9&#34;</span><span class="p">:(</span><span class="s2">&#34;sushi rocks&#34;</span><span class="p">),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;post10&#34;</span><span class="p">:(</span><span class="s2">&#34;I love you, Mom&#34;</span><span class="p">),</span><span class="w"> </span><span class="s2">&#34;post11&#34;</span><span class="p">:(</span><span class="s2">&#34;Let&#39;s have a party!&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">created_post</span><span class="p">(</span><span class="n">post_time</span><span class="p">)</span><span class="w"> </span><span class="k">values</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player100&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post1&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-01-01 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player111&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post2&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2016-11-23 10:04:50&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player101&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post3&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-11-11 10:44:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player103&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post4&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2014-12-01 20:45:11&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player102&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post5&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2015-03-01 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player104&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post6&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2017-09-21 23:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player125&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post7&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2018-01-01 00:44:23&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player106&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post8&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-01-01 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player117&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post9&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2022-01-01 22:23:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player108&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post10&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2011-01-01 10:00:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player100&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post11&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2021-11-01 11:10:30&#34;</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">commented_at</span><span class="p">(</span><span class="n">post_time</span><span class="p">)</span><span class="w"> </span><span class="k">values</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player105&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post1&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-01-02 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player109&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post1&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2016-11-24 10:04:50&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player113&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post3&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-11-13 10:44:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player101&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post4&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2014-12-04 20:45:11&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player102&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post1&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2015-03-03 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player103&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post1&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2017-09-23 23:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player102&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post7&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2018-01-04 00:44:23&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player101&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post8&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-01-04 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player106&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post9&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2022-01-02 22:23:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player105&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post10&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2011-01-11 10:00:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player130&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post1&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-01-02 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player131&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post2&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2016-11-24 10:04:50&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player131&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post3&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-11-13 10:44:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player133&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post4&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2014-12-04 20:45:11&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player132&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post5&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2015-03-03 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player134&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post6&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2017-09-23 23:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player135&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post7&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2018-01-04 00:44:23&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player136&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post8&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-01-04 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player137&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post9&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2022-01-02 22:23:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player138&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post10&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2011-01-11 10:00:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player141&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post1&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-01-03 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player142&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post2&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2016-11-25 10:04:50&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player143&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post3&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-11-14 10:44:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player144&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post4&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2014-12-05 20:45:11&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player145&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post5&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2015-03-04 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player146&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post6&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2017-09-24 23:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player147&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post7&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2018-01-05 00:44:23&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player148&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post8&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-01-05 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player139&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post9&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2022-01-03 22:23:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player140&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post10&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2011-01-12 10:01:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player141&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post1&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-01-04 00:34:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player102&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post2&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2016-11-26 10:06:50&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player103&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post3&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-11-15 10:45:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player104&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post4&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2014-12-06 20:47:11&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player105&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post5&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2015-03-05 00:32:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player106&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post6&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2017-09-25 23:31:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player107&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post7&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2018-01-06 00:46:23&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player118&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post8&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-01-06 00:35:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player119&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post9&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2022-01-04 22:26:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player110&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post10&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2011-01-15 10:00:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player111&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post1&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2019-01-06 00:30:06&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player104&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post11&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2022-01-15 10:00:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player125&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post11&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2022-02-15 10:00:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player113&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post11&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2022-03-15 10:00:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player102&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post11&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2022-04-15 10:00:30&#34;</span><span class="p">)),</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player108&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;post11&#34;</span><span class="p">:(</span><span class="k">timestamp</span><span class="p">(</span><span class="s2">&#34;2022-05-15 10:00:30&#34;</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="n">VERTEX</span><span class="w"> </span><span class="o">`</span><span class="n">address</span><span class="o">`</span><span class="w"> </span><span class="p">(</span><span class="o">`</span><span class="n">address</span><span class="o">`</span><span class="p">,</span><span class="w"> </span><span class="o">`</span><span class="n">geo_point</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="k">VALUES</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_0&#34;</span><span class="p">:(</span><span class="s2">&#34;Brittany Forge Apt. 718 East Eric  WV 97881&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_1&#34;</span><span class="p">:(</span><span class="s2">&#34;Richard Curve Kingstad  AZ 05660&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_2&#34;</span><span class="p">:(</span><span class="s2">&#34;Schmidt Key Lake Charles  AL 36174&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">13</span><span class="p">.</span><span class="mi">13</span><span class="p">,</span><span class="o">-</span><span class="mi">87</span><span class="p">.</span><span class="mi">65</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_3&#34;</span><span class="p">:(</span><span class="s2">&#34;5 Joanna Key Suite 704 Frankshire  OK 03035&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_4&#34;</span><span class="p">:(</span><span class="s2">&#34;1 Payne Circle Mitchellfort  LA 73053&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_5&#34;</span><span class="p">:(</span><span class="s2">&#34;2 Klein Mission New Annetteton  HI 05775&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_6&#34;</span><span class="p">:(</span><span class="s2">&#34;1 Vanessa Stravenue Suite 184 Baileyville  NY 46381&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">11</span><span class="p">,</span><span class="mi">12</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_7&#34;</span><span class="p">:(</span><span class="s2">&#34;John Garden Port John  LA 54602&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">13</span><span class="p">,</span><span class="mi">14</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_8&#34;</span><span class="p">:(</span><span class="s2">&#34;11 Webb Groves Tiffanyside  MN 14566&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="mi">16</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_9&#34;</span><span class="p">:(</span><span class="s2">&#34;70 Robinson Locks Suite 113 East Veronica  ND 87845&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">17</span><span class="p">,</span><span class="mi">18</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_10&#34;</span><span class="p">:(</span><span class="s2">&#34;24 Mcknight Port Apt. 028 Sarahborough  MD 38195&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">19</span><span class="p">,</span><span class="mi">20</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_11&#34;</span><span class="p">:(</span><span class="s2">&#34;0337 Mason Corner Apt. 900 Toddmouth  FL 61464&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">21</span><span class="p">,</span><span class="mi">22</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_12&#34;</span><span class="p">:(</span><span class="s2">&#34;7 Davis Station Apt. 691 Pittmanfort  HI 29746&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">23</span><span class="p">,</span><span class="mi">24</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_13&#34;</span><span class="p">:(</span><span class="s2">&#34;1 Southport Street Apt. 098 Westport  KY 85907&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">120</span><span class="p">.</span><span class="mi">12</span><span class="p">,</span><span class="mi">30</span><span class="p">.</span><span class="mi">16</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_14&#34;</span><span class="p">:(</span><span class="s2">&#34;Weber Unions Eddieland  MT 64619&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">25</span><span class="p">,</span><span class="mi">26</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_15&#34;</span><span class="p">:(</span><span class="s2">&#34;1 Amanda Freeway Lisaland  NJ 94933&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">27</span><span class="p">,</span><span class="mi">28</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_16&#34;</span><span class="p">:(</span><span class="s2">&#34;2 Klein HI 05775&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_17&#34;</span><span class="p">:(</span><span class="s2">&#34;Schmidt Key Lake Charles AL 13617&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">13</span><span class="p">.</span><span class="mi">12</span><span class="p">,</span><span class="w"> </span><span class="o">-</span><span class="mi">87</span><span class="p">.</span><span class="mi">60</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_18&#34;</span><span class="p">:(</span><span class="s2">&#34;Rodriguez Track East Connorfort  NC 63144&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">29</span><span class="p">,</span><span class="mi">30</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="n">VERTEX</span><span class="w"> </span><span class="o">`</span><span class="n">place</span><span class="o">`</span><span class="w"> </span><span class="p">(</span><span class="o">`</span><span class="n">name</span><span class="o">`</span><span class="p">,</span><span class="w"> </span><span class="o">`</span><span class="n">geo_point</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="k">VALUES</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;WV&#34;</span><span class="p">:(</span><span class="s2">&#34;West Virginia&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">.</span><span class="mi">5</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;AZ&#34;</span><span class="p">:(</span><span class="s2">&#34;Arizona&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">.</span><span class="mi">5</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;AL&#34;</span><span class="p">:(</span><span class="s2">&#34;Alabama&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">13</span><span class="p">.</span><span class="mi">13</span><span class="p">,</span><span class="o">-</span><span class="mi">87</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;OK&#34;</span><span class="p">:(</span><span class="s2">&#34;Oklahoma&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">.</span><span class="mi">1</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;LA&#34;</span><span class="p">:(</span><span class="s2">&#34;Louisiana&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">.</span><span class="mi">1</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;HI&#34;</span><span class="p">:(</span><span class="s2">&#34;Hawaii&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="p">.</span><span class="mi">1</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;NY&#34;</span><span class="p">:(</span><span class="s2">&#34;New York&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">11</span><span class="p">,</span><span class="mi">12</span><span class="p">.</span><span class="mi">1</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;MN&#34;</span><span class="p">:(</span><span class="s2">&#34;Minnesota&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="mi">16</span><span class="p">.</span><span class="mi">1</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;ND&#34;</span><span class="p">:(</span><span class="s2">&#34;North Dakota&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">17</span><span class="p">,</span><span class="mi">18</span><span class="p">.</span><span class="mi">1</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;FL&#34;</span><span class="p">:(</span><span class="s2">&#34;Florida&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">21</span><span class="p">,</span><span class="mi">22</span><span class="p">.</span><span class="mi">1</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;KY&#34;</span><span class="p">:(</span><span class="s2">&#34;Kentucky&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">120</span><span class="p">.</span><span class="mi">12</span><span class="p">,</span><span class="mi">30</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;MT&#34;</span><span class="p">:(</span><span class="s2">&#34;Montana&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">25</span><span class="p">,</span><span class="mi">26</span><span class="p">.</span><span class="mi">1</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;NJ&#34;</span><span class="p">:(</span><span class="s2">&#34;New Jersey&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">27</span><span class="p">,</span><span class="mi">28</span><span class="p">.</span><span class="mi">1</span><span class="p">)),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;NC&#34;</span><span class="p">:(</span><span class="s2">&#34;North Carolina&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ST_Point</span><span class="p">(</span><span class="mi">29</span><span class="p">,</span><span class="mi">30</span><span class="p">.</span><span class="mi">1</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="o">`</span><span class="n">belong_to</span><span class="o">`</span><span class="p">()</span><span class="w"> </span><span class="k">VALUES</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_0&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;WV&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_1&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;AZ&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_2&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;AL&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_3&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;OK&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_4&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;LA&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_5&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;HI&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_6&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;NY&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_7&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;LA&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_8&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;MN&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_9&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;ND&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_10&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;MD&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_11&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;FL&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_12&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;HI&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_13&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;KY&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_14&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;MT&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_15&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;NJ&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_16&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;HI&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_17&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;AL&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;addr_18&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;NC&#34;</span><span class="p">:();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INSERT</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="o">`</span><span class="n">lived_in</span><span class="o">`</span><span class="p">()</span><span class="w"> </span><span class="k">VALUES</span><span class="w"> </span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player100&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_4&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player101&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_7&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player102&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_2&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player103&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_3&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player104&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_0&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player105&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_5&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player106&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_6&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player107&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_1&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player108&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_8&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player109&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_9&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player110&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_10&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player111&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_11&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player112&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_12&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player113&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_13&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player114&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_14&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player115&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_15&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player116&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_16&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player117&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_17&#34;</span><span class="p">:(),</span><span class="err">\</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;player118&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;addr_18&#34;</span><span class="p">:();</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="数据初探" class="headerLink">
    <a href="#%e6%95%b0%e6%8d%ae%e5%88%9d%e6%8e%a2" class="header-mark"></a>2.4 数据初探</h3><p>首先，我们看看数据统计</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="p">[</span><span class="n">basketballplayer</span><span class="p">]</span><span class="o">&gt;</span><span class="w"> </span><span class="n">SUBMIT</span><span class="w"> </span><span class="n">JOB</span><span class="w"> </span><span class="n">STATS</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">------------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="k">New</span><span class="w"> </span><span class="n">Job</span><span class="w"> </span><span class="n">Id</span><span class="w"> </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">------------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="mi">10</span><span class="w">         </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">------------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">[</span><span class="n">basketballplayer</span><span class="p">]</span><span class="o">&gt;</span><span class="w"> </span><span class="k">SHOW</span><span class="w"> </span><span class="n">STATS</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">---------+----------------+-------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="k">Type</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="n">Name</span><span class="w">           </span><span class="o">|</span><span class="w"> </span><span class="k">Count</span><span class="w"> </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">---------+----------------+-------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Tag&#34;</span><span class="w">   </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;address&#34;</span><span class="w">      </span><span class="o">|</span><span class="w"> </span><span class="mi">19</span><span class="w">    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Tag&#34;</span><span class="w">   </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;place&#34;</span><span class="w">        </span><span class="o">|</span><span class="w"> </span><span class="mi">14</span><span class="w">    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Tag&#34;</span><span class="w">   </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;player&#34;</span><span class="w">       </span><span class="o">|</span><span class="w"> </span><span class="mi">51</span><span class="w">    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Tag&#34;</span><span class="w">   </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;post&#34;</span><span class="w">         </span><span class="o">|</span><span class="w"> </span><span class="mi">10</span><span class="w">    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Tag&#34;</span><span class="w">   </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;team&#34;</span><span class="w">         </span><span class="o">|</span><span class="w"> </span><span class="mi">30</span><span class="w">    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Edge&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;belong_to&#34;</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="mi">19</span><span class="w">    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Edge&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;commented_at&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="mi">40</span><span class="w">    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Edge&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;created_post&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="mi">10</span><span class="w">    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Edge&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;follow&#34;</span><span class="w">       </span><span class="o">|</span><span class="w"> </span><span class="mi">81</span><span class="w">    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Edge&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;lived_in&#34;</span><span class="w">     </span><span class="o">|</span><span class="w"> </span><span class="mi">19</span><span class="w">    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Edge&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;serve&#34;</span><span class="w">        </span><span class="o">|</span><span class="w"> </span><span class="mi">152</span><span class="w">   </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Space&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;vertices&#34;</span><span class="w">     </span><span class="o">|</span><span class="w"> </span><span class="mi">124</span><span class="w">   </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Space&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;edges&#34;</span><span class="w">        </span><span class="o">|</span><span class="w"> </span><span class="mi">321</span><span class="w">   </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">---------+----------------+-------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Got</span><span class="w"> </span><span class="mi">13</span><span class="w"> </span><span class="k">rows</span><span class="w"> </span><span class="p">(</span><span class="n">time</span><span class="w"> </span><span class="n">spent</span><span class="w"> </span><span class="mi">1038</span><span class="o">/</span><span class="mi">51372</span><span class="w"> </span><span class="n">us</span><span class="p">)</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>查一下所有的数据</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">()</span><span class="o">-</span><span class="p">[</span><span class="n">e</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">()</span><span class="w"> </span><span class="k">RETURN</span><span class="w"> </span><span class="n">e</span><span class="w"> </span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">10000</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>因为数据量太小了，所以可以把所有数据在 NebulaGraph Explorer 中渲染出来：</p>
<p><figure><a class="lightgallery" href="/nebulagraph-sns/match_all.webp" title="match_all" data-thumbnail="/nebulagraph-sns/match_all.webp">
        <img
            
            loading="lazy"
            src="/nebulagraph-sns/match_all.webp"
            srcset="/nebulagraph-sns/match_all.webp, /nebulagraph-sns/match_all.webp 1.5x, /nebulagraph-sns/match_all.webp 2x"
            sizes="auto"
            alt="/nebulagraph-sns/match_all.webp">
    </a></figure></p>
<h2 id="找出网络中的关键人物" class="headerLink">
    <a href="#%e6%89%be%e5%87%ba%e7%bd%91%e7%bb%9c%e4%b8%ad%e7%9a%84%e5%85%b3%e9%94%ae%e4%ba%ba%e7%89%a9" class="header-mark"></a>3 找出网络中的关键人物</h2><p>识别社交网络中的有影响的关键人物们（influencers）涉及使用各种指标和方法来识别在特定网络中拥有大量影响力的个人。这对很多业务场景都有帮助都很有用，比如用于营销或研究网络中的信息传播。</p>
<p>识别他们的方法有很多，具体的方法和考量的信息、关系、角度也取决于这些关键人物的类型、和获取他们的目的。</p>
<p>一些常见的方法包括看一个人拥有的粉丝或内容被消费的数量，他们在其帖子、视频上读者的参与度，以及他们的内容的影响力（转发、引用）。这些方法在图上也是可以做的，但是比较平凡，我就不举例了，在这里，我们可以试着用评估、计算节点重要性的图算法，在图上得出这些关键人物。</p>
<h3 id="pagerank" class="headerLink">
    <a href="#pagerank" class="header-mark"></a>3.1 PageRank</h3><p>PageRank 是一个非常“古老的”图算法，它通过考虑图上点之间的关系数量去迭代，得到每一个点的得分（Rank），最初由 Google 的创始人 Larry Page 和 Sergey Brin 提出并应用在早期的 Google 搜索引擎中，用来排序搜索结果，这里的 Page 可以是 Larry Page 的姓和 Web Page 的双关了。</p>
<p>在现代、复杂的搜索引擎中，PageRank 早就因为其过于简单而被弃用，但是在其他图结构网络场景中，PageRank 仍然在发光发热，社交网络中我们可以粗略地认为所有链接的重要程度类似，去运行这个算法找出那些关键的用户。</p>
<p>在 NebulaGraph 中，我们可以利用 NebulaGraph Algorithm、NebulaGraph Analytics 去在大的全图上运行 PageRank，而在日常的分析、验证、设计阶段，我们不需要在全量数据上跑结果，而在很小的子图上（最多上万），我们可以轻松地在浏览器里边运行各种图算法去得出线上业务可以用的方法。</p>
<p>今天，我们就用 NebulaGraph Explorer 内置的浏览器内图算法功能执行一下 PageRank 看看（具体方法这里略去，可以参考<a href="https://docs.nebula-graph.com.cn/3.3.0/nebula-explorer/graph-explorer/graph-algorithm/" target="_blank" rel="noopener noreferrer">文档</a>，不过其实就是点一下鼠标的事儿）：</p>
<p><figure><a class="lightgallery" href="/nebulagraph-sns/PageRank.webp" title="PageRank" data-thumbnail="/nebulagraph-sns/PageRank.webp">
        <img
            
            loading="lazy"
            src="/nebulagraph-sns/PageRank.webp"
            srcset="/nebulagraph-sns/PageRank.webp, /nebulagraph-sns/PageRank.webp 1.5x, /nebulagraph-sns/PageRank.webp 2x"
            sizes="auto"
            alt="/nebulagraph-sns/PageRank.webp">
    </a></figure></p>
<p>我们可以从上边看到，PageRank 计算之后所有绿色的 player（人）中，&ldquo;player.name: Tim Duncan&rdquo; 是最大的一个点，与之相关联的关系看起来的确不少，我们在图上选择他，再右键反选，选择除了 Tim Duncan 之外的所有点，用退格键删除所有其他的点，然后在他作为起点双向探索出1到5步，可以得到 Tim Duncan 的子图：</p>
<p><figure><a class="lightgallery" href="/nebulagraph-sns/TimDuncan.webp" title="TimDuncan" data-thumbnail="/nebulagraph-sns/TimDuncan.webp">
        <img
            
            loading="lazy"
            src="/nebulagraph-sns/TimDuncan.webp"
            srcset="/nebulagraph-sns/TimDuncan.webp, /nebulagraph-sns/TimDuncan.webp 1.5x, /nebulagraph-sns/TimDuncan.webp 2x"
            sizes="auto"
            alt="/nebulagraph-sns/TimDuncan.webp">
    </a></figure></p>
<p>从子图中可以看到 Tim Duncan 和非常多其他球员有关注的关系的同时，一些其他很受欢迎的队员和他一起一样服役过非常热门的热刺（Spurs）队，这些都印证了 PageRank 的评估方式。</p>
<p>现在我们再看看其他判定维度下的算法会不会得出一样的结论呢？</p>
<h3 id="betweenness-centrality" class="headerLink">
    <a href="#betweenness-centrality" class="header-mark"></a>3.2 Betweenness Centrality</h3><p>作为另一个流行的节点重要性算法，通过计算一个节点对于图中的中介、桥梁作用来衡量节点的重要性，这里的桥梁作用是有数学定义的量化算法，这里就不展开说了，不过从感官上可以看出它是另一个角度很符合直觉地去评估重要性的方法。</p>
<p>我们重新在画布上查询所有的点边之后，在浏览器里运行 Betweenness Centrality 算法，这次的结果是：</p>
<p><figure><a class="lightgallery" href="/nebulagraph-sns/Betweeness_centrality.webp" title="Betweeness_centrality" data-thumbnail="/nebulagraph-sns/Betweeness_centrality.webp">
        <img
            
            loading="lazy"
            src="/nebulagraph-sns/Betweeness_centrality.webp"
            srcset="/nebulagraph-sns/Betweeness_centrality.webp, /nebulagraph-sns/Betweeness_centrality.webp 1.5x, /nebulagraph-sns/Betweeness_centrality.webp 2x"
            sizes="auto"
            alt="/nebulagraph-sns/Betweeness_centrality.webp">
    </a></figure></p>
<p>从它的五跳内子图可以看出，与之前 PageRank 所得的关键人物 Tim Duncan 呈现的星星状态不同，Dejounte Murray 的子图呈现簇状，在感官、直觉上可以想象 Dejounte Murray 真的在很多节点之间的最小路径的必经之路上，而 Tim Duncan 则似乎和更多的重要连接者产生了关联。</p>
<p><figure><a class="lightgallery" href="/nebulagraph-sns/DejounteMurray.webp" title="DejounteMurray" data-thumbnail="/nebulagraph-sns/DejounteMurray.webp">
        <img
            
            loading="lazy"
            src="/nebulagraph-sns/DejounteMurray.webp"
            srcset="/nebulagraph-sns/DejounteMurray.webp, /nebulagraph-sns/DejounteMurray.webp 1.5x, /nebulagraph-sns/DejounteMurray.webp 2x"
            sizes="auto"
            alt="/nebulagraph-sns/DejounteMurray.webp">
    </a></figure></p>
<p>在实际的应用场景中，我们通常要通过不同方式的定义的理解、不同执行结果的试验、分析去找到我们关注的关键人物产生影响的结构特征，用来针对不同需求选择不同的算法。</p>
<h2 id="找出社区聚集群体" class="headerLink">
    <a href="#%e6%89%be%e5%87%ba%e7%a4%be%e5%8c%ba%e8%81%9a%e9%9b%86%e7%be%a4%e4%bd%93" class="header-mark"></a>4 找出社区、聚集群体</h2><p>社交网络中的社区检测是一种通过分析社交关系来发现社区结构的技术。社区结构是指在社交网络、图谱中相互联系密切的一组节点，这些节点通常具有相似的特征或兴趣。例如，社区结构可能表现为用户根据共同的话题或兴趣聚集在一起的一组用户。</p>
<p>社区检测的目的是通过对社交网络进行分析，找出不同社区的边界，并确定每个社区中的节点。这一过程可以通过使用各种算法来完成，例如标签传播算法、弱联通分量算法和 Louvain 算法等。通过发现社区结构，可以更好地了解社交网络的结构和特征，并有助于社交网络服务提供方更好地推断和预测社交网络中的行为，帮助做好社交网络的治理、广告投放、市场营销等。</p>
<p>由于我们的数据集是非真实的，我在不同的算法之下得出的结果并不能展现出真实的意涵，所以本章只是展示一下利用几个图算法进行社区识别之后的结果，在真实世界的案例中，我们还应该在此基础之上利用领域知识或者其他技术手段协同给出不同群体、社区的画像、标签。</p>
<p>标签传播算法效果：</p>
<p><figure><a class="lightgallery" href="/nebulagraph-sns/LPA.webp" title="LPA" data-thumbnail="/nebulagraph-sns/LPA.webp">
        <img
            
            loading="lazy"
            src="/nebulagraph-sns/LPA.webp"
            srcset="/nebulagraph-sns/LPA.webp, /nebulagraph-sns/LPA.webp 1.5x, /nebulagraph-sns/LPA.webp 2x"
            sizes="auto"
            alt="/nebulagraph-sns/LPA.webp">
    </a></figure></p>
<p>Louvain 算法效果：</p>
<p><figure><a class="lightgallery" href="/nebulagraph-sns/Louvain.webp" title="Louvain" data-thumbnail="/nebulagraph-sns/Louvain.webp">
        <img
            
            loading="lazy"
            src="/nebulagraph-sns/Louvain.webp"
            srcset="/nebulagraph-sns/Louvain.webp, /nebulagraph-sns/Louvain.webp 1.5x, /nebulagraph-sns/Louvain.webp 2x"
            sizes="auto"
            alt="/nebulagraph-sns/Louvain.webp">
    </a></figure></p>
<p>弱联通分量算法效果：</p>
<p><figure><a class="lightgallery" href="/nebulagraph-sns/WCC.webp" title="WCC" data-thumbnail="/nebulagraph-sns/WCC.webp">
        <img
            
            loading="lazy"
            src="/nebulagraph-sns/WCC.webp"
            srcset="/nebulagraph-sns/WCC.webp, /nebulagraph-sns/WCC.webp 1.5x, /nebulagraph-sns/WCC.webp 2x"
            sizes="auto"
            alt="/nebulagraph-sns/WCC.webp">
    </a></figure></p>
<p>在后边的章节，我们有机会可以在更小、更简单的子图上再次验证这几个算法，结果会更有可解释性一些。</p>
<h2 id="好友亲密度" class="headerLink">
    <a href="#%e5%a5%bd%e5%8f%8b%e4%ba%b2%e5%af%86%e5%ba%a6" class="header-mark"></a>5 好友亲密度</h2><p>通过社区识别算法，其实是能够在一定程度上，在全局计算获得兴趣相近、关联紧密的好友的。那么如何获得一个给定用户的其他亲密好友呢？我们可以通过计算这个用户的好友中，和他共同好友的个数来排序获得这一信息！</p>
<p>我们拿 &ldquo;Tim Duncan&rdquo; 举例，我们知道，他的两度好友（好友的好友：<code>(:player{name: &quot;Tim Duncan&quot;})-[:follow]-(f:player)-[:follow]-(fof:player)</code>）如果同时也是他的好友的话，那么他们这个中间的好友就是他和这个朋友的共同好友（Mutual Friend），那么有理由相信那些和 Tim Duncan 有更多共同好友的人可能跟他有更高亲密度：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">start</span><span class="p">:</span><span class="o">`</span><span class="n">player</span><span class="o">`</span><span class="err">{</span><span class="n">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Tim Duncan&#34;</span><span class="err">}</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">f</span><span class="p">:</span><span class="o">`</span><span class="n">player</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">fof</span><span class="p">:</span><span class="o">`</span><span class="n">player</span><span class="o">`</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="n">start</span><span class="p">:</span><span class="o">`</span><span class="n">player</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">fof</span><span class="p">:</span><span class="o">`</span><span class="n">player</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">fof</span><span class="p">.</span><span class="o">`</span><span class="n">player</span><span class="o">`</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="nf">count</span><span class="p">(</span><span class="k">DISTINCT</span><span class="w"> </span><span class="n">f</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">NrOfMutualF</span><span class="w"> </span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">NrOfMutualF</span><span class="w"> </span><span class="k">DESC</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这个计算结果是，&ldquo;Tony Parker&rdquo; 和 Tim 有 5 个共同好友，最为亲密。</p>
<table>
<thead>
<tr>
<th style="text-align:left">fof.player.name</th>
<th style="text-align:left">NrOfMutualF</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Tony Parker</td>
<td style="text-align:left">5</td>
</tr>
<tr>
<td style="text-align:left">Dejounte Murray</td>
<td style="text-align:left">4</td>
</tr>
<tr>
<td style="text-align:left">Manu Ginobili</td>
<td style="text-align:left">3</td>
</tr>
<tr>
<td style="text-align:left">Marco Belinelli</td>
<td style="text-align:left">3</td>
</tr>
<tr>
<td style="text-align:left">Danny Green</td>
<td style="text-align:left">2</td>
</tr>
<tr>
<td style="text-align:left">Boris Diaw</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">LaMarcus Aldridge</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">Tiago Splitter</td>
<td style="text-align:left">1</td>
</tr>
</tbody>
</table>
<p>下面，咱们通过可视化来验证一下这个结果吧！</p>
<p>先看看每一个好友的共同好友(f:)都是谁？</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">start</span><span class="p">:</span><span class="n">player</span><span class="err">{</span><span class="n">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Tim Duncan&#34;</span><span class="err">}</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">f</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">fof</span><span class="p">:</span><span class="n">player</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="n">start</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">fof</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">fof</span><span class="p">.</span><span class="n">player</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="nf">collect</span><span class="p">(</span><span class="k">DISTINCT</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="n">player</span><span class="p">.</span><span class="n">name</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>结果如下：</p>
<table>
<thead>
<tr>
<th style="text-align:left">fof.player.name</th>
<th style="text-align:left">collect(distinct f.player.name)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Boris Diaw</td>
<td style="text-align:left">[&ldquo;Tony Parker&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Manu Ginobili</td>
<td style="text-align:left">[&ldquo;Dejounte Murray&rdquo;, &ldquo;Tiago Splitter&rdquo;, &ldquo;Tony Parker&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">LaMarcus Aldridge</td>
<td style="text-align:left">[&ldquo;Tony Parker&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Tiago Splitter</td>
<td style="text-align:left">[&ldquo;Manu Ginobili&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Tony Parker</td>
<td style="text-align:left">[&ldquo;Dejounte Murray&rdquo;, &ldquo;Boris Diaw&rdquo;, &ldquo;Manu Ginobili&rdquo;, &ldquo;Marco Belinelli&rdquo;, &ldquo;LaMarcus Aldridge&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Dejounte Murray</td>
<td style="text-align:left">[&ldquo;Danny Green&rdquo;, &ldquo;Tony Parker&rdquo;, &ldquo;Manu Ginobili&rdquo;, &ldquo;Marco Belinelli&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Danny Green</td>
<td style="text-align:left">[&ldquo;Dejounte Murray&rdquo;, &ldquo;Marco Belinelli&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Marco Belinelli</td>
<td style="text-align:left">[&ldquo;Dejounte Murray&rdquo;, &ldquo;Danny Green&rdquo;, &ldquo;Tony Parker&rdquo;]</td>
</tr>
</tbody>
</table>
<p>然后我们在 Explorer 上可视化一下这个结果：</p>
<ul>
<li>首先，我们把 Tim 的量度好友路径全查出来</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">start</span><span class="p">:</span><span class="n">player</span><span class="err">{</span><span class="n">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Tim Duncan&#34;</span><span class="err">}</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">f</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">follow</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">fof</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>然后我们在其中按照度去渲染节点大小，并选中 Tim 和 Tony，并在两者之间查询 follow 类型边、双向、最多 2 跳的全部路径：</li>
</ul>
<p>可以看出他们之间是最亲密的朋友没跑了，而且他们的共同好友也在路径之中：</p>
<p><code>[&quot;Dejounte Murray&quot;, &quot;Boris Diaw&quot;, &quot;Manu Ginobili&quot;, &quot;Marco Belinelli&quot;, &quot;LaMarcus Aldridge&quot;]</code></p>
<p><figure><a class="lightgallery" href="/nebulagraph-sns/closest_friend.webp" title="closest_friend" data-thumbnail="/nebulagraph-sns/closest_friend.webp">
        <img
            
            loading="lazy"
            src="/nebulagraph-sns/closest_friend.webp"
            srcset="/nebulagraph-sns/closest_friend.webp, /nebulagraph-sns/closest_friend.webp 1.5x, /nebulagraph-sns/closest_friend.webp 2x"
            sizes="auto"
            alt="/nebulagraph-sns/closest_friend.webp">
    </a></figure></p>
<h3 id="朋友圈子里的小群体" class="headerLink">
    <a href="#%e6%9c%8b%e5%8f%8b%e5%9c%88%e5%ad%90%e9%87%8c%e7%9a%84%e5%b0%8f%e7%be%a4%e4%bd%93" class="header-mark"></a>5.1 朋友圈子里的小群体</h3><p>这时候，如前边提到，这份数据集本身的非真实性，使得社区发现算法的结果不能得到其中洞察的内涵，现在我们可以接着这个小的子图，看看 Tim 的好友中可以如何区分群组、社区呢，咱们跑一个 Louvain 、弱联通分量、标签传播看看：</p>
<ul>
<li>弱联通分量，可以把 Tim 等朋友们大体分割出两三个相互不连通的部分，非常符合连通分量的直观理解和定义。</li>
</ul>
<p><figure><a class="lightgallery" href="/nebulagraph-sns/Tim_wcc.webp" title="Tim_wcc" data-thumbnail="/nebulagraph-sns/Tim_wcc.webp">
        <img
            
            loading="lazy"
            src="/nebulagraph-sns/Tim_wcc.webp"
            srcset="/nebulagraph-sns/Tim_wcc.webp, /nebulagraph-sns/Tim_wcc.webp 1.5x, /nebulagraph-sns/Tim_wcc.webp 2x"
            sizes="auto"
            alt="/nebulagraph-sns/Tim_wcc.webp">
    </a></figure></p>
<ul>
<li>
<p>标签传播，我们可以通过控制迭代次数按需去通过随机的传播划定出不同的划分度，结果可以有一定的区分度：</p>
<p>20 次迭代</p>
<p><figure><a class="lightgallery" href="/nebulagraph-sns/Tim_LPA.webp" title="Tim_LPA" data-thumbnail="/nebulagraph-sns/Tim_LPA.webp">
        <img
            
            loading="lazy"
            src="/nebulagraph-sns/Tim_LPA.webp"
            srcset="/nebulagraph-sns/Tim_LPA.webp, /nebulagraph-sns/Tim_LPA.webp 1.5x, /nebulagraph-sns/Tim_LPA.webp 2x"
            sizes="auto"
            alt="/nebulagraph-sns/Tim_LPA.webp">
    </a></figure></p>
<p>1000 次迭代</p>
<p><figure><a class="lightgallery" href="/nebulagraph-sns/Tim_LPA_1000.webp" title="Tim_LPA_1000" data-thumbnail="/nebulagraph-sns/Tim_LPA_1000.webp">
        <img
            
            loading="lazy"
            src="/nebulagraph-sns/Tim_LPA_1000.webp"
            srcset="/nebulagraph-sns/Tim_LPA_1000.webp, /nebulagraph-sns/Tim_LPA_1000.webp 1.5x, /nebulagraph-sns/Tim_LPA_1000.webp 2x"
            sizes="auto"
            alt="/nebulagraph-sns/Tim_LPA_1000.webp">
    </a></figure></p>
</li>
<li>
<p>Louvain，是一个比较高效、稳定的算法，基本上在这个子图下我们可以在很小的迭代次数下得到很符合直觉的划分：</p>
</li>
</ul>
<p><figure><a class="lightgallery" href="/nebulagraph-sns/Tim_Louvain.webp" title="Tim_Louvain" data-thumbnail="/nebulagraph-sns/Tim_Louvain.webp">
        <img
            
            loading="lazy"
            src="/nebulagraph-sns/Tim_Louvain.webp"
            srcset="/nebulagraph-sns/Tim_Louvain.webp, /nebulagraph-sns/Tim_Louvain.webp 1.5x, /nebulagraph-sns/Tim_Louvain.webp 2x"
            sizes="auto"
            alt="/nebulagraph-sns/Tim_Louvain.webp">
    </a></figure></p>
<h2 id="新朋友推荐" class="headerLink">
    <a href="#%e6%96%b0%e6%9c%8b%e5%8f%8b%e6%8e%a8%e8%8d%90" class="header-mark"></a>6 新朋友推荐</h2><p>接着前边二度朋友（朋友的朋友）的思路，我们可以很容易把那些还不是朋友的二度朋友作为推荐添加的好友，而排序规则则是他们之间的共同好友数量：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">start</span><span class="p">:</span><span class="n">player</span><span class="err">{</span><span class="n">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Tim Duncan&#34;</span><span class="err">}</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">f</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">fof</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="p">(</span><span class="n">start</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">fof</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">fof</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">start</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">fof</span><span class="p">.</span><span class="n">player</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="nf">count</span><span class="p">(</span><span class="k">DISTINCT</span><span class="w"> </span><span class="n">f</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">NrOfMutualF</span><span class="w"> </span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">NrOfMutualF</span><span class="w"> </span><span class="k">DESC</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><table>
<thead>
<tr>
<th style="text-align:left">fof.player.name</th>
<th style="text-align:left">NrOfMutualF</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">LeBron James</td>
<td style="text-align:left">2</td>
</tr>
<tr>
<td style="text-align:left">James Harden</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">Chris Paul</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">Yao Ming</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">Damian Lillard</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">JaVale McGee</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">Kevin Durant</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">Kyle Anderson</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">Rudy Gay</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">Russell Westbrook</td>
<td style="text-align:left">1</td>
</tr>
</tbody>
</table>
<p>显然，LeBron 最值得推荐！再看看这些共同好友都是谁？</p>
<table>
<thead>
<tr>
<th style="text-align:left">fof.player.name</th>
<th style="text-align:left">collect(distinct f.player.name)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">James Harden</td>
<td style="text-align:left">[&ldquo;Dejounte Murray&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">LeBron James</td>
<td style="text-align:left">[&ldquo;Danny Green&rdquo;, &ldquo;Dejounte Murray&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Chris Paul</td>
<td style="text-align:left">[&ldquo;Dejounte Murray&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Yao Ming</td>
<td style="text-align:left">[&ldquo;Shaquille O&rsquo;Neal&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Damian Lillard</td>
<td style="text-align:left">[&ldquo;LaMarcus Aldridge&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">JaVale McGee</td>
<td style="text-align:left">[&ldquo;Shaquille O&rsquo;Neal&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Kevin Durant</td>
<td style="text-align:left">[&ldquo;Dejounte Murray&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Kyle Anderson</td>
<td style="text-align:left">[&ldquo;Dejounte Murray&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Rudy Gay</td>
<td style="text-align:left">[&ldquo;LaMarcus Aldridge&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Russell Westbrook</td>
<td style="text-align:left">[&ldquo;Dejounte Murray&rdquo;]</td>
</tr>
</tbody>
</table>
<p>同样，我们在刚才的子图里找找 LeBron James 吧！我们把它俩之间的两步、双向路径找出来，果然只会经过 <code>[&quot;Danny Green&quot;, &quot;Dejounte Murray&quot;]</code> 并且，没有直接的连接：</p>
<p><figure><a class="lightgallery" href="/nebulagraph-sns/Tim_newFriend.webp" title="Tim_newFriend" data-thumbnail="/nebulagraph-sns/Tim_newFriend.webp">
        <img
            
            loading="lazy"
            src="/nebulagraph-sns/Tim_newFriend.webp"
            srcset="/nebulagraph-sns/Tim_newFriend.webp, /nebulagraph-sns/Tim_newFriend.webp 1.5x, /nebulagraph-sns/Tim_newFriend.webp 2x"
            sizes="auto"
            alt="/nebulagraph-sns/Tim_newFriend.webp">
    </a></figure></p>
<p>现在，系统会给两边发提醒：“hey，也许你们应该交个朋友！”</p>
<h2 id="共同邻居" class="headerLink">
    <a href="#%e5%85%b1%e5%90%8c%e9%82%bb%e5%b1%85" class="header-mark"></a>7 共同邻居</h2><p>查找共同邻居是一个很常见的图库查询，它的场景可能根据不同的邻居关系，节点类型，同构、异构，带来不同的场景，前边两个场景下的共同好友本质上是两点之间的共同邻居，直接查询这样的关系用 OpenCypher 的表达非常简单。</p>
<h3 id="两点之间的共同邻居" class="headerLink">
    <a href="#%e4%b8%a4%e7%82%b9%e4%b9%8b%e9%97%b4%e7%9a%84%e5%85%b1%e5%90%8c%e9%82%bb%e5%b1%85" class="header-mark"></a>7.1 两点之间的共同邻居</h3><p>比如这个表达可以查询两个用户之间的共性、交集，结果可能是共同团队、去过的地方、兴趣爱好、共同参与的帖子回复等等：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="o">`</span><span class="n">v0</span><span class="o">`</span><span class="p">)</span><span class="o">--</span><span class="p">()</span><span class="o">--</span><span class="p">(</span><span class="o">`</span><span class="n">v1</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="o">`</span><span class="n">v0</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;player100&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="o">`</span><span class="n">v1</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;player104&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>而限定了边的类型之后，这个查询就限定在共同好友的查询了。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">v0</span><span class="p">)</span><span class="o">--</span><span class="p">(:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">)</span><span class="o">--</span><span class="p">(</span><span class="n">v1</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">v0</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;player100&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">v1</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;player104&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="多点之间的共同邻居内容推送" class="headerLink">
    <a href="#%e5%a4%9a%e7%82%b9%e4%b9%8b%e9%97%b4%e7%9a%84%e5%85%b1%e5%90%8c%e9%82%bb%e5%b1%85%e5%86%85%e5%ae%b9%e6%8e%a8%e9%80%81" class="header-mark"></a>7.2 多点之间的共同邻居：内容推送</h3><p>下面，我们给出一个多点共同邻居的场景，我们从一个文章触发，查出所有在这个文章上有互动的用户，找到这一群体中的共同邻居。</p>
<p>这个共同邻居有什么用处呢？很自然，如果这个共同邻居还没有和这个文章有任何交互，我们可以把这个文章推荐给他。</p>
<p>这个查询的实现很有意思：</p>
<ul>
<li>第一个 MATCH 是查到所有 post11 文章下留言和作者这些人的总人数</li>
<li>在第二个 MATCH 之后，我们查到所有这群人的一度好友路径中，这些文章过的交互用户的一度好友的参与过文章的朋友数量刚好等于这个参与文章的用户的数量的这些人，他们其实就是这些所有参与用户的共同好友。</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">blog</span><span class="p">:</span><span class="n">post</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[</span><span class="n">e</span><span class="p">]</span><span class="o">-</span><span class="p">(:</span><span class="n">player</span><span class="p">)</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">blog</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;post11&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">blog</span><span class="p">,</span><span class="w"> </span><span class="nf">count</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">invoved_user_count</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">blog</span><span class="p">:</span><span class="n">post</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[]</span><span class="o">-</span><span class="p">(</span><span class="n">users</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">common_neighbor</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="nf">toSet</span><span class="p">(</span><span class="nf">collect</span><span class="p">(</span><span class="n">users</span><span class="p">))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">users</span><span class="p">,</span><span class="w"> </span><span class="n">common_neighbor</span><span class="p">,</span><span class="w"> </span><span class="n">invoved_user_count</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">size</span><span class="p">(</span><span class="n">users</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">invoved_user_count</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">common_neighbor</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>而这个人就是&hellip;Tony！</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">+-----------------------------------------------------+
</span></span><span class="line"><span class="cl">| common_neighbor                                     |
</span></span><span class="line"><span class="cl">+-----------------------------------------------------+
</span></span><span class="line"><span class="cl">| (&#34;player101&#34; :player{age: 36, name: &#34;Tony Parker&#34;}) |
</span></span><span class="line"><span class="cl">+-----------------------------------------------------+
</span></span></code></pre></td></tr></table>
</div>
</div><p>而我们可以很容易在可视化中国验证它：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">blog</span><span class="p">:</span><span class="n">post</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[]</span><span class="o">-</span><span class="p">(</span><span class="n">users</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">common_neighbor</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">blog</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;post11&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>渲染这个查询结果，然后再这篇叫做 &ldquo;Let&rsquo;s have a party!&rdquo; 的文章与 Tony 之间查找评论、po文、关注三类边的双向、两跳查询，就可以看到这些参与文章的人们无一例外，都是 Tony 的好友，而只有 Tony 自己还没去文章里留言！</p>
<p>而 Party 怎么可以少了 Tony 呢？难道是他的惊喜生日 Party，Opps，我们是不是不应该告诉他？</p>
<p><figure><a class="lightgallery" href="/nebulagraph-sns/common_nbrs_tony.webp" title="common_nbrs_tony" data-thumbnail="/nebulagraph-sns/common_nbrs_tony.webp">
        <img
            
            loading="lazy"
            src="/nebulagraph-sns/common_nbrs_tony.webp"
            srcset="/nebulagraph-sns/common_nbrs_tony.webp, /nebulagraph-sns/common_nbrs_tony.webp 1.5x, /nebulagraph-sns/common_nbrs_tony.webp 2x"
            sizes="auto"
            alt="/nebulagraph-sns/common_nbrs_tony.webp">
    </a></figure></p>
<h2 id="信息流" class="headerLink">
    <a href="#%e4%bf%a1%e6%81%af%e6%b5%81" class="header-mark"></a>8 信息流</h2><p>我在之前写过基于图技术的推荐系统实现方法，其中描述了现代推荐系统中内容过滤、排序方法可以在图谱上进行，社交网络中有一点相似但又不同的场景是信息流（Feed），它的产生类似于推荐系统中的个性化，同时有具有很高的时效性，借助于包含了内容行为知识的社交图谱可以很直观、高效去实现个性化的信息流生成。</p>
<h3 id="好友参与的内容" class="headerLink">
    <a href="#%e5%a5%bd%e5%8f%8b%e5%8f%82%e4%b8%8e%e7%9a%84%e5%86%85%e5%ae%b9" class="header-mark"></a>8.1 好友参与的内容</h3><p>最简单、直接的信息流定义可能就是在朋友圈、微博 feed 上刷一下关注的人创建、参与的内容列表了，先不考虑排序的问题，这些内容一定是：</p>
<ul>
<li>一定时间段内好友创建的内容</li>
<li>一定时间端内好友评论的内容</li>
</ul>
<p>我们可以用 cypher 表达这个查询用户 id 为 player100 的信息流：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">feed_owner</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">friend</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">feed_owner</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;player100&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">friend</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">newly_commented</span><span class="p">:</span><span class="n">commented_at</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(:</span><span class="n">post</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">created_post</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">feed_owner</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="n">newly_commented</span><span class="p">.</span><span class="n">post_time</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="kt">timestamp</span><span class="p">(</span><span class="s2">&#34;2010-01-01 00:00:00&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">friend</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">newly_created</span><span class="p">:</span><span class="n">created_post</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">po</span><span class="p">:</span><span class="n">post</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="n">newly_created</span><span class="p">.</span><span class="n">post_time</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="kt">timestamp</span><span class="p">(</span><span class="s2">&#34;2010-01-01 00:00:00&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="k">DISTINCT</span><span class="w"> </span><span class="n">friend</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nf">collect</span><span class="p">(</span><span class="k">DISTINCT</span><span class="w"> </span><span class="n">po</span><span class="p">.</span><span class="n">post</span><span class="p">.</span><span class="n">title</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nf">collect</span><span class="p">(</span><span class="s2">&#34;comment of &#34;</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nf">dst</span><span class="p">(</span><span class="n">newly_commented</span><span class="p">))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">AS</span><span class="w"> </span><span class="n">feeds</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">size</span><span class="p">(</span><span class="n">feeds</span><span class="p">)</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">friend</span><span class="p">.</span><span class="n">player</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">feeds</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><table>
<thead>
<tr>
<th style="text-align:left">friend.player.name</th>
<th style="text-align:left">feeds</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Boris Diaw</td>
<td style="text-align:left">[&ldquo;I love you, Mom&rdquo;, &ldquo;comment of post11&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Marco Belinelli</td>
<td style="text-align:left">[&ldquo;my best friend, tom&rdquo;, &ldquo;comment of post11&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Danny Green</td>
<td style="text-align:left">[&ldquo;comment of post1&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Tiago Splitter</td>
<td style="text-align:left">[&ldquo;comment of post1&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Dejounte Murray</td>
<td style="text-align:left">[&ldquo;comment of post11&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Tony Parker</td>
<td style="text-align:left">[&ldquo;I can swim&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">LaMarcus Aldridge</td>
<td style="text-align:left">[&ldquo;I hate coriander&rdquo;, &ldquo;comment of post11&rdquo;, &ldquo;comment of post1&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Manu Ginobili</td>
<td style="text-align:left">[&ldquo;my best friend, jerry&rdquo;, &ldquo;comment of post11&rdquo;, &ldquo;comment of post11&rdquo;]</td>
</tr>
</tbody>
</table>
<p>于是，我们可以把这些评论、文章发送到用户的 feed 之上了。</p>
<p>我们也来看看他们在图上的样子吧，我们输出所有查到的路径：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">feed_owner</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">friend</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">feed_owner</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;player100&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="n">p_comment</span><span class="o">=</span><span class="p">(</span><span class="n">friend</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">newly_commented</span><span class="p">:</span><span class="n">commented_at</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(:</span><span class="n">post</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">created_post</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">feed_owner</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="n">newly_commented</span><span class="p">.</span><span class="n">post_time</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="kt">timestamp</span><span class="p">(</span><span class="s2">&#34;2010-01-01 00:00:00&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="n">p_post</span><span class="o">=</span><span class="p">(</span><span class="n">friend</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">newly_created</span><span class="p">:</span><span class="n">created_post</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">po</span><span class="p">:</span><span class="n">post</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="n">newly_created</span><span class="p">.</span><span class="n">post_time</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="kt">timestamp</span><span class="p">(</span><span class="s2">&#34;2010-01-01 00:00:00&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="p">,</span><span class="w"> </span><span class="n">p_comment</span><span class="p">,</span><span class="w"> </span><span class="n">p_post</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>渲染在 Explorer 上，选择“神经网络”这个布局，可以很清晰看出这些粉色的文章节点，还有代表评论的边。</p>
<p><figure><a class="lightgallery" href="/nebulagraph-sns/feed_from_friends.webp" title="feed_from_friends" data-thumbnail="/nebulagraph-sns/feed_from_friends.webp">
        <img
            
            loading="lazy"
            src="/nebulagraph-sns/feed_from_friends.webp"
            srcset="/nebulagraph-sns/feed_from_friends.webp, /nebulagraph-sns/feed_from_friends.webp 1.5x, /nebulagraph-sns/feed_from_friends.webp 2x"
            sizes="auto"
            alt="/nebulagraph-sns/feed_from_friends.webp">
    </a></figure></p>
<h3 id="附近好友的内容" class="headerLink">
    <a href="#%e9%99%84%e8%bf%91%e5%a5%bd%e5%8f%8b%e7%9a%84%e5%86%85%e5%ae%b9" class="header-mark"></a>8.2 附近好友的内容</h3><p>我们再进一步，把地理信息考虑进来，获取那些住址的经纬度小于一定距离朋友相关的内容。</p>
<p>这里，我们用到了 NebulaGraph 的 GeoSpatial 地理功能，<code>ST_Distance(home.address.geo_point, friend_addr.address.geo_point) AS distance WHERE distance &lt; 1000000</code> 的约束条件帮我们表达了距离的限制。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">home</span><span class="p">:</span><span class="n">address</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">lived_in</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">feed_owner</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">follow</span><span class="o">`</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">friend</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">lived_in</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">friend_addr</span><span class="p">:</span><span class="n">address</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">feed_owner</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;player100&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">feed_owner</span><span class="p">,</span><span class="w"> </span><span class="n">friend</span><span class="p">,</span><span class="w"> </span><span class="nf">ST_Distance</span><span class="p">(</span><span class="n">home</span><span class="p">.</span><span class="n">address</span><span class="p">.</span><span class="n">geo_point</span><span class="p">,</span><span class="w"> </span><span class="n">friend_addr</span><span class="p">.</span><span class="n">address</span><span class="p">.</span><span class="n">geo_point</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">distance</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">distance</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">1000000</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">friend</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">newly_commented</span><span class="p">:</span><span class="n">commented_at</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(:</span><span class="n">post</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">created_post</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">feed_owner</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="n">newly_commented</span><span class="p">.</span><span class="n">post_time</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="kt">timestamp</span><span class="p">(</span><span class="s2">&#34;2010-01-01 00:00:00&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">OPTIONAL</span><span class="w"> </span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">friend</span><span class="p">:</span><span class="n">player</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">newly_created</span><span class="p">:</span><span class="n">created_post</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">po</span><span class="p">:</span><span class="n">post</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="n">newly_created</span><span class="p">.</span><span class="n">post_time</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="kt">timestamp</span><span class="p">(</span><span class="s2">&#34;2010-01-01 00:00:00&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="k">DISTINCT</span><span class="w"> </span><span class="n">friend</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nf">collect</span><span class="p">(</span><span class="k">DISTINCT</span><span class="w"> </span><span class="n">po</span><span class="p">.</span><span class="n">post</span><span class="p">.</span><span class="n">title</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nf">collect</span><span class="p">(</span><span class="s2">&#34;comment of &#34;</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nf">dst</span><span class="p">(</span><span class="n">newly_commented</span><span class="p">))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">AS</span><span class="w"> </span><span class="n">feeds</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">size</span><span class="p">(</span><span class="n">feeds</span><span class="p">)</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">friend</span><span class="p">.</span><span class="n">player</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">feeds</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><table>
<thead>
<tr>
<th style="text-align:left">friend.player.name</th>
<th style="text-align:left">feeds</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Marco Belinelli</td>
<td style="text-align:left">[&ldquo;my best friend, tom&rdquo;, &ldquo;comment of post11&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Tony Parker</td>
<td style="text-align:left">[&ldquo;I can swim&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">Danny Green</td>
<td style="text-align:left">[&ldquo;comment of post1&rdquo;]</td>
</tr>
</tbody>
</table>
<p>这时候，从可视化这个结果也可以看到住址这一关系，以及它们的经纬度信息，我手动根据它们的经纬度，把地址的节点在图上排布了一下可以看到这个 feed 的主人 Tim(player100) 的住址（7，8）刚好在其他好友住址的中间位置，这些临近好友的相关的文章和参与评论的内容将被作为信息流推送给 Tim：</p>
<p><figure><a class="lightgallery" href="/nebulagraph-sns/geo_feed.webp" title="geo_feed" data-thumbnail="/nebulagraph-sns/geo_feed.webp">
        <img
            
            loading="lazy"
            src="/nebulagraph-sns/geo_feed.webp"
            srcset="/nebulagraph-sns/geo_feed.webp, /nebulagraph-sns/geo_feed.webp 1.5x, /nebulagraph-sns/geo_feed.webp 2x"
            sizes="auto"
            alt="/nebulagraph-sns/geo_feed.webp">
    </a></figure></p>
<h2 id="时空关系追踪" class="headerLink">
    <a href="#%e6%97%b6%e7%a9%ba%e5%85%b3%e7%b3%bb%e8%bf%bd%e8%b8%aa" class="header-mark"></a>9 时空关系追踪</h2><p>时空关系追踪这个图谱应用是在公共安全、物流、疫情防控等场景下，利用图遍历将繁杂、凌乱的信息充分利用起来的典型应用。当我们建立起这样的图谱之后往往只需要简单的图查询就可以获得非常有用的洞察。本章节我给大家距离一下这个应用场景。</p>
<h3 id="数据集" class="headerLink">
    <a href="#%e6%95%b0%e6%8d%ae%e9%9b%86" class="header-mark"></a>9.1 数据集</h3><p>为此，我创建了一个虚拟的数据集由来构建一个时空关系图谱。数据集的生成程序和一份可以直接用的文件都放在了 GitHub 上，仓库地址是： <a href="https://github.com/wey-gu/covid-track-graph-datagen" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/covid-track-graph-datagen</a> 。</p>
<p>它的数据建模如下：</p>
<img src="schema_covid.webp" alt="schema_covid" style="zoom:40%;" />
<p>在一个全新的环境里，我们可以用下边的 3 行命令就准备好这个图谱：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 安装 NebulaGraph + NebulaGraph Studio</span>
</span></span><span class="line"><span class="cl">curl -fsSL nebula-up.siwei.io/install.sh <span class="p">|</span> bash -s -- v3
</span></span><span class="line"><span class="cl"><span class="c1"># 下载数据集</span>
</span></span><span class="line"><span class="cl">git clone https://github.com/wey-gu/covid-track-graph-datagen <span class="o">&amp;&amp;</span> <span class="nb">cd</span> covid-track-graph-datagen
</span></span><span class="line"><span class="cl"><span class="c1"># 导入数据集</span>
</span></span><span class="line"><span class="cl">docker run --rm -ti <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --network<span class="o">=</span>nebula-net <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v <span class="si">${</span><span class="nv">PWD</span><span class="si">}</span>/:/root <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    vesoft/nebula-importer:v3.2.0 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --config /root/nebula-importer-config.yaml
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后我们在 console 里查看一下数据</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">~/.nebula-up/console.sh
</span></span><span class="line"><span class="cl"><span class="c1"># 进入 console 了，进到 covid_trace 图空间（刚才创建的）</span>
</span></span><span class="line"><span class="cl">USE covid_trace<span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 执行数据统计的任务</span>
</span></span><span class="line"><span class="cl">SHOW JOB STATS
</span></span></code></pre></td></tr></table>
</div>
</div><p>结果：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>root@nebula<span class="o">)</span> <span class="o">[</span>covid_trace<span class="o">]</span>&gt; SHOW STATS
</span></span><span class="line"><span class="cl">+---------+------------+--------+
</span></span><span class="line"><span class="cl"><span class="p">|</span> Type    <span class="p">|</span> Name       <span class="p">|</span> Count  <span class="p">|</span>
</span></span><span class="line"><span class="cl">+---------+------------+--------+
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Tag&#34;</span>   <span class="p">|</span> <span class="s2">&#34;人&#34;</span>       <span class="p">|</span> <span class="m">10000</span>  <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Tag&#34;</span>   <span class="p">|</span> <span class="s2">&#34;地址&#34;</span>     <span class="p">|</span> <span class="m">1000</span>   <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Tag&#34;</span>   <span class="p">|</span> <span class="s2">&#34;城市&#34;</span>     <span class="p">|</span> <span class="m">341</span>    <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Tag&#34;</span>   <span class="p">|</span> <span class="s2">&#34;村镇&#34;</span>     <span class="p">|</span> <span class="m">42950</span>  <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Tag&#34;</span>   <span class="p">|</span> <span class="s2">&#34;省份&#34;</span>     <span class="p">|</span> <span class="m">32</span>     <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Tag&#34;</span>   <span class="p">|</span> <span class="s2">&#34;联系方式&#34;</span> <span class="p">|</span> <span class="m">0</span>      <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Tag&#34;</span>   <span class="p">|</span> <span class="s2">&#34;行政区&#34;</span>   <span class="p">|</span> <span class="m">3134</span>   <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Tag&#34;</span>   <span class="p">|</span> <span class="s2">&#34;街道&#34;</span>     <span class="p">|</span> <span class="m">667911</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Edge&#34;</span>  <span class="p">|</span> <span class="s2">&#34;住址&#34;</span>     <span class="p">|</span> <span class="m">0</span>      <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Edge&#34;</span>  <span class="p">|</span> <span class="s2">&#34;到访&#34;</span>     <span class="p">|</span> <span class="m">19986</span>  <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Edge&#34;</span>  <span class="p">|</span> <span class="s2">&#34;同住&#34;</span>     <span class="p">|</span> <span class="m">19998</span>  <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Edge&#34;</span>  <span class="p">|</span> <span class="s2">&#34;属于&#34;</span>     <span class="p">|</span> <span class="m">715336</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Space&#34;</span> <span class="p">|</span> <span class="s2">&#34;vertices&#34;</span> <span class="p">|</span> <span class="m">725368</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="s2">&#34;Space&#34;</span> <span class="p">|</span> <span class="s2">&#34;edges&#34;</span>    <span class="p">|</span> <span class="m">755320</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl">+---------+------------+--------+
</span></span><span class="line"><span class="cl">Got <span class="m">14</span> rows <span class="o">(</span><span class="nb">time</span> spent 1087/46271 us<span class="o">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="两人之间的关联" class="headerLink">
    <a href="#%e4%b8%a4%e4%ba%ba%e4%b9%8b%e9%97%b4%e7%9a%84%e5%85%b3%e8%81%94" class="header-mark"></a>9.2 两人之间的关联</h3><p>很自然，利用路径查询就可以了：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># 最短
</span></span><span class="line"><span class="cl">FIND SHORTEST PATH FROM &#34;p_100&#34; TO &#34;p_101&#34; OVER * BIDIRECT YIELD PATH AS paths
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 所有路径
</span></span><span class="line"><span class="cl">FIND ALL PATH FROM &#34;p_100&#34; TO &#34;p_101&#34; OVER * BIDIRECT YIELD PATH AS paths | LIMIT 10
</span></span></code></pre></td></tr></table>
</div>
</div><p>最短路径结果：</p>
<table>
<thead>
<tr>
<th style="text-align:left">paths</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">&lt;(&ldquo;p_100&rdquo;)&lt;-[:同住@0 {}]-(&ldquo;p_2136&rdquo;)&lt;-[:同住@0 {}]-(&ldquo;p_3708&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_125&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_101&rdquo;)&gt;</td>
</tr>
</tbody>
</table>
<p>所有路径结果：</p>
<table>
<thead>
<tr>
<th style="text-align:left">paths</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">&lt;(&ldquo;p_100&rdquo;)&lt;-[:同住@0 {}]-(&ldquo;p_2136&rdquo;)&lt;-[:同住@0 {}]-(&ldquo;p_3708&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_125&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_101&rdquo;)&gt;</td>
</tr>
<tr>
<td style="text-align:left">&lt;(&ldquo;p_100&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_328&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_6976&rdquo;)&lt;-[:同住@0 {}]-(&ldquo;p_261&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_352&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_101&rdquo;)&gt;</td>
</tr>
<tr>
<td style="text-align:left">&lt;(&ldquo;p_100&rdquo;)-[:同住@0 {}]-&gt;(&ldquo;p_8709&rdquo;)-[:同住@0 {}]-&gt;(&ldquo;p_9315&rdquo;)-[:同住@0 {}]-&gt;(&ldquo;p_261&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_352&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_101&rdquo;)&gt;</td>
</tr>
<tr>
<td style="text-align:left">&lt;(&ldquo;p_100&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_328&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_6311&rdquo;)-[:同住@0 {}]-&gt;(&ldquo;p_3941&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_345&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_101&rdquo;)&gt;</td>
</tr>
<tr>
<td style="text-align:left">&lt;(&ldquo;p_100&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_328&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_5046&rdquo;)-[:同住@0 {}]-&gt;(&ldquo;p_3993&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_144&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_101&rdquo;)&gt;</td>
</tr>
<tr>
<td style="text-align:left">&lt;(&ldquo;p_100&rdquo;)-[:同住@0 {}]-&gt;(&ldquo;p_3457&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_199&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_6771&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_458&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_101&rdquo;)&gt;</td>
</tr>
<tr>
<td style="text-align:left">&lt;(&ldquo;p_100&rdquo;)&lt;-[:同住@0 {}]-(&ldquo;p_1462&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_922&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_5869&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_345&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_101&rdquo;)&gt;</td>
</tr>
<tr>
<td style="text-align:left">&lt;(&ldquo;p_100&rdquo;)&lt;-[:同住@0 {}]-(&ldquo;p_9489&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_985&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_2733&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_458&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_101&rdquo;)&gt;</td>
</tr>
<tr>
<td style="text-align:left">&lt;(&ldquo;p_100&rdquo;)&lt;-[:同住@0 {}]-(&ldquo;p_9489&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_905&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_2733&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_458&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_101&rdquo;)&gt;</td>
</tr>
<tr>
<td style="text-align:left">&lt;(&ldquo;p_100&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_89&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_1333&rdquo;)&lt;-[:同住@0 {}]-(&ldquo;p_1683&rdquo;)-[:到访@0 {}]-&gt;(&ldquo;a_345&rdquo;)&lt;-[:到访@0 {}]-(&ldquo;p_101&rdquo;)&gt;</td>
</tr>
</tbody>
</table>
<p>我们把所有路径进行可视化渲染，标记出起点终点的两人，并在其中查到他们的最短路径，他们之间的千丝万缕关系就一目了然了，无论是商业洞察、公共安全还是疫情防控的目的，有了这个信息，相应的工作都可以如虎添翼地向下进展。</p>
<p><figure><a class="lightgallery" href="/nebulagraph-sns/find_path_two_people.webp" title="find_path_two_people" data-thumbnail="/nebulagraph-sns/find_path_two_people.webp">
        <img
            
            loading="lazy"
            src="/nebulagraph-sns/find_path_two_people.webp"
            srcset="/nebulagraph-sns/find_path_two_people.webp, /nebulagraph-sns/find_path_two_people.webp 1.5x, /nebulagraph-sns/find_path_two_people.webp 2x"
            sizes="auto"
            alt="/nebulagraph-sns/find_path_two_people.webp">
    </a></figure></p>
<p>当然，在真实的系统上，可能我们只需要关心两个用户之间的关联远近，得出量化的评估：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">FIND SHORTEST PATH FROM &#34;p_100&#34; TO &#34;p_101&#34; OVER * BIDIRECT YIELD PATH AS paths |
</span></span><span class="line"><span class="cl">    YIELD collect(length($-.paths)) AS len | YIELD coalesce($-.len[0], -1) AS len
</span></span></code></pre></td></tr></table>
</div>
</div><p>结果中我们只关心他们之间最短路径的长度为：4。</p>
<table>
<thead>
<tr>
<th style="text-align:left">len</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">4</td>
</tr>
</tbody>
</table>
<h3 id="时空相交的人" class="headerLink">
    <a href="#%e6%97%b6%e7%a9%ba%e7%9b%b8%e4%ba%a4%e7%9a%84%e4%ba%ba" class="header-mark"></a>9.3 时空相交的人</h3><p>进一步我们可以用图语义勾勒出我们想确定的任何带有时间与空间信息的模式，在图谱中实时查询出来，比如对给定的人，他的 id 是 p_101，我们相差在特定时间里所有和他有时空相交的人，这意味着那些人在 p_101 访问某一地方的时间段之内也逗留、访问了这些地方：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">p</span><span class="p">:</span><span class="err">人</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="o">`</span><span class="n">visit0</span><span class="o">`</span><span class="p">:</span><span class="err">到访</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="o">`</span><span class="n">addr</span><span class="o">`</span><span class="p">:</span><span class="err">地址</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[</span><span class="o">`</span><span class="n">visit1</span><span class="o">`</span><span class="p">:</span><span class="err">到访</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">p1</span><span class="p">:</span><span class="err">人</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;p_101&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="o">`</span><span class="n">visit0</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">start_time</span><span class="o">`</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="o">`</span><span class="n">visit1</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">end_time</span><span class="o">`</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="o">`</span><span class="n">visit0</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">end_time</span><span class="o">`</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="o">`</span><span class="n">visit1</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">start_time</span><span class="o">`</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">RETURN</span><span class="w"> </span><span class="o">`</span><span class="n">addr</span><span class="o">`</span><span class="p">.</span><span class="err">地址</span><span class="p">.</span><span class="o">`</span><span class="n">name</span><span class="o">`</span><span class="p">,</span><span class="w"> </span><span class="nf">collect</span><span class="p">(</span><span class="n">p1</span><span class="p">.</span><span class="err">人</span><span class="p">.</span><span class="o">`</span><span class="n">name</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>我们得到了再每一个到访地点的时空相交人列表如下：</p>
<table>
<thead>
<tr>
<th style="text-align:left">addr.地址.name</th>
<th style="text-align:left">collect(p1.人.name)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">闵行仇路q座 255960</td>
<td style="text-align:left">[&ldquo;徐畅&rdquo;, &ldquo;王佳&rdquo;, &ldquo;曾亮&rdquo;, &ldquo;姜桂香&rdquo;, &ldquo;邵秀英&rdquo;, &ldquo;韦婷婷&rdquo;, &ldquo;陶玉&rdquo;, &ldquo;马坤&rdquo;, &ldquo;黄想&rdquo;, &ldquo;张秀芳&rdquo;, &ldquo;颜桂芳&rdquo;, &ldquo;张洋&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">丰都北京路J座 725701</td>
<td style="text-align:left">[&ldquo;陈春梅&rdquo;, &ldquo;施婷婷&rdquo;, &ldquo;井成&rdquo;, &ldquo;范文&rdquo;, &ldquo;王楠&rdquo;, &ldquo;尚明&rdquo;, &ldquo;薛秀珍&rdquo;, &ldquo;宋金凤&rdquo;, &ldquo;杨雪&rdquo;, &ldquo;邓丽华&rdquo;, &ldquo;李杨&rdquo;, &ldquo;温佳&rdquo;, &ldquo;叶玉&rdquo;, &ldquo;周明&rdquo;, &ldquo;王桂珍&rdquo;, &ldquo;段玉华&rdquo;, &ldquo;金成&rdquo;, &ldquo;黄鑫&rdquo;, &ldquo;邬兵&rdquo;, &ldquo;魏柳&rdquo;, &ldquo;王兰英&rdquo;, &ldquo;杨柳&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">普陀潜江路P座 210730</td>
<td style="text-align:left">[&ldquo;储平&rdquo;, &ldquo;洪红霞&rdquo;, &ldquo;沈玉英&rdquo;, &ldquo;王洁&rdquo;, &ldquo;董玉英&rdquo;, &ldquo;邓凤英&rdquo;, &ldquo;谢海燕&rdquo;, &ldquo;梁雷&rdquo;, &ldquo;张畅&rdquo;, &ldquo;任玉兰&rdquo;, &ldquo;贾宇&rdquo;, &ldquo;汪成&rdquo;, &ldquo;孙琴&rdquo;, &ldquo;纪红梅&rdquo;, &ldquo;王欣&rdquo;, &ldquo;陈兵&rdquo;, &ldquo;张成&rdquo;, &ldquo;王东&rdquo;, &ldquo;谷霞&rdquo;, &ldquo;林成&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">普陀武街f座 706352</td>
<td style="text-align:left">[&ldquo;邢成&rdquo;, &ldquo;张建军&rdquo;, &ldquo;张鑫&rdquo;, &ldquo;戴涛&rdquo;, &ldquo;蔡洋&rdquo;, &ldquo;汪燕&rdquo;, &ldquo;尹亮&rdquo;, &ldquo;何利&rdquo;, &ldquo;何玉&rdquo;, &ldquo;周波&rdquo;, &ldquo;金秀珍&rdquo;, &ldquo;杨波&rdquo;, &ldquo;张帅&rdquo;, &ldquo;周柳&rdquo;, &ldquo;马云&rdquo;, &ldquo;张建华&rdquo;, &ldquo;王丽丽&rdquo;, &ldquo;陈丽&rdquo;, &ldquo;万萍&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">城东贵阳街O座 110567</td>
<td style="text-align:left">[&ldquo;李洁&rdquo;, &ldquo;陈静&rdquo;, &ldquo;王建国&rdquo;, &ldquo;方淑华&rdquo;, &ldquo;古想&rdquo;, &ldquo;漆萍&rdquo;, &ldquo;詹桂花&rdquo;, &ldquo;王成&rdquo;, &ldquo;李慧&rdquo;, &ldquo;孙娜&rdquo;, &ldquo;马伟&rdquo;, &ldquo;谢杰&rdquo;, &ldquo;王鹏&rdquo;, &ldquo;鞠桂英&rdquo;, &ldquo;莫桂英&rdquo;, &ldquo;汪雷&rdquo;, &ldquo;黄彬&rdquo;, &ldquo;李玉梅&rdquo;, &ldquo;祝红梅&rdquo;]</td>
</tr>
</tbody>
</table>
<p>现在，我们在图上可视化这个结果看看：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">p</span><span class="p">:</span><span class="err">人</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="o">`</span><span class="n">visit0</span><span class="o">`</span><span class="p">:</span><span class="err">到访</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="o">`</span><span class="n">addr</span><span class="o">`</span><span class="p">:</span><span class="err">地址</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[</span><span class="o">`</span><span class="n">visit1</span><span class="o">`</span><span class="p">:</span><span class="err">到访</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">p1</span><span class="p">:</span><span class="err">人</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;p_101&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="o">`</span><span class="n">visit0</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">start_time</span><span class="o">`</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="o">`</span><span class="n">visit1</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">end_time</span><span class="o">`</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="o">`</span><span class="n">visit0</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">end_time</span><span class="o">`</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="o">`</span><span class="n">visit1</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">start_time</span><span class="o">`</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">RETURN</span><span class="w"> </span><span class="n">paths</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>结果中我们标记了 p_101 为不同的图标，在用标签传播算法识别一下聚集社区，是不是一图胜千言呢？</p>
<p><figure><a class="lightgallery" href="/nebulagraph-sns/time_and_space.webp" title="time_and_space" data-thumbnail="/nebulagraph-sns/time_and_space.webp">
        <img
            
            loading="lazy"
            src="/nebulagraph-sns/time_and_space.webp"
            srcset="/nebulagraph-sns/time_and_space.webp, /nebulagraph-sns/time_and_space.webp 1.5x, /nebulagraph-sns/time_and_space.webp 2x"
            sizes="auto"
            alt="/nebulagraph-sns/time_and_space.webp">
    </a></figure></p>
<h3 id="最近去过的省份" class="headerLink">
    <a href="#%e6%9c%80%e8%bf%91%e5%8e%bb%e8%bf%87%e7%9a%84%e7%9c%81%e4%bb%bd" class="header-mark"></a>9.4 最近去过的省份</h3><p>最后，我们再用简单的查询模式表达出一个人在给定时间内，比如从一个时间点开始，到访过的所有省份</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">p</span><span class="p">:</span><span class="err">人</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">visit</span><span class="p">:</span><span class="err">到访</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="o">`</span><span class="n">addr</span><span class="o">`</span><span class="p">:</span><span class="err">地址</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="err">属于</span><span class="o">*</span><span class="mi">5</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">province</span><span class="p">:</span><span class="err">省份</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;p_101&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">visit</span><span class="p">.</span><span class="n">start_time</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">1625469000</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">RETURN</span><span class="w"> </span><span class="n">province</span><span class="p">.</span><span class="err">省份</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="nf">collect</span><span class="p">(</span><span class="n">addr</span><span class="p">.</span><span class="err">地址</span><span class="p">.</span><span class="n">name</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>看起来他/她去过不少地方呢：</p>
<table>
<thead>
<tr>
<th style="text-align:left">province.省份.name</th>
<th style="text-align:left">collect(addr.地址.name)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">四川省</td>
<td style="text-align:left">[&ldquo;闵行仇路q座 255960&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">山东省</td>
<td style="text-align:left">[&ldquo;城东贵阳街O座 110567&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">云南省</td>
<td style="text-align:left">[&ldquo;丰都北京路J座 725701&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">福建省</td>
<td style="text-align:left">[&ldquo;普陀潜江路P座 210730&rdquo;]</td>
</tr>
<tr>
<td style="text-align:left">内蒙古自治区</td>
<td style="text-align:left">[&ldquo;普陀武街f座 706352&rdquo;]</td>
</tr>
</tbody>
</table>
<p>老轨迹，我们在图上看看这个结果吧，这次，我们选择 Dagre-LR 这个布局渲染，结果是不是非常清晰呢？</p>
<p><figure><a class="lightgallery" href="/nebulagraph-sns/visited_provinces.webp" title="visited_provinces" data-thumbnail="/nebulagraph-sns/visited_provinces.webp">
        <img
            
            loading="lazy"
            src="/nebulagraph-sns/visited_provinces.webp"
            srcset="/nebulagraph-sns/visited_provinces.webp, /nebulagraph-sns/visited_provinces.webp 1.5x, /nebulagraph-sns/visited_provinces.webp 2x"
            sizes="auto"
            alt="/nebulagraph-sns/visited_provinces.webp">
    </a></figure></p>
<h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>10 总结</h2><p>我们给出了不少社交网络里的应用案例，包括：</p>
<ul>
<li>查找关键的人</li>
<li>识别聚集的人群、社群</li>
<li>判定两个用户之间的亲密度</li>
<li>推荐新朋友</li>
<li>利用共同邻居精准推送重要内容</li>
<li>根据好友关系、地理位置推送信息流</li>
<li>利用时空关系图谱查询人与人之间关系、获取时空相交的人、访问过的省份</li>
</ul>
<p>社交网络作为天然的图结构，非常适合用图的技术来存储、查询、计算、分析与可视化去解决其上的各式各样的问题，NebulaGraph 的强大处理能力和可视化能力使得我们已知很多公司在使用它作为社交领域的图存储、计算层，这其中包括：网易游戏、微信、Line、Soul、快手和知乎等等很多行业领先的团队，希望大家通过本章能对社交领域的图技术应有有一个初步的认识。</p>
<blockquote>
<p>题图版权：by <a href="https://unsplash.com/photos/IBaVuZsJJTo" target="_blank" rel="noopener noreferrer">Ryoji</a></p>
</blockquote>]]></description>
</item><item>
    <title>chatGPT 加 NebulaGraph 预测 2022 世界杯冠军球队</title>
    <link>https://siwei.io/chatgpt-and-nebulagraph-predict-fifa-world-cup/</link>
    <pubDate>Tue, 06 Dec 2022 18:01:55 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/chatgpt-and-nebulagraph-predict-fifa-world-cup/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/chatgpt-and-nebulagraph-predict-fifa-world-cup/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>一次利用 chatGPT 给出数据抓取代码，借助 NebulaGraph 图数据库与图算法预测体育赛事的尝试。</p>
</blockquote>
<!--

> chatGPT and Nebulagraph Predict Fifa World Cup

[TOC]

-->
<h2 id="蹭热度" class="headerLink">
    <a href="#%e8%b9%ad%e7%83%ad%e5%ba%a6" class="header-mark"></a>1 蹭热度</h2><p>最近因为世界杯进行时，被这篇 <a href="https://cambridge-intelligence.com/fifa-world-cup-2022-prediction/" target="_blank" rel="noopener noreferrer">Cambridge Intelligence</a> 的文章启发（仅仅利用有限的信息量和条件，借助图算法的方法做合理的冠军预测），讨论到也可以试着用 NebulaGraph 玩玩冠军预测，还能顺道科普一波图库技术和图算法。</p>
<p>本来想着几个小时撸出来一个方案，被数据集的收集劝退了，我是是在懒得去 <a href="https://en.wikipedia.org/wiki/2022_FIFA_World_Cup_squads" target="_blank" rel="noopener noreferrer">wikepedia</a> 里抓取出来需要的数据，索性就按下放了几天。</p>
<p>同时，另一个热潮是最近 OpenAI 发布了 chatGPT 服务，它可以实现各种语言可是实现的复杂任务设计包括：</p>
<ul>
<li>随时帮你实现一段什么样的代码</li>
<li>模拟成任意一个 prompt 界面：shell、python、virtual machine、甚至你创造的语言</li>
<li>假设、带入你给定的人设，和你聊天</li>
<li>写诗歌、rap、散文</li>
<li>找出一段代码的 bug</li>
<li>解释一段复杂的正则表达式的含义</li>
</ul>
<p>chatGPT 的上下文能力、理解力到的前所未有的程度以至于所有人都在讨论新的工作方式：如何掌握让机器帮助我们完成任务。</p>
<p>所以，当我试过让 chatGPT 帮我写复杂的图数据库查询语句、解释复杂图查询语句的含义、解释一大段 <em>Bison</em> 代码含义之后我才意识到：为什么不让 chatGPT 帮我写好抓取数据的代码呢？</p>
<h2 id="抓取数据" class="headerLink">
    <a href="#%e6%8a%93%e5%8f%96%e6%95%b0%e6%8d%ae" class="header-mark"></a>2 抓取数据</h2><p>我真试了一下，结果是：完全可以，而且似乎真的很容易。</p>
<p>整个过程基本上我像是一个代码考试的面试官、或者是一个产品经理，提出我的需求，chatGPT 给出代码的实现。我们再试着跑起来代码，找到代码中不合理的地方，指出来、给出建议，chatGPT 就真的能理解我指出的点，并给出相应的修正，像是：</p>
<p><figure><a class="lightgallery" href="/chatgpt-and-nebulagraph-predict-fifa-world-cup/chatGPT-correction-process.webp" title="/chatgpt-and-nebulagraph-predict-fifa-world-cup/chatGPT-correction-process.webp" data-thumbnail="/chatgpt-and-nebulagraph-predict-fifa-world-cup/chatGPT-correction-process.webp">
        <img
            
            loading="lazy"
            src="/chatgpt-and-nebulagraph-predict-fifa-world-cup/chatGPT-correction-process.webp"
            srcset="/chatgpt-and-nebulagraph-predict-fifa-world-cup/chatGPT-correction-process.webp, /chatgpt-and-nebulagraph-predict-fifa-world-cup/chatGPT-correction-process.webp 1.5x, /chatgpt-and-nebulagraph-predict-fifa-world-cup/chatGPT-correction-process.webp 2x"
            sizes="auto"
            alt="/chatgpt-and-nebulagraph-predict-fifa-world-cup/chatGPT-correction-process.webp">
    </a></figure></p>
<p>这一全过程我就不在这里列出来了，不过我把生成的代码和整个讨论的过程都分享在<a href="https://gist.github.com/wey-gu/78cb28bee130966e7d6e9d573b51deff" target="_blank" rel="noopener noreferrer">这里</a>，感兴趣的同学可以去看看。</p>
<p>最终生成的数据是一个 CSV 文件：</p>
<ul>
<li>
<p>代码生成的文件 <a href="https://github.com/siwei-io/talks/files/10152775/world_cup_squads.csv" target="_blank" rel="noopener noreferrer">world_cup_squads.csv</a></p>
</li>
<li>
<p>手动修改、分开了生日和年龄的列 <a href="https://github.com/siwei-io/talks/files/10152923/world_cup_squads.csv" target="_blank" rel="noopener noreferrer">world_cup_squads_v0.csv</a></p>
<p>它像这样，包含的信息有：球队、小组、编号、位置、球员名字、生日、年龄、参加国际比赛场次、进球数、服役俱乐部。</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Team,Group,No.,Pos.,Player,DOB,Age,Caps,Goals,Club
</span></span><span class="line"><span class="cl">Ecuador,A,1,1GK,Hernán Galíndez,(1987-03-30)30 March 1987,35,12,0,Aucas
</span></span><span class="line"><span class="cl">Ecuador,A,2,2DF,Félix Torres,(1997-01-11)11 January 1997,25,17,2,Santos Laguna
</span></span><span class="line"><span class="cl">Ecuador,A,3,2DF,Piero Hincapié,(2002-01-09)9 January 2002,20,21,1,Bayer Leverkusen
</span></span><span class="line"><span class="cl">Ecuador,A,4,2DF,Robert Arboleda,(1991-10-22)22 October 1991,31,33,2,São Paulo
</span></span><span class="line"><span class="cl">Ecuador,A,5,3MF,José Cifuentes,(1999-03-12)12 March 1999,23,11,0,Los Angeles FC
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>手动删除了 CSV 表头 <a href="https://github.com/siwei-io/talks/files/10152974/world_cup_squads_no_headers.csv" target="_blank" rel="noopener noreferrer">world_cup_squads_no_headers.csv</a></li>
</ul>
<h2 id="图方法预测2022世界杯" class="headerLink">
    <a href="#%e5%9b%be%e6%96%b9%e6%b3%95%e9%a2%84%e6%b5%8b2022%e4%b8%96%e7%95%8c%e6%9d%af" class="header-mark"></a>3 图方法预测2022世界杯</h2><h3 id="图建模" class="headerLink">
    <a href="#%e5%9b%be%e5%bb%ba%e6%a8%a1" class="header-mark"></a>3.1 图建模</h3><blockquote>
<p>前提，本文使用 NebulaGraph 和 NebulaGraph Explorer，你可以在阿里云上免费申请半个月的试用，入口链接是👉🏻 <a href="http://c.nxw.so/d52oz" target="_blank" rel="noopener noreferrer">http://c.nxw.so/d52oz</a> ，不要被这个陌生的短链接域名吓到，它只是帮助我们统计有多少同学通过这里访问到 <a href="https://market.aliyun.com" target="_blank" rel="noopener noreferrer">https://market.aliyun.com</a> 而已。</p>
</blockquote>
<p>图建模（Graph Modeling）是把真实世界信息以”点&ndash;&gt;边“的图形式去抽象与表示。</p>
<p>这里，我们根据公共领域能够容易获得信息、把它映射成如下的点与边：</p>
<p>点：</p>
<ul>
<li>player（球员）</li>
<li>team（球队）</li>
<li>group（小组）</li>
<li>club（俱乐部）</li>
</ul>
<p>边：</p>
<ul>
<li>groupedin（球队属于哪一小组）</li>
<li>belongto（队员属于国家队）</li>
<li>serve（队员在俱乐部服役）</li>
</ul>
<p>而队员的年龄、参加国际场次（caps）、进球数（goals）则很自然作为 player 这一类点的属性。</p>
<p>下图是这个 schema 在 NebulaGraph Studio/Explorer（后边称 Studio/Explorer） 中的截图：</p>
<p><figure><a class="lightgallery" href="/chatgpt-and-nebulagraph-predict-fifa-world-cup/schema_fifa.webp" title="schema_fifa" data-thumbnail="/chatgpt-and-nebulagraph-predict-fifa-world-cup/schema_fifa.webp">
        <img
            
            loading="lazy"
            src="/chatgpt-and-nebulagraph-predict-fifa-world-cup/schema_fifa.webp"
            srcset="/chatgpt-and-nebulagraph-predict-fifa-world-cup/schema_fifa.webp, /chatgpt-and-nebulagraph-predict-fifa-world-cup/schema_fifa.webp 1.5x, /chatgpt-and-nebulagraph-predict-fifa-world-cup/schema_fifa.webp 2x"
            sizes="auto"
            alt="/chatgpt-and-nebulagraph-predict-fifa-world-cup/schema_fifa.webp">
    </a></figure></p>
<p>然后，我们可以在右上角把它保存，创建一个新的图空间，应用这个图建模到图空间里。</p>
<blockquote>
<p>注：参考文档 <a href="https://docs.nebula-graph.com.cn/3.3.0/nebula-explorer/db-management/draft/" target="_blank" rel="noopener noreferrer">https://docs.nebula-graph.com.cn/3.3.0/nebula-explorer/db-management/draft/</a></p>
</blockquote>
<h3 id="导入数据进-nebulagraph" class="headerLink">
    <a href="#%e5%af%bc%e5%85%a5%e6%95%b0%e6%8d%ae%e8%bf%9b-nebulagraph" class="header-mark"></a>3.2 导入数据进 NebulaGraph</h3><p>有了图建模，我们可以把之前的 CSV 文件（无表头版本）上传到 Studio 或者 Explorer 里，通过点、选关联不同的列到点边中的 vid 和属性：</p>
<p><figure><a class="lightgallery" href="/chatgpt-and-nebulagraph-predict-fifa-world-cup/importer_config_mapping.webp" title="/chatgpt-and-nebulagraph-predict-fifa-world-cup/importer_config_mapping.webp" data-thumbnail="/chatgpt-and-nebulagraph-predict-fifa-world-cup/importer_config_mapping.webp">
        <img
            
            loading="lazy"
            src="/chatgpt-and-nebulagraph-predict-fifa-world-cup/importer_config_mapping.webp"
            srcset="/chatgpt-and-nebulagraph-predict-fifa-world-cup/importer_config_mapping.webp, /chatgpt-and-nebulagraph-predict-fifa-world-cup/importer_config_mapping.webp 1.5x, /chatgpt-and-nebulagraph-predict-fifa-world-cup/importer_config_mapping.webp 2x"
            sizes="auto"
            alt="/chatgpt-and-nebulagraph-predict-fifa-world-cup/importer_config_mapping.webp">
    </a></figure></p>
<p>之后点击导入，就把整个图导入到 NebulaGraph 了，成功之后，我们还得到了整个csv &ndash;&gt; Nebula Importer 的关联配置文件：<a href="https://github.com/siwei-io/talks/files/10164014/config_fifa.yml.txt" target="_blank" rel="noopener noreferrer">nebula_importer_config_fifa.yml</a>，你可以直接拖拽整个配置，不用自己去配置它了。</p>
<p><figure><a class="lightgallery" href="/chatgpt-and-nebulagraph-predict-fifa-world-cup/importer_log.webp" title="/chatgpt-and-nebulagraph-predict-fifa-world-cup/importer_log.webp" data-thumbnail="/chatgpt-and-nebulagraph-predict-fifa-world-cup/importer_log.webp">
        <img
            
            loading="lazy"
            src="/chatgpt-and-nebulagraph-predict-fifa-world-cup/importer_log.webp"
            srcset="/chatgpt-and-nebulagraph-predict-fifa-world-cup/importer_log.webp, /chatgpt-and-nebulagraph-predict-fifa-world-cup/importer_log.webp 1.5x, /chatgpt-and-nebulagraph-predict-fifa-world-cup/importer_log.webp 2x"
            sizes="auto"
            alt="/chatgpt-and-nebulagraph-predict-fifa-world-cup/importer_log.webp">
    </a></figure></p>
<blockquote>
<p>注：参考文档 <a href="https://docs.nebula-graph.com.cn/3.3.0/nebula-explorer/db-management/11.import-data/" target="_blank" rel="noopener noreferrer">https://docs.nebula-graph.com.cn/3.3.0/nebula-explorer/db-management/11.import-data/</a></p>
</blockquote>
<p>导入之后，我们可以在 schema 界面里查看数据统计，我们可以看到有 831 名球员参加了 2022 卡塔尔世界杯，他们服役在 295 个不同的俱乐部：</p>
<p><figure><a class="lightgallery" href="/chatgpt-and-nebulagraph-predict-fifa-world-cup/data_stats.webp" title="/chatgpt-and-nebulagraph-predict-fifa-world-cup/data_stats.webp" data-thumbnail="/chatgpt-and-nebulagraph-predict-fifa-world-cup/data_stats.webp">
        <img
            
            loading="lazy"
            src="/chatgpt-and-nebulagraph-predict-fifa-world-cup/data_stats.webp"
            srcset="/chatgpt-and-nebulagraph-predict-fifa-world-cup/data_stats.webp, /chatgpt-and-nebulagraph-predict-fifa-world-cup/data_stats.webp 1.5x, /chatgpt-and-nebulagraph-predict-fifa-world-cup/data_stats.webp 2x"
            sizes="auto"
            alt="/chatgpt-and-nebulagraph-predict-fifa-world-cup/data_stats.webp">
    </a></figure></p>
<blockquote>
<p>注：参考文档 <a href="https://docs.nebula-graph.com.cn/3.3.0/nebula-explorer/db-management/10.create-schema/#_6" target="_blank" rel="noopener noreferrer">https://docs.nebula-graph.com.cn/3.3.0/nebula-explorer/db-management/10.create-schema/#_6</a></p>
</blockquote>
<h3 id="探索数据" class="headerLink">
    <a href="#%e6%8e%a2%e7%b4%a2%e6%95%b0%e6%8d%ae" class="header-mark"></a>3.3 探索数据</h3><h4 id="查询数据" class="headerLink">
    <a href="#%e6%9f%a5%e8%af%a2%e6%95%b0%e6%8d%ae" class="header-mark"></a>3.3.1 查询数据</h4><p>下面，我们试着把所有的数据展示出来看看吧，首先，借助 NebulaGraph Explorer，我用拖拽的方式画出来任意类型的点（TAG）和任意类型点（TAG）之间的边，这里我们知道所有的点都是至少包含在一个边里的，所以不会漏掉任何孤立的点。</p>
<p><figure><a class="lightgallery" href="/chatgpt-and-nebulagraph-predict-fifa-world-cup/query-builder-0.webp" title="/chatgpt-and-nebulagraph-predict-fifa-world-cup/query-builder-0.webp" data-thumbnail="/chatgpt-and-nebulagraph-predict-fifa-world-cup/query-builder-0.webp">
        <img
            
            loading="lazy"
            src="/chatgpt-and-nebulagraph-predict-fifa-world-cup/query-builder-0.webp"
            srcset="/chatgpt-and-nebulagraph-predict-fifa-world-cup/query-builder-0.webp, /chatgpt-and-nebulagraph-predict-fifa-world-cup/query-builder-0.webp 1.5x, /chatgpt-and-nebulagraph-predict-fifa-world-cup/query-builder-0.webp 2x"
            sizes="auto"
            alt="/chatgpt-and-nebulagraph-predict-fifa-world-cup/query-builder-0.webp">
    </a></figure></p>
<p>让它帮我生成查询的语句，这里，它默认 LIMIT 100 了，我们手动改大一些（ LIMIT 10000），让它在 Console 里执行。</p>
<p><figure><a class="lightgallery" href="/chatgpt-and-nebulagraph-predict-fifa-world-cup/query-builder-1.webp" title="/chatgpt-and-nebulagraph-predict-fifa-world-cup/query-builder-1.webp" data-thumbnail="/chatgpt-and-nebulagraph-predict-fifa-world-cup/query-builder-1.webp">
        <img
            
            loading="lazy"
            src="/chatgpt-and-nebulagraph-predict-fifa-world-cup/query-builder-1.webp"
            srcset="/chatgpt-and-nebulagraph-predict-fifa-world-cup/query-builder-1.webp, /chatgpt-and-nebulagraph-predict-fifa-world-cup/query-builder-1.webp 1.5x, /chatgpt-and-nebulagraph-predict-fifa-world-cup/query-builder-1.webp 2x"
            sizes="auto"
            alt="/chatgpt-and-nebulagraph-predict-fifa-world-cup/query-builder-1.webp">
    </a></figure></p>
<h4 id="初步观察数据" class="headerLink">
    <a href="#%e5%88%9d%e6%ad%a5%e8%a7%82%e5%af%9f%e6%95%b0%e6%8d%ae" class="header-mark"></a>3.3.2 初步观察数据</h4><p>结果渲染出来是这样子，可以看到它天然形成了一簇一簇的模式。</p>
<p><figure><a class="lightgallery" href="/chatgpt-and-nebulagraph-predict-fifa-world-cup/bird_view.webp" title="/chatgpt-and-nebulagraph-predict-fifa-world-cup/bird_view.webp" data-thumbnail="/chatgpt-and-nebulagraph-predict-fifa-world-cup/bird_view.webp">
        <img
            
            loading="lazy"
            src="/chatgpt-and-nebulagraph-predict-fifa-world-cup/bird_view.webp"
            srcset="/chatgpt-and-nebulagraph-predict-fifa-world-cup/bird_view.webp, /chatgpt-and-nebulagraph-predict-fifa-world-cup/bird_view.webp 1.5x, /chatgpt-and-nebulagraph-predict-fifa-world-cup/bird_view.webp 2x"
            sizes="auto"
            alt="/chatgpt-and-nebulagraph-predict-fifa-world-cup/bird_view.webp">
    </a></figure></p>
<p>这些外围、形成的簇多是一些由非传统意义上的有全球影响力的俱乐部，和非传统的足球厉害的国家队的球员组成，因为通常这些俱乐部只有一两个球员，而且他们还集中在一个国家队、地区，所以没有和很多其他球员、国家队产生连接。</p>
<p><figure><a class="lightgallery" href="/chatgpt-and-nebulagraph-predict-fifa-world-cup/edge_teams.webp" title="/chatgpt-and-nebulagraph-predict-fifa-world-cup/edge_teams.webp" data-thumbnail="/chatgpt-and-nebulagraph-predict-fifa-world-cup/edge_teams.webp">
        <img
            
            loading="lazy"
            src="/chatgpt-and-nebulagraph-predict-fifa-world-cup/edge_teams.webp"
            srcset="/chatgpt-and-nebulagraph-predict-fifa-world-cup/edge_teams.webp, /chatgpt-and-nebulagraph-predict-fifa-world-cup/edge_teams.webp 1.5x, /chatgpt-and-nebulagraph-predict-fifa-world-cup/edge_teams.webp 2x"
            sizes="auto"
            alt="/chatgpt-and-nebulagraph-predict-fifa-world-cup/edge_teams.webp">
    </a></figure></p>
<h4 id="图算法辅助分析" class="headerLink">
    <a href="#%e5%9b%be%e7%ae%97%e6%b3%95%e8%be%85%e5%8a%a9%e5%88%86%e6%9e%90" class="header-mark"></a>3.3.3 图算法辅助分析</h4><p>在我点击了 Explorer 中的两个按钮之后（详细参考后边的文档链接），在浏览器里，我们可以看到整个图已经变成：</p>
<p><figure><a class="lightgallery" href="/chatgpt-and-nebulagraph-predict-fifa-world-cup/Barcelona.webp" title="/chatgpt-and-nebulagraph-predict-fifa-world-cup/Barcelona.webp" data-thumbnail="/chatgpt-and-nebulagraph-predict-fifa-world-cup/Barcelona.webp">
        <img
            
            loading="lazy"
            src="/chatgpt-and-nebulagraph-predict-fifa-world-cup/Barcelona.webp"
            srcset="/chatgpt-and-nebulagraph-predict-fifa-world-cup/Barcelona.webp, /chatgpt-and-nebulagraph-predict-fifa-world-cup/Barcelona.webp 1.5x, /chatgpt-and-nebulagraph-predict-fifa-world-cup/Barcelona.webp 2x"
            sizes="auto"
            alt="/chatgpt-and-nebulagraph-predict-fifa-world-cup/Barcelona.webp">
    </a></figure></p>
<blockquote>
<p>注：这部分功能可以参考文档 <a href="https://docs.nebula-graph.com.cn/3.3.0/nebula-explorer/graph-explorer/graph-algorithm/" target="_blank" rel="noopener noreferrer">https://docs.nebula-graph.com.cn/3.3.0/nebula-explorer/graph-explorer/graph-algorithm/</a></p>
</blockquote>
<p>这里，利用到了两个图算法来分析这里的洞察：</p>
<ol>
<li>利用点的出入度，改变他们的显示大小突出重要程度</li>
<li>利用 Louvain 算法区分点的社区分割</li>
</ol>
<p>可以看到红色的大点是鼎鼎大名的巴塞罗那，而它的球员们也被红色标记了。</p>
<h3 id="预测冠军算法" class="headerLink">
    <a href="#%e9%a2%84%e6%b5%8b%e5%86%a0%e5%86%9b%e7%ae%97%e6%b3%95" class="header-mark"></a>3.4 预测冠军算法</h3><p>为了能充分利用图的魔法（与图上的隐含条件、信息），我的思路是选择一种利用链接进行节点重要程度分析的图算法，找出拥有更高重要性的点，对他们全局迭代、排序，从而获得前几名的国家队排名。</p>
<p>这些方法其实就体现在厉害的球员同时拥有更大的社区、连接度，同时，为了增加传统强队之间的区分度，我准备把出场率、进球数的信息也考虑进来。</p>
<p>最终，我的算法是：</p>
<ul>
<li>取出所有的 (球员)-服役-&gt;(俱乐部) 的关系，过滤其中进球数过少、单场进球过少的球员（以平衡一些弱队的老球员带来的过大影响）</li>
<li>从所有过滤之后的球员中向外探索，获得国家队</li>
<li>在以上的子图上运行 Betweenness Centrality 算法，计算节点重要度评分</li>
</ul>
<h4 id="算法过程" class="headerLink">
    <a href="#%e7%ae%97%e6%b3%95%e8%bf%87%e7%a8%8b" class="header-mark"></a>3.4.1 算法过程</h4><p>首先，我们取出所有进球数超过 10，场均进球超过 0.2 的 (球员)-服役-&gt;(俱乐部) 的子图：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">MATCH ()-[e]-&gt;()
</span></span><span class="line"><span class="cl">WITH e LIMIT 10000
</span></span><span class="line"><span class="cl">WITH e AS e WHERE e.goals &gt; 10 AND toFloat(e.goals)/e.caps &gt; 0.2
</span></span><span class="line"><span class="cl">RETURN e
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>注：为了方便，我把进球数和出场数也作为了 serve 边上的属性了。</p>
</blockquote>
<p><figure><a class="lightgallery" href="/chatgpt-and-nebulagraph-predict-fifa-world-cup/query_step0.webp" title="/chatgpt-and-nebulagraph-predict-fifa-world-cup/query_step0.webp" data-thumbnail="/chatgpt-and-nebulagraph-predict-fifa-world-cup/query_step0.webp">
        <img
            
            loading="lazy"
            src="/chatgpt-and-nebulagraph-predict-fifa-world-cup/query_step0.webp"
            srcset="/chatgpt-and-nebulagraph-predict-fifa-world-cup/query_step0.webp, /chatgpt-and-nebulagraph-predict-fifa-world-cup/query_step0.webp 1.5x, /chatgpt-and-nebulagraph-predict-fifa-world-cup/query_step0.webp 2x"
            sizes="auto"
            alt="/chatgpt-and-nebulagraph-predict-fifa-world-cup/query_step0.webp">
    </a></figure></p>
<p>然后，我们全选图上的所有点，点击左边的工具栏，选择出方向的 <code>belongto</code> 边，向外进行图拓展（遍历），同时选择将拓展得到的新点标记为旗帜的 icon：</p>
<p><figure><a class="lightgallery" href="/chatgpt-and-nebulagraph-predict-fifa-world-cup/treversal_step1.webp" title="treversal_step1" data-thumbnail="/chatgpt-and-nebulagraph-predict-fifa-world-cup/treversal_step1.webp">
        <img
            
            loading="lazy"
            src="/chatgpt-and-nebulagraph-predict-fifa-world-cup/treversal_step1.webp"
            srcset="/chatgpt-and-nebulagraph-predict-fifa-world-cup/treversal_step1.webp, /chatgpt-and-nebulagraph-predict-fifa-world-cup/treversal_step1.webp 1.5x, /chatgpt-and-nebulagraph-predict-fifa-world-cup/treversal_step1.webp 2x"
            sizes="auto"
            alt="/chatgpt-and-nebulagraph-predict-fifa-world-cup/treversal_step1.webp">
    </a></figure></p>
<p>现在，我们获得了最终的子图，我们利用工具栏里的浏览器内的图算法功能，执行 BNC（Betweenness Centrality）</p>
<p><figure><a class="lightgallery" href="/chatgpt-and-nebulagraph-predict-fifa-world-cup/bnc_step2.webp" title="bnc_step2" data-thumbnail="/chatgpt-and-nebulagraph-predict-fifa-world-cup/bnc_step2.webp">
        <img
            
            loading="lazy"
            src="/chatgpt-and-nebulagraph-predict-fifa-world-cup/bnc_step2.webp"
            srcset="/chatgpt-and-nebulagraph-predict-fifa-world-cup/bnc_step2.webp, /chatgpt-and-nebulagraph-predict-fifa-world-cup/bnc_step2.webp 1.5x, /chatgpt-and-nebulagraph-predict-fifa-world-cup/bnc_step2.webp 2x"
            sizes="auto"
            alt="/chatgpt-and-nebulagraph-predict-fifa-world-cup/bnc_step2.webp">
    </a></figure></p>
<p>然后，这个子图变成了这样子：</p>
<p><figure><a class="lightgallery" href="/chatgpt-and-nebulagraph-predict-fifa-world-cup/bnc_predict.webp" title="bnc_predict" data-thumbnail="/chatgpt-and-nebulagraph-predict-fifa-world-cup/bnc_predict.webp">
        <img
            
            loading="lazy"
            src="/chatgpt-and-nebulagraph-predict-fifa-world-cup/bnc_predict.webp"
            srcset="/chatgpt-and-nebulagraph-predict-fifa-world-cup/bnc_predict.webp, /chatgpt-and-nebulagraph-predict-fifa-world-cup/bnc_predict.webp 1.5x, /chatgpt-and-nebulagraph-predict-fifa-world-cup/bnc_predict.webp 2x"
            sizes="auto"
            alt="/chatgpt-and-nebulagraph-predict-fifa-world-cup/bnc_predict.webp">
    </a></figure></p>
<h2 id="预测结果" class="headerLink">
    <a href="#%e9%a2%84%e6%b5%8b%e7%bb%93%e6%9e%9c" class="header-mark"></a>4 预测结果</h2><p>最终，我们根据 Betweenness Centrality 的值，排序，可以得到最终的获胜球队应该是：巴西 🇧🇷！</p>
<p>其次是比利时、德国、英格兰、法国、阿根廷，让我们等两个礼拜回来看看预测结果是否准确吧 :D。</p>
<p>注：排序数据（其中还有非参赛球队的点）</p>
<table>
<thead>
<tr>
<th>Vertex</th>
<th><strong>Betweenness Centrality</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Brazil</strong>🇧🇷</td>
<td>3499</td>
</tr>
<tr>
<td><strong>Paris Saint-Germain</strong></td>
<td>3073.3333333333300</td>
</tr>
<tr>
<td><strong>Neymar</strong></td>
<td>3000</td>
</tr>
<tr>
<td><strong>Tottenham Hotspur</strong></td>
<td>2740</td>
</tr>
<tr>
<td><strong>Belgium</strong>🇧🇪</td>
<td>2587.833333333330</td>
</tr>
<tr>
<td><strong>Richarlison</strong></td>
<td>2541</td>
</tr>
<tr>
<td><strong>Kevin De Bruyne</strong></td>
<td>2184</td>
</tr>
<tr>
<td><strong>Manchester City</strong></td>
<td>2125</td>
</tr>
<tr>
<td><strong>İlkay Gündoğan</strong></td>
<td>2064</td>
</tr>
<tr>
<td><strong>Germany</strong>🇩🇪</td>
<td>2046</td>
</tr>
<tr>
<td><strong>Harry Kane (captain</strong></td>
<td>1869</td>
</tr>
<tr>
<td><strong>England</strong>🏴󠁧󠁢󠁥󠁮󠁧󠁿</td>
<td>1864</td>
</tr>
<tr>
<td><strong>France</strong>🇫🇷</td>
<td>1858.6666666666700</td>
</tr>
<tr>
<td><strong>Argentina</strong>🇦🇷</td>
<td>1834.6666666666700</td>
</tr>
<tr>
<td><strong>Bayern Munich</strong></td>
<td>1567</td>
</tr>
<tr>
<td><strong>Kylian Mbappé</strong></td>
<td>1535.3333333333300</td>
</tr>
<tr>
<td><strong>Lionel Messi (captain</strong></td>
<td>1535.3333333333300</td>
</tr>
<tr>
<td><strong>Gabriel Jesus</strong></td>
<td>1344</td>
</tr>
</tbody>
</table>
<blockquote>
<p>题图：这个文章的图也是用 OpenAI DALL-E 2 生成，并用 DALL-E 2 Outpainting 扩充的，<a href="https://user-images.githubusercontent.com/1651790/205881462-ff007725-e270-4b1e-9062-7702f01021c1.png" target="_blank" rel="noopener noreferrer">原图</a>。</p>
</blockquote>]]></description>
</item><item>
    <title>基于开源技术栈的数据血缘、治理参考解决方案</title>
    <link>https://siwei.io/data-lineage-oss-ref-solution/</link>
    <pubDate>Fri, 25 Nov 2022 16:20:43 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/data-lineage-oss-ref-solution/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/data-lineage-oss-ref-solution/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>也许我们没有必要从头在 NebulaGraph 上搭建自己的数据血缘项目，本文分享如何用开源、现代的 DataOps、ETL、Dashboard、元数据、数据血缘管理系统构建大数据治理基础设施</p>
</blockquote>
<h2 id="元数据治理系统" class="headerLink">
    <a href="#%e5%85%83%e6%95%b0%e6%8d%ae%e6%b2%bb%e7%90%86%e7%b3%bb%e7%bb%9f" class="header-mark"></a>1 元数据治理系统</h2><p><strong>元数据治理</strong>系统是一个提供了所有数据在哪、它们的格式化方式、生成、转换、依赖、呈现和所属的<strong>一站式视图</strong>。</p>
<p>元数据治理系统是所有数据仓库、数据库、表、仪表板、ETL 作业等的<strong>目录接口</strong>（catalog），有了它，我们就不用在群里喊“大家好，我可以更改这个表的 schema 吗？”， “请问谁知道我如何找到 table-view-foo-bar 的原始数据？”，一个成熟的数据治理方案中的元数据治理系统，对成规模的数据团队来说非常必要。</p>
<p>对于另一个词：<strong>数据血缘</strong>则是众多需要管理的元数据之一，例如，某些 Dashboard 是 某一个 Table View 的下游，而这个 Table View 又是从另外两个上游的表 JOIN 而来两。 我们显然应该清晰的掌握、管理这些信息，去构建一个可信、可控的系统和数据质量控制体系。</p>
<h2 id="参考解决方案" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88" class="header-mark"></a>2 参考解决方案</h2><h3 id="方案的动机" class="headerLink">
    <a href="#%e6%96%b9%e6%a1%88%e7%9a%84%e5%8a%a8%e6%9c%ba" class="header-mark"></a>2.1 方案的动机</h3><p>元数据和数据血缘本质上非常适合图数据建模、图数据库的场景。这里典型的查询就是面向图关系的查询了，像“查找每个给定组件（即表）的所有 n 深度数据血缘”就是一个 NebulaGraph 中的<code>FIND ALL PATH</code> 查询。</p>
<p>作为 NebulaGraph 社区中的一员，我发现人们在论坛、群里讨论的查询和图建模总能看出来很多人都在 NebulaGraph 上从头搭建自己的数据血缘系统，而这些工作看起来大多数都是重复造轮子（而且轮子并不容易造）。</p>
<p>我们来看看这样的元数据治理系统的轮子里，都需要那些功能组件：</p>
<ul>
<li>元数据 extractor
<ul>
<li>这部分需要从数据栈的不同方（如数据库、数仓、Dashboard，甚至从 ETL Pipeline 和应用、服务等等）中以拉或者推的方式获取。</li>
</ul>
</li>
<li>元数据存储
<ul>
<li>可以存在数据库、图数据库里，或者有时候存成超大的 JSON manifest 文件都行</li>
</ul>
</li>
<li>元数据目录接口系统（Catalog）
<ul>
<li>提供 API 和/或 GUI 界面以读取/写入元数据和数据血缘的系统</li>
</ul>
</li>
</ul>
<p>在 NebulaGraph 社区中，我看到不少人因为提问的查询和建模中明显有数据血缘的痕迹，意识到大家都在从头搭建数据血缘系统。考虑到系统中元数据的提取对象都是从各种知名数据库、数仓、最终的需求也大相径庭，这种重复的开发、研究、探索是一种大大的浪费。</p>
<p>所以，我准备搭建一个能够启发大家的参考数据血缘、治理方案，利用到市面上最好的开源项目。希望能让打算在 NebulaGraph 上定义和迭代自己的 Graph Model 并创建内部元数据和 pipeline 的人可以从这个项目中受益，从而拥有一个相对完善、设计精美的开箱即用的元数据治理系统，和相对更完善的图模型。</p>
<p>我尽量把这个方案做的完备、端到端（不只有元数据管理），希望也能为考虑做基于图做数据治理的新手一些启发和参考。</p>
<p>下图是整个方案的简单示意图：</p>
<p>其中上方是元数据的来源与导入、下方是元数据的存储与展示、发现。</p>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168849779-4826f50e-ff87-4e78-b17f-076f91182c43.svg" title="diagram-of-ref-project" data-thumbnail="https://user-images.githubusercontent.com/1651790/168849779-4826f50e-ff87-4e78-b17f-076f91182c43.svg">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/168849779-4826f50e-ff87-4e78-b17f-076f91182c43.svg"
            srcset="https://user-images.githubusercontent.com/1651790/168849779-4826f50e-ff87-4e78-b17f-076f91182c43.svg, https://user-images.githubusercontent.com/1651790/168849779-4826f50e-ff87-4e78-b17f-076f91182c43.svg 1.5x, https://user-images.githubusercontent.com/1651790/168849779-4826f50e-ff87-4e78-b17f-076f91182c43.svg 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/168849779-4826f50e-ff87-4e78-b17f-076f91182c43.svg">
    </a></figure></p>
<h3 id="技术栈介绍" class="headerLink">
    <a href="#%e6%8a%80%e6%9c%af%e6%a0%88%e4%bb%8b%e7%bb%8d" class="header-mark"></a>2.2 技术栈介绍</h3><p>下边介绍一下其中的每一部分。</p>
<h4 id="数据库和数仓" class="headerLink">
    <a href="#%e6%95%b0%e6%8d%ae%e5%ba%93%e5%92%8c%e6%95%b0%e4%bb%93" class="header-mark"></a>2.2.1 数据库和数仓</h4><p>为了处理和使用原始和中间数据，这里一定涉及至少一个数据库或者数仓。</p>
<p>它可以是 Hive、Apache Delta、TiDB、Cassandra、MySQL 或 Postgres，在这个参考项目中，我们选一个简单、流行的 Postgres。</p>
<p>✅ - 数据仓库：Postgres</p>
<h4 id="数据运维-dataops" class="headerLink">
    <a href="#%e6%95%b0%e6%8d%ae%e8%bf%90%e7%bb%b4-dataops" class="header-mark"></a>2.2.2 数据运维 DataOps</h4><p>我们应该有某种 DataOps 的方案，让 Pipeline 和环境具有可重复性、可测试性和版本控制性。</p>
<p>在这里，我们使用了 GitLab 创建的 <a href="https://gitlab.com/meltano/meltano" target="_blank" rel="noopener noreferrer">Meltano</a>。</p>
<p>Meltano 是一个 just-work 的 DataOps 平台，它以一种神奇而优雅的方式将 <a href="https://singer.io/" target="_blank" rel="noopener noreferrer">Singer</a> 作为 EL 和 <a href="https://getdbt.com/" target="_blank" rel="noopener noreferrer">dbt</a> 作为 T 连接起来，它还连接到其他一些 dataInfra 实用程序，例如 Apache Superset 和 Apache Airflow 等。</p>
<p>至此，我们又纳入了一个成员：</p>
<p>✅ - GitOps：Meltano <a href="https://gitlab.com/meltano/meltano" target="_blank" rel="noopener noreferrer">https://gitlab.com/meltano/meltano</a></p>
<h4 id="etl" class="headerLink">
    <a href="#etl" class="header-mark"></a>2.2.3 ETL</h4><p>如前边提到，我们还利用 <a href="https://singer.io/" target="_blank" rel="noopener noreferrer">Singer</a> 与 Meltano 一起将来自许多不同数据源的数据 E（提取）和 L（加载）数据目标，并使用 <a href="https://getdbt.com/" target="_blank" rel="noopener noreferrer">dbt</a> 作为 Transform 的平台。</p>
<p>✅ - EL：Singer <a href="https://singer.io/" target="_blank" rel="noopener noreferrer">https://singer.io/</a></p>
<p>✅ - T: dbt <a href="https://getdbt.com/" target="_blank" rel="noopener noreferrer">https://getdbt.com/</a></p>
<h4 id="数据可视化" class="headerLink">
    <a href="#%e6%95%b0%e6%8d%ae%e5%8f%af%e8%a7%86%e5%8c%96" class="header-mark"></a>2.2.4 数据可视化</h4><p>在数据之上创建 Dashboard、图表和表格来获得洞察是很直接的需求（可以想象为想象大数据之上的 excel 图标功能）。</p>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/172800854-8e01acae-696d-4e07-8e3e-a7d34dec8278.png" title="https://user-images.githubusercontent.com/1651790/172800854-8e01acae-696d-4e07-8e3e-a7d34dec8278.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/172800854-8e01acae-696d-4e07-8e3e-a7d34dec8278.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/172800854-8e01acae-696d-4e07-8e3e-a7d34dec8278.png"
            srcset="https://user-images.githubusercontent.com/1651790/172800854-8e01acae-696d-4e07-8e3e-a7d34dec8278.png, https://user-images.githubusercontent.com/1651790/172800854-8e01acae-696d-4e07-8e3e-a7d34dec8278.png 1.5x, https://user-images.githubusercontent.com/1651790/172800854-8e01acae-696d-4e07-8e3e-a7d34dec8278.png 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/172800854-8e01acae-696d-4e07-8e3e-a7d34dec8278.png">
    </a></figure></p>
<p><a href="https://superset.apache.org/" target="_blank" rel="noopener noreferrer">Apache Superset</a> 是我很喜欢的开源数据可视化项目，我准备用它来作为被治理管理的目标之一，同时，也会利用它的可视化作为元数据洞察功能的一部分。</p>
<p>✅ - Dashboard：Apache Superset <a href="https://superset.apache.org/" target="_blank" rel="noopener noreferrer">https://superset.apache.org/</a></p>
<h4 id="任务编排dag-job-orchestration" class="headerLink">
    <a href="#%e4%bb%bb%e5%8a%a1%e7%bc%96%e6%8e%92dag-job-orchestration" class="header-mark"></a>2.2.5 任务编排（DAG Job Orchestration）</h4><p>在大多数情况下，我们的 DataOps 作业、任务会增长到需要一个编排系统的规模，我们可以用 <a href="https://airflow.apache.org/" target="_blank" rel="noopener noreferrer">Apache Airflow</a> 来负责这一块。</p>
<p>✅ - DAG：Apache Airflow <a href="https://airflow.apache.org/" target="_blank" rel="noopener noreferrer">https://airflow.apache.org/</a></p>
<h4 id="元数据治理" class="headerLink">
    <a href="#%e5%85%83%e6%95%b0%e6%8d%ae%e6%b2%bb%e7%90%86" class="header-mark"></a>2.2.6 元数据治理</h4><p>随着越来越多的组件和数据被引入数据基础设施，在数据库、表、数据建模(schema)、Dashboard、DAG（编排系统中的有向无环图）、应用与服务的所有生命周期中都将存在海量的元数据，需要对它们的管理员和团队进行协同管理、连接和发现。</p>
<p><a href="https://www.amundsen.io/amundsen/" target="_blank" rel="noopener noreferrer">Linux Foundation Amundsen</a> 是我认为可以解决这个问题的最佳项目之一。</p>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/172801018-ecd67fa9-2743-451f-8734-b14f2a814199.png" title="https://user-images.githubusercontent.com/1651790/172801018-ecd67fa9-2743-451f-8734-b14f2a814199.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/172801018-ecd67fa9-2743-451f-8734-b14f2a814199.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/172801018-ecd67fa9-2743-451f-8734-b14f2a814199.png"
            srcset="https://user-images.githubusercontent.com/1651790/172801018-ecd67fa9-2743-451f-8734-b14f2a814199.png, https://user-images.githubusercontent.com/1651790/172801018-ecd67fa9-2743-451f-8734-b14f2a814199.png 1.5x, https://user-images.githubusercontent.com/1651790/172801018-ecd67fa9-2743-451f-8734-b14f2a814199.png 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/172801018-ecd67fa9-2743-451f-8734-b14f2a814199.png">
    </a></figure></p>
<p>✅ - 数据发现：Linux Foundation Amundsen <a href="https://www.amundsen.io/amundsen/" target="_blank" rel="noopener noreferrer">https://www.amundsen.io/amundsen/</a></p>
<p>Amundsen 用图数据库为事实源（single source of truth）以加速多跳查询，Elastic Search 为全文搜索引擎，它能对所有元数据及其血缘进行了顺滑的处理还提供了优雅的 UI 和 API。</p>
<p>Amundsen 支持多种图数据库为后端，这里咱们用 <a href="https://nebula-graph.com.cn" target="_blank" rel="noopener noreferrer">NebulaGraph</a>。</p>
<p>✅ - 全文搜索：Elastic Search</p>
<p>✅ - 图数据库：NebulaGraph</p>
<p>现在，所有组件都齐活了，开始组装它们吧。</p>
<h2 id="环境搭建与各组件初识" class="headerLink">
    <a href="#%e7%8e%af%e5%a2%83%e6%90%ad%e5%bb%ba%e4%b8%8e%e5%90%84%e7%bb%84%e4%bb%b6%e5%88%9d%e8%af%86" class="header-mark"></a>3 环境搭建与各组件初识</h2><p>整个项目方案都是开源的，大家可以在这里找到它的所有细节：</p>
<ul>
<li><a href="https://github.com/wey-gu/data-lineage-ref-solution" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/data-lineage-ref-solution</a></li>
</ul>
<p>整个项目大家的实验中我遵循尽量干净、鼓励的原则，需要假设在一个 unix-like 的系统上运行，有互联网和 Docker-Compose。</p>
<blockquote>
<p>注：参考 <a href="https://docs.docker.com/compose/install/" target="_blank" rel="noopener noreferrer">https://docs.docker.com/compose/install/</a> 在继续之前安装 Docker 和 Docker Compose。</p>
</blockquote>
<p>这里我们在 Ubuntu 20.04 LTS X86_64 上运行它，但在其他发行版或 Linux 版本上应该也没有问题。</p>
<h3 id="运行一个数仓数据库" class="headerLink">
    <a href="#%e8%bf%90%e8%a1%8c%e4%b8%80%e4%b8%aa%e6%95%b0%e4%bb%93%e6%95%b0%e6%8d%ae%e5%ba%93" class="header-mark"></a>3.1 运行一个数仓、数据库</h3><p>首先，安装 Postgres 作为我们的数仓。</p>
<p>这个单行命令会创建一个使用 docker 在后台运行的 Postgres，进程关闭之后容器不会残留而是被清理掉（因为参数<code>--rm</code>）。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run --rm --name postgres <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -e <span class="nv">POSTGRES_PASSWORD</span><span class="o">=</span>lineage_ref <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -e <span class="nv">POSTGRES_USER</span><span class="o">=</span>lineage_ref <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -e <span class="nv">POSTGRES_DB</span><span class="o">=</span>warehouse -d <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -p 5432:5432 postgres
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后我们可以使用 Postgres CLI 或 GUI 客户端来验证它。</p>
<blockquote>
<p>提示：可以用 VS Code 插件：<a href="https://marketplace.visualstudio.com/items?itemName=mtxr.sqltools" target="_blank" rel="noopener noreferrer">SQL TOOLS</a> 快速以 GUI 方式连接到数据库（支持 MariaDB、Postgres 、Cassandra 等）</p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=mtxr.sqltools" target="_blank" rel="noopener noreferrer">https://marketplace.visualstudio.com/items?itemName=mtxr.sqltools</a></p>
</blockquote>
<h3 id="dataops-工具链部署" class="headerLink">
    <a href="#dataops-%e5%b7%a5%e5%85%b7%e9%93%be%e9%83%a8%e7%bd%b2" class="header-mark"></a>3.2 DataOps 工具链部署</h3><p>然后，安装有机结合了 Singler 和 dbt 的 Meltano。</p>
<p>Meltano 帮助我们管理 ETL 工具（作为插件）及其所有配置和 pipeline。 这些元信息位于 meltano 配置及其系统数据库（https://docs.meltano.com/concepts/project#system-database）中，其中配置是基于文件的（可以使用 GitOps 管理），它的默认系统数据库是 SQLite。</p>
<h4 id="安装-meltano" class="headerLink">
    <a href="#%e5%ae%89%e8%a3%85-meltano" class="header-mark"></a>3.2.1 安装 Meltano</h4><p>使用 Meltano 的工作流是启动一个“meltano 项目”并开始将 E、L 和 T 添加到配置文件中。 项目的启动只需要一个 CLI 命令调用：<code>meltano init yourprojectname</code>，在那之前，可以先用 Python 的包管理器：pip 或者 Docker 镜像安装 Meltano：</p>
<ul>
<li>在 python 虚拟环境中使用 pip 安装 Meltano：</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkdir .venv
</span></span><span class="line"><span class="cl"><span class="c1"># example in a debian flavor Linux distro</span>
</span></span><span class="line"><span class="cl">sudo apt-get install python3-dev python3-pip python3-venv python3-wheel -y
</span></span><span class="line"><span class="cl">python3 -m venv .venv/meltano
</span></span><span class="line"><span class="cl"><span class="nb">source</span> .venv/meltano/bin/activate
</span></span><span class="line"><span class="cl">python3 -m pip install wheel
</span></span><span class="line"><span class="cl">python3 -m pip install meltano
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># init a project</span>
</span></span><span class="line"><span class="cl">mkdir meltano_projects <span class="o">&amp;&amp;</span> <span class="nb">cd</span> meltano_projects
</span></span><span class="line"><span class="cl"><span class="c1"># replace &lt;yourprojectname&gt; with your own one</span>
</span></span><span class="line"><span class="cl">touch .env
</span></span><span class="line"><span class="cl">meltano init &lt;yourprojectname&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>或者用容器安装 Meltano：</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker pull meltano/meltano:latest
</span></span><span class="line"><span class="cl">docker run --rm meltano/meltano --version
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># init a project</span>
</span></span><span class="line"><span class="cl">mkdir meltano_projects <span class="o">&amp;&amp;</span> <span class="nb">cd</span> meltano_projects
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># replace &lt;yourprojectname&gt; with your own one</span>
</span></span><span class="line"><span class="cl">touch .env
</span></span><span class="line"><span class="cl">docker run --rm -v <span class="s2">&#34;</span><span class="k">$(</span><span class="nb">pwd</span><span class="k">)</span><span class="s2">&#34;</span>:/projects <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>             -w /projects --env-file .env <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>             meltano/meltano init &lt;yourprojectname&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p>除了 <code>meltano init</code>，还有一些其他命令，例如 <code>meltano etl</code> 表示 ETL 的执行，还有 <code>meltano invoke &lt;plugin&gt;</code> 来调用插件命令，详细可以参考它的速查表（https://docs.meltano.com/reference/command-line-interface）。</p>
<h4 id="meltano-gui-界面" class="headerLink">
    <a href="#meltano-gui-%e7%95%8c%e9%9d%a2" class="header-mark"></a>3.2.2 Meltano GUI 界面</h4><p>Meltano 还带有一个基于 Web 的 UI，执行 <code>ui</code> 子命令就是启动它：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">meltano ui
</span></span></code></pre></td></tr></table>
</div>
</div><p>默认他会跑在 http://localhost:5000 上。</p>
<p>对于 Docker 运行的情况，只需要在暴露 5000 端口的情况下运行容器即可，由于容器的默认命令已经是 <code>meltano ui</code>，所以 <code>run</code> 的命令只需：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run -v <span class="s2">&#34;</span><span class="k">$(</span><span class="nb">pwd</span><span class="k">)</span><span class="s2">&#34;</span>:/project <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>             -w /project <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>             -p 5000:5000 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>             meltano/meltano
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="meltano-项目示例" class="headerLink">
    <a href="#meltano-%e9%a1%b9%e7%9b%ae%e7%a4%ba%e4%be%8b" class="header-mark"></a>3.2.3 Meltano 项目示例</h4><p>写到这里的时候，我注意到 <a href="https://github.com/pnadolny13" target="_blank" rel="noopener noreferrer">Pat Nadolny</a> 创建了很好的示例项目在 <a href="https://github.com/pnadolny13/meltano_example_implementations/tree/main/meltano_projects/singer_dbt_jaffle" target="_blank" rel="noopener noreferrer">https://github.com/pnadolny13/meltano_example_implementations/tree/main/meltano_projects/singer_dbt_jaffle</a>，它利用 dbt 的 Meltano 示例数据集，采用 Airflow 编排 ETL 任务（https://github.com/pnadolny13/meltano_example_implementations/tree/main/meltano_projects/dbt_orchestration，还有利用 Superset 的例子（https://github.com/pnadolny13/meltano_example_implementations/tree/main/meltano_projects/jaffle_superset）。</p>
<p>这里，我就不重复造轮子了，直接利用他的例子吧。</p>
<p>咱们可以参照 <a href="https://github.com/pnadolny13/meltano_example_implementations/tree/main/meltano_projects/singer_dbt_jaffle" target="_blank" rel="noopener noreferrer">https://github.com/pnadolny13/meltano_example_implementations/tree/main/meltano_projects/singer_dbt_jaffle</a>，运行这样的数据管道（pipeline）：</p>
<ul>
<li><a href="https://hub.meltano.com/taps/csv" target="_blank" rel="noopener noreferrer">tap-CSV</a>(Singer)，从 CSV 文件中提取数据</li>
<li><a href="https://hub.meltano.com/targets/postgres" target="_blank" rel="noopener noreferrer">target-postgres</a>(Singer)，将数据加载到 Postgres</li>
<li><a href="https://hub.meltano.com/transformers/dbt" target="_blank" rel="noopener noreferrer">dbt</a>，将数据转换为聚合表或视图</li>
</ul>
<blockquote>
<p>注意，前边我们已经启动了 postgres，那一步可以跳过。</p>
</blockquote>
<p>操作过程是：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone https://github.com/pnadolny13/meltano_example_implementations.git
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> meltano_example_implementations/meltano_projects/singer_dbt_jaffle/
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">meltano install
</span></span><span class="line"><span class="cl">touch .env
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="nv">PG_PASSWORD</span><span class="o">=</span><span class="s2">&#34;lineage_ref&#34;</span> &gt;&gt; .env
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="nv">PG_USERNAME</span><span class="o">=</span><span class="s2">&#34;lineage_ref&#34;</span> &gt;&gt; .env
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Extract and Load(with Singer)</span>
</span></span><span class="line"><span class="cl">meltano run tap-csv target-postgres
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Trasnform(with dbt)</span>
</span></span><span class="line"><span class="cl">meltano run dbt:run
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Generate dbt docs</span>
</span></span><span class="line"><span class="cl">meltano invoke dbt docs generate
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Serve generated dbt docs</span>
</span></span><span class="line"><span class="cl">meltano invoke dbt docs to serve
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Then visit http://localhost:8080</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>现在，我们可以连接到 Postgres 来查看 加载和转换后的数据预览如下，截图来自 VS Code 的 SQLTool：</p>
<p>Payments 表里长这样子：</p>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/167540494-01e3dbd2-6ab1-41d2-998e-3b79f755bdc7.png" title="https://user-images.githubusercontent.com/1651790/167540494-01e3dbd2-6ab1-41d2-998e-3b79f755bdc7.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/167540494-01e3dbd2-6ab1-41d2-998e-3b79f755bdc7.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/167540494-01e3dbd2-6ab1-41d2-998e-3b79f755bdc7.png"
            srcset="https://user-images.githubusercontent.com/1651790/167540494-01e3dbd2-6ab1-41d2-998e-3b79f755bdc7.png, https://user-images.githubusercontent.com/1651790/167540494-01e3dbd2-6ab1-41d2-998e-3b79f755bdc7.png 1.5x, https://user-images.githubusercontent.com/1651790/167540494-01e3dbd2-6ab1-41d2-998e-3b79f755bdc7.png 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/167540494-01e3dbd2-6ab1-41d2-998e-3b79f755bdc7.png">
    </a></figure></p>
<h3 id="搭一个-bi-dashboard-系统" class="headerLink">
    <a href="#%e6%90%ad%e4%b8%80%e4%b8%aa-bi-dashboard-%e7%b3%bb%e7%bb%9f" class="header-mark"></a>3.3 搭一个 BI Dashboard 系统</h3><p>现在，我们有了数据仓库中的一些数据，用 ETL 工具链将不同的数据源导了进去，接下来可以试着用一下这些数据了。</p>
<p>像仪表大盘 Dashbaord 这样的 BI 工具能帮助我们从数据中获得有用的洞察，使用 Apache Superset，可以很容易地创建和管理基于这些数据源的 Dashboard 和各式各样的图表。</p>
<p>本章的重点不在于 Apache Superset 本身，所以，咱们还是复用 <a href="https://github.com/pnadolny13" target="_blank" rel="noopener noreferrer">Pat Nadolny</a> 在的例子 <a href="https://github.com/pnadolny13/meltano_example_implementations/tree/main/meltano_projects/jaffle_superset" target="_blank" rel="noopener noreferrer">https://github.com/pnadolny13/meltano_example_implementations/tree/main/meltano_projects/jaffle_superset</a>。</p>
<h4 id="bootstrap-meltano-和-superset" class="headerLink">
    <a href="#bootstrap-meltano-%e5%92%8c-superset" class="header-mark"></a>3.3.1 Bootstrap Meltano 和 Superset</h4><p>创建一个安装了 Meltano 的 python venv：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkdir .venv
</span></span><span class="line"><span class="cl">python3 -m venv .venv/meltano
</span></span><span class="line"><span class="cl"><span class="nb">source</span> .venv/meltano/bin/activate
</span></span><span class="line"><span class="cl">python3 -m pip install wheel
</span></span><span class="line"><span class="cl">python3 -m pip install meltano
</span></span></code></pre></td></tr></table>
</div>
</div><p>参考 Pat 的 Guide（https://github.com/pnadolny13/meltano_example_implementations/tree/main/meltano_projects/jaffle_superset），稍微做一些修改：</p>
<ul>
<li>克隆 repo，进入 <code>jaffle_superset</code> 项目</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone https://github.com/pnadolny13/meltano_example_implementations.git
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> meltano_example_implementations/meltano_projects/jaffle_superset/
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>修改meltano配置文件，让 Superset 连接到我们创建的 Postgres：</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">vim meltano_projects/jaffle_superset/meltano.yml
</span></span></code></pre></td></tr></table>
</div>
</div><p>这里，我将主机名更改为“10.1.1.111”，这是我当前主机的 IP，而如果读者在 Windows 或者 macOS 机器的 Docker Desktop 上跑的话，这里不要修改，否则要参考我去改成自己实际的地址：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl"><span class="gd">--- a/meltano_projects/jaffle_superset/meltano.yml
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+++ b/meltano_projects/jaffle_superset/meltano.yml
</span></span></span><span class="line"><span class="cl"><span class="gi"></span><span class="gu">@@ -71,7 +71,7 @@ plugins:
</span></span></span><span class="line"><span class="cl"><span class="gu"></span>               A list of database driver dependencies can be found here https://superset.apache.org/docs/databases/installing-database-drivers
</span></span><span class="line"><span class="cl">     config:
</span></span><span class="line"><span class="cl">       database_name: my_postgres
</span></span><span class="line"><span class="cl"><span class="gd">-      sqlalchemy_uri: postgresql+psycopg2://${PG_USERNAME}:${PG_PASSWORD}@host.docker.internal:${PG_PORT}/${PG_DATABASE}
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+      sqlalchemy_uri: postgresql+psycopg2://${PG_USERNAME}:${PG_PASSWORD}@10.1.1.168:${PG_PORT}/${PG_DATABASE}
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>       tables:
</span></span><span class="line"><span class="cl">       - model.my_meltano_project.customers
</span></span><span class="line"><span class="cl">       - model.my_meltano_project.orders
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>添加 Postgres 登录的信息到  <code>.env</code> 文件：</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">echo</span> <span class="nv">PG_USERNAME</span><span class="o">=</span>lineage_ref &gt;&gt; .env
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="nv">PG_PASSWORD</span><span class="o">=</span>lineage_ref &gt;&gt; .env
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>安装 Meltano 项目，运行 ETL 任务</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">meltano install
</span></span><span class="line"><span class="cl">meltano run tap-csv target-postgres dbt:run
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>调用、启动 superset，这里注意 <code>ui</code> 不是 meltano 的内部命令，而是一个配置进去的自定义行为（user-defined action）</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">meltano invoke superset:ui
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>在另一个命令行终端，执行另一个自定义的命令 <code>load_datasources</code></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">meltano invoke superset:load_datasources
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>通过浏览器访问 http://localhost:8088/ 就是Superset 的图形界面了：</li>
</ul>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168570300-186b56a5-58e8-4ff1-bc06-89fd77d74166.png" title="https://user-images.githubusercontent.com/1651790/168570300-186b56a5-58e8-4ff1-bc06-89fd77d74166.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168570300-186b56a5-58e8-4ff1-bc06-89fd77d74166.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/168570300-186b56a5-58e8-4ff1-bc06-89fd77d74166.png"
            srcset="https://user-images.githubusercontent.com/1651790/168570300-186b56a5-58e8-4ff1-bc06-89fd77d74166.png, https://user-images.githubusercontent.com/1651790/168570300-186b56a5-58e8-4ff1-bc06-89fd77d74166.png 1.5x, https://user-images.githubusercontent.com/1651790/168570300-186b56a5-58e8-4ff1-bc06-89fd77d74166.png 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/168570300-186b56a5-58e8-4ff1-bc06-89fd77d74166.png">
    </a></figure></p>
<h4 id="创建一个-dashboard" class="headerLink">
    <a href="#%e5%88%9b%e5%bb%ba%e4%b8%80%e4%b8%aa-dashboard" class="header-mark"></a>3.3.2 创建一个 Dashboard</h4><p>试一下在这个 Meltano 项目中定义的 Postgres 中的 ETL 数据上创建一个 Dashboard 吧</p>
<ul>
<li>点击 <code>+ DASHBOARD</code>，填写仪表盘名称，然后点击 <code>SAVE</code>，然后点击 <code>+ CREATE A NEW CHART</code></li>
</ul>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168570363-c6b4f929-2aad-4f03-8e3e-b1b61f560ce5.png" title="https://user-images.githubusercontent.com/1651790/168570363-c6b4f929-2aad-4f03-8e3e-b1b61f560ce5.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168570363-c6b4f929-2aad-4f03-8e3e-b1b61f560ce5.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/168570363-c6b4f929-2aad-4f03-8e3e-b1b61f560ce5.png"
            srcset="https://user-images.githubusercontent.com/1651790/168570363-c6b4f929-2aad-4f03-8e3e-b1b61f560ce5.png, https://user-images.githubusercontent.com/1651790/168570363-c6b4f929-2aad-4f03-8e3e-b1b61f560ce5.png 1.5x, https://user-images.githubusercontent.com/1651790/168570363-c6b4f929-2aad-4f03-8e3e-b1b61f560ce5.png 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/168570363-c6b4f929-2aad-4f03-8e3e-b1b61f560ce5.png">
    </a></figure></p>
<ul>
<li>在新图表（Create a new chart）视图中，我们应该选择图表类型和数据集。 在这里，我选择了 <code>orders</code> 表作为数据源和 <code>Pie Chart</code> 图表类型：</li>
</ul>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168570927-9559a2a1-fed7-43be-9f6a-f6fb3c263830.png" title="https://user-images.githubusercontent.com/1651790/168570927-9559a2a1-fed7-43be-9f6a-f6fb3c263830.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168570927-9559a2a1-fed7-43be-9f6a-f6fb3c263830.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/168570927-9559a2a1-fed7-43be-9f6a-f6fb3c263830.png"
            srcset="https://user-images.githubusercontent.com/1651790/168570927-9559a2a1-fed7-43be-9f6a-f6fb3c263830.png, https://user-images.githubusercontent.com/1651790/168570927-9559a2a1-fed7-43be-9f6a-f6fb3c263830.png 1.5x, https://user-images.githubusercontent.com/1651790/168570927-9559a2a1-fed7-43be-9f6a-f6fb3c263830.png 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/168570927-9559a2a1-fed7-43be-9f6a-f6fb3c263830.png">
    </a></figure></p>
<ul>
<li>点击“CREATE NEW CHART”后，我们在图表定义视图中，我选择了“status”的“Query”为“DIMENSIONS”，“COUNT(amount)”为“METRIC”。 至此，咱们就可以看到每个订单状态分布的饼图了。</li>
</ul>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168571130-a65ba88e-1ebe-4699-8783-08e5ecf54a0c.png" title="https://user-images.githubusercontent.com/1651790/168571130-a65ba88e-1ebe-4699-8783-08e5ecf54a0c.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168571130-a65ba88e-1ebe-4699-8783-08e5ecf54a0c.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/168571130-a65ba88e-1ebe-4699-8783-08e5ecf54a0c.png"
            srcset="https://user-images.githubusercontent.com/1651790/168571130-a65ba88e-1ebe-4699-8783-08e5ecf54a0c.png, https://user-images.githubusercontent.com/1651790/168571130-a65ba88e-1ebe-4699-8783-08e5ecf54a0c.png 1.5x, https://user-images.githubusercontent.com/1651790/168571130-a65ba88e-1ebe-4699-8783-08e5ecf54a0c.png 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/168571130-a65ba88e-1ebe-4699-8783-08e5ecf54a0c.png">
    </a></figure></p>
<ul>
<li>点击 <code>SAVE</code> ，它会询问应该将此图表添加到哪个 Dashboard，选择后，单击 <code>SAVE &amp; GO TO DASHBOARD</code>。</li>
</ul>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168571301-8ae69983-eda8-4e75-99cf-6904f583fc7c.png" title="https://user-images.githubusercontent.com/1651790/168571301-8ae69983-eda8-4e75-99cf-6904f583fc7c.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168571301-8ae69983-eda8-4e75-99cf-6904f583fc7c.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/168571301-8ae69983-eda8-4e75-99cf-6904f583fc7c.png"
            srcset="https://user-images.githubusercontent.com/1651790/168571301-8ae69983-eda8-4e75-99cf-6904f583fc7c.png, https://user-images.githubusercontent.com/1651790/168571301-8ae69983-eda8-4e75-99cf-6904f583fc7c.png 1.5x, https://user-images.githubusercontent.com/1651790/168571301-8ae69983-eda8-4e75-99cf-6904f583fc7c.png 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/168571301-8ae69983-eda8-4e75-99cf-6904f583fc7c.png">
    </a></figure></p>
<ul>
<li>然后，在 Dashboard 中，我们可以看到那里的所有图表。 您可以看到我还添加了另一个图表来显示客户订单数量分布：</li>
</ul>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168571878-30a77057-1f66-448a-9bbd-0dedcee24cc9.png" title="https://user-images.githubusercontent.com/1651790/168571878-30a77057-1f66-448a-9bbd-0dedcee24cc9.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168571878-30a77057-1f66-448a-9bbd-0dedcee24cc9.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/168571878-30a77057-1f66-448a-9bbd-0dedcee24cc9.png"
            srcset="https://user-images.githubusercontent.com/1651790/168571878-30a77057-1f66-448a-9bbd-0dedcee24cc9.png, https://user-images.githubusercontent.com/1651790/168571878-30a77057-1f66-448a-9bbd-0dedcee24cc9.png 1.5x, https://user-images.githubusercontent.com/1651790/168571878-30a77057-1f66-448a-9bbd-0dedcee24cc9.png 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/168571878-30a77057-1f66-448a-9bbd-0dedcee24cc9.png">
    </a></figure></p>
<ul>
<li>点  <code>···</code> 的话，还能看到刷新率设置、下载渲染图等其他的功能。</li>
</ul>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168573874-b5d57919-2866-4b3c-a4e5-55b6e6ef342e.png" title="https://user-images.githubusercontent.com/1651790/168573874-b5d57919-2866-4b3c-a4e5-55b6e6ef342e.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168573874-b5d57919-2866-4b3c-a4e5-55b6e6ef342e.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/168573874-b5d57919-2866-4b3c-a4e5-55b6e6ef342e.png"
            srcset="https://user-images.githubusercontent.com/1651790/168573874-b5d57919-2866-4b3c-a4e5-55b6e6ef342e.png, https://user-images.githubusercontent.com/1651790/168573874-b5d57919-2866-4b3c-a4e5-55b6e6ef342e.png 1.5x, https://user-images.githubusercontent.com/1651790/168573874-b5d57919-2866-4b3c-a4e5-55b6e6ef342e.png 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/168573874-b5d57919-2866-4b3c-a4e5-55b6e6ef342e.png">
    </a></figure></p>
<p>目前，我们有一个简单但典型的 homelab 数据技术栈了，并且所有东西都是开源的！</p>
<p>想象一下，我们在 CSV 中有 100 个数据集，在数据仓库中有 200 个表，并且有几个数据工程师在运行不同的项目，这些项目使用、生成不同的应用与服务、Dashbaord 和数据库。 当有人想要查找、发现或者修改其中的一些表、数据集、Dashbaord 和管道，在沟通和工程方面可能都是非常不好管理的。</p>
<p>如前边提到的，我们需要这个示例项目的主要部分：元数据发现系统。</p>
<h3 id="元数据发现系统" class="headerLink">
    <a href="#%e5%85%83%e6%95%b0%e6%8d%ae%e5%8f%91%e7%8e%b0%e7%b3%bb%e7%bb%9f" class="header-mark"></a>3.4 元数据发现系统</h3><p>然后，我们部署一个带有 NebulaGraph 和 Elasticsearch 的 Amundsen。</p>
<blockquote>
<p>注：目前【NebulaGraph 作为 Amundsen 后端的 PR】（https://github.com/amundsen-io/amundsen/pull/1817）尚未合并，我还在与 Amundsen 团队合作（https://github.com/amundsen-io/rfcs/pull/48）来实现它。</p>
</blockquote>
<p>有了 Amundsen，我们可以在一个地方发现和管理整个数据栈中的所有元数据。</p>
<p>Amundsen 主要有两个部分组成：</p>
<ul>
<li>元数据导入 Metadata Ingestion
<ul>
<li><a href="https://www.amundsen.io/amundsen/databuilder/" target="_blank" rel="noopener noreferrer">Amundsen Data builder</a></li>
</ul>
</li>
<li>元数据目录服务 Metadata Catalog
<ul>
<li><a href="https://www.amundsen.io/amundsen/frontend/" target="_blank" rel="noopener noreferrer">Amundsen Frontend service</a></li>
<li><a href="https://www.amundsen.io/amundsen/metadata/" target="_blank" rel="noopener noreferrer">Amundsen Metadata service</a></li>
<li><a href="https://www.amundsen.io/amundsen/search/" target="_blank" rel="noopener noreferrer">Amundsen Search service</a></li>
</ul>
</li>
</ul>
<p>它的工作原理是：利用 <code>Data builder</code> 从不同来源提取元数据，并将元数据持久化到 <code>Meta service</code> 的后端存储和 <code>Search service</code> 的后端存储中，用户从 <code>Froent service</code> 或通过 <code>Meta Service</code> 的API。</p>
<h4 id="部署-amundsen" class="headerLink">
    <a href="#%e9%83%a8%e7%bd%b2-amundsen" class="header-mark"></a>3.4.1 部署 Amundsen</h4><h5 id="元数据服务-metadata-service" class="headerLink">
    <a href="#%e5%85%83%e6%95%b0%e6%8d%ae%e6%9c%8d%e5%8a%a1-metadata-service" class="header-mark"></a>3.4.1.1 元数据服务 Metadata service</h5><p>我们用 docker-compose 文件部署一个 Amundsen 集群。 由于 NebulaGraph 后端支持尚未合并，还不能用官方的代码，先用我自己的分叉版本。</p>
<p>首先，让我们克隆包含所有子模块的 repo：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone -b amundsen_nebula_graph --recursive git@github.com:wey-gu/amundsen.git
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> amundsen
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后，启动所有目录服务（catalog services）及其后端存储：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker-compose -f docker-amundsen-nebula.yml up
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>注：可以添加 <code>-d</code> 来让容器在后台运行：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker-compose -f docker-amundsen-nebula.yml up -d
</span></span></code></pre></td></tr></table>
</div>
</div><p>关闭后台运行的集群</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker-compose -f docker-amundsen-nebula.yml stop
</span></span></code></pre></td></tr></table>
</div>
</div><p>删除后台运行的集群</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker-compose -f docker-amundsen-nebula.yml down
</span></span></code></pre></td></tr></table>
</div>
</div></blockquote>
<p>由于这个 docker-compose 文件是供开发人员试玩、调试 Amundsen 用的，而不是给生产部署准备的，它在启动的时候会从代码库构建镜像，第一次跑的时候启动会慢一些。</p>
<p>部署好了之后，我们使用 Data builder 将一些示例、虚构的数据加载存储里。</p>
<h5 id="抓取元数据-data-builder" class="headerLink">
    <a href="#%e6%8a%93%e5%8f%96%e5%85%83%e6%95%b0%e6%8d%ae-data-builder" class="header-mark"></a>3.4.1.2 抓取元数据 Data builder</h5><p>Amundsen Data builder 就像 Meltano 系统一样，只不过是用在元数据的上的 ETL ，它把元数据加载到“Meta service”和“Search service”的后端存储：NebulaGraph 和 Elasticsearch 里。 这里的 Data builder 只是一个 python 模块，所有的元数据 ETL 作业可以作为脚本运行，也可以用 Apache Airflow 等 DAG 平台进行编排。</p>
<p>安装 <a href="https://github.com/amundsen-io/amundsen/tree/main/databuilder" target="_blank" rel="noopener noreferrer">Amundsen Data builder</a>：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> databuilder
</span></span><span class="line"><span class="cl">python3 -m venv .venv
</span></span><span class="line"><span class="cl"><span class="nb">source</span> .venv/bin/activate
</span></span><span class="line"><span class="cl">python3 -m pip install wheel
</span></span><span class="line"><span class="cl">python3 -m pip install -r requirements.txt
</span></span><span class="line"><span class="cl">python3 setup.py install
</span></span></code></pre></td></tr></table>
</div>
</div><p>调用这个示例数据构建器 ETL 脚本来把示例的虚拟数据导进去。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">python3 example/scripts/sample_data_loader_nebula.py
</span></span></code></pre></td></tr></table>
</div>
</div><h5 id="验证一下-amundsen" class="headerLink">
    <a href="#%e9%aa%8c%e8%af%81%e4%b8%80%e4%b8%8b-amundsen" class="header-mark"></a>3.4.1.3 验证一下 Amundsen</h5><p>在访问 Amundsen 之前，我们需要创建一个测试用户：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># run a container with curl attached to amundsenfrontend</span>
</span></span><span class="line"><span class="cl">docker run -it --rm --net container:amundsenfrontend nicolaka/netshoot
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Create a user with id test_user_id</span>
</span></span><span class="line"><span class="cl">curl -X PUT -v http://amundsenmetadata:5002/user <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -H <span class="s2">&#34;Content-Type: application/json&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --data <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="s1">&#39;{&#34;user_id&#34;:&#34;test_user_id&#34;,&#34;first_name&#34;:&#34;test&#34;,&#34;last_name&#34;:&#34;user&#34;, &#34;email&#34;:&#34;test_user_id@mail.com&#34;}&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">exit</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后我们可以在 <a href="http://localhost:5000/" target="_blank" rel="noopener noreferrer">http://localhost:5000</a> 查看 UI 并尝试搜索 <code>test</code>，它应该会返回一些结果。</p>
<p><figure><a class="lightgallery" href="https://github.com/amundsen-io/amundsen/raw/master/docs/img/search-page.png" title="https://github.com/amundsen-io/amundsen/raw/master/docs/img/search-page.png" data-thumbnail="https://github.com/amundsen-io/amundsen/raw/master/docs/img/search-page.png">
        <img
            
            loading="lazy"
            src="https://github.com/amundsen-io/amundsen/raw/master/docs/img/search-page.png"
            srcset="https://github.com/amundsen-io/amundsen/raw/master/docs/img/search-page.png, https://github.com/amundsen-io/amundsen/raw/master/docs/img/search-page.png 1.5x, https://github.com/amundsen-io/amundsen/raw/master/docs/img/search-page.png 2x"
            sizes="auto"
            alt="https://github.com/amundsen-io/amundsen/raw/master/docs/img/search-page.png">
    </a></figure></p>
<p>然后，可以单击并浏览在“sample_data_loader_nebula.py”期间加载到 Amundsen 的那些示例元数据。</p>
<p>此外，我们还可以通过 NebulaStudio(http://localhost:7001) 访问 NebulaGraph 里的这些数据。</p>
<blockquote>
<p>注意在 Nebula Studio 中，默认登录字段为：</p>
<ul>
<li>主机：<code>graphd:9669</code></li>
<li>用户：<code>root</code></li>
<li>密码：<code>nebula</code></li>
</ul>
</blockquote>
<p>下图显示了有关 Amundsen 组件的更多详细信息：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">       ┌────────────────────────┐ ┌────────────────────────────────────────┐
</span></span><span class="line"><span class="cl">       │ Frontend:5000          │ │ Metadata Sources                       │
</span></span><span class="line"><span class="cl">       ├────────────────────────┤ │ ┌────────┐ ┌─────────┐ ┌─────────────┐ │
</span></span><span class="line"><span class="cl">       │ Metaservice:5001       │ │ │        │ │         │ │             │ │
</span></span><span class="line"><span class="cl">       │ ┌──────────────┐       │ │ │ Foo DB │ │ Bar App │ │ X Dashboard │ │
</span></span><span class="line"><span class="cl">  ┌────┼─┤ Nebula Proxy │       │ │ │        │ │         │ │             │ │
</span></span><span class="line"><span class="cl">  │    │ └──────────────┘       │ │ │        │ │         │ │             │ │
</span></span><span class="line"><span class="cl">  │    ├────────────────────────┤ │ └────────┘ └─────┬───┘ └─────────────┘ │
</span></span><span class="line"><span class="cl">┌─┼────┤ Search searvice:5002   │ │                  │                     │
</span></span><span class="line"><span class="cl">│ │    └────────────────────────┘ └──────────────────┼─────────────────────┘
</span></span><span class="line"><span class="cl">│ │    ┌─────────────────────────────────────────────┼───────────────────────┐
</span></span><span class="line"><span class="cl">│ │    │                                             │                       │
</span></span><span class="line"><span class="cl">│ │    │ Databuilder     ┌───────────────────────────┘                       │
</span></span><span class="line"><span class="cl">│ │    │                 │                                                   │
</span></span><span class="line"><span class="cl">│ │    │ ┌───────────────▼────────────────┐ ┌──────────────────────────────┐ │
</span></span><span class="line"><span class="cl">│ │ ┌──┼─► Extractor of Sources           ├─► nebula_search_data_extractor │ │
</span></span><span class="line"><span class="cl">│ │ │  │ └───────────────┬────────────────┘ └──────────────┬───────────────┘ │
</span></span><span class="line"><span class="cl">│ │ │  │ ┌───────────────▼────────────────┐ ┌──────────────▼───────────────┐ │
</span></span><span class="line"><span class="cl">│ │ │  │ │ Loader filesystem_csv_nebula   │ │ Loader Elastic FS loader     │ │
</span></span><span class="line"><span class="cl">│ │ │  │ └───────────────┬────────────────┘ └──────────────┬───────────────┘ │
</span></span><span class="line"><span class="cl">│ │ │  │ ┌───────────────▼────────────────┐ ┌──────────────▼───────────────┐ │
</span></span><span class="line"><span class="cl">│ │ │  │ │ Publisher nebula_csv_publisher │ │ Publisher Elasticsearch      │ │
</span></span><span class="line"><span class="cl">│ │ │  │ └───────────────┬────────────────┘ └──────────────┬───────────────┘ │
</span></span><span class="line"><span class="cl">│ │ │  └─────────────────┼─────────────────────────────────┼─────────────────┘
</span></span><span class="line"><span class="cl">│ │ └────────────────┐   │                                 │
</span></span><span class="line"><span class="cl">│ │    ┌─────────────┼───►─────────────────────────┐ ┌─────▼─────┐
</span></span><span class="line"><span class="cl">│ │    │ Nebula Graph│   │                         │ │           │
</span></span><span class="line"><span class="cl">│ └────┼─────┬───────┴───┼───────────┐     ┌─────┐ │ │           │
</span></span><span class="line"><span class="cl">│      │     │           │           │     │MetaD│ │ │           │
</span></span><span class="line"><span class="cl">│      │ ┌───▼──┐    ┌───▼──┐    ┌───▼──┐  └─────┘ │ │           │
</span></span><span class="line"><span class="cl">│ ┌────┼─►GraphD│    │GraphD│    │GraphD│          │ │           │
</span></span><span class="line"><span class="cl">│ │    │ └──────┘    └──────┘    └──────┘  ┌─────┐ │ │           │
</span></span><span class="line"><span class="cl">│ │    │ :9669                             │MetaD│ │ │  Elastic  │
</span></span><span class="line"><span class="cl">│ │    │ ┌────────┐ ┌────────┐ ┌────────┐  └─────┘ │ │  Search   │
</span></span><span class="line"><span class="cl">│ │    │ │        │ │        │ │        │          │ │  Cluster  │
</span></span><span class="line"><span class="cl">│ │    │ │StorageD│ │StorageD│ │StorageD│  ┌─────┐ │ │  :9200    │
</span></span><span class="line"><span class="cl">│ │    │ │        │ │        │ │        │  │MetaD│ │ │           │
</span></span><span class="line"><span class="cl">│ │    │ └────────┘ └────────┘ └────────┘  └─────┘ │ │           │
</span></span><span class="line"><span class="cl">│ │    ├───────────────────────────────────────────┤ │           │
</span></span><span class="line"><span class="cl">│ └────┤ Nebula Studio:7001                        │ │           │
</span></span><span class="line"><span class="cl">│      └───────────────────────────────────────────┘ └─────▲─────┘
</span></span><span class="line"><span class="cl">└──────────────────────────────────────────────────────────┘
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="穿针引线元数据发现" class="headerLink">
    <a href="#%e7%a9%bf%e9%92%88%e5%bc%95%e7%ba%bf%e5%85%83%e6%95%b0%e6%8d%ae%e5%8f%91%e7%8e%b0" class="header-mark"></a>4 穿针引线：元数据发现</h2><p>设置好基本环境后，让我们把所有东西穿起来。还记得我们有 ELT 一些数据到 PostgreSQL 吗？</p>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/167540494-01e3dbd2-6ab1-41d2-998e-3b79f755bdc7.png" title="https://user-images.githubusercontent.com/1651790/167540494-01e3dbd2-6ab1-41d2-998e-3b79f755bdc7.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/167540494-01e3dbd2-6ab1-41d2-998e-3b79f755bdc7.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/167540494-01e3dbd2-6ab1-41d2-998e-3b79f755bdc7.png"
            srcset="https://user-images.githubusercontent.com/1651790/167540494-01e3dbd2-6ab1-41d2-998e-3b79f755bdc7.png, https://user-images.githubusercontent.com/1651790/167540494-01e3dbd2-6ab1-41d2-998e-3b79f755bdc7.png 1.5x, https://user-images.githubusercontent.com/1651790/167540494-01e3dbd2-6ab1-41d2-998e-3b79f755bdc7.png 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/167540494-01e3dbd2-6ab1-41d2-998e-3b79f755bdc7.png">
    </a></figure></p>
<p>那么，我们如何让 Amundsen 发现有关这些数据和 ETL 的元数据呢？</p>
<h3 id="提取-postgres-元数据" class="headerLink">
    <a href="#%e6%8f%90%e5%8f%96-postgres-%e5%85%83%e6%95%b0%e6%8d%ae" class="header-mark"></a>4.1 提取 Postgres 元数据</h3><p>我们从数据源开始：首先是 Postgres。</p>
<p>我们为 python3 安装 Postgres 客户端：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo apt-get install libpq-dev
</span></span><span class="line"><span class="cl">pip3 install Psycopg2
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="执行-postgres-元数据-etl" class="headerLink">
    <a href="#%e6%89%a7%e8%a1%8c-postgres-%e5%85%83%e6%95%b0%e6%8d%ae-etl" class="header-mark"></a>4.1.1 执行 Postgres 元数据 ETL</h4><p>运行一个脚本来解析 Postgres 元数据：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">CREDENTIALS_POSTGRES_USER</span><span class="o">=</span>lineage_ref
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">CREDENTIALS_POSTGRES_PASSWORD</span><span class="o">=</span>lineage_ref
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">CREDENTIALS_POSTGRES_DATABASE</span><span class="o">=</span>warehouse
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">python3 example/scripts/sample_postgres_loader_nebula.py
</span></span></code></pre></td></tr></table>
</div>
</div><p>If you look into the code of the sample script for loading Postgres metadata to Nebula, the main lines are quite straightforward:</p>
<p>我们看看把 Postgres 元数据加载到 NebulaGraph 的示例脚本的代码，非常简单直接：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># part 1: PostgressMetadata --&gt; CSV --&gt; Nebula Graph</span>
</span></span><span class="line"><span class="cl"><span class="n">job</span> <span class="o">=</span> <span class="n">DefaultJob</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">      <span class="n">conf</span><span class="o">=</span><span class="n">job_config</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">task</span><span class="o">=</span><span class="n">DefaultTask</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">          <span class="n">extractor</span><span class="o">=</span><span class="n">PostgresMetadataExtractor</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">          <span class="n">loader</span><span class="o">=</span><span class="n">FsNebulaCSVLoader</span><span class="p">()),</span>
</span></span><span class="line"><span class="cl">      <span class="n">publisher</span><span class="o">=</span><span class="n">NebulaCsvPublisher</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="c1"># part 2: Metadata stored in NebulaGraph --&gt; Elasticsearch</span>
</span></span><span class="line"><span class="cl"><span class="n">extractor</span> <span class="o">=</span> <span class="n">NebulaSearchDataExtractor</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">task</span> <span class="o">=</span> <span class="n">SearchMetadatatoElasticasearchTask</span><span class="p">(</span><span class="n">extractor</span><span class="o">=</span><span class="n">extractor</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">job</span> <span class="o">=</span> <span class="n">DefaultJob</span><span class="p">(</span><span class="n">conf</span><span class="o">=</span><span class="n">job_config</span><span class="p">,</span> <span class="n">task</span><span class="o">=</span><span class="n">task</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>第一个工作路径是：<code>PostgressMetadata --&gt; CSV --&gt; Nebula Graph</code></p>
<ul>
<li><code>PostgresMetadataExtractor</code> 用于从 Postgres 中提取/提取元数据，可以参考文档（https://www.amundsen.io/amundsen/databuilder/#postgresmetadataextractor）。</li>
<li><code>FsNebulaCSVLoader</code> 用于将提取的数据中间放置为 CSV 文件</li>
<li><code>NebulaCsvPublisher</code> 用于将元数据以 CSV 的形式发布到 NebulaGraph</li>
</ul>
<p>第二个工作路径是：<code>Metadata stored in NebulaGraph --&gt; Elasticsearch</code></p>
<ul>
<li><code>NebulaSearchDataExtractor</code> 用于获取存储在 Nebula Graph 中的元数据</li>
<li><code>SearchMetadatatoElasticasearchTask</code> 用于使 Elasticsearch 对元数据进行索引。</li>
</ul>
<blockquote>
<p>请注意，在生产环境中，我们可以在脚本中或使用 Apache Airflow 等编排平台触发这些作业。</p>
</blockquote>
<h4 id="验证-postgres-中元数据的获取" class="headerLink">
    <a href="#%e9%aa%8c%e8%af%81-postgres-%e4%b8%ad%e5%85%83%e6%95%b0%e6%8d%ae%e7%9a%84%e8%8e%b7%e5%8f%96" class="header-mark"></a>4.1.2 验证 Postgres 中元数据的获取</h4><p>搜索<code>payments</code>或者直接访问http://localhost:5000/table_detail/warehouse/postgres/public/payments，你可以看到我们 Postgres 的元数据，比如：</p>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168475180-ebfaa188-268c-4fbe-a614-135d56d07e5d.png" title="https://user-images.githubusercontent.com/1651790/168475180-ebfaa188-268c-4fbe-a614-135d56d07e5d.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168475180-ebfaa188-268c-4fbe-a614-135d56d07e5d.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/168475180-ebfaa188-268c-4fbe-a614-135d56d07e5d.png"
            srcset="https://user-images.githubusercontent.com/1651790/168475180-ebfaa188-268c-4fbe-a614-135d56d07e5d.png, https://user-images.githubusercontent.com/1651790/168475180-ebfaa188-268c-4fbe-a614-135d56d07e5d.png 1.5x, https://user-images.githubusercontent.com/1651790/168475180-ebfaa188-268c-4fbe-a614-135d56d07e5d.png 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/168475180-ebfaa188-268c-4fbe-a614-135d56d07e5d.png">
    </a></figure></p>
<p>然后，像上面的屏幕截图一样，可以轻松完成元数据管理操作，如添加标签、所有者和描述。</p>
<h3 id="提取-dbt-元数据" class="headerLink">
    <a href="#%e6%8f%90%e5%8f%96-dbt-%e5%85%83%e6%95%b0%e6%8d%ae" class="header-mark"></a>4.2 提取 dbt 元数据</h3><p>实际上，我们也可以从 <a href="https://www.getdbt.com/" target="_blank" rel="noopener noreferrer">dbt</a> 本身提取元数据。</p>
<p>Amundsen <a href="https://www.amundsen.io/amundsen/databuilder/#dbtextractor" target="_blank" rel="noopener noreferrer">DbtExtractor</a> 会解析 <code>catalog.json</code> 或 <code>manifest.json</code> 文件以将元数据加载到 Amundsen 存储（NebulaGraph 和 Elasticsearch )。</p>
<p>在上面的 meltano 章节中，我们已经使用 <code>meltano invoke dbt docs generate</code> 生成了这个文件：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">14:23:15  Done.
</span></span><span class="line"><span class="cl">14:23:15  Building catalog
</span></span><span class="line"><span class="cl">14:23:15  Catalog written to /home/ubuntu/ref-data-lineage/meltano_example_implementations/meltano_projects/singer_dbt_jaffle/.meltano/transformers/dbt/target/catalog.json
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="dbt-元数据-etl-的执行" class="headerLink">
    <a href="#dbt-%e5%85%83%e6%95%b0%e6%8d%ae-etl-%e7%9a%84%e6%89%a7%e8%a1%8c" class="header-mark"></a>4.2.1 dbt 元数据 ETL 的执行</h4><p>我们试着解析示例 dbt 文件中的元数据吧：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ls -l example/sample_data/dbt/
</span></span><span class="line"><span class="cl">total <span class="m">184</span>
</span></span><span class="line"><span class="cl">-rw-rw-r-- <span class="m">1</span> w w   <span class="m">5320</span> May <span class="m">15</span> 07:17 catalog.json
</span></span><span class="line"><span class="cl">-rw-rw-r-- <span class="m">1</span> w w <span class="m">177163</span> May <span class="m">15</span> 07:17 manifest.json
</span></span></code></pre></td></tr></table>
</div>
</div><p>我写的这个示例的加载例子如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">python3 example/scripts/sample_dbt_loader_nebula.py
</span></span></code></pre></td></tr></table>
</div>
</div><p>其中主要的代码如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># part 1: Dbt manifest --&gt; CSV --&gt; Nebula Graph</span>
</span></span><span class="line"><span class="cl"><span class="n">job</span> <span class="o">=</span> <span class="n">DefaultJob</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">      <span class="n">conf</span><span class="o">=</span><span class="n">job_config</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">task</span><span class="o">=</span><span class="n">DefaultTask</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">          <span class="n">extractor</span><span class="o">=</span><span class="n">DbtExtractor</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">          <span class="n">loader</span><span class="o">=</span><span class="n">FsNebulaCSVLoader</span><span class="p">()),</span>
</span></span><span class="line"><span class="cl">      <span class="n">publisher</span><span class="o">=</span><span class="n">NebulaCsvPublisher</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="c1"># part 2: Metadata stored in NebulaGraph --&gt; Elasticsearch</span>
</span></span><span class="line"><span class="cl"><span class="n">extractor</span> <span class="o">=</span> <span class="n">NebulaSearchDataExtractor</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">task</span> <span class="o">=</span> <span class="n">SearchMetadatatoElasticasearchTask</span><span class="p">(</span><span class="n">extractor</span><span class="o">=</span><span class="n">extractor</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">job</span> <span class="o">=</span> <span class="n">DefaultJob</span><span class="p">(</span><span class="n">conf</span><span class="o">=</span><span class="n">job_config</span><span class="p">,</span> <span class="n">task</span><span class="o">=</span><span class="n">task</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>它和 Postgres 元数据 ETL 的唯一区别是 <code>extractor=DbtExtractor()</code>，它带有以下配置以获取有关 dbt 项目的以下信息：</p>
<ul>
<li>数据库名称</li>
<li>目录_json</li>
<li>manifest_json</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">job_config</span> <span class="o">=</span> <span class="n">ConfigFactory</span><span class="o">.</span><span class="n">from_dict</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;extractor.dbt.database_name&#39;</span><span class="p">:</span> <span class="n">database_name</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;extractor.dbt.catalog_json&#39;</span><span class="p">:</span> <span class="n">catalog_file_loc</span><span class="p">,</span>  <span class="c1"># File</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;extractor.dbt.manifest_json&#39;</span><span class="p">:</span> <span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">manifest_data</span><span class="p">),</span>  <span class="c1"># JSON Dumped objecy</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;extractor.dbt.source_url&#39;</span><span class="p">:</span> <span class="n">source_url</span><span class="p">})</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="验证-dbt-抓取结果" class="headerLink">
    <a href="#%e9%aa%8c%e8%af%81-dbt-%e6%8a%93%e5%8f%96%e7%bb%93%e6%9e%9c" class="header-mark"></a>4.2.2 验证 dbt 抓取结果</h4><p>搜索 <code>dbt_demo</code> 或者直接访问 http://localhost:5000/table_detail/dbt_demo/snowflake/public/raw_inventory_value，可以看到</p>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168479864-2f73ea73-265f-4cd2-999f-e7effbaf3ec1.png" title="https://user-images.githubusercontent.com/1651790/168479864-2f73ea73-265f-4cd2-999f-e7effbaf3ec1.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168479864-2f73ea73-265f-4cd2-999f-e7effbaf3ec1.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/168479864-2f73ea73-265f-4cd2-999f-e7effbaf3ec1.png"
            srcset="https://user-images.githubusercontent.com/1651790/168479864-2f73ea73-265f-4cd2-999f-e7effbaf3ec1.png, https://user-images.githubusercontent.com/1651790/168479864-2f73ea73-265f-4cd2-999f-e7effbaf3ec1.png 1.5x, https://user-images.githubusercontent.com/1651790/168479864-2f73ea73-265f-4cd2-999f-e7effbaf3ec1.png 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/168479864-2f73ea73-265f-4cd2-999f-e7effbaf3ec1.png">
    </a></figure></p>
<blockquote>
<p>小提示：我们可以选择启用 DEBUG log 级别去看已发送到 Elasticsearch 和 NebulaGraph 的内容。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl"><span class="gd">- logging.basicConfig(level=logging.INFO)
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+ logging.basicConfig(level=logging.DEBUG)
</span></span></span></code></pre></td></tr></table>
</div>
</div></blockquote>
<p>或者，在 NebulaStudio 中探索导入的数据：</p>
<p>首先，点击 “Start with Vertices”，填写顶点 vid：<code>snowflake://dbt_demo.public/fact_warehouse_inventory</code></p>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168480047-26c28cde-5df8-40af-8da4-6ab0203094e2.png" title="https://user-images.githubusercontent.com/1651790/168480047-26c28cde-5df8-40af-8da4-6ab0203094e2.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168480047-26c28cde-5df8-40af-8da4-6ab0203094e2.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/168480047-26c28cde-5df8-40af-8da4-6ab0203094e2.png"
            srcset="https://user-images.githubusercontent.com/1651790/168480047-26c28cde-5df8-40af-8da4-6ab0203094e2.png, https://user-images.githubusercontent.com/1651790/168480047-26c28cde-5df8-40af-8da4-6ab0203094e2.png 1.5x, https://user-images.githubusercontent.com/1651790/168480047-26c28cde-5df8-40af-8da4-6ab0203094e2.png 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/168480047-26c28cde-5df8-40af-8da4-6ab0203094e2.png">
    </a></figure></p>
<p>然后，我们可以看到顶点显示为粉红色的点。 让我们修改 <code>Expand</code> / ”拓展“选项：</p>
<ul>
<li>方向：双向</li>
<li>步数：单向、三步</li>
</ul>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168480101-7b7b5824-06d9-4155-87c9-798db0dc7612.png" title="https://user-images.githubusercontent.com/1651790/168480101-7b7b5824-06d9-4155-87c9-798db0dc7612.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168480101-7b7b5824-06d9-4155-87c9-798db0dc7612.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/168480101-7b7b5824-06d9-4155-87c9-798db0dc7612.png"
            srcset="https://user-images.githubusercontent.com/1651790/168480101-7b7b5824-06d9-4155-87c9-798db0dc7612.png, https://user-images.githubusercontent.com/1651790/168480101-7b7b5824-06d9-4155-87c9-798db0dc7612.png 1.5x, https://user-images.githubusercontent.com/1651790/168480101-7b7b5824-06d9-4155-87c9-798db0dc7612.png 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/168480101-7b7b5824-06d9-4155-87c9-798db0dc7612.png">
    </a></figure></p>
<p>并双击顶点（点），它将双向拓展 3 步：</p>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168480280-1dc88d1b-1f1e-48fd-9997-972965522ef5.png" title="https://user-images.githubusercontent.com/1651790/168480280-1dc88d1b-1f1e-48fd-9997-972965522ef5.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168480280-1dc88d1b-1f1e-48fd-9997-972965522ef5.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/168480280-1dc88d1b-1f1e-48fd-9997-972965522ef5.png"
            srcset="https://user-images.githubusercontent.com/1651790/168480280-1dc88d1b-1f1e-48fd-9997-972965522ef5.png, https://user-images.githubusercontent.com/1651790/168480280-1dc88d1b-1f1e-48fd-9997-972965522ef5.png 1.5x, https://user-images.githubusercontent.com/1651790/168480280-1dc88d1b-1f1e-48fd-9997-972965522ef5.png 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/168480280-1dc88d1b-1f1e-48fd-9997-972965522ef5.png">
    </a></figure></p>
<p>从上边这个截图里我们可以发现，在可视化之后的图数据库中，这些元数据可以很容易被查看、分析，并从中获得洞察。</p>
<blockquote>
<p>小贴士，您可以点击 👁 图标选择一些要显示的属性，我在截图之前就是通过它让一些信息显示出来的。</p>
</blockquote>
<p>而且，我们在 NebulaStudio 中看到的也与 Amundsen 元数据服务的数据模型相呼应：</p>
<p><figure><a class="lightgallery" href="https://www.amundsen.io/amundsen/img/graph_model.png" title="https://www.amundsen.io/amundsen/img/graph_model.png" data-thumbnail="https://www.amundsen.io/amundsen/img/graph_model.png">
        <img
            
            loading="lazy"
            src="https://www.amundsen.io/amundsen/img/graph_model.png"
            srcset="https://www.amundsen.io/amundsen/img/graph_model.png, https://www.amundsen.io/amundsen/img/graph_model.png 1.5x, https://www.amundsen.io/amundsen/img/graph_model.png 2x"
            sizes="auto"
            alt="https://www.amundsen.io/amundsen/img/graph_model.png">
    </a></figure></p>
<p>最后，请记住我们曾利用 dbt 来转换meltano 中的一些数据，并且清单文件路径是<code>.meltano/transformers/dbt/target/catalog.json</code>，您可以尝试创建一个数据构建器作业来导入它。</p>
<h3 id="提取-superset-中的元数据" class="headerLink">
    <a href="#%e6%8f%90%e5%8f%96-superset-%e4%b8%ad%e7%9a%84%e5%85%83%e6%95%b0%e6%8d%ae" class="header-mark"></a>4.3 提取 Superset 中的元数据</h3><p>Amundsen 的 Superset extractor 可以获取</p>
<ul>
<li>Dashboard 元数据抽取 <a href="https://www.amundsen.io/amundsen/databuilder/databuilder/extractor/dashboard/apache_superset/apache_superset_metadata_extractor.py" target="_blank" rel="noopener noreferrer">https://www.amundsen.io/amundsen/databuilder/databuilder/extractor/dashboard/apache_superset/apache_superset_metadata_extractor.py</a></li>
<li>图表元数据抽取 <a href="https://www.amundsen.io/amundsen/databuilder/databuilder" target="_blank" rel="noopener noreferrer">https://www.amundsen.io/amundsen/databuilder/databuilder</a> /extractor/dashboard/apache_superset/apache_superset_chart_extractor.py</li>
<li>Superset 元素与数据源（表）的关系抽取 <a href="https://www.amundsen.io/amundsen/databuilder/databuilder/extractor/dashboard/apache_superset/apache_superset_table_extractor.py" target="_blank" rel="noopener noreferrer">https://www.amundsen.io/amundsen/databuilder/databuilder/extractor/dashboard/apache_superset/apache_superset_table_extractor.py</a></li>
</ul>
<p>咱们现在就尝试摄取之前创建的 Superset Dashboard 的元数据。</p>
<h4 id="superset-元数据-etl-的执行" class="headerLink">
    <a href="#superset-%e5%85%83%e6%95%b0%e6%8d%ae-etl-%e7%9a%84%e6%89%a7%e8%a1%8c" class="header-mark"></a>4.3.1 Superset 元数据 ETL 的执行</h4><p>下边执行的示例 Superset 提取脚本可以从中获取数据并将元数据加载到 NebulaGraph 和 Elasticsearch 中。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">python3</span> <span class="n">sample_superset_data_loader_nebula</span><span class="o">.</span><span class="n">py</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果我们将日志记录级别设置为“DEBUG”，我们实际上可以看到这些中间的过程日志：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># fetching metadata from superset</span>
</span></span><span class="line"><span class="cl"><span class="n">DEBUG</span><span class="p">:</span><span class="n">urllib3</span><span class="o">.</span><span class="n">connectionpool</span><span class="p">:</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">localhost</span><span class="p">:</span><span class="mi">8088</span> <span class="s2">&#34;POST /api/v1/security/login HTTP/1.1&#34;</span> <span class="mi">200</span> <span class="mi">280</span>
</span></span><span class="line"><span class="cl"><span class="n">INFO</span><span class="p">:</span><span class="n">databuilder</span><span class="o">.</span><span class="n">task</span><span class="o">.</span><span class="n">task</span><span class="p">:</span><span class="n">Running</span> <span class="n">a</span> <span class="n">task</span>
</span></span><span class="line"><span class="cl"><span class="n">DEBUG</span><span class="p">:</span><span class="n">urllib3</span><span class="o">.</span><span class="n">connectionpool</span><span class="p">:</span><span class="n">Starting</span> <span class="n">new</span> <span class="n">HTTP</span> <span class="n">connection</span> <span class="p">(</span><span class="mi">1</span><span class="p">):</span> <span class="n">localhost</span><span class="p">:</span><span class="mi">8088</span>
</span></span><span class="line"><span class="cl"><span class="n">DEBUG</span><span class="p">:</span><span class="n">urllib3</span><span class="o">.</span><span class="n">connectionpool</span><span class="p">:</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">localhost</span><span class="p">:</span><span class="mi">8088</span> <span class="s2">&#34;GET /api/v1/dashboard?q=(page_size:20,page:0,order_direction:desc) HTTP/1.1&#34;</span> <span class="mi">308</span> <span class="mi">374</span>
</span></span><span class="line"><span class="cl"><span class="n">DEBUG</span><span class="p">:</span><span class="n">urllib3</span><span class="o">.</span><span class="n">connectionpool</span><span class="p">:</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">localhost</span><span class="p">:</span><span class="mi">8088</span> <span class="s2">&#34;GET /api/v1/dashboard/?q=(page_size:20,page:0,order_direction:desc) HTTP/1.1&#34;</span> <span class="mi">200</span> <span class="mi">1058</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># insert Dashboard</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">DEBUG</span><span class="p">:</span><span class="n">databuilder</span><span class="o">.</span><span class="n">publisher</span><span class="o">.</span><span class="n">nebula_csv_publisher</span><span class="p">:</span><span class="n">Query</span><span class="p">:</span> <span class="n">INSERT</span> <span class="n">VERTEX</span> <span class="err">`</span><span class="n">Dashboard</span><span class="err">`</span> <span class="p">(</span><span class="err">`</span><span class="n">dashboard_url</span><span class="err">`</span><span class="p">,</span> <span class="err">`</span><span class="n">name</span><span class="err">`</span><span class="p">,</span> <span class="n">published_tag</span><span class="p">,</span> <span class="n">publisher_last_updated_epoch_ms</span><span class="p">)</span> <span class="n">VALUES</span>  <span class="s2">&#34;superset_dashboard://my_cluster.1/3&#34;</span><span class="p">:(</span><span class="s2">&#34;http://localhost:8088/superset/dashboard/3/&#34;</span><span class="p">,</span><span class="s2">&#34;my_dashboard&#34;</span><span class="p">,</span><span class="s2">&#34;unique_tag&#34;</span><span class="p">,</span><span class="n">timestamp</span><span class="p">());</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># insert a DASHBOARD_WITH_TABLE relationship/edge</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">INFO</span><span class="p">:</span><span class="n">databuilder</span><span class="o">.</span><span class="n">publisher</span><span class="o">.</span><span class="n">nebula_csv_publisher</span><span class="p">:</span><span class="n">Importing</span> <span class="n">data</span> <span class="ow">in</span> <span class="n">edge</span> <span class="n">files</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;/tmp/amundsen/dashboard/relationships/Dashboard_Table_DASHBOARD_WITH_TABLE.csv&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">DEBUG</span><span class="p">:</span><span class="n">databuilder</span><span class="o">.</span><span class="n">publisher</span><span class="o">.</span><span class="n">nebula_csv_publisher</span><span class="p">:</span><span class="n">Query</span><span class="p">:</span>
</span></span><span class="line"><span class="cl"><span class="n">INSERT</span> <span class="n">edge</span> <span class="err">`</span><span class="n">DASHBOARD_WITH_TABLE</span><span class="err">`</span> <span class="p">(</span><span class="err">`</span><span class="n">END_LABEL</span><span class="err">`</span><span class="p">,</span> <span class="err">`</span><span class="n">START_LABEL</span><span class="err">`</span><span class="p">,</span> <span class="n">published_tag</span><span class="p">,</span> <span class="n">publisher_last_updated_epoch_ms</span><span class="p">)</span> <span class="n">VALUES</span> <span class="s2">&#34;superset_dashboard://my_cluster.1/3&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;postgresql+psycopg2://my_cluster.warehouse/orders&#34;</span><span class="p">:(</span><span class="s2">&#34;Table&#34;</span><span class="p">,</span><span class="s2">&#34;Dashboard&#34;</span><span class="p">,</span><span class="s2">&#34;unique_tag&#34;</span><span class="p">,</span> <span class="n">timestamp</span><span class="p">()),</span> <span class="s2">&#34;superset_dashboard://my_cluster.1/3&#34;</span><span class="o">-&gt;</span><span class="s2">&#34;postgresql+psycopg2://my_cluster.warehouse/customers&#34;</span><span class="p">:(</span><span class="s2">&#34;Table&#34;</span><span class="p">,</span><span class="s2">&#34;Dashboard&#34;</span><span class="p">,</span><span class="s2">&#34;unique_tag&#34;</span><span class="p">,</span> <span class="n">timestamp</span><span class="p">());</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="验证-superset-dashboard-元数据" class="headerLink">
    <a href="#%e9%aa%8c%e8%af%81-superset-dashboard-%e5%85%83%e6%95%b0%e6%8d%ae" class="header-mark"></a>4.3.2 验证 Superset Dashboard 元数据</h4><p>通过在 Amundsen 中搜索它，我们现在可以获得 Dashboard 信息。</p>
<p>我们也可以从 NebulaStudio 进行验证。</p>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168719624-738323dd-4c6e-475f-a370-f149181c6184.png" title="https://user-images.githubusercontent.com/1651790/168719624-738323dd-4c6e-475f-a370-f149181c6184.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168719624-738323dd-4c6e-475f-a370-f149181c6184.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/168719624-738323dd-4c6e-475f-a370-f149181c6184.png"
            srcset="https://user-images.githubusercontent.com/1651790/168719624-738323dd-4c6e-475f-a370-f149181c6184.png, https://user-images.githubusercontent.com/1651790/168719624-738323dd-4c6e-475f-a370-f149181c6184.png 1.5x, https://user-images.githubusercontent.com/1651790/168719624-738323dd-4c6e-475f-a370-f149181c6184.png 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/168719624-738323dd-4c6e-475f-a370-f149181c6184.png">
    </a></figure></p>
<blockquote>
<p>注：可以参阅 <a href="https://www.amundsen.io/amundsen/databuilder/docs/dashboard_ingestion_guide/" target="_blank" rel="noopener noreferrer">Dashboard 抓取指南</a> 中的 Amundsen Dashboard 图建模：</p>
<p><figure><a class="lightgallery" href="https://www.amundsen.io/amundsen/databuilder/docs/assets/dashboard_graph_modeling.png?raw=true" title="dashboard_graph_modeling" data-thumbnail="https://www.amundsen.io/amundsen/databuilder/docs/assets/dashboard_graph_modeling.png?raw=true">
        <img
            
            loading="lazy"
            src="https://www.amundsen.io/amundsen/databuilder/docs/assets/dashboard_graph_modeling.png?raw=true"
            srcset="https://www.amundsen.io/amundsen/databuilder/docs/assets/dashboard_graph_modeling.png?raw=true, https://www.amundsen.io/amundsen/databuilder/docs/assets/dashboard_graph_modeling.png?raw=true 1.5x, https://www.amundsen.io/amundsen/databuilder/docs/assets/dashboard_graph_modeling.png?raw=true 2x"
            sizes="auto"
            alt="https://www.amundsen.io/amundsen/databuilder/docs/assets/dashboard_graph_modeling.png?raw=true">
    </a></figure></p>
</blockquote>
<h3 id="用-superset-预览数据" class="headerLink">
    <a href="#%e7%94%a8-superset-%e9%a2%84%e8%a7%88%e6%95%b0%e6%8d%ae" class="header-mark"></a>4.4 用 Superset 预览数据</h3><p>Superset可以用来预览这样的表格数据。 相应的文档可以参考 <a href="https://www.amundsen.io/amundsen/frontend/docs/configuration/#preview-client" target="_blank" rel="noopener noreferrer">https://www.amundsen.io/amundsen/frontend/docs/configuration/#preview-client</a> ，其中 <code>/superset/sql_json/</code> 的 API 被 Amundsen Frontend service 调用，取得预览信息。</p>
<p><figure><a class="lightgallery" href="https://github.com/amundsen-io/amundsenfrontendlibrary/blob/master/docs/img/data_preview.png?raw=true" title="https://github.com/amundsen-io/amundsenfrontendlibrary/blob/master/docs/img/data_preview.png?raw=true" data-thumbnail="https://github.com/amundsen-io/amundsenfrontendlibrary/blob/master/docs/img/data_preview.png?raw=true">
        <img
            
            loading="lazy"
            src="https://github.com/amundsen-io/amundsenfrontendlibrary/blob/master/docs/img/data_preview.png?raw=true"
            srcset="https://github.com/amundsen-io/amundsenfrontendlibrary/blob/master/docs/img/data_preview.png?raw=true, https://github.com/amundsen-io/amundsenfrontendlibrary/blob/master/docs/img/data_preview.png?raw=true 1.5x, https://github.com/amundsen-io/amundsenfrontendlibrary/blob/master/docs/img/data_preview.png?raw=true 2x"
            sizes="auto"
            alt="https://github.com/amundsen-io/amundsenfrontendlibrary/blob/master/docs/img/data_preview.png?raw=true">
    </a></figure></p>
<h3 id="开启数据血缘信息" class="headerLink">
    <a href="#%e5%bc%80%e5%90%af%e6%95%b0%e6%8d%ae%e8%a1%80%e7%bc%98%e4%bf%a1%e6%81%af" class="header-mark"></a>4.5 开启数据血缘信息</h3><p>默认情况下，数据血缘是关闭的，我们可以通过以下方式启用它：</p>
<ol start="0">
<li><code>cd</code> 到 Amundsen 代码仓库下，这也是我们运行 <code>docker-compose -f docker-amundsen-nebula.yml up</code> 命令的地方</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> amundsen
</span></span></code></pre></td></tr></table>
</div>
</div><ol>
<li>修改 frontend 下的 typescript 配置</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl"><span class="gd">--- a/frontend/amundsen_application/static/js/config/config-default.ts
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+++ b/frontend/amundsen_application/static/js/config/config-default.ts
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>   tableLineage: {
</span></span><span class="line"><span class="cl"><span class="gd">-    inAppListEnabled: false,
</span></span></span><span class="line"><span class="cl"><span class="gd">-    inAppPageEnabled: false,
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+    inAppListEnabled: true,
</span></span></span><span class="line"><span class="cl"><span class="gi">+    inAppPageEnabled: true,
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>     externalEnabled: false,
</span></span><span class="line"><span class="cl">     iconPath: &#39;PATH_TO_ICON&#39;,
</span></span><span class="line"><span class="cl">     isBeta: false,
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="2">
<li>重新构建 docker 镜像，其中将重建前端图像。</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker-compose -f docker-amundsen-nebula.yml build
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后，重新运行 <code>up -d</code> 以确保前端用新的配置：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker-compose -f docker-amundsen-nebula.yml up -d
</span></span></code></pre></td></tr></table>
</div>
</div><p>结果大概长这样子：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker-compose -f docker-amundsen-nebula.yml up -d
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">Recreating amundsenfrontend           ... <span class="k">done</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>之后，我们可以访问 http://localhost:5000/lineage/table/gold/hive/test_schema/test_table1 看到 <code>Lineage （beta）</code> 血缘按钮已经显示出来了：</p>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168838731-79d0e3bc-439e-4f6b-8ef7-83b37e9bcb12.png" title="https://user-images.githubusercontent.com/1651790/168838731-79d0e3bc-439e-4f6b-8ef7-83b37e9bcb12.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168838731-79d0e3bc-439e-4f6b-8ef7-83b37e9bcb12.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/168838731-79d0e3bc-439e-4f6b-8ef7-83b37e9bcb12.png"
            srcset="https://user-images.githubusercontent.com/1651790/168838731-79d0e3bc-439e-4f6b-8ef7-83b37e9bcb12.png, https://user-images.githubusercontent.com/1651790/168838731-79d0e3bc-439e-4f6b-8ef7-83b37e9bcb12.png 1.5x, https://user-images.githubusercontent.com/1651790/168838731-79d0e3bc-439e-4f6b-8ef7-83b37e9bcb12.png 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/168838731-79d0e3bc-439e-4f6b-8ef7-83b37e9bcb12.png">
    </a></figure></p>
<p>我们可以点击 <code>Downstream</code> 在存在的时候查看该表的下游资源：</p>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168839251-efd523af-d729-44cf-a40b-fa83a0852654.png" title="https://user-images.githubusercontent.com/1651790/168839251-efd523af-d729-44cf-a40b-fa83a0852654.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168839251-efd523af-d729-44cf-a40b-fa83a0852654.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/168839251-efd523af-d729-44cf-a40b-fa83a0852654.png"
            srcset="https://user-images.githubusercontent.com/1651790/168839251-efd523af-d729-44cf-a40b-fa83a0852654.png, https://user-images.githubusercontent.com/1651790/168839251-efd523af-d729-44cf-a40b-fa83a0852654.png 1.5x, https://user-images.githubusercontent.com/1651790/168839251-efd523af-d729-44cf-a40b-fa83a0852654.png 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/168839251-efd523af-d729-44cf-a40b-fa83a0852654.png">
    </a></figure></p>
<p>或者点血缘按钮查看血缘的图表式：</p>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168838814-e6ff5152-c24b-470e-a46a-48f183ba7201.png" title="https://user-images.githubusercontent.com/1651790/168838814-e6ff5152-c24b-470e-a46a-48f183ba7201.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168838814-e6ff5152-c24b-470e-a46a-48f183ba7201.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/168838814-e6ff5152-c24b-470e-a46a-48f183ba7201.png"
            srcset="https://user-images.githubusercontent.com/1651790/168838814-e6ff5152-c24b-470e-a46a-48f183ba7201.png, https://user-images.githubusercontent.com/1651790/168838814-e6ff5152-c24b-470e-a46a-48f183ba7201.png 1.5x, https://user-images.githubusercontent.com/1651790/168838814-e6ff5152-c24b-470e-a46a-48f183ba7201.png 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/168838814-e6ff5152-c24b-470e-a46a-48f183ba7201.png">
    </a></figure></p>
<p>也有用于血缘查询的 API。 这个例子中我们用 cURL 调用下这个 API：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run -it --rm --net container:amundsenfrontend nicolaka/netshoot
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">curl <span class="s2">&#34;http://amundsenmetadata:5002/table/snowflake://dbt_demo.public/raw_inventory_value/lineage?depth=3&amp;direction=both&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>上面的 API 调用是查询上游和下游方向的 linage，表 <code>snowflake://dbt_demo.public/raw_inventory_value</code> 的深度为 3。</p>
<p>结果应该是这样的：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;depth&#34;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;downstream_entities&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;level&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;usage&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;key&#34;</span><span class="p">:</span> <span class="s2">&#34;snowflake://dbt_demo.public/fact_daily_expenses&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;parent&#34;</span><span class="p">:</span> <span class="s2">&#34;snowflake://dbt_demo.public/fact_warehouse_inventory&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;badges&#34;</span><span class="p">:</span> <span class="p">[],</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;source&#34;</span><span class="p">:</span> <span class="s2">&#34;snowflake&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;level&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;usage&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;key&#34;</span><span class="p">:</span> <span class="s2">&#34;snowflake://dbt_demo.public/fact_warehouse_inventory&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;parent&#34;</span><span class="p">:</span> <span class="s2">&#34;snowflake://dbt_demo.public/raw_inventory_value&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;badges&#34;</span><span class="p">:</span> <span class="p">[],</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;source&#34;</span><span class="p">:</span> <span class="s2">&#34;snowflake&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;key&#34;</span><span class="p">:</span> <span class="s2">&#34;snowflake://dbt_demo.public/raw_inventory_value&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;direction&#34;</span><span class="p">:</span> <span class="s2">&#34;both&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;upstream_entities&#34;</span><span class="p">:</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>实际上，这个血缘数据就是在我们的 <a href="https://github.com/amundsen-io/amundsen/blob/main/databuilder/databuilder/extractor/dbt_extractor.py" target="_blank" rel="noopener noreferrer">DbtExtractor</a> 执行期间提取和加载的，其中 <code>extractor .dbt.{DbtExtractor.EXTRACT_LINEAGE}</code> 默认为 <code>True</code>，因此创建了血缘元数据并将其加载到了 Amundsen。</p>
<h4 id="在-nebulagraph-中洞察血缘" class="headerLink">
    <a href="#%e5%9c%a8-nebulagraph-%e4%b8%ad%e6%b4%9e%e5%af%9f%e8%a1%80%e7%bc%98" class="header-mark"></a>4.5.1 在 NebulaGraph 中洞察血缘</h4><p>使用图数据库作为元数据存储的两个优点是：</p>
<ul>
<li>图查询本身是一个灵活的 DSL for lineage API，例如，这个查询帮助我们执行 Amundsen 元数据 API 的等价的查询：</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">t</span><span class="p">:</span><span class="o">`</span><span class="k">Table</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="o">-</span><span class="p">[:</span><span class="o">`</span><span class="n">HAS_UPSTREAM</span><span class="o">`|</span><span class="p">:</span><span class="o">`</span><span class="n">HAS_DOWNSTREAM</span><span class="o">`</span><span class="w"> </span><span class="o">*</span><span class="mi">1</span><span class="p">..</span><span class="mi">3</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">t</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;snowflake://dbt_demo.public/raw_inventory_value&#34;</span><span class="w"> </span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>我们现在甚至可以在 NebulaGraph Studio 或者 Explorer 的控制台中查询它</li>
</ul>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168844882-ca3d0587-7946-4e17-8264-9dc973a44673.png" title="https://user-images.githubusercontent.com/1651790/168844882-ca3d0587-7946-4e17-8264-9dc973a44673.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168844882-ca3d0587-7946-4e17-8264-9dc973a44673.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/168844882-ca3d0587-7946-4e17-8264-9dc973a44673.png"
            srcset="https://user-images.githubusercontent.com/1651790/168844882-ca3d0587-7946-4e17-8264-9dc973a44673.png, https://user-images.githubusercontent.com/1651790/168844882-ca3d0587-7946-4e17-8264-9dc973a44673.png 1.5x, https://user-images.githubusercontent.com/1651790/168844882-ca3d0587-7946-4e17-8264-9dc973a44673.png 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/168844882-ca3d0587-7946-4e17-8264-9dc973a44673.png">
    </a></figure></p>
<p>​    然后渲染这个结果：</p>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168845155-b0e7a5ce-3ddf-4cc9-89a3-aaf1bbb0f5ec.png" title="https://user-images.githubusercontent.com/1651790/168845155-b0e7a5ce-3ddf-4cc9-89a3-aaf1bbb0f5ec.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/168845155-b0e7a5ce-3ddf-4cc9-89a3-aaf1bbb0f5ec.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/168845155-b0e7a5ce-3ddf-4cc9-89a3-aaf1bbb0f5ec.png"
            srcset="https://user-images.githubusercontent.com/1651790/168845155-b0e7a5ce-3ddf-4cc9-89a3-aaf1bbb0f5ec.png, https://user-images.githubusercontent.com/1651790/168845155-b0e7a5ce-3ddf-4cc9-89a3-aaf1bbb0f5ec.png 1.5x, https://user-images.githubusercontent.com/1651790/168845155-b0e7a5ce-3ddf-4cc9-89a3-aaf1bbb0f5ec.png 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/168845155-b0e7a5ce-3ddf-4cc9-89a3-aaf1bbb0f5ec.png">
    </a></figure></p>
<h4 id="提取数据血缘" class="headerLink">
    <a href="#%e6%8f%90%e5%8f%96%e6%95%b0%e6%8d%ae%e8%a1%80%e7%bc%98" class="header-mark"></a>4.5.2 提取数据血缘</h4><p>这些血缘信息是需要我们明确指定、获取的，获取的方式可以是自己写的 extractor，也可以是一些已经有的方式。比如 dbt 的 extractor和 Open Lineage 项目的 Amundsen extractor。</p>
<h5 id="通过-dbt" class="headerLink">
    <a href="#%e9%80%9a%e8%bf%87-dbt" class="header-mark"></a>4.5.2.1 通过 dbt</h5><p>这个在刚才已经展示过了，Dbt 的 Extractor 会从表级别获取血缘和其他 dbt 中产生的元数据信息一起被拿到。</p>
<h5 id="通过-open-lineage" class="headerLink">
    <a href="#%e9%80%9a%e8%bf%87-open-lineage" class="header-mark"></a>4.5.2.2 通过 Open Lineage</h5><p>Amundsen 中的另一个开箱即用的血缘 Extractor 是 <a href="https://www.amundsen.io/amundsen/databuilder/#openlineagetablelineageextractor" target="_blank" rel="noopener noreferrer">OpenLineageTableLineageExtractor</a>。</p>
<p><a href="https://openlineage.io/" target="_blank" rel="noopener noreferrer">Open Lineage</a> 是一个开放的框架，可以将不同来源的血统数据收集到一个地方，它可以将血统信息输出为 JSON 文件：https://www.amundsen.io/amundsen/databuilder/#openlineagetablelineageextractor</p>
<p>下边是它的 Amundsen data builder 例子：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">dict_config</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">    <span class="sa">f</span><span class="s1">&#39;extractor.openlineage_tablelineage.</span><span class="si">{</span><span class="n">OpenLineageTableLineageExtractor</span><span class="o">.</span><span class="n">CLUSTER_NAME</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">:</span> <span class="s1">&#39;datalab&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="sa">f</span><span class="s1">&#39;extractor.openlineage_tablelineage.</span><span class="si">{</span><span class="n">OpenLineageTableLineageExtractor</span><span class="o">.</span><span class="n">OL_DATASET_NAMESPACE_OVERRIDE</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">:</span> <span class="s1">&#39;hive_table&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="sa">f</span><span class="s1">&#39;extractor.openlineage_tablelineage.</span><span class="si">{</span><span class="n">OpenLineageTableLineageExtractor</span><span class="o">.</span><span class="n">TABLE_LINEAGE_FILE_LOCATION</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">:</span> <span class="s1">&#39;input_dir/openlineage_nd.json&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">task</span> <span class="o">=</span> <span class="n">DefaultTask</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">extractor</span><span class="o">=</span><span class="n">OpenLineageTableLineageExtractor</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">    <span class="n">loader</span><span class="o">=</span><span class="n">FsNebulaCSVLoader</span><span class="p">())</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="回顾" class="headerLink">
    <a href="#%e5%9b%9e%e9%a1%be" class="header-mark"></a>5 回顾</h2><p>整套元数据治理/发现的方案思路如下：</p>
<ul>
<li>将整个数据技术栈中的组件作为元数据源（从任何数据库、数仓，到 dbt、Airflow、Openlineage、Superset 等各级项目）</li>
<li>使用 Databuilder（作为脚本或 DAG）运行元数据 ETL，以使用 NebulaGraph 和 Elasticsearch 存储和索引</li>
<li>从前端 UI（使用 Superset 预览）或 API 去使用、消费、管理和发现元数据</li>
<li>通过查询和 UI 对 NebulaGraph，我们可以获得更多的可能性、灵活性和数据、血缘的洞察</li>
</ul>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168849779-4826f50e-ff87-4e78-b17f-076f91182c43.svg" title="https://user-images.githubusercontent.com/1651790/168849779-4826f50e-ff87-4e78-b17f-076f91182c43.svg" data-thumbnail="https://user-images.githubusercontent.com/1651790/168849779-4826f50e-ff87-4e78-b17f-076f91182c43.svg">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/168849779-4826f50e-ff87-4e78-b17f-076f91182c43.svg"
            srcset="https://user-images.githubusercontent.com/1651790/168849779-4826f50e-ff87-4e78-b17f-076f91182c43.svg, https://user-images.githubusercontent.com/1651790/168849779-4826f50e-ff87-4e78-b17f-076f91182c43.svg 1.5x, https://user-images.githubusercontent.com/1651790/168849779-4826f50e-ff87-4e78-b17f-076f91182c43.svg 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/168849779-4826f50e-ff87-4e78-b17f-076f91182c43.svg">
    </a></figure></p>
<h3 id="涉及到的开源" class="headerLink">
    <a href="#%e6%b6%89%e5%8f%8a%e5%88%b0%e7%9a%84%e5%bc%80%e6%ba%90" class="header-mark"></a>5.1 涉及到的开源</h3><p>此参考项目中使用的所有项目都按字典顺序在下面列出。</p>
<ul>
<li>Amundsen</li>
<li>Apache Airflow</li>
<li>Apache Superset</li>
<li>dbt</li>
<li>Elasticsearch</li>
<li>meltano</li>
<li>Nebula Graph</li>
<li>Open Lineage</li>
<li>singer</li>
</ul>
<blockquote>
<p>题图版权： <a href="https://unsplash.com/photos/PhnJhjH9Y9s" target="_blank" rel="noopener noreferrer">Phil Hearing</a></p>
</blockquote>]]></description>
</item><item>
    <title>NebulaGraph 的云原生 API 网关最佳实践</title>
    <link>https://siwei.io/apisix-and-nebulagraph/</link>
    <pubDate>Wed, 16 Nov 2022 17:24:42 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/apisix-and-nebulagraph/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/apisix-and-nebulagraph/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>本文介绍了利用开源 API 网关 APISIX 加速 NebulaGraph 多个场景的落地最佳实践：负载均衡、暴露接口结构与 TLS Termination。</p>
</blockquote>
<!--

[TOC]

-->
<h2 id="api-网关介绍" class="headerLink">
    <a href="#api-%e7%bd%91%e5%85%b3%e4%bb%8b%e7%bb%8d" class="header-mark"></a>1 API 网关介绍</h2><h3 id="什么是-api-网关" class="headerLink">
    <a href="#%e4%bb%80%e4%b9%88%e6%98%af-api-%e7%bd%91%e5%85%b3" class="header-mark"></a>1.1 什么是 API 网关</h3><p>API 网关是它位于客户端和服务器之间的“中间人”，用于管理、监控和保护 API。它可以在 API 之前执行一些操作，例如身份验证、授权、缓存、日志记录、审计、流量控制、安全、防火墙、压缩、解压缩、加密、解密等。</p>
<p>API 网关可以工作在 4 层和 7 层。跑在 7 层的API 网关可以使用多种协议，例如 HTTP、HTTPS、WebSocket、gRPC、MQTT 等，在这些应用层协议中做一些操作，例如请求重写、请求转发、请求合并、请求重试、请求缓存、请求限流、请求熔断、请求降级、请求鉴权、请求监控、请求日志、请求审计、请求转发等等。</p>
<p>这里举例一下借助 API 网关可以做的具体的事儿吧：</p>
<ul>
<li>我们可以在网关层增加认证层，比如 JWT 认证、OAuth2 认证、OpenID 认证等等，这样则不需要在每个服务中都做具体的认证集成工作，这可以节省非常多的开发成本。</li>
<li>我们可以借助网关给跳板机 SSH 流量增加无需客户端修改的复杂认证，比如跳转任何客户端的 SSH 登录，给出一个网址或者输入框，引导登陆者通过网页的 SSO 认证（包含多因素认证），然后再通过网关转发到 SSH 服务。</li>
<li>我们甚至可以在网关层做 Serverless 数据库！TiDB 社区的同学们就在做这个事儿，他们从普通的 MySQL 客户端的登录请求中解析能推断出转到需要的 TiDB 示例的信息，并且在需要 cold start 唤醒实例的时候把连接保持住，可以参考这篇文章：<a href="https://disksing.com/tidb-gateway/" target="_blank" rel="noopener noreferrer">TiDB Gateway</a>。</li>
<li>如果我们特别惨在维护一些屎山项目，不得不针对旧版本的应用程序对新版本的服务端进行兼容，这时候 API 网关也可以通过一些请求重写，把旧版本的请求转换成新版本的请求。</li>
</ul>
<p>只要脑洞大，理论上API 的网关可以做很多很多事儿，显然，不是所有的事情都是适合在这一层面去做的，通常那些比较通用的事情才适合在这一层面去做，这里我只是给出一些典型和极端的具体例子。</p>
<h3 id="apache-apisix" class="headerLink">
    <a href="#apache-apisix" class="header-mark"></a>1.2 Apache APISIX</h3><p>API 网关是从 LB、Reverse Proxy 项目演进过来的，随着云原生的兴起，API 网关也逐渐成为了云原生的一部分，流行的开源的网关就有很多：</p>
<ul>
<li><a href="github.com/nginx/nginx" rel="">Nginx</a></li>
<li><a href="github.com/apache/apisix" rel="">Apache APISIX</a></li>
<li><a href="github.com/Kong/kong" rel="">Kong</a></li>
<li><a href="github.com/luraproject/lura" rel="">Lura</a></li>
<li><a href="github.com/openresty/openresty" rel="">OpenResty</a></li>
<li><a href="github.com/TykTechnologies/tyk" rel="">Tyk</a></li>
<li><a href="github.com/traefik/traefik" rel="">Traefik</a></li>
<li><a href="github.com/istio/istio" rel="">Istio</a></li>
<li><a href="github.com/envoyproxy/envoy" rel="">Envoy</a></li>
</ul>
<p>而且其中很多都是基于 Nginx/OpenResty 的下游项目，这里就以 Apache APISIX 为例，介绍一下 NebulaGraph 借助 API 网关的几个实践。</p>
<h2 id="nebulagraph-介绍" class="headerLink">
    <a href="#nebulagraph-%e4%bb%8b%e7%bb%8d" class="header-mark"></a>2 NebulaGraph 介绍</h2><p>NebulaGraph 是一个开源的分布式图数据库，它的特点是：</p>
<ul>
<li>高性能：NebulaGraph 的性能可以达到每秒百万级的读写，具有极高的扩展性，在千亿点万亿边的规模上支持毫秒级的查询。</li>
<li>易扩展：NebulaGraph 的架构是分布式的，可以在多台机器上扩展，每台机器上可以运行多个服务进程，它的查询层是无状态的计算存储分离架构，我们可以很容易引入不同配置、不通类型的计算层，实现同一集群上 TP、AP、 图计算等不同负载的混合查询。</li>
<li>易使用：NebulaGraph 的原生查询语言是类 SQL 的，易于学习和使用，同时支持 OpenCypher。</li>
<li>丰富生态：NebulaGraph 的生态系统正在不断壮大，目前已经有了多个客户端，包括 Java、Python、Go、C++、JavaScript、Spark、Flink 等，同时也有了多个可视化工具，包括 NebulaGraph Studio、Nebula Dashboard、Nebula Explorer 等。</li>
</ul>
<h2 id="本文讨论的问题" class="headerLink">
    <a href="#%e6%9c%ac%e6%96%87%e8%ae%a8%e8%ae%ba%e7%9a%84%e9%97%ae%e9%a2%98" class="header-mark"></a>3 本文讨论的问题</h2><p>本文给出了基于 NebulaGraph 集群应用中涉及到 API 网关的几个场景。</p>
<ul>
<li>查询接口的负载均衡</li>
<li>底层存储接口的暴露</li>
<li>传输层的加密</li>
</ul>
<h3 id="查询接口负载均衡" class="headerLink">
    <a href="#%e6%9f%a5%e8%af%a2%e6%8e%a5%e5%8f%a3%e8%b4%9f%e8%bd%bd%e5%9d%87%e8%a1%a1" class="header-mark"></a>3.1 查询接口负载均衡</h3><p>首先是图数据库查询接口（GraphD）的负载均衡与高可用的问题。</p>
<p>NebulaGraph 内核由三种服务组成：GraphD、MetaD 和 StorageD：</p>
<p><figure><a class="lightgallery" href="https://docs-cdn.nebula-graph.com.cn/figures/nebula-graph-architecture_3.png" title="https://docs-cdn.nebula-graph.com.cn/figures/nebula-graph-architecture_3.png" data-thumbnail="https://docs-cdn.nebula-graph.com.cn/figures/nebula-graph-architecture_3.png">
        <img
            
            loading="lazy"
            src="https://docs-cdn.nebula-graph.com.cn/figures/nebula-graph-architecture_3.png"
            srcset="https://docs-cdn.nebula-graph.com.cn/figures/nebula-graph-architecture_3.png, https://docs-cdn.nebula-graph.com.cn/figures/nebula-graph-architecture_3.png 1.5x, https://docs-cdn.nebula-graph.com.cn/figures/nebula-graph-architecture_3.png 2x"
            sizes="auto"
            alt="https://docs-cdn.nebula-graph.com.cn/figures/nebula-graph-architecture_3.png">
    </a></figure></p>
<p>所以，在默认情况下，集群只会暴露 GraphD 的接口，提供给客户端连接，执行 nGQL 的查询。</p>
<p>这其中，GraphD 是无状态的，这意味着我们可以在多个 GraphD 之间做负载均衡。这里，我们有两种方法：基于客户端的（Client-Side LB），与基于代理的。</p>
<h4 id="客户端的负载均衡" class="headerLink">
    <a href="#%e5%ae%a2%e6%88%b7%e7%ab%af%e7%9a%84%e8%b4%9f%e8%bd%bd%e5%9d%87%e8%a1%a1" class="header-mark"></a>3.1.1 客户端的负载均衡</h4><p>客户端的负载均衡，就是在客户端，也就是应用程序中，实现负载均衡的逻辑，NebulaGraph 的各个语言的客户端里边已经内置了简单的轮询（Round-Robin）负载均衡，我们只需要在客户端配置多个 GraphD 的地址就可以了：</p>
<p>比如我们在创建连接池的时候，指定了两个不同的 GraphD 的地址（对应不同进程实例）：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">nebula3.gclient.net</span> <span class="kn">import</span> <span class="n">ConnectionPool</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">nebula3.Config</span> <span class="kn">import</span> <span class="n">Config</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">config</span> <span class="o">=</span> <span class="n">Config</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">config</span><span class="o">.</span><span class="n">max_connection_pool_size</span> <span class="o">=</span> <span class="mi">10</span>
</span></span><span class="line"><span class="cl"><span class="n">connection_pool</span> <span class="o">=</span> <span class="n">ConnectionPool</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">connection_pool</span><span class="o">.</span><span class="n">init</span><span class="p">([(</span><span class="s1">&#39;127.0.0.1&#39;</span><span class="p">,</span> <span class="mi">9669</span><span class="p">),</span> <span class="p">(</span><span class="s1">&#39;127.0.0.1&#39;</span><span class="p">,</span> <span class="mi">49433</span><span class="p">)],</span> <span class="n">config</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>我们在取得连接的时候，就会从连接池中随机取得一个连接：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">10</span><span class="p">]:</span> <span class="n">connection0</span> <span class="o">=</span> <span class="n">connection_pool</span><span class="o">.</span><span class="n">get_connection</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">11</span><span class="p">]:</span> <span class="n">connection1</span> <span class="o">=</span> <span class="n">connection_pool</span><span class="o">.</span><span class="n">get_connection</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 这两个连接的 GraphD 地址是不同的</span>
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">12</span><span class="p">]:</span> <span class="n">connection0</span><span class="o">.</span><span class="n">_port</span><span class="p">,</span> <span class="n">connection1</span><span class="o">.</span><span class="n">_port</span>
</span></span><span class="line"><span class="cl"><span class="n">Out</span><span class="p">[</span><span class="mi">12</span><span class="p">]:</span> <span class="p">(</span><span class="mi">9669</span><span class="p">,</span> <span class="mi">49433</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这种客户端的负载均衡的问题在于它的配置、实现细节与应用代码耦合在一起，如果我们需要修改负载均衡的策略，就需要修改应用代码，这样就会增加应用的复杂度。</p>
<h4 id="代理的负载均衡" class="headerLink">
    <a href="#%e4%bb%a3%e7%90%86%e7%9a%84%e8%b4%9f%e8%bd%bd%e5%9d%87%e8%a1%a1" class="header-mark"></a>3.1.2 代理的负载均衡</h4><p>基于代理的负载均衡，就是在应用程序之前，增加一个代理层，来实现负载均衡的逻辑，这样应用程序就不需要关心负载均衡的问题了。在 k8s 里的话，我们可以使用 k8s 的 Service 来实现这个代理层。</p>
<p>这是一个在 Minikube 中为 NebulaGraph 集群中 GraphD 创建的 Service：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">cat <span class="s">&lt;&lt;EOF | kubectl create -f -
</span></span></span><span class="line"><span class="cl"><span class="s">apiVersion: v1
</span></span></span><span class="line"><span class="cl"><span class="s">kind: Service
</span></span></span><span class="line"><span class="cl"><span class="s">metadata:
</span></span></span><span class="line"><span class="cl"><span class="s">  labels:
</span></span></span><span class="line"><span class="cl"><span class="s">    app.kubernetes.io/cluster: nebula
</span></span></span><span class="line"><span class="cl"><span class="s">    app.kubernetes.io/component: graphd
</span></span></span><span class="line"><span class="cl"><span class="s">    app.kubernetes.io/managed-by: nebula-operator
</span></span></span><span class="line"><span class="cl"><span class="s">    app.kubernetes.io/name: nebula-graph
</span></span></span><span class="line"><span class="cl"><span class="s">  name: nebula-graphd-svc-nodeport
</span></span></span><span class="line"><span class="cl"><span class="s">  namespace: default
</span></span></span><span class="line"><span class="cl"><span class="s">spec:
</span></span></span><span class="line"><span class="cl"><span class="s">  externalTrafficPolicy: Local
</span></span></span><span class="line"><span class="cl"><span class="s">  ports:
</span></span></span><span class="line"><span class="cl"><span class="s">  - name: thrift
</span></span></span><span class="line"><span class="cl"><span class="s">    port: 9669
</span></span></span><span class="line"><span class="cl"><span class="s">    protocol: TCP
</span></span></span><span class="line"><span class="cl"><span class="s">    targetPort: 9669
</span></span></span><span class="line"><span class="cl"><span class="s">    nodePort: 30000
</span></span></span><span class="line"><span class="cl"><span class="s">  - name: http
</span></span></span><span class="line"><span class="cl"><span class="s">    port: 19669
</span></span></span><span class="line"><span class="cl"><span class="s">    protocol: TCP
</span></span></span><span class="line"><span class="cl"><span class="s">    targetPort: 19669
</span></span></span><span class="line"><span class="cl"><span class="s">    nodePort: 30001
</span></span></span><span class="line"><span class="cl"><span class="s">  selector:
</span></span></span><span class="line"><span class="cl"><span class="s">    app.kubernetes.io/cluster: nebula
</span></span></span><span class="line"><span class="cl"><span class="s">    app.kubernetes.io/component: graphd
</span></span></span><span class="line"><span class="cl"><span class="s">    app.kubernetes.io/managed-by: nebula-operator
</span></span></span><span class="line"><span class="cl"><span class="s">    app.kubernetes.io/name: nebula-graph
</span></span></span><span class="line"><span class="cl"><span class="s">  type: NodePort
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>创建了它之后，我们就可以通过它暴露的单独端口来访问 NebulaGraph 集群中的 GraphD 了：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">13</span><span class="p">]:</span> <span class="n">connection_pool</span> <span class="o">=</span> <span class="n">ConnectionPool</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span><span class="p">:</span> <span class="n">connection_pool</span><span class="o">.</span><span class="n">init</span><span class="p">([(</span><span class="s1">&#39;192.168.49.2&#39;</span><span class="p">,</span> <span class="mi">9669</span><span class="p">)],</span> <span class="n">config</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">Out</span><span class="p">[</span><span class="mi">13</span><span class="p">]:</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">14</span><span class="p">]:</span> <span class="n">connection0</span> <span class="o">=</span> <span class="n">connection_pool</span><span class="o">.</span><span class="n">get_connection</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">15</span><span class="p">]:</span> <span class="n">connection1</span> <span class="o">=</span> <span class="n">connection_pool</span><span class="o">.</span><span class="n">get_connection</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">16</span><span class="p">]:</span> <span class="n">connection0</span><span class="o">.</span><span class="n">_ip</span><span class="p">,</span> <span class="n">connection1</span><span class="o">.</span><span class="n">_ip</span>
</span></span><span class="line"><span class="cl"><span class="n">Out</span><span class="p">[</span><span class="mi">16</span><span class="p">]:</span> <span class="p">(</span><span class="s1">&#39;192.168.49.2&#39;</span><span class="p">,</span> <span class="s1">&#39;192.168.49.2&#39;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到，在连接层面上来看，客户端只知道代理的地址，而不知道 NebulaGraph 集群中的 GraphD 的地址，这样就实现了客户端与 NebulaGraph 集群中的 GraphD 的解耦。</p>
<p>然而，当我们在 connection 之上创建 session 的时候，就能看到实际上客户端的不同请求是落在了不同的 GraphD 上的：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">17</span><span class="p">]:</span> <span class="n">session</span> <span class="o">=</span> <span class="n">connection_pool</span><span class="o">.</span><span class="n">get_session</span><span class="p">(</span><span class="s1">&#39;root&#39;</span><span class="p">,</span> <span class="s1">&#39;nebula&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">18</span><span class="p">]:</span> <span class="n">session</span><span class="o">.</span><span class="n">_session_id</span>
</span></span><span class="line"><span class="cl"><span class="n">Out</span><span class="p">[</span><span class="mi">18</span><span class="p">]:</span> <span class="mi">1668670607568178</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">19</span><span class="p">]:</span> <span class="n">session1</span> <span class="o">=</span> <span class="n">connection_pool</span><span class="o">.</span><span class="n">get_session</span><span class="p">(</span><span class="s1">&#39;root&#39;</span><span class="p">,</span> <span class="s1">&#39;nebula&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">20</span><span class="p">]:</span> <span class="n">session1</span><span class="o">.</span><span class="n">_session_id</span>
</span></span><span class="line"><span class="cl"><span class="n">Out</span><span class="p">[</span><span class="mi">20</span><span class="p">]:</span> <span class="mi">1668670625563307</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 得到每一个 session 的 ID</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">21</span><span class="p">]:</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&#34;SHOW SESSIONS&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 它们分别对应了两个不同的 graphd 实例</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Out</span><span class="p">[</span><span class="mi">21</span><span class="p">]:</span> <span class="n">ResultSet</span><span class="p">(</span><span class="n">keys</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;SessionId&#39;</span><span class="p">,</span> <span class="s1">&#39;UserName&#39;</span><span class="p">,</span> <span class="s1">&#39;SpaceName&#39;</span><span class="p">,</span> <span class="s1">&#39;CreateTime&#39;</span><span class="p">,</span> <span class="s1">&#39;UpdateTime&#39;</span><span class="p">,</span> <span class="s1">&#39;GraphAddr&#39;</span><span class="p">,</span> <span class="s1">&#39;Timezone&#39;</span><span class="p">,</span> <span class="s1">&#39;ClientIp&#39;</span><span class="p">],</span> <span class="n">values</span><span class="p">:</span> <span class="p">[</span><span class="mi">1668670607568178</span><span class="p">,</span> <span class="s2">&#34;root&#34;</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="n">utc</span> <span class="n">datetime</span><span class="p">:</span> <span class="mi">2022</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mi">17</span><span class="n">T07</span><span class="p">:</span><span class="mi">36</span><span class="p">:</span><span class="mf">47.568178</span><span class="p">,</span> <span class="n">timezone_offset</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="n">utc</span> <span class="n">datetime</span><span class="p">:</span> <span class="mi">2022</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mi">17</span><span class="n">T07</span><span class="p">:</span><span class="mi">36</span><span class="p">:</span><span class="mf">47.575303</span><span class="p">,</span> <span class="n">timezone_offset</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="s2">&#34;nebula-graphd-0.nebula-graphd-svc.default.svc.cluster.local:9669&#34;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s2">&#34;172.17.0.1&#34;</span><span class="p">],[</span><span class="mi">1668670625563307</span><span class="p">,</span> <span class="s2">&#34;root&#34;</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="n">utc</span> <span class="n">datetime</span><span class="p">:</span> <span class="mi">2022</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mi">17</span><span class="n">T07</span><span class="p">:</span><span class="mi">37</span><span class="p">:</span><span class="mf">05.563307</span><span class="p">,</span> <span class="n">timezone_offset</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="n">utc</span> <span class="n">datetime</span><span class="p">:</span> <span class="mi">2022</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mi">17</span><span class="n">T07</span><span class="p">:</span><span class="mi">37</span><span class="p">:</span><span class="mf">03.638910</span><span class="p">,</span> <span class="n">timezone_offset</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="s2">&#34;nebula-graphd-1.nebula-graphd-svc.default.svc.cluster.local:9669&#34;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s2">&#34;172.17.0.1&#34;</span><span class="p">])</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="底层存储接口的暴露" class="headerLink">
    <a href="#%e5%ba%95%e5%b1%82%e5%ad%98%e5%82%a8%e6%8e%a5%e5%8f%a3%e7%9a%84%e6%9a%b4%e9%9c%b2" class="header-mark"></a>3.2 底层存储接口的暴露</h3><p>在 NebulaGraph 中，我们可以通过 StorageClient 来访问底层的存储接口，这个接口可以用来做一些分析型、数据全扫描计算的工作。</p>
<p>然而存储层的分布式服务实例不像 GraphD 那样，它们是有状态的，这其实与 K8s 或者 Docker Compose 的部署模型是相违背的，如果访问的应用 StorageD 客户端在集群外部，我们需要在 NebulaGraph 集群中的每一个存储实例上都部署一个代理（Service），这非常不方便，有时候还是一种浪费。</p>
<p>此外，由于 NebulaGraph 内部服务发现机制和 StorageD 客户端的实现机制决定，每一个 storaged 服务实体都是由其内部的 <code>host:port</code> 唯一确定和寻址的，这给我们中间的代理工作也带来了一些麻烦。</p>
<p>总结来看，我们的需求是：</p>
<ul>
<li>能够从集群外部访问 NebulaGraph 的存储层每一个实例</li>
<li>每一个实例的访问地址（host:port）和内部的地址是完全一致的</li>
</ul>
<p>为了实现这个需求，我之前的做法是为每一个实例单独部署一个 GraphD 代理（消耗一个地址，保证端口不变），再在外部手动搭一个 nginx 作为代理，配合 DNS 把内部的地址解析 nginx 上，然后通过域名找到上游（每一个单独的 GraphD 代理）。</p>
<blockquote>
<p>注：我在这两个 gist 里给出了这个方法的实验步骤：</p>
<ul>
<li><a href="https://gist.github.com/wey-gu/950e4f4c673badae375e59007d80d372" target="_blank" rel="noopener noreferrer">https://gist.github.com/wey-gu/950e4f4c673badae375e59007d80d372</a></li>
<li><a href="https://gist.github.com/wey-gu/699b9a2ef5dff5f0fb5f288d692ddfd5" target="_blank" rel="noopener noreferrer">https://gist.github.com/wey-gu/699b9a2ef5dff5f0fb5f288d692ddfd5</a></li>
</ul>
</blockquote>
<p>最近，我找到了一个相对优雅的可维护的方式：</p>
<ul>
<li>在 NebulaGraph 集群同一个命名空间下引入一个 APISIX 网关</li>
<li>利用 APISIX 中的 nginx TCP 代理的封装：<a href="https://apisix.apache.org/docs/apisix/stream-proxy/" target="_blank" rel="noopener noreferrer">stream-proxy</a>来暴露 storeaged 的接口</li>
<li>为了最终只利用一个集群的出口（Service，我们利用其支持的 TLSv1.3 中的 extend host name 字段：SNI 来路由上游），做到用不同域名的 TCP over TLS 指向后端的不同 storaged</li>
<li>最终，只需要 Storage 客户端能支持 TLSv1.3（发送 SNI），并且能解析所有 StorageD 的地址到 APISIX 的 Service 上即可</li>
</ul>
<p>示例图：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">           ┌────────────────────────────────────────────────────────────────────────────────────┐
</span></span><span class="line"><span class="cl">           │  K8s Cluster                                                                       │
</span></span><span class="line"><span class="cl">           │                                                      ┌──────────────────────────┐  │
</span></span><span class="line"><span class="cl">           │          ┌────────────────────────────────────┐      │ NebulaGraph Cluster      │  │
</span></span><span class="line"><span class="cl">           │          │  APISIX API-GATEWAY                │      │       ┌──────────────┐   │  │
</span></span><span class="line"><span class="cl">           │          │                                    │      │       │ Storaged-0   │   │  │
</span></span><span class="line"><span class="cl">           │          │                                    │ ┌────┼──────▶│              │   │  │
</span></span><span class="line"><span class="cl">           │          │                                    │ │    │       │              │   │  │
</span></span><span class="line"><span class="cl">           │          │   ┌────────────────────────────┐   │ │    │       └──────────────┘   │  │
</span></span><span class="line"><span class="cl">           │          │   │ stream-proxy               │   │ │    │                          │  │
</span></span><span class="line"><span class="cl">  ┌─────┐  │ .─────.  │   │                ┌────┐      │   │ │    │       ┌──────────────┐   │  │
</span></span><span class="line"><span class="cl">  │     │  │╱       ╲ │   │  - addr: 9559  │    │──────┼───┼─┘    │       │ Storaged-1   │   │  │
</span></span><span class="line"><span class="cl">━━┫ DNS ┣━━( Service )╋━━━╋▶   tls: true   │    │      │   │ ┌────┼──────▶│              │   │  │
</span></span><span class="line"><span class="cl">  │     │  │`.     ,&#39; │   │                │    │──────┼───┼─┘    │       │              │   │  │
</span></span><span class="line"><span class="cl">  └─────┘  │  `───&#39;   │   │                │    │      │   │      │       └──────────────┘   │  │
</span></span><span class="line"><span class="cl">           │          │   │                │SNI │      │   │      │                          │  │
</span></span><span class="line"><span class="cl">           │          │   │                │    │──────┼───┼─┐    │       ┌──────────────┐   │  │
</span></span><span class="line"><span class="cl">           │          │   │                │    │      │   │ │    │       │ Storaged-2   │   │  │
</span></span><span class="line"><span class="cl">           │          │   │                │    │      │   │ └────┼──────▶│              │   │  │
</span></span><span class="line"><span class="cl">           │          │   │                │    │──────┼───┼─┐    │       │              │   │  │
</span></span><span class="line"><span class="cl">           │          │   │                └────┘      │   │ │    │       └──────────────┘   │  │
</span></span><span class="line"><span class="cl">           │          │   └────────────────────────────┘   │ │    │                          │  │
</span></span><span class="line"><span class="cl">           │          │                                    │ │    │       ┌──────────────┐   │  │
</span></span><span class="line"><span class="cl">           │          │                                    │ │    │       │ Storaged-3   │   │  │
</span></span><span class="line"><span class="cl">           │          │                                    │ └────┼──────▶│              │   │  │
</span></span><span class="line"><span class="cl">           │          │                                    │      │       │              │   │  │
</span></span><span class="line"><span class="cl">           │          │                                    │      │       └──────────────┘   │  │
</span></span><span class="line"><span class="cl">           │          └────────────────────────────────────┘      └──────────────────────────┘  │
</span></span><span class="line"><span class="cl">           │                                                                                    │
</span></span><span class="line"><span class="cl">           └────────────────────────────────────────────────────────────────────────────────────┘
</span></span></code></pre></td></tr></table>
</div>
</div><p>这样做的好处是：</p>
<ul>
<li>在 APISIX 中比较优雅地维护代理的配置，并且可以用到 APISIX 这些现代化的流量管理能力</li>
<li>不需要为每一个 StorageD 单独创建 Service，只需要一个 Service，出集群地址 就可以了</li>
<li>为流量增加了 TLSv1.3 的加密，提高了安全性同时没有给 NebulaGraph 集群内部的南北流量带来的性能损耗</li>
</ul>
<p>在本文的结尾，我会给出一个实操的实验过程，这里包含了本文提到的所有要点和细节。</p>
<h3 id="传输层的加密" class="headerLink">
    <a href="#%e4%bc%a0%e8%be%93%e5%b1%82%e7%9a%84%e5%8a%a0%e5%af%86" class="header-mark"></a>3.3 传输层的加密</h3><p>我们在前一个问题中提及到了，在 APISIX 网关中 terminate TLSv1.3 的连接，借助 SNI 信息路由 StorageD 的方法，其实，单独将 GraphD 接口的 TLS 交给网关来做，好处也是非常明显的：</p>
<ul>
<li>证书管理在统一的网关控制面做，更加方便</li>
<li>证书运维无 NebulaGraph 集群配置侵入（NebulaGraph 原生支持 TLS 加密，但是加密之后带来了集群内部通信的开销，而且配置和集群其他层面配置在一起，证书更新涉及进程重启，不够灵活）</li>
</ul>
<p>具体的方法在后边实操中也是有体现的。</p>
<h2 id="实操利用-apisix-的-stream-proxy-暴露-storaged-的接口" class="headerLink">
    <a href="#%e5%ae%9e%e6%93%8d%e5%88%a9%e7%94%a8-apisix-%e7%9a%84-stream-proxy-%e6%9a%b4%e9%9c%b2-storaged-%e7%9a%84%e6%8e%a5%e5%8f%a3" class="header-mark"></a>4 实操：利用 APISIX 的 stream-proxy 暴露 StorageD 的接口</h2><h3 id="实验环境minikube" class="headerLink">
    <a href="#%e5%ae%9e%e9%aa%8c%e7%8e%af%e5%a2%83minikube" class="header-mark"></a>4.1 实验环境：minikube</h3><p>我们就在本地的 minikube 上做这个实验吧，首先启动一个 minikube，因为 APISIX 内部的 etcd 需要用到 storageclass，我们带上 穷人版的 storageclass 插件，同时，为了在 k8s 外部访问 storaged 的时候用和内部相同的域名和端口，我们把 node-port 允许的端口扩充到小于 9779 的范围。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">minikube start <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --addons<span class="o">=</span><span class="s2">&#34;default-storageclass&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --extra-config<span class="o">=</span>apiserver.service-node-port-range<span class="o">=</span>1-65535
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="实验环境nebulagraph-on-k8s" class="headerLink">
    <a href="#%e5%ae%9e%e9%aa%8c%e7%8e%af%e5%a2%83nebulagraph-on-k8s" class="header-mark"></a>4.2 实验环境：NebulaGraph on K8s</h3><p>这里，我们使用 Nebula Operator 来部署 NebulaGraph 集群，具体的部署方法可以参考 <a href="https://docs.nebula-graph.com.cn/3.3.0/nebula-operator/1.introduction-to-nebula-operator/" target="_blank" rel="noopener noreferrer">Nebula Operator 文档</a>。</p>
<p>咱们做实验，就偷个懒，用我写的 <a href="https://github.com/wey-gu/nebula-operator-kind" target="_blank" rel="noopener noreferrer">Nebula-Operator-KinD</a> 来一键部署：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -sL nebula-kind.siwei.io/install-on-k8s.sh <span class="p">|</span> bash
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="实验环境apisix-on-k8s" class="headerLink">
    <a href="#%e5%ae%9e%e9%aa%8c%e7%8e%af%e5%a2%83apisix-on-k8s" class="header-mark"></a>4.3 实验环境：APISIX on k8s</h3><p>首先是安装，在 Helm 参数中指定打开 stream-proxy 的开关：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">helm repo add apisix https://charts.apiseven.com
</span></span><span class="line"><span class="cl">helm repo add bitnami https://charts.bitnami.com/bitnami
</span></span><span class="line"><span class="cl">helm repo update
</span></span><span class="line"><span class="cl">helm install apisix apisix/apisix <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --set gateway.type<span class="o">=</span>NodePort <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --set gateway.stream.enabled<span class="o">=</span><span class="nb">true</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --set ingress-controller.enabled<span class="o">=</span><span class="nb">true</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># dashboard 也装上，方便我们绕过 admin API call 做一些方便的操作。</span>
</span></span><span class="line"><span class="cl">helm install apisix-dashboard apisix/apisix-dashboard
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后，因为截止到现在，APISIX 的 Helm Chart 之中并没有提供 stream-proxy TCP 的监听端口的 TLS 支持的配置格式，见 <a href="https://github.com/apache/apisix-helm-chart/issues/348" target="_blank" rel="noopener noreferrer">https://github.com/apache/apisix-helm-chart/issues/348</a> ，我们需要手动更改 APISIX 的 configmap，把 stream-proxy 的 TLS 配置加上：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubectl edit ConfigMap apisix
</span></span></code></pre></td></tr></table>
</div>
</div><p>我们编辑把 <code>stream_proxy.tcp</code> 改写成这样：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="w">     </span><span class="nt">stream_proxy</span><span class="p">:</span><span class="w">                 </span><span class="c"># TCP/UDP proxy</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="nt">only</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="nt">tcp</span><span class="p">:</span><span class="w">                        </span><span class="c"># TCP proxy port list</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">         </span>- <span class="nt">addr</span><span class="p">:</span><span class="w"> </span><span class="m">9779</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">           </span><span class="nt">tls</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">         </span>- <span class="nt">addr</span><span class="p">:</span><span class="w"> </span><span class="m">9559</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">           </span><span class="nt">tls</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这里我们需要重建 APISIX Pod，因为 APISIX 的 stream-proxy 的 TLS 配置是在启动的时候加载的，所以我们需要重建 APISIX Pod：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubectl delete <span class="k">$(</span>kubectl get po -l <span class="s2">&#34;app.kubernetes.io/name=apisix&#34;</span> -o name<span class="k">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="开始实验" class="headerLink">
    <a href="#%e5%bc%80%e5%a7%8b%e5%ae%9e%e9%aa%8c" class="header-mark"></a>4.4 开始实验</h3><p>我们看看这个实验的目标，就是把 NebulaGraph 的 StorageD 的接口暴露出来，让外部的客户端可以访问到，而暴露的方式如图：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">           ┌────────────────────────────────────────────────────────────────────────────────────┐
</span></span><span class="line"><span class="cl">           │  K8s Cluster                                                                       │
</span></span><span class="line"><span class="cl">           │                                                      ┌──────────────────────────┐  │
</span></span><span class="line"><span class="cl">           │          ┌────────────────────────────────────┐      │ NebulaGraph Cluster      │  │
</span></span><span class="line"><span class="cl">           │          │  APISIX API-GATEWAY                │      │       ┌──────────────┐   │  │
</span></span><span class="line"><span class="cl">           │          │                                    │      │       │ Storaged-0   │   │  │
</span></span><span class="line"><span class="cl">           │          │                                    │ ┌────┼──────▶│              │   │  │
</span></span><span class="line"><span class="cl">           │          │                                    │ │    │       │              │   │  │
</span></span><span class="line"><span class="cl">           │          │   ┌────────────────────────────┐   │ │    │       └──────────────┘   │  │
</span></span><span class="line"><span class="cl">           │          │   │ stream-proxy               │   │ │    │                          │  │
</span></span><span class="line"><span class="cl">  ┌─────┐  │ .─────.  │   │                ┌────┐      │   │ │    │       ┌──────────────┐   │  │
</span></span><span class="line"><span class="cl">  │     │  │╱       ╲ │   │  - addr: 9559  │    │──────┼───┼─┘    │       │ Storaged-1   │   │  │
</span></span><span class="line"><span class="cl">━━┫ DNS ┣━━( Service )╋━━━╋▶   tls: true   │    │      │   │ ┌────┼──────▶│              │   │  │
</span></span><span class="line"><span class="cl">  │     │  │`.     ,&#39; │   │                │    │──────┼───┼─┘    │       │              │   │  │
</span></span><span class="line"><span class="cl">  └─────┘  │  `───&#39;   │   │                │    │      │   │      │       └──────────────┘   │  │
</span></span><span class="line"><span class="cl">           │          │   │                │SNI │      │   │      │                          │  │
</span></span><span class="line"><span class="cl">           │          │   │                │    │──────┼───┼─┐    │       ┌──────────────┐   │  │
</span></span><span class="line"><span class="cl">           │          │   │                │    │      │   │ │    │       │ Storaged-2   │   │  │
</span></span><span class="line"><span class="cl">           │          │   │                │    │      │   │ └────┼──────▶│              │   │  │
</span></span><span class="line"><span class="cl">           │          │   │                │    │──────┼───┼─┐    │       │              │   │  │
</span></span><span class="line"><span class="cl">           │          │   │                └────┘      │   │ │    │       └──────────────┘   │  │
</span></span><span class="line"><span class="cl">           │          │   └────────────────────────────┘   │ │    │                          │  │
</span></span><span class="line"><span class="cl">           │          │                                    │ │    │       ┌──────────────┐   │  │
</span></span><span class="line"><span class="cl">           │          │                                    │ │    │       │ Storaged-3   │   │  │
</span></span><span class="line"><span class="cl">           │          │                                    │ └────┼──────▶│              │   │  │
</span></span><span class="line"><span class="cl">           │          │                                    │      │       │              │   │  │
</span></span><span class="line"><span class="cl">           │          │                                    │      │       └──────────────┘   │  │
</span></span><span class="line"><span class="cl">           │          └────────────────────────────────────┘      └──────────────────────────┘  │
</span></span><span class="line"><span class="cl">           │                                                                                    │
</span></span><span class="line"><span class="cl">           └────────────────────────────────────────────────────────────────────────────────────┘
</span></span></code></pre></td></tr></table>
</div>
</div><p>我们已经有了所有的框架，我们要往里填箭头和圆圈了。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ kubectl get po
</span></span><span class="line"><span class="cl">NAME                                         READY   STATUS     RESTARTS      AGE
</span></span><span class="line"><span class="cl">apisix-6d89854bc5-5m788                      1/1     Running    <span class="m">1</span> <span class="o">(</span>31h ago<span class="o">)</span>   2d4h
</span></span><span class="line"><span class="cl">apisix-dashboard-b544bd766-nh79j             1/1     Running    <span class="m">8</span> <span class="o">(</span>31h ago<span class="o">)</span>   2d10h
</span></span><span class="line"><span class="cl">apisix-etcd-0                                1/1     Running    <span class="m">2</span> <span class="o">(</span>31h ago<span class="o">)</span>   2d10h
</span></span><span class="line"><span class="cl">apisix-etcd-1                                1/1     Running    <span class="m">2</span> <span class="o">(</span>31h ago<span class="o">)</span>   2d10h
</span></span><span class="line"><span class="cl">apisix-etcd-2                                1/1     Running    <span class="m">2</span> <span class="o">(</span>31h ago<span class="o">)</span>   2d10h
</span></span><span class="line"><span class="cl">nebula-graphd-0                              1/1     Running    <span class="m">2</span> <span class="o">(</span>31h ago<span class="o">)</span>   3d4h
</span></span><span class="line"><span class="cl">nebula-metad-0                               1/1     Running    <span class="m">2</span> <span class="o">(</span>31h ago<span class="o">)</span>   3d4h
</span></span><span class="line"><span class="cl">nebula-storaged-0                            1/1     Running    <span class="m">2</span> <span class="o">(</span>31h ago<span class="o">)</span>   3d4h
</span></span><span class="line"><span class="cl">nebula-storaged-1                            1/1     Running    <span class="m">2</span> <span class="o">(</span>31h ago<span class="o">)</span>   3d4h
</span></span><span class="line"><span class="cl">nebula-storaged-2                            1/1     Running    <span class="m">2</span> <span class="o">(</span>31h ago<span class="o">)</span>   3d4h
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="配置-apisix-的-stream-proxy" class="headerLink">
    <a href="#%e9%85%8d%e7%bd%ae-apisix-%e7%9a%84-stream-proxy" class="header-mark"></a>4.4.1 配置 APISIX 的 stream-proxy</h4><p>参考 APISIX 文档：https://apisix.apache.org/docs/apisix/stream-proxy/#accept-tls-over-tcp-connection</p>
<p>我们用 APISIX 的 API 来配置 stream-proxy：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">apisix_api_key</span><span class="o">=</span><span class="s2">&#34;edd1c9f034335f136f87ad84b625c8f1&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">apisix_pod</span><span class="o">=</span><span class="k">$(</span>kubectl get po -l <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="s2">&#34;app.kubernetes.io/name=apisix&#34;</span> -o name<span class="k">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">kubectl <span class="nb">exec</span> -it <span class="nv">$apisix_pod</span> -- <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    curl http://127.0.0.1:9180/apisix/admin/stream_routes/1 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -H <span class="s2">&#34;X-API-KEY: </span><span class="nv">$apisix_api_key</span><span class="s2">&#34;</span> -X PUT -d <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span><span class="s1">&#39;{
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#34;sni&#34;: &#34;nebula-storaged-0.nebula-storaged-headless.default.svc.cluster.local&#34;,
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#34;upstream&#34;: {
</span></span></span><span class="line"><span class="cl"><span class="s1">        &#34;nodes&#34;: {
</span></span></span><span class="line"><span class="cl"><span class="s1">            &#34;172.17.0.13:9779&#34;: 1
</span></span></span><span class="line"><span class="cl"><span class="s1">        },
</span></span></span><span class="line"><span class="cl"><span class="s1">        &#34;type&#34;: &#34;roundrobin&#34;
</span></span></span><span class="line"><span class="cl"><span class="s1">    }
</span></span></span><span class="line"><span class="cl"><span class="s1">}&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">kubectl <span class="nb">exec</span> -it <span class="nv">$apisix_pod</span> -- <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    curl http://127.0.0.1:9180/apisix/admin/stream_routes/2 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -H <span class="s2">&#34;X-API-KEY: </span><span class="nv">$apisix_api_key</span><span class="s2">&#34;</span> -X PUT -d <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span><span class="s1">&#39;{
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#34;sni&#34;: &#34;nebula-storaged-1.nebula-storaged-headless.default.svc.cluster.local&#34;,
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#34;upstream&#34;: {
</span></span></span><span class="line"><span class="cl"><span class="s1">        &#34;nodes&#34;: {
</span></span></span><span class="line"><span class="cl"><span class="s1">            &#34;172.17.0.18:9779&#34;: 1
</span></span></span><span class="line"><span class="cl"><span class="s1">        },
</span></span></span><span class="line"><span class="cl"><span class="s1">        &#34;type&#34;: &#34;roundrobin&#34;
</span></span></span><span class="line"><span class="cl"><span class="s1">    }
</span></span></span><span class="line"><span class="cl"><span class="s1">}&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">kubectl <span class="nb">exec</span> -it <span class="nv">$apisix_pod</span> -- <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    curl http://127.0.0.1:9180/apisix/admin/stream_routes/3 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -H <span class="s2">&#34;X-API-KEY: </span><span class="nv">$apisix_api_key</span><span class="s2">&#34;</span> -X PUT -d <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span><span class="s1">&#39;{
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#34;sni&#34;: &#34;nebula-storaged-2.nebula-storaged-headless.default.svc.cluster.local&#34;,
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#34;upstream&#34;: {
</span></span></span><span class="line"><span class="cl"><span class="s1">        &#34;nodes&#34;: {
</span></span></span><span class="line"><span class="cl"><span class="s1">            &#34;172.17.0.5:9779&#34;: 1
</span></span></span><span class="line"><span class="cl"><span class="s1">        },
</span></span></span><span class="line"><span class="cl"><span class="s1">        &#34;type&#34;: &#34;roundrobin&#34;
</span></span></span><span class="line"><span class="cl"><span class="s1">    }
</span></span></span><span class="line"><span class="cl"><span class="s1">}&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>注意，当下，APISIX 的 stream-proxy 上游节点不支持域名解析，是受限于上游的 lua 库，详见我报的 issue：https://github.com/apache/apisix/issues/8334 ，理想情况下，我们这里应该给出每一个 storaged 的 SNI 相同的地址作为 <code>upstream.nodes</code>，好像：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubectl <span class="nb">exec</span> -it <span class="nv">$apisix_pod</span> -- <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    curl http://127.0.0.1:9180/apisix/admin/stream_routes/1 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -H <span class="s2">&#34;X-API-KEY: </span><span class="nv">$apisix_api_key</span><span class="s2">&#34;</span> -X PUT -d <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span><span class="s1">&#39;{
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#34;sni&#34;: &#34;nebula-storaged-0.nebula-storaged-headless.default.svc.cluster.local&#34;,
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#34;upstream&#34;: {
</span></span></span><span class="line"><span class="cl"><span class="s1">        &#34;nodes&#34;: {
</span></span></span><span class="line"><span class="cl"><span class="s1">            &#34;nebula-storaged-0.nebula-storaged-headless.default.svc.cluster.local&#34;: 1
</span></span></span><span class="line"><span class="cl"><span class="s1">        },
</span></span></span><span class="line"><span class="cl"><span class="s1">        &#34;type&#34;: &#34;roundrobin&#34;
</span></span></span><span class="line"><span class="cl"><span class="s1">    }
</span></span></span><span class="line"><span class="cl"><span class="s1">}&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div></blockquote>
<h4 id="配置-apisix-中-storaged-地址的-tls-证书" class="headerLink">
    <a href="#%e9%85%8d%e7%bd%ae-apisix-%e4%b8%ad-storaged-%e5%9c%b0%e5%9d%80%e7%9a%84-tls-%e8%af%81%e4%b9%a6" class="header-mark"></a>4.4.2 配置 APISIX 中 storaged 地址的 TLS 证书</h4><p>在生产环境下，我们应该云原生的方式去管理自签或者公共信任的证书，这里，我们就手动利用 mkcert 工具来做这件事儿。</p>
<p>安装 mkcert</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 首次运行，需要安装 mkcert，并且生成根证书</span>
</span></span><span class="line"><span class="cl"><span class="c1"># macOS 的话</span>
</span></span><span class="line"><span class="cl">brew install mkcert
</span></span><span class="line"><span class="cl"><span class="c1"># ubuntu 的话</span>
</span></span><span class="line"><span class="cl">apt-get install wget libnss3-tools
</span></span><span class="line"><span class="cl"><span class="c1"># 然后再去 https://github.com/FiloSottile/mkcert/releases/ 下载 mkcert</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>签发证书：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkcert <span class="s1">&#39;*.nebula-storaged-headless.default.svc.cluster.local&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>利用 APISIX-dashboard 将证书导入到 APISIX 之中</p>
<p>单独开一个终端，运行：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">POD_NAME</span><span class="o">=</span><span class="k">$(</span><span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    kubectl get pods <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -l <span class="s2">&#34;app.kubernetes.io/name=apisix-dashboard,app.kubernetes.io/instance=apisix-dashboard&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -o <span class="nv">jsonpath</span><span class="o">=</span><span class="s2">&#34;{.items[0].metadata.name}&#34;</span><span class="k">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">CONTAINER_PORT</span><span class="o">=</span><span class="k">$(</span><span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    kubectl get pod <span class="nv">$POD_NAME</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -o <span class="nv">jsonpath</span><span class="o">=</span><span class="s2">&#34;{.spec.containers[0].ports[0].containerPort}&#34;</span><span class="k">)</span>
</span></span><span class="line"><span class="cl">kubectl <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    port-forward <span class="nv">$POD_NAME</span> 8080:<span class="nv">$CONTAINER_PORT</span> --address<span class="o">=</span><span class="s1">&#39;0.0.0.0&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>浏览器访问 http://10.1.1.168:8080/ssl/list ，账号密码都是 <code>admin</code> ，点击 <code>Create</code> 按钮，将刚刚生成的证书导入到 APISIX 之中。</p>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/202471244-7081b37e-1e8f-4298-8887-db2feefe74a2.png" title="https://user-images.githubusercontent.com/1651790/202471244-7081b37e-1e8f-4298-8887-db2feefe74a2.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/202471244-7081b37e-1e8f-4298-8887-db2feefe74a2.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/202471244-7081b37e-1e8f-4298-8887-db2feefe74a2.png"
            srcset="https://user-images.githubusercontent.com/1651790/202471244-7081b37e-1e8f-4298-8887-db2feefe74a2.png, https://user-images.githubusercontent.com/1651790/202471244-7081b37e-1e8f-4298-8887-db2feefe74a2.png 1.5x, https://user-images.githubusercontent.com/1651790/202471244-7081b37e-1e8f-4298-8887-db2feefe74a2.png 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/202471244-7081b37e-1e8f-4298-8887-db2feefe74a2.png">
    </a></figure></p>
<h4 id="增加-apisix-的-nodeport-service" class="headerLink">
    <a href="#%e5%a2%9e%e5%8a%a0-apisix-%e7%9a%84-nodeport-service" class="header-mark"></a>4.4.3 增加 APISIX 的 NodePort Service</h4><p>创建一个 NodePort Service，用于暴露 APISIX 的 9779 端口，这样，我们就可以通过外部的 IP 地址访问到 APISIX 了。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">cat <span class="s">&lt;&lt;EOF | kubectl apply -f -
</span></span></span><span class="line"><span class="cl"><span class="s">spec:
</span></span></span><span class="line"><span class="cl"><span class="s">  selector:
</span></span></span><span class="line"><span class="cl"><span class="s">    app.kubernetes.io/instance: apisix
</span></span></span><span class="line"><span class="cl"><span class="s">    app.kubernetes.io/name: apisix
</span></span></span><span class="line"><span class="cl"><span class="s">  ports:
</span></span></span><span class="line"><span class="cl"><span class="s">    - protocol: TCP
</span></span></span><span class="line"><span class="cl"><span class="s">      port: 9779
</span></span></span><span class="line"><span class="cl"><span class="s">      targetPort: 9779
</span></span></span><span class="line"><span class="cl"><span class="s">      name: thrift
</span></span></span><span class="line"><span class="cl"><span class="s">      nodePort: 9779
</span></span></span><span class="line"><span class="cl"><span class="s">  type: NodePort
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>因为前边 minikube 中我们配置了端口的范围覆盖到了 9779，所以我们可以看到，这个 NodePort Service 的端口在宿主机上也可以从 minikube ip 的同一个端口访问到：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ minikube service apisix-svc
</span></span><span class="line"><span class="cl">$ minikube service list
</span></span><span class="line"><span class="cl"><span class="p">|</span>------------------------<span class="p">|</span>---------------------------------<span class="p">|</span>-------------------<span class="p">|</span>---------------------------<span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>       NAMESPACE        <span class="p">|</span>              NAME               <span class="p">|</span>    TARGET PORT    <span class="p">|</span>            URL            <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>------------------------<span class="p">|</span>---------------------------------<span class="p">|</span>-------------------<span class="p">|</span>---------------------------<span class="p">|</span>
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl"><span class="p">|</span> default                <span class="p">|</span> apisix-svc                      <span class="p">|</span> thrift/9779       <span class="p">|</span> http://192.168.49.2:9779  <span class="p">|</span>&lt;---
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl"><span class="p">|</span>------------------------<span class="p">|</span>---------------------------------<span class="p">|</span>-------------------<span class="p">|</span>---------------------------<span class="p">|</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>当然，minikube 假设我们的服务都是 HTTP 的，给出的 URL 是 HTTP:// 的，不用理会它，我们心里知道它是 TCP over TLS 就好了。</p>
<h4 id="配置-k8s-外部-dns" class="headerLink">
    <a href="#%e9%85%8d%e7%bd%ae-k8s-%e5%a4%96%e9%83%a8-dns" class="header-mark"></a>4.4.4 配置 K8s 外部 DNS</h4><p>我们需要配置一个 DNS 服务，让我们可以通过 <code>nebula-storaged-0.nebula-storaged-headless.default.svc.cluster.local</code> 等三个域名通过 minikube 的 NodePort Service 访问到我们的 NebulaGraph 的 storaged 服务。</p>
<p>获得 minikube 的 IP 地址：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ minikube ip
</span></span><span class="line"><span class="cl">192.168.49.2
</span></span></code></pre></td></tr></table>
</div>
</div><p>配置 <code>/etc/hosts</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">192.168.49.2 nebula-storaged-0.nebula-storaged-headless.default.svc.cluster.local
</span></span><span class="line"><span class="cl">192.168.49.2 nebula-storaged-1.nebula-storaged-headless.default.svc.cluster.local
</span></span><span class="line"><span class="cl">192.168.49.2 nebula-storaged-2.nebula-storaged-headless.default.svc.cluster.local
</span></span><span class="line"><span class="cl">192.168.49.2 nebula-metad-0.nebula-metad-headless.default.svc.cluster.local
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="验证-nebulagraph-storage-client-可以从所有的节点中获取到数据" class="headerLink">
    <a href="#%e9%aa%8c%e8%af%81-nebulagraph-storage-client-%e5%8f%af%e4%bb%a5%e4%bb%8e%e6%89%80%e6%9c%89%e7%9a%84%e8%8a%82%e7%82%b9%e4%b8%ad%e8%8e%b7%e5%8f%96%e5%88%b0%e6%95%b0%e6%8d%ae" class="header-mark"></a>4.4.5 验证 NebulaGraph Storage Client 可以从所有的节点中获取到数据</h4><p>这里，为了方便，我们用到 python 的客户端。</p>
<p>由于在写本文的时候，NebulaGraph Python 客户端的 StorageClient 尚未支持 TLS，对它支持的 PR 刚好是我为了本实验写的：https://github.com/vesoft-inc/nebula-python/pull/239 。</p>
<p>所以我们要从我的个人分支安装这个客户端：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone https://github.com/wey-gu/nebula-python.git
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> nebula-python
</span></span><span class="line"><span class="cl">python3 -m pip install .
</span></span><span class="line"><span class="cl">python3 -m pip install ipython
</span></span><span class="line"><span class="cl"><span class="c1"># 进入 ipython</span>
</span></span><span class="line"><span class="cl">ipython
</span></span></code></pre></td></tr></table>
</div>
</div><p>我们在 iPython 中交互式验证：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">nebula3.mclient</span> <span class="kn">import</span> <span class="n">MetaCache</span><span class="p">,</span> <span class="n">HostAddr</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">nebula3.sclient.GraphStorageClient</span> <span class="kn">import</span> <span class="n">GraphStorageClient</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">nebula3.Config</span> <span class="kn">import</span> <span class="n">SSL_config</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">ssl</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">meta_cache</span> <span class="o">=</span> <span class="n">MetaCache</span><span class="p">([(</span><span class="s1">&#39;nebula-metad-0.nebula-metad-headless.default.svc.cluster.local&#39;</span><span class="p">,</span> <span class="mi">9559</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">                       <span class="mi">50000</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">storage_addrs</span> <span class="o">=</span> <span class="p">[</span><span class="n">HostAddr</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="s1">&#39;nebula-storaged-0.nebula-storaged-headless.default.svc.cluster.local&#39;</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="mi">9779</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                 <span class="n">HostAddr</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="s1">&#39;nebula-storaged-1.nebula-storaged-headless.default.svc.cluster.local&#39;</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="mi">9779</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                 <span class="n">HostAddr</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="s1">&#39;nebula-storaged-2.nebula-storaged-headless.default.svc.cluster.local&#39;</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="mi">9779</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 自签证书配置</span>
</span></span><span class="line"><span class="cl"><span class="n">current_dir</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">abspath</span><span class="p">(</span><span class="s2">&#34;.&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ssl_config</span> <span class="o">=</span> <span class="n">SSL_config</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">ssl_config</span><span class="o">.</span><span class="n">cert_reqs</span> <span class="o">=</span> <span class="n">ssl</span><span class="o">.</span><span class="n">CERT_OPTIONAL</span>
</span></span><span class="line"><span class="cl"><span class="n">ssl_config</span><span class="o">.</span><span class="n">cert_reqs</span> <span class="o">=</span> <span class="n">ssl</span><span class="o">.</span><span class="n">CERT_OPTIONAL</span>
</span></span><span class="line"><span class="cl"><span class="n">ssl_config</span><span class="o">.</span><span class="n">ca_certs</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">expanduser</span><span class="p">(</span><span class="s2">&#34;~/.local/share/mkcert&#34;</span><span class="p">),</span> <span class="s1">&#39;rootCA.pem&#39;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ssl_config</span><span class="o">.</span><span class="n">keyfile</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">current_dir</span><span class="p">,</span> <span class="s1">&#39;nebula-storaged-headless.default.svc.cluster.local+1-key.pem&#39;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ssl_config</span><span class="o">.</span><span class="n">certfile</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">current_dir</span><span class="p">,</span> <span class="s1">&#39;nebula-storaged-headless.default.svc.cluster.local+1.pem&#39;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 实例化 StorageClient</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">graph_storage_client</span> <span class="o">=</span> <span class="n">GraphStorageClient</span><span class="p">(</span><span class="n">meta_cache</span><span class="p">,</span> <span class="n">storage_addrs</span><span class="p">,</span> <span class="mi">5000</span><span class="p">,</span> <span class="n">ssl_config</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 验证可以从所有的节点中获取到数据</span>
</span></span><span class="line"><span class="cl"><span class="n">resp</span> <span class="o">=</span> <span class="n">graph_storage_client</span><span class="o">.</span><span class="n">scan_vertex</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">space_name</span><span class="o">=</span><span class="s1">&#39;basketballplayer&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">tag_name</span><span class="o">=</span><span class="s1">&#39;player&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="n">resp</span><span class="o">.</span><span class="n">has_next</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">result</span> <span class="o">=</span> <span class="n">resp</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">vertex_data</span> <span class="ow">in</span> <span class="n">result</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="n">vertex_data</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>结果✅：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="p">(</span><span class="s2">&#34;player112&#34;</span> <span class="p">:</span><span class="n">player</span><span class="p">{</span><span class="n">name</span><span class="p">:</span> <span class="s2">&#34;Jonathon Simmons&#34;</span><span class="p">,</span> <span class="n">age</span><span class="p">:</span> <span class="mi">29</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="s2">&#34;player1120&#34;</span> <span class="p">:</span><span class="n">player</span><span class="p">{</span><span class="n">name</span><span class="p">:</span> <span class="s2">&#34;李四&#34;</span><span class="p">,</span> <span class="n">age</span><span class="p">:</span> <span class="mi">30</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="s2">&#34;player117&#34;</span> <span class="p">:</span><span class="n">player</span><span class="p">{</span><span class="n">name</span><span class="p">:</span> <span class="s2">&#34;Stephen Curry&#34;</span><span class="p">,</span> <span class="n">age</span><span class="p">:</span> <span class="mi">31</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="s2">&#34;player119&#34;</span> <span class="p">:</span><span class="n">player</span><span class="p">{</span><span class="n">name</span><span class="p">:</span> <span class="s2">&#34;Kevin Durant&#34;</span><span class="p">,</span> <span class="n">age</span><span class="p">:</span> <span class="mi">30</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="s2">&#34;player134&#34;</span> <span class="p">:</span><span class="n">player</span><span class="p">{</span><span class="n">name</span><span class="p">:</span> <span class="s2">&#34;Blake Griffin&#34;</span><span class="p">,</span> <span class="n">age</span><span class="p">:</span> <span class="mi">30</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="s2">&#34;player141&#34;</span> <span class="p">:</span><span class="n">player</span><span class="p">{</span><span class="n">name</span><span class="p">:</span> <span class="s2">&#34;Ray Allen&#34;</span><span class="p">,</span> <span class="n">age</span><span class="p">:</span> <span class="mi">43</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="s2">&#34;player144&#34;</span> <span class="p">:</span><span class="n">player</span><span class="p">{</span><span class="n">name</span><span class="p">:</span> <span class="s2">&#34;Shaquille O&#39;Neal&#34;</span><span class="p">,</span> <span class="n">age</span><span class="p">:</span> <span class="mi">47</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="s2">&#34;player149&#34;</span> <span class="p">:</span><span class="n">player</span><span class="p">{</span><span class="n">name</span><span class="p">:</span> <span class="s2">&#34;Ben Simmons&#34;</span><span class="p">,</span> <span class="n">age</span><span class="p">:</span> <span class="mi">22</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="s2">&#34;player100&#34;</span> <span class="p">:</span><span class="n">player</span><span class="p">{</span><span class="n">name</span><span class="p">:</span> <span class="s2">&#34;Tim Duncan&#34;</span><span class="p">,</span> <span class="n">age</span><span class="p">:</span> <span class="mi">42</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="s2">&#34;player101&#34;</span> <span class="p">:</span><span class="n">player</span><span class="p">{</span><span class="n">name</span><span class="p">:</span> <span class="s2">&#34;Tony Parker&#34;</span><span class="p">,</span> <span class="n">age</span><span class="p">:</span> <span class="mi">36</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="s2">&#34;player110&#34;</span> <span class="p">:</span><span class="n">player</span><span class="p">{</span><span class="n">name</span><span class="p">:</span> <span class="s2">&#34;Cory Joseph&#34;</span><span class="p">,</span> <span class="n">age</span><span class="p">:</span> <span class="mi">27</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="s2">&#34;player126&#34;</span> <span class="p">:</span><span class="n">player</span><span class="p">{</span><span class="n">name</span><span class="p">:</span> <span class="s2">&#34;Kyrie Irving&#34;</span><span class="p">,</span> <span class="n">age</span><span class="p">:</span> <span class="mi">26</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="s2">&#34;player131&#34;</span> <span class="p">:</span><span class="n">player</span><span class="p">{</span><span class="n">name</span><span class="p">:</span> <span class="s2">&#34;Paul George&#34;</span><span class="p">,</span> <span class="n">age</span><span class="p">:</span> <span class="mi">28</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="s2">&#34;player133&#34;</span> <span class="p">:</span><span class="n">player</span><span class="p">{</span><span class="n">name</span><span class="p">:</span> <span class="s2">&#34;Yao Ming&#34;</span><span class="p">,</span> <span class="n">age</span><span class="p">:</span> <span class="mi">38</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="s2">&#34;player140&#34;</span> <span class="p">:</span><span class="n">player</span><span class="p">{</span><span class="n">name</span><span class="p">:</span> <span class="s2">&#34;Grant Hill&#34;</span><span class="p">,</span> <span class="n">age</span><span class="p">:</span> <span class="mi">46</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="s2">&#34;player105&#34;</span> <span class="p">:</span><span class="n">player</span><span class="p">{</span><span class="n">name</span><span class="p">:</span> <span class="s2">&#34;Danny Green&#34;</span><span class="p">,</span> <span class="n">age</span><span class="p">:</span> <span class="mi">31</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="s2">&#34;player109&#34;</span> <span class="p">:</span><span class="n">player</span><span class="p">{</span><span class="n">name</span><span class="p">:</span> <span class="s2">&#34;Tiago Splitter&#34;</span><span class="p">,</span> <span class="n">age</span><span class="p">:</span> <span class="mi">34</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="s2">&#34;player111&#34;</span> <span class="p">:</span><span class="n">player</span><span class="p">{</span><span class="n">name</span><span class="p">:</span> <span class="s2">&#34;David West&#34;</span><span class="p">,</span> <span class="n">age</span><span class="p">:</span> <span class="mi">38</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>5 总结</h2><ul>
<li>NebulaGraph 查询接口的负载均衡可以借助 K8s Service来做；</li>
<li>NebulaGraph 底层存储接口的暴露在 K8s 中可以利用 APISIX Stream Proxy 和 SNI 来优雅实现；</li>
<li>利用 API 网关对出口传输层的加密是一个很好的选择，相较于用 NebulaGraph 原生的 TLS 的方式。</li>
</ul>
<h2 id="一些坑" class="headerLink">
    <a href="#%e4%b8%80%e4%ba%9b%e5%9d%91" class="header-mark"></a>6 一些坑</h2><ul>
<li>
<p>发现 fbthrift python 并不支持 发送 extend host name（SNI），https://github.com/vesoft-inc/nebula-python/pull/238 ，写了 PR 去做支持，这时候 APISIX 中的报错是 <code>failed to find SNI: </code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">2022/11/15 10:18:26 [error] 78#78: *1744270 stream [lua] init.lua:842: stream_ssl_phase(): failed to fetch ssl config: failed to find SNI: 
</span></span><span class="line"><span class="cl">please check if the client requests via IP or uses an outdated protocol. If you need to report an issue, provide a packet capture file of the TLS handshake., context: 
</span></span><span class="line"><span class="cl">ssl_certificate_by_lua*, client: 172.17.0.1, server: 0.0.0.0:9779
</span></span></code></pre></td></tr></table>
</div>
</div><p>参考：</p>
<ul>
<li><a href="https://docs.python.org/3/library/ssl.html#ssl.SSLContext.sslsocket_class" target="_blank" rel="noopener noreferrer">https://docs.python.org/3/library/ssl.html#ssl.SSLContext.sslsocket_class</a></li>
<li><a href="https://github.com/apache/thrift/commit/937228e030569bf25ceb379c9491426709792701" target="_blank" rel="noopener noreferrer">https://github.com/apache/thrift/commit/937228e030569bf25ceb379c9491426709792701</a></li>
<li><a href="https://github.com/apache/thrift/pull/894" target="_blank" rel="noopener noreferrer">https://github.com/apache/thrift/pull/894</a></li>
<li><a href="https://github.com/apache/thrift/blob/e8353cb46e9f5e71f9b76f55d6bf59530b7f98ef/lib/py/src/transport/TSSLSocket.py#L184" target="_blank" rel="noopener noreferrer">https://github.com/apache/thrift/blob/e8353cb46e9f5e71f9b76f55d6bf59530b7f98ef/lib/py/src/transport/TSSLSocket.py#L184</a></li>
</ul>
</li>
<li>
<p>发现 APISIX stream 里边不解析上游 node 域名，我查了所有一溜的 dns 都没有问题，去提了 issue 才知道是已知问题：https://github.com/apache/apisix/issues/8334，只好先手配 <code>IP:Port</code> 作罢。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">2022/11/15 12:26:59 [error] 44#44: *9538531 stream [lua] resolver.lua:47: parse_domain(): failed to parse domain: nebula-storaged-0.nebula-storaged-headless.default.svc.cluster.local, error: failed to query the DNS server: dns client error: 101 empty record received while prereading client data, client: 172.17.0.1, server: 0.0.0.0:9779
</span></span><span class="line"><span class="cl">2022/11/15 12:26:59 [error] 44#44: *9538531 stream [lua] upstream.lua:79: parse_domain_for_nodes(): dns resolver domain: nebula-storaged-0.nebula-storaged-headless.default.svc.cluster.local error: failed to query the DNS server: dns client error: 101 empty record received while prereading client data, client: 172.17.0.1, server: 0.0.0.0:9779
</span></span><span class="line"><span class="cl">2022/11/15 12:26:59 [error] 44#44: *9538531 stream [lua] init.lua:965: stream_preread_phase(): failed to set upstream: no valid upstream node while prereading client data, client: 172.17.0.1, server: 0.0.0.0:9779
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<blockquote>
<p>题图版权 <a href="https://unsplash.com/photos/IlxX7xnbRF8" target="_blank" rel="noopener noreferrer">Lars</a></p>
</blockquote>]]></description>
</item><item>
    <title>利用 dbt，基于表结构的 Nebulagraph 图建模与 ETL</title>
    <link>https://siwei.io/nebulagraph-etl-dbt/</link>
    <pubDate>Thu, 10 Nov 2022 20:19:45 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/nebulagraph-etl-dbt/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/nebulagraph-etl-dbt/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>如何把相对原始的数据处理、建模并导入 NebulaGraph？本文用一个端到端的示例演示，从多数据源聚合数据，清理、利用 dbt 转换成 NebulaGraph 建模的属性图点边记录，最后导入成图谱的全流程。</p>
</blockquote>
<!--

[TOC]

-->
<h2 id="任务" class="headerLink">
    <a href="#%e4%bb%bb%e5%8a%a1" class="header-mark"></a>1 任务</h2><p>假设作为一个类似于 Netflix、爱奇艺的服务提供商，我们需要利用 NebulaGraph 搭建一个用户-电影知识图谱，来辅助支撑推荐、问答和推荐理由等常见由图谱支撑的场景。</p>
<p>知识图谱需要的数据存在在不同的数据源，比如一些公开的 API、数仓中的不同数据库、静态的文件等。这时候，我们需要以下几个步骤来从数据构建图谱：</p>
<ul>
<li>分析可能获取的数据</li>
<li>选取关心的关联关系，图建模</li>
<li>抽取关联关系，导入图数据库</li>
</ul>
<h2 id="数据来源" class="headerLink">
    <a href="#%e6%95%b0%e6%8d%ae%e6%9d%a5%e6%ba%90" class="header-mark"></a>2 数据来源</h2><p>假设我们的数据来源是 <a href="https://www.omdb.org/en/us/content/Help:DataDownload" target="_blank" rel="noopener noreferrer">OMDB</a> 和 <a href="https://grouplens.org/datasets/movielens/" target="_blank" rel="noopener noreferrer">MovieLens</a>。</p>
<p>OMDB 是一个开放的电影数据库，本例中我们模拟公司内部的业务系统，我们可以获得的信息有：</p>
<ul>
<li>电影</li>
<li>电影的分类</li>
<li>电影中的工作人员（导演、动作指导、演员、后期制作等）</li>
<li>电影封面、宣传片等</li>
</ul>
<p>MovieLens 是一个开放的数据集，本例中我们模拟公司内部的用户数据，我们可以获得的信息有：</p>
<ul>
<li>用户</li>
<li>电影</li>
<li>用户对电影的评分交互</li>
</ul>
<h2 id="图建模" class="headerLink">
    <a href="#%e5%9b%be%e5%bb%ba%e6%a8%a1" class="header-mark"></a>3 图建模</h2><p>在前边我们推荐系统的文章中我们介绍了推荐系统在图上的一些基本的方法（文章的链接是 <a href="https://www.siwei.io/recommendation-system-with-graphdb/" target="_blank" rel="noopener noreferrer">www.siwei.io/recommendation-system-with-graphdb/</a>）。其中的基于内容过滤关注了用户&ndash;&gt;电影、电影&ndash;&gt;分类、电影&ndash;&gt;演员、电影&ndash;&gt;导演的关系，协同过滤的方法则关注用户&ndash;&gt;电影的关系，推荐理由服务则关注以上所有的关系，所以总结起来，我们需要的边有：</p>
<ul>
<li>
<p>watched(rate(double))</p>
</li>
<li>
<p>with_genre</p>
</li>
<li>
<p>directed_by</p>
</li>
<li>
<p>acted_by</p>
</li>
</ul>
<p>相应的，其中的顶点类型，我们先根据已有的信息中，顶点中可能需要被关注的信息作为属性，给出初始的规划：</p>
<ul>
<li>
<p>user(user_id)</p>
</li>
<li>
<p>movie(name)</p>
</li>
<li>
<p>person(name, birthdate)</p>
</li>
<li>
<p>genre(name)</p>
</li>
</ul>
<p><figure><a class="lightgallery" href="/nebulagraph-etl-dbt/schema_0.webp" title="schema_0" data-thumbnail="/nebulagraph-etl-dbt/schema_0.webp">
        <img
            
            loading="lazy"
            src="/nebulagraph-etl-dbt/schema_0.webp"
            srcset="/nebulagraph-etl-dbt/schema_0.webp, /nebulagraph-etl-dbt/schema_0.webp 1.5x, /nebulagraph-etl-dbt/schema_0.webp 2x"
            sizes="auto"
            alt="/nebulagraph-etl-dbt/schema_0.webp">
    </a></figure></p>
<h2 id="数据转换" class="headerLink">
    <a href="#%e6%95%b0%e6%8d%ae%e8%bd%ac%e6%8d%a2" class="header-mark"></a>4 数据转换</h2><p>有了目标的图谱结构定义，我们来看看手上的数据如何映射到它。</p>
<h3 id="omdb-数据" class="headerLink">
    <a href="#omdb-%e6%95%b0%e6%8d%ae" class="header-mark"></a>4.1 OMDB 数据</h3><p>首先是 OMDB 中的数据，它由很多表组成，比如 <code>all_movies</code> 这张表，存储了所有的电影、以及它们在不同语言下的名字：</p>
<table>
<thead>
<tr>
<th>movie_id</th>
<th>name</th>
<th>language_iso_639_1</th>
<th>official_translation</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Cowboy Bebop</td>
<td>de</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>Cowboy Bebop</td>
<td>en</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>Ariel - Abgebrannt in Helsinki</td>
<td>de</td>
<td>0</td>
</tr>
<tr>
<td>3</td>
<td>Shadows in Paradise</td>
<td>en</td>
<td>0</td>
</tr>
<tr>
<td>3</td>
<td>Im Schatten des Paradieses</td>
<td>de</td>
<td>0</td>
</tr>
<tr>
<td>3</td>
<td>Schatten im Paradies</td>
<td>de</td>
<td>1</td>
</tr>
</tbody>
</table>
<p>而 <code>all_casts</code> 表格中保有所有电影相关的工作人员：</p>
<table>
<thead>
<tr>
<th>movie_id</th>
<th>person_id</th>
<th>job_id</th>
<th>role</th>
<th>position</th>
</tr>
</thead>
<tbody>
<tr>
<td>11</td>
<td>1</td>
<td>21</td>
<td></td>
<td>1</td>
</tr>
<tr>
<td>11</td>
<td>1</td>
<td>13</td>
<td></td>
<td>1</td>
</tr>
<tr>
<td>11</td>
<td>2</td>
<td>15</td>
<td>Luke Skywalker</td>
<td>1</td>
</tr>
<tr>
<td>11</td>
<td>3</td>
<td>15</td>
<td>Han Solo</td>
<td>3</td>
</tr>
<tr>
<td>11</td>
<td>4</td>
<td>15</td>
<td>Leia Organa</td>
<td>2</td>
</tr>
</tbody>
</table>
<p>但是这里的每一个人的姓名等信息、以及他/她在电影中任职的职位，则分别在另外的表中：</p>
<ul>
<li>
<p><code>job_names</code></p>
<p>比如 1 代表编剧、2 代表制作人，有意思的是，和电影 id 与姓名一样，job_id 到 name 是一对多的关系，因为 OMDB 中的数据都是多语言的。</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>job_id</th>
<th>name</th>
<th>language_iso_639_1</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Autoren</td>
<td>de</td>
</tr>
<tr>
<td>1</td>
<td>Writing Department</td>
<td>en</td>
</tr>
<tr>
<td>1</td>
<td>Departamento de redacción</td>
<td>es</td>
</tr>
<tr>
<td>1</td>
<td>Département écriture</td>
<td>fr</td>
</tr>
<tr>
<td>1</td>
<td>Scenariusz</td>
<td>pl</td>
</tr>
<tr>
<td>2</td>
<td>Produzenten</td>
<td>de</td>
</tr>
<tr>
<td>2</td>
<td>Production Department</td>
<td>en</td>
</tr>
</tbody>
</table>
<ul>
<li><code>all_people</code></li>
</ul>
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
<th>birthday</th>
<th>deathday</th>
<th>gender</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>George Lucas</td>
<td>1944-05-14</td>
<td>\N</td>
<td>0</td>
</tr>
<tr>
<td>2</td>
<td>Mark Hamill</td>
<td>1951-09-25</td>
<td>\N</td>
<td>0</td>
</tr>
<tr>
<td>3</td>
<td>Harrison Ford</td>
<td>1942-07-13</td>
<td>\N</td>
<td>0</td>
</tr>
<tr>
<td>4</td>
<td>Carrie Fisher</td>
<td>1956-10-21</td>
<td>2016-12-27</td>
<td>1</td>
</tr>
<tr>
<td>5</td>
<td>Peter Cushing</td>
<td>1913-05-26</td>
<td>1994-08-11</td>
<td>0</td>
</tr>
<tr>
<td>6</td>
<td>Anthony Daniels</td>
<td>1946-02-21</td>
<td>\N</td>
<td>0</td>
</tr>
</tbody>
</table>
<p>这是在数据来源是表结构、RDBMS 中，是一个很典型的情况，所以对于 <code>movie &lt;-[directed_by]-(person)</code> 这个关系，就涉及了 <code>all_movies</code>，<code>all_casts</code>，<code>all_people</code>，<code>job_names</code> 四个表格</p>
<ul>
<li>directed_by
<ul>
<li>起点 person_id 在 all_casts 之中</li>
<li>终点 movie_id 在 all_casts 之中
<ul>
<li>条件是 job_id 为 job_names 之中的 “director”</li>
</ul>
</li>
</ul>
</li>
<li>movie
<ul>
<li>person_id 在 all_casts 之中</li>
<li>名字来自 all_movies 中按 id 查找，language 为 “en”</li>
</ul>
</li>
<li>person
<ul>
<li>movie_id 在 all_casts 之中</li>
<li>名字、生日在 all_people 之中</li>
</ul>
</li>
</ul>
<p>所有 OMDB 中我们关心的表的关联如图：</p>
<p><figure><a class="lightgallery" href="/nebulagraph-etl-dbt/modeling_omdb.webp" title="modeling_omdb" data-thumbnail="/nebulagraph-etl-dbt/modeling_omdb.webp">
        <img
            
            loading="lazy"
            src="/nebulagraph-etl-dbt/modeling_omdb.webp"
            srcset="/nebulagraph-etl-dbt/modeling_omdb.webp, /nebulagraph-etl-dbt/modeling_omdb.webp 1.5x, /nebulagraph-etl-dbt/modeling_omdb.webp 2x"
            sizes="auto"
            alt="/nebulagraph-etl-dbt/modeling_omdb.webp">
    </a></figure></p>
<h3 id="movielens-数据集" class="headerLink">
    <a href="#movielens-%e6%95%b0%e6%8d%ae%e9%9b%86" class="header-mark"></a>4.2 MovieLens 数据集</h3><p>而上边只是一个数据源、数据表或者数仓的数据，在真实场景中，我们还需要从其他源头收取数据，并聚合起来，在本例中，我们还需要从 MovieLens 的数据集中抽取需要的知识。</p>
<p>这里，涉及到 MovieLens 数据集，我们利用的只有：用户&ndash;&gt;电影，这一条关系。</p>
<ul>
<li><code>movies.csv</code></li>
</ul>
<table>
<thead>
<tr>
<th>movieId</th>
<th>title</th>
<th>genres</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Toy Story (1995)</td>
<td>Adventure</td>
</tr>
<tr>
<td>2</td>
<td>Jumanji (1995)</td>
<td>Adventure</td>
</tr>
<tr>
<td>3</td>
<td>Grumpier Old Men (1995)</td>
<td>Comedy</td>
</tr>
<tr>
<td>4</td>
<td>Waiting to Exhale (1995)</td>
<td>Comedy</td>
</tr>
</tbody>
</table>
<ul>
<li><code>ratings.csv</code></li>
</ul>
<table>
<thead>
<tr>
<th>userId</th>
<th>movieId</th>
<th>rating</th>
<th>timestamp</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>1</td>
<td>4</td>
<td>964982703</td>
</tr>
<tr>
<td>1</td>
<td>3</td>
<td>4</td>
<td>964981247</td>
</tr>
<tr>
<td>1</td>
<td>6</td>
<td>4</td>
<td>964982224</td>
</tr>
</tbody>
</table>
<p>从两个表的数据预览似乎可以得出：</p>
<ul>
<li>watched
<ul>
<li>起点来自于 <code>ratings.csv</code> 中的 userId</li>
<li>终点来自于 <code>ratings.csv</code> 中的 movieId</li>
<li>评分来自于 <code>ratings.csv</code> 中的 rating</li>
</ul>
</li>
<li>user
<ul>
<li>来自于 <code>ratings.csv</code> 中的 userId</li>
</ul>
</li>
</ul>
<p>然而，细心的你们一定发现 MovieLens 数据集中的 movieId 和来自于 OMDB 中的电影 id 完全是不同的两套体系，如果我们需要让他们关联起来，需要将 MovieLens 里的 movieId 转换成为 OMDB 中的电影 id。而他们之间的关联条件则是电影的标题。</p>
<p>然而，通观察，我们知道：</p>
<ol>
<li>OMDB 电影中标题是多语言的</li>
<li>MovieLens 中的标题结尾带有<code>(1995)</code>这样的年份信息</li>
</ol>
<p>所以我们最终的结论为</p>
<ul>
<li>watched
<ul>
<li>起点来自于 <code>ratings.csv</code> 中的 userId</li>
<li>终点来自于 <code>ratings.csv</code> 中的 movieId
<ul>
<li><strong>终点要从 <code>movies.csv</code> 中的 title ，在 OMDB 之中查找，得到 OMDB 的 movie_id</strong>
<ul>
<li>查找条件为去掉年份，从 OMDB 的英文标题中进行匹配</li>
</ul>
</li>
</ul>
</li>
<li>评分来自于 <code>ratings.csv</code> 中的 rating</li>
</ul>
</li>
<li>user
<ul>
<li>来自于 <code>ratings.csv</code> 中的 userId</li>
</ul>
</li>
</ul>
<p>现在，这个表格之间的关系如下</p>
<p><figure><a class="lightgallery" href="/nebulagraph-etl-dbt/modeling_omdb_movielens.webp" title="modeling_omdb_movielens" data-thumbnail="/nebulagraph-etl-dbt/modeling_omdb_movielens.webp">
        <img
            
            loading="lazy"
            src="/nebulagraph-etl-dbt/modeling_omdb_movielens.webp"
            srcset="/nebulagraph-etl-dbt/modeling_omdb_movielens.webp, /nebulagraph-etl-dbt/modeling_omdb_movielens.webp 1.5x, /nebulagraph-etl-dbt/modeling_omdb_movielens.webp 2x"
            sizes="auto"
            alt="/nebulagraph-etl-dbt/modeling_omdb_movielens.webp">
    </a></figure></p>
<h3 id="映射数据到图谱属性图" class="headerLink">
    <a href="#%e6%98%a0%e5%b0%84%e6%95%b0%e6%8d%ae%e5%88%b0%e5%9b%be%e8%b0%b1%e5%b1%9e%e6%80%a7%e5%9b%be" class="header-mark"></a>4.3 映射数据到图谱（属性图）</h3><p>总结起来，我们需要对多个数据源中的不同表格（或者表格形式的 CSV 文件）进行聚合，这样的对应关系如图所示：其中蓝色虚线表示图中顶点的数据信息来源，粉色虚线表示边信息的来源。</p>
<p><figure><a class="lightgallery" href="/nebulagraph-etl-dbt/schema_mapping_to_graph.webp" title="schema_mapping_to_graph" data-thumbnail="/nebulagraph-etl-dbt/schema_mapping_to_graph.webp">
        <img
            
            loading="lazy"
            src="/nebulagraph-etl-dbt/schema_mapping_to_graph.webp"
            srcset="/nebulagraph-etl-dbt/schema_mapping_to_graph.webp, /nebulagraph-etl-dbt/schema_mapping_to_graph.webp 1.5x, /nebulagraph-etl-dbt/schema_mapping_to_graph.webp 2x"
            sizes="auto"
            alt="/nebulagraph-etl-dbt/schema_mapping_to_graph.webp">
    </a></figure></p>
<p>最后，我们还要对不同表中个体的 id 进行格式化，比如 user_id，是自增的数字，我们要转换成全局唯一的 vertex_id，一个方便的方式是在现有 id 的基础上增加字符串前缀，比如 <code>u_</code>。</p>
<p>最终，拿对于 <code>user -[watched]-&gt; movie</code> 这一个关系来说，我们可以处理得到这样的表结构数据：</p>
<table>
<thead>
<tr>
<th>user_id</th>
<th>rating</th>
<th>title</th>
<th>omdb_movie_id</th>
</tr>
</thead>
<tbody>
<tr>
<td>u_1</td>
<td>5</td>
<td>Seven (a.k.a. Se7en)</td>
<td>807</td>
</tr>
<tr>
<td>u_1</td>
<td>5</td>
<td>Star Wars: Episode IV - A New Hope</td>
<td>11</td>
</tr>
<tr>
<td>u_1</td>
<td>5</td>
<td>Star Wars: Episode IV - A New Hope</td>
<td>10</td>
</tr>
<tr>
<td>u_1</td>
<td>4</td>
<td>Mask, The</td>
<td>832</td>
</tr>
<tr>
<td>u_1</td>
<td>3</td>
<td>Mrs. Doubtfire</td>
<td>832</td>
</tr>
</tbody>
</table>
<p>其中每一行记录中存在三个图上的结构信息：</p>
<ul>
<li>user 顶点 id</li>
<li>movie 顶点 id</li>
<li>watched 边的 rating 值</li>
</ul>
<h2 id="工具" class="headerLink">
    <a href="#%e5%b7%a5%e5%85%b7" class="header-mark"></a>5 工具</h2><p>到此，我们已经完成了数据的分析与建模设计，在进入”抽取关联关系，导入图数据库“环节之前，先介绍一下我们要用到的工具。</p>
<p>”抽取关联关系“可以简单认为是 ETL 中的 Extract 和 Transform。本质上就是工程上执行数据映射与转换的工作，市面上有很多不同风格的工具、开源项目可以做。这里我们用到我个人比较喜欢的工具：dbt。</p>
<h3 id="数据转换利器-dbt" class="headerLink">
    <a href="#%e6%95%b0%e6%8d%ae%e8%bd%ac%e6%8d%a2%e5%88%a9%e5%99%a8-dbt" class="header-mark"></a>5.1 数据转换利器 dbt</h3><p>dbt 是一个开源的数据转换工具，他有非常成熟的社区和生态，可以在大多数主流数仓之中进行高效、可控、高质量的数据转换工作，无论是临时的转换工作（ad-hoc），还是在给定的定时 pipeline 中进行复杂编排，dbt 都可以很好胜任，他的一大特色就是使用 SQL-like 语言去描述数据转换的规则，基于 GitOps，可以非常优雅地去多人协作、维护超大规模数据团队里复杂的数据处理作业。而且内置的数据测试能力可以很好的控制数据的质量，做到可复现、可控制。</p>
<p>dbt 不仅有很多集成的子项目，还能和很多其他优秀的开源项目有机结合（meltano、AirFlow、Amundsen 、Superset 等等），形成一整套现代的数据基础设施体系，感兴趣的同学可以参考我之前搭建的数据血缘与元数据治理参考架构文章：www.siwei.io/en/data-lineage-oss-ref-solution。</p>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/168849779-4826f50e-ff87-4e78-b17f-076f91182c43.svg" title="https://user-images.githubusercontent.com/1651790/168849779-4826f50e-ff87-4e78-b17f-076f91182c43.svg" data-thumbnail="https://user-images.githubusercontent.com/1651790/168849779-4826f50e-ff87-4e78-b17f-076f91182c43.svg">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/168849779-4826f50e-ff87-4e78-b17f-076f91182c43.svg"
            srcset="https://user-images.githubusercontent.com/1651790/168849779-4826f50e-ff87-4e78-b17f-076f91182c43.svg, https://user-images.githubusercontent.com/1651790/168849779-4826f50e-ff87-4e78-b17f-076f91182c43.svg 1.5x, https://user-images.githubusercontent.com/1651790/168849779-4826f50e-ff87-4e78-b17f-076f91182c43.svg 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/168849779-4826f50e-ff87-4e78-b17f-076f91182c43.svg">
    </a></figure></p>
<p>简单来说，dbt 是一个 python 写的命令行工具，当我们使用它的时候，针对每一个项目，我们可以创建特定格式的项目文件夹，其中包涵一个 YAML 格式的配置文件，在配置文件里指定数据转换的来源信息在哪里，目标在哪里（处理之后的数据存储的地方，可能是 Postgres，Big Query，Spark 等）。在数据源中，我们用 YAML 文件和 <code>.SQL</code> 文件一起描述了”从哪里取哪些数据，如何做变换，输出什么“的信息。</p>
<p><figure><a class="lightgallery" href="/nebulagraph-etl-dbt/starter-project-dbt-cli.webp" title="starter-project-dbt-cli" data-thumbnail="/nebulagraph-etl-dbt/starter-project-dbt-cli.webp">
        <img
            
            loading="lazy"
            src="/nebulagraph-etl-dbt/starter-project-dbt-cli.webp"
            srcset="/nebulagraph-etl-dbt/starter-project-dbt-cli.webp, /nebulagraph-etl-dbt/starter-project-dbt-cli.webp 1.5x, /nebulagraph-etl-dbt/starter-project-dbt-cli.webp 2x"
            sizes="auto"
            alt="/nebulagraph-etl-dbt/starter-project-dbt-cli.webp">
    </a></figure></p>
<p>这个截图就是 dbt 官方文档中的示例项目中的文件和配置，可以看到 models/example 里的信息就是最核心的数据转换（transform）的规则，而所有的其他数据都是和这个数据转换相关的元数据，这些 dbt 项目文件非常适合用 git 来进行维护，进行现代、自动化的 DataOps。</p>
<blockquote>
<p>注：</p>
<p>可以参考 dbt 文档上手理解它：https://docs.getdbt.com/docs/get-started/getting-started-dbt-core</p>
</blockquote>
<h3 id="nebulagraph-数据导入" class="headerLink">
    <a href="#nebulagraph-%e6%95%b0%e6%8d%ae%e5%af%bc%e5%85%a5" class="header-mark"></a>5.2 NebulaGraph 数据导入</h3><p>经过 dbt 对数据进行处理之后，我们可以得到直接映射到不同类型的顶点、边、及其属性的表结构的中间数据，它们可以是 CSV 的文件形式，也可以是数仓中的表，甚至可能是 Spark 中的 dataframe。而将它们导入 NebulaGraph 有不同的选择，其中 NebulaGraph Exchange，Nebula-Importer，还有 Nebula-Spark-Connector 都可以作为导入数据。</p>
<blockquote>
<p>注：</p>
<p>大家可以在 <a href="https://www.siwei.io/sketches/nebula-data-import-options" target="_blank" rel="noopener noreferrer">www.siwei.io/sketches/nebula-data-import-options</a> 了解更多 NebulaGraph 数据导入不同工具的介绍，知道如何选择。</p>
</blockquote>
<p>在这里，我就用最简单的 Nebula-Importer 作为例子。</p>
<p>Nebula-Importer 是一个用 Golang 写的开源工具，它可以编译成一个单文件的二进制，通过预配置的 YAML 格式的文件，获得给定的 CSV 文件到 NebulaGraph 中点、边的对应关系，进行读取和导入。</p>
<blockquote>
<p>注：</p>
<p>Nebula-Importer 代码：https://github.com/vesoft-inc/nebula-importer/</p>
<p>Nebula-Importer 文档：https://docs.nebula-graph.com.cn/master/nebula-importer/use-importer/</p>
</blockquote>
<h2 id="实操" class="headerLink">
    <a href="#%e5%ae%9e%e6%93%8d" class="header-mark"></a>6 实操</h2><p>现在我们就实操一下如何利用 dbt + Nebula-Importer 进行多数据源聚合、转换、再导入 NebulaGraph 的过程，整个项目的代码已经开源，仓库在 <a href="https://github.com/wey-gu/movie-recommendation-dataset" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/movie-recommendation-dataset</a> 上，欢迎大家参考、共建。</p>
<p>整个过程如下：</p>
<ul>
<li>将源数据简单清洗、导入数仓（Postgres）（EL）</li>
<li>用 dbt 对数据进行转换（Transform）、导出为 CSV 文件</li>
<li>用 Nebula Importer 将 CSV 导入 NebulaGraph（L）</li>
</ul>
<p><figure><a class="lightgallery" href="/nebulagraph-etl-dbt/ETL_dbt_nebulagraph_importer.webp" title="ETL_dbt_nebulagraph_importer" data-thumbnail="/nebulagraph-etl-dbt/ETL_dbt_nebulagraph_importer.webp">
        <img
            
            loading="lazy"
            src="/nebulagraph-etl-dbt/ETL_dbt_nebulagraph_importer.webp"
            srcset="/nebulagraph-etl-dbt/ETL_dbt_nebulagraph_importer.webp, /nebulagraph-etl-dbt/ETL_dbt_nebulagraph_importer.webp 1.5x, /nebulagraph-etl-dbt/ETL_dbt_nebulagraph_importer.webp 2x"
            sizes="auto"
            alt="/nebulagraph-etl-dbt/ETL_dbt_nebulagraph_importer.webp">
    </a></figure></p>
<h3 id="准备-dbt-环境" class="headerLink">
    <a href="#%e5%87%86%e5%a4%87-dbt-%e7%8e%af%e5%a2%83" class="header-mark"></a>6.1 准备 dbt 环境</h3><p>dbt 是一个 python 项目，我们在一个虚拟的 python3 环境里安装好 dbt 和 dbt-postgres。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">python3 -m venv .venv
</span></span><span class="line"><span class="cl"><span class="nb">source</span> .venv/bin/activate
</span></span><span class="line"><span class="cl">pip install dbt-postgres
</span></span></code></pre></td></tr></table>
</div>
</div><p>创建一个 dbt 项目，并进入到空的项目里：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">dbt init dbt_project
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> dbt_project
</span></span></code></pre></td></tr></table>
</div>
</div><p>看看里边的文件吧：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ tree .
</span></span><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl"><span class="p">|</span>-- README.md                      <span class="c1"># 项目说明 README</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>-- analyses
</span></span><span class="line"><span class="cl"><span class="p">|</span>-- dbt_project.yml                <span class="c1"># 项目配置文件</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>-- macros
</span></span><span class="line"><span class="cl"><span class="p">|</span>-- models                         <span class="c1"># transform 来源</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>   <span class="se">\-</span>- example
</span></span><span class="line"><span class="cl"><span class="p">|</span>       <span class="p">|</span>-- my_first_dbt_model.sql <span class="c1"># 一个描述了如何从元数据中 SELECT 并处理的规则</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>       <span class="p">|</span>-- my_second_dbt_model.sql
</span></span><span class="line"><span class="cl"><span class="p">|</span>       <span class="se">\-</span>- schema.yml             <span class="c1"># 规则文件的元数据配置，描述了 sql 规则的属性</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>-- seeds                          <span class="c1"># 源数据如果是 CSV 文件，可以放到 seeds 里</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>-- snapshots
</span></span><span class="line"><span class="cl"><span class="se">\-</span>- tests
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="m">7</span> directories, <span class="m">5</span> files
</span></span></code></pre></td></tr></table>
</div>
</div><p>最后，咱们拉一个容器里的 Postgres 当做我们这个项目的数仓，如果你已经有各种其他数仓，就不需要这一步了，不过要把项目中的配置文件作相应的修改，并安装相应的 dbt 插件。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run --rm --name postgres <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -e <span class="nv">POSTGRES_PASSWORD</span><span class="o">=</span>nebula <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -e <span class="nv">POSTGRES_USER</span><span class="o">=</span>nebula <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -e <span class="nv">POSTGRES_DB</span><span class="o">=</span>warehouse -d <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -p 5432:5432 postgres
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="数据下载与预处理" class="headerLink">
    <a href="#%e6%95%b0%e6%8d%ae%e4%b8%8b%e8%bd%bd%e4%b8%8e%e9%a2%84%e5%a4%84%e7%90%86" class="header-mark"></a>6.2 数据下载与预处理</h3><p>我们把数据放到项目的 raw_data 下吧</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkdir -p raw_data
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> raw_data
</span></span></code></pre></td></tr></table>
</div>
</div><p>注意，假设 raw_data 在 dbt_proeject 之下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">tree ..
</span></span><span class="line"><span class="cl">..
</span></span><span class="line"><span class="cl"><span class="p">|</span>-- README.md
</span></span><span class="line"><span class="cl"><span class="p">|</span>-- analyses
</span></span><span class="line"><span class="cl"><span class="p">|</span>-- dbt_project.yml
</span></span><span class="line"><span class="cl"><span class="p">|</span>-- macros
</span></span><span class="line"><span class="cl"><span class="p">|</span>-- models
</span></span><span class="line"><span class="cl"><span class="p">|</span>   <span class="se">\-</span>- example
</span></span><span class="line"><span class="cl"><span class="p">|</span>       <span class="p">|</span>-- my_first_dbt_model.sql
</span></span><span class="line"><span class="cl"><span class="p">|</span>       <span class="p">|</span>-- my_second_dbt_model.sql
</span></span><span class="line"><span class="cl"><span class="p">|</span>       <span class="se">\-</span>- schema.yml
</span></span><span class="line"><span class="cl"><span class="p">|</span>-- raw_data                       <span class="c1"># 新建的目录</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>-- seeds
</span></span><span class="line"><span class="cl"><span class="p">|</span>-- snapshots
</span></span><span class="line"><span class="cl"><span class="se">\-</span>- tests
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="m">8</span> directories, <span class="m">5</span> files
</span></span></code></pre></td></tr></table>
</div>
</div><p>我们把 omdb 数据下载之后，再解压：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">wget www.omdb.org/data/all_people.csv.bz2
</span></span><span class="line"><span class="cl">wget www.omdb.org/data/all_people_aliases.csv.bz2
</span></span><span class="line"><span class="cl">wget www.omdb.org/data/people_links.csv.bz2
</span></span><span class="line"><span class="cl">wget www.omdb.org/data/all_casts.csv.bz2
</span></span><span class="line"><span class="cl">wget www.omdb.org/data/job_names.csv.bz2
</span></span><span class="line"><span class="cl">wget www.omdb.org/data/all_characters.csv.bz2
</span></span><span class="line"><span class="cl">wget www.omdb.org/data/movie_categories.csv.bz2
</span></span><span class="line"><span class="cl">wget www.omdb.org/data/movie_keywords.csv.bz2
</span></span><span class="line"><span class="cl">wget www.omdb.org/data/category_names.csv.bz2
</span></span><span class="line"><span class="cl">wget www.omdb.org/data/all_categories.csv.bz2
</span></span><span class="line"><span class="cl">wget www.omdb.org/data/all_movie_aliases_iso.csv.bz2
</span></span><span class="line"><span class="cl">bunzip2 *.bz2
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后是 MovieLens 数据集的下载、解压：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">wget https://files.grouplens.org/datasets/movielens/ml-latest-small.zip
</span></span><span class="line"><span class="cl">unzip ml-latest-small.zip
</span></span><span class="line"><span class="cl">rm *.zip
</span></span></code></pre></td></tr></table>
</div>
</div><p>在导入数仓进行转换（Transform）之前我们做一些数据的预处理，然后把他们放到 <code>seeds</code> 之下。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 因为是实验项目，我们简单粗暴地去掉带有转义的引号的数据，因为它们会被认为是无效字符，处理之后的结果放到 seeds 下边。</span>
</span></span><span class="line"><span class="cl">grep -v <span class="s1">&#39;\\&#34;&#39;</span> raw_data/all_movie_aliases_iso.csv &gt; seeds/all_movie_aliases_iso.csv
</span></span><span class="line"><span class="cl">grep -v <span class="s1">&#39;\\&#34;&#39;</span> raw_data/all_casts.csv &gt; seeds/all_casts.csv
</span></span><span class="line"><span class="cl">grep -v <span class="s1">&#39;\\&#34;&#39;</span> raw_data/all_characters.csv &gt; seeds/all_characters.csv
</span></span><span class="line"><span class="cl">grep -v <span class="s1">&#39;\\&#34;&#39;</span> raw_data/all_people.csv &gt; seeds/all_people.csv
</span></span><span class="line"><span class="cl">grep -v <span class="s1">&#39;\\&#34;&#39;</span> raw_data/category_names.csv &gt; seeds/category_names.csv
</span></span><span class="line"><span class="cl">grep -v <span class="s1">&#39;\\&#34;&#39;</span> raw_data/job_names.csv &gt; seeds/job_names.csv
</span></span><span class="line"><span class="cl"><span class="c1"># 下边的文件无需处理，直接放到 seeds 下边。</span>
</span></span><span class="line"><span class="cl">cp raw_data/movie_categories.csv seeds/movie_categories.csv
</span></span><span class="line"><span class="cl">cp raw_data/movie_keywords.csv seeds/movie_keywords.csv
</span></span><span class="line"><span class="cl">cp raw_data/all_categories.csv seeds/all_categories.csv
</span></span><span class="line"><span class="cl">cp raw_data/ml-latest-small/ratings.csv seeds/movielens_ratings.csv
</span></span><span class="line"><span class="cl">cp raw_data/ml-latest-small/movies.csv seeds/movielens_movies.csv
</span></span></code></pre></td></tr></table>
</div>
</div><p>有了 seeds 下边的文件之后，可以用一个命令把他们导入到数仓里：</p>
<blockquote>
<p>参考文档：https://docs.getdbt.com/docs/build/seeds</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">dbt seed
</span></span></code></pre></td></tr></table>
</div>
</div><p>执行过程因数仓而异，用本地的 postgres 可能要等一会儿才能完成，执行结果大概是这样的：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ dbt seed
</span></span><span class="line"><span class="cl">05:58:27  Running with <span class="nv">dbt</span><span class="o">=</span>1.3.0
</span></span><span class="line"><span class="cl">05:58:27  Found <span class="m">2</span> models, <span class="m">4</span> tests, <span class="m">0</span> snapshots, <span class="m">0</span> analyses, <span class="m">289</span> macros, <span class="m">0</span> operations, <span class="m">11</span> seed files, <span class="m">0</span> sources, <span class="m">0</span> exposures, <span class="m">0</span> metrics
</span></span><span class="line"><span class="cl">05:58:28  
</span></span><span class="line"><span class="cl">05:58:28  Concurrency: <span class="m">8</span> threads <span class="o">(</span><span class="nv">target</span><span class="o">=</span><span class="s1">&#39;dev&#39;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">05:58:28  
</span></span><span class="line"><span class="cl">05:58:28  <span class="m">1</span> of <span class="m">11</span> START seed file public.all_casts ....................................... <span class="o">[</span>RUN<span class="o">]</span>
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">07:10:11  <span class="m">1</span> of <span class="m">11</span> OK loaded seed file public.all_casts ................................... <span class="o">[</span>INSERT <span class="m">1082228</span> in 4303.78s<span class="o">]</span>
</span></span><span class="line"><span class="cl">07:10:11  
</span></span><span class="line"><span class="cl">07:10:11  Finished running <span class="m">11</span> seeds in <span class="m">1</span> hours <span class="m">11</span> minutes and 43.93 seconds <span class="o">(</span>4303.93s<span class="o">)</span>.
</span></span><span class="line"><span class="cl">07:10:11  
</span></span><span class="line"><span class="cl">07:10:11  Completed successfully
</span></span><span class="line"><span class="cl">07:10:11  
</span></span><span class="line"><span class="cl">07:10:11  Done. <span class="nv">PASS</span><span class="o">=</span><span class="m">11</span> <span class="nv">WARN</span><span class="o">=</span><span class="m">0</span> <span class="nv">ERROR</span><span class="o">=</span><span class="m">0</span> <span class="nv">SKIP</span><span class="o">=</span><span class="m">0</span> <span class="nv">TOTAL</span><span class="o">=</span><span class="m">11</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="撰写-transform-model" class="headerLink">
    <a href="#%e6%92%b0%e5%86%99-transform-model" class="header-mark"></a>6.3 撰写 Transform model</h3><p>我们创建 model 如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkdir models/movie_recommedation
</span></span><span class="line"><span class="cl">touch models/movie_recommedation/user_watched_movies.sql
</span></span><span class="line"><span class="cl">touch models/movie_recommedation/schema.yml
</span></span></code></pre></td></tr></table>
</div>
</div><p>这时候 models 中的文件结构大概是这样的：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ tree models
</span></span><span class="line"><span class="cl">models
</span></span><span class="line"><span class="cl"><span class="se">\-</span>- movie_recommedation
</span></span><span class="line"><span class="cl">    <span class="p">|</span>-- user_watched_movies.sql
</span></span><span class="line"><span class="cl">    <span class="se">\-</span>- schema.yml
</span></span></code></pre></td></tr></table>
</div>
</div><p>这个 model 下边目前只有一个规则，就是负责处理用户观看电影这一个边上数据的 SQL 语句。</p>
<p>我们希望输出三列，所以 <code>schema.yml</code> 中的内容是：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="m">2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">models</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">user_watched_movies</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">description</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;The edges between users and movies they have watched&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">columns</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">user_id</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">description</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;user id&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">tests</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="l">not_null</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">movie_id</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">description</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;movie id&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">tests</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="l">not_null</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">rating</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">description</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;rating given by user to movie&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">tests</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="l">not_null</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>注意，这里的 tests 的表达是对数据验证、测试的约束，有了它，我可以用 dbt 轻松对数据质量进行测试、验收，比如我们要求这里的三个字段都是 <code>not_null</code>。</p>
<p>然后，我们来写 SQL 吧，<code>user_watched_movies.sql</code>：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="err">{{</span><span class="w"> </span><span class="n">config</span><span class="p">(</span><span class="n">materialized</span><span class="o">=</span><span class="s1">&#39;table&#39;</span><span class="p">)</span><span class="w"> </span><span class="err">}}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm"> JOIN the movieielens_ratings table with the movieielens_movies table, and removing the movie title tailing the year of release
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">user_watched_movies</span><span class="w"> </span><span class="k">AS</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">SELECT</span><span class="w"> </span><span class="n">moveielens_ratings</span><span class="p">.</span><span class="s2">&#34;userId&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">moveielens_ratings</span><span class="p">.</span><span class="s2">&#34;movieId&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">moveielens_ratings</span><span class="p">.</span><span class="n">rating</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">REGEXP_REPLACE</span><span class="p">(</span><span class="n">moveielens_movies</span><span class="p">.</span><span class="n">title</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39; \(\d{4}\)$&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">title</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">moveielens_movies</span><span class="p">.</span><span class="n">genres</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">movielens_genres</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">FROM</span><span class="w"> </span><span class="n">moveielens_ratings</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">JOIN</span><span class="w"> </span><span class="n">moveielens_movies</span><span class="w"> </span><span class="k">ON</span><span class="w"> </span><span class="n">moveielens_movies</span><span class="p">.</span><span class="s2">&#34;movieId&#34;</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">moveielens_ratings</span><span class="p">.</span><span class="s2">&#34;movieId&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="cm">/* 
</span></span></span><span class="line"><span class="cl"><span class="cm"> JOIN user_watched_movies table with all_movie_aliase_iso table where language is English
</span></span></span><span class="line"><span class="cl"><span class="cm"> the join condition is the movie title
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">concat</span><span class="p">(</span><span class="s1">&#39;u_&#39;</span><span class="p">,</span><span class="n">user_watched_movies</span><span class="p">.</span><span class="s2">&#34;userId&#34;</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">user_id</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">user_watched_movies</span><span class="p">.</span><span class="n">rating</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">user_watched_movies</span><span class="p">.</span><span class="n">title</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">all_movie_aliases_iso</span><span class="p">.</span><span class="s2">&#34;movie_id&#34;</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">OMDB_movie_id</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">user_watched_movies</span><span class="p">.</span><span class="n">movielens_genres</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">user_watched_movies</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">JOIN</span><span class="w"> </span><span class="n">all_movie_aliases_iso</span><span class="w"> </span><span class="k">ON</span><span class="w"> </span><span class="n">user_watched_movies</span><span class="p">.</span><span class="n">title</span><span class="w"> </span><span class="k">LIKE</span><span class="w"> </span><span class="n">CONCAT</span><span class="p">(</span><span class="n">all_movie_aliases_iso</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;%&#39;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">AND</span><span class="w"> </span><span class="n">all_movie_aliases_iso</span><span class="p">.</span><span class="n">language_iso_639_1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">&#39;en&#39;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>而这个 SQL 做的事情就是绿色圆圈标注的部分：</p>
<ul>
<li>从 <code>moveielens_ratings</code> 中选 user id、movie id、rating、movie title（去掉年份），存成 <code>user_watched_movies</code> 的中间表格
<ul>
<li>movie title 从 <code>moveielens_movies</code> 中<code> JOIN</code> ，通过 <code>movie_id</code> 相同的匹配条件取得</li>
</ul>
</li>
<li>从 <code>user_watched_movies</code> 中选 user id（增加前缀 <code>u_</code>）、rating、title、OMDB_movie_id
<ul>
<li>OMDB_movie_id 从 <code>all_movie_aliases_iso</code> 中 <code>JOIN</code>，通过相似的电影姓名匹配 OMDB 电影中英文标题取得</li>
<li>最终的字段作为输出</li>
</ul>
</li>
</ul>
<p><figure><a class="lightgallery" href="/nebulagraph-etl-dbt/transform_select_joins_user_watched_movies.webp" title="transform_select_joins_user_watched_movies" data-thumbnail="/nebulagraph-etl-dbt/transform_select_joins_user_watched_movies.webp">
        <img
            
            loading="lazy"
            src="/nebulagraph-etl-dbt/transform_select_joins_user_watched_movies.webp"
            srcset="/nebulagraph-etl-dbt/transform_select_joins_user_watched_movies.webp, /nebulagraph-etl-dbt/transform_select_joins_user_watched_movies.webp 1.5x, /nebulagraph-etl-dbt/transform_select_joins_user_watched_movies.webp 2x"
            sizes="auto"
            alt="/nebulagraph-etl-dbt/transform_select_joins_user_watched_movies.webp">
    </a></figure></p>
<blockquote>
<p>小贴士：我们可以在 Postgres 的连接器中通过增加 LIMIT 快速调试自己的 SQL 语句。</p>
</blockquote>
<p>然后我们可以通过 dbt 来执行、测试刚刚的规则：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">dbt run -m user_watched_movies
</span></span></code></pre></td></tr></table>
</div>
</div><p>之后，我们应该就可以在 Postgres（数仓）中看到我们转换之后的一个表了。</p>
<p>类似的，如法炮制所有其他部分的 Transform 规则，我们就有这么多 model 了：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ tree models
</span></span><span class="line"><span class="cl">models
</span></span><span class="line"><span class="cl"><span class="se">\-</span>- movie_recommedation
</span></span><span class="line"><span class="cl">    <span class="p">|</span>-- acted_by.sql
</span></span><span class="line"><span class="cl">    <span class="p">|</span>-- directed_by.sql
</span></span><span class="line"><span class="cl">    <span class="p">|</span>-- genres.sql
</span></span><span class="line"><span class="cl">    <span class="p">|</span>-- movies.sql
</span></span><span class="line"><span class="cl">    <span class="p">|</span>-- people.sql
</span></span><span class="line"><span class="cl">    <span class="p">|</span>-- schema.yml
</span></span><span class="line"><span class="cl">    <span class="p">|</span>-- user_watched_movies.sql
</span></span><span class="line"><span class="cl">    <span class="se">\-</span>- with_genre.sql
</span></span></code></pre></td></tr></table>
</div>
</div><p>再对他们分别执行 transform：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">dbt run -m acted_by
</span></span><span class="line"><span class="cl">dbt run -m directed_by
</span></span><span class="line"><span class="cl">dbt run -m with_genre
</span></span><span class="line"><span class="cl">dbt run -m people
</span></span><span class="line"><span class="cl">dbt run -m genres
</span></span><span class="line"><span class="cl">dbt run -m movies
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="导出数据为-csv" class="headerLink">
    <a href="#%e5%af%bc%e5%87%ba%e6%95%b0%e6%8d%ae%e4%b8%ba-csv" class="header-mark"></a>6.4 导出数据为 CSV</h3><p>实际上，NebulaGraph Exchange 本身就支持把很多数据源（Postgres，Clickhouse，MySQL，Hive 等等）导入 NebulaGraph，只是在这个例子中，我们处理的数据量对于 NebulaGraph 来说非常非常小（只有百万级别的边而已），使用最轻量级的 Nebula-Importer 就足够了。而 Nebula-Importer 能消费的数据只有 CSV 文件，所以我们把刚才的表都输出为文件。</p>
<p>首先，我们进入 postgres 的 console，执行 <code>COPY</code> 命令</p>
<blockquote>
<p>参考 Postgres 文档：https://www.postgresql.org/docs/current/sql-copy.html</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">COPY</span><span class="w"> </span><span class="n">acted_by</span><span class="w"> </span><span class="k">TO</span><span class="w"> </span><span class="s1">&#39;/tmp/acted_by.csv&#39;</span><span class="w">  </span><span class="k">WITH</span><span class="w"> </span><span class="k">DELIMITER</span><span class="w"> </span><span class="s1">&#39;,&#39;</span><span class="w"> </span><span class="n">CSV</span><span class="w"> </span><span class="n">HEADER</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">COPY</span><span class="w"> </span><span class="n">directed_by</span><span class="w"> </span><span class="k">TO</span><span class="w"> </span><span class="s1">&#39;/tmp/directed_by.csv&#39;</span><span class="w">  </span><span class="k">WITH</span><span class="w"> </span><span class="k">DELIMITER</span><span class="w"> </span><span class="s1">&#39;,&#39;</span><span class="w"> </span><span class="n">CSV</span><span class="w"> </span><span class="n">HEADER</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">COPY</span><span class="w"> </span><span class="n">with_genre</span><span class="w"> </span><span class="k">TO</span><span class="w"> </span><span class="s1">&#39;/tmp/with_genre.csv&#39;</span><span class="w">  </span><span class="k">WITH</span><span class="w"> </span><span class="k">DELIMITER</span><span class="w"> </span><span class="s1">&#39;,&#39;</span><span class="w"> </span><span class="n">CSV</span><span class="w"> </span><span class="n">HEADER</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">COPY</span><span class="w"> </span><span class="n">people</span><span class="w"> </span><span class="k">TO</span><span class="w"> </span><span class="s1">&#39;/tmp/people.csv&#39;</span><span class="w">  </span><span class="k">WITH</span><span class="w"> </span><span class="k">DELIMITER</span><span class="w"> </span><span class="s1">&#39;,&#39;</span><span class="w"> </span><span class="n">CSV</span><span class="w"> </span><span class="n">HEADER</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">COPY</span><span class="w"> </span><span class="n">movies</span><span class="w"> </span><span class="k">TO</span><span class="w"> </span><span class="s1">&#39;/tmp/movies.csv&#39;</span><span class="w">  </span><span class="k">WITH</span><span class="w"> </span><span class="k">DELIMITER</span><span class="w"> </span><span class="s1">&#39;,&#39;</span><span class="w"> </span><span class="n">CSV</span><span class="w"> </span><span class="n">HEADER</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">COPY</span><span class="w"> </span><span class="n">genres</span><span class="w"> </span><span class="k">TO</span><span class="w"> </span><span class="s1">&#39;/tmp/genres.csv&#39;</span><span class="w">  </span><span class="k">WITH</span><span class="w"> </span><span class="k">DELIMITER</span><span class="w"> </span><span class="s1">&#39;,&#39;</span><span class="w"> </span><span class="n">CSV</span><span class="w"> </span><span class="n">HEADER</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">-- 对于 user_watched_movies 我们不输出表头，因为这个文件中记录了两种点、一种边，没法让 importer 通过约定好的表头自动导入，只能通过无表头的情况下指定第几列对应什么字段
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">COPY</span><span class="w"> </span><span class="n">user_watched_movies</span><span class="w"> </span><span class="k">TO</span><span class="w"> </span><span class="s1">&#39;/tmp/user_watched_movies.csv&#39;</span><span class="w">  </span><span class="k">WITH</span><span class="w"> </span><span class="k">DELIMITER</span><span class="w"> </span><span class="s1">&#39;,&#39;</span><span class="w"> </span><span class="n">CSV</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>然后把 postgres 容器里的文件导入到 to_nebulagraph 这个文件夹里：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkdir -p to_nebulagraph
</span></span><span class="line"><span class="cl">docker cp postgres:/tmp/. to_nebulagraph/
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="导入-nebulagraph" class="headerLink">
    <a href="#%e5%af%bc%e5%85%a5-nebulagraph" class="header-mark"></a>6.5 导入 NebulaGraph</h3><h4 id="创建-nebulagraph-集群" class="headerLink">
    <a href="#%e5%88%9b%e5%bb%ba-nebulagraph-%e9%9b%86%e7%be%a4" class="header-mark"></a>6.5.1 创建 NebulaGraph 集群</h4><p>我们可以用 Nebula-Up 一键搭起一个测试的 NebulaGraph 单机集群，然后参考数据集的 GitHub 仓库，一键导入所需数据：</p>
<blockquote>
<p>注：</p>
<ul>
<li>
<p>Nebula-UP：https://github.com/wey-gu/nebula-up</p>
</li>
<li>
<p>数据集仓库：https://github.com/wey-gu/movie-recommendation-dataset</p>
</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -fsSL nebula-up.siwei.io/install.sh <span class="p">|</span> bash
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="创建-schema" class="headerLink">
    <a href="#%e5%88%9b%e5%bb%ba-schema" class="header-mark"></a>6.5.2 创建 Schema</h4><p>首先，我们创建一个叫做 <code>moviegraph</code> 的图空间，针对前边的建模，创建点边类型的结构（Schema）：</p>
<p>先进入 NebulaGraph 的 console：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">~/.nebula-up/console.sh
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后执行如下 DDL（Data Definiation Language）：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">SPACE</span><span class="w"> </span><span class="n">moviegraph</span><span class="p">(</span><span class="n">partition_num</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span><span class="n">replica_factor</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">vid_type</span><span class="o">=</span><span class="n">fixed_string</span><span class="p">(</span><span class="mi">32</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">:</span><span class="n">sleep</span><span class="w"> </span><span class="mi">20</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">USE</span><span class="w"> </span><span class="n">moviegraph</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="n">person</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="n">string</span><span class="p">,</span><span class="w"> </span><span class="n">birthdate</span><span class="w"> </span><span class="n">string</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="n">movie</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="n">string</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="n">genre</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="n">string</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="k">user</span><span class="p">(</span><span class="n">user_id</span><span class="w"> </span><span class="n">string</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">acted_by</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">directed_by</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">with_genre</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">watched</span><span class="p">(</span><span class="n">rate</span><span class="w"> </span><span class="nb">float</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">exit</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h4 id="创建-nebula-importer-配置文件" class="headerLink">
    <a href="#%e5%88%9b%e5%bb%ba-nebula-importer-%e9%85%8d%e7%bd%ae%e6%96%87%e4%bb%b6" class="header-mark"></a>6.5.3 创建 Nebula-Importer 配置文件</h4><p>这个文件是一个描述 CSV 文件和集群中点边数据对应关系的 YAML 文件。详细的格式可以参考文档：https://docs.nebula-graph.com.cn/master/nebula-importer/use-importer/，或者视频教程：https://www.bilibili.com/video/BV1ny4y1u7i4 。</p>
<p>最终的配置文件我已经问大家写好了，在 <a href="https://github.com/wey-gu/movie-recommendation-dataset/blob/main/nebula-importer.yaml" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/movie-recommendation-dataset/blob/main/nebula-importer.yaml</a> 可以下载得到。</p>
<p>这里，我们就直接下载我写好了的配置文件，注意，这个文件不应该是 dbt 项目文件的一部分，所以我们退出目录，向上一层，把它放到 dbt_proeject 外边：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> ..
</span></span><span class="line"><span class="cl">wget https://raw.githubusercontent.com/wey-gu/movie-recommendation-dataset/main/nebula-importer.yaml
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="开始导入" class="headerLink">
    <a href="#%e5%bc%80%e5%a7%8b%e5%af%bc%e5%85%a5" class="header-mark"></a>6.5.4 开始导入</h4><p>这一步，我们用容器化的 nebula-importer，避免了安装的步骤：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run --rm -ti <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --network<span class="o">=</span>nebula-net <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v <span class="si">${</span><span class="nv">PWD</span><span class="si">}</span>:/root/ <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v <span class="si">${</span><span class="nv">PWD</span><span class="si">}</span>/dbt_project/to_nebulagraph/:/data <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    vesoft/nebula-importer:v3.2.0 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --config /root/nebula-importer.yaml
</span></span></code></pre></td></tr></table>
</div>
</div><p>很快，所有的数据就导入到 NebulaGraph 之中了，然后我们可以通过 Nebula-Console，执行一些查询看看结果：</p>
<p>进入 console</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">~/.nebula-up/console.sh
</span></span></code></pre></td></tr></table>
</div>
</div><p>进入图空间、执行 <code>SHOW STATS</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-SQL" data-lang="SQL"><span class="line"><span class="cl"><span class="n">USE</span><span class="w"> </span><span class="n">moviegraph</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">SHOW</span><span class="w"> </span><span class="n">STATS</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>结果：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-SQL" data-lang="SQL"><span class="line"><span class="cl"><span class="p">(</span><span class="n">root</span><span class="o">@</span><span class="n">nebula</span><span class="p">)</span><span class="w"> </span><span class="p">[</span><span class="n">moviegraph</span><span class="p">]</span><span class="o">&gt;</span><span class="w"> </span><span class="k">SHOW</span><span class="w"> </span><span class="n">STATS</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">---------+---------------+---------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="k">Type</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="n">Name</span><span class="w">          </span><span class="o">|</span><span class="w"> </span><span class="k">Count</span><span class="w">   </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">---------+---------------+---------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Tag&#34;</span><span class="w">   </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;genre&#34;</span><span class="w">       </span><span class="o">|</span><span class="w"> </span><span class="mi">14397</span><span class="w">   </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Tag&#34;</span><span class="w">   </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;movie&#34;</span><span class="w">       </span><span class="o">|</span><span class="w"> </span><span class="mi">20701</span><span class="w">   </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Tag&#34;</span><span class="w">   </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;person&#34;</span><span class="w">      </span><span class="o">|</span><span class="w"> </span><span class="mi">263907</span><span class="w">  </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Tag&#34;</span><span class="w">   </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;user&#34;</span><span class="w">        </span><span class="o">|</span><span class="w"> </span><span class="mi">610</span><span class="w">     </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Edge&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;acted_by&#34;</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="mi">673763</span><span class="w">  </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Edge&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;directed_by&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="mi">101949</span><span class="w">  </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Edge&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;watched&#34;</span><span class="w">     </span><span class="o">|</span><span class="w"> </span><span class="mi">31781</span><span class="w">   </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Edge&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;with_genre&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="mi">194009</span><span class="w">  </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Space&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;vertices&#34;</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="mi">299615</span><span class="w">  </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;Space&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;edges&#34;</span><span class="w">       </span><span class="o">|</span><span class="w"> </span><span class="mi">1001502</span><span class="w"> </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">---------+---------------+---------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Got</span><span class="w"> </span><span class="mi">10</span><span class="w"> </span><span class="k">rows</span><span class="w"> </span><span class="p">(</span><span class="n">time</span><span class="w"> </span><span class="n">spent</span><span class="w"> </span><span class="mi">1693</span><span class="o">/</span><span class="mi">15136</span><span class="w"> </span><span class="n">us</span><span class="p">)</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>通过 Nebula-Studio，我们也可以在可视化界面探索这个图谱，比如在其中执行这个查询，看一下给用户 u_124 推荐电影 1891 的理由可能是什么？</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-SQL" data-lang="SQL"><span class="line"><span class="cl"><span class="n">FIND</span><span class="w"> </span><span class="n">NOLOOP</span><span class="w"> </span><span class="n">PATH</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="s2">&#34;u_124&#34;</span><span class="w"> </span><span class="k">TO</span><span class="w"> </span><span class="s2">&#34;1891&#34;</span><span class="w"> </span><span class="n">over</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">BIDIRECT</span><span class="w"> </span><span class="n">UPTO</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="n">STEPS</span><span class="w"> </span><span class="n">yield</span><span class="w"> </span><span class="n">path</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="o">`</span><span class="n">p</span><span class="o">`</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">20</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>他的结果是：曾经喜欢的星战电影的大部分演职人员都也参与了这部和同样是“奥斯卡获奖”且“经典”的电影。</p>
<p><figure><a class="lightgallery" href="/nebulagraph-etl-dbt/reasoning_movie.webp" title="reasoning_movie" data-thumbnail="/nebulagraph-etl-dbt/reasoning_movie.webp">
        <img
            
            loading="lazy"
            src="/nebulagraph-etl-dbt/reasoning_movie.webp"
            srcset="/nebulagraph-etl-dbt/reasoning_movie.webp, /nebulagraph-etl-dbt/reasoning_movie.webp 1.5x, /nebulagraph-etl-dbt/reasoning_movie.webp 2x"
            sizes="auto"
            alt="/nebulagraph-etl-dbt/reasoning_movie.webp">
    </a></figure></p>
<blockquote>
<p>我在另一篇文章中给大家用同一个图谱展示了更多图数据库、图算法在推荐系统上的应用，如果大家感兴趣，欢迎阅读：https://www.siwei.io/recommendation-system-with-graphdb/ 。</p>
</blockquote>
<h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>7 总结</h2><p>当我们打算把海量数据利用图数据库的能力进行知识转化、洞察分析的时候，往往第一步就是要做多数据源到图数据的转换、处理、建模。对于在无从下手的新手们来说，一个可行的思路是从所有的相关信息出发，去设想最关注的关联关系，把边写出来，然后再罗列可以取得的点、以及需要的点、边上的属性。确定了初始的建模之后，就可以利用 ETL 工具把原始的数据清洗、ETL 成点、边类型的表结构，最后，利用导入工具导入 NebulaGraph。</p>
<p>借助于 dbt，我们可以版本控制、测试、迭代我们的建模与数据转换，一点点进化、丰富构建的知识图谱。</p>
<blockquote>
<p>题图版权：<a href="https://unsplash.com/photos/Bu4lHKIHr-E" target="_blank" rel="noopener noreferrer">Claudio</a></p>
</blockquote>]]></description>
</item><item>
    <title>基于图数据库的推荐系统</title>
    <link>https://siwei.io/recommendation-system-with-graphdb/</link>
    <pubDate>Tue, 25 Oct 2022 10:24:15 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/recommendation-system-with-graphdb/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/recommendation-system-with-graphdb/featured-image.webp" referrerpolicy="no-referrer">
            </div><h2 id="基于图数据库的推荐系统" class="headerLink">
    <a href="#%e5%9f%ba%e4%ba%8e%e5%9b%be%e6%95%b0%e6%8d%ae%e5%ba%93%e7%9a%84%e6%8e%a8%e8%8d%90%e7%b3%bb%e7%bb%9f" class="header-mark"></a>1 基于图数据库的推荐系统</h2><blockquote>
<p>本文是一个基于 NebulaGraph 上图算法、图数据库、机器学习、GNN 的推荐系统方法综述，大部分介绍的方法提供了 Playground 供大家学习。</p>
</blockquote>
<!--

[TOC]

-->
<h3 id="基本概念" class="headerLink">
    <a href="#%e5%9f%ba%e6%9c%ac%e6%a6%82%e5%bf%b5" class="header-mark"></a>1.1 基本概念</h3><p>推荐系统诞生的初衷是解决互联网时代才面临的信息量过载问题，从最初的 Amazon 图书推荐、商品推荐，到电影、音乐、视频、新闻推荐，如今大多数网站、App 中都有至少一个基于推荐系统生成的供用户选择的物品列表界面。而这些物品的推荐基本都是基于用户喜好、物品的特征、用户与物品交互历史和其他相关上下文去做的。</p>
<p>一个推荐系统会包含以下几个部分：</p>
<ul>
<li>数据、特征的处理</li>
<li>从特征出发，生成推荐列表</li>
<li>过滤、排序推荐列表</li>
</ul>
<p>这其中，过滤的核心方法主要有两种：基于内容的过滤（Content-Based Filtering）、与协同过滤（Collaborative Filtering）。</p>
<h4 id="基于内容的过滤" class="headerLink">
    <a href="#%e5%9f%ba%e4%ba%8e%e5%86%85%e5%ae%b9%e7%9a%84%e8%bf%87%e6%bb%a4" class="header-mark"></a>1.1.1 基于内容的过滤</h4><p>内容过滤方法的本质是给用户的偏好做画像，同时对所有待推荐的物品计算特征，做用户的画像与待推荐物品特征之间的距离运算，过滤得到相近的物品。</p>
<blockquote>
<p>ref: <a href="https://www.ise.bgu.ac.il/faculty/liorr/recsyshb/chContent.pdf" target="_blank" rel="noopener noreferrer">https://www.ise.bgu.ac.il/faculty/liorr/recsyshb/chContent.pdf</a></p>
</blockquote>
<p>内容过滤的方法的好处有：</p>
<ul>
<li>清晰的可解释性，无论是对用户的画像分析，还是对物品的运算本身天然带来了排序、过滤的可解释性</li>
<li>用户数据输入的独立性，对给定的待推荐用户来说，只需要单独分析他们的画像和历史评分就足够了</li>
<li>规避新物品冷启动问题，对于新的添加的物品，即使没有任何历史的用户评价，也可以做出推荐</li>
</ul>
<p>同时，基于内容过滤的挑战与劣势也有：</p>
<ul>
<li>特征提取，提取待推荐物品的特征并非总是很容易地，比如照片、视频等非纯文本的物品，而且往往这些物品的特征提取依赖领域专家知识，比如电影推荐系统中需要抽离出导演、电影分类等领域知识作为特征</li>
<li>不擅长突破舒适圈，发掘用户的潜在新兴趣点</li>
<li>存在新用户冷启动问题，对少有信息作为用户画像的用户来说，缺少做进一步物品画像、特种距离运算的输入</li>
</ul>
<h4 id="基于协同过滤" class="headerLink">
    <a href="#%e5%9f%ba%e4%ba%8e%e5%8d%8f%e5%90%8c%e8%bf%87%e6%bb%a4" class="header-mark"></a>1.1.2 基于协同过滤</h4><p>协同过滤方法本质是协同用户与系统之间的交互行为去给出推荐物品。</p>
<p>协同过滤的方法又分为<strong>基于记忆</strong>（memory-based）的与<strong>基于模型</strong>（model-based）的。</p>
<p>前者主要有物品与物品之间的协同过滤（ItemCF）和用户与用户之间的协同过滤（UserCF），ItemCF 简单来说是推荐和用户之前选择过的物品类似的物品：根据行为找物品之间的相似性，UserCF 则推荐与之有共同爱好的用户喜欢的物品：根据行为找用户之间的相似性；</p>
<p>而后者基于展现用户喜好的历史实践信息、利用统计与机器学习方法训练模型，对新的用户偏好进行推理。</p>
<p>协同过滤的方法的好处有：</p>
<ul>
<li>无需对非结构化物品进行特征分析，因为协同过滤关注的是用户和物品之间的协同交互，这绕过了对物品领域知识处理的需求</li>
<li>对用户的个性化更强，更细，基于行为的分析使得对用户偏好的划分本质上是连续的（相比来说，对用户做画像的方法则是离散的），这样的推荐结果会更加“千人千面”，同时，也会蕴含内容过滤、有限的画像角度之下的“惊喜”推荐</li>
</ul>
<p>而它的缺点有：</p>
<ul>
<li>有新用户和新物件上的冷启动问题，因为它们身上都缺少历史喜好行为的信息</li>
</ul>
<blockquote>
<p>ref: <a href="https://coek.info/pdf-a-dynamic-collaborative-filtering-system-via-a-weighted-clustering-approach-.html" target="_blank" rel="noopener noreferrer">https://coek.info/pdf-a-dynamic-collaborative-filtering-system-via-a-weighted-clustering-approach-.html</a></p>
</blockquote>
<p>从以上两种主要的过滤方式的优劣中我们可以看到，它们之中存在互补的地方，比如新物件的冷启动上，基于内容的过滤有优势，对于个性化、惊喜推荐角度，协同过滤有优势。所以，在真实世界中，推荐系统在大多演化地比上边的归类复杂得多，而且常常是多种方法的融合。</p>
<h3 id="基于图的个性推荐" class="headerLink">
    <a href="#%e5%9f%ba%e4%ba%8e%e5%9b%be%e7%9a%84%e4%b8%aa%e6%80%a7%e6%8e%a8%e8%8d%90" class="header-mark"></a>1.2 基于图的个性推荐</h3><p>图技术、图数据库技术在推荐系统中的应用是多方面的，本章我们就从图数据库的出发点上给出多种应用的例子。</p>
<h4 id="建立图谱" class="headerLink">
    <a href="#%e5%bb%ba%e7%ab%8b%e5%9b%be%e8%b0%b1" class="header-mark"></a>1.2.1 建立图谱</h4><p>在开始之前，我简单介绍一下本文使用的图数据集。</p>
<p>为了给出更接近实际情况的例子，我从两个公开的数据集 <a href="https://www.omdb.org/en/us/content/Help:DataDownload" target="_blank" rel="noopener noreferrer">OMDB</a> 和 <a href="https://grouplens.org/datasets/movielens/" target="_blank" rel="noopener noreferrer">MovieLens</a> 中分别抽取了需要的信息，组成了一个既包含电影的卡司（导演、演员）和类型、又包含用户对电影评分记录的知识图谱。</p>
<p>它的 Scehma 如下：</p>
<ul>
<li>
<p>顶点：</p>
<ul>
<li>
<p>user(user_id)</p>
</li>
<li>
<p>movie(name)</p>
</li>
<li>
<p>person(name, birthdate)</p>
</li>
<li>
<p>genre(name)</p>
</li>
</ul>
</li>
<li>
<p>边：</p>
<ul>
<li>
<p>watched(rate(double))</p>
</li>
<li>
<p>with_genre</p>
</li>
<li>
<p>directed_by</p>
</li>
<li>
<p>acted_by</p>
</li>
</ul>
</li>
</ul>
<p><figure><a class="lightgallery" href="/recommendation-system-with-graphdb/schema_0.webp" title="schema_0" data-thumbnail="/recommendation-system-with-graphdb/schema_0.webp">
        <img
            
            loading="lazy"
            src="/recommendation-system-with-graphdb/schema_0.webp"
            srcset="/recommendation-system-with-graphdb/schema_0.webp, /recommendation-system-with-graphdb/schema_0.webp 1.5x, /recommendation-system-with-graphdb/schema_0.webp 2x"
            sizes="auto"
            alt="/recommendation-system-with-graphdb/schema_0.webp">
    </a></figure></p>
<p>这个数据的准备、ETL 过程会在另外的文章里详细介绍，在进入下一章节之前，我们可以用 Nebula-Up 一键搭起一个测试的 NebulaGraph 单机集群，然后参考数据集的 GitHub 仓库，一键导入所需数据：</p>
<blockquote>
<p>注：</p>
<ul>
<li>
<p>Nebula-UP：https://github.com/wey-gu/nebula-up</p>
</li>
<li>
<p>数据集仓库：https://github.com/wey-gu/movie-recommendation-dataset</p>
</li>
</ul>
</blockquote>
<p>过程最简单的操作过程为：</p>
<ul>
<li>用 Nebula-Up 安装 NebulaGraph</li>
<li>克隆 movie-recommendation-dataset</li>
<li>导入数据集 NebulaGraph</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -fsSL nebula-up.siwei.io/install.sh <span class="p">|</span> bash
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git clone https://github.com/wey-gu/movie-recommendation-dataset.git <span class="o">&amp;&amp;</span> <span class="nb">cd</span> movie-recommendation-dataset
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">docker run --rm -ti <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --network<span class="o">=</span>nebula-net <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v <span class="si">${</span><span class="nv">PWD</span><span class="si">}</span>:/root/ <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v <span class="si">${</span><span class="nv">PWD</span><span class="si">}</span>/dbt_project/to_nebulagraph/:/data <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    vesoft/nebula-importer:v3.2.0 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --config /root/nebula-importer.yaml
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="基于内容的过滤-1" class="headerLink">
    <a href="#%e5%9f%ba%e4%ba%8e%e5%86%85%e5%ae%b9%e7%9a%84%e8%bf%87%e6%bb%a4-1" class="header-mark"></a>1.2.2 基于内容的过滤</h4><p>CBF 的思想是利用领域知识、历史记录、元数据分别对用户和物件做画像、打标签，最终根据用户的标签与待推荐物件之间的距离评分排序给出推荐。</p>
<p>对用户的画像不涉及其他用户的信息，但是输入的特征可能来源于元数据（生日、国籍、性别、年龄），历史记录（评论、打分、购买、浏览）等等，在这些基础之上对用户进行标签标注、分类、聚类。</p>
<p>对物件的画像输入的特征可能是基于语言处理（NLP、TF-IDF、LFM）、专家标注、多媒体处理（视觉到文字再NLP、音频风格处理、音频到文字再NLP）等。</p>
<p>有了用户画像与物件的画像特征、对用户涉及的画像进行相关画像物件中新对象的近似度计算，再评分加权，就可以获得最终的推荐排序了。这其中的近似度计算可以是常见的 KNN，余弦相似，Jaccard 相似等各种方法。</p>
<p>CBF 的方法中没有限定具体实现方式，如前边介绍，可能是基于机器学习、elasticsearch、图谱等不同的方法。这里为切合本章的主题，我给出一个基于图数据库、图谱上的 CBF 的例子，做一个电影推荐系统，能让读者理解这个方法的思想的同时熟悉图数据库、知识图谱的方法。</p>
<p>这其中用户的特征我们直接利用历史电影评价记录，而推荐物件：电影，的画像则来自于领域中的知识。这些知识有：电影风格、电影的卡斯、导演。近似度这里我们就采用图谱中基于关系的 Jaccard 相似度算法。</p>
<h5 id="jaccard-index" class="headerLink">
    <a href="#jaccard-index" class="header-mark"></a>1.2.2.1 Jaccard Index</h5><p><a href="https://en.wikipedia.org/wiki/Jaccard_index" target="_blank" rel="noopener noreferrer">Jaccard Index</a> 是一个描述两个集合距离的定义公式，非常简单、符合直觉地取两者的交集与并集测度的比例，它的定义记为：
$$
J(A,B)= \frac {|A\cap B|}{|A\cup B|}
$$
这里，我们把交集理解为 A 与 B 共同连接的点（有共同的导演、电影类型、演员），并集理解为这几种关系下与 A 或者 B 直连的所有点，而测度就直接用数量表示。</p>
<h5 id="cbf-方法在-nebulagraph-中的实现" class="headerLink">
    <a href="#cbf-%e6%96%b9%e6%b3%95%e5%9c%a8-nebulagraph-%e4%b8%ad%e7%9a%84%e5%ae%9e%e7%8e%b0" class="header-mark"></a>1.2.2.2 CBF 方法在 NebulaGraph 中的实现</h5><p>CBF 方法分如下几步：</p>
<ul>
<li>找出推荐用户评分过的电影</li>
<li>从用户评分过的电影，经由导演卡司、电影类型找到新的待推荐电影</li>
<li>对看过的电影与新的电影，藉由导演、卡司、电影类型的关系，在图上做 Jaccard 相似性运算，得出每一对看过的电影和待推荐新电影之间的 Jaccard 系数</li>
<li>把用户对看过电影的评分作为加权系数，针对其到每一个新电影之间的 Jaccard 系数加权评分，获得排序后的推荐电影列表</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="o">//</span><span class="w"> </span><span class="err">用户</span><span class="w"> </span><span class="n">u_124</span><span class="w"> </span><span class="err">看过的电影</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">u</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">u</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;u_124&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="nf">collect</span><span class="p">(</span><span class="nf">id</span><span class="p">(</span><span class="n">m</span><span class="p">))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">watched_movies_id</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">根据电影的标注关系找到备选推荐电影，刨除看过的，把评分、交集关联链路的数量传下去</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">u</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">directed_by</span><span class="o">|</span><span class="n">acted_by</span><span class="o">|</span><span class="n">with_genre</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">intersection</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">directed_by</span><span class="o">|</span><span class="n">acted_by</span><span class="o">|</span><span class="n">with_genre</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">recomm</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">u</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;u_124&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">recomm</span><span class="p">)</span><span class="w"> </span><span class="k">IN</span><span class="w"> </span><span class="n">watched_movies_id</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">2</span><span class="p">.</span><span class="mi">5</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">.</span><span class="mi">5</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">rate</span><span class="p">,</span><span class="w"> </span><span class="n">m</span><span class="p">,</span><span class="w"> </span><span class="n">recomm</span><span class="p">,</span><span class="w"> </span><span class="nf">size</span><span class="p">(</span><span class="nf">COLLECT</span><span class="p">(</span><span class="n">intersection</span><span class="p">))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">intersection_size</span><span class="w"> </span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">intersection_size</span><span class="w"> </span><span class="k">DESC</span><span class="w"> </span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">50</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">计算</span><span class="w"> </span><span class="n">Jaccard</span><span class="w"> </span><span class="k">index</span><span class="o">-----------------------------------------------</span><span class="c1">--
</span></span></span><span class="line"><span class="cl"><span class="c1">
</span></span></span><span class="line"><span class="cl"><span class="c1">// 针对每一对 m 和 recomm：
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">//</span><span class="w"> </span><span class="err">开始计算看过的电影，集合</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="err">的部分</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">directed_by</span><span class="o">|</span><span class="n">acted_by</span><span class="o">|</span><span class="n">with_genre</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">intersection</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">rate</span><span class="p">,</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">m</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">m_id</span><span class="p">,</span><span class="w"> </span><span class="n">recomm</span><span class="p">,</span><span class="w"> </span><span class="n">intersection_size</span><span class="p">,</span><span class="w"> </span><span class="nf">COLLECT</span><span class="p">(</span><span class="nf">id</span><span class="p">(</span><span class="n">intersection</span><span class="p">))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">set_a</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">计算推荐电影，集合</span><span class="w"> </span><span class="n">b</span><span class="w"> </span><span class="err">的部分</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">recomm</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">directed_by</span><span class="o">|</span><span class="n">acted_by</span><span class="o">|</span><span class="n">with_genre</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">intersection</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">rate</span><span class="p">,</span><span class="w"> </span><span class="n">m_id</span><span class="p">,</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">recomm</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">recomm_id</span><span class="p">,</span><span class="w"> </span><span class="n">set_a</span><span class="p">,</span><span class="w"> </span><span class="n">intersection_size</span><span class="p">,</span><span class="w"> </span><span class="nf">COLLECT</span><span class="p">(</span><span class="nf">id</span><span class="p">(</span><span class="n">intersection</span><span class="p">))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">set_b</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">得到并集数量</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">rate</span><span class="p">,</span><span class="w"> </span><span class="n">m_id</span><span class="p">,</span><span class="w"> </span><span class="n">recomm_id</span><span class="p">,</span><span class="w"> </span><span class="nf">toFloat</span><span class="p">(</span><span class="n">intersection_size</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">intersection_size</span><span class="p">,</span><span class="w"> </span><span class="nf">toSet</span><span class="p">(</span><span class="n">set_a</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">set_b</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">A_U_B</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">得到每一对</span><span class="w"> </span><span class="n">m</span><span class="w"> </span><span class="err">和</span><span class="w"> </span><span class="n">recomm</span><span class="w"> </span><span class="err">的</span><span class="w"> </span><span class="n">Jaccard</span><span class="w"> </span><span class="k">index</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">A_N_B</span><span class="o">/</span><span class="n">A_U_B</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">rate</span><span class="p">,</span><span class="w"> </span><span class="n">m_id</span><span class="p">,</span><span class="w"> </span><span class="n">recomm_id</span><span class="p">,</span><span class="w"> </span><span class="n">intersection_size</span><span class="o">/</span><span class="nf">size</span><span class="p">(</span><span class="n">A_U_B</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">jaccard_index</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">计算</span><span class="w"> </span><span class="n">Jaccard</span><span class="w"> </span><span class="k">index</span><span class="o">-----------------------------------------------</span><span class="c1">--
</span></span></span><span class="line"><span class="cl"><span class="c1">
</span></span></span><span class="line"><span class="cl"><span class="c1">
</span></span></span><span class="line"><span class="cl"><span class="c1">// 得到每一个被推荐的电影 recomm_id，经由不同看过电影推荐链路的相似度 = 评分 * jaccard_index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">WITH</span><span class="w"> </span><span class="n">recomm_id</span><span class="p">,</span><span class="w"> </span><span class="n">m_id</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="n">rate</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">jaccard_index</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">score</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">对每一个</span><span class="w"> </span><span class="n">recomm_id</span><span class="w"> </span><span class="err">按照</span><span class="w"> </span><span class="n">m_id</span><span class="w"> </span><span class="err">加权求得相似度的和，为总的推荐程度评分，降序排列</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">recomm_id</span><span class="p">,</span><span class="w"> </span><span class="nf">sum</span><span class="p">(</span><span class="n">score</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">sim_score</span><span class="w"> </span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">sim_score</span><span class="w"> </span><span class="k">DESC</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">sim_score</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">recomm_id</span><span class="p">,</span><span class="w"> </span><span class="n">sim_score</span><span class="w"> </span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">50</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>上边查询的执行结果截取出来是：</p>
<table>
<thead>
<tr>
<th style="text-align:left">recomm_id</th>
<th style="text-align:left">sim_score</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1891</td>
<td style="text-align:left">0.2705882352941177</td>
</tr>
<tr>
<td style="text-align:left">1892</td>
<td style="text-align:left">0.22278481012658227</td>
</tr>
<tr>
<td style="text-align:left">1894</td>
<td style="text-align:left">0.15555555555555556</td>
</tr>
<tr>
<td style="text-align:left">808</td>
<td style="text-align:left">0.144</td>
</tr>
<tr>
<td style="text-align:left">1895</td>
<td style="text-align:left">0.13999999999999999</td>
</tr>
<tr>
<td style="text-align:left">85</td>
<td style="text-align:left">0.12631578947368421</td>
</tr>
<tr>
<td style="text-align:left">348</td>
<td style="text-align:left">0.12413793103448277</td>
</tr>
<tr>
<td style="text-align:left">18746</td>
<td style="text-align:left">0.11666666666666668</td>
</tr>
<tr>
<td style="text-align:left">628</td>
<td style="text-align:left">0.11636363636363636</td>
</tr>
<tr>
<td style="text-align:left">3005</td>
<td style="text-align:left">0.10566037735849057</td>
</tr>
</tbody>
</table>
<h5 id="可视化分析" class="headerLink">
    <a href="#%e5%8f%af%e8%a7%86%e5%8c%96%e5%88%86%e6%9e%90" class="header-mark"></a>1.2.2.3 可视化分析</h5><p>我们把整个过程中的一些步骤的查询修改一下为 <code>p=xxx</code> 的方式，并渲染出来，会更加方便理解</p>
<ul>
<li>
<p>用户 u_124 看过的、评分过的电影</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="o">//</span><span class="w"> </span><span class="err">用户</span><span class="w"> </span><span class="n">u_124</span><span class="w"> </span><span class="err">看过的电影</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">u</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">u</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;u_124&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><figure><a class="lightgallery" href="/recommendation-system-with-graphdb/CBF_step0.webp" title="CBF_step0" data-thumbnail="/recommendation-system-with-graphdb/CBF_step0.webp">
        <img
            
            loading="lazy"
            src="/recommendation-system-with-graphdb/CBF_step0.webp"
            srcset="/recommendation-system-with-graphdb/CBF_step0.webp, /recommendation-system-with-graphdb/CBF_step0.webp 1.5x, /recommendation-system-with-graphdb/CBF_step0.webp 2x"
            sizes="auto"
            alt="/recommendation-system-with-graphdb/CBF_step0.webp">
    </a></figure></p>
</li>
<li>
<p>下一步找到这些看过的电影在相同的演员、导演、电影类型的关系上，图谱关联的所有其他电影</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="o">//</span><span class="w"> </span><span class="err">用户</span><span class="w"> </span><span class="n">u_124</span><span class="w"> </span><span class="err">看过的电影</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">u</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">u</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;u_124&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="nf">collect</span><span class="p">(</span><span class="nf">id</span><span class="p">(</span><span class="n">m</span><span class="p">))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">watched_movies_id</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">根据电影的标注关系找到备选推荐电影，刨除看过的，把评分、交集关联链路的数量传下去</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">u</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">directed_by</span><span class="o">|</span><span class="n">acted_by</span><span class="o">|</span><span class="n">with_genre</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">intersection</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">directed_by</span><span class="o">|</span><span class="n">acted_by</span><span class="o">|</span><span class="n">with_genre</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">recomm</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">u</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;u_124&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">recomm</span><span class="p">)</span><span class="w"> </span><span class="k">IN</span><span class="w"> </span><span class="n">watched_movies_id</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="p">,</span><span class="w"> </span><span class="nf">size</span><span class="p">(</span><span class="nf">COLLECT</span><span class="p">(</span><span class="n">intersection</span><span class="p">))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">intersection_size</span><span class="w"> </span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">intersection_size</span><span class="w"> </span><span class="k">DESC</span><span class="w"> </span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">500</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到用户看过电影经由演员、类型扩散出好多新的电影</p>
<p><figure><a class="lightgallery" href="/recommendation-system-with-graphdb/CBF_step1.webp" title="CBF_step1" data-thumbnail="/recommendation-system-with-graphdb/CBF_step1.webp">
        <img
            
            loading="lazy"
            src="/recommendation-system-with-graphdb/CBF_step1.webp"
            srcset="/recommendation-system-with-graphdb/CBF_step1.webp, /recommendation-system-with-graphdb/CBF_step1.webp 1.5x, /recommendation-system-with-graphdb/CBF_step1.webp 2x"
            sizes="auto"
            alt="/recommendation-system-with-graphdb/CBF_step1.webp">
    </a></figure></p>
</li>
<li>
<p>在得到这些待推荐电影以及推荐路径之后，通过 Jaccard 系数与用户在路径第一条边上的评分综合评定之后，得到了最终的结果，这里我们把结果再可视化一下：取得它们和用户之间的路径并渲染出来</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="o">//</span><span class="w"> </span><span class="err">用户</span><span class="w"> </span><span class="n">u_124</span><span class="w"> </span><span class="err">看过的电影</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">u</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">u</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;u_124&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="nf">collect</span><span class="p">(</span><span class="nf">id</span><span class="p">(</span><span class="n">m</span><span class="p">))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">watched_movies_id</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">根据电影的标注关系找到备选推荐电影，刨除看过的，把评分、交集关联链路的数量传下去</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">u</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">directed_by</span><span class="o">|</span><span class="n">acted_by</span><span class="o">|</span><span class="n">with_genre</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">intersection</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">directed_by</span><span class="o">|</span><span class="n">acted_by</span><span class="o">|</span><span class="n">with_genre</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">recomm</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">u</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;u_124&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">recomm</span><span class="p">)</span><span class="w"> </span><span class="k">IN</span><span class="w"> </span><span class="n">watched_movies_id</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">2</span><span class="p">.</span><span class="mi">5</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">.</span><span class="mi">5</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">rate</span><span class="p">,</span><span class="w"> </span><span class="n">m</span><span class="p">,</span><span class="w"> </span><span class="n">recomm</span><span class="p">,</span><span class="w"> </span><span class="nf">size</span><span class="p">(</span><span class="nf">COLLECT</span><span class="p">(</span><span class="n">intersection</span><span class="p">))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">intersection_size</span><span class="w"> </span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">intersection_size</span><span class="w"> </span><span class="k">DESC</span><span class="w"> </span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">50</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">计算</span><span class="w"> </span><span class="n">Jaccard</span><span class="w"> </span><span class="k">index</span><span class="o">-----------------------------------------------</span><span class="c1">--
</span></span></span><span class="line"><span class="cl"><span class="c1">
</span></span></span><span class="line"><span class="cl"><span class="c1">// 针对每一对 m 和 recomm：
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">//</span><span class="w"> </span><span class="err">开始计算看过的电影，集合</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="err">的部分</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">directed_by</span><span class="o">|</span><span class="n">acted_by</span><span class="o">|</span><span class="n">with_genre</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">intersection</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">rate</span><span class="p">,</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">m</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">m_id</span><span class="p">,</span><span class="w"> </span><span class="n">recomm</span><span class="p">,</span><span class="w"> </span><span class="n">intersection_size</span><span class="p">,</span><span class="w"> </span><span class="nf">COLLECT</span><span class="p">(</span><span class="nf">id</span><span class="p">(</span><span class="n">intersection</span><span class="p">))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">set_a</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">计算推荐电影，集合</span><span class="w"> </span><span class="n">b</span><span class="w"> </span><span class="err">的部分</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">recomm</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">directed_by</span><span class="o">|</span><span class="n">acted_by</span><span class="o">|</span><span class="n">with_genre</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">intersection</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">rate</span><span class="p">,</span><span class="w"> </span><span class="n">m_id</span><span class="p">,</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">recomm</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">recomm_id</span><span class="p">,</span><span class="w"> </span><span class="n">set_a</span><span class="p">,</span><span class="w"> </span><span class="n">intersection_size</span><span class="p">,</span><span class="w"> </span><span class="nf">COLLECT</span><span class="p">(</span><span class="nf">id</span><span class="p">(</span><span class="n">intersection</span><span class="p">))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">set_b</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">得到并集数量</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">rate</span><span class="p">,</span><span class="w"> </span><span class="n">m_id</span><span class="p">,</span><span class="w"> </span><span class="n">recomm_id</span><span class="p">,</span><span class="w"> </span><span class="nf">toFloat</span><span class="p">(</span><span class="n">intersection_size</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">intersection_size</span><span class="p">,</span><span class="w"> </span><span class="nf">toSet</span><span class="p">(</span><span class="n">set_a</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">set_b</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">A_U_B</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">得到每一对</span><span class="w"> </span><span class="n">m</span><span class="w"> </span><span class="err">和</span><span class="w"> </span><span class="n">recomm</span><span class="w"> </span><span class="err">的</span><span class="w"> </span><span class="n">Jaccard</span><span class="w"> </span><span class="k">index</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">A_N_B</span><span class="o">/</span><span class="n">A_U_B</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">rate</span><span class="p">,</span><span class="w"> </span><span class="n">m_id</span><span class="p">,</span><span class="w"> </span><span class="n">recomm_id</span><span class="p">,</span><span class="w"> </span><span class="n">intersection_size</span><span class="o">/</span><span class="nf">size</span><span class="p">(</span><span class="n">A_U_B</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">jaccard_index</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">计算</span><span class="w"> </span><span class="n">Jaccard</span><span class="w"> </span><span class="k">index</span><span class="o">-----------------------------------------------</span><span class="c1">--
</span></span></span><span class="line"><span class="cl"><span class="c1">
</span></span></span><span class="line"><span class="cl"><span class="c1">
</span></span></span><span class="line"><span class="cl"><span class="c1">// 得到每一个被推荐的电影 recomm_id，经由不同看过电影推荐链路的相似度 = 评分 * jaccard_index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">WITH</span><span class="w"> </span><span class="n">recomm_id</span><span class="p">,</span><span class="w"> </span><span class="n">m_id</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="n">rate</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">jaccard_index</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">score</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">对每一个</span><span class="w"> </span><span class="n">recomm_id</span><span class="w"> </span><span class="err">按照</span><span class="w"> </span><span class="n">m_id</span><span class="w"> </span><span class="err">加权求得相似度的和，为总的推荐程度评分，降序排列</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">recomm_id</span><span class="p">,</span><span class="w"> </span><span class="nf">sum</span><span class="p">(</span><span class="n">score</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">sim_score</span><span class="w"> </span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">sim_score</span><span class="w"> </span><span class="k">DESC</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">sim_score</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">recomm_id</span><span class="p">,</span><span class="w"> </span><span class="n">sim_score</span><span class="w"> </span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">10</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="nf">COLLECT</span><span class="p">(</span><span class="n">recomm_id</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">recomm_ids</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">u</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">directed_by</span><span class="o">|</span><span class="n">acted_by</span><span class="o">|</span><span class="n">with_genre</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">intersection</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">directed_by</span><span class="o">|</span><span class="n">acted_by</span><span class="o">|</span><span class="n">with_genre</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">recomm</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">u</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;u_124&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">recomm</span><span class="p">)</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">recomm_ids</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>哇，我们可以很清晰地看到推荐的理由路径（喜欢星战，进而由多条共同的类型、演员、导演引导出未观看的几部星战电影），这其实就是 CBF 的优势之一：天然具有较好的可解释性。</p>
<p><figure><a class="lightgallery" href="/recommendation-system-with-graphdb/CBF_step2.webp" title="CBF_step2" data-thumbnail="/recommendation-system-with-graphdb/CBF_step2.webp">
        <img
            
            loading="lazy"
            src="/recommendation-system-with-graphdb/CBF_step2.webp"
            srcset="/recommendation-system-with-graphdb/CBF_step2.webp, /recommendation-system-with-graphdb/CBF_step2.webp 1.5x, /recommendation-system-with-graphdb/CBF_step2.webp 2x"
            sizes="auto"
            alt="/recommendation-system-with-graphdb/CBF_step2.webp">
    </a></figure></p>
</li>
</ul>
<h4 id="基于记忆的协同过滤" class="headerLink">
    <a href="#%e5%9f%ba%e4%ba%8e%e8%ae%b0%e5%bf%86%e7%9a%84%e5%8d%8f%e5%90%8c%e8%bf%87%e6%bb%a4" class="header-mark"></a>1.2.3 基于记忆的协同过滤</h4><p>前边我们提过了，协同过滤主要可以分为两种：</p>
<ul>
<li>User-User CF 是基于多个用户对物件的历史行为，判定用户之间的相似性，然后根据相似用户的选择推荐新的物件。</li>
<li>Item-Item CF 则是判断物件之间的相似性，给用户推荐他喜欢的物品相似的物品。</li>
</ul>
<p>这里，ItemCF 看起来和前边的 CBF 有些类似，他们的核心区别在于 CBF 找到相似物件的方式是基于物件的“内容”本身，是一些领域知识的画像，而 ItemCF 的协同则是考虑用户对物件的历史行为。</p>
<h5 id="itemcf" class="headerLink">
    <a href="#itemcf" class="header-mark"></a>1.2.3.1 ItemCF</h5><p>这个方法分如下几步：</p>
<ul>
<li>找出推荐用户评分过的电影</li>
<li>经由用户的高评分电影，找到其他给出高评分用户所看过的新的高评分电影</li>
<li>对看过的电影与新的电影，藉由用户的评分，在图上做 Jaccard 相似性运算，得出每一对看过的电影和待推荐新电影之间的 Jaccard 系数</li>
<li>把用户对看过电影的评分作为加权系数，针对其到每一个新电影之间的 Jaccard 系数加权评分，获得排序后的推荐电影列表</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="o">//</span><span class="w"> </span><span class="err">用户</span><span class="w"> </span><span class="n">u_124</span><span class="w"> </span><span class="err">看过的并给出高评分的电影</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">u</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">u</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;u_124&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">e</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="nf">collect</span><span class="p">(</span><span class="nf">id</span><span class="p">(</span><span class="n">m</span><span class="p">))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">watched_movies_id</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">根据同样也看过这些电影，并给出高评分的用户，得出待推荐的电影</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">u</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[</span><span class="n">e0</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">intersection</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e1</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">recomm</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">u</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;u_124&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">recomm</span><span class="p">)</span><span class="w"> </span><span class="k">IN</span><span class="w"> </span><span class="n">watched_movies_id</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">e0</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">&gt;</span><span class="mi">3</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">e1</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">2</span><span class="p">.</span><span class="mi">5</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">.</span><span class="mi">5</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">rate</span><span class="p">,</span><span class="w"> </span><span class="n">m</span><span class="p">,</span><span class="w"> </span><span class="n">recomm</span><span class="p">,</span><span class="w"> </span><span class="nf">size</span><span class="p">(</span><span class="nf">COLLECT</span><span class="p">(</span><span class="n">intersection</span><span class="p">))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">intersection_size</span><span class="w"> </span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">intersection_size</span><span class="w"> </span><span class="k">DESC</span><span class="w"> </span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">50</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">计算</span><span class="w"> </span><span class="n">Jaccard</span><span class="w"> </span><span class="k">index</span><span class="o">-----------------------------------------------</span><span class="c1">--
</span></span></span><span class="line"><span class="cl"><span class="c1">
</span></span></span><span class="line"><span class="cl"><span class="c1">// 针对每一对 m 和 recomm：
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">//</span><span class="w"> </span><span class="err">开始计算看过的电影，集合</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="err">的部分</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[</span><span class="n">e0</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">intersection</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">e0</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">&gt;</span><span class="mi">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">rate</span><span class="p">,</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">m</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">m_id</span><span class="p">,</span><span class="w"> </span><span class="n">recomm</span><span class="p">,</span><span class="w"> </span><span class="n">intersection_size</span><span class="p">,</span><span class="w"> </span><span class="nf">COLLECT</span><span class="p">(</span><span class="nf">id</span><span class="p">(</span><span class="n">intersection</span><span class="p">))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">set_a</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">计算推荐电影，集合</span><span class="w"> </span><span class="n">b</span><span class="w"> </span><span class="err">的部分</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">recomm</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[</span><span class="n">e1</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">intersection</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">e1</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">&gt;</span><span class="mi">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">rate</span><span class="p">,</span><span class="w"> </span><span class="n">m_id</span><span class="p">,</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">recomm</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">recomm_id</span><span class="p">,</span><span class="w"> </span><span class="n">set_a</span><span class="p">,</span><span class="w"> </span><span class="n">intersection_size</span><span class="p">,</span><span class="w"> </span><span class="nf">COLLECT</span><span class="p">(</span><span class="nf">id</span><span class="p">(</span><span class="n">intersection</span><span class="p">))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">set_b</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">得到并集数量</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">rate</span><span class="p">,</span><span class="w"> </span><span class="n">m_id</span><span class="p">,</span><span class="w"> </span><span class="n">recomm_id</span><span class="p">,</span><span class="w"> </span><span class="nf">toFloat</span><span class="p">(</span><span class="n">intersection_size</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">intersection_size</span><span class="p">,</span><span class="w"> </span><span class="nf">toSet</span><span class="p">(</span><span class="n">set_a</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">set_b</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">A_U_B</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">得到每一对</span><span class="w"> </span><span class="n">m</span><span class="w"> </span><span class="err">和</span><span class="w"> </span><span class="n">recomm</span><span class="w"> </span><span class="err">的</span><span class="w"> </span><span class="n">Jaccard</span><span class="w"> </span><span class="k">index</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">A_N_B</span><span class="o">/</span><span class="n">A_U_B</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">rate</span><span class="p">,</span><span class="w"> </span><span class="n">m_id</span><span class="p">,</span><span class="w"> </span><span class="n">recomm_id</span><span class="p">,</span><span class="w"> </span><span class="n">intersection_size</span><span class="o">/</span><span class="nf">size</span><span class="p">(</span><span class="n">A_U_B</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">jaccard_index</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">计算</span><span class="w"> </span><span class="n">Jaccard</span><span class="w"> </span><span class="k">index</span><span class="o">-----------------------------------------------</span><span class="c1">--
</span></span></span><span class="line"><span class="cl"><span class="c1">
</span></span></span><span class="line"><span class="cl"><span class="c1">
</span></span></span><span class="line"><span class="cl"><span class="c1">// 得到每一个被推荐的电影 recomm_id，经由不同看过电影推荐链路的相似度 = 评分 * jaccard_index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">WITH</span><span class="w"> </span><span class="n">recomm_id</span><span class="p">,</span><span class="w"> </span><span class="n">m_id</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="n">rate</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">jaccard_index</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">score</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">对每一个</span><span class="w"> </span><span class="n">recomm_id</span><span class="w"> </span><span class="err">按照</span><span class="w"> </span><span class="n">m_id</span><span class="w"> </span><span class="err">加权求得相似度的和，为总的推荐程度评分，降序排列，只取正值</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">recomm_id</span><span class="p">,</span><span class="w"> </span><span class="nf">sum</span><span class="p">(</span><span class="n">score</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">sim_score</span><span class="w"> </span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">sim_score</span><span class="w"> </span><span class="k">DESC</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">sim_score</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">recomm_id</span><span class="p">,</span><span class="w"> </span><span class="n">sim_score</span><span class="w"> </span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">50</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>结果：</p>
<table>
<thead>
<tr>
<th style="text-align:left">recomm_id</th>
<th style="text-align:left">sim_score</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">832</td>
<td style="text-align:left">0.8428369424692955</td>
</tr>
<tr>
<td style="text-align:left">114707</td>
<td style="text-align:left">0.7913842214590154</td>
</tr>
<tr>
<td style="text-align:left">64957</td>
<td style="text-align:left">0.6924673321504288</td>
</tr>
<tr>
<td style="text-align:left">120880</td>
<td style="text-align:left">0.5775219768736295</td>
</tr>
<tr>
<td style="text-align:left">807</td>
<td style="text-align:left">0.497532028328161</td>
</tr>
<tr>
<td style="text-align:left">473</td>
<td style="text-align:left">0.4748322300870322</td>
</tr>
<tr>
<td style="text-align:left">52797</td>
<td style="text-align:left">0.2311965559170528</td>
</tr>
<tr>
<td style="text-align:left">12768</td>
<td style="text-align:left">0.19642857142857142</td>
</tr>
<tr>
<td style="text-align:left">167058</td>
<td style="text-align:left">0.19642857142857142</td>
</tr>
</tbody>
</table>
<h5 id="可视化分析-itemcf" class="headerLink">
    <a href="#%e5%8f%af%e8%a7%86%e5%8c%96%e5%88%86%e6%9e%90-itemcf" class="header-mark"></a>1.2.3.2 可视化分析 ItemCF</h5><p>同样，我们把整个过程中的一些步骤的查询修改一下为 <code>p=xxx</code> 的方式，并渲染出来，看看可以看出什么有意思的的洞察。</p>
<ul>
<li>
<p>找出推荐用户评分过的电影</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="o">//</span><span class="w"> </span><span class="err">用户</span><span class="w"> </span><span class="n">u_124</span><span class="w"> </span><span class="err">看过的并给出高评分的电影</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">u</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">u</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;u_124&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">e</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>它们是：</p>
<p><figure><a class="lightgallery" href="/recommendation-system-with-graphdb/ItemCF_step0.webp" title="ItemCF_step0" data-thumbnail="/recommendation-system-with-graphdb/ItemCF_step0.webp">
        <img
            
            loading="lazy"
            src="/recommendation-system-with-graphdb/ItemCF_step0.webp"
            srcset="/recommendation-system-with-graphdb/ItemCF_step0.webp, /recommendation-system-with-graphdb/ItemCF_step0.webp 1.5x, /recommendation-system-with-graphdb/ItemCF_step0.webp 2x"
            sizes="auto"
            alt="/recommendation-system-with-graphdb/ItemCF_step0.webp">
    </a></figure></p>
</li>
<li>
<p>经由用户的高评分电影，找到其他给出高评分用户所看过的新的高评分电影，修改结果为路径</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="o">//</span><span class="w"> </span><span class="err">用户</span><span class="w"> </span><span class="n">u_124</span><span class="w"> </span><span class="err">看过的并给出高评分的电影</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">u</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">u</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;u_124&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">e</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="nf">collect</span><span class="p">(</span><span class="nf">id</span><span class="p">(</span><span class="n">m</span><span class="p">))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">watched_movies_id</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">根据同样也看过这些电影，并给出高评分的用户，得出待推荐的电影</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">u</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[</span><span class="n">e0</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">intersection</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e1</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">recomm</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">u</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;u_124&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">recomm</span><span class="p">)</span><span class="w"> </span><span class="k">IN</span><span class="w"> </span><span class="n">watched_movies_id</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">e0</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">&gt;</span><span class="mi">3</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">e1</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">p</span><span class="p">,</span><span class="w"> </span><span class="nf">size</span><span class="p">(</span><span class="nf">COLLECT</span><span class="p">(</span><span class="n">intersection</span><span class="p">))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">intersection_size</span><span class="w"> </span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">intersection_size</span><span class="w"> </span><span class="k">DESC</span><span class="w"> </span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">200</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到待推荐的电影在路径的右边末端，中间连接着的都是其他用户的推荐记录，它的模式和 CBF 真的很像，只不过关联的关系不是具体的内容，而是行为。</p>
<p><figure><a class="lightgallery" href="/recommendation-system-with-graphdb/ItemCF_step1.webp" title="ItemCF_step1" data-thumbnail="/recommendation-system-with-graphdb/ItemCF_step1.webp">
        <img
            
            loading="lazy"
            src="/recommendation-system-with-graphdb/ItemCF_step1.webp"
            srcset="/recommendation-system-with-graphdb/ItemCF_step1.webp, /recommendation-system-with-graphdb/ItemCF_step1.webp 1.5x, /recommendation-system-with-graphdb/ItemCF_step1.webp 2x"
            sizes="auto"
            alt="/recommendation-system-with-graphdb/ItemCF_step1.webp">
    </a></figure></p>
</li>
<li>
<p>在对看过的电影与新的电影，藉由用户的评分，在图上做 Jaccard 相似性运算，得出每一对看过的电影和待推荐新电影之间的 Jaccard 系数之后。把用户对看过电影的评分作为加权系数，针对其到每一个新电影之间的 Jaccard 系数加权评分，获得排序后的推荐电影列表，我们同样改造一下最终的查询为路径，并渲染前 500 条路径：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="o">//</span><span class="w"> </span><span class="err">用户</span><span class="w"> </span><span class="n">u_124</span><span class="w"> </span><span class="err">看过的并给出高评分的电影</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">u</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">u</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;u_124&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">e</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="nf">collect</span><span class="p">(</span><span class="nf">id</span><span class="p">(</span><span class="n">m</span><span class="p">))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">watched_movies_id</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">根据同样也看过这些电影，并给出高评分的用户，得出待推荐的电影</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">u</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[</span><span class="n">e0</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">intersection</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e1</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">recomm</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">u</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;u_124&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">recomm</span><span class="p">)</span><span class="w"> </span><span class="k">IN</span><span class="w"> </span><span class="n">watched_movies_id</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">e0</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">&gt;</span><span class="mi">3</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">e1</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">2</span><span class="p">.</span><span class="mi">5</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">.</span><span class="mi">5</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">rate</span><span class="p">,</span><span class="w"> </span><span class="n">m</span><span class="p">,</span><span class="w"> </span><span class="n">recomm</span><span class="p">,</span><span class="w"> </span><span class="nf">size</span><span class="p">(</span><span class="nf">COLLECT</span><span class="p">(</span><span class="n">intersection</span><span class="p">))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">intersection_size</span><span class="w"> </span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">intersection_size</span><span class="w"> </span><span class="k">DESC</span><span class="w"> </span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">50</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">计算</span><span class="w"> </span><span class="n">Jaccard</span><span class="w"> </span><span class="k">index</span><span class="o">-----------------------------------------------</span><span class="c1">--
</span></span></span><span class="line"><span class="cl"><span class="c1">
</span></span></span><span class="line"><span class="cl"><span class="c1">// 针对每一对 m 和 recomm：
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">//</span><span class="w"> </span><span class="err">开始计算看过的电影，集合</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="err">的部分</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[</span><span class="n">e0</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">intersection</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">e0</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">&gt;</span><span class="mi">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">rate</span><span class="p">,</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">m</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">m_id</span><span class="p">,</span><span class="w"> </span><span class="n">recomm</span><span class="p">,</span><span class="w"> </span><span class="n">intersection_size</span><span class="p">,</span><span class="w"> </span><span class="nf">COLLECT</span><span class="p">(</span><span class="nf">id</span><span class="p">(</span><span class="n">intersection</span><span class="p">))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">set_a</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">计算推荐电影，集合</span><span class="w"> </span><span class="n">b</span><span class="w"> </span><span class="err">的部分</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">recomm</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[</span><span class="n">e1</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">intersection</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">e1</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">&gt;</span><span class="mi">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">rate</span><span class="p">,</span><span class="w"> </span><span class="n">m_id</span><span class="p">,</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">recomm</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">recomm_id</span><span class="p">,</span><span class="w"> </span><span class="n">set_a</span><span class="p">,</span><span class="w"> </span><span class="n">intersection_size</span><span class="p">,</span><span class="w"> </span><span class="nf">COLLECT</span><span class="p">(</span><span class="nf">id</span><span class="p">(</span><span class="n">intersection</span><span class="p">))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">set_b</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">得到并集数量</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">rate</span><span class="p">,</span><span class="w"> </span><span class="n">m_id</span><span class="p">,</span><span class="w"> </span><span class="n">recomm_id</span><span class="p">,</span><span class="w"> </span><span class="nf">toFloat</span><span class="p">(</span><span class="n">intersection_size</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">intersection_size</span><span class="p">,</span><span class="w"> </span><span class="nf">toSet</span><span class="p">(</span><span class="n">set_a</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">set_b</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">A_U_B</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">得到每一对</span><span class="w"> </span><span class="n">m</span><span class="w"> </span><span class="err">和</span><span class="w"> </span><span class="n">recomm</span><span class="w"> </span><span class="err">的</span><span class="w"> </span><span class="n">Jaccard</span><span class="w"> </span><span class="k">index</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">A_N_B</span><span class="o">/</span><span class="n">A_U_B</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">rate</span><span class="p">,</span><span class="w"> </span><span class="n">m_id</span><span class="p">,</span><span class="w"> </span><span class="n">recomm_id</span><span class="p">,</span><span class="w"> </span><span class="n">intersection_size</span><span class="o">/</span><span class="nf">size</span><span class="p">(</span><span class="n">A_U_B</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">jaccard_index</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">计算</span><span class="w"> </span><span class="n">Jaccard</span><span class="w"> </span><span class="k">index</span><span class="o">-----------------------------------------------</span><span class="c1">--
</span></span></span><span class="line"><span class="cl"><span class="c1">
</span></span></span><span class="line"><span class="cl"><span class="c1">
</span></span></span><span class="line"><span class="cl"><span class="c1">// 得到每一个被推荐的电影 recomm_id，经由不同看过电影推荐链路的相似度 = 评分 * jaccard_index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">WITH</span><span class="w"> </span><span class="n">recomm_id</span><span class="p">,</span><span class="w"> </span><span class="n">m_id</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="n">rate</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">jaccard_index</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">score</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">对每一个</span><span class="w"> </span><span class="n">recomm_id</span><span class="w"> </span><span class="err">按照</span><span class="w"> </span><span class="n">m_id</span><span class="w"> </span><span class="err">加权求得相似度的和，为总的推荐程度评分，降序排列，只取正值</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">recomm_id</span><span class="p">,</span><span class="w"> </span><span class="nf">sum</span><span class="p">(</span><span class="n">score</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">sim_score</span><span class="w"> </span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">sim_score</span><span class="w"> </span><span class="k">DESC</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">sim_score</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">recomm_id</span><span class="w"> </span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">10</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="nf">COLLECT</span><span class="p">(</span><span class="n">recomm_id</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">recomm_ids</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">u</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[</span><span class="n">e0</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">intersection</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e1</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">recomm</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">u</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;u_124&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">recomm</span><span class="p">)</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">recomm_ids</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="w"> </span><span class="k">limit</span><span class="w"> </span><span class="mi">500</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>可以看出最北推荐的两个电影是被几乎所有看过并给出中高评分的用户共同看过的中高评分电影</p>
<p><figure><a class="lightgallery" href="/recommendation-system-with-graphdb/ItemCF_step2.webp" title="ItemCF_step2" data-thumbnail="/recommendation-system-with-graphdb/ItemCF_step2.webp">
        <img
            
            loading="lazy"
            src="/recommendation-system-with-graphdb/ItemCF_step2.webp"
            srcset="/recommendation-system-with-graphdb/ItemCF_step2.webp, /recommendation-system-with-graphdb/ItemCF_step2.webp 1.5x, /recommendation-system-with-graphdb/ItemCF_step2.webp 2x"
            sizes="auto"
            alt="/recommendation-system-with-graphdb/ItemCF_step2.webp">
    </a></figure></p>
</li>
</ul>
<h5 id="关于高评分" class="headerLink">
    <a href="#%e5%85%b3%e4%ba%8e%e9%ab%98%e8%af%84%e5%88%86" class="header-mark"></a>1.2.3.3 关于”高评分“</h5><p>这其中还有很多可以进一步优化的点，比如其中写死了“高评分”是高于 3 的评分，这样有时候不免有失客观，一个可能更合理可行的方式是针对每一个用户，取得这个用户所有评分的平均值，然后取得与平均值相差的比例或者绝对值判定高低。此外，我们在通过 Jaccard 相似性判断每一个看过的电影和对应推荐电影的相似性的时候，并没有考虑这条关联关系：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[</span><span class="n">e0</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">intersection</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e1</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">recomm</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>之中 e0 与 e1 的评分数值的因素，只是过滤了低评分的关系，这里也有做的更加细致的提升空间。</p>
<p>实际上， Pearson Correlation Coefficient 就是这样一种考虑了关系中的数值进行相似性运算的方法。</p>
<h5 id="pearson-correlation-coefficient" class="headerLink">
    <a href="#pearson-correlation-coefficient" class="header-mark"></a>1.2.3.4 Pearson Correlation Coefficient</h5><p><a href="https://en.wikipedia.org/wiki/Pearson_correlation_coefficient" target="_blank" rel="noopener noreferrer">Pearson Correlation Coefficient</a> （PCC）的定义为：
$$
r_{xy} =\frac{\sum ^n _{i=1}(x_i - \bar{x})(y_i - \bar{y})}{\sqrt{\sum ^n _{i=1}(x_i - \bar{x})^2} \sqrt{\sum ^n _{i=1}(y_i - \bar{y})^2}}
$$
相比 Jaccard Index，它把对象之间关系中的数值与自身和所有对象的数值的平均值的差进行累加运算，在考虑了数值比重的同事考虑了数值基于对象自身的相对差异。</p>
<h5 id="usercf" class="headerLink">
    <a href="#usercf" class="header-mark"></a>1.2.3.5 UserCF</h5><p>接下来我们就利用 Pearson Correlation Coefficient 来举例 UserCF 方法。</p>
<p>基于用户的协同过滤方法分如下几步：</p>
<ul>
<li>找出和推荐用户同样给出评分过的电影的用户</li>
<li>运算 Pearson Correlation Coefficient 得到和推荐用户兴趣接近的用户</li>
<li>通过兴趣接近用户得到高评分未观看电影</li>
<li>根据观看用户的 Pearson Correlation Coefficient 加权，排序得推荐电影列表</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="o">//</span><span class="w"> </span><span class="err">找出和用户</span><span class="w"> </span><span class="n">u_2</span><span class="w"> </span><span class="err">看过相同电影的用户</span><span class="p">,</span><span class="w"> </span><span class="err">得电影评分</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">u</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e0</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[</span><span class="n">e1</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">u_sim</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">u</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;u_2&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">u_sim</span><span class="p">)</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="s2">&#34;u_2&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">u</span><span class="p">,</span><span class="w"> </span><span class="n">u_sim</span><span class="p">,</span><span class="w"> </span><span class="nf">collect</span><span class="p">(</span><span class="nf">id</span><span class="p">(</span><span class="n">m</span><span class="p">))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">watched_movies_id</span><span class="p">,</span><span class="w"> </span><span class="nf">COLLECT</span><span class="p">(</span><span class="err">{</span><span class="n">e0</span><span class="p">:</span><span class="w"> </span><span class="n">e0</span><span class="p">,</span><span class="w"> </span><span class="n">e1</span><span class="p">:</span><span class="w"> </span><span class="n">e1</span><span class="err">}</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">e</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">计算</span><span class="w"> </span><span class="n">u_2</span><span class="w"> </span><span class="err">和这些用户的</span><span class="w"> </span><span class="n">pearson_cc</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">u</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e0</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">u_sim</span><span class="p">,</span><span class="w"> </span><span class="n">watched_movies_id</span><span class="p">,</span><span class="w"> </span><span class="nf">avg</span><span class="p">(</span><span class="n">e0</span><span class="p">.</span><span class="n">rate</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">u_mean</span><span class="p">,</span><span class="w"> </span><span class="n">e</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">u_sim</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e1</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">recomm</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">u_sim</span><span class="p">,</span><span class="w"> </span><span class="n">watched_movies_id</span><span class="p">,</span><span class="w"> </span><span class="n">u_mean</span><span class="p">,</span><span class="w"> </span><span class="nf">avg</span><span class="p">(</span><span class="n">e1</span><span class="p">.</span><span class="n">rate</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">u_sim_mean</span><span class="p">,</span><span class="w"> </span><span class="n">e</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">e_</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">UNWIND</span><span class="w"> </span><span class="n">e_</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">e</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="nf">sum</span><span class="p">((</span><span class="n">e</span><span class="p">.</span><span class="n">e0</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">u_mean</span><span class="p">)</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">e1</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">u_sim_mean</span><span class="p">)</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">numerator</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">     </span><span class="nf">sqrt</span><span class="p">(</span><span class="nf">sum</span><span class="p">(</span><span class="nf">pow</span><span class="p">((</span><span class="n">e</span><span class="p">.</span><span class="n">e0</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">u_mean</span><span class="p">),</span><span class="mi">2</span><span class="p">)))</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="nf">sqrt</span><span class="p">(</span><span class="nf">sum</span><span class="p">(</span><span class="nf">pow</span><span class="p">((</span><span class="n">e</span><span class="p">.</span><span class="n">e1</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">u_sim_mean</span><span class="p">),</span><span class="mi">2</span><span class="p">)))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">denominator</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">     </span><span class="n">u_sim</span><span class="p">,</span><span class="w"> </span><span class="n">watched_movies_id</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">denominator</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">取</span><span class="w"> </span><span class="n">pearson_cc</span><span class="w"> </span><span class="err">最大的</span><span class="w"> </span><span class="mi">50</span><span class="w"> </span><span class="err">个相似用户</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">u_sim</span><span class="p">,</span><span class="w"> </span><span class="n">watched_movies_id</span><span class="p">,</span><span class="w"> </span><span class="n">numerator</span><span class="o">/</span><span class="n">denominator</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">pearson_cc</span><span class="w"> </span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">pearson_cc</span><span class="w"> </span><span class="k">DESC</span><span class="w"> </span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">50</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">取相似用户给出高评分的新电影，根据相似用户个数对用户相似程度</span><span class="w"> </span><span class="n">pearson_cc</span><span class="w"> </span><span class="err">加权，获得推荐列表</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">u_sim</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e1</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">recomm</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">recomm</span><span class="p">)</span><span class="w"> </span><span class="k">IN</span><span class="w"> </span><span class="n">watched_movies_id</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">e1</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">recomm</span><span class="p">,</span><span class="w"> </span><span class="nf">sum</span><span class="p">(</span><span class="n">pearson_cc</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">sim_score</span><span class="w"> </span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">sim_score</span><span class="w"> </span><span class="k">DESC</span><span class="w"> </span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">50</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>结果：</p>
<table>
<thead>
<tr>
<th style="text-align:left">recomm</th>
<th style="text-align:left">sim_score</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">(&ldquo;64957&rdquo; :movie{name: &ldquo;Mother&rdquo;})</td>
<td style="text-align:left">14</td>
</tr>
<tr>
<td style="text-align:left">(&ldquo;10&rdquo; :movie{name: &ldquo;Star Wars&rdquo;})</td>
<td style="text-align:left">13</td>
</tr>
<tr>
<td style="text-align:left">(&ldquo;11&rdquo; :movie{name: &ldquo;Star Wars: A New Hope&rdquo;})</td>
<td style="text-align:left">13</td>
</tr>
<tr>
<td style="text-align:left">(&ldquo;55207&rdquo; :movie{name: &ldquo;Silence&rdquo;})</td>
<td style="text-align:left">12</td>
</tr>
<tr>
<td style="text-align:left">(&ldquo;170339&rdquo; :movie{name: &ldquo;Silence&rdquo;})</td>
<td style="text-align:left">12</td>
</tr>
<tr>
<td style="text-align:left">(&ldquo;9807&rdquo; :movie{name: &ldquo;Aladdin&rdquo;})</td>
<td style="text-align:left">8</td>
</tr>
<tr>
<td style="text-align:left">(&ldquo;45375&rdquo; :movie{name: &ldquo;X&rdquo;})</td>
<td style="text-align:left">7</td>
</tr>
<tr>
<td style="text-align:left">(&ldquo;87944&rdquo; :movie{name: &ldquo;Robin Hood&rdquo;})</td>
<td style="text-align:left">6</td>
</tr>
<tr>
<td style="text-align:left">(&ldquo;473&rdquo; :movie{name: &ldquo;Pi&rdquo;})</td>
<td style="text-align:left">6</td>
</tr>
<tr>
<td style="text-align:left">(&ldquo;807&rdquo; :movie{name: &ldquo;Seven&rdquo;})</td>
<td style="text-align:left">6</td>
</tr>
</tbody>
</table>
<h5 id="可视化分析-usercf" class="headerLink">
    <a href="#%e5%8f%af%e8%a7%86%e5%8c%96%e5%88%86%e6%9e%90-usercf" class="header-mark"></a>1.2.3.6 可视化分析 UserCF</h5><p>再看看 UserCF 的可视化结果吧：</p>
<ul>
<li>
<p>找出和推荐用户同样给出评分过的电影的用户</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="o">//</span><span class="w"> </span><span class="err">找出和用户</span><span class="w"> </span><span class="n">u_2</span><span class="w"> </span><span class="err">看过相同电影的用户</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">u</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e0</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[</span><span class="n">e1</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">u_sim</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">u</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;u_2&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">u_sim</span><span class="p">)</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="s2">&#34;u_2&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><figure><a class="lightgallery" href="/recommendation-system-with-graphdb/UserCF_step0.webp" title="UserCF_step0" data-thumbnail="/recommendation-system-with-graphdb/UserCF_step0.webp">
        <img
            
            loading="lazy"
            src="/recommendation-system-with-graphdb/UserCF_step0.webp"
            srcset="/recommendation-system-with-graphdb/UserCF_step0.webp, /recommendation-system-with-graphdb/UserCF_step0.webp 1.5x, /recommendation-system-with-graphdb/UserCF_step0.webp 2x"
            sizes="auto"
            alt="/recommendation-system-with-graphdb/UserCF_step0.webp">
    </a></figure></p>
</li>
<li>
<p>运算 Pearson Correlation Coefficient 得到和推荐用户兴趣接近的用户，输出这些接近的用户</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="o">//</span><span class="w"> </span><span class="err">找出和用户</span><span class="w"> </span><span class="n">u_2</span><span class="w"> </span><span class="err">看过相同电影的用户</span><span class="p">,</span><span class="w"> </span><span class="err">得电影评分</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">u</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e0</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[</span><span class="n">e1</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">u_sim</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">u</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;u_2&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">u_sim</span><span class="p">)</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="s2">&#34;u_2&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">u</span><span class="p">,</span><span class="w"> </span><span class="n">u_sim</span><span class="p">,</span><span class="w"> </span><span class="nf">collect</span><span class="p">(</span><span class="nf">id</span><span class="p">(</span><span class="n">m</span><span class="p">))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">watched_movies_id</span><span class="p">,</span><span class="w"> </span><span class="nf">COLLECT</span><span class="p">(</span><span class="err">{</span><span class="n">e0</span><span class="p">:</span><span class="w"> </span><span class="n">e0</span><span class="p">,</span><span class="w"> </span><span class="n">e1</span><span class="p">:</span><span class="w"> </span><span class="n">e1</span><span class="err">}</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">e</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">计算</span><span class="w"> </span><span class="n">u_2</span><span class="w"> </span><span class="err">和这些用户的</span><span class="w"> </span><span class="n">pearson_cc</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">u</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e0</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">u_sim</span><span class="p">,</span><span class="w"> </span><span class="n">watched_movies_id</span><span class="p">,</span><span class="w"> </span><span class="nf">avg</span><span class="p">(</span><span class="n">e0</span><span class="p">.</span><span class="n">rate</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">u_mean</span><span class="p">,</span><span class="w"> </span><span class="n">e</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">u_sim</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e1</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">recomm</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">u_sim</span><span class="p">,</span><span class="w"> </span><span class="n">watched_movies_id</span><span class="p">,</span><span class="w"> </span><span class="n">u_mean</span><span class="p">,</span><span class="w"> </span><span class="nf">avg</span><span class="p">(</span><span class="n">e1</span><span class="p">.</span><span class="n">rate</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">u_sim_mean</span><span class="p">,</span><span class="w"> </span><span class="n">e</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">e_</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">UNWIND</span><span class="w"> </span><span class="n">e_</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">e</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="nf">sum</span><span class="p">((</span><span class="n">e</span><span class="p">.</span><span class="n">e0</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">u_mean</span><span class="p">)</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">e1</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">u_sim_mean</span><span class="p">)</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">numerator</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">     </span><span class="nf">sqrt</span><span class="p">(</span><span class="nf">sum</span><span class="p">(</span><span class="nf">pow</span><span class="p">((</span><span class="n">e</span><span class="p">.</span><span class="n">e0</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">u_mean</span><span class="p">),</span><span class="mi">2</span><span class="p">)))</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="nf">sqrt</span><span class="p">(</span><span class="nf">sum</span><span class="p">(</span><span class="nf">pow</span><span class="p">((</span><span class="n">e</span><span class="p">.</span><span class="n">e1</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">u_sim_mean</span><span class="p">),</span><span class="mi">2</span><span class="p">)))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">denominator</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">     </span><span class="n">u_sim</span><span class="p">,</span><span class="w"> </span><span class="n">watched_movies_id</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">denominator</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">取</span><span class="w"> </span><span class="n">pearson_cc</span><span class="w"> </span><span class="err">最大的</span><span class="w"> </span><span class="mi">50</span><span class="w"> </span><span class="err">个相似用户</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">u_sim</span><span class="p">,</span><span class="w"> </span><span class="n">watched_movies_id</span><span class="p">,</span><span class="w"> </span><span class="n">numerator</span><span class="o">/</span><span class="n">denominator</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">pearson_cc</span><span class="w"> </span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">pearson_cc</span><span class="w"> </span><span class="k">DESC</span><span class="w"> </span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">50</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">u_sim</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>我们增量渲染，并给他们标记一下颜色：</p>
<p><figure><a class="lightgallery" href="/recommendation-system-with-graphdb/UserCF_step1.webp" title="UserCF_step1" data-thumbnail="/recommendation-system-with-graphdb/UserCF_step1.webp">
        <img
            
            loading="lazy"
            src="/recommendation-system-with-graphdb/UserCF_step1.webp"
            srcset="/recommendation-system-with-graphdb/UserCF_step1.webp, /recommendation-system-with-graphdb/UserCF_step1.webp 1.5x, /recommendation-system-with-graphdb/UserCF_step1.webp 2x"
            sizes="auto"
            alt="/recommendation-system-with-graphdb/UserCF_step1.webp">
    </a></figure></p>
</li>
<li>
<p>通过兴趣接近用户得到高评分未观看电影，根据观看用户的 Pearson Correlation Coefficient 加权，排序得推荐电影列表。我们把结果输出为这些相似用户的高评分电影路径：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="o">//</span><span class="w"> </span><span class="err">找出和用户</span><span class="w"> </span><span class="n">u_2</span><span class="w"> </span><span class="err">看过相同电影的用户</span><span class="p">,</span><span class="w"> </span><span class="err">得电影评分</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">u</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e0</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[</span><span class="n">e1</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">u_sim</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">u</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">&#34;u_2&#34;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">u_sim</span><span class="p">)</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="s2">&#34;u_2&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">u</span><span class="p">,</span><span class="w"> </span><span class="n">u_sim</span><span class="p">,</span><span class="w"> </span><span class="nf">collect</span><span class="p">(</span><span class="nf">id</span><span class="p">(</span><span class="n">m</span><span class="p">))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">watched_movies_id</span><span class="p">,</span><span class="w"> </span><span class="nf">COLLECT</span><span class="p">(</span><span class="err">{</span><span class="n">e0</span><span class="p">:</span><span class="w"> </span><span class="n">e0</span><span class="p">,</span><span class="w"> </span><span class="n">e1</span><span class="p">:</span><span class="w"> </span><span class="n">e1</span><span class="err">}</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">e</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">计算</span><span class="w"> </span><span class="n">u_2</span><span class="w"> </span><span class="err">和这些用户的</span><span class="w"> </span><span class="n">pearson_cc</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">u</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e0</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">u_sim</span><span class="p">,</span><span class="w"> </span><span class="n">watched_movies_id</span><span class="p">,</span><span class="w"> </span><span class="nf">avg</span><span class="p">(</span><span class="n">e0</span><span class="p">.</span><span class="n">rate</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">u_mean</span><span class="p">,</span><span class="w"> </span><span class="n">e</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="p">(</span><span class="n">u_sim</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e1</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">recomm</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">u_sim</span><span class="p">,</span><span class="w"> </span><span class="n">watched_movies_id</span><span class="p">,</span><span class="w"> </span><span class="n">u_mean</span><span class="p">,</span><span class="w"> </span><span class="nf">avg</span><span class="p">(</span><span class="n">e1</span><span class="p">.</span><span class="n">rate</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">u_sim_mean</span><span class="p">,</span><span class="w"> </span><span class="n">e</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">e_</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">UNWIND</span><span class="w"> </span><span class="n">e_</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">e</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="nf">sum</span><span class="p">((</span><span class="n">e</span><span class="p">.</span><span class="n">e0</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">u_mean</span><span class="p">)</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">e1</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">u_sim_mean</span><span class="p">)</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">numerator</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">     </span><span class="nf">sqrt</span><span class="p">(</span><span class="nf">sum</span><span class="p">(</span><span class="nf">pow</span><span class="p">((</span><span class="n">e</span><span class="p">.</span><span class="n">e0</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">u_mean</span><span class="p">),</span><span class="mi">2</span><span class="p">)))</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="nf">sqrt</span><span class="p">(</span><span class="nf">sum</span><span class="p">(</span><span class="nf">pow</span><span class="p">((</span><span class="n">e</span><span class="p">.</span><span class="n">e1</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">u_sim_mean</span><span class="p">),</span><span class="mi">2</span><span class="p">)))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">denominator</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">     </span><span class="n">u_sim</span><span class="p">,</span><span class="w"> </span><span class="n">watched_movies_id</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">denominator</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">取</span><span class="w"> </span><span class="n">pearson_cc</span><span class="w"> </span><span class="err">最大的</span><span class="w"> </span><span class="mi">50</span><span class="w"> </span><span class="err">个相似用户</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">u_sim</span><span class="p">,</span><span class="w"> </span><span class="n">watched_movies_id</span><span class="p">,</span><span class="w"> </span><span class="n">numerator</span><span class="o">/</span><span class="n">denominator</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">pearson_cc</span><span class="w"> </span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">pearson_cc</span><span class="w"> </span><span class="k">DESC</span><span class="w"> </span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">50</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">//</span><span class="w"> </span><span class="err">取相似用户给出高评分的新电影，根据相似用户个数对用户相似程度</span><span class="w"> </span><span class="n">pearson_cc</span><span class="w"> </span><span class="err">加权，获得推荐列表</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">MATCH</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">u_sim</span><span class="p">:</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e1</span><span class="p">:</span><span class="n">watched</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">recomm</span><span class="p">:</span><span class="o">`</span><span class="n">movie</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="nf">id</span><span class="p">(</span><span class="n">recomm</span><span class="p">)</span><span class="w"> </span><span class="k">IN</span><span class="w"> </span><span class="n">watched_movies_id</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">e1</span><span class="p">.</span><span class="n">rate</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WITH</span><span class="w"> </span><span class="n">p</span><span class="p">,</span><span class="w"> </span><span class="n">recomm</span><span class="p">,</span><span class="w"> </span><span class="nf">sum</span><span class="p">(</span><span class="n">pearson_cc</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">sim_score</span><span class="w"> </span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">sim_score</span><span class="w"> </span><span class="k">DESC</span><span class="w"> </span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">50</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">RETURN</span><span class="w"> </span><span class="n">p</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>得到的结果，我们增量渲染到画布上可以得到：这些 UserCF 推荐而得的电影在路径末端：</p>
<p><figure><a class="lightgallery" href="/recommendation-system-with-graphdb/UserCF_step2.webp" title="UserCF_step2" data-thumbnail="/recommendation-system-with-graphdb/UserCF_step2.webp">
        <img
            
            loading="lazy"
            src="/recommendation-system-with-graphdb/UserCF_step2.webp"
            srcset="/recommendation-system-with-graphdb/UserCF_step2.webp, /recommendation-system-with-graphdb/UserCF_step2.webp 1.5x, /recommendation-system-with-graphdb/UserCF_step2.webp 2x"
            sizes="auto"
            alt="/recommendation-system-with-graphdb/UserCF_step2.webp">
    </a></figure></p>
<p>在可视化中，相似用户的高评分未观看电影被推荐的思想是不是一目了然了呢？</p>
</li>
</ul>
<h4 id="混合的方法" class="headerLink">
    <a href="#%e6%b7%b7%e5%90%88%e7%9a%84%e6%96%b9%e6%b3%95" class="header-mark"></a>1.2.4 混合的方法</h4><p>在真实世界中，真正达到最好效果的方法通常是结合所有信息的不同方法，共同工作的，这样既可以使得不同角度的有用信息得到充分利用，又能弥补单一方法在不同数据量、不同阶段的弱点。</p>
<p>结合的方法在工程上可以千差万别，这里就不展开了，不过在下边介绍另一类方法的时候，我们会举例一种混合的方式：基于模型。</p>
<h4 id="基于模型的方法" class="headerLink">
    <a href="#%e5%9f%ba%e4%ba%8e%e6%a8%a1%e5%9e%8b%e7%9a%84%e6%96%b9%e6%b3%95" class="header-mark"></a>1.2.5 基于模型的方法</h4><p>直觉上，我们知道除了正向的明确通过基于内容的（电影的领域知识、关系）、协同的（用户与用户、用户与电影之间的交互关系）的算法，也可以把这些信息作为机器学习中的输入特征，用统计学的方法得到一个模型，用来预测用户可能喜欢的物件（电影），这就是基于模型的方法。</p>
<p>基于模型的方法可以很自然地把把以上几种方法的信息同时纳入为特征，这样，它本质上也是混合过滤方法的一种实现了。</p>
<p>基于模型、机器学习的推荐系统方法有很多，这里，因为我们着重以图、图数据库的出发点介绍，我就举例其中的一种方法：基于图神经网络（GNN）。</p>
<p>GNN 的方法可以将图谱中的内容信息（导演、演员、类型）和协同信息（用户-用户、电影-电影、用户-电影之间的相互关系）以知识的方式嵌入，并且方法中的消息传递方式保有了图中的局部性（locality），这使得它可能成为一个非常新颖、有效的推荐系统模型方法。</p>
<h5 id="gnn--图数据库的推荐系统" class="headerLink">
    <a href="#gnn--%e5%9b%be%e6%95%b0%e6%8d%ae%e5%ba%93%e7%9a%84%e6%8e%a8%e8%8d%90%e7%b3%bb%e7%bb%9f" class="header-mark"></a>1.2.5.1 GNN + 图数据库的推荐系统</h5><p><strong>为什么需要图数据库</strong>？</p>
<p>GNN 的方法中，图数据库只是一个可选项，而我给的 GNN 方法的示例中，图数据库的关键作用是它带来了实时性的可能。</p>
<p>一个实时性推荐系统要求在秒级响应下利用 GNN 训练模型从近实时的输入数据中进行推理，这给我们提出的要求是：</p>
<ul>
<li>输入数据可以实时、近实时获取</li>
<li>推理运算可以实时完成</li>
</ul>
<p>而利用归纳型（Inductive model）的模型从图数据库中实时获取新的数据子图作为推理输入是一个满足这样要求可行的设计方式。</p>
<p>下边是简单的流程图：</p>
<ul>
<li>左边是模型训练，在图谱的二分图（user 和 item）之上建模
<ul>
<li>用户和物件（movie）之间的关系除了交互关系之外，还有预先处理的关系，这些关系被查询获得后再写回图数据库中供后续消费使用，关系有：
<ul>
<li>用户间“相似”关系</li>
<li>物件间不同（共同演员、类型、导演）关系</li>
</ul>
</li>
<li>利用 Nebula-DGL 将图中需要的点、边序列化为 DGL 可以消费的对象</li>
<li>在 DGL 中分割训练、测试、验证集，利用 PinSAGE 模型训练。</li>
<li>导出模型给推荐系统使用</li>
</ul>
</li>
</ul>
<blockquote>
<p>注：</p>
<ul>
<li>
<p>DGL 是非常流行的图深度学习矿建，项目官网：https://www.dgl.ai</p>
</li>
<li>
<p>Nebula-DGL 是一个 NebulaGraph 到 DGL 的连接器，项目地址：https://github.com/wey-gu/nebula-dgl</p>
</li>
<li>
<p>PinSAGE 参考 <a href="https://arxiv.org/abs/1806.01973" target="_blank" rel="noopener noreferrer">https://arxiv.org/abs/1806.01973</a> 论文，DGL 中的 PinSAGE 实现其实并不是归纳型，需要做一些修改才可以。</p>
</li>
</ul>
</blockquote>
<ul>
<li>右边是导出的模型作为推理接口的推荐系统
<ul>
<li>基于图库的实时图谱上一直会有实时的数据更新，节点增减</li>
<li>当给定的用户推荐请求过来的时候，图库中以该用户为起点的子图会被获取（1.）、作为输入发送给推理接口（2.）</li>
<li>推理接口把子图输入给之前训练的模型，获得该用户在子图中关联的新物件中的评分排序（3.）作为推荐结果</li>
</ul>
</li>
</ul>
<p><figure><a class="lightgallery" href="/recommendation-system-with-graphdb/PinSAGE_RecommendationSystem.svg" title="PinSAGE_RecommendationSystem" data-thumbnail="/recommendation-system-with-graphdb/PinSAGE_RecommendationSystem.svg">
        <img
            
            loading="lazy"
            src="/recommendation-system-with-graphdb/PinSAGE_RecommendationSystem.svg"
            srcset="/recommendation-system-with-graphdb/PinSAGE_RecommendationSystem.svg, /recommendation-system-with-graphdb/PinSAGE_RecommendationSystem.svg 1.5x, /recommendation-system-with-graphdb/PinSAGE_RecommendationSystem.svg 2x"
            sizes="auto"
            alt="/recommendation-system-with-graphdb/PinSAGE_RecommendationSystem.svg">
    </a></figure></p>
<p>篇幅关系，本章我就不给出端到端的实例代码了，后续有机会我会尽量做一个 demo 出来的。</p>
<h3 id="推荐系统可解释性" class="headerLink">
    <a href="#%e6%8e%a8%e8%8d%90%e7%b3%bb%e7%bb%9f%e5%8f%af%e8%a7%a3%e9%87%8a%e6%80%a7" class="header-mark"></a>1.3 推荐系统可解释性</h3><p>在结束本章之前，再举一个图数据库在推荐系统中的典型应用：推荐理由。</p>
<p>下图是美团、大众点评中的一个常见的搜索、推荐结果，现代推荐系统的复杂度是非常大的，一方面由很多方法自身的特性决定，另一方面最终的推荐可能是多个系统协同获得最终结果排名，这使得我们很难对推荐结果进行解释。</p>
<p>得益于被推荐用户和物件、以及他们的各种各样画像最终形成的知识图谱，我们只需要在图谱中对推荐结果进行“路径查找”就可以获得很有意义的解释，像是如下截图的“在北京喜欢北京菜的山东老乡都说这家店很赞”就是这样获得的解释。</p>
<p><figure><a class="lightgallery" href="/recommendation-system-with-graphdb/reasoning.webp" title="reasoning" data-thumbnail="/recommendation-system-with-graphdb/reasoning.webp">
        <img
            
            loading="lazy"
            src="/recommendation-system-with-graphdb/reasoning.webp"
            srcset="/recommendation-system-with-graphdb/reasoning.webp, /recommendation-system-with-graphdb/reasoning.webp 1.5x, /recommendation-system-with-graphdb/reasoning.webp 2x"
            sizes="auto"
            alt="/recommendation-system-with-graphdb/reasoning.webp">
    </a></figure></p>
<blockquote>
<p>图片来源：https://tech.meituan.com/2021/04/01/nebula-graph-practice-in-meituan.html</p>
</blockquote>
<h4 id="可解释性的例子" class="headerLink">
    <a href="#%e5%8f%af%e8%a7%a3%e9%87%8a%e6%80%a7%e7%9a%84%e4%be%8b%e5%ad%90" class="header-mark"></a>1.3.1 可解释性的例子</h4><p>咱们回到电影推荐的图谱上，我们在前边的算法中曾经获得过用户 <code>u_124</code> 的推荐电影 <code>1891</code>（星球大战：），那么我们可以通过这一个查询获得它的推荐解释：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="n">FIND</span><span class="w"> </span><span class="n">NOLOOP</span><span class="w"> </span><span class="n">PATH</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="s2">&#34;u_124&#34;</span><span class="w"> </span><span class="k">TO</span><span class="w"> </span><span class="s2">&#34;1891&#34;</span><span class="w"> </span><span class="n">over</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">BIDIRECT</span><span class="w"> </span><span class="n">UPTO</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="n">STEPS</span><span class="w"> </span><span class="n">yield</span><span class="w"> </span><span class="n">path</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="o">`</span><span class="n">p</span><span class="o">`</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">20</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>我们可以很快获得 20 条路径：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="p">(</span><span class="n">root</span><span class="o">@</span><span class="n">nebula</span><span class="p">)</span><span class="w"> </span><span class="p">[</span><span class="n">moviegraph</span><span class="p">]</span><span class="o">&gt;</span><span class="w"> </span><span class="n">FIND</span><span class="w"> </span><span class="n">NOLOOP</span><span class="w"> </span><span class="n">PATH</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="s2">&#34;u_124&#34;</span><span class="w"> </span><span class="k">TO</span><span class="w"> </span><span class="s2">&#34;1891&#34;</span><span class="w"> </span><span class="n">over</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">BIDIRECT</span><span class="w"> </span><span class="n">UPTO</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="n">STEPS</span><span class="w"> </span><span class="n">yield</span><span class="w"> </span><span class="n">path</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="o">`</span><span class="n">p</span><span class="o">`</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">20</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+-----------------------------------------------------------------------------------------------------+</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="n">p</span><span class="w">                                                                                                   </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+-----------------------------------------------------------------------------------------------------+</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="o">&lt;</span><span class="p">(</span><span class="s2">&#34;u_124&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">watched</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;11&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">with_genre</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;g_49&#34;</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">with_genre</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="s2">&#34;1891&#34;</span><span class="p">)</span><span class="o">&gt;</span><span class="w">       </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="o">&lt;</span><span class="p">(</span><span class="s2">&#34;u_124&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">watched</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;11&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">with_genre</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;g_17&#34;</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">with_genre</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="s2">&#34;1891&#34;</span><span class="p">)</span><span class="o">&gt;</span><span class="w">       </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="o">&lt;</span><span class="p">(</span><span class="s2">&#34;u_124&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">watched</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;11&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">with_genre</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;g_10281&#34;</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">with_genre</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="s2">&#34;1891&#34;</span><span class="p">)</span><span class="o">&gt;</span><span class="w">    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="o">&lt;</span><span class="p">(</span><span class="s2">&#34;u_124&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">watched</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;11&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">acted_by</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;p_4&#34;</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">acted_by</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="s2">&#34;1891&#34;</span><span class="p">)</span><span class="o">&gt;</span><span class="w">            </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="o">&lt;</span><span class="p">(</span><span class="s2">&#34;u_124&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">watched</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;11&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">acted_by</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;p_3&#34;</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">acted_by</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="s2">&#34;1891&#34;</span><span class="p">)</span><span class="o">&gt;</span><span class="w">            </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="o">&lt;</span><span class="p">(</span><span class="s2">&#34;u_124&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">watched</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;11&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">acted_by</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;p_24342&#34;</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">acted_by</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="s2">&#34;1891&#34;</span><span class="p">)</span><span class="o">&gt;</span><span class="w">        </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="o">&lt;</span><span class="p">(</span><span class="s2">&#34;u_124&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">watched</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;11&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">acted_by</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;p_2&#34;</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">acted_by</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="s2">&#34;1891&#34;</span><span class="p">)</span><span class="o">&gt;</span><span class="w">            </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="o">&lt;</span><span class="p">(</span><span class="s2">&#34;u_124&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">watched</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;832&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">with_genre</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;g_1110&#34;</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">with_genre</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="s2">&#34;1891&#34;</span><span class="p">)</span><span class="o">&gt;</span><span class="w">    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="o">&lt;</span><span class="p">(</span><span class="s2">&#34;u_124&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">watched</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;11&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">with_genre</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;g_1110&#34;</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">with_genre</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="s2">&#34;1891&#34;</span><span class="p">)</span><span class="o">&gt;</span><span class="w">     </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="o">&lt;</span><span class="p">(</span><span class="s2">&#34;u_124&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">watched</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;11&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">acted_by</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;p_13463&#34;</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">acted_by</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="s2">&#34;1891&#34;</span><span class="p">)</span><span class="o">&gt;</span><span class="w">        </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="o">&lt;</span><span class="p">(</span><span class="s2">&#34;u_124&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">watched</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;11&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">acted_by</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;p_12248&#34;</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">acted_by</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="s2">&#34;1891&#34;</span><span class="p">)</span><span class="o">&gt;</span><span class="w">        </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="o">&lt;</span><span class="p">(</span><span class="s2">&#34;u_124&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">watched</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;47981&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">with_genre</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;g_10219&#34;</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">with_genre</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="s2">&#34;1891&#34;</span><span class="p">)</span><span class="o">&gt;</span><span class="w"> </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="o">&lt;</span><span class="p">(</span><span class="s2">&#34;u_124&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">watched</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;11&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">acted_by</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;p_6&#34;</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">acted_by</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="s2">&#34;1891&#34;</span><span class="p">)</span><span class="o">&gt;</span><span class="w">            </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="o">&lt;</span><span class="p">(</span><span class="s2">&#34;u_124&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">watched</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;497&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">with_genre</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;g_104&#34;</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">with_genre</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="s2">&#34;1891&#34;</span><span class="p">)</span><span class="o">&gt;</span><span class="w">     </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="o">&lt;</span><span class="p">(</span><span class="s2">&#34;u_124&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">watched</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;120880&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">with_genre</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;g_104&#34;</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">with_genre</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="s2">&#34;1891&#34;</span><span class="p">)</span><span class="o">&gt;</span><span class="w">  </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="o">&lt;</span><span class="p">(</span><span class="s2">&#34;u_124&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">watched</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;11&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">with_genre</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;g_104&#34;</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">with_genre</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="s2">&#34;1891&#34;</span><span class="p">)</span><span class="o">&gt;</span><span class="w">      </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="o">&lt;</span><span class="p">(</span><span class="s2">&#34;u_124&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">watched</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;11&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">acted_by</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;p_130&#34;</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">acted_by</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="s2">&#34;1891&#34;</span><span class="p">)</span><span class="o">&gt;</span><span class="w">          </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="o">&lt;</span><span class="p">(</span><span class="s2">&#34;u_124&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">watched</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;497&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">with_genre</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;g_50&#34;</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">with_genre</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="s2">&#34;1891&#34;</span><span class="p">)</span><span class="o">&gt;</span><span class="w">      </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="o">&lt;</span><span class="p">(</span><span class="s2">&#34;u_124&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">watched</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;11635&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">with_genre</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;g_50&#34;</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">with_genre</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="s2">&#34;1891&#34;</span><span class="p">)</span><span class="o">&gt;</span><span class="w">    </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="o">&lt;</span><span class="p">(</span><span class="s2">&#34;u_124&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">watched</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;11&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">with_genre</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;g_50&#34;</span><span class="p">)</span><span class="o">&lt;-</span><span class="p">[:</span><span class="n">with_genre</span><span class="o">@</span><span class="mi">0</span><span class="w"> </span><span class="err">{}</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="s2">&#34;1891&#34;</span><span class="p">)</span><span class="o">&gt;</span><span class="w">       </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+-----------------------------------------------------------------------------------------------------+</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">Got</span><span class="w"> </span><span class="mi">20</span><span class="w"> </span><span class="nf">rows</span><span class="w"> </span><span class="p">(</span><span class="kt">time</span><span class="w"> </span><span class="n">spent</span><span class="w"> </span><span class="mi">267151</span><span class="o">/</span><span class="mi">278139</span><span class="w"> </span><span class="n">us</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">Wed</span><span class="p">,</span><span class="w"> </span><span class="mi">09</span><span class="w"> </span><span class="n">Nov</span><span class="w"> </span><span class="mi">2022</span><span class="w"> </span><span class="mi">19</span><span class="p">:</span><span class="mi">05</span><span class="p">:</span><span class="mi">56</span><span class="w"> </span><span class="n">CST</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>我们在结果可视化中可以很容易看出这个推荐的结果可以是：</p>
<ul>
<li>曾经喜欢的星战电影的大部分演职人员都也参与了这部和同样是“奥斯卡获奖”且“经典”的电影。</li>
</ul>
<p><figure><a class="lightgallery" href="/recommendation-system-with-graphdb/reasoning_movie.webp" title="reasoning_movie" data-thumbnail="/recommendation-system-with-graphdb/reasoning_movie.webp">
        <img
            
            loading="lazy"
            src="/recommendation-system-with-graphdb/reasoning_movie.webp"
            srcset="/recommendation-system-with-graphdb/reasoning_movie.webp, /recommendation-system-with-graphdb/reasoning_movie.webp 1.5x, /recommendation-system-with-graphdb/reasoning_movie.webp 2x"
            sizes="auto"
            alt="/recommendation-system-with-graphdb/reasoning_movie.webp">
    </a></figure></p>
<h3 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>1.4 总结</h3><p>现在，我们知道图数据库作为推荐系统中信息的最终形式：知识存在，可以适用在不同类型方法上，尽管很多方法中，图库不一定是最终落地系统方案的最流行选择，图数据库所带来的可视化洞察的潜力还是非常大的。</p>
<p>同时，构建的综合知识图谱上的解释、推理能力与一些实时要求高的图方法中（比如 GNN的基于模型方法），能起到带来独一无二的作用。</p>
<p>题图版权：<a href="https://unsplash.com/@charlesdeluvio" target="_blank" rel="noopener noreferrer">charlesdeluvio</a></p>]]></description>
</item><item>
    <title>NebulaGraph 内核贡献开发指南</title>
    <link>https://siwei.io/nebulagraph-hacking-guide/</link>
    <pubDate>Sun, 23 Oct 2022 14:57:07 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/nebulagraph-hacking-guide/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/nebulagraph-hacking-guide/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>如何 build NebulaGraph？如何为 NebulaGraph 内核做贡献？从本章作为切入点就够了。</p>
</blockquote>
<h2 id="nebulagraph-的架构简介" class="headerLink">
    <a href="#nebulagraph-%e7%9a%84%e6%9e%b6%e6%9e%84%e7%ae%80%e4%bb%8b" class="header-mark"></a>1 NebulaGraph 的架构简介</h2><p>为了方便对 NebulaGraph 尚未了解的读者也能快速直接从贡献代码为起点了解它，我把开发、贡献内核代码入手所需要的基本架构知识也在这里以最小信息量的形式总结一下，作为前导知识，请资深的 NebulaGraph 玩家直接跳过这一章节。</p>
<h3 id="服务进程" class="headerLink">
    <a href="#%e6%9c%8d%e5%8a%a1%e8%bf%9b%e7%a8%8b" class="header-mark"></a>1.1 服务、进程</h3><p>NebulaGraph 的架构和 Google Spanner，TiDB 很相似，核心部分只有三种服务、进程：Graph 服务、Meta 服务和 Storage 服务。它们之间彼此通过 TCP 之上的 Thrift RPC 协议进行通信。</p>
<p><figure><a class="lightgallery" href="https://docs-cdn.nebula-graph.com.cn/docs-2.0/1.introduction/2.nebula-graph-architecture/nebula-graph-architecture-1.png" title="https://docs-cdn.nebula-graph.com.cn/docs-2.0/1.introduction/2.nebula-graph-architecture/nebula-graph-architecture-1.png" data-thumbnail="https://docs-cdn.nebula-graph.com.cn/docs-2.0/1.introduction/2.nebula-graph-architecture/nebula-graph-architecture-1.png">
        <img
            
            loading="lazy"
            src="https://docs-cdn.nebula-graph.com.cn/docs-2.0/1.introduction/2.nebula-graph-architecture/nebula-graph-architecture-1.png"
            srcset="https://docs-cdn.nebula-graph.com.cn/docs-2.0/1.introduction/2.nebula-graph-architecture/nebula-graph-architecture-1.png, https://docs-cdn.nebula-graph.com.cn/docs-2.0/1.introduction/2.nebula-graph-architecture/nebula-graph-architecture-1.png 1.5x, https://docs-cdn.nebula-graph.com.cn/docs-2.0/1.introduction/2.nebula-graph-architecture/nebula-graph-architecture-1.png 2x"
            sizes="auto"
            alt="https://docs-cdn.nebula-graph.com.cn/docs-2.0/1.introduction/2.nebula-graph-architecture/nebula-graph-architecture-1.png">
    </a></figure></p>
<h3 id="计算层与存储层" class="headerLink">
    <a href="#%e8%ae%a1%e7%ae%97%e5%b1%82%e4%b8%8e%e5%ad%98%e5%82%a8%e5%b1%82" class="header-mark"></a>1.2 计算层与存储层</h3><p>NebulaGraph 是存储与计算分离的架构，它的 Meta 服务和 Storage 服务共同组成了存储层，Graph 服务是内核提供的计算层。</p>
<p>这样的设计使得 NebulaGraph 的集群部署可以灵活按需分配计算、存储的资源，比如我们可以为同一个集群中创建不同配置的两组 Graph 服务实例、用来面向不同类型的业务。</p>
<p>同时，计算层解耦于存储层使得在 NebulaGraph 之上的构建不同的特定计算层成为可能，比如 NebulaGraph Algorithm、NebulaGraph Analytics 就是在 NebulaGraph 之上构建了异构的另一个计算层，如果需要，任何人也可以定制自己的专属计算层，从而满足统一图基础存储之上的复合、多样的计算需求。</p>
<h4 id="graph-service-nebula-graphd" class="headerLink">
    <a href="#graph-service-nebula-graphd" class="header-mark"></a>1.2.1 Graph Service: nebula-graphd</h4><p>Graph 服务是对外接受图库登录、图查询请求、集群管理操作、schema 定义所直接连接的服务，他的进程名字叫 graphd，表示 nebula graph daemon。</p>
<p>Graph 服务的每一个进程是无状态的，这使得横向扩缩 Graph 服务的实例非常灵活、简单。</p>
<p>Graph 服务也叫 Query Engine，其内部和传统的数据库系统的设计非常相似，分为：解析、校验、计划、执行几部分。</p>
<p><figure><a class="lightgallery" href="https://docs-cdn.nebula-graph.com.cn/docs-2.0/1.introduction/2.nebula-graph-architecture/query-engine-architecture.png" title="https://docs-cdn.nebula-graph.com.cn/docs-2.0/1.introduction/2.nebula-graph-architecture/query-engine-architecture.png" data-thumbnail="https://docs-cdn.nebula-graph.com.cn/docs-2.0/1.introduction/2.nebula-graph-architecture/query-engine-architecture.png">
        <img
            
            loading="lazy"
            src="https://docs-cdn.nebula-graph.com.cn/docs-2.0/1.introduction/2.nebula-graph-architecture/query-engine-architecture.png"
            srcset="https://docs-cdn.nebula-graph.com.cn/docs-2.0/1.introduction/2.nebula-graph-architecture/query-engine-architecture.png, https://docs-cdn.nebula-graph.com.cn/docs-2.0/1.introduction/2.nebula-graph-architecture/query-engine-architecture.png 1.5x, https://docs-cdn.nebula-graph.com.cn/docs-2.0/1.introduction/2.nebula-graph-architecture/query-engine-architecture.png 2x"
            sizes="auto"
            alt="https://docs-cdn.nebula-graph.com.cn/docs-2.0/1.introduction/2.nebula-graph-architecture/query-engine-architecture.png">
    </a></figure></p>
<h4 id="meta-service-nebula-metad" class="headerLink">
    <a href="#meta-service-nebula-metad" class="header-mark"></a>1.2.2 Meta Service: nebula-metad</h4><p>Meta 服务顾名思义负责元数据管理，进程名字叫 metad。这些元数据包括：</p>
<ul>
<li>所有的图空间、Schema 定义</li>
<li>用户鉴权、授权信息</li>
<li>集群服务的发现与服务的分布</li>
<li>图空间中的数据分布</li>
</ul>
<p>Meta 服务的进程可以单实例部署，在非单机部署的场景下，为了数据、服务的高 SLA ，我们可以奇数多个实例的部署，通常来说 3 个 nebula-metad 就足够了，三个 nebula-metad 通过 RAFT 共识协议构成一个集群提供服务。</p>
<p><figure><a class="lightgallery" href="https://docs-cdn.nebula-graph.com.cn/docs-2.0/1.introduction/2.nebula-graph-architecture/meta-architecture1.png" title="https://docs-cdn.nebula-graph.com.cn/docs-2.0/1.introduction/2.nebula-graph-architecture/meta-architecture1.png" data-thumbnail="https://docs-cdn.nebula-graph.com.cn/docs-2.0/1.introduction/2.nebula-graph-architecture/meta-architecture1.png">
        <img
            
            loading="lazy"
            src="https://docs-cdn.nebula-graph.com.cn/docs-2.0/1.introduction/2.nebula-graph-architecture/meta-architecture1.png"
            srcset="https://docs-cdn.nebula-graph.com.cn/docs-2.0/1.introduction/2.nebula-graph-architecture/meta-architecture1.png, https://docs-cdn.nebula-graph.com.cn/docs-2.0/1.introduction/2.nebula-graph-architecture/meta-architecture1.png 1.5x, https://docs-cdn.nebula-graph.com.cn/docs-2.0/1.introduction/2.nebula-graph-architecture/meta-architecture1.png 2x"
            sizes="auto"
            alt="https://docs-cdn.nebula-graph.com.cn/docs-2.0/1.introduction/2.nebula-graph-architecture/meta-architecture1.png">
    </a></figure></p>
<h4 id="storage-service-nebula-storaged" class="headerLink">
    <a href="#storage-service-nebula-storaged" class="header-mark"></a>1.2.3 Storage Service: nebula-storaged</h4><p>Storage 服务存储所有的图数据，进程名字叫 storaged。storaged 分布式地存储图数据，为 Graph 内部的图查询执行期提供底层的图语义存储接口，方便 Storage 客户端通过 Thrift RPC 协议面向涉及的 storaged 示例进行图语义的读写。</p>
<p>当 NebulaGraph 中图空间的副本数大于 1 的时候，每一个分区都会在不同 storaged 示例上有副本，副本之间则通过 RAFT 协议协调同步与读写。</p>
<p><figure><a class="lightgallery" href="https://www-cdn.nebula-graph.com.cn/nebula-blog/nebula-reading-storage-architecture.png" title="https://www-cdn.nebula-graph.com.cn/nebula-blog/nebula-reading-storage-architecture.png" data-thumbnail="https://www-cdn.nebula-graph.com.cn/nebula-blog/nebula-reading-storage-architecture.png">
        <img
            
            loading="lazy"
            src="https://www-cdn.nebula-graph.com.cn/nebula-blog/nebula-reading-storage-architecture.png"
            srcset="https://www-cdn.nebula-graph.com.cn/nebula-blog/nebula-reading-storage-architecture.png, https://www-cdn.nebula-graph.com.cn/nebula-blog/nebula-reading-storage-architecture.png 1.5x, https://www-cdn.nebula-graph.com.cn/nebula-blog/nebula-reading-storage-architecture.png 2x"
            sizes="auto"
            alt="https://www-cdn.nebula-graph.com.cn/nebula-blog/nebula-reading-storage-architecture.png">
    </a></figure></p>
<blockquote>
<p>参考 <a href="https://docs.nebula-graph.com.cn/master/1.introduction/3.nebula-graph-architecture/1.architecture-overview/" target="_blank" rel="noopener noreferrer">文档：架构介绍</a>，了解更多详情；</p>
<p>推荐阅读社区官方播客的架构系列文章：<a href="https://www.nebula-graph.com.cn/tags/%E6%9E%B6%E6%9E%84%E7%B3%BB%E5%88%97" target="_blank" rel="noopener noreferrer">nebula-graph.com.cn/tags/架构系列</a>。</p>
</blockquote>
<h3 id="进程间通信服务发现机制" class="headerLink">
    <a href="#%e8%bf%9b%e7%a8%8b%e9%97%b4%e9%80%9a%e4%bf%a1%e6%9c%8d%e5%8a%a1%e5%8f%91%e7%8e%b0%e6%9c%ba%e5%88%b6" class="header-mark"></a>1.3 进程间通信、服务发现机制</h3><p>graphd、metad、storaged 之间通过 Thrift 协议进行远程调用（RPC），下边给一些例子：</p>
<p>graphd 会通过 metaclient 调用 metad</p>
<ul>
<li>将自己报告为一个正在运行的服务，以便被发现</li>
<li>为用户（使用 graphclient ）登录进行 RPC 调用</li>
<li>当它处理 nGQL 查询时，获取图形存储分布情况</li>
</ul>
<p>graphd 会通过 storageclient 调用 storaged</p>
<ul>
<li>在处理 nGQL 时，在它从 metad 获得所需的元信息后，进行图形数据的读/写</li>
</ul>
<p>storaged 会通过  metaclient调用 metad</p>
<ul>
<li>将自己报告为一个正在运行的服务，以便被发现</li>
</ul>
<p>当然有状态的存储引擎内部也有集群同步的流量与通信</p>
<ul>
<li>
<p>storaged 与其他 storaged 有 RAFT 连接</p>
</li>
<li>
<p>metad 与其他 metad 实例有 RAFT 连接</p>
</li>
</ul>
<h2 id="开发环境搭建" class="headerLink">
    <a href="#%e5%bc%80%e5%8f%91%e7%8e%af%e5%a2%83%e6%90%ad%e5%bb%ba" class="header-mark"></a>2 开发环境搭建</h2><p>接下来我们开始 NebulaGraph 的构建、开发环境的部分。</p>
<p>NebulaGraph 只支持在 GNU/Linux 分支中构建，目前来说，最方便的方式是在社区预先提供好了依赖的容器镜像的基础上在容器内部构建、调试 NebulaGraph 代码的更改和 Debug。</p>
<h3 id="创建一个容器化的-nebulagraph-集群" class="headerLink">
    <a href="#%e5%88%9b%e5%bb%ba%e4%b8%80%e4%b8%aa%e5%ae%b9%e5%99%a8%e5%8c%96%e7%9a%84-nebulagraph-%e9%9b%86%e7%be%a4" class="header-mark"></a>2.1 创建一个容器化的 NebulaGraph 集群</h3><p>为了更方便地调试代码，我习惯提前创建一个 NebulaGraph Docker 环境，我们可以使用官方的 Docker-Compose 方式部署，也可以使用我在官方 Docker-Compose 基础之上弄的一键部署工具：nebula-up.siwei.io。</p>
<p>以 nebula-up 为例：</p>
<p>在我们的 Linux 开发服务器中执行 <code>curl -fsSL nebula-up.siwei.io/install.sh | bash</code> 就可以了。</p>
<h3 id="代码获取" class="headerLink">
    <a href="#%e4%bb%a3%e7%a0%81%e8%8e%b7%e5%8f%96" class="header-mark"></a>2.2 代码获取</h3><p>NebulaGraph 的代码仓库托管在 GitHub 之上，我们可以在有互联网的地方直接克隆下来：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone git@github.com:vesoft-inc/nebula.git
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> nebula
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="创建开发容器" class="headerLink">
    <a href="#%e5%88%9b%e5%bb%ba%e5%bc%80%e5%8f%91%e5%ae%b9%e5%99%a8" class="header-mark"></a>2.3 创建开发容器</h3><p>有了 NebulaGraph 集群，我们可以借助 <a href="https://github.com/vesoft-inc/nebula-dev-docker/" target="_blank" rel="noopener noreferrer">https://github.com/vesoft-inc/nebula-dev-docker/</a> 提供的开箱即用开发容器镜像，搭建开发环境：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">TAG</span><span class="o">=</span>ubuntu2004
</span></span><span class="line"><span class="cl">docker run -ti <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --network nebula-net <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --security-opt <span class="nv">seccomp</span><span class="o">=</span>unconfined <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  -v <span class="s2">&#34;</span><span class="nv">$PWD</span><span class="s2">&#34;</span>:/home/nebula <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  -w /home/nebula <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --name nebula_dev <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  vesoft/nebula-dev:<span class="nv">$TAG</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  bash
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>这其中，<code>-v &quot;$PWD&quot;</code> 表示当前的 NebulaGraph 代码本地的路径会被映射到开发容器内部的 <code>/home/nebula</code>，而启动的容器名字是 <code>nebula_dev</code>。</p>
</blockquote>
<p>待这个容器启动之后，我们会自动进入到这个容器的 bash shell 之中，如果我们输入 <code>exit</code> 退出容器，它会被关闭，如果我们想再次启动容器，只需要执行：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker start nebula_dev
</span></span></code></pre></td></tr></table>
</div>
</div><p>之后，我们的编译、Debug、测试工作都在 <code>nebula_dev</code> 容器内部进行，在容器是运行状态的情况下，可以随时新建一个容器内部的 bash shell 进程：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker <span class="nb">exec</span> -ti nebula_dev bash
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>注，为了保持编译环境是最新的，我们可以定期删除、拉取、重建这个开发容器，以保持环境与代码相匹配。</p>
</blockquote>
<h3 id="编译环境" class="headerLink">
    <a href="#%e7%bc%96%e8%af%91%e7%8e%af%e5%a2%83" class="header-mark"></a>2.4 编译环境</h3><p>在 <code>nebula_dev</code> 这个容器内部，我们可以进行代码编译：</p>
<p>进入编译容器</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker <span class="nb">exec</span> -ti nebula_dev bash
</span></span></code></pre></td></tr></table>
</div>
</div><p>用 CMake 准备 makefile，第一次构建的时候，为了节省时间、内存，我关闭了测试（<code>-DENABLE_TESTING=OFF</code>）：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkdir build <span class="o">&amp;&amp;</span> <span class="nb">cd</span> build
</span></span><span class="line"><span class="cl">cmake -DCMAKE_CXX_COMPILER<span class="o">=</span><span class="nv">$TOOLSET_CLANG_DIR</span>/bin/g++ -DCMAKE_C_COMPILER<span class="o">=</span><span class="nv">$TOOLSET_CLANG_DIR</span>/bin/gcc -DENABLE_WERROR<span class="o">=</span>OFF -DCMAKE_BUILD_TYPE<span class="o">=</span>Debug -DENABLE_TESTING<span class="o">=</span>OFF ..
</span></span></code></pre></td></tr></table>
</div>
</div><p>开始编译，根据服务器的空闲 CPU 个数和内存量力而行，比如我在自己 72 核心的服务器上准备允许同时运行 64 个 job，则运行：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">make -j64
</span></span></code></pre></td></tr></table>
</div>
</div><p>第一次构建的时间会慢一些，在 make 成功之后，我们也可以执行 <code>make install</code> 把二进制安装到像生产安装时候一样的路径：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">root@1827b82e88bf:/home/nebula/build# make install
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">root@1827b82e88bf:/home/nebula/build# ls /usr/local/nebula/bin
</span></span><span class="line"><span class="cl">db_dump  db_upgrader  meta_dump  nebula-graphd  nebula-metad  nebula-storaged
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">root@1827b82e88bf:/home/nebula/build# ls /usr/local/nebula/
</span></span><span class="line"><span class="cl">bin  etc  pids  scripts  share
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="调试-nebulagraph" class="headerLink">
    <a href="#%e8%b0%83%e8%af%95-nebulagraph" class="header-mark"></a>3 调试 NebulaGraph</h2><p>以 GraphD 调试为例。</p>
<h3 id="安装依赖" class="headerLink">
    <a href="#%e5%ae%89%e8%a3%85%e4%be%9d%e8%b5%96" class="header-mark"></a>3.1 安装依赖</h3><p>安装一些后边会方便 Debug 额外用到的依赖</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 装一个 ping，测试一下 nebula-up 安装的集群可以访问</span>
</span></span><span class="line"><span class="cl">apt update <span class="o">&amp;&amp;</span> apt install iputils-ping -y
</span></span><span class="line"><span class="cl"><span class="c1"># ping graphd 试试看</span>
</span></span><span class="line"><span class="cl">ping graphd -c <span class="m">4</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 安装 gdb gdb-dashboard</span>
</span></span><span class="line"><span class="cl">apt install gdb -y
</span></span><span class="line"><span class="cl">wget -P ~ https://git.io/.gdbinit
</span></span><span class="line"><span class="cl">pip install pygments
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="准备客户端" class="headerLink">
    <a href="#%e5%87%86%e5%a4%87%e5%ae%a2%e6%88%b7%e7%ab%af" class="header-mark"></a>3.2 准备客户端</h3><p>准备一个 NebulaGraph 的命令行客户端：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 新开一个 nebula_dev 的 shell</span>
</span></span><span class="line"><span class="cl">docker <span class="nb">exec</span> -ti nebula_dev bash
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 下载 nebula-console 二进制文件，并赋予可执行权限，命名为 nebula-console 并安装到 /usr/bin/ 下</span>
</span></span><span class="line"><span class="cl">wget https://github.com/vesoft-inc/nebula-console/releases/download/v3.2.0/nebula-console-linux-amd64-v3.2.0
</span></span><span class="line"><span class="cl">chmod +x nebula-console*
</span></span><span class="line"><span class="cl">mv nebula-console* /usr/bin/nebula-console
</span></span></code></pre></td></tr></table>
</div>
</div><p>连接到前边我们 nebula-up 准备的集群之上，加载 basketballplayer 这个测试数据：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">nebula-console -u root -p nebula --address<span class="o">=</span>graphd --port<span class="o">=</span><span class="m">9669</span>
</span></span><span class="line"><span class="cl">:play basketballplayer<span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nb">exit</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="gdb-运行-graphd" class="headerLink">
    <a href="#gdb-%e8%bf%90%e8%a1%8c-graphd" class="header-mark"></a>3.3 gdb 运行 graphd</h3><p>我们用 gdb 执行刚刚编译的 nebula-graphd 二进制，让他成为一个新的 graphd 服务，名字就叫 <code>nebula_dev</code>。</p>
<p>首先启动 gdb</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 新开一个 nebula_dev 的 shell</span>
</span></span><span class="line"><span class="cl">docker <span class="nb">exec</span> -ti nebula_dev bash
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> /usr/local/nebula/
</span></span><span class="line"><span class="cl">mkdir -p /home/nebula/build/log
</span></span><span class="line"><span class="cl">gdb bin/nebula-graphd
</span></span></code></pre></td></tr></table>
</div>
</div><p>在 gdb 内部执行设置必要的参数</p>
<p>跟随 fork 的子进程</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-makefile" data-lang="makefile"><span class="line"><span class="cl"><span class="err">set</span> <span class="err">follow-fork-mode</span> <span class="err">child</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>设置待调试 graphd 的启动参数（配置）：</p>
<ul>
<li>meta_server_addrs 填已经启动的集群的所有 metad 的地址</li>
<li>local_ip 和 ws_ip 填本容器的域名，port 是 graphd 监听端口</li>
<li>log_dir 是输出日志的目录，v 和 minloglevel 是日志的输出等级</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-makefile" data-lang="makefile"><span class="line"><span class="cl"><span class="err">set</span> <span class="err">args</span> <span class="nv">--flagfile</span><span class="o">=</span>/usr/local/nebula/etc/nebula-graphd.conf.default <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --meta_server_addrs<span class="o">=</span>metad0:9559,metad1:9559,metad2:9559 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --port<span class="o">=</span><span class="m">9669</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --local_ip<span class="o">=</span>nebula_dev <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --ws_ip<span class="o">=</span>nebula_dev <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --ws_http_port<span class="o">=</span><span class="m">19669</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --log_dir<span class="o">=</span>/home/nebula/build/log <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --v<span class="o">=</span><span class="m">4</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --minloglevel<span class="o">=</span><span class="m">0</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果我们想加断点在 <code>src/common/function/FunctionManager.cpp</code> 2783 行，可以再执行：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-makefile" data-lang="makefile"><span class="line"><span class="cl"><span class="nf">b /home/nebula/src/common/function/FunctionManager.cpp</span><span class="o">:</span>2783
</span></span></code></pre></td></tr></table>
</div>
</div><p>配置前边安装的 gdb-dashboard，一个开源的 gdb 界面插件。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-makefile" data-lang="makefile"><span class="line"><span class="cl"><span class="c"># 设定在 gdb 界面上展示 代码、历史、回调栈、变量、表达几个部分，详细参考 https://github.com/cyrus-and/gdb-dashboard
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="err">dashboard</span> <span class="err">-layout</span> <span class="err">source</span> <span class="err">history</span> <span class="err">stack</span> <span class="err">variables</span> <span class="err">expressions</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>最后我们让进程通过 gdb 跑起来吧：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-makefile" data-lang="makefile"><span class="line"><span class="cl"><span class="err">run</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>之后，我们就可以在这个窗口/shell 会话下调试 graphd 程序了。</p>
<h2 id="修改-nebulagraph-代码" class="headerLink">
    <a href="#%e4%bf%ae%e6%94%b9-nebulagraph-%e4%bb%a3%e7%a0%81" class="header-mark"></a>4 修改 NebulaGraph 代码</h2><p>这里，我以 <a href="https://github.com/vesoft-inc/nebula/issues/3513" target="_blank" rel="noopener noreferrer">#3513</a> 这个 issue 为例子，快速介绍一下代码修改的过程。</p>
<h3 id="读代码" class="headerLink">
    <a href="#%e8%af%bb%e4%bb%a3%e7%a0%81" class="header-mark"></a>4.1 读代码</h3><p>这个 issue 表达的内容是在有一小部分用户决定把 JSON 以 String 的形式存储在 NebulaGraph 中的属性里，因为这种方式比较罕见且不被推崇，NebulaGraph 没有直接支持对 JSON String 直接解析的方法。</p>
<p>本来这个功能是等到很希望得到支持的同学过来亲自去实现的，而在 Issue 中，刚好有一位新手贡献者在里边回复求助如何能开始参与这个贡献。接着这个契机，我去参与讨论看了一下这个功能可以实现成什么样子，最终讨论的结果是可以做成和 MySQL 中的 <code>JSON_EXTRACT</code> 函数那样，但是改为只接受 JSON String，无需处理输出路径参数。</p>
<p>这个任务一句话来说就是为 NebulaGraph 引入一个解析 JSON String 为 Map 的函数。那么，应该大概如何实现这个功能呢？</p>
<h4 id="在哪里修改" class="headerLink">
    <a href="#%e5%9c%a8%e5%93%aa%e9%87%8c%e4%bf%ae%e6%94%b9" class="header-mark"></a>4.1.1 在哪里修改</h4><p>很自然，引入新的函数的更改肯定有很多，所以我们只需要找到之前增加新函数的 PR 就可以快速知道在哪些地方修改了。</p>
<blockquote>
<p>当然我们可以自底向上去了解 NebulaGraph 整体的代码结构，然后一点点找到函数处理的位置，事实上有的时候我们也不得不这么做，这时候除了代码本身，一些面向贡献者的文章可能会帮助我们事半功倍对整体有一个了解，NebulaGraph 官方博客里就有这样的一个系列文章，推荐大家在贡献的时候也去通读一下：<a href="https://www.nebula-graph.com.cn/posts/nebula-graph-source-code-reading-00" target="_blank" rel="noopener noreferrer">nebula-graph.com.cn/posts/nebula-graph-source-code-reading-00</a>。</p>
</blockquote>
<p>于是，我从 <a href="https://github.com/vesoft-inc/nebula/pull/4526" target="_blank" rel="noopener noreferrer">#4526</a> 这个 PR 里了解到所有函数入口都被统一管理在 <a href="https://github.com/vesoft-inc/nebula/blob/master/src/common/function/FunctionManager.cpp" target="_blank" rel="noopener noreferrer">src/common/function/FunctionManager.cpp</a> 之中，通过搜索、理解其中其他某一个函数的关键词之后可以很容易理解一个函数实体的关键词、输入输出数据类型、以及它的处理逻辑的代码在哪里实现。</p>
<p>同时，我注意到在同一个目录下，<code>src/common/function/test/FunctionManagerTest.cpp</code> 之中则是所有这些函数的单元测试代码，用同样的方式也可以知道新加的一个函数需要如何在里边实现基于 gtest 的单元测试。</p>
<h3 id="开始改代码" class="headerLink">
    <a href="#%e5%bc%80%e5%a7%8b%e6%94%b9%e4%bb%a3%e7%a0%81" class="header-mark"></a>4.2 开始改代码</h3><blockquote>
<p>注：在修改代码之前，请确保自己在最新的 master 分支之上创建一个单独的分支，这里的例子中，我把分支名字叫 <code>fn_JSON_EXTRACT</code>：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git checkout master
</span></span><span class="line"><span class="cl">git pull
</span></span><span class="line"><span class="cl">git checkout -b fn_JSON_EXTRACT
</span></span></code></pre></td></tr></table>
</div>
</div></blockquote>
<p>通过 Google 了解与交叉验证 NebulaGraph 内部使用的 utils 库，我知道我应该用 <code>folly::parseJson</code> 把字符串读成 <code>folly::dynamic</code> 然后再 cast 成 NebulaGraph 内置的 Map() 类型，然后，借助于 StackOverflow/GitHub Copilot，我终于完成了第一个版本的代码修改。</p>
<h3 id="调试代码" class="headerLink">
    <a href="#%e8%b0%83%e8%af%95%e4%bb%a3%e7%a0%81" class="header-mark"></a>4.3 调试代码</h3><p>接下来，我兴冲冲地改好了第一版的代码，信心满满地开始编译！实际上因为是 CPP 新手，即使在 Copilot 的加持下，我的代码还是花了好几次修改才通过编译。</p>
<p>然后，我开始用 GDB 把修改了的 GraphD 启动起来，用 console 发起 <code>JSON_EXTRACT</code> 的函数调用，先调通了期待中的效果，并试着跑几种异常的输入，在发现新问题、修改、编译、调试的几轮循环下让代码达到了期望的状态，这时候，我知道我要把代码提交到 GitHub 请项目的资深贡献者帮忙 review 啦！</p>
<h2 id="提交-pr" class="headerLink">
    <a href="#%e6%8f%90%e4%ba%a4-pr" class="header-mark"></a>5 提交 PR</h2><p>PR（Pull Request）是 GitHub 中方便多人代码协作、代码审查中的一种方式，它通过把一个 repo 下的分支与这个审查协作的实例（PR）做映射，得到一个项目下唯一的 PR 号码之后，生成单独的网页，在这个网页下，我们可以做不同贡献者之间的交流和后续的代码更新，这个过程中代码提交者们可以一直在这个分支上不断提交代码直到代码的状态被各方同意之后，就可以合并（merge）到目的分支中。</p>
<p>这个过程可以分为：</p>
<ul>
<li>创建 GitHub 上远程的个人开发分支</li>
<li>基于分支创建目标项目仓库中的 PR</li>
<li>在 PR 中协作、讨论、不断再次提交到开发分支直到多方达到合并、或者关闭的共识</li>
</ul>
<h3 id="提交到个人远程分支" class="headerLink">
    <a href="#%e6%8f%90%e4%ba%a4%e5%88%b0%e4%b8%aa%e4%ba%ba%e8%bf%9c%e7%a8%8b%e5%88%86%e6%94%af" class="header-mark"></a>5.1 提交到个人远程分支</h3><p>这一步骤里，我们要把当前的本地提交的 commit，提交到自己的 GitHub 分叉之中。</p>
<h4 id="commit-本地修改" class="headerLink">
    <a href="#commit-%e6%9c%ac%e5%9c%b0%e4%bf%ae%e6%94%b9" class="header-mark"></a>5.1.1 commit 本地修改</h4><p>首先，我们确认一下本地的修改是否都是期待中的：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 先确定修改的文件</span>
</span></span><span class="line"><span class="cl">$ git status
</span></span><span class="line"><span class="cl"><span class="c1"># 再看看修改的内容</span>
</span></span><span class="line"><span class="cl">$ git diff
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后，把它们 commit（提交在本地仓库）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 添加所有当前目录（. 这个点表示当前目录）修改过的文件为待 commit</span>
</span></span><span class="line"><span class="cl">$ git add .
</span></span><span class="line"><span class="cl"><span class="c1"># 然后我们可以看一下状态，这些修改的文件状态已经不同了</span>
</span></span><span class="line"><span class="cl">$ git status
</span></span><span class="line"><span class="cl"><span class="c1"># 最后，提交在本地仓库，并用 -m 参数指定单行的 commit message</span>
</span></span><span class="line"><span class="cl">$ git commit -m <span class="s2">&#34;feat: introduce function JSON_EXTRACT&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="提交到自己远程的分支" class="headerLink">
    <a href="#%e6%8f%90%e4%ba%a4%e5%88%b0%e8%87%aa%e5%b7%b1%e8%bf%9c%e7%a8%8b%e7%9a%84%e5%88%86%e6%94%af" class="header-mark"></a>5.1.2 提交到自己远程的分支</h4><p>在提交之前，要确保自己的 GitHub 账号之下确实存在 NebulaGraph 代码仓库的分叉（fork），比如我的 GitHub 账号是 wey-gu，我访问，那么我对 <a href="https://github.com/vesoft-inc/nebula" target="_blank" rel="noopener noreferrer">https://github.com/vesoft-inc/nebula</a> 的分叉应该就是 <a href="https://github.com/wey-gu/nebula" target="_blank" rel="noopener noreferrer">https://github.com/wey-gu/nebula</a> 。</p>
<p>如果还没有自己的分叉，可以直接在  <a href="https://github.com/vesoft-inc/nebula" target="_blank" rel="noopener noreferrer">https://github.com/vesoft-inc/nebula</a> 上点击右上角的 Fork，创建自己的分叉仓库。</p>
<p>当远程的个人分叉存在之后，我们可以把代码提交上去了</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 添加一个新的远程仓库叫 wey</span>
</span></span><span class="line"><span class="cl">git remote add wey git@github.com:wey-gu/nebula.git
</span></span><span class="line"><span class="cl"><span class="c1"># 提交 JSON_EXTRACT 分支到 wey 这个 remote 仓库</span>
</span></span><span class="line"><span class="cl">git push wey JSON_EXTRACT
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="在个人远程分叉分支上创建-pr" class="headerLink">
    <a href="#%e5%9c%a8%e4%b8%aa%e4%ba%ba%e8%bf%9c%e7%a8%8b%e5%88%86%e5%8f%89%e5%88%86%e6%94%af%e4%b8%8a%e5%88%9b%e5%bb%ba-pr" class="header-mark"></a>5.1.3 在个人远程分叉分支上创建 PR</h4><p>这时候，我们访问这个远程分支：https://github.com/wey-gu/nebula/tree/fn_JSON_EXTRACT ，就能找到 Open PR 的入口：</p>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/197544575-c04a06cf-b867-409c-832e-f3d893fea784.png" title="https://user-images.githubusercontent.com/1651790/197544575-c04a06cf-b867-409c-832e-f3d893fea784.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/197544575-c04a06cf-b867-409c-832e-f3d893fea784.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/197544575-c04a06cf-b867-409c-832e-f3d893fea784.png"
            srcset="https://user-images.githubusercontent.com/1651790/197544575-c04a06cf-b867-409c-832e-f3d893fea784.png, https://user-images.githubusercontent.com/1651790/197544575-c04a06cf-b867-409c-832e-f3d893fea784.png 1.5x, https://user-images.githubusercontent.com/1651790/197544575-c04a06cf-b867-409c-832e-f3d893fea784.png 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/197544575-c04a06cf-b867-409c-832e-f3d893fea784.png">
    </a></figure></p>
<p>然后点击 Open pull request 按钮，就进入到创建 PR 的界面了，这和在一般的论坛里提交一个帖子是很类似的：</p>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/197545824-93706cc7-32a9-4638-84eb-26573106aa28.png" title="https://user-images.githubusercontent.com/1651790/197545824-93706cc7-32a9-4638-84eb-26573106aa28.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/197545824-93706cc7-32a9-4638-84eb-26573106aa28.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/197545824-93706cc7-32a9-4638-84eb-26573106aa28.png"
            srcset="https://user-images.githubusercontent.com/1651790/197545824-93706cc7-32a9-4638-84eb-26573106aa28.png, https://user-images.githubusercontent.com/1651790/197545824-93706cc7-32a9-4638-84eb-26573106aa28.png 1.5x, https://user-images.githubusercontent.com/1651790/197545824-93706cc7-32a9-4638-84eb-26573106aa28.png 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/197545824-93706cc7-32a9-4638-84eb-26573106aa28.png">
    </a></figure></p>
<p>提交之后，我们可以等待、或者邀请其他人来做代码的审查（review），往往其他的贡献者都能从他们的角度给出一些代码修改的建议和提示，我们需要经过几轮的代码修改、讨论之后使得代码达到最佳的状态。</p>
<p>而这些审查者中除了社区的贡献者（人类）之外，还有一些自动化的机器人，他们会在代码库中自动化的通过持续集成（CI）的方式运行一些自动化的审查工作，可能包括以下几种：</p>
<ul>
<li>CLA：Contributor License Agreement（贡献者许可协议），这是一个要 PR 作者在首次提交代码到项目时签署的协议，因为代码将被提交到公共空间，这份协议的签署意味着作者同意代码被分享、复用、修改这件事情。</li>
<li>lint：代码风格检查，这也是最常见的 CI 任务</li>
<li>test：各种层面的测试检查任务</li>
</ul>
<p>通常来说，这些所有的自动化审查机器人所代表的任务也需要全都通过，代码的状态才能被认为是可以合并的，而不出意外，我首次提交的代码果然有测试的失败。</p>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/197549538-4bba79b5-6b0a-42f4-b287-55061c08cbe8.png" title="https://user-images.githubusercontent.com/1651790/197549538-4bba79b5-6b0a-42f4-b287-55061c08cbe8.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/197549538-4bba79b5-6b0a-42f4-b287-55061c08cbe8.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/197549538-4bba79b5-6b0a-42f4-b287-55061c08cbe8.png"
            srcset="https://user-images.githubusercontent.com/1651790/197549538-4bba79b5-6b0a-42f4-b287-55061c08cbe8.png, https://user-images.githubusercontent.com/1651790/197549538-4bba79b5-6b0a-42f4-b287-55061c08cbe8.png 1.5x, https://user-images.githubusercontent.com/1651790/197549538-4bba79b5-6b0a-42f4-b287-55061c08cbe8.png 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/197549538-4bba79b5-6b0a-42f4-b287-55061c08cbe8.png">
    </a></figure></p>
<h3 id="调试-ci-测试代码" class="headerLink">
    <a href="#%e8%b0%83%e8%af%95-ci-%e6%b5%8b%e8%af%95%e4%bb%a3%e7%a0%81" class="header-mark"></a>5.2 调试 CI 测试代码</h3><p>NebulaGraph 里所有的 CI 测试代码也都能在本地被触发，并且（显然）都有被单独触发的方式，我们需要掌握它们而不是在每次修改一个小的测试修复之后提交到服务器上等着 CI 做全量的运行（这样常常几十分钟就这么浪费掉了）。</p>
<h4 id="ctest" class="headerLink">
    <a href="#ctest" class="header-mark"></a>5.2.1 CTest</h4><p>在这个距离的 PR 提交中，我修改的函数代码同一层级下的单元测试 CTest 就有问题，问题可能是测试代码本身造成、我们的修改破坏了原来的测试用例导致、亦或者是我们自己的测试用例发现了代码修改本身的问题。</p>
<p>这次，我们要根据 CTest 失败的报错进行排查和代码修改，然后编译代码，在本地运行一下这个失败的用例：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 我们需要进入到我们的编译容器内部的 build 目录下</span>
</span></span><span class="line"><span class="cl">$ docker <span class="nb">exec</span> -ti nebula_dev bash
</span></span><span class="line"><span class="cl">$ <span class="nb">cd</span> build
</span></span><span class="line"><span class="cl"><span class="c1"># 在 -DENABLE_TESTING=ON 之中编译，如果之前的编译 job 数下内存已经跑满了的话，这次可以把 job 数调小一点，因为开启测试会占用更多内存</span>
</span></span><span class="line"><span class="cl">$ cmake -DCMAKE_CXX_COMPILER<span class="o">=</span><span class="nv">$TOOLSET_CLANG_DIR</span>/bin/g++ -DCMAKE_C_COMPILER<span class="o">=</span><span class="nv">$TOOLSET_CLANG_DIR</span>/bin/gcc -DENABLE_WERROR<span class="o">=</span>OFF -DCMAKE_BUILD_TYPE<span class="o">=</span>Debug -DENABLE_TESTING<span class="o">=</span>ON ..
</span></span><span class="line"><span class="cl">$ make -j <span class="m">48</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 可以看到编译成功了 CTest 的单元测试二进制可执行文件</span>
</span></span><span class="line"><span class="cl"><span class="c1"># [100%] Linking CXX executable ../../../../bin/test/function_manager_test</span>
</span></span><span class="line"><span class="cl"><span class="c1"># [100%] Built target function_manager_test</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 执行重新修改过的单元测试！</span>
</span></span><span class="line"><span class="cl">$ bin/test/function_manager_test
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[==========]</span> Running <span class="m">11</span> tests from <span class="m">1</span> <span class="nb">test</span> suite.
</span></span><span class="line"><span class="cl"><span class="o">[</span>----------<span class="o">]</span> Global <span class="nb">test</span> environment set-up.
</span></span><span class="line"><span class="cl"><span class="o">[</span>----------<span class="o">]</span> <span class="m">11</span> tests from FunctionManagerTest
</span></span><span class="line"><span class="cl"><span class="o">[</span> RUN      <span class="o">]</span> FunctionManagerTest.testNull
</span></span><span class="line"><span class="cl"><span class="o">[</span>       OK <span class="o">]</span> FunctionManagerTest.testNull <span class="o">(</span><span class="m">0</span> ms<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span> RUN      <span class="o">]</span> FunctionManagerTest.functionCall
</span></span><span class="line"><span class="cl">W20221020 23:35:18.579897 <span class="m">28679</span> Map.cpp:77<span class="o">]</span> JSON_EXTRACT nested layer 1: Map can be populated only by Bool, Double, Int, String value and null, now trying to parse from: object
</span></span><span class="line"><span class="cl"><span class="o">[</span>       OK <span class="o">]</span> FunctionManagerTest.functionCall <span class="o">(</span><span class="m">2</span> ms<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span> RUN      <span class="o">]</span> FunctionManagerTest.time
</span></span><span class="line"><span class="cl"><span class="o">[</span>       OK <span class="o">]</span> FunctionManagerTest.time <span class="o">(</span><span class="m">0</span> ms<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span> RUN      <span class="o">]</span> FunctionManagerTest.returnType
</span></span><span class="line"><span class="cl"><span class="o">[</span>       OK <span class="o">]</span> FunctionManagerTest.returnType <span class="o">(</span><span class="m">0</span> ms<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span> RUN      <span class="o">]</span> FunctionManagerTest.SchemaRelated
</span></span><span class="line"><span class="cl"><span class="o">[</span>       OK <span class="o">]</span> FunctionManagerTest.SchemaRelated <span class="o">(</span><span class="m">0</span> ms<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span> RUN      <span class="o">]</span> FunctionManagerTest.ScalarFunctionTest
</span></span><span class="line"><span class="cl"><span class="o">[</span>       OK <span class="o">]</span> FunctionManagerTest.ScalarFunctionTest <span class="o">(</span><span class="m">0</span> ms<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span> RUN      <span class="o">]</span> FunctionManagerTest.ListFunctionTest
</span></span><span class="line"><span class="cl"><span class="o">[</span>       OK <span class="o">]</span> FunctionManagerTest.ListFunctionTest <span class="o">(</span><span class="m">0</span> ms<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span> RUN      <span class="o">]</span> FunctionManagerTest.duplicateEdgesORVerticesInPath
</span></span><span class="line"><span class="cl"><span class="o">[</span>       OK <span class="o">]</span> FunctionManagerTest.duplicateEdgesORVerticesInPath <span class="o">(</span><span class="m">0</span> ms<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span> RUN      <span class="o">]</span> FunctionManagerTest.ReversePath
</span></span><span class="line"><span class="cl"><span class="o">[</span>       OK <span class="o">]</span> FunctionManagerTest.ReversePath <span class="o">(</span><span class="m">0</span> ms<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span> RUN      <span class="o">]</span> FunctionManagerTest.DataSetRowCol
</span></span><span class="line"><span class="cl"><span class="o">[</span>       OK <span class="o">]</span> FunctionManagerTest.DataSetRowCol <span class="o">(</span><span class="m">0</span> ms<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span> RUN      <span class="o">]</span> FunctionManagerTest.PurityTest
</span></span><span class="line"><span class="cl"><span class="o">[</span>       OK <span class="o">]</span> FunctionManagerTest.PurityTest <span class="o">(</span><span class="m">0</span> ms<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>----------<span class="o">]</span> <span class="m">11</span> tests from FunctionManagerTest <span class="o">(</span><span class="m">5</span> ms total<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>----------<span class="o">]</span> Global <span class="nb">test</span> environment tear-down
</span></span><span class="line"><span class="cl"><span class="o">[==========]</span> <span class="m">11</span> tests from <span class="m">1</span> <span class="nb">test</span> suite ran. <span class="o">(</span><span class="m">5</span> ms total<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>  PASSED  <span class="o">]</span> <span class="m">11</span> tests.
</span></span></code></pre></td></tr></table>
</div>
</div><p>成功！</p>
<p>于是，我把新的更改提交到远程分支上，在 PR 的网页中，可以看到 CI 已经在新的提交的触发下重新编译、执行了，过一会儿果然都 pass 了，于是我兴高采烈地等待着两位以上的审查者帮忙批准代码，然后合并它！</p>
<p>但是，我收到了新的建议：</p>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/197553025-82f1e7e5-b8a8-4729-a9b8-0f13a34adfed.png" title="https://user-images.githubusercontent.com/1651790/197553025-82f1e7e5-b8a8-4729-a9b8-0f13a34adfed.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/197553025-82f1e7e5-b8a8-4729-a9b8-0f13a34adfed.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/197553025-82f1e7e5-b8a8-4729-a9b8-0f13a34adfed.png"
            srcset="https://user-images.githubusercontent.com/1651790/197553025-82f1e7e5-b8a8-4729-a9b8-0f13a34adfed.png, https://user-images.githubusercontent.com/1651790/197553025-82f1e7e5-b8a8-4729-a9b8-0f13a34adfed.png 1.5x, https://user-images.githubusercontent.com/1651790/197553025-82f1e7e5-b8a8-4729-a9b8-0f13a34adfed.png 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/197553025-82f1e7e5-b8a8-4729-a9b8-0f13a34adfed.png">
    </a></figure></p>
<p>另一位贡献者请我添加 TCK 的测试用例。</p>
<h4 id="tck" class="headerLink">
    <a href="#tck" class="header-mark"></a>5.2.2 TCK</h4><p>TCK 的全称是 The Cypher Technology Compatibility Kit，它是 NebulaGraph 从 OpenCypher 社区继承演进而来的一套测试框架，我们用 Python 做了测试用例格式兼容的实现。</p>
<p>它的优雅在于，我们可以像写英语一样去描述我们想实现的端到端功能测试用例，像这样！</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-tcl" data-lang="tcl"><span class="line"><span class="cl"><span class="c"># tests/tck/features/function/json_extract.feature
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nv">Feature</span><span class="o">:</span> json_extract Function
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nv">Background</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="nv">Test</span> json_extract function
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nv">Scenario</span><span class="o">:</span> Test Positive Cases
</span></span><span class="line"><span class="cl">    <span class="nv">When</span> executing query:
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">      YIELD JSON_EXTRACT(&#39;{&#34;</span><span class="nv">a</span><span class="s2">&#34;: &#34;</span>foo<span class="s2">&#34;, &#34;</span>b<span class="s2">&#34;: 0.2, &#34;</span>c<span class="s2">&#34;: true}&#39;) AS result;
</span></span></span><span class="line"><span class="cl"><span class="s2">      &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nv">Then</span> the result should be<span class="err">,</span> <span class="ow">in</span> any order:
</span></span><span class="line"><span class="cl">      <span class="o">|</span> <span class="nv">result</span>                      <span class="o">|</span>
</span></span><span class="line"><span class="cl">      <span class="o">|</span> <span class="k">{</span><span class="nv">a</span><span class="o">:</span> <span class="s2">&#34;foo&#34;</span><span class="err">,</span> b: <span class="mf">0.2</span><span class="err">,</span> c: true<span class="k">}</span> <span class="o">|</span>
</span></span><span class="line"><span class="cl">    <span class="nv">When</span> executing query:
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">      YIELD JSON_EXTRACT(&#39;{&#34;</span><span class="nv">a</span><span class="s2">&#34;: 1, &#34;</span>b<span class="s2">&#34;: {}, &#34;</span>c<span class="s2">&#34;: {&#34;</span>d<span class="s2">&#34;: true}}&#39;) AS result;
</span></span></span><span class="line"><span class="cl"><span class="s2">      &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nv">Then</span> the result should be<span class="err">,</span> <span class="ow">in</span> any order:
</span></span><span class="line"><span class="cl">      <span class="o">|</span> <span class="nv">result</span>                      <span class="o">|</span>
</span></span><span class="line"><span class="cl">      <span class="o">|</span> <span class="k">{</span><span class="nv">a</span><span class="o">:</span> <span class="mi">1</span><span class="err">,</span> b: <span class="k">{}</span><span class="err">,</span> c: <span class="k">{</span><span class="nv">d</span><span class="o">:</span> true<span class="k">}}</span> <span class="o">|</span>
</span></span><span class="line"><span class="cl">    <span class="nv">When</span> executing query:
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">      YIELD JSON_EXTRACT(&#39;{}&#39;) AS result;
</span></span></span><span class="line"><span class="cl"><span class="s2">      &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nv">Then</span> the result should be<span class="err">,</span> <span class="ow">in</span> any order:
</span></span><span class="line"><span class="cl">      <span class="o">|</span> <span class="nv">result</span> <span class="o">|</span>
</span></span><span class="line"><span class="cl">      <span class="o">|</span> <span class="k">{}</span>     <span class="o">|</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在添加了自己的一个新的 tck 测试用例文本文件之后，我们只需要在测试文件中临时增加标签，并在执行的时候指定标签，就可以单独执行新增的 tck 测试用例了：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 还是在编译容器内部，进入到 tests 目录下</span>
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> ../tests
</span></span><span class="line"><span class="cl"><span class="c1"># 安装 tck 测试所需依赖</span>
</span></span><span class="line"><span class="cl">python3 -m pip install -r requirements.txt
</span></span><span class="line"><span class="cl">python3 -m pip install nebula3-python<span class="o">==</span>3.1.0
</span></span><span class="line"><span class="cl"><span class="c1"># 运行一个单独为 tck 测试准备的集群</span>
</span></span><span class="line"><span class="cl">make <span class="nv">CONTAINERIZED</span><span class="o">=</span><span class="nb">true</span> <span class="nv">ENABLE_SSL</span><span class="o">=</span><span class="nb">true</span> <span class="nv">CA_SIGNED</span><span class="o">=</span><span class="nb">true</span> up
</span></span><span class="line"><span class="cl"><span class="c1"># 给 tests/tck/features/function/json_extract.feature 以@开头第一行加上标签，比如 @wey</span>
</span></span><span class="line"><span class="cl">vi tests/tck/features/function/json_extract.feature
</span></span><span class="line"><span class="cl"><span class="c1"># 执行 pytest (包含 tck 用例)，因为制定了 -m &#34;wey&#34;，只有 tests/tck/features/function/json_extract.feature 会被执行</span>
</span></span><span class="line"><span class="cl">python3 -m pytest -m <span class="s2">&#34;wey&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 关闭 pytest 所依赖的集群</span>
</span></span><span class="line"><span class="cl">make <span class="nv">CONTAINERIZED</span><span class="o">=</span><span class="nb">true</span> <span class="nv">ENABLE_SSL</span><span class="o">=</span><span class="nb">true</span> <span class="nv">CA_SIGNED</span><span class="o">=</span><span class="nb">true</span> down
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>延伸阅读：</p>
<ul>
<li>基于 BDD 理论的 Nebula 集成测试框架重构，https://nebula-graph.com.cn/posts/bdd-testing-practice</li>
<li>如何向 NebulaGraph 增加一个测试用例，https://nebula-graph.com.cn/posts/bdd-testing-practice-add-test-case</li>
</ul>
</blockquote>
<h3 id="邀请再次-review" class="headerLink">
    <a href="#%e9%82%80%e8%af%b7%e5%86%8d%e6%ac%a1-review" class="header-mark"></a>5.3 邀请再次 review</h3><p>待我们把需要的测试调通、再次提交 PR 并且 CI 用例全都通过之后，我们可以再次邀请之前帮助审查代码的同学做做最后的查看，如果一切都顺利，代码就会被合并了！</p>
<p><figure><a class="lightgallery" href="https://user-images.githubusercontent.com/1651790/197557709-2c851a03-d001-4fc9-bc5a-b858219fbded.png" title="https://user-images.githubusercontent.com/1651790/197557709-2c851a03-d001-4fc9-bc5a-b858219fbded.png" data-thumbnail="https://user-images.githubusercontent.com/1651790/197557709-2c851a03-d001-4fc9-bc5a-b858219fbded.png">
        <img
            
            loading="lazy"
            src="https://user-images.githubusercontent.com/1651790/197557709-2c851a03-d001-4fc9-bc5a-b858219fbded.png"
            srcset="https://user-images.githubusercontent.com/1651790/197557709-2c851a03-d001-4fc9-bc5a-b858219fbded.png, https://user-images.githubusercontent.com/1651790/197557709-2c851a03-d001-4fc9-bc5a-b858219fbded.png 1.5x, https://user-images.githubusercontent.com/1651790/197557709-2c851a03-d001-4fc9-bc5a-b858219fbded.png 2x"
            sizes="auto"
            alt="https://user-images.githubusercontent.com/1651790/197557709-2c851a03-d001-4fc9-bc5a-b858219fbded.png">
    </a></figure></p>
<blockquote>
<p>题图来自 <a href="https://unsplash.com/photos/TGEWJXylgJk" target="_blank" rel="noopener noreferrer">Jon</a></p>
</blockquote>]]></description>
</item></channel>
</rss>
