<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>siwei.io</title>
        <link>https://siwei.io/</link>
        <description>Siwei(思为) builds things and believes in Open Source.</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>weyl.gu@gmail.com (Wey Gu)</managingEditor>
            <webMaster>weyl.gu@gmail.com (Wey Gu)</webMaster><lastBuildDate>Thu, 25 Nov 2021 19:47:53 &#43;0800</lastBuildDate>
            <atom:link href="https://siwei.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>Nebula Graph 的 Java 数据解析实践与指导</title>
    <link>https://siwei.io/nebula-java-happy-parsing-guide/</link>
    <pubDate>Thu, 25 Nov 2021 19:47:53 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/nebula-java-happy-parsing-guide/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>如何快速、即时、符合直觉地去处理 Nebula Java Client 中的数据解析？读这一篇就够了。</p>
</blockquote>
<h2 id="关键步骤几行准备一个干净的交互式-nebula-java-repl-环境">关键步骤：几行准备一个干净的交互式 Nebula Java REPL 环境</h2>
<p>多亏了 <a href="https://github.com/albertlatacz/java-repl/" target="_blank" rel="noopener noreffer">Java-REPL</a> 我们可以很方便地（像 iPython 那样）去实时交互地调试、分析 Nebula Java 客户端，我们用它的 Docker 镜像可以很干净的去搞定：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">docker pull albertlatacz/java-repl
docker run --rm -it <span class="se">\
</span><span class="se"></span>    --network<span class="o">=</span>nebula-docker-compose_nebula-net <span class="se">\
</span><span class="se"></span>    -v ~:/root <span class="se">\
</span><span class="se"></span>    albertlatacz/java-repl <span class="se">\
</span><span class="se"></span>    bash
apt update -y <span class="o">&amp;&amp;</span> apt install ca-certificates -y
wget https://dlcdn.apache.org/maven/maven-3/3.8.4/binaries/apache-maven-3.8.4-bin.tar.gz --no-check-certificate

tar xzvf apache-maven-3.8.4-bin.tar.gz

wget https://github.com/vesoft-inc/nebula-java/archive/refs/tags/v2.6.1.tar.gz
tar xzvf v2.6.1.tar.gz
<span class="nb">cd</span> nebula-java-2.6.1/
../apache-maven-3.8.4/bin/mvn dependency:copy-dependencies
../apache-maven-3.8.4/bin/mvn -B package -Dmaven.test.skip<span class="o">=</span><span class="nb">true</span>

java -jar ../javarepl/javarepl.jar
</code></pre></td></tr></table>
</div>
</div><p>这时候，在执行完 <code>java -jar ../javarepl/javarepl.jar</code> 之后，我们就进入了交互式的 Java Shell（REPL），我们可以无需做编译，执行，print 这样的慢反馈来调试和研究我们的代码了，是不是很方便？</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="n">root</span><span class="nd">@a2e26ba62bb6</span><span class="o">:/</span><span class="n">javarepl</span><span class="o">/</span><span class="n">nebula</span><span class="o">-</span><span class="n">java</span><span class="o">-</span><span class="n">2</span><span class="o">.</span><span class="na">6</span><span class="o">.</span><span class="na">1</span><span class="err">#</span> <span class="n">java</span> <span class="o">-</span><span class="n">jar</span> <span class="o">../</span><span class="n">javarepl</span><span class="o">/</span><span class="n">javarepl</span><span class="o">.</span><span class="na">jar</span>

<span class="n">Welcome</span> <span class="n">to</span> <span class="n">JavaREPL</span> <span class="n">version</span> <span class="nf">428</span> <span class="o">(</span><span class="n">Java</span> <span class="nf">HotSpot</span><span class="o">(</span><span class="n">TM</span><span class="o">)</span> <span class="n">64</span><span class="o">-</span><span class="n">Bit</span> <span class="n">Server</span> <span class="n">VM</span><span class="o">,</span> <span class="n">Java</span> <span class="n">1</span><span class="o">.</span><span class="na">8</span><span class="o">.</span><span class="na">0_111</span><span class="o">)</span>
<span class="n">Type</span> <span class="n">expression</span> <span class="n">to</span> <span class="n">evaluate</span><span class="o">,</span> <span class="o">:</span><span class="n">help</span> <span class="k">for</span> <span class="n">more</span> <span class="n">options</span> <span class="n">or</span> <span class="n">press</span> <span class="n">tab</span> <span class="n">to</span> <span class="n">auto</span><span class="o">-</span><span class="n">complete</span><span class="o">.</span>
<span class="n">Connected</span> <span class="n">to</span> <span class="n">local</span> <span class="n">instance</span> <span class="n">at</span> <span class="n">http</span><span class="o">:</span><span class="c1">//localhost:43707
</span><span class="c1"></span>
<span class="n">java</span><span class="o">&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Hello, World!&#34;</span><span class="o">);</span>
<span class="n">Hello</span><span class="o">,</span> <span class="n">World</span><span class="o">!</span>
<span class="n">java</span><span class="o">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>首先我们在 <code>java&gt;</code> 提示符下，这些来把必须的类路径和导入：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="o">:</span><span class="n">cp</span> <span class="o">/</span><span class="n">javarepl</span><span class="o">/</span><span class="n">nebula</span><span class="o">-</span><span class="n">java</span><span class="o">-</span><span class="n">2</span><span class="o">.</span><span class="na">6</span><span class="o">.</span><span class="na">1</span><span class="o">/</span><span class="n">client</span><span class="o">/</span><span class="n">target</span><span class="o">/</span><span class="n">client</span><span class="o">-</span><span class="n">2</span><span class="o">.</span><span class="na">6</span><span class="o">.</span><span class="na">1</span><span class="o">.</span><span class="na">jar</span>
<span class="o">:</span><span class="n">cp</span> <span class="o">/</span><span class="n">javarepl</span><span class="o">/</span><span class="n">nebula</span><span class="o">-</span><span class="n">java</span><span class="o">-</span><span class="n">2</span><span class="o">.</span><span class="na">6</span><span class="o">.</span><span class="na">1</span><span class="o">/</span><span class="n">client</span><span class="o">/</span><span class="n">target</span><span class="o">/</span><span class="n">dependency</span><span class="o">/</span><span class="n">fastjson</span><span class="o">-</span><span class="n">1</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">78</span><span class="o">.</span><span class="na">jar</span>
<span class="o">:</span><span class="n">cp</span> <span class="o">/</span><span class="n">javarepl</span><span class="o">/</span><span class="n">nebula</span><span class="o">-</span><span class="n">java</span><span class="o">-</span><span class="n">2</span><span class="o">.</span><span class="na">6</span><span class="o">.</span><span class="na">1</span><span class="o">/</span><span class="n">client</span><span class="o">/</span><span class="n">target</span><span class="o">/</span><span class="n">dependency</span><span class="o">/</span><span class="n">slf4j</span><span class="o">-</span><span class="n">api</span><span class="o">-</span><span class="n">1</span><span class="o">.</span><span class="na">7</span><span class="o">.</span><span class="na">25</span><span class="o">.</span><span class="na">jar</span>
<span class="o">:</span><span class="n">cp</span> <span class="o">/</span><span class="n">javarepl</span><span class="o">/</span><span class="n">nebula</span><span class="o">-</span><span class="n">java</span><span class="o">-</span><span class="n">2</span><span class="o">.</span><span class="na">6</span><span class="o">.</span><span class="na">1</span><span class="o">/</span><span class="n">client</span><span class="o">/</span><span class="n">target</span><span class="o">/</span><span class="n">dependency</span><span class="o">/</span><span class="n">slf4j</span><span class="o">-</span><span class="n">log4j12</span><span class="o">-</span><span class="n">1</span><span class="o">.</span><span class="na">7</span><span class="o">.</span><span class="na">25</span><span class="o">.</span><span class="na">jar</span>
<span class="o">:</span><span class="n">cp</span> <span class="o">/</span><span class="n">javarepl</span><span class="o">/</span><span class="n">nebula</span><span class="o">-</span><span class="n">java</span><span class="o">-</span><span class="n">2</span><span class="o">.</span><span class="na">6</span><span class="o">.</span><span class="na">1</span><span class="o">/</span><span class="n">client</span><span class="o">/</span><span class="n">target</span><span class="o">/</span><span class="n">dependency</span><span class="o">/</span><span class="n">commons</span><span class="o">-</span><span class="n">pool2</span><span class="o">-</span><span class="n">2</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">jar</span>
<span class="o">:</span><span class="n">cp</span> <span class="o">/</span><span class="n">javarepl</span><span class="o">/</span><span class="n">nebula</span><span class="o">-</span><span class="n">java</span><span class="o">-</span><span class="n">2</span><span class="o">.</span><span class="na">6</span><span class="o">.</span><span class="na">1</span><span class="o">/</span><span class="n">client</span><span class="o">/</span><span class="n">target</span><span class="o">/</span><span class="n">dependency</span><span class="o">/</span><span class="n">log4j</span><span class="o">-</span><span class="n">1</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">17</span><span class="o">.</span><span class="na">jar</span>

<span class="kn">import</span> <span class="nn">com.alibaba.fastjson.JSON</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.alibaba.fastjson.JSONObject</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.vesoft.nebula.ErrorCode</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.vesoft.nebula.client.graph.NebulaPoolConfig</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.vesoft.nebula.client.graph.data.CASignedSSLParam</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.vesoft.nebula.client.graph.data.HostAddress</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.vesoft.nebula.client.graph.data.ResultSet</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.vesoft.nebula.client.graph.data.SelfSignedSSLParam</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.vesoft.nebula.client.graph.data.ValueWrapper</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.vesoft.nebula.client.graph.net.NebulaPool</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.vesoft.nebula.client.graph.net.Session</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.UnsupportedEncodingException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.concurrent.TimeUnit</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.lang.reflect.*</span><span class="o">;</span>
</code></pre></td></tr></table>
</div>
</div><p>我们可以从这 Java 环境连接到 Nebula Graph 里，下边的例子里我用了自己的 GraphD 的 IP 和端口作为例子：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="n">NebulaPoolConfig</span> <span class="n">nebulaPoolConfig</span> <span class="o">=</span> <span class="k">new</span> <span class="n">NebulaPoolConfig</span><span class="o">();</span>
<span class="n">nebulaPoolConfig</span><span class="o">.</span><span class="na">setMaxConnSize</span><span class="o">(</span><span class="n">10</span><span class="o">);</span>
<span class="n">List</span><span class="o">&lt;</span><span class="n">HostAddress</span><span class="o">&gt;</span> <span class="n">addresses</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="k">new</span> <span class="n">HostAddress</span><span class="o">(</span><span class="s">&#34;192.168.8.127&#34;</span><span class="o">,</span> <span class="n">9669</span><span class="o">));</span>
<span class="n">NebulaPool</span> <span class="n">pool</span> <span class="o">=</span> <span class="k">new</span> <span class="n">NebulaPool</span><span class="o">();</span>
<span class="n">pool</span><span class="o">.</span><span class="na">init</span><span class="o">(</span><span class="n">addresses</span><span class="o">,</span> <span class="n">nebulaPoolConfig</span><span class="o">);</span>
<span class="n">Session</span> <span class="n">session</span> <span class="o">=</span> <span class="n">pool</span><span class="o">.</span><span class="na">getSession</span><span class="o">(</span><span class="s">&#34;root&#34;</span><span class="o">,</span> <span class="s">&#34;nebula&#34;</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="通过调用-execute-方法获得不太容易懂的-resultset-对象">通过调用 <code>execute</code> 方法获得不太容易懂的 ResultSet 对象</h2>
<p>刚接触这里的大家一定对这个 ResultSet 对象有些愁，借助我们的环境，咱们来十分钟把它搞通吧，这里我们执行一个简单的返回 Vertex 顶点的结果看看：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="n">ResultSet</span> <span class="n">resp</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="s">&#34;USE basketballplayer;MATCH (n:player) WHERE n.name==\&#34;Tim Duncan\&#34; RETURN n&#34;</span><span class="o">);</span>
</code></pre></td></tr></table>
</div>
</div><p>这里我们可以参考 ResultSet 的代码：</p>
<blockquote>
<p>Reference: <a href="https://github.dev/vesoft-inc/nebula-java/blob/master/client/src/main/java/com/vesoft/nebula/client/graph/data/ResultSet.java" target="_blank" rel="noopener noreffer">client/graph/data/ResultSet.java</a></p>
</blockquote>
<p>好吧，其实可以先不看，跟着我的教程往下走吧，我们知道结果都是二维的表，ResultSet 提供了常见的针对行、列的一些方法，通常，我们是获取每一行，然后解析它，而关键的问题是每一个值要怎么处理，对吧。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="n">java</span><span class="o">&gt;</span> <span class="n">resp</span><span class="o">.</span><span class="na">isSucceeded</span><span class="o">()</span>
<span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Boolean</span> <span class="n">res9</span> <span class="o">=</span> <span class="kc">true</span>

<span class="n">java</span><span class="o">&gt;</span> <span class="n">resp</span><span class="o">.</span><span class="na">rowsSize</span><span class="o">()</span>
<span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Integer</span> <span class="n">res16</span> <span class="o">=</span> <span class="n">1</span>

<span class="n">java</span><span class="o">&gt;</span> <span class="n">rows</span> <span class="o">=</span> <span class="n">resp</span><span class="o">.</span><span class="na">getRows</span><span class="o">()</span>
<span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">ArrayList</span> <span class="n">rows</span> <span class="o">=</span> <span class="o">[</span><span class="n">Row</span> <span class="o">(</span>
  <span class="n">values</span> <span class="o">:</span> <span class="o">[</span>
    <span class="o">&lt;</span><span class="n">Value</span> <span class="n">vVal</span><span class="o">:</span><span class="n">Vertex</span> <span class="o">(</span>
        <span class="n">vid</span> <span class="o">:</span> <span class="o">&lt;</span><span class="n">Value</span> <span class="n">sVal</span><span class="o">:</span><span class="n">70</span> <span class="n">6c</span> <span class="n">61</span> <span class="n">79</span> <span class="n">65</span> <span class="n">72</span> <span class="n">31</span> <span class="n">30</span> <span class="n">30</span><span class="o">&gt;,</span>
        <span class="n">tags</span> <span class="o">:</span> <span class="o">[</span>
          <span class="n">Tag</span> <span class="o">(</span>
              <span class="n">name</span> <span class="o">:</span> <span class="n">70</span> <span class="n">6C</span> <span class="n">61</span> <span class="n">79</span> <span class="n">65</span> <span class="n">72</span><span class="o">,</span>
              <span class="n">props</span> <span class="o">:</span> <span class="o">{</span>
                <span class="o">[</span><span class="n">B</span><span class="nd">@5264a468</span> <span class="o">:</span> <span class="o">&lt;</span><span class="n">Value</span> <span class="n">iVal</span><span class="o">:</span><span class="n">42</span><span class="o">&gt;</span>
                <span class="o">[</span><span class="n">B</span><span class="nd">@496b8e10</span> <span class="o">:</span> <span class="o">&lt;</span><span class="n">Value</span> <span class="n">sVal</span><span class="o">:</span><span class="n">54</span> <span class="n">69</span> <span class="n">6d</span> <span class="n">20</span> <span class="n">44</span> <span class="n">75</span> <span class="n">6e</span> <span class="n">63</span> <span class="n">61</span> <span class="n">6e</span><span class="o">&gt;</span>
              <span class="o">}</span>
            <span class="o">)</span>
        <span class="o">]</span>
      <span class="o">)&gt;</span>
  <span class="o">]</span>
<span class="o">)]</span>
    
<span class="n">java</span><span class="o">&gt;</span> <span class="n">row0</span> <span class="o">=</span> <span class="n">resp</span><span class="o">.</span><span class="na">rowValues</span><span class="o">(</span><span class="n">0</span><span class="o">)</span>
<span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Iterable</span><span class="o">&lt;</span><span class="n">com</span><span class="o">.</span><span class="na">vesoft</span><span class="o">.</span><span class="na">nebula</span><span class="o">.</span><span class="na">client</span><span class="o">.</span><span class="na">graph</span><span class="o">.</span><span class="na">data</span><span class="o">.</span><span class="na">ValueWrapper</span><span class="o">&gt;</span> <span class="n">res10</span> <span class="o">=</span> <span class="n">ColumnName</span><span class="o">:</span> <span class="o">[</span><span class="n">n</span><span class="o">],</span> <span class="n">Values</span><span class="o">:</span> <span class="o">[(</span><span class="s">&#34;player100&#34;</span> <span class="o">:</span><span class="n">player</span> <span class="o">{</span><span class="n">name</span><span class="o">:</span> <span class="s">&#34;Tim Duncan&#34;</span><span class="o">,</span> <span class="n">age</span><span class="o">:</span> <span class="n">42</span><span class="o">})]</span>

</code></pre></td></tr></table>
</div>
</div><p>我们其实回到这次的 query ，其实是返回一个 vertex：顶点：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">(root@nebula) [basketballplayer]&gt; match (n:player) WHERE n.name == &#34;Tim Duncan&#34; return n
+----------------------------------------------------+
| n                                                  |
+----------------------------------------------------+
| (&#34;player100&#34; :player{age: 42, name: &#34;Tim Duncan&#34;}) |
+----------------------------------------------------+
Got 1 rows (time spent 2116/44373 us)
</code></pre></td></tr></table>
</div>
</div><p>通过上边的几个方法，我们其实能够获得这个顶点的值：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="n">v</span> <span class="o">=</span> <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&#34;com.vesoft.nebula.Value&#34;</span><span class="o">)</span>
<span class="n">v</span><span class="o">.</span><span class="na">getDeclaredMethods</span><span class="o">()</span>
</code></pre></td></tr></table>
</div>
</div><p>然而，我们可以看出来这个 <code>com.vesoft.nebula.Value</code> 的值的类提供的方法特别特别原始，这也是让大家犯愁的原因，在这个教程里最重要的一个带走的经验（除了利用 REPL之外）就是：除非必要，不要去取这个原始的类，我们应该去取得 <code>ValueWrapper</code> 封装之后的值！！！</p>
<blockquote>
<p>注意：其实我们有更轻松地方法，就是用 executeJson 直接获得 JSON string，别担心，会在后边提到，不过这个方法要 2.6 之后才支持。</p>
</blockquote>
<p>那么问题来了，如何使用 <code>ValueWrapper</code> 封装呢？其实答案已经在上边了，大家可以回去看看，resp.rowValues(0) 的类型正是 ValueWrapper 的可迭代对象！</p>
<p>所以，正确打开方式是迭它！迭它！迭它！其实这个就是代码库里的 GraphClientExample 的一部分例子了，我们把它迭代取出来，放到 <code>wrappedValueList</code> 里慢慢把玩：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="n">List</span><span class="o">&lt;</span><span class="n">ValueWrapper</span><span class="o">&gt;</span> <span class="n">wrappedValueList</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>

<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">resp</span><span class="o">.</span><span class="na">rowsSize</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="n">ResultSet</span><span class="o">.</span><span class="na">Record</span> <span class="n">record</span> <span class="o">=</span> <span class="n">resp</span><span class="o">.</span><span class="na">rowValues</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
    <span class="k">for</span> <span class="o">(</span><span class="n">ValueWrapper</span> <span class="n">value</span> <span class="o">:</span> <span class="n">record</span><span class="o">.</span><span class="na">values</span><span class="o">())</span> <span class="o">{</span>
        <span class="n">wrappedValueList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">value</span><span class="o">.</span><span class="na">isLong</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;%15s |&#34;</span><span class="o">,</span> <span class="n">value</span><span class="o">.</span><span class="na">asLong</span><span class="o">());</span>
        <span class="o">}</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">value</span><span class="o">.</span><span class="na">isBoolean</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;%15s |&#34;</span><span class="o">,</span> <span class="n">value</span><span class="o">.</span><span class="na">asBoolean</span><span class="o">());</span>
        <span class="o">}</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">value</span><span class="o">.</span><span class="na">isDouble</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;%15s |&#34;</span><span class="o">,</span> <span class="n">value</span><span class="o">.</span><span class="na">asDouble</span><span class="o">());</span>
        <span class="o">}</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">value</span><span class="o">.</span><span class="na">isString</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;%15s |&#34;</span><span class="o">,</span> <span class="n">value</span><span class="o">.</span><span class="na">asString</span><span class="o">());</span>
        <span class="o">}</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">value</span><span class="o">.</span><span class="na">isTime</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;%15s |&#34;</span><span class="o">,</span> <span class="n">value</span><span class="o">.</span><span class="na">asTime</span><span class="o">());</span>
        <span class="o">}</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">value</span><span class="o">.</span><span class="na">isDate</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;%15s |&#34;</span><span class="o">,</span> <span class="n">value</span><span class="o">.</span><span class="na">asDate</span><span class="o">());</span>
        <span class="o">}</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">value</span><span class="o">.</span><span class="na">isDateTime</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;%15s |&#34;</span><span class="o">,</span> <span class="n">value</span><span class="o">.</span><span class="na">asDateTime</span><span class="o">());</span>
        <span class="o">}</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">value</span><span class="o">.</span><span class="na">isVertex</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;%15s |&#34;</span><span class="o">,</span> <span class="n">value</span><span class="o">.</span><span class="na">asNode</span><span class="o">());</span>
        <span class="o">}</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">value</span><span class="o">.</span><span class="na">isEdge</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;%15s |&#34;</span><span class="o">,</span> <span class="n">value</span><span class="o">.</span><span class="na">asRelationship</span><span class="o">());</span>
        <span class="o">}</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">value</span><span class="o">.</span><span class="na">isPath</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;%15s |&#34;</span><span class="o">,</span> <span class="n">value</span><span class="o">.</span><span class="na">asPath</span><span class="o">());</span>
        <span class="o">}</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">value</span><span class="o">.</span><span class="na">isList</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;%15s |&#34;</span><span class="o">,</span> <span class="n">value</span><span class="o">.</span><span class="na">asList</span><span class="o">());</span>
        <span class="o">}</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">value</span><span class="o">.</span><span class="na">isSet</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;%15s |&#34;</span><span class="o">,</span> <span class="n">value</span><span class="o">.</span><span class="na">asSet</span><span class="o">());</span>
        <span class="o">}</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">value</span><span class="o">.</span><span class="na">isMap</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;%15s |&#34;</span><span class="o">,</span> <span class="n">value</span><span class="o">.</span><span class="na">asMap</span><span class="o">());</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>上边这些很丑的 if 就是关键了，我们知道 query 的返回值可能是多种类型的，他们分为：</p>
<ul>
<li>图语义的：点、边、路径</li>
<li>数据类型：String，日期，列表，集合 等等等</li>
</ul>
<p>这里的关键是，我们要使用 <code>ValueWrapper</code> 为我们准备好的 <code>asXxx</code> 方法，如果这个值是一个顶点，么这个 Xxx 就是 Node，同理如果是边的话，这个 Xxx 就是 Relationship。</p>
<p>所以，我给大家看看咱们这个返回点结果的情况下的 <code>asNode()</code> 方法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="n">java</span><span class="o">&gt;</span> <span class="n">v</span> <span class="o">=</span> <span class="n">wrappedValueList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">0</span><span class="o">)</span>
<span class="n">com</span><span class="o">.</span><span class="na">vesoft</span><span class="o">.</span><span class="na">nebula</span><span class="o">.</span><span class="na">client</span><span class="o">.</span><span class="na">graph</span><span class="o">.</span><span class="na">data</span><span class="o">.</span><span class="na">ValueWrapper</span> <span class="n">v</span> <span class="o">=</span> <span class="o">(</span><span class="s">&#34;player100&#34;</span> <span class="o">:</span><span class="n">player</span> <span class="o">{</span><span class="n">name</span><span class="o">:</span> <span class="s">&#34;Tim Duncan&#34;</span><span class="o">,</span> <span class="n">age</span><span class="o">:</span> <span class="n">42</span><span class="o">})</span>
<span class="n">java</span><span class="o">&gt;</span> <span class="n">v</span><span class="o">.</span><span class="na">asNode</span><span class="o">()</span>
<span class="n">com</span><span class="o">.</span><span class="na">vesoft</span><span class="o">.</span><span class="na">nebula</span><span class="o">.</span><span class="na">client</span><span class="o">.</span><span class="na">graph</span><span class="o">.</span><span class="na">data</span><span class="o">.</span><span class="na">Node</span> <span class="n">res16</span> <span class="o">=</span> <span class="o">(</span><span class="s">&#34;player100&#34;</span> <span class="o">:</span><span class="n">player</span> <span class="o">{</span><span class="n">name</span><span class="o">:</span> <span class="s">&#34;Tim Duncan&#34;</span><span class="o">,</span> <span class="n">age</span><span class="o">:</span> <span class="n">42</span><span class="o">})</span>
<span class="n">java</span><span class="o">&gt;</span> <span class="n">node</span> <span class="o">=</span> <span class="n">v</span><span class="o">.</span><span class="na">asNode</span><span class="o">()</span>
<span class="n">com</span><span class="o">.</span><span class="na">vesoft</span><span class="o">.</span><span class="na">nebula</span><span class="o">.</span><span class="na">client</span><span class="o">.</span><span class="na">graph</span><span class="o">.</span><span class="na">data</span><span class="o">.</span><span class="na">Node</span> <span class="n">node</span> <span class="o">=</span> <span class="o">(</span><span class="s">&#34;player100&#34;</span> <span class="o">:</span><span class="n">player</span> <span class="o">{</span><span class="n">name</span><span class="o">:</span> <span class="s">&#34;Tim Duncan&#34;</span><span class="o">,</span> <span class="n">age</span><span class="o">:</span> <span class="n">42</span><span class="o">})</span>
</code></pre></td></tr></table>
</div>
</div><p>顺便说一下，借助于 Java 的 reflection ，我们可以在这个交互程序里做类似于 Python 里 <code>dir()</code> 的事情，实时地去获取一个类支持的方法，像这样，省去了查代码。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="n">java</span><span class="o">&gt;</span> <span class="n">rClass</span><span class="o">=</span><span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&#34;com.vesoft.nebula.client.graph.data.ResultSet&#34;</span><span class="o">)</span>
<span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Class</span> <span class="n">r</span> <span class="o">=</span> <span class="kd">class</span> <span class="nc">com</span><span class="o">.</span><span class="na">vesoft</span><span class="o">.</span><span class="na">nebula</span><span class="o">.</span><span class="na">client</span><span class="o">.</span><span class="na">graph</span><span class="o">.</span><span class="na">data</span><span class="o">.</span><span class="na">ResultSet</span>
<span class="n">java</span><span class="o">&gt;</span> <span class="n">rClass</span><span class="o">.</span><span class="na">getDeclaredMethods</span><span class="o">()</span>
<span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">reflect</span><span class="o">.</span><span class="na">Method</span><span class="o">[]</span> <span class="n">res20</span> <span class="o">=</span> <span class="o">[</span><span class="kd">public</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">List</span> <span class="n">com</span><span class="o">.</span><span class="na">vesoft</span><span class="o">.</span><span class="na">nebula</span><span class="o">.</span><span class="na">client</span><span class="o">.</span><span class="na">graph</span><span class="o">.</span><span class="na">data</span><span class="o">.</span><span class="na">ResultSet</span><span class="o">.</span><span class="na">getColumnNames</span><span class="o">(),</span> <span class="kd">public</span> <span class="kt">int</span> <span class="n">com</span><span class="o">.</span><span class="na">vesoft</span><span class="o">.</span><span class="na">nebula</span><span class="o">.</span><span class="na">client</span><span class="o">.</span><span class="na">graph</span><span class="o">.</span><span class="na">data</span><span class="o">.</span><span class="na">ResultSet</span><span class="o">.</span><span class="na">rowsSize</span><span class="o">(),</span> <span class="kd">public</span> <span class="n">com</span><span class="o">.</span><span class="na">vesoft</span><span class="o">.</span><span class="na">nebula</span><span class="o">.</span><span class="na">client</span><span class="o">.</span><span class="na">graph</span><span class="o">.</span><span class="na">data</span><span class="o">.</span><span class="na">ResultSet$Record</span> <span class="n">com</span><span class="o">.</span><span class="na">vesoft</span><span class="o">.</span><span class="na">nebula</span><span class="o">.</span><span class="na">client</span><span class="o">.</span><span class="na">graph</span><span class="o">.</span><span class="na">data</span><span class="o">.</span><span class="na">ResultSet</span><span class="o">.</span><span class="na">rowValues</span><span class="o">(</span><span class="kt">int</span><span class="o">),</span> <span class="kd">public</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">List</span> <span class="n">com</span><span class="o">.</span><span class="na">vesoft</span><span class="o">.</span><span class="na">nebula</span><span class="o">.</span><span class="na">client</span><span class="o">.</span><span class="na">graph</span><span class="o">.</span><span class="na">data</span><span class="o">.</span><span class="na">ResultSet</span><span class="o">.</span><span class="na">colValues</span><span class="o">(</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span><span class="o">),</span> <span class="kd">public</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span> <span class="n">com</span><span class="o">.</span><span class="na">vesoft</span><span class="o">.</span><span class="na">nebula</span><span class="o">.</span><span class="na">client</span><span class="o">.</span><span class="na">graph</span><span class="o">.</span><span class="na">data</span><span class="o">.</span><span class="na">ResultSet</span><span class="o">.</span><span class="na">getErrorMessage</span><span class="o">(),</span> <span class="kd">public</span> <span class="kt">boolean</span> <span class="n">com</span><span class="o">.</span><span class="na">vesoft</span><span class="o">.</span><span class="na">nebula</span><span class="o">.</span><span class="na">client</span><span class="o">.</span><span class="na">graph</span><span class="o">.</span><span class="na">data</span><span class="o">.</span><span class="na">ResultSet</span><span class="o">.</span><span class="na">isSucceeded</span><span class="o">(),</span> <span class="kd">public</span> <span class="kt">int</span> <span class="n">com</span><span class="o">.</span><span class="na">vesoft</span><span class="o">.</span><span class="na">nebula</span><span class="o">.</span><span class="na">client</span><span class="o">.</span><span class="na">graph</span><span class="o">.</span><span class="na">data</span><span class="o">.</span><span class="na">ResultSet</span><span class="o">.</span><span class="na">getErrorCode</span><span class="o">(),</span> <span class="kd">public</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span> <span class="n">com</span><span class="o">.</span><span class="na">vesoft</span><span class="o">.</span><span class="na">nebula</span><span class="o">.</span><span class="na">client</span><span class="o">.</span><span class="na">graph</span><span class="o">.</span><span class="na">data</span><span class="o">.</span><span class="na">ResultSet</span><span class="o">.</span><span class="na">getSpaceName</span><span class="o">(),</span> <span class="kd">public</span> <span class="kt">int</span> <span class="n">com</span><span class="o">.</span><span class="na">vesoft</span><span class="o">.</span><span class="na">nebula</span><span class="o">.</span><span class="na">client</span><span class="o">.</span><span class="na">graph</span><span class="o">.</span><span class="na">data</span><span class="o">.</span><span class="na">ResultSet</span><span class="o">.</span><span class="na">getLatency</span><span class="o">(),</span> <span class="kd">public</span> <span class="n">com</span><span class="o">.</span><span class="na">vesoft</span><span class="o">.</span><span class="na">nebula</span><span class="o">.</span><span class="na">graph</span><span class="o">.</span><span class="na">PlanDescription</span> <span class="n">com</span><span class="o">.</span><span class="na">vesoft</span><span class="o">.</span><span class="na">nebula</span><span class="o">.</span><span class="na">client</span><span class="o">.</span><span class="na">graph</span><span class="o">.</span><span class="na">data</span><span class="o">.</span><span class="na">ResultSet</span><span class="o">.</span><span class="na">getPlanDesc</span><span class="o">(),</span> <span class="kd">public</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">List</span> <span class="n">com</span><span class="o">.</span><span class="na">vesoft</span><span class="o">.</span><span class="na">nebula</span><span class="o">.</span><span class="na">client</span><span class="o">.</span><span class="na">graph</span><span class="o">.</span><span class="na">data</span><span class="o">.</span><span class="na">ResultSet</span><span class="o">.</span><span class="na">getRows</span><span class="o">(),</span> <span class="kd">public</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span> <span class="n">com</span><span class="o">.</span><span class="na">vesoft</span><span class="o">.</span><span class="na">nebula</span><span class="o">.</span><span class="na">client</span><span class="o">.</span><span class="na">graph</span><span class="o">.</span><span class="na">data</span><span class="o">.</span><span class="na">ResultSet</span><span class="o">.</span><span class="na">getComment</span><span class="o">(),</span> <span class="kd">public</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span> <span class="n">com</span><span class="o">.</span><span class="na">vesoft</span><span class="o">.</span><span class="na">nebula</span><span class="o">.</span><span class="na">client</span><span class="o">.</span><span class="na">graph</span><span class="o">.</span><span class="na">data</span><span class="o">.</span><span class="na">ResultSet</span><span class="o">.</span><span class="na">toString</span><span class="o">(),</span> <span class="kd">public</span> <span class="kt">boolean</span> <span class="n">com</span><span class="o">.</span><span class="na">vesoft</span><span class="o">.</span><span class="na">nebula</span><span class="o">.</span><span class="na">client</span><span class="o">.</span><span class="na">graph</span><span class="o">.</span><span class="na">data</span><span class="o">.</span><span class="na">ResultSet</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">(),</span> <span class="kd">public</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">List</span> <span class="n">com</span><span class="o">.</span><span class="na">vesoft</span><span class="o">.</span><span class="na">nebula</span><span class="o">.</span><span class="na">client</span><span class="o">.</span><span class="na">graph</span><span class="o">.</span><span class="na">data</span><span class="o">.</span><span class="na">ResultSet</span><span class="o">.</span><span class="na">keys</span><span class="o">()]</span>
</code></pre></td></tr></table>
</div>
</div><p>这样：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="n">java</span><span class="o">&gt;</span> <span class="n">nodeClass</span><span class="o">=</span><span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&#34;com.vesoft.nebula.client.graph.data.Node&#34;</span><span class="o">)</span>
<span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Class</span> <span class="n">nodeClass</span> <span class="o">=</span> <span class="kd">class</span> <span class="nc">com</span><span class="o">.</span><span class="na">vesoft</span><span class="o">.</span><span class="na">nebula</span><span class="o">.</span><span class="na">client</span><span class="o">.</span><span class="na">graph</span><span class="o">.</span><span class="na">data</span><span class="o">.</span><span class="na">Node</span>
<span class="n">java</span><span class="o">&gt;</span> <span class="n">nodeClass</span><span class="o">.</span><span class="na">getDeclaredMethods</span><span class="o">()</span>
<span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">reflect</span><span class="o">.</span><span class="na">Method</span><span class="o">[]</span> <span class="n">res20</span> <span class="o">=</span> <span class="o">[</span><span class="kd">public</span> <span class="kt">boolean</span> <span class="n">com</span><span class="o">.</span><span class="na">vesoft</span><span class="o">.</span><span class="na">nebula</span><span class="o">.</span><span class="na">client</span><span class="o">.</span><span class="na">graph</span><span class="o">.</span><span class="na">data</span><span class="o">.</span><span class="na">Node</span><span class="o">.</span><span class="na">hasTagName</span><span class="o">(</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span><span class="o">),</span> <span class="kd">public</span> <span class="kt">boolean</span> <span class="n">com</span><span class="o">.</span><span class="na">vesoft</span><span class="o">.</span><span class="na">nebula</span><span class="o">.</span><span class="na">client</span><span class="o">.</span><span class="na">graph</span><span class="o">.</span><span class="na">data</span><span class="o">.</span><span class="na">Node</span><span class="o">.</span><span class="na">hasLabel</span><span class="o">(</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span><span class="o">),</span> <span class="kd">public</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">List</span> <span class="n">com</span><span class="o">.</span><span class="na">vesoft</span><span class="o">.</span><span class="na">nebula</span><span class="o">.</span><span class="na">client</span><span class="o">.</span><span class="na">graph</span><span class="o">.</span><span class="na">data</span><span class="o">.</span><span class="na">Node</span><span class="o">.</span><span class="na">tagNames</span><span class="o">(),</span> <span class="kd">public</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">HashMap</span> <span class="n">com</span><span class="o">.</span><span class="na">vesoft</span><span class="o">.</span><span class="na">nebula</span><span class="o">.</span><span class="na">client</span><span class="o">.</span><span class="na">graph</span><span class="o">.</span><span class="na">data</span><span class="o">.</span><span class="na">Node</span><span class="o">.</span><span class="na">properties</span><span class="o">(</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">java</span><span class="o">.</span><span class="na">io</span><span class="o">.</span><span class="na">UnsupportedEncodingException</span><span class="o">,</span> <span class="kd">public</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">List</span> <span class="n">com</span><span class="o">.</span><span class="na">vesoft</span><span class="o">.</span><span class="na">nebula</span><span class="o">.</span><span class="na">client</span><span class="o">.</span><span class="na">graph</span><span class="o">.</span><span class="na">data</span><span class="o">.</span><span class="na">Node</span><span class="o">.</span><span class="na">labels</span><span class="o">(),</span> <span class="kd">public</span> <span class="kt">boolean</span> <span class="n">com</span><span class="o">.</span><span class="na">vesoft</span><span class="o">.</span><span class="na">nebula</span><span class="o">.</span><span class="na">client</span><span class="o">.</span><span class="na">graph</span><span class="o">.</span><span class="na">data</span><span class="o">.</span><span class="na">Node</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Object</span><span class="o">),</span> <span class="kd">public</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span> <span class="n">com</span><span class="o">.</span><span class="na">vesoft</span><span class="o">.</span><span class="na">nebula</span><span class="o">.</span><span class="na">client</span><span class="o">.</span><span class="na">graph</span><span class="o">.</span><span class="na">data</span><span class="o">.</span><span class="na">Node</span><span class="o">.</span><span class="na">toString</span><span class="o">(),</span> <span class="kd">public</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">List</span> <span class="n">com</span><span class="o">.</span><span class="na">vesoft</span><span class="o">.</span><span class="na">nebula</span><span class="o">.</span><span class="na">client</span><span class="o">.</span><span class="na">graph</span><span class="o">.</span><span class="na">data</span><span class="o">.</span><span class="na">Node</span><span class="o">.</span><span class="na">values</span><span class="o">(</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span><span class="o">),</span> <span class="kd">public</span> <span class="kt">int</span> <span class="n">com</span><span class="o">.</span><span class="na">vesoft</span><span class="o">.</span><span class="na">nebula</span><span class="o">.</span><span class="na">client</span><span class="o">.</span><span class="na">graph</span><span class="o">.</span><span class="na">data</span><span class="o">.</span><span class="na">Node</span><span class="o">.</span><span class="na">hashCode</span><span class="o">(),</span> <span class="kd">public</span> <span class="n">com</span><span class="o">.</span><span class="na">vesoft</span><span class="o">.</span><span class="na">nebula</span><span class="o">.</span><span class="na">client</span><span class="o">.</span><span class="na">graph</span><span class="o">.</span><span class="na">data</span><span class="o">.</span><span class="na">ValueWrapper</span> <span class="n">com</span><span class="o">.</span><span class="na">vesoft</span><span class="o">.</span><span class="na">nebula</span><span class="o">.</span><span class="na">client</span><span class="o">.</span><span class="na">graph</span><span class="o">.</span><span class="na">data</span><span class="o">.</span><span class="na">Node</span><span class="o">.</span><span class="na">getId</span><span class="o">(),</span> <span class="kd">public</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">List</span> <span class="n">com</span><span class="o">.</span><span class="na">vesoft</span><span class="o">.</span><span class="na">nebula</span><span class="o">.</span><span class="na">client</span><span class="o">.</span><span class="na">graph</span><span class="o">.</span><span class="na">data</span><span class="o">.</span><span class="na">Node</span><span class="o">.</span><span class="na">keys</span><span class="o">(</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">java</span><span class="o">.</span><span class="na">io</span><span class="o">.</span><span class="na">UnsupportedEncodingException</span><span class="o">]</span>
</code></pre></td></tr></table>
</div>
</div><p>看到这里，大家应该看到了这个封装了的 ValueWrapper 的好处了吧？它提供了方便的符合直觉的方法，对于 Node 类型来说，它提供了 <code>tagNames()</code>, <code>properties()</code>, <code>labels()</code> 等等非常好用的方法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="n">java</span><span class="o">&gt;</span> <span class="n">node</span><span class="o">.</span><span class="na">properties</span><span class="o">(</span><span class="s">&#34;player&#34;</span><span class="o">)</span>
<span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">HashMap</span> <span class="n">res11</span> <span class="o">=</span> <span class="o">{</span><span class="n">name</span><span class="o">=</span><span class="s">&#34;Tim Duncan&#34;</span><span class="o">,</span> <span class="n">age</span><span class="o">=</span><span class="n">42</span><span class="o">}</span>
<span class="n">java</span><span class="o">&gt;</span> <span class="n">node</span><span class="o">.</span><span class="na">tagNames</span><span class="o">()</span>
<span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">ArrayList</span> <span class="n">res12</span> <span class="o">=</span> <span class="o">[</span><span class="n">player</span><span class="o">]</span>
<span class="n">java</span><span class="o">&gt;</span> <span class="n">node</span><span class="o">.</span><span class="na">labels</span><span class="o">()</span>
<span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">ArrayList</span> <span class="n">res13</span> <span class="o">=</span> <span class="o">[</span><span class="n">player</span><span class="o">]</span>
<span class="n">java</span><span class="o">&gt;</span> <span class="n">node</span><span class="o">.</span><span class="na">values</span><span class="o">(</span><span class="s">&#34;player&#34;</span><span class="o">)</span>
<span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">ArrayList</span> <span class="n">res14</span> <span class="o">=</span> <span class="o">[</span><span class="n">42</span><span class="o">,</span> <span class="s">&#34;Tim Duncan&#34;</span><span class="o">]</span>
</code></pre></td></tr></table>
</div>
</div><p>我们这里只展示了顶点数据类型的处理、解析方式（<code>RETURN n</code>），像其他的数据类型比如边（edge）路径（path）或者地理数据、时间数据，用这种方式（看有什么方法，再交互地去试试方法怎么用）也是一样的，对吧？</p>
<h2 id="直接返回-json-的-executejson-方法">直接返回 JSON 的 <code>executeJson</code> 方法</h2>
<p>最后，好消息是，从 2.6 开始，nebula 可以直接返回 JSON 的 String 了，我们上边的纠结也都不是必要的了：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="n">java</span><span class="o">&gt;</span> <span class="n">String</span> <span class="n">resp_json</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">executeJson</span><span class="o">(</span><span class="s">&#34;USE basketballplayer;MATCH (n:player) WHERE n.name==\&#34;Tim Duncan\&#34; RETURN n&#34;</span><span class="o">);</span>

<span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span> <span class="n">resp_json</span> <span class="o">=</span> <span class="s">&#34;
</span><span class="s">{
</span><span class="s">   &#34;</span><span class="n">errors</span><span class="s">&#34;:[
</span><span class="s">      {
</span><span class="s">         &#34;</span><span class="n">code</span><span class="s">&#34;:0
</span><span class="s">      }
</span><span class="s">   ],
</span><span class="s">   &#34;</span><span class="n">results</span><span class="s">&#34;:[
</span><span class="s">      {
</span><span class="s">         &#34;</span><span class="n">spaceName</span><span class="s">&#34;:&#34;</span><span class="n">basketballplayer</span><span class="s">&#34;,
</span><span class="s">         &#34;</span><span class="n">data</span><span class="s">&#34;:[
</span><span class="s">            {
</span><span class="s">               &#34;</span><span class="n">meta</span><span class="s">&#34;:[
</span><span class="s">                  {
</span><span class="s">                     &#34;</span><span class="n">type</span><span class="s">&#34;:&#34;</span><span class="n">vertex</span><span class="s">&#34;,
</span><span class="s">                     &#34;</span><span class="n">id</span><span class="s">&#34;:&#34;</span><span class="n">player100</span><span class="s">&#34;
</span><span class="s">                  }
</span><span class="s">               ],
</span><span class="s">               &#34;</span><span class="n">row</span><span class="s">&#34;:[
</span><span class="s">                  {
</span><span class="s">                     &#34;</span><span class="n">player</span><span class="o">.</span><span class="na">age</span><span class="s">&#34;:42,
</span><span class="s">                     &#34;</span><span class="n">player</span><span class="o">.</span><span class="na">name</span><span class="s">&#34;:&#34;</span><span class="n">Tim</span> <span class="n">Duncan</span><span class="s">&#34;
</span><span class="s">                  }
</span><span class="s">               ]
</span><span class="s">            }
</span><span class="s">         ],
</span><span class="s">         &#34;</span><span class="n">columns</span><span class="s">&#34;:[
</span><span class="s">            &#34;</span><span class="n">n</span><span class="s">&#34;
</span><span class="s">         ],
</span><span class="s">         &#34;</span><span class="n">errors</span><span class="s">&#34;:{
</span><span class="s">            &#34;</span><span class="n">code</span><span class="s">&#34;:0
</span><span class="s">         },
</span><span class="s">         &#34;</span><span class="n">latencyInUs</span><span class="s">&#34;:4761
</span><span class="s">      }
</span><span class="s">   ]
</span><span class="s">}
</span><span class="s">&#34;</span>
</code></pre></td></tr></table>
</div>
</div><p>我相信大家肯定比我更擅长处理 JSON 的结果了哈~~</p>
<h2 id="结论">结论</h2>
<ul>
<li>如果我们有条件（2.6以后）用 JSON，情况会很容易，可能大家不太需要本文的方法（不过有交互环境还是很方便吧？）</li>
<li>如果我们不得不和 resultSet 打交道，记得用 ValueWrapper ，因为我们可以用 asNode()，asRelationship() 和 asPath() ，封装之后的值比原始的值可爱太多了！
<ul>
<li>通过 REPL 工具，结合 Java 的 reflection 加上 源代码本身，分析数据的处理将变得异常顺滑</li>
</ul>
</li>
</ul>
<p>Happy Graphing!</p>
<blockquote>
<p>Picture Credit：<a href="https://unsplash.com/photos/0wIHsm2_1fc" target="_blank" rel="noopener noreffer">leunesmedia</a></p>
</blockquote>]]></description>
</item><item>
    <title>从零到一：如何构建一个企业股权图谱系统？</title>
    <link>https://siwei.io/corp-rel-graph/</link>
    <pubDate>Wed, 24 Nov 2021 13:59:58 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/corp-rel-graph/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>如何构建一个具有股权分析的图谱与线上系统呢？本文里，我将利用图数据库从零到一带你构建一个简易版的股权穿透图谱系统。</p>
</blockquote>
<p>我们知道无论是监管部门、企业还是个人，我们有需求针对一个企业、法人做一些背景调查，这些调查可以是法律诉讼、公开持股、企业任职等等多种多样的信息。这些背景信息可以辅助我们做商业上的重要决策，规避风险：比如根据公司的股权关系，了解是否存在利益冲突比如是否选择与一家公司进行商业往来。</p>
<p>为了满足这样的关系分析需求的时候，我们往往面临一些挑战，比如：</p>
<ul>
<li>如何将这些数据的关联关系体现在系统之中？使得它们可以被挖掘、利用</li>
<li>多种异构数据、数据源之间的关系可能随着业务的发展引申出更多的变化，在表结构数据库中，这意味着 Schema 变更</li>
<li>分析系统需要尽可能实时获取需要的查询结果，这通常涉及到多跳关系查询</li>
<li>领域专家能否快速灵活、可视化获取分享信息</li>
</ul>
<p>那么如何构建这样一个系统解决以上挑战呢？</p>
<h2 id="数据存在哪里">数据存在哪里？</h2>
<blockquote>
<p>前提：数据集准备，为了更好的给大家演示解决这个问题，我写了一个轮子能随机生成股权结构相关的数据，生成的数据的例子在<a href="https://github.com/wey-gu/nebula-shareholding-example/tree/main/data_sample" target="_blank" rel="noopener noreffer">这里</a>。</p>
<p>这里，我们有<a href="https://github.com/wey-gu/nebula-shareholding-example/blob/main/data_sample/person.csv" target="_blank" rel="noopener noreffer">法人</a>、<a href="https://github.com/wey-gu/nebula-shareholding-example/blob/main/data_sample/corp.csv" target="_blank" rel="noopener noreffer">公司</a>的数据，更有<a href="https://github.com/wey-gu/nebula-shareholding-example/blob/main/data_sample/corp_rel.csv" target="_blank" rel="noopener noreffer">公司与子公司之间的关系</a>，<a href="https://github.com/wey-gu/nebula-shareholding-example/blob/main/data_sample/corp_share.csv" target="_blank" rel="noopener noreffer">公司持有公司股份</a>，<a href="https://github.com/wey-gu/nebula-shareholding-example/blob/main/data_sample/person_corp_role.csv" target="_blank" rel="noopener noreffer">法人任职公司</a>，<a href="https://github.com/wey-gu/nebula-shareholding-example/blob/main/data_sample/person_corp_share.csv" target="_blank" rel="noopener noreffer">法人持有公司股份</a>和<a href="https://github.com/wey-gu/nebula-shareholding-example/blob/main/data_sample/person_rel.csv" target="_blank" rel="noopener noreffer">法人之间亲密度</a>的关系数据。</p>
</blockquote>
<p>数据存在哪里？这是一个关键的问题，这里我们剧透一下，答案是：图数据库。然后我们再简单解释一下为什么这样一个股权图谱系统跑在图数据库上是更好的。</p>
<p>在这样一个简单的数据模型之下，我们可以很直接的在关系型数据库中这么建模：</p>
<p></p>
<p>而这么建模的问题在于：这种逻辑关联的方式使得无论数据的关联关系查询表达、存储、还是引入新的关联关系都不是很高效。</p>
<ul>
<li><em>查询表达不高效</em>是因为关系型数据库是面向表结构设计的，这决定了关系查询要写嵌套的 JOIN。</li>
<li><em>存储不高效</em>是因为表结构被设计的模式是面向数据记录，而非数据之间的关系关系：我们虽然习惯了将数据中实体（比如法人）和实体关联（比如持有股权 <code>hold_sharing_relationship</code>）以另外一个表中的记录来表达、存储起来，这逻辑上完全行得通，但是到了多跳、大量需要请求数据关系跳转的情况下，这样跨表 JOIN 的代价就成为了瓶颈。</li>
</ul>
<p>当一个通用系统无法满足不可忽视的具体需求的时候，一个新的系统就会诞生，这就是图数据库，针对这样的场景，图数据库很自然地特别针对关联关系场景去设计整个数据库：</p>
<ul>
<li>
<p>面向关联关系表达的语义。</p>
<ul>
<li>我列举了一个等价的一跳查询在表结构数据库与图数据库中，查询语句的区别。大家应该可以看出“找到所有服役过和球员 Tim 曾服役的球队的球员”这样的查询表达可以在图数据库如何自然表达，这仅仅是一条查询的区别，如果是多跳的话，他们的复杂度区分还会更明显一些。</li>
</ul>
</li>
<li>
<p>将关联关系存储为物理连接，从而使得跳转查询代价最小。</p>
<ul>
<li>图数据之中，从点拓展（找到一个或者多个关系的另一头）出去的代价是非常小的，这因为图数据库是一个专有的系统，得益于它主要关心“图”结构的设计，查找确定的实体（比如和一个法人 A ）所有关联（可能是任职、亲戚、持有、等等关系）其他所有实体（公司、法人）这个查找的代价是 O(1) 的，因为它们在图数据库的数据机构里是真的链接在一起的。</li>
<li>大家可以从下表第三列的一个参考数据一窥图数据库在这种查询下的优势，这种优势在多跳高并发情况下的区别是“能”与”不能“作为线上系统的区别，是“实时”与“离线”的区别。</li>
</ul>
</li>
<li>
<p>建模符合直觉。</p>
<ul>
<li>大家在下表第二列中可以对比我们本文中进行的股权分析数据在两种数据库之中的建模的区别，尤其是在关心关联关系的场景下，我们可以感受到属性图的模型建立是很符合人类大脑直觉的，而这和大脑之中<a href="https://zh.wikipedia.org/zh/%E7%A5%9E%E7%B6%93%E5%85%83" target="_blank" rel="noopener noreffer">神经元</a>的结构可能也有一些关系。</li>
</ul>
</li>
</ul>
<blockquote>
<p>表格——表结构数据库与图数据库的比较：</p>
</blockquote>
<table>
<thead>
<tr>
<th>表结构数据库</th>
<th>图数据库（属性图）</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>4 跳查询时延 1544 秒</td>
<td>4 跳查询时延 1.36 秒</td>
</tr>
</tbody>
</table>
<p>所以，在本教程里，我们将利用图数据库来进行数据存储。</p>
<h2 id="数据建模">数据建模</h2>
<p>前便在讨论数据存在哪里的时候，我们已经揭示了在图数据库中建模的方式：本质上，我们在这张图中，将会有两种实体：</p>
<ul>
<li>人</li>
<li>公司</li>
</ul>
<p>四种关系：</p>
<ul>
<li><code>人</code> –<code>作为亲人</code>–&gt;<code>人</code></li>
<li><code>人</code> –<code>作为角色</code>–&gt; <code>公司</code></li>
<li><code>人</code> 或者 <code>公司</code> –<code>持有股份</code>–&gt; <code>公司</code></li>
<li><code>公司</code> –<code>作为子机构</code>–&gt; <code>公司</code></li>
</ul>
<p>这里边，实体与关系本身都可以包涵更多的信息，这些信息在图数据库里就是实体、关系自身的属性。如下图表示：</p>
<ul>
<li><code>人</code>的属性包括 <code>name</code>，<code>age</code></li>
<li><code>公司</code>的属性包括 <code>name</code>，<code>location</code></li>
<li><code>持有股份</code> 这个关系有属性 <code>share</code>(份额)</li>
<li><code>任职</code>这个关系有属性 <code>role</code>，<code>level</code></li>
</ul>
<p></p>
<h2 id="数据入库">数据入库</h2>
<p>本教程中，我们使用的图数据库叫做 Nebula Graph（星云图数据库），它是一个以 Apache 2.0 许可证开源的分布式图数据库。</p>
<blockquote>
<p>Nebula Graph in Github: <a href="https://github.com/vesoft-inc/nebula" target="_blank" rel="noopener noreffer">https://github.com/vesoft-inc/nebula</a></p>
</blockquote>
<p>在 Nebula Graph 之中导入数据，有很多不同定位的工具可供选项，大家可以在<a href="https://docs.nebula-graph.com.cn/2.6.1/20.appendix/write-tools/" target="_blank" rel="noopener noreffer">这篇文档</a>和<a href="https://www.siwei.io/sketches/nebula-data-import-options/" target="_blank" rel="noopener noreffer">这个视频</a>了解更多数据导入工具选型的信息。</p>
<p>在我们的教程之中，我们使用 nebula-importer 来完成这个工作（这其实不是唯一的选择）。</p>
<blockquote>
<p>本章节假设了您已经部署了一个 Nebula Graph 集群，您可以参考<a href="https://docs.nebula-graph.com.cn/2.6.1/4.deployment-and-installation/2.compile-and-install-nebula-graph/3.deploy-nebula-graph-with-docker-compose/" target="_blank" rel="noopener noreffer">这个文档</a>利用 Docker 很方便地部署，也可以利用 <a href="https://siwei.io/nebula-up/" target="_blank" rel="noopener noreffer">Nebula-UP</a>，在一个 Linux 机器上同时启动一个 Nebula Graph 核心和它的可视化图探索工具 <a href="https://docs.nebula-graph.com.cn/2.6.1/nebula-studio/about-studio/st-ug-what-is-graph-studio/" target="_blank" rel="noopener noreffer">Nebula Graph Studio</a>。</p>
<p>本文假设我们使用 Nebula-UP 来部署集群，它非常简单，只需要一行：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">curl -fsSL nebula-up.siwei.io/install.sh <span class="p">|</span> bash
</code></pre></td></tr></table>
</div>
</div><p>详细信息可以参考 <a href="https://siwei.io/nebula-up/" target="_blank" rel="noopener noreffer">Nebula-UP</a>。</p>
</blockquote>
<p>前边我们也提到了，我们引用的数据集是作者生成的，生成器（可以按需生成任意规模随机数据集）代码和一份示例的数据在 GitHub 上：</p>
<blockquote>
<p>数据集生成器：https://github.com/wey-gu/nebula-shareholding-example</p>
<p>示例数据：https://github.com/wey-gu/nebula-shareholding-example/tree/main/data_sample</p>
</blockquote>
<p>另外，我还准备好了一份 nebula-importer 的配置文件，在同一个 repo 之下的<a href="https://github.com/wey-gu/nebula-shareholding-example/blob/main/nebula-importer.yaml" target="_blank" rel="noopener noreffer">这里</a>。</p>
<p>这里，只需要执行如下命令行就可以开始数据导入了：</p>
<blockquote>
<p>注意，在写本文的时候，nebula 的新版本是 2.6.1，这里对应的 nebula-importer 是 v2.6.0，如果您出现导入错误可能是版本不匹配，可以相应调整下边命令中的版本号。</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">git clone https://github.com/wey-gu/nebula-shareholding-example
cp -r data_sample /tmp/data
cp nebula-importer.yaml /tmp/data/
docker run --rm -ti <span class="se">\
</span><span class="se"></span>    --network<span class="o">=</span>nebula-docker-compose_nebula-net <span class="se">\
</span><span class="se"></span>    -v /tmp/data:/root <span class="se">\
</span><span class="se"></span>    vesoft/nebula-importer:v2.6.0 <span class="se">\
</span><span class="se"></span>    --config /root/nebula-importer.yaml
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>你知道吗？TL;DR</p>
<p>实际上，这份 importer 的<a href="https://github.com/wey-gu/nebula-shareholding-example/blob/main/nebula-importer.yaml" target="_blank" rel="noopener noreffer">配置</a>里帮我们做了 Nebula Graph 之中的图建模的操作，它们的指令在下边，我们不需要手动去执行了。</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="k">CREATE</span><span class="w"> </span><span class="k">SPACE</span><span class="w"> </span><span class="k">IF</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">EXISTS</span><span class="w"> </span><span class="n">shareholding</span><span class="p">(</span><span class="n">partition_num</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span><span class="w"> </span><span class="n">replica_factor</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="n">vid_type</span><span class="o">=</span><span class="n">FIXED_STRING</span><span class="p">(</span><span class="mi">10</span><span class="p">));</span><span class="w">
</span><span class="w"></span><span class="n">USE</span><span class="w"> </span><span class="n">shareholding</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="n">person</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="n">string</span><span class="p">);</span><span class="w">
</span><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="n">corp</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="n">string</span><span class="p">);</span><span class="w">
</span><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="k">INDEX</span><span class="w"> </span><span class="n">person_name</span><span class="w"> </span><span class="k">on</span><span class="w"> </span><span class="n">person</span><span class="p">(</span><span class="n">name</span><span class="p">(</span><span class="mi">20</span><span class="p">));</span><span class="w">
</span><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="k">INDEX</span><span class="w"> </span><span class="n">corp_name</span><span class="w"> </span><span class="k">on</span><span class="w"> </span><span class="n">corp</span><span class="p">(</span><span class="n">name</span><span class="p">(</span><span class="mi">20</span><span class="p">));</span><span class="w">
</span><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">role_as</span><span class="p">(</span><span class="k">role</span><span class="w"> </span><span class="n">string</span><span class="p">);</span><span class="w">
</span><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">is_branch_of</span><span class="p">();</span><span class="w">
</span><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">hold_share</span><span class="p">(</span><span class="k">share</span><span class="w"> </span><span class="nb">float</span><span class="p">);</span><span class="w">
</span><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">reletive_with</span><span class="p">(</span><span class="n">degree</span><span class="w"> </span><span class="nb">int</span><span class="p">);</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><h2 id="图库中查询数据">图库中查询数据</h2>
<blockquote>
<p>Tips: 你知道吗，你也可以无需部署安装，通过 <a href="https://nebula-graph.com.cn/demo/" target="_blank" rel="noopener noreffer">Nebula-Playground</a> 之中，找到股权穿透来在线访问同一份数据集。</p>
</blockquote>
<p>我们可以借助  <a href="https://docs.nebula-graph.com.cn/2.6.1/nebula-studio/about-studio/st-ug-what-is-graph-studio/" target="_blank" rel="noopener noreffer">Nebula Graph Studio</a> 来访问数据，访问我们部署 Nebula-UP 的服务器地址的 7001 端口就可以了：</p>
<p>假设服务器地址为 <code>192.168.8.127</code>，则有：</p>
<ul>
<li>Nebula Studio 地址：<code>192.168.8.127:7001</code></li>
<li>Nebula Graph 地址：<code>192.168.8.127:9669</code></li>
<li>默认用户名：<code>root</code></li>
<li>默认密码：<code>nebula</code></li>
</ul>
<p>访问 Nebula Studio：</p>
<p></p>
<p>选择图空间: Shareholding</p>
<p></p>
<p>之后，我们就可以在里边探索比如一个公司的三跳以内的股权穿透，具体的操作可以参考：<a href="https://nebula-graph.com.cn/demo/shared-holding/" target="_blank" rel="noopener noreffer">股权穿透在线 Playground 的介绍</a>：</p>
<p></p>
<h2 id="构建一个图谱系统">构建一个图谱系统</h2>
<blockquote>
<p>这部分的代码开源在 GitHub 上：</p>
<p><a href="https://github.com/wey-gu/nebula-corp-rel-search" target="_blank" rel="noopener noreffer">https://github.com/wey-gu/nebula-corp-rel-search</a></p>
<p>本项目的 Demo 也在 PyCon China 2021 上的演讲中有过展示：<a href="https://www.bilibili.com/video/BV12u411o7Y6" target="_blank" rel="noopener noreffer">视频地址</a></p>
</blockquote>
<p>在此基础之上，我们可以构建一个提供给终端用户来使用的股权查询系统了，我们已经有了图数据库作为这个图谱的存储引擎，理论上，如果业务允许，我们可以直接使用或者封装 Nebula Graph Studio 来提供服务，这完全是可行也是合规的，不过，有一些情况下，我们需要自己去实现界面、或者我们需要封装出一个 API 给上游（多端）提供图谱查询的功能。</p>
<p>为此，我为大家写了一个简单的实例项目，提供这样的服务，他的架构也很直接：</p>
<ul>
<li>前端接受用户要查询的穿透法人、公司，按需发请求给后端，并用 D3.js 将返回结果渲染为关系图</li>
<li>后端接受前端的 API 请求，将请求转换为 Graph DB 的查询，并返回前端期待的结果</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">  ┌───────────────┬───────────────┐
  │               │  Frontend     │
  │               │               │
  │    ┌──────────▼──────────┐    │
  │    │ Vue.JS              │    │
  │    │ D3.JS               │    │
  │    └──────────┬──────────┘    │
  │               │  Backend      │
  │    ┌──────────┴──────────┐    │
  │    │ Flask               │    │
  │    │ Nebula-Python       │    │
  │    └──────────┬──────────┘    │
  │               │  Graph Query  │
  │    ┌──────────▼──────────┐    │
  │    │ Graph Database      │    │
  │    └─────────────────────┘    │
  │                               │
  └───────────────────────────────┘
</code></pre></td></tr></table>
</div>
</div><h3 id="后端服务--图数据库">后端服务&ndash;&gt;图数据库</h3>
<blockquote>
<p>详细的数据格式分析大家可以参考<a href="https://github.com/wey-gu/nebula-corp-rel-search#data-from-backend-side" target="_blank" rel="noopener noreffer">这里</a></p>
</blockquote>
<h4 id="查询语句">查询语句</h4>
<p>我们假设用户请求的实体是 <code>c_132</code> ，那么请求 1 到 3 步的关系穿透的语法是：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">MATCH p=(v)-[e:hold_share|:is_branch_of|:reletive_with|:role_as*1..3]-(v2) \
WHERE id(v) IN [&#34;c_132&#34;] RETURN p LIMIT 100
</code></pre></td></tr></table>
</div>
</div><p>这里边 <code>()</code>包裹的是图之中的点，而<code>[]</code> 包裹的则是点之间的关系：边，所以：</p>
<p><code>(v)-[e:hold_share|:is_branch_of|:reletive_with|:role_as*1..3]-(v2)</code> 之中的：</p>
<p><code>(v)-[xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx]-(v2)</code>应该比较好理解，意思是从 <code>v</code> 到<code>v2</code> 做拓展。</p>
<p>现在我们介绍中间<code>[]</code>包裹的部分，这里，它的语义是：经由四种类型的边（<code>:</code>之后的是边的类型，<code>|</code>代表或者）通过可变的跳数：<code>*1..3</code> （一跳到三跳）。</p>
<p>所以，简单来说整理看开，我们的拓展的路径是：从点 <code>v</code> 开始，经由四种关系一到三跳拓展到点<code>v2</code>，返回整个拓展路径 <code>p</code>，限制 100 个路径结果，其中 <code>v</code> 是 <code>c_132</code>。</p>
<h4 id="nebula-python-client-sdk">Nebula Python Client/ SDK</h4>
<p>我们已经知道了查询语句的语法，那么就只需要在后端程序里根据请求、通过图数据库的客户端来发出查询请求，并处理返回结构就好了。在今天的例子中，我选择使用 Python 来实现后端的逻辑，所以我用了 Nebula-python 这个库，它是 Nebula 的 Python Client。</p>
<blockquote>
<p>你知道么？截至到现在，Nebula 在 GitHub 上有 Java，GO，Python，C++，Spark，Flink，Rust（未GA），NodeJS（未GA） 的客户端支持，更多的语言的客户端也会慢慢被发布哦。</p>
</blockquote>
<p>下边是一个 Python Client 执行一个查询并返回结果的例子，值得注意的是，在我实现这个代码的时候，Nebula Python 尚未支持返回 JSON （通过<code>session.execute_json()</code>）结果，如果你要实现自己的代码，我非常推荐试试 JSON 哈，就可以不用从对象中一点点取数据了，不过借助 iPython/IDLE 这种 <code>REPL</code>，快速了解返回对象的结构也没有那么麻烦。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">$</span> <span class="n">python3</span> <span class="o">-</span><span class="n">m</span> <span class="n">pip</span> <span class="n">install</span> <span class="n">nebula2</span><span class="o">-</span><span class="n">python</span><span class="o">==</span><span class="mf">2.5.0</span> <span class="c1"># 注意这里我引用旧的记录，它是 2.5.0，</span>
<span class="err">$</span> <span class="n">ipython</span>
<span class="n">In</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="kn">from</span> <span class="nn">nebula2.gclient.net</span> <span class="kn">import</span> <span class="n">ConnectionPool</span>
<span class="n">In</span> <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="kn">from</span> <span class="nn">nebula2.Config</span> <span class="kn">import</span> <span class="n">Config</span>
<span class="n">In</span> <span class="p">[</span><span class="mi">3</span><span class="p">]:</span> <span class="n">config</span> <span class="o">=</span> <span class="n">Config</span><span class="p">()</span>
   <span class="o">...</span><span class="p">:</span> <span class="n">config</span><span class="o">.</span><span class="n">max_connection_pool_size</span> <span class="o">=</span> <span class="mi">10</span>
   <span class="o">...</span><span class="p">:</span> <span class="c1"># init connection pool</span>
   <span class="o">...</span><span class="p">:</span> <span class="n">connection_pool</span> <span class="o">=</span> <span class="n">ConnectionPool</span><span class="p">()</span>
   <span class="o">...</span><span class="p">:</span> <span class="c1"># if the given servers are ok, return true, else return false</span>
   <span class="o">...</span><span class="p">:</span> <span class="n">ok</span> <span class="o">=</span> <span class="n">connection_pool</span><span class="o">.</span><span class="n">init</span><span class="p">([(</span><span class="s1">&#39;192.168.8.137&#39;</span><span class="p">,</span> <span class="mi">9669</span><span class="p">)],</span> <span class="n">config</span><span class="p">)</span>
   <span class="o">...</span><span class="p">:</span> <span class="n">session</span> <span class="o">=</span> <span class="n">connection_pool</span><span class="o">.</span><span class="n">get_session</span><span class="p">(</span><span class="s1">&#39;root&#39;</span><span class="p">,</span> <span class="s1">&#39;nebula&#39;</span><span class="p">)</span>
<span class="p">[</span><span class="mi">2021</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">13</span> <span class="mi">13</span><span class="p">:</span><span class="mi">44</span><span class="p">:</span><span class="mi">24</span><span class="p">,</span><span class="mi">242</span><span class="p">]:</span><span class="n">Get</span> <span class="n">connection</span> <span class="n">to</span> <span class="p">(</span><span class="s1">&#39;192.168.8.137&#39;</span><span class="p">,</span> <span class="mi">9669</span><span class="p">)</span>

<span class="n">In</span> <span class="p">[</span><span class="mi">4</span><span class="p">]:</span> <span class="n">resp</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&#34;use shareholding&#34;</span><span class="p">)</span>
<span class="n">In</span> <span class="p">[</span><span class="mi">5</span><span class="p">]:</span> <span class="n">query</span> <span class="o">=</span> <span class="s1">&#39;&#39;&#39;
</span><span class="s1">   ...: MATCH p=(v)-[e:hold_share|:is_branch_of|:reletive_with|:role_as*1..3]-(v2) </span><span class="se">\
</span><span class="se"></span><span class="s1">   ...: WHERE id(v) IN [&#34;c_132&#34;] RETURN p LIMIT 100
</span><span class="s1">   ...: &#39;&#39;&#39;</span>
<span class="n">In</span> <span class="p">[</span><span class="mi">6</span><span class="p">]:</span> <span class="n">resp</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">query</span><span class="p">)</span> <span class="c1"># Note: after nebula graph 2.6.0, we could use execute_json as well</span>

<span class="n">In</span> <span class="p">[</span><span class="mi">7</span><span class="p">]:</span> <span class="n">resp</span><span class="o">.</span><span class="n">col_size</span><span class="p">()</span>
<span class="n">Out</span><span class="p">[</span><span class="mi">7</span><span class="p">]:</span> <span class="mi">1</span>

<span class="n">In</span> <span class="p">[</span><span class="mi">9</span><span class="p">]:</span> <span class="n">resp</span><span class="o">.</span><span class="n">row_size</span><span class="p">()</span>
<span class="n">Out</span><span class="p">[</span><span class="mi">10</span><span class="p">]:</span> <span class="mi">100</span>
</code></pre></td></tr></table>
</div>
</div><p>我们往下分析看看，我们知道这个请求本质上结果是路径，它有一个 <code>.nodes()</code> 方法和 <code>.relationships()</code>方法来获得路径上的点和边：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">In</span> <span class="p">[</span><span class="mi">11</span><span class="p">]:</span> <span class="n">p</span><span class="o">=</span><span class="n">resp</span><span class="o">.</span><span class="n">row_values</span><span class="p">(</span><span class="mi">22</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">as_path</span><span class="p">()</span>

<span class="n">In</span> <span class="p">[</span><span class="mi">12</span><span class="p">]:</span> <span class="n">p</span><span class="o">.</span><span class="n">nodes</span><span class="p">()</span>
<span class="n">Out</span><span class="p">[</span><span class="mi">12</span><span class="p">]:</span>
<span class="p">[(</span><span class="s2">&#34;c_132&#34;</span> <span class="p">:</span><span class="n">corp</span><span class="p">{</span><span class="n">name</span><span class="p">:</span> <span class="s2">&#34;Chambers LLC&#34;</span><span class="p">}),</span>
 <span class="p">(</span><span class="s2">&#34;p_4000&#34;</span> <span class="p">:</span><span class="n">person</span><span class="p">{</span><span class="n">name</span><span class="p">:</span> <span class="s2">&#34;Colton Bailey&#34;</span><span class="p">})]</span>

<span class="n">In</span> <span class="p">[</span><span class="mi">13</span><span class="p">]:</span> <span class="n">p</span><span class="o">.</span><span class="n">relationships</span><span class="p">()</span>
<span class="n">Out</span><span class="p">[</span><span class="mi">13</span><span class="p">]:</span> <span class="p">[(</span><span class="s2">&#34;p_4000&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">role_as</span><span class="o">@</span><span class="mi">0</span><span class="p">{</span><span class="n">role</span><span class="p">:</span> <span class="s2">&#34;Editorial assistant&#34;</span><span class="p">}]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;c_132&#34;</span><span class="p">)]</span>
</code></pre></td></tr></table>
</div>
</div><p>对于边来说有这些方法 <code>.edge_name()</code>, <code>.properties()</code>, <code>.start_vertex_id()</code>, <code>.end_vertex_id()</code>，这里 edge_name 是获得边的类型。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">In</span> <span class="p">[</span><span class="mi">14</span><span class="p">]:</span> <span class="n">rel</span><span class="o">=</span><span class="n">p</span><span class="o">.</span><span class="n">relationships</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>

<span class="n">In</span> <span class="p">[</span><span class="mi">15</span><span class="p">]:</span> <span class="n">rel</span>
<span class="n">Out</span><span class="p">[</span><span class="mi">15</span><span class="p">]:</span> <span class="p">(</span><span class="s2">&#34;p_4000&#34;</span><span class="p">)</span><span class="o">-</span><span class="p">[:</span><span class="n">role_as</span><span class="o">@</span><span class="mi">0</span><span class="p">{</span><span class="n">role</span><span class="p">:</span> <span class="s2">&#34;Editorial assistant&#34;</span><span class="p">}]</span><span class="o">-&gt;</span><span class="p">(</span><span class="s2">&#34;c_132&#34;</span><span class="p">)</span>

<span class="n">In</span> <span class="p">[</span><span class="mi">16</span><span class="p">]:</span> <span class="n">rel</span><span class="o">.</span><span class="n">edge_name</span><span class="p">()</span>
<span class="n">Out</span><span class="p">[</span><span class="mi">16</span><span class="p">]:</span> <span class="s1">&#39;role_as&#39;</span>

<span class="n">In</span> <span class="p">[</span><span class="mi">17</span><span class="p">]:</span> <span class="n">rel</span><span class="o">.</span><span class="n">properties</span><span class="p">()</span>
<span class="n">Out</span><span class="p">[</span><span class="mi">17</span><span class="p">]:</span> <span class="p">{</span><span class="s1">&#39;role&#39;</span><span class="p">:</span> <span class="s2">&#34;Editorial assistant&#34;</span><span class="p">}</span>

<span class="n">In</span> <span class="p">[</span><span class="mi">18</span><span class="p">]:</span> <span class="n">rel</span><span class="o">.</span><span class="n">start_vertex_id</span><span class="p">()</span>
<span class="n">Out</span><span class="p">[</span><span class="mi">18</span><span class="p">]:</span> <span class="s2">&#34;p_4000&#34;</span>

<span class="n">In</span> <span class="p">[</span><span class="mi">19</span><span class="p">]:</span> <span class="n">rel</span><span class="o">.</span><span class="n">end_vertex_id</span><span class="p">()</span>
<span class="n">Out</span><span class="p">[</span><span class="mi">19</span><span class="p">]:</span> <span class="s2">&#34;c_132&#34;</span>
</code></pre></td></tr></table>
</div>
</div><p>对于点来说，可以用到这些方法 <code>.tags()</code>, <code>properties</code>, <code>get_id()</code>，这里边 tags 是获得点的类型，它在 Nebula 里叫标签<code>tag</code>。</p>
<p>这些概念可以在<a href="https://docs.nebula-graph.com.cn/2.6.1/1.introduction/2.data-model/" target="_blank" rel="noopener noreffer">文档里</a>获得更详细的解释。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">In</span> <span class="p">[</span><span class="mi">20</span><span class="p">]:</span> <span class="n">node</span><span class="o">=</span><span class="n">p</span><span class="o">.</span><span class="n">nodes</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>

<span class="n">In</span> <span class="p">[</span><span class="mi">21</span><span class="p">]:</span> <span class="n">node</span><span class="o">.</span><span class="n">tags</span><span class="p">()</span>
<span class="n">Out</span><span class="p">[</span><span class="mi">21</span><span class="p">]:</span> <span class="p">[</span><span class="s1">&#39;corp&#39;</span><span class="p">]</span>

<span class="n">In</span> <span class="p">[</span><span class="mi">22</span><span class="p">]:</span> <span class="n">node</span><span class="o">.</span><span class="n">properties</span><span class="p">(</span><span class="s1">&#39;corp&#39;</span><span class="p">)</span>
<span class="n">Out</span><span class="p">[</span><span class="mi">22</span><span class="p">]:</span> <span class="p">{</span><span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s2">&#34;Chambers LLC&#34;</span><span class="p">}</span>

<span class="n">In</span> <span class="p">[</span><span class="mi">23</span><span class="p">]:</span> <span class="n">node</span><span class="o">.</span><span class="n">get_id</span><span class="p">()</span>
<span class="n">Out</span><span class="p">[</span><span class="mi">23</span><span class="p">]:</span> <span class="s2">&#34;c_132&#34;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="前端渲染点边为图">前端渲染点边为图</h3>
<blockquote>
<p>详细的分析大家也可以参考<a href="https://github.com/wey-gu/nebula-corp-rel-search#data-visualization" target="_blank" rel="noopener noreffer">这里</a></p>
</blockquote>
<p>为了方便实现，我们采用了 Vue.js 和 <a href="https://github.com/ChenCyl/vue-network-d3" target="_blank" rel="noopener noreffer">vue-network-d3</a>（D3 的 Vue Binding）。</p>
<p>通过 vue-network-d3 的抽象，能看出来喂给他这样的数据，就可以把点边信息渲染成很好看的图</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">nodes: [
        {&#34;id&#34;: &#34;c_132&#34;, &#34;name&#34;: &#34;Chambers LLC&#34;, &#34;tag&#34;: &#34;corp&#34;},
        {&#34;id&#34;: &#34;p_4000&#34;, &#34;name&#34;: &#34;Colton Bailey&#34;, &#34;tag&#34;: &#34;person&#34;}],
relationships: [
        {&#34;source&#34;: &#34;p_4000&#34;, &#34;target&#34;: &#34;c_132&#34;, &#34;properties&#34;: { &#34;role&#34;: &#34;Editorial assistant&#34; }, &#34;edge&#34;: &#34;role_as&#34;}]
</code></pre></td></tr></table>
</div>
</div><p></p>
<h3 id="前端--后端">前端&lt;&ndash;后端</h3>
<blockquote>
<p>详细信息可以参考<a href="https://github.com/wey-gu/nebula-corp-rel-search#the-data-construction-in-back-end" target="_blank" rel="noopener noreffer">这里</a></p>
</blockquote>
<p>我们从 D3 的初步研究上可以知道，后端只需要返回如下的 JSON 格式数据就好了</p>
<p>Nodes:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="p">[{</span><span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="s2">&#34;c_132&#34;</span><span class="p">,</span> <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Chambers LLC&#34;</span><span class="p">,</span> <span class="nt">&#34;tag&#34;</span><span class="p">:</span> <span class="s2">&#34;corp&#34;</span><span class="p">},</span>
 <span class="p">{</span><span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="s2">&#34;p_4000&#34;</span><span class="p">,</span> <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Colton Bailey&#34;</span><span class="p">,</span> <span class="nt">&#34;tag&#34;</span><span class="p">:</span> <span class="s2">&#34;person&#34;</span><span class="p">}]</span>
</code></pre></td></tr></table>
</div>
</div><p>Relationships:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="p">[{</span><span class="nt">&#34;source&#34;</span><span class="p">:</span> <span class="s2">&#34;p_4000&#34;</span><span class="p">,</span> <span class="nt">&#34;target&#34;</span><span class="p">:</span> <span class="s2">&#34;c_132&#34;</span><span class="p">,</span> <span class="nt">&#34;properties&#34;</span><span class="p">:</span> <span class="p">{</span> <span class="nt">&#34;role&#34;</span><span class="p">:</span> <span class="s2">&#34;Editorial assistant&#34;</span> <span class="p">},</span> <span class="nt">&#34;edge&#34;</span><span class="p">:</span> <span class="s2">&#34;role_as&#34;</span><span class="p">},</span>
 <span class="p">{</span><span class="nt">&#34;source&#34;</span><span class="p">:</span> <span class="s2">&#34;p_1039&#34;</span><span class="p">,</span> <span class="nt">&#34;target&#34;</span><span class="p">:</span> <span class="s2">&#34;c_132&#34;</span><span class="p">,</span> <span class="nt">&#34;properties&#34;</span><span class="p">:</span> <span class="p">{</span> <span class="nt">&#34;share&#34;</span><span class="p">:</span> <span class="s2">&#34;3.0&#34;</span> <span class="p">},</span> <span class="nt">&#34;edge&#34;</span><span class="p">:</span> <span class="s2">&#34;hold_share&#34;</span><span class="p">}]</span>
</code></pre></td></tr></table>
</div>
</div><p>于是，，结合前边我们用 iPython 分析 Python 返回结果看，这个逻辑大概是：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">make_graph_response</span><span class="p">(</span><span class="n">resp</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">dict</span><span class="p">:</span>
    <span class="n">nodes</span><span class="p">,</span> <span class="n">relationships</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(),</span> <span class="nb">list</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">row_index</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">row_size</span><span class="p">()):</span>
        <span class="n">path</span> <span class="o">=</span> <span class="n">resp</span><span class="o">.</span><span class="n">row_values</span><span class="p">(</span><span class="n">row_index</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">as_path</span><span class="p">()</span>
        <span class="n">_nodes</span> <span class="o">=</span> <span class="p">[</span>
            <span class="p">{</span>
                <span class="s2">&#34;id&#34;</span><span class="p">:</span> <span class="n">node</span><span class="o">.</span><span class="n">get_id</span><span class="p">(),</span> <span class="s2">&#34;tag&#34;</span><span class="p">:</span> <span class="n">node</span><span class="o">.</span><span class="n">tags</span><span class="p">()[</span><span class="mi">0</span><span class="p">],</span>
                <span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="n">node</span><span class="o">.</span><span class="n">properties</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">tags</span><span class="p">()[</span><span class="mi">0</span><span class="p">])</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;name&#34;</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">)</span>
                <span class="p">}</span>
                <span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="n">path</span><span class="o">.</span><span class="n">nodes</span><span class="p">()</span>
        <span class="p">]</span>
        <span class="n">nodes</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">_nodes</span><span class="p">)</span>
        <span class="n">_relationships</span> <span class="o">=</span> <span class="p">[</span>
            <span class="p">{</span>
                <span class="s2">&#34;source&#34;</span><span class="p">:</span> <span class="n">rel</span><span class="o">.</span><span class="n">start_vertex_id</span><span class="p">(),</span>
                <span class="s2">&#34;target&#34;</span><span class="p">:</span> <span class="n">rel</span><span class="o">.</span><span class="n">end_vertex_id</span><span class="p">(),</span>
                <span class="s2">&#34;properties&#34;</span><span class="p">:</span> <span class="n">rel</span><span class="o">.</span><span class="n">properties</span><span class="p">(),</span>
                <span class="s2">&#34;edge&#34;</span><span class="p">:</span> <span class="n">rel</span><span class="o">.</span><span class="n">edge_name</span><span class="p">()</span>
                <span class="p">}</span>
                <span class="k">for</span> <span class="n">rel</span> <span class="ow">in</span> <span class="n">path</span><span class="o">.</span><span class="n">relationships</span><span class="p">()</span>
        <span class="p">]</span>
        <span class="n">relationships</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">_relationships</span><span class="p">)</span>
    <span class="k">return</span> <span class="p">{</span><span class="s2">&#34;nodes&#34;</span><span class="p">:</span> <span class="n">nodes</span><span class="p">,</span> <span class="s2">&#34;relationships&#34;</span><span class="p">:</span> <span class="n">relationships</span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>前端到后端的通信是 HTTP ，所以我们可以借助 Flask，把这个函数封装成一个 RESTful API：</p>
<p>前端程序通过 HTTP POST 到 <code>/api</code></p>
<blockquote>
<p>参考<a href="https://github.com/wey-gu/nebula-corp-rel-search#the-flask-app" target="_blank" rel="noopener noreffer">这里</a></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span> <span class="n">jsonify</span><span class="p">,</span> <span class="n">request</span>



<span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="vm">__name__</span><span class="p">)</span>


<span class="nd">@app</span><span class="o">.</span><span class="n">route</span><span class="p">(</span><span class="s2">&#34;/&#34;</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">root</span><span class="p">():</span>
    <span class="k">return</span> <span class="s2">&#34;Hey There?&#34;</span>


<span class="nd">@app</span><span class="o">.</span><span class="n">route</span><span class="p">(</span><span class="s2">&#34;/api&#34;</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;POST&#34;</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">api</span><span class="p">():</span>
    <span class="n">request_data</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">get_json</span><span class="p">()</span>
    <span class="n">entity</span> <span class="o">=</span> <span class="n">request_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;entity&#34;</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">entity</span><span class="p">:</span>
        <span class="n">resp</span> <span class="o">=</span> <span class="n">query_shareholding</span><span class="p">(</span><span class="n">entity</span><span class="p">)</span>
        <span class="n">data</span> <span class="o">=</span> <span class="n">make_graph_response</span><span class="p">(</span><span class="n">resp</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">data</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span> <span class="c1"># tbd</span>
    <span class="k">return</span> <span class="n">jsonify</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">parse_nebula_graphd_endpoint</span><span class="p">():</span>
    <span class="n">ng_endpoints_str</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="o">.</span><span class="n">get</span><span class="p">(</span>
        <span class="s1">&#39;NG_ENDPOINTS&#39;</span><span class="p">,</span> <span class="s1">&#39;127.0.0.1:9669,&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&#34;,&#34;</span><span class="p">)</span>
    <span class="n">ng_endpoints</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">endpoint</span> <span class="ow">in</span> <span class="n">ng_endpoints_str</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">endpoint</span><span class="p">:</span>
            <span class="n">parts</span> <span class="o">=</span> <span class="n">endpoint</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&#34;:&#34;</span><span class="p">)</span>  <span class="c1"># we dont consider IPv6 now</span>
            <span class="n">ng_endpoints</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">parts</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nb">int</span><span class="p">(</span><span class="n">parts</span><span class="p">[</span><span class="mi">1</span><span class="p">])))</span>
    <span class="k">return</span> <span class="n">ng_endpoints</span>

<span class="k">def</span> <span class="nf">query_shareholding</span><span class="p">(</span><span class="n">entity</span><span class="p">):</span>
    <span class="n">query_string</span> <span class="o">=</span> <span class="p">(</span>
        <span class="sa">f</span><span class="s2">&#34;USE shareholding; &#34;</span>
        <span class="sa">f</span><span class="s2">&#34;MATCH p=(v)-[e:hold_share|:is_branch_of|:reletive_with|:role_as*1..3]-(v2) &#34;</span>
        <span class="sa">f</span><span class="s2">&#34;WHERE id(v) IN [&#39;</span><span class="si">{</span> <span class="n">entity</span> <span class="si">}</span><span class="s2">&#39;] RETURN p LIMIT 100&#34;</span>
    <span class="p">)</span>
    <span class="n">session</span> <span class="o">=</span> <span class="n">connection_pool</span><span class="o">.</span><span class="n">get_session</span><span class="p">(</span><span class="s1">&#39;root&#39;</span><span class="p">,</span> <span class="s1">&#39;nebula&#39;</span><span class="p">)</span>
    <span class="n">resp</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">query_string</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">resp</span>
</code></pre></td></tr></table>
</div>
</div><p>这个请求的结果则是前边前端期待的 JSON，像这样：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">curl --header <span class="s2">&#34;Content-Type: application/json&#34;</span> <span class="se">\
</span><span class="se"></span>     --request POST <span class="se">\
</span><span class="se"></span>     --data <span class="s1">&#39;{&#34;entity&#34;: &#34;c_132&#34;}&#39;</span> <span class="se">\
</span><span class="se"></span>     http://192.168.10.14:5000/api <span class="p">|</span> jq

<span class="o">{</span>
  <span class="s2">&#34;nodes&#34;</span>: <span class="o">[</span>
    <span class="o">{</span>
      <span class="s2">&#34;id&#34;</span>: <span class="s2">&#34;c_132&#34;</span>,
      <span class="s2">&#34;name&#34;</span>: <span class="s2">&#34;\&#34;Chambers LLC\&#34;&#34;</span>,
      <span class="s2">&#34;tag&#34;</span>: <span class="s2">&#34;corp&#34;</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">&#34;id&#34;</span>: <span class="s2">&#34;c_245&#34;</span>,
      <span class="s2">&#34;name&#34;</span>: <span class="s2">&#34;\&#34;Thompson-King\&#34;&#34;</span>,
      <span class="s2">&#34;tag&#34;</span>: <span class="s2">&#34;corp&#34;</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">&#34;id&#34;</span>: <span class="s2">&#34;c_132&#34;</span>,
      <span class="s2">&#34;name&#34;</span>: <span class="s2">&#34;\&#34;Chambers LLC\&#34;&#34;</span>,
      <span class="s2">&#34;tag&#34;</span>: <span class="s2">&#34;corp&#34;</span>
    <span class="o">}</span>,
...
    <span class="o">}</span>
  <span class="o">]</span>,
  <span class="s2">&#34;relationships&#34;</span>: <span class="o">[</span>
    <span class="o">{</span>
      <span class="s2">&#34;edge&#34;</span>: <span class="s2">&#34;hold_share&#34;</span>,
      <span class="s2">&#34;properties&#34;</span>: <span class="s2">&#34;{&#39;share&#39;: 0.0}&#34;</span>,
      <span class="s2">&#34;source&#34;</span>: <span class="s2">&#34;c_245&#34;</span>,
      <span class="s2">&#34;target&#34;</span>: <span class="s2">&#34;c_132&#34;</span>
    <span class="o">{</span>
      <span class="s2">&#34;edge&#34;</span>: <span class="s2">&#34;hold_share&#34;</span>,
      <span class="s2">&#34;properties&#34;</span>: <span class="s2">&#34;{&#39;share&#39;: 9.0}&#34;</span>,
      <span class="s2">&#34;source&#34;</span>: <span class="s2">&#34;p_1767&#34;</span>,
      <span class="s2">&#34;target&#34;</span>: <span class="s2">&#34;c_132&#34;</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">&#34;edge&#34;</span>: <span class="s2">&#34;hold_share&#34;</span>,
      <span class="s2">&#34;properties&#34;</span>: <span class="s2">&#34;{&#39;share&#39;: 11.0}&#34;</span>,
      <span class="s2">&#34;source&#34;</span>: <span class="s2">&#34;p_1997&#34;</span>,
      <span class="s2">&#34;target&#34;</span>: <span class="s2">&#34;c_132&#34;</span>
    <span class="o">}</span>,
...
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">&#34;edge&#34;</span>: <span class="s2">&#34;reletive_with&#34;</span>,
      <span class="s2">&#34;properties&#34;</span>: <span class="s2">&#34;{&#39;degree&#39;: 51}&#34;</span>,
      <span class="s2">&#34;source&#34;</span>: <span class="s2">&#34;p_7283&#34;</span>,
      <span class="s2">&#34;target&#34;</span>: <span class="s2">&#34;p_4723&#34;</span>
    <span class="o">}</span>
  <span class="o">]</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="放到一起">放到一起</h3>
<p>项目的代码都在 GitHub 上，最后其实只有一两百行的代码，把所有东西拼起来之后的代码是：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">├── README.md         <span class="c1"># You could find Design Logs here</span>
├── corp-rel-backend
│   └── app.py        <span class="c1"># Flask App to handle Requst and calls GDB</span>
├── corp-rel-frontend
│   └── src
│       ├── App.vue
│       └── main.js   <span class="c1"># Vue App to call Flask App and Renders Graph</span>
└── requirements.txt
</code></pre></td></tr></table>
</div>
</div><h3 id="最终效果">最终效果</h3>
<p>我们做出来了一个简陋但是足够具有参考性的小系统，它接受一个用户输入的实体的 ID，再回车之后：</p>
<ul>
<li>前端程序把请求发给后端</li>
<li>后端拼接 Nebula Graph 的查询语句，通过 Nebula Python 客户端请求 Nebula Graph</li>
<li>Nebula Graph 接受请求做出穿透查询，返回结构给后端</li>
<li>后端将结果构建成前端 D3 接受的格式，传给前端</li>
<li>前端接收到图结构的数据，渲染股权穿透的数据如下：</li>
</ul>
<video width="800" controls>
  <source src="demo.mov" type="video/mp4"> 
</video>
<h2 id="总结">总结</h2>
<p>现在，我们知道得益于图数据库的设计，在它上边构建一个方便的股权分析系统非常自然、高效，我们或者利用图数据库的图探索可视化能力、或者自己搭建，可以为用户提供非常高效、直观的多跳股权穿透分析。</p>
<p>如果你想了解更多关于分布式图数据库的知识，欢迎关注 Nebula Graph 这个开源项目，它已经被国内很多团队、公司认可选为图时代数据技术存储层的利器，大家可以访问<a href="https://nebula-graph.com.cn/cases" target="_blank" rel="noopener noreffer">这里</a>，或者<a href="https://nebula-graph.com.cn/posts/" target="_blank" rel="noopener noreffer">这里</a>，了解更多相关的分享和文章。</p>
<p>未来，我会给大家分享更多图数据库相关的文章、视频和开源示例项目思路分享和教程，欢迎大家关注我的网站: siwei.io。</p>
<blockquote>
<p>题图版权：<a href="https://unsplash.com/photos/oyXis2kALVg" target="_blank" rel="noopener noreffer">fabioha</a></p>
</blockquote>]]></description>
</item><item>
    <title>Nebula Siwi，基于图数据库的智能问答助手</title>
    <link>https://siwei.io/nebula-siwi/</link>
    <pubDate>Sat, 18 Sep 2021 13:53:20 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/nebula-siwi/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>从 0 到 1 打造一个基于图数据库的智能问答助手。</p>
<p>a PoC of Dialog System With Graph Database Backed Knowledge Graph.</p>
</blockquote>
<p>Related GitHub Repo: <a href="https://github.com/wey-gu/nebula-siwi/" target="_blank" rel="noopener noreffer">https://github.com/wey-gu/nebula-siwi/</a></p>
<blockquote>
<p>这个项目我也做成了互动教程，可以按照这里的步骤搭建起来 👉🏻 <a href="https://siwei.io/cources/" target="_blank" rel="noopener noreffer">https://siwei.io/cources/</a></p>
<p>I created the Katacoda Interactive Env for this project 👉🏻 <a href="https://siwei.io/cources/" target="_blank" rel="noopener noreffer">https://siwei.io/cources/</a></p>
</blockquote>
<blockquote>
<p>您也可以在 Nebula Playground 上直接玩这个数据集啦：https://nebula-graph.com.cn/demo/</p>
<p>Now you can play with the data on Nebula Playground: <a href="https://nebula-graph.io/demo/" target="_blank" rel="noopener noreffer">https://nebula-graph.io/demo/</a></p>
</blockquote>
<h1 id="siwi-the-voice-assistant">Siwi the voice assistant</h1>
<p>Siwi (/ˈsɪwi/) is a PoC of Dialog System With Graph Database Backed Knowledge Graph.</p>
<p>For now, it&rsquo;s a demo for task-driven(not general purpose) dialog bots with KG(Knowledge Graph) leveraging Nebula Graph with the minimal/sample dataset from <a href="https://docs.nebula-graph.io/2.0.1/3.ngql-guide/1.nGQL-overview/1.overview/#basketballplayer" target="_blank" rel="noopener noreffer">Nebula Graph Manual</a>/ <a href="https://docs.nebula-graph.com.cn/2.0.1/3.ngql-guide/1.nGQL-overview/1.overview/#basketballplayer" target="_blank" rel="noopener noreffer">NG中文手册</a>.</p>
<blockquote>
<p>Tips: Now you can play with the graph online without installing yourself!</p>
<p><a href="https://playground.nebula-graph.io" target="_blank" rel="noopener noreffer">Nebula Playground</a> | <a href="https://playground.nebula-graph.com.cn" target="_blank" rel="noopener noreffer">Nebula Playground - China Mainland</a></p>
</blockquote>
<p>Supported queries:</p>
<p><code>relation</code>:</p>
<ul>
<li>What is the relationship between Yao Ming and Lakers?</li>
<li>How does Yao Ming and Lakers connected?</li>
</ul>
<p><code>serving</code>:</p>
<ul>
<li>Which team had Yao Ming served?</li>
</ul>
<p><code>friendship</code>:</p>
<ul>
<li>Whom does Tim Duncan follow?</li>
<li>Who are Yao Ming&rsquo;s friends?</li>
</ul>
<h2 id="deploy-and-try">Deploy and Try</h2>
<p>TBD (leveraging docker and nebula-up)</p>
<h2 id="how-does-it-work">How does it work?</h2>
<p>This is one of the most naive pipeline for a specific domain/ single purpose chat bot built on a Knowledge Graph.</p>
<h3 id="backend">Backend</h3>
<p></p>
<p>The Backend(Siwi API) is a Flask based API server:</p>
<ul>
<li>
<p>Flask API server takes questions in HTTP POST, and calls the bot API.</p>
</li>
<li>
<p>In bot API part there are classfier(Symentic Parsing, Intent Matching, Slot Filling), and question actors(Call corresponding actions to query Knowledge Graph with intents and slots).</p>
</li>
<li>
<p>Knowledge Graph is built on an Open-Source Graph Database: <a href="https://github.com/vesoft-inc/nebula-graph" target="_blank" rel="noopener noreffer">Nebula Graph</a></p>
</li>
</ul>
<h3 id="frontend">Frontend</h3>
<p></p>
<p>The Frontend is a VueJS Single Page Applicaiton(SPA):</p>
<ul>
<li>I reused a Vue Bot UI to showcase a chat window in this human-agent interaction, typing is supported.</li>
<li>In addtion, leverating Chrome&rsquo;s <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Speech_API/Using_the_Web_Speech_API" target="_blank" rel="noopener noreffer">Web Speech API</a>, a button to listen to human voice is introduced</li>
</ul>
<h3 id="a-query-flow">A Query Flow</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">┌────────────────┬──────────────────────────────────────┐
│                │                                      │
│                │  Speech                              │
│     ┌──────────▼──────────┐                           │
│     │            Frontend │   Siwi, /ˈsɪwi/           │
│     │ Web_Speech_API      │   A PoC of                │
│     │                     │   Dialog System           │
│     │ Vue.JS              │   With Graph Database     │
│     │                     │   Backed Knowledge Graph  │
│     └──────────┬──────────┘                           │
│                │  Sentence                            │
│                │                                      │
│   ┌────────────┼──────────────────────────────┐       │
│   │            │                              │       │
│   │            │              Backend         │       │
│   │ ┌──────────▼──────────┐                   │       │
│   │ │ Web API, Flask      │   ./app/          │       │
│   │ └──────────┬──────────┘                   │       │
│   │            │  Sentence    ./bot/          │       │
│   │ ┌──────────▼──────────┐                   │       │
│   │ │                     │                   │       │
│   │ │ Intent matching,    │   ./bot/classifier│       │
│   │ │ Symentic Processing │                   │       │
│   │ │                     │                   │       │
│   │ └──────────┬──────────┘                   │       │
│   │            │  Intent, Entities            │       │
│   │ ┌──────────▼──────────┐                   │       │
│   │ │                     │                   │       │
│   │ │ Intent Actor        │   ./bot/actions   │       │
│   │ │                     │                   │       │
│   └─┴──────────┬──────────┴───────────────────┘       │
│                │  Graph Query                         │
│     ┌──────────▼──────────┐                           │
│     │                     │                           │
│     │ Graph Database      │    Nebula Graph           │
│     │                     │                           │
│     └─────────────────────┘                           │
│                                                       │
│                                                       │
│                                                       │
└───────────────────────────────────────────────────────┘
</code></pre></td></tr></table>
</div>
</div><h3 id="source-code-tree">Source Code Tree</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">.
├── README.md
├── src
│   ├── siwi                        <span class="c1"># Siwi-API Backend</span>
│   │   ├── app                     <span class="c1"># Web Server, take HTTP requests and calls Bot API</span>
│   │   └── bot                     <span class="c1"># Bot API</span>
│   │       ├── actions             <span class="c1"># Take Intent, Slots, Query Knowledge Graph here</span>
│   │       ├── bot                 <span class="c1"># Entrypoint of the Bot API</span>
│   │       ├── classifier          <span class="c1"># Symentic Parsing, Intent Matching, Slot Filling</span>
│   │       └── <span class="nb">test</span>                <span class="c1"># Example Data Source as equivalent/mocked module</span>
│   └── siwi_frontend               <span class="c1"># Browser End</span>
│       ├── README.md
│       ├── package.json
│       └── src
│           ├── App.vue             <span class="c1"># Listening to user and pass Questions to Siwi-API</span>
│           └── main.js
└── wsgi.py
</code></pre></td></tr></table>
</div>
</div><h2 id="manually-run-components">Manually Run Components</h2>
<h3 id="backend-1">Backend</h3>
<p>Install and run.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># Install siwi backend</span>
python3 -m build

<span class="c1"># Configure Nebula Graph Endpoint</span>
<span class="nb">export</span> <span class="nv">NG_ENDPOINTS</span><span class="o">=</span>127.0.0.1:9669

<span class="c1"># Run Backend API server</span>
gunicorn --bind :5000 wsgi --workers <span class="m">1</span> --threads <span class="m">1</span> --timeout <span class="m">60</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>For OpenFunction/ KNative</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">docker build -t weygu/siwi-api .
docker run --rm --name siwi-api <span class="se">\
</span><span class="se"></span>     --env<span class="o">=</span><span class="nv">PORT</span><span class="o">=</span><span class="m">5000</span> <span class="se">\
</span><span class="se"></span>     --env<span class="o">=</span><span class="nv">NG_ENDPOINTS</span><span class="o">=</span>127.0.0.1:9669 <span class="se">\
</span><span class="se"></span>     --net<span class="o">=</span>host <span class="se">\
</span><span class="se"></span>     weygu/siwi-api
</code></pre></td></tr></table>
</div>
</div><p>Try it out Web API:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ curl --header <span class="s2">&#34;Content-Type: application/json&#34;</span> <span class="se">\
</span><span class="se"></span>       --request POST <span class="se">\
</span><span class="se"></span>       --data <span class="s1">&#39;{&#34;question&#34;: &#34;What is the relationship between Yao Ming and Lakers?&#34;}&#39;</span> <span class="se">\
</span><span class="se"></span>       http://192.168.8.128:5000/query <span class="p">|</span> jq

<span class="o">{</span>
  <span class="s2">&#34;answer&#34;</span>: <span class="s2">&#34;There are at least 23 relations between Yao Ming and Lakers, one relation path is: Yao Ming follows Shaquille O&#39;Neal serves Lakers.&#34;</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Call Bot Python API:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">nebula2.gclient.net</span> <span class="kn">import</span> <span class="n">ConnectionPool</span>
<span class="kn">from</span> <span class="nn">nebula2.Config</span> <span class="kn">import</span> <span class="n">Config</span>

<span class="c1"># define a config</span>
<span class="n">config</span> <span class="o">=</span> <span class="n">Config</span><span class="p">()</span>
<span class="n">config</span><span class="o">.</span><span class="n">max_connection_pool_size</span> <span class="o">=</span> <span class="mi">10</span>
<span class="c1"># init connection pool</span>
<span class="n">connection_pool</span> <span class="o">=</span> <span class="n">ConnectionPool</span><span class="p">()</span>
<span class="c1"># if the given servers are ok, return true, else return false</span>
<span class="n">ok</span> <span class="o">=</span> <span class="n">connection_pool</span><span class="o">.</span><span class="n">init</span><span class="p">([(</span><span class="s1">&#39;127.0.0.1&#39;</span><span class="p">,</span> <span class="mi">9669</span><span class="p">)],</span> <span class="n">config</span><span class="p">)</span>

<span class="c1"># import siwi bot</span>
<span class="kn">from</span> <span class="nn">siwi.bot</span> <span class="kn">import</span> <span class="n">bot</span>

<span class="c1"># instantiate a bot</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">bot</span><span class="o">.</span><span class="n">SiwiBot</span><span class="p">(</span><span class="n">connection_pool</span><span class="p">)</span>

<span class="c1"># make the question query</span>
<span class="n">b</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="s2">&#34;Which team had Jonathon Simmons served?&#34;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>Then a response will be like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">In</span> <span class="p">[</span><span class="mi">4</span><span class="p">]:</span> <span class="n">b</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="s2">&#34;Which team had Jonathon Simmons serv</span>
   <span class="o">...</span><span class="p">:</span> <span class="n">ed</span><span class="err">?</span><span class="s2">&#34;)</span>

<span class="p">[</span><span class="n">DEBUG</span><span class="p">]</span> <span class="n">ServeAction</span> <span class="n">intent</span><span class="p">:</span> <span class="p">{</span><span class="s1">&#39;entities&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s1">&#39;Jonathon Simmons&#39;</span><span class="p">:</span> <span class="s1">&#39;player&#39;</span><span class="p">},</span> <span class="s1">&#39;intents&#39;</span><span class="p">:</span> <span class="p">(</span><span class="s1">&#39;serve&#39;</span><span class="p">,)}</span>

<span class="p">[</span><span class="n">DEBUG</span><span class="p">]</span> <span class="n">query</span> <span class="k">for</span> <span class="n">RelationshipAction</span><span class="p">:</span>
	<span class="n">USE</span> <span class="n">basketballplayer</span><span class="p">;</span>
  <span class="n">MATCH</span> <span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">v</span><span class="p">)</span><span class="o">-</span><span class="p">[</span><span class="n">e</span><span class="p">:</span><span class="n">serve</span><span class="o">*</span><span class="mi">1</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">v1</span><span class="p">)</span> <span class="n">WHERE</span> <span class="nb">id</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="o">==</span> <span class="s2">&#34;player112&#34;</span>
  <span class="n">RETURN</span> <span class="n">p</span> <span class="n">LIMIT</span> <span class="mi">100</span><span class="p">;</span>

<span class="p">[</span><span class="mi">2021</span><span class="o">-</span><span class="mi">07</span><span class="o">-</span><span class="mi">02</span> <span class="mi">02</span><span class="p">:</span><span class="mi">59</span><span class="p">:</span><span class="mi">36</span><span class="p">,</span><span class="mi">392</span><span class="p">]:</span><span class="n">Get</span> <span class="n">connection</span> <span class="n">to</span> <span class="p">(</span><span class="s1">&#39;127.0.0.1&#39;</span><span class="p">,</span> <span class="mi">9669</span><span class="p">)</span>

<span class="n">Out</span><span class="p">[</span><span class="mi">4</span><span class="p">]:</span> <span class="s1">&#39;Jonathon Simmons had served 3 teams. Spurs from 2015 to 2015; 76ers from 2019 to 2019; Magic from 2017 to 2017; &#39;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="frontend-1">Frontend</h3>
<p>Referring to <a href="https://github.com/wey-gu/nebula-siwi/tree/main/src/siwi_frontend" target="_blank" rel="noopener noreffer">siwi_frontend</a></p>
<h2 id="further-work">Further work</h2>
<ul>
<li><i class="far fa-square fa-fw"></i> Use <a href="https://github.com/swar/nba_api" target="_blank" rel="noopener noreffer">NBA-API</a> to fallback undefined pattern questions</li>
<li><i class="far fa-square fa-fw"></i> Wrap and manage sessions instead of get and release session per request, this is somehow costly actually.</li>
<li><i class="far fa-square fa-fw"></i> Use NLP methods to implement proper Symentic Parsing, Intent Matching, Slot Filling</li>
<li><i class="far fa-square fa-fw"></i> Build Graph to help with Intent Matching, especially for a general purpose bot</li>
<li><i class="far fa-square fa-fw"></i> Use larger Dataset i.e. from <a href="https://www.kaggle.com/wyattowalsh/basketball" target="_blank" rel="noopener noreffer">wyattowalsh/basketball</a></li>
</ul>
<h2 id="thanks-to-upstream-projects-">Thanks to Upstream Projects ❤️</h2>
<h3 id="backend-2">Backend</h3>
<ul>
<li>I learnt a lot from the <a href="https://github.com/liuhuanyong/QASystemOnMedicalKG" target="_blank" rel="noopener noreffer">KGQA on MedicalKG</a> created by <a href="https://liuhuanyong.github.io" target="_blank" rel="noopener noreffer">Huanyong Liu</a></li>
<li><a href="https://github.com/pallets/flask" target="_blank" rel="noopener noreffer">Flask</a></li>
<li><a href="https://github.com/WojciechMula/pyahocorasick" target="_blank" rel="noopener noreffer">pyahocorasick</a> created by <a href="http://0x80.pl/" target="_blank" rel="noopener noreffer">Wojciech Muła</a></li>
<li><a href="https://pyyaml.org/" target="_blank" rel="noopener noreffer">PyYaml</a></li>
</ul>
<h3 id="frontend-2">Frontend</h3>
<ul>
<li><a href="https://vuejs.org" target="_blank" rel="noopener noreffer">VueJS</a> for frontend framework</li>
<li><a href="https://github.com/juzser/vue-bot-ui" target="_blank" rel="noopener noreffer">Vue Bot UI</a>, as a lovely bot UI in vue</li>
<li><a href="https://github.com/Drackokacka/vue-web-speech" target="_blank" rel="noopener noreffer">Vue Web Speech</a>, for speech API vue wrapper</li>
<li><a href="https://github.com/axios/axios" target="_blank" rel="noopener noreffer">Axios</a> for browser http client</li>
<li><a href="https://en.wikipedia.org/wiki/Solarized_%28color_scheme%29" target="_blank" rel="noopener noreffer">Solarized</a> for color scheme</li>
<li><a href="https://github.com/alvarosaburido/vitesome" target="_blank" rel="noopener noreffer">Vitesome</a> for landing page design</li>
</ul>
<blockquote>
<p>Image credit goes to <a href="https://unsplash.com/photos/0E_vhMVqL9g" target="_blank" rel="noopener noreffer">https://unsplash.com/photos/0E_vhMVqL9g</a></p>
</blockquote>]]></description>
</item><item>
    <title>Nebula CLion，搭建基于 Docker 的 Nebula Graph CLion 开发环境</title>
    <link>https://siwei.io/nebula-clion/</link>
    <pubDate>Sat, 18 Sep 2021 10:00:05 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/nebula-clion/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>之前卡比同学向我咨询搭建 CLion 环境，开发 Nebula 的一些问题，我做了一些工作方便利用 Docker 在本地搭建这样一个环境，相关的东西放在：https://github.com/wey-gu/nebula-dev-CLion 。</p>
</blockquote>
<p>Related GitHub Repo: <a href="https://github.com/wey-gu/nebula-dev-CLion" target="_blank" rel="noopener noreffer">https://github.com/wey-gu/nebula-dev-CLion</a></p>
<h2 id="run-docker-env-for-nebula-graph-with-clion">Run Docker Env for Nebula-Graph with CLion</h2>
<p>Build Docker Image</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">git clone https://github.com/wey-gu/nebula-dev-CLion.git

<span class="nb">cd</span> nebula-dev-CLion
docker build -t wey/nebula-dev-clion:v2.0 .
</code></pre></td></tr></table>
</div>
</div><p>Run Docker Container for Nebula-Dev with CLion Integration Readiness(actually mostly Rsync &amp; SSH).</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">cd</span> &lt;nebula-graph-repo-you-worked-on&gt;
<span class="nb">export</span> <span class="nv">DOCKER_DEFAULT_PLATFORM</span><span class="o">=</span>linux/amd64
docker run --rm -d <span class="se">\
</span><span class="se"></span>  --name nebula-dev <span class="se">\
</span><span class="se"></span>  --security-opt <span class="nv">seccomp</span><span class="o">=</span>unconfined <span class="se">\
</span><span class="se"></span>  -p 2222:22 -p 2873:873 --cap-add<span class="o">=</span>ALL <span class="se">\
</span><span class="se"></span>  -v <span class="nv">$PWD</span>:/home/nebula <span class="se">\
</span><span class="se"></span>  -w /home/nebula <span class="se">\
</span><span class="se"></span>  wey/nebula-dev-clion:v2.0
</code></pre></td></tr></table>
</div>
</div><p>Verify cmake with SSH.</p>
<blockquote>
<p>The default password is <code>password</code></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">ssh -o <span class="nv">StrictHostKeyChecking</span><span class="o">=</span>no root@localhost -p <span class="m">2222</span>

<span class="c1"># in docker</span>
<span class="nb">cd</span> /home/nebula
mkdir build <span class="o">&amp;&amp;</span> <span class="nb">cd</span> build
cmake -DENABLE_TESTING<span class="o">=</span>OFF -DCMAKE_BUILD_TYPE<span class="o">=</span>Release ..
</code></pre></td></tr></table>
</div>
</div><p>Access container w/o SSH.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">docker <span class="nb">exec</span> -it nebula-dev bash
mkdir -p build <span class="o">&amp;&amp;</span> <span class="nb">cd</span> build
cmake -DENABLE_TESTING<span class="o">=</span>OFF -DCMAKE_BUILD_TYPE<span class="o">=</span>Release ..
</code></pre></td></tr></table>
</div>
</div><h2 id="configurations-in-clion">Configurations in CLion</h2>
<blockquote>
<p>Ref: <a href="https://www.jetbrains.com/help/clion/clion-toolchains-in-docker.html#build-and-run" target="_blank" rel="noopener noreffer">https://www.jetbrains.com/help/clion/clion-toolchains-in-docker.html#build-and-run</a></p>
</blockquote>
<p><strong>Toolchains</strong></p>
<ul>
<li>Add a remote host
<ul>
<li><code>root@localhost:2222</code></li>
<li><code>password</code></li>
</ul>
</li>
<li>Put <code>/opt/vesoft/toolset/cmake/bin/cmake</code> as CMake</li>
</ul>
<p></p>
<p><strong>CMake</strong></p>
<ul>
<li>Toochain:
<ul>
<li>Select the one created in last step</li>
</ul>
</li>
<li>Build directory:
<ul>
<li><code>/home/nebula/build</code></li>
</ul>
</li>
</ul>
<p></p>
<h2 id="the-appendix">The appendix</h2>
<h3 id="references-of-cmake-output">References of CMake output:</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="o">[</span>root@4c98e3f77ce8 build<span class="o">]</span><span class="c1"># cmake -DENABLE_TESTING=OFF -DCMAKE_BUILD_TYPE=Release ..</span>
&gt;&gt;&gt;&gt; Options of Nebula Graph <span class="o">&lt;&lt;&lt;</span>&lt;
-- ENABLE_ASAN                     : OFF <span class="o">(</span>Build with AddressSanitizer<span class="o">)</span>
-- ENABLE_BUILD_STORAGE            : OFF <span class="o">(</span>Whether to build storage<span class="o">)</span>
-- ENABLE_CCACHE                   : ON <span class="o">(</span>Use ccache to speed up compiling<span class="o">)</span>
-- ENABLE_CLANG_TIDY               : OFF <span class="o">(</span>Enable clang-tidy <span class="k">if</span> present<span class="o">)</span>
-- ENABLE_COMPRESSED_DEBUG_INFO    : ON <span class="o">(</span>Compress debug info to reduce binary size<span class="o">)</span>
-- ENABLE_COVERAGE                 : OFF <span class="o">(</span>Build with coverage report<span class="o">)</span>
-- ENABLE_FRAME_POINTER            : OFF <span class="o">(</span>Build with frame pointer<span class="o">)</span>
-- ENABLE_FUZZY_TESTING            : OFF <span class="o">(</span>Enable Fuzzy tests<span class="o">)</span>
-- ENABLE_GDB_SCRIPT_SECTION       : OFF <span class="o">(</span>Add .debug_gdb_scripts section<span class="o">)</span>
-- ENABLE_JEMALLOC                 : ON <span class="o">(</span>Use jemalloc as memory allocator<span class="o">)</span>
-- ENABLE_MODULE_FORCE_CHECKOUT    : ON <span class="o">(</span>Whether checkout branch of module to same as graph.<span class="o">)</span>
-- ENABLE_MODULE_UPDATE            : OFF <span class="o">(</span>Automatically update module<span class="o">)</span>
-- ENABLE_PACK_ONE                 : ON <span class="o">(</span>Whether to package into one<span class="o">)</span>
-- ENABLE_PIC                      : OFF <span class="o">(</span>Build with -fPIC<span class="o">)</span>
-- ENABLE_STATIC_ASAN              : OFF <span class="o">(</span>Statically link against libasan<span class="o">)</span>
-- ENABLE_STATIC_UBSAN             : OFF <span class="o">(</span>Statically link against libubsan<span class="o">)</span>
-- ENABLE_STRICT_ALIASING          : OFF <span class="o">(</span>Build with -fstrict-aliasing<span class="o">)</span>
-- ENABLE_TESTING                  : OFF <span class="o">(</span>Build unit tests<span class="o">)</span>
-- ENABLE_TSAN                     : OFF <span class="o">(</span>Build with ThreadSanitizer<span class="o">)</span>
-- ENABLE_UBSAN                    : OFF <span class="o">(</span>Build with UndefinedBehaviourSanitizer<span class="o">)</span>
-- ENABLE_VERBOSE_BISON            : OFF <span class="o">(</span>Enable Bison to report state<span class="o">)</span>
-- ENABLE_WERROR                   : ON <span class="o">(</span>Regard warnings as errors<span class="o">)</span>
-- CMAKE_BUILD_TYPE                : Release <span class="o">(</span>Choose the <span class="nb">type</span> of build, options are: None Debug Release RelWithDebInfo MinSizeRel ...<span class="o">)</span>
-- CMAKE_INSTALL_PREFIX            : /usr/local/nebula <span class="o">(</span>Install path prefix, prepended onto install directories.<span class="o">)</span>
-- CMAKE_CXX_STANDARD              : <span class="m">17</span>
-- CMAKE_CXX_COMPILER              : /opt/vesoft/toolset/clang/9.0.0/bin/c++ <span class="o">(</span>CXX compiler<span class="o">)</span>
-- CMAKE_CXX_COMPILER_ID           : GNU
-- NEBULA_USE_LINKER               : bfd
-- CCACHE_DIR                      : /root/.ccache
&gt;&gt;&gt;&gt; Configuring third party <span class="k">for</span> <span class="s1">&#39;Nebula Graph&#39;</span> <span class="o">&lt;&lt;&lt;</span>&lt;
-- NEBULA_THIRDPARTY_ROOT          : /opt/vesoft/third-party/2.0
-- Build info of nebula third party:
Package         : Nebula Third Party
Version         : 2.0
Date            : Mon Jun <span class="m">28</span> 15:07:38 UTC <span class="m">2021</span>
glibc           : 2.17
Arch            : x86_64
Compiler        : GCC 9.2.0
C++ ABI         : <span class="m">11</span>
Vendor          : VEsoft Inc.

-- CMAKE_INCLUDE_PATH              : /opt/vesoft/third-party/2.0/include
-- CMAKE_LIBRARY_PATH              : /opt/vesoft/third-party/2.0/lib64<span class="p">;</span>/opt/vesoft/third-party/2.0/lib
-- CMAKE_PROGRAM_PATH              : /opt/vesoft/third-party/2.0/bin
-- GLIBC_VERSION                   : 2.17

-- found krb5-config here /opt/vesoft/third-party/2.0/bin/krb5-config
-- Found kerberos <span class="m">5</span> headers: /opt/vesoft/third-party/2.0/include
-- Found kerberos <span class="m">5</span> libs:    /opt/vesoft/third-party/2.0/lib/libgssapi_krb5.a<span class="p">;</span>/opt/vesoft/third-party/2.0/lib/libkrb5.a<span class="p">;</span>/opt/vesoft/third-party/2.0/lib/libk5crypto.a<span class="p">;</span>/opt/vesoft/third-party/2.0/lib/libcom_err.a<span class="p">;</span>/opt/vesoft/third-party/2.0/lib/libkrb5support.a
&gt;&gt;&gt;&gt; Configuring third party <span class="k">for</span> <span class="s1">&#39;Nebula Graph&#39;</span> <span class="k">done</span> <span class="o">&lt;&lt;&lt;</span>&lt;
-- Create the pre-commit hook
-- Creating pre-commit hook <span class="k">done</span>
&gt;&gt;&gt;&gt; Configuring Nebula Common <span class="o">&lt;&lt;&lt;</span>&lt;
&gt;&gt;&gt;&gt; Options of Nebula Common <span class="o">&lt;&lt;&lt;</span>&lt;
-- ENABLE_ASAN                     : OFF <span class="o">(</span>Build with AddressSanitizer<span class="o">)</span>
-- ENABLE_CCACHE                   : ON <span class="o">(</span>Use ccache to speed up compiling<span class="o">)</span>
-- ENABLE_CLANG_TIDY               : OFF <span class="o">(</span>Enable clang-tidy <span class="k">if</span> present<span class="o">)</span>
-- ENABLE_COMPRESSED_DEBUG_INFO    : ON <span class="o">(</span>Compress debug info to reduce binary size<span class="o">)</span>
-- ENABLE_COVERAGE                 : OFF <span class="o">(</span>Build with coverage report<span class="o">)</span>
-- ENABLE_FRAME_POINTER            : OFF <span class="o">(</span>Build with frame pointer<span class="o">)</span>
-- ENABLE_FUZZY_TESTING            : OFF <span class="o">(</span>Enable Fuzzy tests<span class="o">)</span>
-- ENABLE_GDB_SCRIPT_SECTION       : OFF <span class="o">(</span>Add .debug_gdb_scripts section<span class="o">)</span>
-- ENABLE_JEMALLOC                 : ON <span class="o">(</span>Use jemalloc as memory allocator<span class="o">)</span>
-- ENABLE_PIC                      : OFF <span class="o">(</span>Build with -fPIC<span class="o">)</span>
-- ENABLE_STATIC_ASAN              : OFF <span class="o">(</span>Statically link against libasan<span class="o">)</span>
-- ENABLE_STATIC_UBSAN             : OFF <span class="o">(</span>Statically link against libubsan<span class="o">)</span>
-- ENABLE_STRICT_ALIASING          : OFF <span class="o">(</span>Build with -fstrict-aliasing<span class="o">)</span>
-- ENABLE_TESTING                  : OFF <span class="o">(</span>Build unit tests<span class="o">)</span>
-- ENABLE_TSAN                     : OFF <span class="o">(</span>Build with ThreadSanitizer<span class="o">)</span>
-- ENABLE_UBSAN                    : OFF <span class="o">(</span>Build with UndefinedBehaviourSanitizer<span class="o">)</span>
-- ENABLE_WERROR                   : ON <span class="o">(</span>Regard warnings as errors<span class="o">)</span>
-- Set D_GLIBCXX_USE_CXX11_ABI to <span class="m">1</span>
-- CMAKE_BUILD_TYPE                : Release <span class="o">(</span>Choose the <span class="nb">type</span> of build, options are: None Debug Release RelWithDebInfo MinSizeRel ...<span class="o">)</span>
-- CMAKE_INSTALL_PREFIX            : /usr/local/nebula <span class="o">(</span>Install path prefix, prepended onto install directories.<span class="o">)</span>
-- CMAKE_CXX_STANDARD              : <span class="m">17</span>
-- CMAKE_CXX_COMPILER              : /opt/vesoft/toolset/clang/9.0.0/bin/c++
-- CMAKE_CXX_COMPILER_ID           : GNU
-- NEBULA_USE_LINKER               : bfd
-- CCACHE_DIR                      : /root/.ccache
&gt;&gt;&gt;&gt; Configuring third party <span class="k">for</span> <span class="s1">&#39;Nebula Common&#39;</span> <span class="o">&lt;&lt;&lt;</span>&lt;
-- NEBULA_THIRDPARTY_ROOT          : /opt/vesoft/third-party/2.0
-- Build info of nebula third party:
Package         : Nebula Third Party
Version         : 2.0
Date            : Mon Jun <span class="m">28</span> 15:07:38 UTC <span class="m">2021</span>
glibc           : 2.17
Arch            : x86_64
Compiler        : GCC 9.2.0
C++ ABI         : <span class="m">11</span>
Vendor          : VEsoft Inc.

-- CMAKE_INCLUDE_PATH              : /opt/vesoft/third-party/2.0/include
-- CMAKE_LIBRARY_PATH              : /opt/vesoft/third-party/2.0/lib64<span class="p">;</span>/opt/vesoft/third-party/2.0/lib
-- CMAKE_PROGRAM_PATH              : /opt/vesoft/third-party/2.0/bin
-- GLIBC_VERSION                   : 2.17

-- found krb5-config here /opt/vesoft/third-party/2.0/bin/krb5-config
-- Found kerberos <span class="m">5</span> headers: /opt/vesoft/third-party/2.0/include
-- Found kerberos <span class="m">5</span> libs:    /opt/vesoft/third-party/2.0/lib/libgssapi_krb5.a<span class="p">;</span>/opt/vesoft/third-party/2.0/lib/libkrb5.a<span class="p">;</span>/opt/vesoft/third-party/2.0/lib/libk5crypto.a<span class="p">;</span>/opt/vesoft/third-party/2.0/lib/libcom_err.a<span class="p">;</span>/opt/vesoft/third-party/2.0/lib/libkrb5support.a
&gt;&gt;&gt;&gt; Configuring third party <span class="k">for</span> <span class="s1">&#39;Nebula Common&#39;</span> <span class="k">done</span> <span class="o">&lt;&lt;&lt;</span>&lt;
-- Create the pre-commit hook
-- Creating pre-commit hook <span class="k">done</span>
-- Configuring <span class="k">done</span>

-- Generating <span class="k">done</span>
-- Build files have been written to: /home/nebula/build/modules/common
&gt;&gt;&gt;&gt; Configuring Nebula Common <span class="k">done</span> <span class="o">&lt;&lt;&lt;</span>&lt;
-- Configuring <span class="k">done</span>
-- Generating <span class="k">done</span>
-- Build files have been written to: /home/nebula/build
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>题图版权：<a href="https://unsplash.com/@glencarrie" target="_blank" rel="noopener noreffer">@glencarrie</a></p>
</blockquote>]]></description>
</item><item>
    <title>Nebula Holdshare Dataset，图数据库的股权穿透</title>
    <link>https://siwei.io/nebula-holdshare-dataset/</link>
    <pubDate>Sat, 28 Aug 2021 13:54:03 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/nebula-holdshare-dataset/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>A demo of Shareholding Breakthrough with Distributed open-source Graph Database: Nebula Graph. 图数据库应用示例：股权关系穿透</p>
</blockquote>
<p>Related GitHub Repo: <a href="https://github.com/wey-gu/nebula-shareholding-example" target="_blank" rel="noopener noreffer">https://github.com/wey-gu/nebula-shareholding-example</a></p>
<blockquote>
<p>这个项目我也做成了互动教程，可以按照这里的步骤搭建起来 👉🏻 <a href="https://siwei.io/cources/" target="_blank" rel="noopener noreffer">https://siwei.io/cources/</a></p>
<p>I created the Katacoda Interactive Env for this project 👉🏻 <a href="https://siwei.io/cources/" target="_blank" rel="noopener noreffer">https://siwei.io/cources/</a></p>
</blockquote>
<blockquote>
<p>您也可以在 Nebula Playground 上直接玩这个数据集啦：https://nebula-graph.com.cn/demo/</p>
<p>Now you can play with the data on Nebula Playground: <a href="https://nebula-graph.io/demo/" target="_blank" rel="noopener noreffer">https://nebula-graph.io/demo/</a></p>
</blockquote>
<p>This is a demo of Shareholding Relationship Analysis with Distributed open-source Graph Database: Nebula Graph.</p>
<h2 id="data">Data</h2>
<h3 id="data-modeling">Data Modeling</h3>
<p></p>
<p>There are various kinds of relationships when we checking companies' shareholding breakthrough, here let&rsquo;s simplify it with only two kind of entities: person and corp, and with following relationship types.</p>
<ul>
<li><code>person</code> can hold a <code>corp</code> in <code>{share} %</code></li>
<li><code>person</code> can be relative with another <code>person</code></li>
<li><code>corp</code> can hold another <code>corp</code> in <code>{share} %</code></li>
<li><code>corp</code> can be a branch of another <code>corp</code></li>
<li><code>person</code> can be as a role of a <code>corp</code></li>
</ul>
<p>Below is the lines to reflect this graph modele in Nebula Graph, it&rsquo;s quite straightforward, right?</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="n">person</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="n">string</span><span class="p">);</span><span class="w">
</span><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">TAG</span><span class="w"> </span><span class="n">corp</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="n">string</span><span class="p">);</span><span class="w">
</span><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">role_as</span><span class="p">(</span><span class="k">role</span><span class="w"> </span><span class="n">string</span><span class="p">);</span><span class="w">
</span><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">is_branch_of</span><span class="p">();</span><span class="w">
</span><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">hold_share</span><span class="p">(</span><span class="k">share</span><span class="w"> </span><span class="nb">float</span><span class="p">);</span><span class="w">
</span><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EDGE</span><span class="w"> </span><span class="n">reletive_with</span><span class="p">(</span><span class="n">degree</span><span class="w"> </span><span class="nb">int</span><span class="p">);</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><h3 id="data-generation">Data Generation</h3>
<p>We just randomly generate some data to help with this demo, you can call <code>data_generator.py</code> directly to generate or reuse what&rsquo;s already done under <code>data_sample</code> folder.</p>
<p>The generated data are records to be fit in above data model from below <code>.csv</code> files.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ pip install <span class="nv">Faker</span><span class="o">==</span>2.0.5 <span class="nv">pydbgen</span><span class="o">==</span>1.0.5
$ python3 data_generator.py
$ ls -l data
total <span class="m">1688</span>
-rw-r--r--  <span class="m">1</span> weyl  staff   <span class="m">23941</span> Jul <span class="m">14</span> 13:28 corp.csv
-rw-r--r--  <span class="m">1</span> weyl  staff    <span class="m">1277</span> Jul <span class="m">14</span> 13:26 corp_rel.csv
-rw-r--r--  <span class="m">1</span> weyl  staff    <span class="m">3048</span> Jul <span class="m">14</span> 13:26 corp_share.csv
-rw-r--r--  <span class="m">1</span> weyl  staff  <span class="m">211661</span> Jul <span class="m">14</span> 13:26 person.csv
-rw-r--r--  <span class="m">1</span> weyl  staff  <span class="m">179770</span> Jul <span class="m">14</span> 13:26 person_corp_role.csv
-rw-r--r--  <span class="m">1</span> weyl  staff  <span class="m">322965</span> Jul <span class="m">14</span> 13:26 person_corp_share.csv
-rw-r--r--  <span class="m">1</span> weyl  staff   <span class="m">17689</span> Jul <span class="m">14</span> 13:26 person_rel.csv
</code></pre></td></tr></table>
</div>
</div><h3 id="data-import">Data Import</h3>
<p>With those data in <code>.csv</code> files, we can easily import them into a Nebula Graph Cluster with the help of <a href="https://github.com/vesoft-inc/nebula-importer" target="_blank" rel="noopener noreffer">Nebula-Importer</a>. <code>nebula-importer.yaml</code> in this repo describes rules and configurations on how this import will be done by the importer.</p>
<p>For Nebula Graph Database, plesae refer to <a href="https://docs.nebula-graph.io/" target="_blank" rel="noopener noreffer">Doc</a> , <a href="https://docs.nebula-graph.com.cn/" target="_blank" rel="noopener noreffer">Doc-CN</a> to deploy on any Linux Servers, for study and test, you can run it via Docker following the Quick Start Chapter of the documentation.</p>
<p>For Nebula-Importer, if you already have Docker env, you can run it as the following without installing anything. Or, if you prefer to install it, it&rsquo;s quite easy as it&rsquo;s written in Golang and you can run its single file binary quite easily, go check both Documentation and Nebula-Importer Repo: <a href="https://github.com/vesoft-inc/nebula-importer" target="_blank" rel="noopener noreffer">https://github.com/vesoft-inc/nebula-importer</a>.</p>
<blockquote>
<p>Let&rsquo;s start! Below is the commands I used to import our data into a Nebula Graph Database.</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># put generated data &amp; nebula-importor.yaml to nebula-importer server</span>
$ scp -r data nebula_graph_host:~
$ scp nebula-importer.yaml data nebula_graph_host:~/data
$ ssh nebula_graph_host
$ ls -l <span class="si">${</span><span class="nv">HOME</span><span class="si">}</span>/data
total <span class="m">756</span>
-rw-r--r--. <span class="m">1</span> wei.gu wei.gu  <span class="m">23941</span> Jul <span class="m">14</span> 05:44 corp.csv
-rw-r--r--. <span class="m">1</span> wei.gu wei.gu   <span class="m">1277</span> Jul <span class="m">14</span> 05:44 corp_rel.csv
-rw-r--r--. <span class="m">1</span> wei.gu wei.gu   <span class="m">3048</span> Jul <span class="m">14</span> 05:44 corp_share.csv
-rw-r--r--. <span class="m">1</span> wei.gu wei.gu   <span class="m">3893</span> Jul <span class="m">14</span> 05:44 nebula-importer.yaml
-rw-r--r--. <span class="m">1</span> wei.gu wei.gu <span class="m">211661</span> Jul <span class="m">14</span> 05:44 person.csv
-rw-r--r--. <span class="m">1</span> wei.gu wei.gu <span class="m">179770</span> Jul <span class="m">14</span> 05:44 person_corp_role.csv
-rw-r--r--. <span class="m">1</span> wei.gu wei.gu <span class="m">322965</span> Jul <span class="m">14</span> 05:44 person_corp_share.csv
-rw-r--r--. <span class="m">1</span> wei.gu wei.gu  <span class="m">17689</span> Jul <span class="m">14</span> 05:44 person_rel.csv

<span class="c1"># import data into our nebula graph database</span>
$ docker run --rm -ti <span class="se">\
</span><span class="se"></span>    --network<span class="o">=</span>nebula-docker-compose_nebula-net <span class="se">\
</span><span class="se"></span>    -v <span class="si">${</span><span class="nv">HOME</span><span class="si">}</span>/data/nebula-importer.yaml:/root/nebula-importer.yaml <span class="se">\
</span><span class="se"></span>    -v <span class="si">${</span><span class="nv">HOME</span><span class="si">}</span>/data:/root <span class="se">\
</span><span class="se"></span>    vesoft/nebula-importer:v2 <span class="se">\
</span><span class="se"></span>    --config /root/nebula-importer.yaml

2021/07/14 05:49:32 --- START OF NEBULA IMPORTER ---
2021/07/14 05:49:32 <span class="o">[</span>WARN<span class="o">]</span> config.go:491: Not <span class="nb">set</span> files<span class="o">[</span>0<span class="o">]</span>.schema.vertex.vid.Type, reset to default value <span class="sb">`</span>string<span class="err">&#39;</span>
...
2021/07/14 05:49:43 <span class="o">[</span>INFO<span class="o">]</span> reader.go:180: Total lines of file<span class="o">(</span>/root/person_corp_role.csv<span class="o">)</span> is: 5000, error lines: <span class="m">1287</span>
2021/07/14 05:49:43 <span class="o">[</span>INFO<span class="o">]</span> statsmgr.go:61: Done<span class="o">(</span>/root/person_corp_role.csv<span class="o">)</span>: Time<span class="o">(</span>11.39s<span class="o">)</span>, Finished<span class="o">(</span>12523<span class="o">)</span>, Failed<span class="o">(</span>0<span class="o">)</span>, Latency AVG<span class="o">(</span>1514us<span class="o">)</span>, Batches Req AVG<span class="o">(</span>1824us<span class="o">)</span>, Rows AVG<span class="o">(</span>1099.43/s<span class="o">)</span>
2021/07/14 05:49:47 <span class="o">[</span>INFO<span class="o">]</span> statsmgr.go:61: Tick: Time<span class="o">(</span>15.00s<span class="o">)</span>, Finished<span class="o">(</span>25807<span class="o">)</span>, Failed<span class="o">(</span>0<span class="o">)</span>, Latency AVG<span class="o">(</span>1500us<span class="o">)</span>, Batches Req AVG<span class="o">(</span>1805us<span class="o">)</span>, Rows AVG<span class="o">(</span>1720.46/s<span class="o">)</span>
2021/07/14 05:49:48 <span class="o">[</span>INFO<span class="o">]</span> reader.go:180: Total lines of file<span class="o">(</span>/root/person.csv<span class="o">)</span> is: 10000, error lines: <span class="m">0</span>
2021/07/14 05:49:48 <span class="o">[</span>INFO<span class="o">]</span> statsmgr.go:61: Done<span class="o">(</span>/root/person.csv<span class="o">)</span>: Time<span class="o">(</span>16.10s<span class="o">)</span>, Finished<span class="o">(</span>29731<span class="o">)</span>, Failed<span class="o">(</span>0<span class="o">)</span>, Latency AVG<span class="o">(</span>1505us<span class="o">)</span>, Batches Req AVG<span class="o">(</span>1810us<span class="o">)</span>, Rows AVG<span class="o">(</span>1847.17/s<span class="o">)</span>
2021/07/14 05:49:50 <span class="o">[</span>INFO<span class="o">]</span> reader.go:180: Total lines of file<span class="o">(</span>/root/person_corp_share.csv<span class="o">)</span> is: 20000, error lines: <span class="m">0</span>
2021/07/14 05:49:50 <span class="o">[</span>INFO<span class="o">]</span> statsmgr.go:61: Done<span class="o">(</span>/root/person_corp_share.csv<span class="o">)</span>: Time<span class="o">(</span>17.74s<span class="o">)</span>, Finished<span class="o">(</span>36013<span class="o">)</span>, Failed<span class="o">(</span>0<span class="o">)</span>, Latency AVG<span class="o">(</span>1531us<span class="o">)</span>, Batches Req AVG<span class="o">(</span>1844us<span class="o">)</span>, Rows AVG<span class="o">(</span>2030.29/s<span class="o">)</span>
2021/07/14 05:49:50 Finish import data, consume time: 18.25s
2021/07/14 05:49:51 --- END OF NEBULA IMPORTER ---
</code></pre></td></tr></table>
</div>
</div><h2 id="corporation-sharehold-relationship-breakthrough">Corporation sharehold relationship breakthrough</h2>
<h4 id="query-in-ngql">Query in nGQL</h4>
<p>We can query from corp: <code>c_132</code> over <code>*</code>(all relationships) in <code>BIDIRECT</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="k">GO</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="k">TO</span><span class="w"> </span><span class="mi">3</span><span class="w"> </span><span class="n">STEPS</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="s2">&#34;c_132&#34;</span><span class="w"> </span><span class="n">over</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">BIDIRECT</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>Below are lines I call this query in <a href="https://github.com/vesoft-inc/nebula-console" target="_blank" rel="noopener noreffer">nebula-console</a>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">/ <span class="c1"># nebula-console  -addr 192.168.8.128 -port 9669 -user user -password password</span>
2021/07/14 07:07:41 <span class="o">[</span>INFO<span class="o">]</span> connection pool is initialized successfully

Welcome to Nebula Graph!

<span class="o">(</span>user@nebula<span class="o">)</span> <span class="o">[(</span>none<span class="o">)]</span>&gt; show spaces
+--------------------+
<span class="p">|</span> Name               <span class="p">|</span>
+--------------------+
<span class="p">|</span> <span class="s2">&#34;basketballplayer&#34;</span> <span class="p">|</span>
+--------------------+
<span class="p">|</span> <span class="s2">&#34;shareholding&#34;</span>     <span class="p">|</span>
+--------------------+
Got <span class="m">2</span> rows <span class="o">(</span><span class="nb">time</span> spent 3851/4595 us<span class="o">)</span>

Wed, <span class="m">14</span> Jul <span class="m">2021</span> 07:07:57 UTC

<span class="o">(</span>user@nebula<span class="o">)</span> <span class="o">[(</span>none<span class="o">)]</span>&gt; use shareholding
Execution succeeded <span class="o">(</span><span class="nb">time</span> spent 1822/2342 us<span class="o">)</span>

Wed, <span class="m">14</span> Jul <span class="m">2021</span> 07:08:02 UTC

<span class="o">(</span>user@nebula<span class="o">)</span> <span class="o">[</span>shareholding<span class="o">]</span>&gt; GO <span class="m">1</span> TO <span class="m">3</span> STEPS FROM <span class="s2">&#34;c_132&#34;</span> over * BIDIRECT
+--------------+-------------------+-----------------+--------------------+
<span class="p">|</span> role_as._dst <span class="p">|</span> is_branch_of._dst <span class="p">|</span> hold_share._dst <span class="p">|</span> reletive_with._dst <span class="p">|</span>
+--------------+-------------------+-----------------+--------------------+
<span class="p">|</span> <span class="s2">&#34;p_2024&#34;</span>     <span class="p">|</span>                   <span class="p">|</span>                 <span class="p">|</span>                    <span class="p">|</span>
+--------------+-------------------+-----------------+--------------------+
<span class="p">|</span> <span class="s2">&#34;p_4000&#34;</span>     <span class="p">|</span>                   <span class="p">|</span>                 <span class="p">|</span>                    <span class="p">|</span>
+--------------+-------------------+-----------------+--------------------+
<span class="p">|</span>              <span class="p">|</span>                   <span class="p">|</span> <span class="s2">&#34;c_245&#34;</span>         <span class="p">|</span>                    <span class="p">|</span>
+--------------+-------------------+-----------------+--------------------+
<span class="p">|</span>              <span class="p">|</span>                   <span class="p">|</span> <span class="s2">&#34;p_1039&#34;</span>        <span class="p">|</span>                    <span class="p">|</span>
+--------------+-------------------+-----------------+--------------------+
<span class="p">|</span>              <span class="p">|</span>                   <span class="p">|</span> <span class="s2">&#34;p_1399&#34;</span>        <span class="p">|</span>                    <span class="p">|</span>
+--------------+-------------------+-----------------+--------------------+
<span class="p">|</span>              <span class="p">|</span>                   <span class="p">|</span> <span class="s2">&#34;p_1767&#34;</span>        <span class="p">|</span>                    <span class="p">|</span>
...
+--------------+-------------------+-----------------+--------------------+
<span class="p">|</span>              <span class="p">|</span>                   <span class="p">|</span> <span class="s2">&#34;c_132&#34;</span>         <span class="p">|</span>                    <span class="p">|</span>
+--------------+-------------------+-----------------+--------------------+
<span class="p">|</span>              <span class="p">|</span>                   <span class="p">|</span> <span class="s2">&#34;c_245&#34;</span>         <span class="p">|</span>                    <span class="p">|</span>
+--------------+-------------------+-----------------+--------------------+
<span class="p">|</span>              <span class="p">|</span>                   <span class="p">|</span> <span class="s2">&#34;c_25&#34;</span>          <span class="p">|</span>                    <span class="p">|</span>
+--------------+-------------------+-----------------+--------------------+
<span class="p">|</span>              <span class="p">|</span>                   <span class="p">|</span> <span class="s2">&#34;c_649&#34;</span>         <span class="p">|</span>                    <span class="p">|</span>
+--------------+-------------------+-----------------+--------------------+
<span class="p">|</span>              <span class="p">|</span>                   <span class="p">|</span> <span class="s2">&#34;c_753&#34;</span>         <span class="p">|</span>                    <span class="p">|</span>
+--------------+-------------------+-----------------+--------------------+
Got <span class="m">1519</span> rows <span class="o">(</span><span class="nb">time</span> spent 12190/14702 us<span class="o">)</span>

Wed, <span class="m">14</span> Jul <span class="m">2021</span> 07:08:06 UTC

</code></pre></td></tr></table>
</div>
</div><h4 id="in-a-visual-way">In a Visual Way</h4>
<p>Of course, we can also be done in a visual way:</p>
<p>Step 1, login from Nebula Graph Studio, explore with one VID: <code>c_132</code>:</p>
<p></p>
<p>Step2, click this explored vertex dot, then you can explore from select vertices by selecting:</p>
<ul>
<li>Edge Type</li>
<li>Direction</li>
<li>Steps</li>
<li>Query Limit(Optional)</li>
</ul>
<blockquote>
<p>note, you can click the 👁️ icon to add options to show fields of the graph,</p>
</blockquote>
<p></p>
<p>Step3, after click Expand, you will see all quried relations with <code>c_132</code> the <code>Chambers LLC</code>.</p>
<p></p>
<h2 id="thanks-to-upstream-projects-">Thanks to Upstream Projects ❤️</h2>
<ul>
<li>Python Faker <a href="https://github.com/joke2k/faker/" target="_blank" rel="noopener noreffer">https://github.com/joke2k/faker/</a></li>
<li>pydbgen <a href="https://github.com/tirthajyoti/pydbgen" target="_blank" rel="noopener noreffer">https://github.com/tirthajyoti/pydbgen</a></li>
<li>Nebula Graph <a href="https://github.com/vesoft-inc/nebula-graph" target="_blank" rel="noopener noreffer">https://github.com/vesoft-inc/nebula-graph</a></li>
</ul>
<h3 id="tips">Tips:</h3>
<ul>
<li>You can deploy nebula graph in one line with:
<ul>
<li><a href="https://siwei.io/nebula-up/" target="_blank" rel="noopener noreffer">Nebula-UP</a>, it helps install a nebula graph with Docker</li>
<li><a href="https://siwei.io/nebula-operator-kind/" target="_blank" rel="noopener noreffer">Nebula-operator-KIND</a> , it helps setup all dependencies of Nebula-K8s-Operator including a K8s in Docker, PV Provider and then install a Nebula Graph with Nebula-Operator in K8s.</li>
</ul>
</li>
</ul>
<blockquote>
<p>Image Credit goes to <a href="https://unsplash.com/photos/3fPXt37X6UQ" target="_blank" rel="noopener noreffer">https://unsplash.com/photos/3fPXt37X6UQ</a></p>
</blockquote>]]></description>
</item><item>
    <title>Nebula LiveJournal，上手 LiveJournal 数据集导入 Nebula Graph 与图算法执行</title>
    <link>https://siwei.io/nebula-livejournal/</link>
    <pubDate>Tue, 24 Aug 2021 11:22:55 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/nebula-livejournal/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>一个导入 Livejournal 数据集到 Nebula Graph 图数据库，并执行 Nebula Algorithm 图算法的过程分享。</p>
</blockquote>
<p>Related GitHub Repo: <a href="https://github.com/wey-gu/nebula-LiveJournal" target="_blank" rel="noopener noreffer">https://github.com/wey-gu/nebula-LiveJournal</a></p>
<h1 id="nebula-livejournal">nebula-LiveJournal</h1>
<p>LiveJournal Dataset is a Social Network Dataset in one file with two columns(FromNodeId, ToNodeId).</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ head soc-LiveJournal1.txt
<span class="c1"># Directed graph (each unordered pair of nodes is saved once): soc-LiveJournal1.txt</span>
<span class="c1"># Directed LiveJournal friednship social network</span>
<span class="c1"># Nodes: 4847571 Edges: 68993773</span>
<span class="c1"># FromNodeId	ToNodeId</span>
0	<span class="m">1</span>
0	<span class="m">2</span>
0	<span class="m">3</span>
0	<span class="m">4</span>
0	<span class="m">5</span>
0	<span class="m">6</span>
</code></pre></td></tr></table>
</div>
</div><p>It could be accessed in <a href="https://snap.stanford.edu/data/soc-LiveJournal1.html" target="_blank" rel="noopener noreffer">https://snap.stanford.edu/data/soc-LiveJournal1.html</a>.</p>
<table>
<thead>
<tr>
<th style="text-align:left">Dataset statistics</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Nodes</td>
<td>4847571</td>
</tr>
<tr>
<td style="text-align:left">Edges</td>
<td>68993773</td>
</tr>
<tr>
<td style="text-align:left">Nodes in largest WCC</td>
<td>4843953 (0.999)</td>
</tr>
<tr>
<td style="text-align:left">Edges in largest WCC</td>
<td>68983820 (1.000)</td>
</tr>
<tr>
<td style="text-align:left">Nodes in largest SCC</td>
<td>3828682 (0.790)</td>
</tr>
<tr>
<td style="text-align:left">Edges in largest SCC</td>
<td>65825429 (0.954)</td>
</tr>
<tr>
<td style="text-align:left">Average clustering coefficient</td>
<td>0.2742</td>
</tr>
<tr>
<td style="text-align:left">Number of triangles</td>
<td>285730264</td>
</tr>
<tr>
<td style="text-align:left">Fraction of closed triangles</td>
<td>0.04266</td>
</tr>
<tr>
<td style="text-align:left">Diameter (longest shortest path)</td>
<td>16</td>
</tr>
<tr>
<td style="text-align:left">90-percentile effective diameter</td>
<td>6.5</td>
</tr>
</tbody>
</table>
<h2 id="dataset-download-and-preprocessing">Dataset Download and Preprocessing</h2>
<h3 id="download">Download</h3>
<p>It is accesissiable from the official web page:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ <span class="nb">cd</span> nebula-livejournal/data
$ wget https://snap.stanford.edu/data/soc-LiveJournal1.txt.gz
</code></pre></td></tr></table>
</div>
</div><p>Comments in data file should be removed to make the data import tool happy.</p>
<h3 id="preprocessing">Preprocessing</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ gzip -d soc-LiveJournal1.txt.gz
$ sed -i <span class="s1">&#39;1,4d&#39;</span> soc-LiveJournal1.txt
</code></pre></td></tr></table>
</div>
</div><h2 id="import-dataset-to-nebula-graph">Import dataset to Nebula Graph</h2>
<h3 id="with-nebula-importer">With Nebula Importer</h3>
<p><a href="https://github.com/vesoft-inc/nebula-importer" target="_blank" rel="noopener noreffer">Nebula-Importer</a> is a Golang Headless import tool for Nebula Graph.</p>
<p>You may need to edit the config file under <a href="nebula-importer/importer.yaml" rel="">nebula-importer/importer.yaml</a> on Nebula Graph&rsquo;s address and credential。</p>
<p>Then, Nebula-Importer could be called in Docker as follow:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ <span class="nb">cd</span> nebula-livejournal

$ docker run --rm -ti <span class="se">\
</span><span class="se"></span>    --network<span class="o">=</span>nebula-net <span class="se">\
</span><span class="se"></span>    -v nebula-importer/importer.yaml:/root/importer.yaml <span class="se">\
</span><span class="se"></span>    -v data/:/root <span class="se">\
</span><span class="se"></span>    vesoft/nebula-importer:v2 <span class="se">\
</span><span class="se"></span>    --config /root/importer.yaml
</code></pre></td></tr></table>
</div>
</div><p>Or if you have the binary nebula-importer locally:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ <span class="nb">cd</span> data
$ &lt;path_to_nebula-importer_binary&gt; --config ../nebula-importer/importer.yaml
</code></pre></td></tr></table>
</div>
</div><h3 id="with-nebula-exchange">With Nebula Exchange</h3>
<p><a href="https://github.com/vesoft-inc/nebula-spark-utils/tree/master/nebula-exchange" target="_blank" rel="noopener noreffer">Nebula-Exchange</a> is a Spark Application to enable batch and streaming data import from multiple data sources to Nebula Graph.</p>
<p>To be done. (You can refer to <a href="https://siwei.io/nebula-exchange-sst-2.x/" target="_blank" rel="noopener noreffer">https://siwei.io/nebula-exchange-sst-2.x/</a>)</p>
<h2 id="run-algorithms-with-nebula-graph">Run Algorithms with Nebula Graph</h2>
<p><a href="https://github.com/vesoft-inc/nebula-spark-utils/tree/master/nebula-algorithm" target="_blank" rel="noopener noreffer">Nebula-Algorithm</a> is a Spark/GraphX Application to run Graph Algorithms with data consumed from files or a Nebula Graph Cluster.</p>
<p>Supported Algorithms for now:</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Use Case</th>
</tr>
</thead>
<tbody>
<tr>
<td>PageRank</td>
<td>page ranking, important node digging</td>
</tr>
<tr>
<td>Louvain</td>
<td>community digging, hierarchical clustering</td>
</tr>
<tr>
<td>KCore</td>
<td>community detection, financial risk control</td>
</tr>
<tr>
<td>LabelPropagation</td>
<td>community detection, consultation propagation, advertising recommendation</td>
</tr>
<tr>
<td>ConnectedComponent</td>
<td>community detection, isolated island detection</td>
</tr>
<tr>
<td>StronglyConnectedComponent</td>
<td>community detection</td>
</tr>
<tr>
<td>ShortestPath</td>
<td>path plan, network plan</td>
</tr>
<tr>
<td>TriangleCount</td>
<td>network structure analysis</td>
</tr>
<tr>
<td>BetweennessCentrality</td>
<td>important node digging, node influence calculation</td>
</tr>
<tr>
<td>DegreeStatic</td>
<td>graph structure analysis</td>
</tr>
</tbody>
</table>
<h3 id="ad-hoc-spark-env-setup">Ad-hoc Spark Env setup</h3>
<p>Here I assume the Nebula Graph was bootstraped with <a href="https://github.com/wey-gu/nebula-up" target="_blank" rel="noopener noreffer">Nebula-Up</a>, thus nebula is running in a Docker Network named <code>nebula-docker-compose_nebula-net</code>.</p>
<p>Then let&rsquo;s start a single server spark:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">docker run --name spark-master --network nebula-docker-compose_nebula-net <span class="se">\
</span><span class="se"></span>    -h spark-master -e <span class="nv">ENABLE_INIT_DAEMON</span><span class="o">=</span><span class="nb">false</span> -d <span class="se">\
</span><span class="se"></span>    -v nebula-algorithm/:/root <span class="se">\
</span><span class="se"></span>    bde2020/spark-master:2.4.5-hadoop2.7
</code></pre></td></tr></table>
</div>
</div><p>Thus we could make spark application submt inside this container:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">docker <span class="nb">exec</span> -it spark-master bash
<span class="nb">cd</span> /root/
<span class="c1"># download Nebula-Algorithm Jar Packagem, 2.0.0 for example, for other versions, refer to nebula-algorithm github repo and documentations.</span>
wget https://repo1.maven.org/maven2/com/vesoft/nebula-algorithm/2.0.0/nebula-algorithm-2.0.0.jar
</code></pre></td></tr></table>
</div>
</div><h3 id="run-algorithms">Run Algorithms</h3>
<p>There are many altorithms supported by Nebula-Algorithm, here some of their configuration files were put under nebula-algorithm as an example.</p>
<p>Before using them, please first edit and change Nebula Graph Cluster Addresses and credentials.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">vim nebula-altorithm/algo-pagerank.conf
</code></pre></td></tr></table>
</div>
</div><p>Then we could enter the spark container and call corresponding algorithms as follow.</p>
<p>Please adjust your <code>--driver-memeory</code> accordingly, i.e. pagerank altorithm:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">/spark/bin/spark-submit --master <span class="s2">&#34;local&#34;</span> --conf spark.rpc.askTimeout<span class="o">=</span>6000s <span class="se">\
</span><span class="se"></span>    --class com.vesoft.nebula.algorithm.Main <span class="se">\
</span><span class="se"></span>    --driver-memory 16g nebula-algorithm-2.0.0.jar <span class="se">\
</span><span class="se"></span>    -p pagerank.conf
</code></pre></td></tr></table>
</div>
</div><p>After the algorithm finished, the output will be under the path insdie the container defined in conf file:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml">    <span class="nx">write</span><span class="err">:</span><span class="p">{</span>
        <span class="nx">resultPath</span><span class="err">:/</span><span class="nx">output</span><span class="err">/</span>
    <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>题图版权：<a href="https://unsplash.com/photos/eTgMFFzroGc" target="_blank" rel="noopener noreffer">@sigmund</a></p>
</blockquote>]]></description>
</item><item>
    <title>Nebula Exchange SST 2.x Hands-on Guide</title>
    <link>https://siwei.io/nebula-exchange-sst-2.x/</link>
    <pubDate>Wed, 18 Aug 2021 15:21:00 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/nebula-exchange-sst-2.x/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featured-image.webp" referrerpolicy="no-referrer">
            </div><p>这篇文章带大家以最小方式，快速趟一下 Nebula Exchange 中 SST 写入方式的步骤。</p>
<h2 id="什么是-nebula-exchange-">什么是 Nebula Exchange ?</h2>
<p>之前我在 <a href="https://siwei.io/sketches/nebula-data-import-options/" target="_blank" rel="noopener noreffer">Nebula Data Import Options</a> 之中介绍过，<a href="https://github.com/vesoft-inc/nebula-spark-utils/tree/master/nebula-exchange" target="_blank" rel="noopener noreffer">Nebula Exchange</a> 是一个 Nebula Graph 社区开源的 Spark Applicaiton，它专门用来支持批量或者流式地把数据导入 Nebula Graph Database 之中。</p>
<p>Nebula Exchange 支持多种多样的数据源（从 Apache Parquet, ORC, JSON, CSV, HBase, Hive MaxCompute 到 Neo4j, MySQL, ClickHouse, 再有 Kafka, Pulsar，更多的数据源也在不断增加之中）。</p>
<p></p>
<p>如上图所示，在 Exchange 内部，从除了不同 Reader 可以读取不同数据源之外，在数据经过 Processor 处理之后通过 Writer写入（sink） Nebula Graph 图数据库的时候，除了走正常的 ServerBaseWriter 的写入流程之外，它还可以绕过整个写入流程，利用 Spark 的计算能力并行生成底层 RocksDB 的 SST 文件，从而实现超高性能的数据导入，这个 SST 文件导入的场景就是本文带大家上手熟悉的部分。</p>
<blockquote>
<p>详细信息请参阅：<a href="https://docs.nebula-graph.com.cn/master/nebula-exchange/about-exchange/ex-ug-what-is-exchange/" target="_blank" rel="noopener noreffer">Nebula Graph 手册:什么是 Nebula Exchange</a></p>
<p><a href="https://nebula-graph.com.cn/posts/" target="_blank" rel="noopener noreffer">Nebula Graph 官方博客</a>也有更多 Nebula Exchange 的实践文章</p>
</blockquote>
<h2 id="步骤概观">步骤概观</h2>
<ul>
<li><a href="#%e5%ae%9e%e9%aa%8c%e7%8e%af%e5%a2%83%e5%87%86%e5%a4%87" rel="">实验环境</a></li>
<li><a href="#%e9%85%8d%e7%bd%aeExchange" rel="">配置 Exchange</a></li>
<li><a href="#%e7%94%9f%e6%88%90SST%e6%96%87%e4%bb%b6" rel="">生成 SST 文件</a></li>
<li><a href="#%e5%86%99%e5%85%a5SST%e6%96%87%e4%bb%b6%e5%88%b0NebulaGraph" rel="">写入 SST 文件到 Nebula Graph</a></li>
</ul>
<h2 id="实验环境准备">实验环境准备</h2>
<p>为了最小化使用 Nebula Exchange 的 SST 功能，我们需要：</p>
<ul>
<li>搭建一个 Nebula Graph 集群，创建导入数据的 Schema，我们选择使用 Docker-Compose 方式、利用 <a href="https://github.com/wey-gu/nebula-up/" target="_blank" rel="noopener noreffer">Nebula-Up</a> 快速部署，并简单修改其网络，以方便同样容器化的 Exchange 程序对其访问。</li>
<li>搭建容器化的 Spark 运行环境</li>
<li>搭建容器化的 HDFS</li>
</ul>
<h3 id="1-搭建-nebula-graph-集群">1. 搭建 Nebula Graph 集群</h3>
<p>借助于 <a href="https://github.com/wey-gu/nebula-up/" target="_blank" rel="noopener noreffer">Nebula-Up</a> 我们可以在 Linux 环境下一键部署一套 Nebula Graph 集群：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">curl -fsSL nebula-up.siwei.io/install.sh <span class="p">|</span> bash
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>待部署成功之后，我们需要对环境做一些修改，这里我做的修改其实就是两点：</p>
<ol>
<li>只保留一个 metaD 服务</li>
<li>起用 Docker 的外部网络</li>
</ol>
<p>详细修改的部分参考<a href="#%e9%99%84%e5%bd%95%e4%b8%80" rel="">附录一</a></p>
<p>应用 docker-compose 的修改：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">cd</span> ~/.nebula-up/nebula-docker-compose
vim docker-compose.yaml <span class="c1"># 参考附录一</span>
docker network create nebula-net <span class="c1"># 需要创建外部网络</span>
docker-compose up -d --remove-orphans
</code></pre></td></tr></table>
</div>
</div><p>之后，我们来创建要测试的图空间，并创建图的 Schema，为此，我们可以利用 nebula-console ，同样，Nebula-Up 里自带了容器化的 nebula-console。</p>
<ul>
<li>进入 Nebula-Console 所在的容器</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">~/.nebula-up/console.sh
/ <span class="c1">#</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>在 console 容器里发起链接到图数据库，其中 <code>192.168.x.y</code> 是我所在的 Linux VM 的第一个网卡地址，请换成您的</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">/ # nebula-console -addr 192.168.x.y -port 9669 -user root -p password
[INFO] connection pool is initialized successfully

Welcome to Nebula Graph!
</code></pre></td></tr></table>
</div>
</div><ul>
<li>创建图空间（我们起名字叫 <code>sst</code> ），以及 schema</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="k">create</span><span class="w"> </span><span class="k">space</span><span class="w"> </span><span class="n">sst</span><span class="p">(</span><span class="n">partition_num</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span><span class="n">replica_factor</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">vid_type</span><span class="o">=</span><span class="n">fixed_string</span><span class="p">(</span><span class="mi">32</span><span class="p">));</span><span class="w">
</span><span class="w"></span><span class="p">:</span><span class="n">sleep</span><span class="w"> </span><span class="mi">20</span><span class="w">
</span><span class="w"></span><span class="n">use</span><span class="w"> </span><span class="n">sst</span><span class="w">
</span><span class="w"></span><span class="k">create</span><span class="w"> </span><span class="n">tag</span><span class="w"> </span><span class="n">player</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="n">string</span><span class="p">,</span><span class="w"> </span><span class="n">age</span><span class="w"> </span><span class="nb">int</span><span class="p">);</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>示例输出</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="p">(</span><span class="n">root</span><span class="o">@</span><span class="n">nebula</span><span class="p">)</span><span class="w"> </span><span class="p">[(</span><span class="k">none</span><span class="p">)]</span><span class="o">&gt;</span><span class="w"> </span><span class="k">create</span><span class="w"> </span><span class="k">space</span><span class="w"> </span><span class="n">sst</span><span class="p">(</span><span class="n">partition_num</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span><span class="n">replica_factor</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">vid_type</span><span class="o">=</span><span class="n">fixed_string</span><span class="p">(</span><span class="mi">32</span><span class="p">));</span><span class="w">
</span><span class="w"></span><span class="n">Execution</span><span class="w"> </span><span class="n">succeeded</span><span class="w"> </span><span class="p">(</span><span class="n">time</span><span class="w"> </span><span class="n">spent</span><span class="w"> </span><span class="mi">1468</span><span class="o">/</span><span class="mi">1918</span><span class="w"> </span><span class="n">us</span><span class="p">)</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="p">(</span><span class="n">root</span><span class="o">@</span><span class="n">nebula</span><span class="p">)</span><span class="w"> </span><span class="p">[(</span><span class="k">none</span><span class="p">)]</span><span class="o">&gt;</span><span class="w"> </span><span class="p">:</span><span class="n">sleep</span><span class="w"> </span><span class="mi">20</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="p">(</span><span class="n">root</span><span class="o">@</span><span class="n">nebula</span><span class="p">)</span><span class="w"> </span><span class="p">[(</span><span class="k">none</span><span class="p">)]</span><span class="o">&gt;</span><span class="w"> </span><span class="n">use</span><span class="w"> </span><span class="n">sst</span><span class="w">
</span><span class="w"></span><span class="n">Execution</span><span class="w"> </span><span class="n">succeeded</span><span class="w"> </span><span class="p">(</span><span class="n">time</span><span class="w"> </span><span class="n">spent</span><span class="w"> </span><span class="mi">1253</span><span class="o">/</span><span class="mi">1566</span><span class="w"> </span><span class="n">us</span><span class="p">)</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="n">Wed</span><span class="p">,</span><span class="w"> </span><span class="mi">18</span><span class="w"> </span><span class="n">Aug</span><span class="w"> </span><span class="mi">2021</span><span class="w"> </span><span class="mi">08</span><span class="p">:</span><span class="mi">18</span><span class="p">:</span><span class="mi">13</span><span class="w"> </span><span class="n">UTC</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="p">(</span><span class="n">root</span><span class="o">@</span><span class="n">nebula</span><span class="p">)</span><span class="w"> </span><span class="p">[</span><span class="n">sst</span><span class="p">]</span><span class="o">&gt;</span><span class="w"> </span><span class="k">create</span><span class="w"> </span><span class="n">tag</span><span class="w"> </span><span class="n">player</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="n">string</span><span class="p">,</span><span class="w"> </span><span class="n">age</span><span class="w"> </span><span class="nb">int</span><span class="p">);</span><span class="w">
</span><span class="w"></span><span class="n">Execution</span><span class="w"> </span><span class="n">succeeded</span><span class="w"> </span><span class="p">(</span><span class="n">time</span><span class="w"> </span><span class="n">spent</span><span class="w"> </span><span class="mi">1312</span><span class="o">/</span><span class="mi">1735</span><span class="w"> </span><span class="n">us</span><span class="p">)</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="n">Wed</span><span class="p">,</span><span class="w"> </span><span class="mi">18</span><span class="w"> </span><span class="n">Aug</span><span class="w"> </span><span class="mi">2021</span><span class="w"> </span><span class="mi">08</span><span class="p">:</span><span class="mi">18</span><span class="p">:</span><span class="mi">23</span><span class="w"> </span><span class="n">UTC</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><h3 id="2-搭建容器化的-spark-环境">2. 搭建容器化的 Spark 环境</h3>
<p>利用 big data europe 做的工作，这个过程非常容易。</p>
<p>值得注意的是：</p>
<ul>
<li>现在的 Nebula Exchange 对 Spark 的版本有要求，在现在的 2021 年 8 月，我是用了 spark-2.4.5-hadoop-2.7 的版本。</li>
<li>为了方便，我让 Spark 运行在 Nebula Graph 相同的机器上，并且指定了运行在同一个 Docker 网络下</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">docker run --name spark-master --network nebula-net <span class="se">\
</span><span class="se"></span>    -h spark-master -e <span class="nv">ENABLE_INIT_DAEMON</span><span class="o">=</span><span class="nb">false</span> -d <span class="se">\
</span><span class="se"></span>    bde2020/spark-master:2.4.5-hadoop2.7
</code></pre></td></tr></table>
</div>
</div><p>然后，我们就可以进入到环境中了：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">docker <span class="nb">exec</span> -it spark-master bash
</code></pre></td></tr></table>
</div>
</div><p>进到 Spark 容器中之后，可以像这样安装 maven:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">export</span> <span class="nv">MAVEN_VERSION</span><span class="o">=</span>3.5.4
<span class="nb">export</span> <span class="nv">MAVEN_HOME</span><span class="o">=</span>/usr/lib/mvn
<span class="nb">export</span> <span class="nv">PATH</span><span class="o">=</span><span class="nv">$MAVEN_HOME</span>/bin:<span class="nv">$PATH</span>

wget http://archive.apache.org/dist/maven/maven-3/<span class="nv">$MAVEN_VERSION</span>/binaries/apache-maven-<span class="nv">$MAVEN_VERSION</span>-bin.tar.gz <span class="o">&amp;&amp;</span> <span class="se">\
</span><span class="se"></span>  tar -zxvf apache-maven-<span class="nv">$MAVEN_VERSION</span>-bin.tar.gz <span class="o">&amp;&amp;</span> <span class="se">\
</span><span class="se"></span>  rm apache-maven-<span class="nv">$MAVEN_VERSION</span>-bin.tar.gz <span class="o">&amp;&amp;</span> <span class="se">\
</span><span class="se"></span>  mv apache-maven-<span class="nv">$MAVEN_VERSION</span> /usr/lib/mvn
</code></pre></td></tr></table>
</div>
</div><p>还可以这样在容器里下载 nebula-exchange 的 <code>jar</code> 包：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">cd</span> ~
wget https://repo1.maven.org/maven2/com/vesoft/nebula-exchange/2.1.0/nebula-exchange-2.1.0.jar
</code></pre></td></tr></table>
</div>
</div><h3 id="3-搭建容器化的-hdfs">3. 搭建容器化的 HDFS</h3>
<p>同样借助 big-data-euroupe 的工作，这非常简单，不过我们要做一点修改，让它的 <code>docker-compose.yml</code> 文件里使用 <code>nebula-net</code> 这个之前创建的 Docker 网络。</p>
<p>详细修改的部分参考<a href="#%e9%99%84%e5%bd%95%e4%ba%8c" rel="">附录二</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">git clone https://github.com/big-data-europe/docker-hadoop.git
<span class="nb">cd</span> docker-hadoop
vim docker-compose.yml
docker-compose up -d
</code></pre></td></tr></table>
</div>
</div><h2 id="配置exchange">配置Exchange</h2>
<p>这个配置主要填入的信息就是 Nebula Graph 集群本身和将要写入数据的 Space Name，以及数据源相关的配置（这里我们用 <code>csv</code> 作为例子），最后再配置输出（sink）为 <code>sst</code></p>
<ul>
<li>Nebula Graph
<ul>
<li>GraphD 地址</li>
<li>MetaD 地址</li>
<li>credential</li>
<li>Space Name</li>
</ul>
</li>
<li>数据源
<ul>
<li><code>source: csv</code>
<ul>
<li><code>path</code></li>
<li><code>fields</code> etc.</li>
</ul>
</li>
<li><code>ink: sst</code></li>
</ul>
</li>
</ul>
<p>详细的配置参考<a href="#%e9%99%84%e5%bd%95%e4%ba%8c" rel="">附录二</a></p>
<p>注意，这里 metaD 的地址可以这样获取，可以看到 <code>0.0.0.0:49377-&gt;9559</code> 表示 <code>49377</code> 是外部的地址。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ docker ps <span class="p">|</span> grep meta
887740c15750   vesoft/nebula-metad:v2.0.0                               <span class="s2">&#34;./bin/nebula-metad …&#34;</span>   <span class="m">6</span> hours ago    Up <span class="m">6</span> hours <span class="o">(</span>healthy<span class="o">)</span>    9560/tcp, 0.0.0.0:49377-&gt;9559/tcp, :::49377-&gt;9559/tcp, 0.0.0.0:49376-&gt;19559/tcp, :::49376-&gt;19559/tcp, 0.0.0.0:49375-&gt;19560/tcp, :::49375-&gt;19560/tcp                  nebula-docker-compose_metad0_1
</code></pre></td></tr></table>
</div>
</div><h2 id="生成sst文件">生成SST文件</h2>
<h3 id="1-准备源文件配置文件">1. 准备源文件、配置文件</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">docker cp exchange-sst.conf spark-master:/root/
docker cp player.csv spark-master:/root/
</code></pre></td></tr></table>
</div>
</div><p>其中 <code>player.csv</code> 的例子：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">1100,Tim Duncan,42
1101,Tony Parker,36
1102,LaMarcus Aldridge,33
1103,Rudy Gay,32
1104,Marco Belinelli,32
1105,Danny Green,31
1106,Kyle Anderson,25
1107,Aron Baynes,32
1108,Boris Diaw,36
1109,Tiago Splitter,34
1110,Cory Joseph,27
1111,David West,38
</code></pre></td></tr></table>
</div>
</div><h3 id="2-执行-exchange-程序">2. 执行 exchange 程序</h3>
<p>进入 <code>spark-master</code> 容器，提交执行 <code>exchange</code> 应用。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">docker <span class="nb">exec</span> -it spark-master bash
<span class="nb">cd</span> /root/
/spark/bin/spark-submit --master <span class="nb">local</span> <span class="se">\
</span><span class="se"></span>    --class com.vesoft.nebula.exchange.Exchange nebula-exchange-2.1.0.jar<span class="se">\
</span><span class="se"></span>    -c exchange-sst.conf
</code></pre></td></tr></table>
</div>
</div><p>检查执行结果：</p>
<p><code>spark-submit</code> 输出：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">21/08/17 03:37:43 INFO TaskSetManager: Finished task 31.0 in stage 2.0 <span class="o">(</span>TID 33<span class="o">)</span> in <span class="m">1093</span> ms on localhost <span class="o">(</span>executor driver<span class="o">)</span> <span class="o">(</span>32/32<span class="o">)</span>
21/08/17 03:37:43 INFO TaskSchedulerImpl: Removed TaskSet 2.0, whose tasks have all completed, from pool
21/08/17 03:37:43 INFO DAGScheduler: ResultStage <span class="m">2</span> <span class="o">(</span>foreachPartition at VerticesProcessor.scala:179<span class="o">)</span> finished in 22.336 s
21/08/17 03:37:43 INFO DAGScheduler: Job <span class="m">1</span> finished: foreachPartition at VerticesProcessor.scala:179, took 22.500639 s
21/08/17 03:37:43 INFO Exchange$: SST-Import: failure.player: <span class="m">0</span>
21/08/17 03:37:43 WARN Exchange$: Edge is not defined
21/08/17 03:37:43 INFO SparkUI: Stopped Spark web UI at http://spark-master:4040
21/08/17 03:37:43 INFO MapOutputTrackerMasterEndpoint: MapOutputTrackerMasterEndpoint stopped!
</code></pre></td></tr></table>
</div>
</div><p>验证 HDFS 上生成的 SST 文件：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">docker <span class="nb">exec</span> -it namenode /bin/bash

root@2db58903fb53:/# hdfs dfs -ls /sst
Found <span class="m">10</span> items
drwxr-xr-x   - root supergroup          <span class="m">0</span> 2021-08-17 03:37 /sst/1
drwxr-xr-x   - root supergroup          <span class="m">0</span> 2021-08-17 03:37 /sst/10
drwxr-xr-x   - root supergroup          <span class="m">0</span> 2021-08-17 03:37 /sst/2
drwxr-xr-x   - root supergroup          <span class="m">0</span> 2021-08-17 03:37 /sst/3
drwxr-xr-x   - root supergroup          <span class="m">0</span> 2021-08-17 03:37 /sst/4
drwxr-xr-x   - root supergroup          <span class="m">0</span> 2021-08-17 03:37 /sst/5
drwxr-xr-x   - root supergroup          <span class="m">0</span> 2021-08-17 03:37 /sst/6
drwxr-xr-x   - root supergroup          <span class="m">0</span> 2021-08-17 03:37 /sst/7
drwxr-xr-x   - root supergroup          <span class="m">0</span> 2021-08-17 03:37 /sst/8
drwxr-xr-x   - root supergroup          <span class="m">0</span> 2021-08-17 03:37 /sst/9
</code></pre></td></tr></table>
</div>
</div><h2 id="写入sst到nebulagraph">写入SST到NebulaGraph</h2>
<p>这里的操作实际上都是参考文档：<a href="https://docs.nebula-graph.com.cn/master/nebula-exchange/use-exchange/ex-ug-import-from-sst/" target="_blank" rel="noopener noreffer">SST 导入</a>，得来。其中就是从 console 之中执行了两步操作：</p>
<ul>
<li>Download</li>
<li>Ingest</li>
</ul>
<p>其中 Download 实际上是触发 Nebula Graph 从服务端发起 HDFS Client 的 download，获取 HDFS 上的 SST 文件，然后放到 storageD 能访问的本地路径下，这里，需要我们在服务端部署 HDFS 的依赖。因为我们是最小实践，我就偷懒手动做了这个 Download 的操作。</p>
<h3 id="1-手动下载">1. 手动下载</h3>
<p>这里边手动下载我们就要知道 Nebula Graph 服务端下载的路径，实际上是 <code>/data/storage/nebula/&lt;space_id&gt;/download/</code>，这里的 Space ID 需要手动获取一下：</p>
<p>这个例子里，我们的 Space Name 是 <code>sst</code>，而 Space ID 是 <code>49</code>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="p">(</span><span class="n">root</span><span class="o">@</span><span class="n">nebula</span><span class="p">)</span><span class="w"> </span><span class="p">[</span><span class="n">sst</span><span class="p">]</span><span class="o">&gt;</span><span class="w"> </span><span class="k">DESC</span><span class="w"> </span><span class="k">space</span><span class="w"> </span><span class="n">sst</span><span class="w">
</span><span class="w"></span><span class="o">+</span><span class="c1">----+-------+------------------+----------------+---------+------------+--------------------+-------------+-----------+
</span><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="n">ID</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Name</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="n">Partition</span><span class="w"> </span><span class="nb">Number</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Replica</span><span class="w"> </span><span class="n">Factor</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Charset</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="k">Collate</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="n">Vid</span><span class="w"> </span><span class="k">Type</span><span class="w">           </span><span class="o">|</span><span class="w"> </span><span class="k">Atomic</span><span class="w"> </span><span class="n">Edge</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="k">Group</span><span class="w">     </span><span class="o">|</span><span class="w">
</span><span class="w"></span><span class="o">+</span><span class="c1">----+-------+------------------+----------------+---------+------------+--------------------+-------------+-----------+
</span><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="mi">49</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;sst&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="mi">10</span><span class="w">               </span><span class="o">|</span><span class="w"> </span><span class="mi">1</span><span class="w">              </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;utf8&#34;</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;utf8_bin&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;FIXED_STRING(32)&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;false&#34;</span><span class="w">     </span><span class="o">|</span><span class="w"> </span><span class="s2">&#34;default&#34;</span><span class="w"> </span><span class="o">|</span><span class="w">
</span><span class="w"></span><span class="o">+</span><span class="c1">----+-------+------------------+----------------+---------+------------+--------------------+-------------+-----------+
</span></code></pre></td></tr></table>
</div>
</div><p>于是，下边的操作就是手动把 SST 文件从 HDFS 之中 <code>get</code> 下来，再拷贝到 storageD 之中。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">docker <span class="nb">exec</span> -it namenode /bin/bash

$ hdfs dfs -get /sst /sst
<span class="nb">exit</span>
docker cp namenode:/sst .
docker <span class="nb">exec</span> -it nebula-docker-compose_storaged0_1 mkdir -p /data/storage/nebula/49/download/
docker <span class="nb">exec</span> -it nebula-docker-compose_storaged1_1 mkdir -p /data/storage/nebula/49/download/
docker <span class="nb">exec</span> -it nebula-docker-compose_storaged2_1 mkdir -p /data/storage/nebula/49/download/
docker cp sst nebula-docker-compose_storaged0_1:/data/storage/nebula/49/download/
docker cp sst nebula-docker-compose_storaged1_1:/data/storage/nebula/49/download/
docker cp sst nebula-docker-compose_storaged2_1:/data/storage/nebula/49/download/
</code></pre></td></tr></table>
</div>
</div><h3 id="2-sst-文件导入">2. SST 文件导入</h3>
<ul>
<li>进入 Nebula-Console 所在的容器</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">~/.nebula-up/console.sh
/ <span class="c1">#</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>在 console 容器里发起链接到图数据库，其中 <code>192.168.x.y</code> 是我所在的 Linux VM 的第一个网卡地址，请换成您的</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">/ # nebula-console -addr 192.168.x.y -port 9669 -user root -p password
[INFO] connection pool is initialized successfully

Welcome to Nebula Graph!
</code></pre></td></tr></table>
</div>
</div><ul>
<li>执行 <code>INGEST</code> 开始让 StorageD 读取 SST 文件</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="o">(</span>root@nebula<span class="o">)</span> <span class="o">[(</span>none<span class="o">)]</span>&gt; use sst
<span class="o">(</span>root@nebula<span class="o">)</span> <span class="o">[</span>sst<span class="o">]</span>&gt; INGEST<span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><p>我们可以用如下方法实时查看 Nebula Graph 服务端的日志</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">tail -f ~/.nebula-up/nebula-docker-compose/logs/*/*
</code></pre></td></tr></table>
</div>
</div><p>成功的 INGEST 日志：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">I0817 08:03:28.611877   <span class="m">169</span> EventListner.h:96<span class="o">]</span> Ingest external SST file: column family default, the external file path /data/storage/nebula/49/download/8/8-6.sst, the internal file path /data/storage/nebula/49/data/000023.sst, the properties of the table: <span class="c1"># data blocks=1; # entries=1; # deletions=0; # merge operands=0; # range deletions=0; raw key size=48; raw average key size=48.000000; raw value size=40; raw average value size=40.000000; data block size=75; index block size (user-key? 0, delta-value? 0)=66; filter block size=0; (estimated) table size=141; filter policy name=N/A; prefix extractor name=nullptr; column family ID=N/A; column family name=N/A; comparator name=leveldb.BytewiseComparator; merge operator name=nullptr; property collectors names=[]; SST file compression algo=Snappy; SST file compression options=window_bits=-14; level=32767; strategy=0; max_dict_bytes=0; zstd_max_train_bytes=0; enabled=0; ; creation time=0; time stamp of earliest key=0; file creation time=0;</span>
E0817 08:03:28.611912   <span class="m">169</span> StorageHttpIngestHandler.cpp:63<span class="o">]</span> SSTFile ingest successfully
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>题图版权：<a href="https://unsplash.com/photos/n6B49lTx7NM" target="_blank" rel="noopener noreffer">Pietro Jeng</a></p>
</blockquote>
<h2 id="附录">附录</h2>
<h3 id="附录一">附录一</h3>
<p><code>docker-compose.yaml</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span><span class="lnt">150
</span><span class="lnt">151
</span><span class="lnt">152
</span><span class="lnt">153
</span><span class="lnt">154
</span><span class="lnt">155
</span><span class="lnt">156
</span><span class="lnt">157
</span><span class="lnt">158
</span><span class="lnt">159
</span><span class="lnt">160
</span><span class="lnt">161
</span><span class="lnt">162
</span><span class="lnt">163
</span><span class="lnt">164
</span><span class="lnt">165
</span><span class="lnt">166
</span><span class="lnt">167
</span><span class="lnt">168
</span><span class="lnt">169
</span><span class="lnt">170
</span><span class="lnt">171
</span><span class="lnt">172
</span><span class="lnt">173
</span><span class="lnt">174
</span><span class="lnt">175
</span><span class="lnt">176
</span><span class="lnt">177
</span><span class="lnt">178
</span><span class="lnt">179
</span><span class="lnt">180
</span><span class="lnt">181
</span><span class="lnt">182
</span><span class="lnt">183
</span><span class="lnt">184
</span><span class="lnt">185
</span><span class="lnt">186
</span><span class="lnt">187
</span><span class="lnt">188
</span><span class="lnt">189
</span><span class="lnt">190
</span><span class="lnt">191
</span><span class="lnt">192
</span><span class="lnt">193
</span><span class="lnt">194
</span><span class="lnt">195
</span><span class="lnt">196
</span><span class="lnt">197
</span><span class="lnt">198
</span><span class="lnt">199
</span><span class="lnt">200
</span><span class="lnt">201
</span><span class="lnt">202
</span><span class="lnt">203
</span><span class="lnt">204
</span><span class="lnt">205
</span><span class="lnt">206
</span><span class="lnt">207
</span><span class="lnt">208
</span><span class="lnt">209
</span><span class="lnt">210
</span><span class="lnt">211
</span><span class="lnt">212
</span><span class="lnt">213
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="gh">diff --git a/docker-compose.yaml b/docker-compose.yaml
</span><span class="gh">index 48854de..cfeaedb 100644
</span><span class="gh"></span><span class="gd">--- a/docker-compose.yaml
</span><span class="gd"></span><span class="gi">+++ b/docker-compose.yaml
</span><span class="gi"></span><span class="gu">@@ -6,11 +6,13 @@ services:
</span><span class="gu"></span>       USER: root
       TZ:   &#34;${TZ}&#34;
     command:
<span class="gd">-      - --meta_server_addrs=metad0:9559,metad1:9559,metad2:9559
</span><span class="gd"></span><span class="gi">+      - --meta_server_addrs=metad0:9559
</span><span class="gi"></span>       - --local_ip=metad0
       - --ws_ip=metad0
       - --port=9559
       - --ws_http_port=19559
<span class="gi">+      - --ws_storage_http_port=19779
</span><span class="gi"></span>       - --data_path=/data/meta
       - --log_dir=/logs
       - --v=0
<span class="gu">@@ -34,81 +36,14 @@ services:
</span><span class="gu"></span>     cap_add:
       - SYS_PTRACE

<span class="gd">-  metad1:
</span><span class="gd">-    image: vesoft/nebula-metad:v2.0.0
</span><span class="gd">-    environment:
</span><span class="gd">-      USER: root
</span><span class="gd">-      TZ:   &#34;${TZ}&#34;
</span><span class="gd">-    command:
</span><span class="gd">-      - --meta_server_addrs=metad0:9559,metad1:9559,metad2:9559
</span><span class="gd">-      - --local_ip=metad1
</span><span class="gd">-      - --ws_ip=metad1
</span><span class="gd">-      - --port=9559
</span><span class="gd">-      - --ws_http_port=19559
</span><span class="gd">-      - --data_path=/data/meta
</span><span class="gd">-      - --log_dir=/logs
</span><span class="gd">-      - --v=0
</span><span class="gd">-      - --minloglevel=0
</span><span class="gd">-    healthcheck:
</span><span class="gd">-      test: [&#34;CMD&#34;, &#34;curl&#34;, &#34;-sf&#34;, &#34;http://metad1:19559/status&#34;]
</span><span class="gd">-      interval: 30s
</span><span class="gd">-      timeout: 10s
</span><span class="gd">-      retries: 3
</span><span class="gd">-      start_period: 20s
</span><span class="gd">-    ports:
</span><span class="gd">-      - 9559
</span><span class="gd">-      - 19559
</span><span class="gd">-      - 19560
</span><span class="gd">-    volumes:
</span><span class="gd">-      - ./data/meta1:/data/meta
</span><span class="gd">-      - ./logs/meta1:/logs
</span><span class="gd">-    networks:
</span><span class="gd">-      - nebula-net
</span><span class="gd">-    restart: on-failure
</span><span class="gd">-    cap_add:
</span><span class="gd">-      - SYS_PTRACE
</span><span class="gd">-
</span><span class="gd">-  metad2:
</span><span class="gd">-    image: vesoft/nebula-metad:v2.0.0
</span><span class="gd">-    environment:
</span><span class="gd">-      USER: root
</span><span class="gd">-      TZ:   &#34;${TZ}&#34;
</span><span class="gd">-    command:
</span><span class="gd">-      - --meta_server_addrs=metad0:9559,metad1:9559,metad2:9559
</span><span class="gd">-      - --local_ip=metad2
</span><span class="gd">-      - --ws_ip=metad2
</span><span class="gd">-      - --port=9559
</span><span class="gd">-      - --ws_http_port=19559
</span><span class="gd">-      - --data_path=/data/meta
</span><span class="gd">-      - --log_dir=/logs
</span><span class="gd">-      - --v=0
</span><span class="gd">-      - --minloglevel=0
</span><span class="gd">-    healthcheck:
</span><span class="gd">-      test: [&#34;CMD&#34;, &#34;curl&#34;, &#34;-sf&#34;, &#34;http://metad2:19559/status&#34;]
</span><span class="gd">-      interval: 30s
</span><span class="gd">-      timeout: 10s
</span><span class="gd">-      retries: 3
</span><span class="gd">-      start_period: 20s
</span><span class="gd">-    ports:
</span><span class="gd">-      - 9559
</span><span class="gd">-      - 19559
</span><span class="gd">-      - 19560
</span><span class="gd">-    volumes:
</span><span class="gd">-      - ./data/meta2:/data/meta
</span><span class="gd">-      - ./logs/meta2:/logs
</span><span class="gd">-    networks:
</span><span class="gd">-      - nebula-net
</span><span class="gd">-    restart: on-failure
</span><span class="gd">-    cap_add:
</span><span class="gd">-      - SYS_PTRACE
</span><span class="gd">-
</span><span class="gd"></span>   storaged0:
     image: vesoft/nebula-storaged:v2.0.0
     environment:
       USER: root
       TZ:   &#34;${TZ}&#34;
     command:
<span class="gd">-      - --meta_server_addrs=metad0:9559,metad1:9559,metad2:9559
</span><span class="gd"></span><span class="gi">+      - --meta_server_addrs=metad0:9559
</span><span class="gi"></span>       - --local_ip=storaged0
       - --ws_ip=storaged0
       - --port=9779
<span class="gu">@@ -119,8 +54,8 @@ services:
</span><span class="gu"></span>       - --minloglevel=0
     depends_on:
       - metad0
<span class="gd">-      - metad1
</span><span class="gd">-      - metad2
</span><span class="gd"></span>     healthcheck:
       test: [&#34;CMD&#34;, &#34;curl&#34;, &#34;-sf&#34;, &#34;http://storaged0:19779/status&#34;]
       interval: 30s
<span class="gu">@@ -146,7 +81,7 @@ services:
</span><span class="gu"></span>       USER: root
       TZ:   &#34;${TZ}&#34;
     command:
<span class="gd">-      - --meta_server_addrs=metad0:9559,metad1:9559,metad2:9559
</span><span class="gd"></span><span class="gi">+      - --meta_server_addrs=metad0:9559
</span><span class="gi"></span>       - --local_ip=storaged1
       - --ws_ip=storaged1
       - --port=9779
<span class="gu">@@ -157,8 +92,8 @@ services:
</span><span class="gu"></span>       - --minloglevel=0
     depends_on:
       - metad0
<span class="gd">-      - metad1
</span><span class="gd">-      - metad2
</span><span class="gd"></span>     healthcheck:
       test: [&#34;CMD&#34;, &#34;curl&#34;, &#34;-sf&#34;, &#34;http://storaged1:19779/status&#34;]
       interval: 30s
<span class="gu">@@ -184,7 +119,7 @@ services:
</span><span class="gu"></span>       USER: root
       TZ:   &#34;${TZ}&#34;
     command:
<span class="gd">-      - --meta_server_addrs=metad0:9559,metad1:9559,metad2:9559
</span><span class="gd"></span><span class="gi">+      - --meta_server_addrs=metad0:9559
</span><span class="gi"></span>       - --local_ip=storaged2
       - --ws_ip=storaged2
       - --port=9779
<span class="gu">@@ -195,8 +130,8 @@ services:
</span><span class="gu"></span>       - --minloglevel=0
     depends_on:
       - metad0
<span class="gd">-      - metad1
</span><span class="gd">-      - metad2
</span><span class="gd"></span>     healthcheck:
       test: [&#34;CMD&#34;, &#34;curl&#34;, &#34;-sf&#34;, &#34;http://storaged2:19779/status&#34;]
       interval: 30s
<span class="gu">@@ -222,17 +157,19 @@ services:
</span><span class="gu"></span>       USER: root
       TZ:   &#34;${TZ}&#34;
     command:
<span class="gd">-      - --meta_server_addrs=metad0:9559,metad1:9559,metad2:9559
</span><span class="gd"></span><span class="gi">+      - --meta_server_addrs=metad0:9559
</span><span class="gi"></span>       - --port=9669
       - --ws_ip=graphd
       - --ws_http_port=19669
<span class="gi">+      - --ws_meta_http_port=19559
</span><span class="gi"></span>       - --log_dir=/logs
       - --v=0
       - --minloglevel=0
     depends_on:
       - metad0
<span class="gd">-      - metad1
</span><span class="gd">-      - metad2
</span><span class="gd"></span>     healthcheck:
       test: [&#34;CMD&#34;, &#34;curl&#34;, &#34;-sf&#34;, &#34;http://graphd:19669/status&#34;]
       interval: 30s
<span class="gu">@@ -257,17 +194,19 @@ services:
</span><span class="gu"></span>       USER: root
       TZ:   &#34;${TZ}&#34;
     command:
<span class="gd">-      - --meta_server_addrs=metad0:9559,metad1:9559,metad2:9559
</span><span class="gd"></span><span class="gi">+      - --meta_server_addrs=metad0:9559
</span><span class="gi"></span>       - --port=9669
       - --ws_ip=graphd1
       - --ws_http_port=19669
<span class="gi">+      - --ws_meta_http_port=19559
</span><span class="gi"></span>       - --log_dir=/logs
       - --v=0
       - --minloglevel=0
     depends_on:
       - metad0
<span class="gd">-      - metad1
</span><span class="gd">-      - metad2
</span><span class="gd"></span>     healthcheck:
       test: [&#34;CMD&#34;, &#34;curl&#34;, &#34;-sf&#34;, &#34;http://graphd1:19669/status&#34;]
       interval: 30s
<span class="gu">@@ -292,17 +231,21 @@ services:
</span><span class="gu"></span>       USER: root
       TZ:   &#34;${TZ}&#34;
     command:
<span class="gd">-      - --meta_server_addrs=metad0:9559,metad1:9559,metad2:9559
</span><span class="gd"></span><span class="gi">+      - --meta_server_addrs=metad0:9559
</span><span class="gi"></span>       - --port=9669
       - --ws_ip=graphd2
       - --ws_http_port=19669
<span class="gi">+      - --ws_meta_http_port=19559
</span><span class="gi"></span>       - --log_dir=/logs
       - --v=0
       - --minloglevel=0
<span class="gi">+      - --storage_client_timeout_ms=60000
</span><span class="gi">+      - --local_config=true
</span><span class="gi"></span>     depends_on:
       - metad0
<span class="gd">-      - metad1
</span><span class="gd">-      - metad2
</span><span class="gd"></span>     healthcheck:
       test: [&#34;CMD&#34;, &#34;curl&#34;, &#34;-sf&#34;, &#34;http://graphd2:19669/status&#34;]
       interval: 30s
<span class="gu">@@ -323,3 +266,4 @@ services:
</span><span class="gu"></span>
 networks:
   nebula-net:
<span class="gi">+    external: true
</span></code></pre></td></tr></table>
</div>
</div><h3 id="附录二">附录二</h3>
<p><a href="https://github.com/big-data-europe/docker-hadoop" target="_blank" rel="noopener noreffer">https://github.com/big-data-europe/docker-hadoop</a> 的 <code>docker-compose.yml</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="gh">diff --git a/docker-compose.yml b/docker-compose.yml
</span><span class="gh">index ed40dc6..66ff1f4 100644
</span><span class="gh"></span><span class="gd">--- a/docker-compose.yml
</span><span class="gd"></span><span class="gi">+++ b/docker-compose.yml
</span><span class="gi"></span><span class="gu">@@ -14,6 +14,8 @@ services:
</span><span class="gu"></span>       - CLUSTER_NAME=test
     env_file:
       - ./hadoop.env
<span class="gi">+    networks:
</span><span class="gi">+      - nebula-net
</span><span class="gi"></span>
   datanode:
     image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
<span class="gu">@@ -25,6 +27,8 @@ services:
</span><span class="gu"></span>       SERVICE_PRECONDITION: &#34;namenode:9870&#34;
     env_file:
       - ./hadoop.env
<span class="gi">+    networks:
</span><span class="gi">+      - nebula-net
</span><span class="gi"></span>
   resourcemanager:
     image: bde2020/hadoop-resourcemanager:2.0.0-hadoop3.2.1-java8
<span class="gu">@@ -34,6 +38,8 @@ services:
</span><span class="gu"></span>       SERVICE_PRECONDITION: &#34;namenode:9000 namenode:9870 datanode:9864&#34;
     env_file:
       - ./hadoop.env
<span class="gi">+    networks:
</span><span class="gi">+      - nebula-net
</span><span class="gi"></span>
   nodemanager1:
     image: bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8
<span class="gu">@@ -43,6 +49,8 @@ services:
</span><span class="gu"></span>       SERVICE_PRECONDITION: &#34;namenode:9000 namenode:9870 datanode:9864 resourcemanager:8088&#34;
     env_file:
       - ./hadoop.env
<span class="gi">+    networks:
</span><span class="gi">+      - nebula-net
</span><span class="gi"></span>
   historyserver:
     image: bde2020/hadoop-historyserver:2.0.0-hadoop3.2.1-java8
<span class="gu">@@ -54,8 +62,14 @@ services:
</span><span class="gu"></span>       - hadoop_historyserver:/hadoop/yarn/timeline
     env_file:
       - ./hadoop.env
<span class="gi">+    networks:
</span><span class="gi">+      - nebula-net
</span><span class="gi"></span>
 volumes:
   hadoop_namenode:
   hadoop_datanode:
   hadoop_historyserver:
<span class="gi">+
</span><span class="gi">+networks:
</span><span class="gi">+  nebula-net:
</span><span class="gi">+    external: true
</span></code></pre></td></tr></table>
</div>
</div><h3 id="附录三">附录三</h3>
<p><code>nebula-exchange-sst.conf</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span><span class="lnt">88
</span><span class="lnt">89
</span><span class="lnt">90
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="p">{</span>
  <span class="c"># Spark relation config</span>
  <span class="nx">spark</span><span class="err">:</span> <span class="p">{</span>
    <span class="nx">app</span><span class="err">:</span> <span class="p">{</span>
      <span class="nx">name</span><span class="err">:</span> <span class="nx">Nebula</span> <span class="nx">Exchange</span> <span class="mf">2.1</span>
    <span class="p">}</span>

    <span class="nx">master</span><span class="err">:</span><span class="nx">local</span>

    <span class="nx">driver</span><span class="err">:</span> <span class="p">{</span>
      <span class="nx">cores</span><span class="err">:</span> <span class="mi">1</span>
      <span class="nx">maxResultSize</span><span class="err">:</span> <span class="mi">1</span><span class="nx">G</span>
    <span class="p">}</span>

    <span class="nx">executor</span><span class="err">:</span> <span class="p">{</span>
        <span class="nx">memory</span><span class="err">:</span><span class="mi">1</span><span class="nx">G</span>
    <span class="p">}</span>

    <span class="nx">cores</span><span class="err">:</span><span class="p">{</span>
      <span class="nx">max</span><span class="err">:</span> <span class="mi">16</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="c"># Nebula Graph relation config</span>
  <span class="nx">nebula</span><span class="err">:</span> <span class="p">{</span>
    <span class="nx">address</span><span class="err">:</span><span class="p">{</span>
      <span class="nx">graph</span><span class="err">:</span><span class="p">[</span><span class="s2">&#34;192.168.8.128:9669&#34;</span><span class="p">]</span>
      <span class="nx">meta</span><span class="err">:</span><span class="p">[</span><span class="s2">&#34;192.168.8.128:49377&#34;</span><span class="p">]</span>
    <span class="p">}</span>
    <span class="nx">user</span><span class="err">:</span> <span class="nx">root</span>
    <span class="nx">pswd</span><span class="err">:</span> <span class="nx">nebula</span>
    <span class="nx">space</span><span class="err">:</span> <span class="nx">sst</span>

    <span class="c"># parameters for SST import, not required</span>
    <span class="nx">path</span><span class="err">:</span><span class="p">{</span>
        <span class="nx">local</span><span class="err">:</span><span class="s2">&#34;/tmp&#34;</span>
        <span class="nx">remote</span><span class="err">:</span><span class="s2">&#34;/sst&#34;</span>
        <span class="nx">hdfs</span><span class="p">.</span><span class="nx">namenode</span><span class="err">:</span> <span class="s2">&#34;hdfs://192.168.8.128:9000&#34;</span>
    <span class="p">}</span>

    <span class="c"># nebula client connection parameters</span>
    <span class="nx">connection</span> <span class="p">{</span>
      <span class="c"># socket connect &amp; execute timeout, unit: millisecond</span>
      <span class="nx">timeout</span><span class="err">:</span> <span class="mi">30000</span>
    <span class="p">}</span>

    <span class="nx">error</span><span class="err">:</span> <span class="p">{</span>
      <span class="c"># max number of failures, if the number of failures is bigger than max, then exit the application.</span>
      <span class="nx">max</span><span class="err">:</span> <span class="mi">32</span>
      <span class="c"># failed import job will be recorded in output path</span>
      <span class="nx">output</span><span class="err">:</span> <span class="err">/</span><span class="nx">tmp</span><span class="err">/</span><span class="nx">errors</span>
    <span class="p">}</span>

    <span class="c"># use google&#39;s RateLimiter to limit the requests send to NebulaGraph</span>
    <span class="nx">rate</span><span class="err">:</span> <span class="p">{</span>
      <span class="c"># the stable throughput of RateLimiter</span>
      <span class="nx">limit</span><span class="err">:</span> <span class="mi">1024</span>
      <span class="c"># Acquires a permit from RateLimiter, unit: MILLISECONDS</span>
      <span class="c"># if it can&#39;t be obtained within the specified timeout, then give up the request.</span>
      <span class="nx">timeout</span><span class="err">:</span> <span class="mi">1000</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="c"># Processing tags</span>
  <span class="c"># There are tag config examples for different dataSources.</span>
  <span class="nx">tags</span><span class="err">:</span> <span class="p">[</span>

    <span class="c"># HDFS csv</span>
    <span class="c"># Import mode is sst, just change type.sink to client if you want to use client import mode.</span>
    <span class="p">{</span>
      <span class="nx">name</span><span class="err">:</span> <span class="nx">player</span>
      <span class="nx">type</span><span class="err">:</span> <span class="p">{</span>
        <span class="nx">source</span><span class="err">:</span> <span class="nx">csv</span>
        <span class="nx">sink</span><span class="err">:</span> <span class="nx">sst</span>
      <span class="p">}</span>
      <span class="nx">path</span><span class="err">:</span> <span class="s2">&#34;file:///root/player.csv&#34;</span>
      <span class="c"># if your csv file has no header, then use _c0,_c1,_c2,.. to indicate fields</span>
      <span class="nx">fields</span><span class="err">:</span> <span class="p">[</span><span class="nx">_c1</span><span class="p">,</span> <span class="nx">_c2</span><span class="p">]</span>
      <span class="nx">nebula</span><span class="p">.</span><span class="nx">fields</span><span class="err">:</span> <span class="p">[</span><span class="nx">name</span><span class="p">,</span> <span class="nx">age</span><span class="p">]</span>
      <span class="nx">vertex</span><span class="err">:</span> <span class="p">{</span>
        <span class="nx">field</span><span class="err">:</span><span class="nx">_c0</span>
      <span class="p">}</span>
      <span class="nx">separator</span><span class="err">:</span> <span class="s2">&#34;,&#34;</span>
      <span class="nx">header</span><span class="err">:</span> <span class="kc">false</span>
      <span class="nx">batch</span><span class="err">:</span> <span class="mi">256</span>
      <span class="nx">partition</span><span class="err">:</span> <span class="mi">32</span>
    <span class="p">}</span>

  <span class="p">]</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>Nebula Operator Kind，一键单机玩转 Nebula K8s 集群</title>
    <link>https://siwei.io/nebula-operator-kind/</link>
    <pubDate>Wed, 09 Jun 2021 19:27:00 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/nebula-operator-kind/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>Nebula-Kind，无需依赖，一键安装尝鲜基于 Nebula Operator 的 K8s Nebula Graph Cluster。</p>
<p>注： KIND 是一个 K8s 的 SIG，代表 K8s in Docker。</p>
</blockquote>
<h2 id="nebula-operator-kind-是什么">Nebula-Operator-Kind 是什么</h2>
<p>Nebula Graph 作为云原生的分布式开源图数据库，有开源的 <a href="https://github.com/vesoft-inc/nebula-operator" target="_blank" rel="noopener noreffer">K8s Operator</a> 供大家在 K8s 上方便的通过 CRD 去维护、部署 Nebula Graph 集群。</p>
<p>对于手头没有方便的 K8s 环境的同学，如果想尝鲜、学习 Nebula Graph 的 K8s Operator 的话，可能需要耗费一些精力才能搭起来一整套的控制平面的依赖。</p>
<p>作为一个懒人，我做利用 K8s in Docker(<a href="https://kind.sigs.K8s.io/" target="_blank" rel="noopener noreffer">KIND</a>)，和之前做 <a href="https://github.com/wey-gu/nebula-up" target="_blank" rel="noopener noreffer">Nebula-Up</a> 的 shell 脚本架子，快速的搞了一个一键安装工具：Nebula-Operator-Kind</p>
<p>它能直接帮我们：</p>
<ul>
<li>安装 Docker</li>
<li>安装 K8s(KIND)</li>
<li>安装 PV Provider</li>
<li>安装 Nebula-Operator 以及依赖</li>
<li>安装 Nebula-Console</li>
<li>配置 nodePort 用以一键直连 Nebula 集群</li>
<li>安装 kubectl 用来体验 Nebula-Operator 的 CRD 配置</li>
</ul>
<h2 id="如何使用">如何使用</h2>
<p>安装：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">curl -sL nebula-kind.siwei.io/install.sh <span class="p">|</span> bash
</code></pre></td></tr></table>
</div>
</div><p>成功之后：
</p>
<p>用 <code>~/.nebula-kind/bin/console</code> 一行连接集群：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">~/.nebula-kind/bin/console -u user -p password --address<span class="o">=</span>127.0.0.1 --port<span class="o">=</span><span class="m">30000</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="详细信息">详细信息</h2>
<p>Repo 的地址是：https://github.com/wey-gu/nebula-operator-kind ，里边有更多的信息，欢迎大家试用、反馈、PR 哈！</p>
<blockquote>
<p>Updated Sept. 2021</p>
</blockquote>
<p>如果在 KubeSphere All-in-one 环境安装：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">curl -sL nebula-kind.siwei.io/install-ks-1.sh <span class="p">|</span> bash
</code></pre></td></tr></table>
</div>
</div><p>如果在 Minikube、其他 K8s 之中安装</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">curl -sL nebula-kind.siwei.io/install-on-k8s.sh <span class="p">|</span> bash
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>题图版权：<a href="https://unsplash.com/photos/a4Gz2DD4dX0" target="_blank" rel="noopener noreffer">Maik Hankemann</a></p>
</blockquote>]]></description>
</item><item>
    <title>用图数据库可视化探索 Chia Network 区块链数据</title>
    <link>https://siwei.io/nebula-chia/</link>
    <pubDate>Wed, 26 May 2021 21:17:04 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/nebula-chia/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>这篇文章里，我全网首次地分析了 Chia Network 的全链数据，并做了将全链数据导入图数据库：Nebula Graph 之中的尝试，从而可视化地探索了 Chia 图中数据之间的关联关系。</p>
<p>我把涉及的代码开源在了这里：https://github.com/wey-gu/nebula-chia</p>
</blockquote>
<h2 id="1-chia-是什么">1. Chia 是什么?</h2>
<p>Chia Network 是由 BitTorrent 的作者 Bram Cohen 的团队在 2017 年创建的区块链项目。</p>
<h3 id="11-为什么再搞一个区块链">1.1 为什么再搞一个区块链?</h3>
<p>Chia 用了全新的中本聪共识算法，这个算法通过不允许并行计算，让挖矿（Proof of Work）所需算力和能耗降到非常低，这使得超大组织、玩家没法像在其他的区块链项目那样有算力的绝对优势，也一定程度上规避了能源的浪费。</p>
<h3 id="12-如何连接chia">1.2 如何连接Chia?</h3>
<p>我们可以通过 Chia Network 的客户端来访问它，这个客户端是 Electron + Python 的程序，天然跨平台，既有 GUI 又有 CLI 的方式。</p>
<h4 id="121-安装">1.2.1 安装</h4>
<p>只需要按照官方的 Guide 来下载安装就好， <a href="https://github.com/Chia-Network/chia-blockchain/wiki/INSTALL" target="_blank" rel="noopener noreffer">https://github.com/Chia-Network/chia-blockchain/wiki/INSTALL</a>，我在 M1 Mac 下安装的时候脚本出了点小问题，大概是因为拉取二进制 wheel 文件网络出问题走到了编译 wheel的逻辑，而那里是依赖 <code>cargo</code>的，如果大家遇到了这个问题，可以提前手动安装一下 rust，或者 cherry-pick 我的这个 <a href="https://github.com/Chia-Network/chia-blockchain/pull/3789" target="_blank" rel="noopener noreffer">PR</a> 。</p>
<h4 id="122-运行">1.2.2 运行</h4>
<ul>
<li>按照官方 guide，比如 macOS 来说，最后一步执行<code>npm run electron &amp;</code> 就是运行它的GUI客户端。</li>
<li>如果大家像我一样喜欢 CLI，直接在执行完 <code>. ./activate</code> 之后就可以 <code>chia --help</code>了哈☺，里边有只启动部分服务的方式（相比 GUI 启动所有来说)。</li>
</ul>
<p>在运行之后，如果你的网络不是多层 NAT 的那种，理论上您可以连到 <code>mainnet</code> 并且自动和主链同步数据了，如果您是第二次运行，连接主链，一开始可能有一阵子同步的<code>block</code> 数是不变的，也没有 <code>peer</code> 连过来，不必惊慌，等一下就好了。</p>
<blockquote>
<p>Tips:</p>
<ul>
<li>第一次连到 Chia Network 的同学们，客户端会自动生成一个钱包，及的保存那一串词，它们就是你的私钥哦。</li>
<li>万一，如果真的连不上的话，可能需要在路由上配置，<a href="https://www.homenethowto.com/ports-and-nat/upnp-automatic-port-forward/" target="_blank" rel="noopener noreffer">UPnP</a>，防火墙要允许 8444。</li>
</ul>
</blockquote>
<h4 id="123-访问-chia-的数据">1.2.3 访问 Chia 的数据</h4>
<p>Chia 的客户端把数据存在了几个 SQLite 数据库里，它们的路径是我们安装客户端的用户的家目录：<code>~/.chia/mainnet</code></p>
<p>下边就是运行起来 Chia 之后生成的主要的两个数据库的二进制文件：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">~/.chia/mainnet/db 
❯ ll -h
total 4350416
-rw-r--r--  1 weyl  staff   2.0G May  6 12:06 blockchain_v1_mainnet.sqlite
-rw-r--r--  1 weyl  staff    64K May  6 11:17 blockchain_v1_mainnet.sqlite-shm
-rw-r--r--  1 weyl  staff    20M May  6 12:10 blockchain_v1_mainnet.sqlite-wal
-rw-r--r--  1 weyl  staff   1.8M May  6 11:46 peer_table_node.sqlite
-rw-r--r--  1 weyl  staff    32K May  5 17:30 peer_table_node.sqlite-shm
-rw-r--r--  1 weyl  staff   5.4M May  6 11:46 peer_table_node.sqlite-wal

~/.chia/mainnet/wallet/db
❯ ll -h 
total 3055848
-rw-r--r--  1 weyl  staff   1.4G May  7 15:32 blockchain_wallet_v1_mainnet_903996200.sqlite
-rw-r--r--  1 weyl  staff    32K May  7 15:24 blockchain_wallet_v1_mainnet_903996200.sqlite-shm
-rw-r--r--  1 weyl  staff   4.0M May  7 15:32 blockchain_wallet_v1_mainnet_903996200.sqlite-wal
-rw-r--r--  1 weyl  staff    16K May  7 15:24 wallet_peers.sqlite
</code></pre></td></tr></table>
</div>
</div><p>然后，我们可以先用 SQLite Browser，一个 SQlite 数据库（文件）的浏览器来看看它。</p>
<p>SQlite 浏览器的官网是 <a href="https://sqlitebrowser.org/" target="_blank" rel="noopener noreffer">https://sqlitebrowser.org/</a> 。在下载，安装之后，我们可以通过点击 <code>Open Database/打开数据库</code> 选择浏览上边列出来的两个 <code>.sqlite</code> 扩展名的数据库文件。</p>
<p>打开数据库之后，我们可以选择第一个标签 <code>Database Schema</code> 来看看表的结构。</p>
<p></p>
<p>我们还能像类似于 Excel 一样去看表的数据，还可以 Filter/过滤、Sort/排序任意列。</p>
<p></p>
<p>下一部分，我们来简单看看表里的数据。</p>
<blockquote>
<p>Tips:</p>
<p>这里边，<code>~/.chia/mainnet/wallet</code> 和裸目录 <code>~/.chia/mainnet </code> 下边的 <code>db</code> 里分别都有表文件，他们的信息是有重复的，大家可以分别打开看看哦，即使是相同的表的名字，比如 <code>block_record</code> 内里的信息也略有差别，如果大家知道为什么有这样的差别，欢迎浏览告诉大家哈，可能要仔细研究一下客户端、钱包等代码才行，幸运的是，它们相对比较好阅读，是 Python 写的： <a href="https://github.com/Chia-Network/chia-blockchain" target="_blank" rel="noopener noreffer">https://github.com/Chia-Network/chia-blockchain</a> 。</p>
</blockquote>
<h2 id="2-分析-chia-的数据">2. 分析 Chia 的数据</h2>
<p>如果大家仔细看了上边表结构定义的截图，就能注意到一些表的主要信息是嵌套二进制 KV Byte，所以只从 SQLite 并不能看到所有 Chia 的数据，所以我们需要（用一个编程语言来）读取表里的 Byte。</p>
<p>幸运的是，这件事儿因为 Chia 是开源的，而且是 Python 的代码，使得我们可以直接交互式的做。</p>
<p>我花了一点点时间在 Chia 客户端代码里找到了需要的封装类，借助它，可以比较方便的分析 Chia 客户端在本地的全链数据。</p>
<p>如果您不感兴趣细节，可以直接看我分析的结论。</p>
<p>结论之后，我也给大家演示一下是怎么读取它们的。</p>
<h3 id="20-tldr-结论">2.0 TL;DR, 结论</h3>
<p>我们可以从表中读取到区块链记录（Block Record ），Chia 币记录（Coin Record）。</p>
<p>从区块记录中，我们可以看到关键的涉及交易的信息：</p>
<ul>
<li>关联的 Coin ，关联的 Puzzle（地址），Coin 的值(Amount)</li>
</ul>
<p>从币记录中，我们可以看到关键的涉及区块的信息：</p>
<ul>
<li>生成这个 Coin 所在区块链里的索引高度（Confirmed Index）</li>
<li>如果这个记录是花费 Coin 的，花费它的索引高度（Spent Index）</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">                                                   ┌──────────────────────┐
┌────────────────────────────────────────┐         │                      │
│                                        │         │    Coin Record       │
│   Block Record                         │         │                      │
│                                        │         │     Coin Name        │
│    Height ◄────────────────────────────┼─┐       │                      │
│                                        │ │     ┌─┼───► Puzzle           │
│    Header                              │ │     │ │                      │
│                                        │ │     ├─┼───► Coin Parent      │
│    Prev Header                         │ │     │ │                      │
│                                        │ │     ├─┼───► Amount           │
│    Block Body                          │ │     │ │                      │
│      farmer_puzzle_hash                │ │     │ │     Time Stamp       │
│      fees                              │ │     │ │                      │
│      pool_puzzle_hash                  │ └─────┼─┼─┬─  Confirmed Index  │
│      prev_transaction_block_hash       │       │ │ │                    │
│      prev_transaction_block_height     │       │ │ └─  Spent Index      │
│      transactions_info  ───────────────┼───────┘ │                      │
│ ┌─── is_transaction_block              │         │     Coinbase         │
│ │    sub_epoch_summary ────────────────┼───────┐ │                      │
│ │                                      │       │ └─ ────────────────────┘
│ │  is Peak                             │       │
│ └──is Block                            │       │ ┌─────────────────────┐
│                                        │       │ │                     │
└────────────────────────────────────────┘       └─┼─► Sub Epoch Segment │
                                                   │                     │
                                                   └─────────────────────┘
</code></pre></td></tr></table>
</div>
</div><h3 id="21-准备">2.1 准备</h3>
<p>因为安装客户端之后，我们本地实际上已经有了相关的 Python 环境和依赖，只需要在里边跑起来就好。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># 注意，我们要 cd 到之前安装客户端时候克隆的仓库。</span>
<span class="nb">cd</span> chia-blockchain
<span class="c1"># source activate 脚本来切换到仓库安装时候创建的 Python 虚拟环境，并进到 IPython 里。</span>
<span class="nb">source</span> venv/bin/activate <span class="o">&amp;&amp;</span> pip install ipython <span class="o">&amp;&amp;</span> ipython
</code></pre></td></tr></table>
</div>
</div><p>然后试着导入客户端里边带有的 Python 的 Chia 的封装类试试看。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">In</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="kn">import</span> <span class="nn">sqlite3</span>
   <span class="o">...</span><span class="p">:</span> <span class="kn">from</span> <span class="nn">chia.consensus.block_record</span> <span class="kn">import</span> <span class="n">BlockRecord</span>
<span class="c1"># 导入成功，没有报错</span>
<span class="n">In</span> <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="err">!</span><span class="n">pwd</span>
<span class="c1"># 我的安装克隆目录</span>
<span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">weyl</span><span class="o">/</span><span class="n">chia</span><span class="o">-</span><span class="n">blockchain</span>
</code></pre></td></tr></table>
</div>
</div><p>恭喜你做好了准备，我们看看 Block Record 里都有什么。</p>
<h3 id="22-chia-链的数据">2.2 Chia 链的数据</h3>
<h4 id="221-区块记录">2.2.1 区块记录</h4>
<p>在上一步的 <code>IPython</code> 窗口下。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># 注意，这里的路径的前缀是我们自己的家目录，不同操作系统，不同的用户都会有所不同。</span>
<span class="n">chia_db_path</span> <span class="o">=</span> <span class="s2">&#34;/Users/weyl/.chia/mainnet/db/blockchain_v1_mainnet.sqlite&#34;</span>

<span class="n">cur</span> <span class="o">=</span> <span class="n">con</span><span class="o">.</span><span class="n">cursor</span><span class="p">()</span>
<span class="c1"># 这里我们取第 201645 高的区块</span>
<span class="n">rows</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">cur</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s1">&#39;SELECT * FROM block_records WHERE height = 201645&#39;</span><span class="p">))</span>
<span class="c1"># 这里 0 表示 SELECT 结果的第一行，3 表示在 BlockRecord 这个表里边，Block 的二进制 BLOB 是第四列，参考本章底部的表定义部分</span>
<span class="n">block_records_201645</span> <span class="o">=</span> <span class="n">BlockRecord</span><span class="o">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="n">rows</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">3</span><span class="p">])</span>
<span class="nb">dir</span><span class="p">(</span><span class="n">block_records_201645</span><span class="p">)</span>
<span class="c1"># 可以查看一些属性 is_transaction_block，timestamp，reward_claims_incorporated</span>
<span class="n">In</span> <span class="p">[</span><span class="mi">174</span><span class="p">]:</span> <span class="n">block_records_201645</span><span class="o">.</span><span class="n">is_transaction_block</span>
<span class="n">Out</span><span class="p">[</span><span class="mi">174</span><span class="p">]:</span> <span class="kc">True</span>

<span class="n">In</span> <span class="p">[</span><span class="mi">182</span><span class="p">]:</span> <span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>
<span class="n">In</span> <span class="p">[</span><span class="mi">183</span><span class="p">]:</span> <span class="n">datetime</span><span class="o">.</span><span class="n">fromtimestamp</span><span class="p">(</span><span class="n">block_records_201645</span><span class="o">.</span><span class="n">timestamp</span><span class="p">)</span>
<span class="n">Out</span><span class="p">[</span><span class="mi">183</span><span class="p">]:</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2021</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">29</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>

<span class="n">In</span> <span class="p">[</span><span class="mi">190</span><span class="p">]:</span> <span class="n">block_records_201645</span><span class="o">.</span><span class="n">reward_claims_incorporated</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">to_json_dict</span><span class="p">()</span>
<span class="n">Out</span><span class="p">[</span><span class="mi">190</span><span class="p">]:</span>
<span class="p">{</span><span class="s1">&#39;parent_coin_info&#39;</span><span class="p">:</span> <span class="s1">&#39;0xccd5bb71183532bff220ba46c268991a000000000000000000000000000313ab&#39;</span><span class="p">,</span>
 <span class="s1">&#39;puzzle_hash&#39;</span><span class="p">:</span> <span class="s1">&#39;0xbbb014f41d88c74b78501b36e4863d3382bfda9ae3c4d30a1b6df72b962502b6&#39;</span><span class="p">,</span>
 <span class="s1">&#39;amount&#39;</span><span class="p">:</span> <span class="mi">1750000000000</span><span class="p">}</span>

<span class="c1"># 可以快速 print 看大部分信息</span>
<span class="nb">print</span><span class="p">(</span><span class="n">block_records_201645</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p><code>block_records_201645</code> 的打印结果如下。</p>
<blockquote>
<p>注意，这里我截断了一些数据</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span><span class="err">&#39;challenge_block_info_hash&#39;:</span> <span class="err">&#39;0x4a562f1ffa7a06fe76b1df74dbdd6bdcfbf63139a6f1fc3291c606d7c976abf6&#39;,</span>
 <span class="err">&#39;challenge_vdf_output&#39;:</span> <span class="err">{&#39;data&#39;:</span> <span class="err">&#39;0x0200a6b38d6b58d17129d71737088772561f22a44ef302fe45a70a763b878f998abfe35946df720bcb5d78e214b667bce801d597b46c867928c4b8926c342375a961f36cd63ec698bc25e5ce48c45d9a2074eded0e42d24dd1b50a59e699f671f0900100&#39;</span><span class="p">}</span><span class="err">,</span>
 <span class="err">&#39;deficit&#39;:</span> <span class="mi">16</span><span class="err">,</span>
 <span class="err">&#39;farmer_puzzle_hash&#39;:</span> <span class="err">&#39;</span><span class="mi">0</span><span class="err">x</span><span class="mi">4</span><span class="err">bc</span><span class="mi">6435</span><span class="err">b</span><span class="mi">409</span><span class="err">bcbabe</span><span class="mi">53870</span><span class="err">dae</span><span class="mi">0</span><span class="err">f</span><span class="mi">03755</span><span class="err">f</span><span class="mi">6</span><span class="err">aabb</span><span class="mi">4594</span><span class="err">c</span><span class="mi">5915</span><span class="err">ec</span><span class="mi">983</span><span class="err">acf</span><span class="mi">12</span><span class="err">a</span><span class="mi">5</span><span class="err">d</span><span class="mi">1</span><span class="err">fba&#39;,</span>
 <span class="err">&#39;fees&#39;:</span> <span class="mi">0</span><span class="err">,</span>
 <span class="err">&#39;finished_challenge_slot_hashes&#39;:</span> <span class="p">[</span><span class="err">&#39;</span><span class="mi">0</span><span class="err">x</span><span class="mi">2</span><span class="err">b</span><span class="mi">1</span><span class="err">a</span><span class="mi">7</span><span class="err">b</span><span class="mi">4859</span><span class="err">a</span><span class="mi">8</span><span class="err">d</span><span class="mi">3597</span><span class="err">b</span><span class="mf">8e6</span><span class="err">cbe</span><span class="mi">3</span><span class="err">b</span><span class="mi">27</span><span class="err">ab</span><span class="mi">97212</span><span class="err">be</span><span class="mi">8</span><span class="err">b</span><span class="mf">19e6867</span><span class="err">f</span><span class="mi">2</span><span class="err">a</span><span class="mi">4</span><span class="err">d</span><span class="mi">0</span><span class="err">eef</span><span class="mi">26</span><span class="err">c</span><span class="mi">36340</span><span class="err">f&#39;</span><span class="p">]</span><span class="err">,</span>
 <span class="err">&#39;finished_infused_challenge_slot_hashes&#39;:</span> <span class="p">[</span><span class="err">&#39;</span><span class="mi">0</span><span class="err">xd</span><span class="mi">0185</span><span class="err">a</span><span class="mi">6493</span><span class="err">b</span><span class="mi">10</span><span class="err">d</span><span class="mf">84e696</span><span class="err">c</span><span class="mi">6</span><span class="err">fc</span><span class="mi">55</span><span class="err">ec</span><span class="mf">1920e8</span><span class="err">a</span><span class="mi">96791</span><span class="err">a</span><span class="mi">604</span><span class="err">dedfe</span><span class="mi">77635</span><span class="err">da</span><span class="mi">460</span><span class="err">f</span><span class="mi">354</span><span class="err">d&#39;</span><span class="p">]</span><span class="err">,</span>
 <span class="err">&#39;finished_reward_slot_hashes&#39;:</span> <span class="p">[</span><span class="err">&#39;</span><span class="mi">0</span><span class="err">xe</span><span class="mi">2</span><span class="err">bcbf</span><span class="mi">560471131</span><span class="err">a</span><span class="mi">7</span><span class="err">fb</span><span class="mi">87</span><span class="err">ffe</span><span class="mi">3</span><span class="err">f</span><span class="mi">9</span><span class="err">ddde</span><span class="mi">03166</span><span class="err">a</span><span class="mi">9</span><span class="err">b</span><span class="mi">0092</span><span class="err">a</span><span class="mi">50</span><span class="err">f</span><span class="mi">1</span><span class="err">ed</span><span class="mi">1599715857</span><span class="err">c</span><span class="mi">365</span><span class="err">&#39;</span><span class="p">]</span><span class="err">,</span>
 <span class="err">&#39;header_hash&#39;:</span> <span class="err">&#39;</span><span class="mi">0</span><span class="err">x</span><span class="mf">2791729e1</span><span class="err">c</span><span class="mi">914</span><span class="err">f</span><span class="mi">9</span><span class="err">c</span><span class="mi">3908</span><span class="err">a</span><span class="mi">0</span><span class="err">ad</span><span class="mi">895</span><span class="err">b</span><span class="mi">5846</span><span class="err">c</span><span class="mi">86</span><span class="err">fc</span><span class="mf">4e207</span><span class="err">cc</span><span class="mf">463820123e9</span><span class="err">a</span><span class="mi">299</span><span class="err">c</span><span class="mi">39</span><span class="err">f</span><span class="mi">3</span><span class="err">&#39;,</span>
 <span class="err">&#39;height&#39;:</span> <span class="mi">201645</span><span class="err">,</span>
 <span class="err">&#39;infused_challenge_vdf_output&#39;:</span> <span class="err">None,</span>
 <span class="err">&#39;overflow&#39;:</span> <span class="err">True,</span>
 <span class="err">&#39;pool_puzzle_hash&#39;:</span> <span class="err">&#39;</span><span class="mi">0</span><span class="err">x</span><span class="mi">4</span><span class="err">bc</span><span class="mi">6435</span><span class="err">b</span><span class="mi">409</span><span class="err">bcbabe</span><span class="mi">53870</span><span class="err">dae</span><span class="mi">0</span><span class="err">f</span><span class="mi">03755</span><span class="err">f</span><span class="mi">6</span><span class="err">aabb</span><span class="mi">4594</span><span class="err">c</span><span class="mi">5915</span><span class="err">ec</span><span class="mi">983</span><span class="err">acf</span><span class="mi">12</span><span class="err">a</span><span class="mi">5</span><span class="err">d</span><span class="mi">1</span><span class="err">fba&#39;,</span>
 <span class="err">&#39;prev_hash&#39;:</span> <span class="err">&#39;</span><span class="mi">0</span><span class="err">xf</span><span class="mi">126</span><span class="err">ecf</span><span class="mi">64473</span><span class="err">beb</span><span class="mi">9</span><span class="err">ae</span><span class="mi">5</span><span class="err">b</span><span class="mi">84137788100</span><span class="err">feb</span><span class="mi">9</span><span class="err">d</span><span class="mi">731</span><span class="err">c</span><span class="mi">604877</span><span class="err">c</span><span class="mi">0744</span><span class="err">cdc</span><span class="mi">6025</span><span class="err">f</span><span class="mi">4</span><span class="err">cbeb&#39;,</span>
 <span class="err">&#39;prev_transaction_block_hash&#39;:</span> <span class="err">&#39;</span><span class="mi">0</span><span class="err">x</span><span class="mi">7103</span><span class="err">fe</span><span class="mi">2</span><span class="err">f</span><span class="mi">1</span><span class="err">aa</span><span class="mi">96998</span><span class="err">f</span><span class="mi">9</span><span class="err">ccf</span><span class="mi">6</span><span class="err">fc</span><span class="mi">98561</span><span class="err">b</span><span class="mi">64</span><span class="err">c</span><span class="mi">5</span><span class="err">f</span><span class="mi">7</span><span class="err">a</span><span class="mi">98</span><span class="err">cf</span><span class="mi">942335</span><span class="err">c</span><span class="mi">4</span><span class="err">c</span><span class="mi">927</span><span class="err">fb</span><span class="mi">2</span><span class="err">eaa</span><span class="mi">9325</span><span class="err">a&#39;,</span>
 <span class="err">&#39;prev_transaction_block_height&#39;:</span> <span class="mi">201643</span><span class="err">,</span>
 <span class="err">&#39;required_iters&#39;:</span> <span class="mi">95752</span><span class="err">,</span>
 <span class="err">&#39;reward_claims_incorporated&#39;:</span> <span class="p">[{</span><span class="err">&#39;amount&#39;:</span> <span class="err">1750000000000,</span>
                                 <span class="err">&#39;parent_coin_info&#39;:</span> <span class="err">&#39;0xccd5bb71183532bff220ba46c268991a000000000000000000000000000313ab&#39;,</span>
                                 <span class="err">&#39;puzzle_hash&#39;:</span> <span class="err">&#39;0xbbb014f41d88c74b78501b36e4863d3382bfda9ae3c4d30a1b6df72b962502b6&#39;</span><span class="p">},</span>
                                <span class="p">{</span><span class="err">&#39;amount&#39;:</span> <span class="err">250000000000,</span>
                                 <span class="err">&#39;parent_coin_info&#39;:</span> <span class="err">&#39;0x3ff07eb358e8255a65c30a2dce0e5fbb000000000000000000000000000313ab&#39;,</span>
                                 <span class="err">&#39;puzzle_hash&#39;:</span> <span class="err">&#39;0xbbb014f41d88c74b78501b36e4863d3382bfda9ae3c4d30a1b6df72b962502b6&#39;</span><span class="p">},</span>
                                <span class="p">{</span><span class="err">&#39;amount&#39;:</span> <span class="err">1750000000000,</span>
                                 <span class="err">&#39;parent_coin_info&#39;:</span> <span class="err">&#39;0xccd5bb71183532bff220ba46c268991a000000000000000000000000000313aa&#39;,</span>
                                 <span class="err">&#39;puzzle_hash&#39;:</span> <span class="err">&#39;0x4bc6435b409bcbabe53870dae0f03755f6aabb4594c5915ec983acf12a5d1fba&#39;</span><span class="p">},</span>
                                <span class="p">{</span><span class="err">&#39;amount&#39;:</span> <span class="err">250000000000,</span>
                                 <span class="err">&#39;parent_coin_info&#39;:</span> <span class="err">&#39;0x3ff07eb358e8255a65c30a2dce0e5fbb000000000000000000000000000313a8&#39;,</span>
                                 <span class="err">&#39;puzzle_hash&#39;:</span> <span class="err">&#39;0xcf178071f6aa6cb1c92f00943424bcc8cb774449bd60058fc08e9894f49a1ca4&#39;</span><span class="p">}]</span><span class="err">,</span>
 <span class="err">&#39;reward_infusion_new_challenge&#39;:</span> <span class="err">&#39;</span><span class="mi">0</span><span class="err">x</span><span class="mi">660886</span><span class="err">f</span><span class="mi">4</span><span class="err">ab</span><span class="mi">030</span><span class="err">c</span><span class="mi">07755</span><span class="err">f</span><span class="mi">53362</span><span class="err">ae</span><span class="mi">4253</span><span class="err">dfa</span><span class="mi">93</span><span class="err">ea</span><span class="mi">853</span><span class="err">cbc</span><span class="mi">321218</span><span class="err">f</span><span class="mi">58</span><span class="err">f</span><span class="mi">159</span><span class="err">c</span><span class="mi">75</span><span class="err">adaa&#39;,</span>
 <span class="err">&#39;signage_point_index&#39;:</span> <span class="mi">63</span><span class="err">,</span>
 <span class="err">&#39;sub_epoch_summary_included&#39;:</span> <span class="err">None,</span>
 <span class="err">&#39;sub_slot_iters&#39;:</span> <span class="mi">99614720</span><span class="err">,</span>
 <span class="err">&#39;timestamp&#39;:</span> <span class="mi">1619662081</span><span class="err">,</span>
 <span class="err">&#39;total_iters&#39;:</span> <span class="mi">660123219464</span><span class="err">,</span>
 <span class="err">&#39;weight&#39;:</span> <span class="mi">4121254</span><span class="err">}</span>
</code></pre></td></tr></table>
</div>
</div><p>另外，我们取的这个表的定义如下。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="nf">block_records</span><span class="p">(</span><span class="w">
</span><span class="w">  </span><span class="n">header_hash</span><span class="w"> </span><span class="kt">text</span><span class="w"> </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="p">,</span><span class="w"> 
</span><span class="w">  </span><span class="n">prev_hash</span><span class="w"> </span><span class="kt">text</span><span class="p">,</span><span class="w"> 
</span><span class="w">  </span><span class="n">height</span><span class="w"> </span><span class="kt">bigint</span><span class="p">,</span><span class="w">
</span><span class="w">  </span><span class="n">block</span><span class="w"> </span><span class="kt">blob</span><span class="p">,</span><span class="w"> </span><span class="c1">#&lt;----
</span><span class="c1"></span><span class="w">  </span><span class="n">sub_epoch_summary</span><span class="w"> </span><span class="kt">blob</span><span class="p">,</span><span class="w"> 
</span><span class="w">  </span><span class="n">is_peak</span><span class="w"> </span><span class="kt">tinyint</span><span class="p">,</span><span class="w"> 
</span><span class="w">  </span><span class="n">is_block</span><span class="w"> </span><span class="kt">tinyint</span><span class="p">)</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><h4 id="222-chia-币记录">2.2.2 Chia 币记录</h4>
<p>类似的，我们可以获取一个 Coin 的记录，这里边，从表的定义可以看到，唯一二进制（不能直接从数据库查询中被人读懂）的字段就是是币值，不存在嵌套的结构，所以也并不需要封装的类才能看清楚里边的信息。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="nf">coin_record</span><span class="p">(</span><span class="w">
</span><span class="w">  </span><span class="n">coin_name</span><span class="w"> </span><span class="kt">text</span><span class="w"> </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="p">,</span><span class="w">
</span><span class="w">  </span><span class="n">confirmed_index</span><span class="w"> </span><span class="kt">bigint</span><span class="p">,</span><span class="w">
</span><span class="w">  </span><span class="n">spent_index</span><span class="w"> </span><span class="kt">bigint</span><span class="p">,</span><span class="w">
</span><span class="w">  </span><span class="n">spent</span><span class="w"> </span><span class="kt">int</span><span class="p">,</span><span class="w">
</span><span class="w">  </span><span class="n">coinbase</span><span class="w"> </span><span class="kt">int</span><span class="p">,</span><span class="w">
</span><span class="w">  </span><span class="n">puzzle_hash</span><span class="w"> </span><span class="kt">text</span><span class="p">,</span><span class="w">
</span><span class="w">  </span><span class="n">coin_parent</span><span class="w"> </span><span class="kt">text</span><span class="p">,</span><span class="w">
</span><span class="w">  </span><span class="n">amount</span><span class="w"> </span><span class="kt">blob</span><span class="p">,</span><span class="w">
</span><span class="w">  </span><span class="kt">timestamp</span><span class="w"> </span><span class="kt">bigint</span><span class="p">)</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>这里值得注意的信息主要是 <code>spent_index</code> 和 <code>confirmed_index</code>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">chia.util.ints</span> <span class="kn">import</span> <span class="n">uint64</span>

<span class="n">chia_db_path</span> <span class="o">=</span> <span class="s2">&#34;/Users/weyl/.chia/mainnet/db/blockchain_v1_mainnet.sqlite&#34;</span>
<span class="n">con</span> <span class="o">=</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">chia_db_path</span><span class="p">)</span>
<span class="n">cur</span> <span class="o">=</span> <span class="n">con</span><span class="o">.</span><span class="n">cursor</span><span class="p">()</span>
<span class="n">rows</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">cur</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s1">&#39;SELECT * FROM coin_record WHERE confirmed_index = 201645&#39;</span><span class="p">))</span>
<span class="n">coin_amount</span> <span class="o">=</span> <span class="n">uint64</span><span class="o">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="n">rows</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">7</span><span class="p">])</span>

<span class="n">In</span> <span class="p">[</span><span class="mi">201</span><span class="p">]:</span> <span class="n">rows</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="n">Out</span><span class="p">[</span><span class="mi">201</span><span class="p">]:</span>
<span class="p">(</span><span class="s1">&#39;cf35da0f595b49dde626d676b511ee62bce886f2216751aa51bb8ff851563d35&#39;</span><span class="p">,</span> <span class="c1"># coin_name</span>
 <span class="mi">201645</span><span class="p">,</span> <span class="c1"># confirmed_index</span>
 <span class="mi">0</span><span class="p">,</span> <span class="c1"># spent_index，这里没有spent，所以值无效</span>
 <span class="mi">0</span><span class="p">,</span> <span class="c1"># spent，其实是 bool</span>
 <span class="mi">1</span><span class="p">,</span> <span class="c1"># coinbase，bool</span>
 <span class="s1">&#39;bbb014f41d88c74b78501b36e4863d3382bfda9ae3c4d30a1b6df72b962502b6&#39;</span><span class="p">,</span> <span class="c1"># puzzle_hash 对应到地址</span>
 <span class="s1">&#39;ccd5bb71183532bff220ba46c268991a000000000000000000000000000313ab&#39;</span><span class="p">,</span>
 <span class="sa">b</span><span class="s1">&#39;</span><span class="se">\x00\x00\x01\x97</span><span class="s1">t </span><span class="se">\xdc\x00</span><span class="s1">&#39;</span><span class="p">,</span> <span class="c1"># uint64</span>
 <span class="mi">1619662081</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="223-puzzles-address地址">2.2.3 Puzzles/ Address，地址</h4>
<p>我们可以把 Chia 中的 Puzzle 理解成为交易中的地址，为了方便使用，通常会把 Puzzle 的 hash 用<a href="https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki" target="_blank" rel="noopener noreffer">bech32m</a> 转换成地址。</p>
<blockquote>
<p>Tips:</p>
<p>这里有一个在线双向转换的在线工具推荐一下: <a href="https://www.chiaexplorer.com/tools/address-puzzlehash-converter" target="_blank" rel="noopener noreffer">https://www.chiaexplorer.com/tools/address-puzzlehash-converter</a></p>
</blockquote>
<h2 id="3-如何探索-chia-链">3. 如何探索 Chia 链</h2>
<p>随着我们之前分析的信息，自然地，我们可以把 Chia 区块链中的信息取出来，用图（Graph）来表示，这里的图并不是（Graphic）图形、图画的意思，是数学、图论中的图。</p>
<p>在图的语境下，最主要的两个元素就是顶点（Vertex）和边（Edge）。</p>
<p>顶点表示一个实体，而边表示实体之间的某种关系，这种关系可以是对等的（无方向的）也可以是有方向的。</p>
<p>这里我们可以把这里的信息抽象映射到如图的图模型里：</p>
<ul>
<li>Block 顶点</li>
<li>Coin 顶点</li>
<li>Puzzle 顶点</li>
<li>spends 边（Block 到 Coin）</li>
<li>confirms 边 （Block 到 Coin）</li>
<li>belongs_to 边（Coin 到 Puzzle）</li>
</ul>
<p></p>
<p>这里，我们应用的图是一种叫做属性图的形式，除了点和边的关系之外。这两种实体（点、边）还有其他信息只和它们的一个实例相关，所以再定义为顶点、边就不是很适合，这些信息就作为点、边的属性（preperty）存在。</p>
<p>这种为了处理实体之间关联、涉及实体、关联的属性信息的，也就是&quot;属性图&quot;的存储信息的方式在计算机领域越来越流行，甚至有专门为此结构而原生开发的数据库——图数据库（Graph Database）。</p>
<p>这里，我们用的就是一个叫做 Nebula Graph 的图数据库，它是一个现代的、为超大规模分部署架构设计的、原生存储、查询、计算图数据的项目，更棒的是，它是产生于社区的开源产品。</p>
<blockquote>
<p>Tips:</p>
<p><strong>安装 Nebula Graph</strong></p>
<p>一般来说，面向超大规模数据的分布式系统，天然的都是不容易轻量部署的，大家如果第一次使用的话可以试试我写的一个叫做 nebula-up 的小工具，可以一行指令部署一个用来试用、学习的 Nebula Graph 集群，地址在这里： <a href="https://github.com/wey-gu/nebula-up/" target="_blank" rel="noopener noreffer">https://github.com/wey-gu/nebula-up/</a> 。</p>
</blockquote>
<h3 id="31-nebula-graph-导入-chia-数据到图数据库">3.1 Nebula Graph 导入 Chia 数据到图数据库</h3>
<p>我们分两步走，第一步这把 Chia Network 数据转换成 CSV 文件，第二步使用 Nebula 的 <a href="https://github.com/vesoft-inc/nebula-importer/" target="_blank" rel="noopener noreffer">Nebula-Importer</a> 把数据导入 Nebula Graph。</p>
<h4 id="311-数据转换">3.1.1 数据转换</h4>
<p>这部分的代码我开源在这里了:</p>
<p><a href="https://github.com/wey-gu/nebula-chia" target="_blank" rel="noopener noreffer">https://github.com/wey-gu/nebula-chia</a></p>
<p>使用它只需要在 Chia Network 的 python venv 下安装它:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">python3 -m pip install nebula-chia
</code></pre></td></tr></table>
</div>
</div><p>然后调用 <code>ChaiBatchConvertor</code> 就可以在当前目录下生成两个 CSV 文件。</p>
<p>这里边有一些可以配置的参数，具体可以参考代码 <code>nebulachia/convertor.py</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">nebulachia.convertor</span> <span class="kn">import</span> <span class="n">ChiaBatchConvertor</span>
<span class="n">c</span> <span class="o">=</span> <span class="n">ChaiBatchConvertor</span><span class="p">(</span>
    <span class="n">block_record_limit</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">coin_record_limit</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">write_batch_size</span><span class="o">=</span><span class="mi">10000</span><span class="p">)</span>
<span class="n">c</span><span class="o">.</span><span class="n">convert_block_record</span><span class="p">()</span>
<span class="n">c</span><span class="o">.</span><span class="n">convert_coin_record</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p>生成的文件：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ ls -lth

-rw-r--r--   <span class="m">1</span> weyl  staff   173M May <span class="m">19</span> 13:01 coin_record.csv
-rw-r--r--   <span class="m">1</span> weyl  staff    77M May <span class="m">19</span> 12:59 block_record.csv
</code></pre></td></tr></table>
</div>
</div><p>这里边字段的含义和类型，可以参考代码中 <code>block_record_row</code> 和 <code>coin_record_row</code> 的 <code>__doc__</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">In</span> <span class="p">[</span><span class="mi">466</span><span class="p">]:</span> <span class="nb">print</span><span class="p">(</span><span class="n">c</span><span class="o">.</span><span class="n">coin_record_row</span><span class="o">.</span><span class="vm">__doc__</span><span class="p">)</span>

        <span class="n">Parse</span> <span class="n">row</span> <span class="ow">and</span> <span class="k">return</span> <span class="n">a</span> <span class="n">CSV</span> <span class="n">block</span> <span class="n">coin</span> <span class="n">row</span> <span class="nb">list</span><span class="o">.</span>

        <span class="n">CREATE</span> <span class="n">TABLE</span> <span class="n">coin_record</span><span class="p">(</span>
          <span class="n">coin_name</span> <span class="n">text</span> <span class="n">PRIMARY</span> <span class="n">KEY</span><span class="p">,</span>
          <span class="n">confirmed_index</span> <span class="n">bigint</span><span class="p">,</span>
          <span class="n">spent_index</span> <span class="n">bigint</span><span class="p">,</span>
          <span class="n">spent</span> <span class="nb">int</span><span class="p">,</span>
          <span class="n">coinbase</span> <span class="nb">int</span><span class="p">,</span>
          <span class="n">puzzle_hash</span> <span class="n">text</span><span class="p">,</span>
          <span class="n">coin_parent</span> <span class="n">text</span><span class="p">,</span>
          <span class="n">amount</span> <span class="n">blob</span><span class="p">,</span>
          <span class="n">timestamp</span> <span class="n">bigint</span><span class="p">)</span>

        <span class="n">Coin</span> <span class="n">Record</span> <span class="n">CSV</span> <span class="n">Head</span><span class="p">:</span>
            <span class="mi">0</span>         <span class="mi">1</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>          <span class="mi">2</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>      <span class="mi">3</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>
            <span class="n">coin_name</span><span class="o">|</span><span class="n">confirmed_index</span><span class="o">|</span><span class="n">spent_index</span><span class="o">|</span><span class="n">spent</span><span class="o">|</span>

            <span class="mi">4</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>  <span class="mi">5</span>           <span class="mi">6</span>           <span class="mi">7</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
            <span class="n">coinbase</span><span class="o">|</span><span class="n">puzzle_hash</span><span class="o">|</span><span class="n">coin_parent</span><span class="o">|</span><span class="n">amount</span><span class="o">|</span>

            <span class="mi">8</span><span class="p">(</span><span class="n">timestamp</span><span class="p">)</span>
            <span class="n">timestamp</span><span class="o">|</span>

            <span class="mi">9</span>              <span class="mi">10</span>
            <span class="n">confirmed_hash</span><span class="o">|</span><span class="n">spent_hash</span>

<span class="n">In</span> <span class="p">[</span><span class="mi">467</span><span class="p">]:</span> <span class="nb">print</span><span class="p">(</span><span class="n">c</span><span class="o">.</span><span class="n">block_record_row</span><span class="o">.</span><span class="vm">__doc__</span><span class="p">)</span>

        <span class="n">Parse</span> <span class="n">row</span> <span class="ow">and</span> <span class="k">return</span> <span class="n">a</span> <span class="n">CSV</span> <span class="n">block</span> <span class="n">record</span> <span class="n">row</span> <span class="nb">list</span><span class="o">.</span>

        <span class="n">CREATE</span> <span class="n">TABLE</span> <span class="n">block_records</span><span class="p">(</span>
          <span class="n">header_hash</span> <span class="n">text</span> <span class="n">PRIMARY</span> <span class="n">KEY</span><span class="p">,</span>
          <span class="n">prev_hash</span> <span class="n">text</span><span class="p">,</span>
          <span class="n">height</span> <span class="n">bigint</span><span class="p">,</span>
          <span class="n">block</span> <span class="n">blob</span><span class="p">,</span>
          <span class="n">sub_epoch_summary</span> <span class="n">blob</span><span class="p">,</span>
          <span class="n">is_peak</span> <span class="n">tinyint</span><span class="p">,</span>
          <span class="n">is_block</span> <span class="n">tinyint</span><span class="p">)</span>

        <span class="n">Block</span> <span class="n">Record</span> <span class="n">CSV</span> <span class="n">Head</span><span class="p">:</span>
            <span class="mi">0</span>           <span class="mi">1</span>         <span class="mi">2</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span> <span class="mi">3</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span> <span class="mi">4</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>
            <span class="n">header_hash</span><span class="o">|</span><span class="n">prev_hash</span><span class="o">|</span><span class="n">height</span><span class="o">|</span><span class="n">is_peak</span><span class="o">|</span><span class="n">is_block</span><span class="o">|</span>

            <span class="mi">5</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
            <span class="n">deficit</span><span class="o">|</span>

            <span class="mi">6</span>
            <span class="n">challenge_block_info_hash</span><span class="o">|</span>

            <span class="mi">7</span>
            <span class="n">farmer_puzzle_hash</span><span class="o">|</span>

            <span class="mi">8</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
            <span class="n">fees</span><span class="o">|</span>

            <span class="mi">9</span>
            <span class="n">prev_transaction_block_hash</span><span class="o">|</span>

            <span class="mi">10</span>
            <span class="n">prev_transaction_block_height</span><span class="o">|</span>

            <span class="mi">11</span>             <span class="mi">12</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
            <span class="n">required_iters</span><span class="o">|</span><span class="n">signage_point_index</span><span class="o">|</span>

            <span class="mi">13</span><span class="p">(</span><span class="n">timestamp</span><span class="p">)</span>
            <span class="n">timestamp</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="311-数据导入">3.1.1 数据导入</h4>
<p>有了 CSV 文件，我们可以借助 <a href="https://github.com/vesoft-inc/nebula-importer/" target="_blank" rel="noopener noreffer">Nebula-Importer</a> 导入数据到图数据库中。</p>
<p>这里，我们写好了 nebula-importer 的配置文件，其中包涵了如下信息:</p>
<ul>
<li>在 Nebula Graph 中创建需要的数据模型 Schema，这和我们前边做的图映射的信息是等价的</li>
<li>描述 CSV 文件之中的 Column 的数据到图模型（点，边，点或边的属性）映射关系</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># 这里，我的 csv 文件和 配置文件都放在 /home/wei.gu/chia 之下</span>
<span class="c1"># 我使用 docker-compose 默认配置部署的 Nebula Graph,</span>
<span class="c1"># 它创建了叫 nebula-docker-compose_nebula-net 的 docker 网络</span>
docker run --rm -ti <span class="se">\
</span><span class="se"></span>    --network<span class="o">=</span>nebula-docker-compose_nebula-net <span class="se">\
</span><span class="se"></span>    -v /home/wei.gu/chia/nebula-chia.yaml:/root/nebula-chia.yaml <span class="se">\
</span><span class="se"></span>    -v /home/wei.gu/chia:/root <span class="se">\
</span><span class="se"></span>    vesoft/nebula-importer:v2 <span class="se">\
</span><span class="se"></span>    --config /root/nebula-chia.yaml
</code></pre></td></tr></table>
</div>
</div><p>这里我展示一个导入的结果示例，我在单机部署的 Nebula Graph 里导入了我一两周之前取的全量 Chia Network 数据的结果。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">...
2021/05/19 09:55:09 <span class="o">[</span>INFO<span class="o">]</span> reader.go:180: Total lines of file<span class="o">(</span>/root/coin_record.csv<span class="o">)</span> is: 547557, error lines: <span class="m">0</span>
2021/05/19 09:55:09 <span class="o">[</span>INFO<span class="o">]</span> statsmgr.go:61: Done<span class="o">(</span>/root/coin_record.csv<span class="o">)</span>: Time<span class="o">(</span>4385.88s<span class="o">)</span>, Finished<span class="o">(</span>4512927<span class="o">)</span>, Failed<span class="o">(</span>0<span class="o">)</span>, Latency AVG<span class="o">(</span>1305us<span class="o">)</span>, Batches Req AVG<span class="o">(</span>2015us<span class="o">)</span>, Rows AVG<span class="o">(</span>1028.42/s<span class="o">)</span>
2021/05/19 09:55:10 --- END OF NEBULA IMPORTER ---
</code></pre></td></tr></table>
</div>
</div><h3 id="32-探索-chia-的图数据">3.2 探索 Chia 的图数据</h3>
<h4 id="321-用图数据库的-queries">3.2.1 用图数据库的 Queries</h4>
<p>导入 Chia 链的网络到 Nebula Graph 之后，我们可以在里边快速查询数据之间的关联。</p>
<p>比如这个查询表示从区块 <code>524aa2013781ff4cd9d2b5dc...</code> 查起，经过三种边 <code>farmer_puzzle, spends, confirms</code> 双向遍历的结果。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="k">GO</span><span class="w"> </span><span class="mi">5</span><span class="w"> </span><span class="n">STEPS</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="err">\</span><span class="w">
</span><span class="w">   </span><span class="s2">&#34;524aa2013781ff4cd9d2b5dce40647b670d722e2de25bd2e2b79970a8ec435ee&#34;</span><span class="w"> </span><span class="err">\</span><span class="w">
</span><span class="w">   </span><span class="n">OVER</span><span class="w"> </span><span class="n">farmer_puzzle</span><span class="p">,</span><span class="n">spends</span><span class="p">,</span><span class="n">confirms</span><span class="w"> </span><span class="n">BIDIRECT</span><span class="w">
</span><span class="w"></span><span class="p">...</span><span class="w">
</span><span class="w"></span><span class="n">Got</span><span class="w"> </span><span class="mi">419437</span><span class="w"> </span><span class="k">rows</span><span class="w"> </span><span class="p">(</span><span class="n">time</span><span class="w"> </span><span class="n">spent</span><span class="w"> </span><span class="mi">735120</span><span class="o">/</span><span class="mi">1170946</span><span class="w"> </span><span class="n">us</span><span class="p">)</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="n">Wed</span><span class="p">,</span><span class="w"> </span><span class="mi">19</span><span class="w"> </span><span class="n">May</span><span class="w"> </span><span class="mi">2021</span><span class="w"> </span><span class="mi">10</span><span class="p">:</span><span class="mi">11</span><span class="p">:</span><span class="mi">28</span><span class="w"> </span><span class="n">UTC</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>再比如，计算一个 Puzzle 地址上的余额（所有 coin 的总价值）比如这个puzzle <code>bbe39134ccc32c08fdeff...</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="k">GO</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="n">STEP</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="s2">&#34;bbe39134ccc32c08fdeff4d2c19d1d1f4f7e48cdaf79d37397bc3136ce9b3cb7&#34;</span><span class="w"> </span><span class="err">\</span><span class="w">
</span><span class="w">   </span><span class="n">OVER</span><span class="w"> </span><span class="n">belongs_to</span><span class="w"> </span><span class="n">REVERSELY</span><span class="w"> </span><span class="err">\</span><span class="w">
</span><span class="w">   </span><span class="n">YIELD</span><span class="w"> </span><span class="k">CASE</span><span class="w"> </span><span class="err">$$</span><span class="p">.</span><span class="n">coin</span><span class="p">.</span><span class="n">is_spent</span><span class="w"> </span><span class="err">\</span><span class="w">
</span><span class="w">         </span><span class="k">WHEN</span><span class="w"> </span><span class="k">true</span><span class="w"> </span><span class="k">THEN</span><span class="w"> </span><span class="err">$$</span><span class="p">.</span><span class="n">coin</span><span class="p">.</span><span class="n">amount</span><span class="w"> </span><span class="err">\</span><span class="w">
</span><span class="w">         </span><span class="k">WHEN</span><span class="w"> </span><span class="k">false</span><span class="w"> </span><span class="k">THEN</span><span class="w"> </span><span class="o">-</span><span class="err">$$</span><span class="p">.</span><span class="n">coin</span><span class="p">.</span><span class="n">amount</span><span class="w"> </span><span class="err">\</span><span class="w">
</span><span class="w">         </span><span class="k">END</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">Amount</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">YIELD</span><span class="w"> </span><span class="k">sum</span><span class="p">(</span><span class="err">$</span><span class="o">-</span><span class="p">.</span><span class="n">Amount</span><span class="p">)</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><h4 id="322-用-nebula-studio-可视化探索">3.2.2 用 Nebula Studio 可视化探索</h4>
<p>Nebula Graph 为我们提供了图形化界面，有了它，我们可以用更符合人脑的方式地查看 Chia Network 中的数据。</p>
<p>比如，我们还是回到上边的那个区块，从这里查询。</p>
<p></p>
<p>我们就获得了这个 block 类型的一个点/ vertex。我们可以从他开始进一步探索，先鼠标单击这个点，在拓展条件里把方向选择双向，默认的边类型是所有的边类型，这样我们就可以把所有 <code>步数</code>内相关联的数据一下子全都找出来。</p>
<p>选择好拓展条件之后，点击拓展就可以。</p>
<p></p>
<p>这里，我们选择了步数为 <code>1</code>，点击拓展（或者双击要拓展的点），之后，我们可以快速双击其他的点继续拓展，这是我鼠标点了几次之后看到的样子：</p>
<p></p>
<p>我们接下来再试试拓展的步数为 <code>2</code>，点击拓展（或者双击要拓展的点），看起来找到了有意思的信息。</p>
<p>我们看到了一个有很多边的黑色的点。</p>
<p></p>
<p>通过查看这个点和我们开始查看的 block 之间的边，我们知道这个点正是 farm 这个 block 的地址，这个地址下边有非常多的 coin。</p>
<p></p>
<p>这只是一个开始，有了这个导入到 Nebula Graph 图数据的基础，我们可以做很多有意思的分析和洞察，大家可以自己试试看，得到更有意思的结果分享给其他同学。</p>
<h2 id="4-总结">4. 总结</h2>
<p>这篇文章里，在我们简单介绍了 Chia Network 之后，我们首次的带大家一起从安装一个 Chia 终端，到分析终端同步到本地的 Chia 全网数据，借助于 Chia 终端开源的 Python 代码库，我们分析了全网数据里的重要信息。</p>
<p>之后，我们开源了一个小工具 Nebula-Chia，有了它，就可以把 Chia 的全网数据转换成 CSV 格式，这样，就可以借助 nebula-importer 把所有的数据导入到一个先进的图数据库（Nebula Graph）中。</p>
<p>Nebula Graph 的项目地址是 <a href="https://github.com/vesoft-inc/nebula-graph" target="_blank" rel="noopener noreffer">https://github.com/vesoft-inc/nebula-graph</a></p>
<p>Nebula-Chia 我也开源在 <a href="https://github.com/wey-gu/nebula-chia" target="_blank" rel="noopener noreffer">https://github.com/wey-gu/nebula-chia</a></p>
<p>在图数据库中，我们展示了做基本 Query 的例子和借助图数据库自带的可视化工具，我们可以轻易地获取 Chia 全网数据之间关联关系，有了这个作为基础，这些数据中洞察的潜力和可以尝试的有意思事情可以比较直观和高效地进一步探索了！</p>
<p>是不是很酷？</p>
<p></p>
<h2 id="5-引用">5. 引用</h2>
<ul>
<li><a href="https://www.chia.net/faq/" target="_blank" rel="noopener noreffer">https://www.chia.net/faq/</a></li>
<li><a href="https://chialisp.com/docs/" target="_blank" rel="noopener noreffer">https://chialisp.com/docs/</a></li>
<li><a href="https://www.chiaexplorer.com/chia-coins" target="_blank" rel="noopener noreffer">https://www.chiaexplorer.com/chia-coins</a></li>
<li><a href="https://docs.google.com/document/d/1tmRIb7lgi4QfKkNaxuKOBHRmwbVlGL4f7EsBDr_5xZE" target="_blank" rel="noopener noreffer">https://docs.google.com/document/d/1tmRIb7lgi4QfKkNaxuKOBHRmwbVlGL4f7EsBDr_5xZE</a></li>
<li><a href="https://github.com/sipa/bech32/tree/master/ref/python" target="_blank" rel="noopener noreffer">https://github.com/sipa/bech32/tree/master/ref/python</a></li>
<li><a href="https://github.com/Chia-Network/chia-blockchain/blob/main/README.md" target="_blank" rel="noopener noreffer">https://github.com/Chia-Network/chia-blockchain/blob/main/README.md</a></li>
<li><a href="https://www.chia.net/assets/ChiaGreenPaper.pdf" target="_blank" rel="noopener noreffer">https://www.chia.net/assets/ChiaGreenPaper.pdf</a></li>
<li><a href="https://docs.nebula-graph.com.cn" target="_blank" rel="noopener noreffer">https://docs.nebula-graph.com.cn</a></li>
</ul>
<blockquote>
<p>题图版权：<a href="https://unsplash.com/photos/Ph5_4TnXXYE?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditShareLink" target="_blank" rel="noopener noreffer">Icons8 Team</a></p>
</blockquote>]]></description>
</item><item>
    <title>VSCode-ngql，Nebula Graph 的 VSCode 语法高亮插件。</title>
    <link>https://siwei.io/vscode-ngql/</link>
    <pubDate>Wed, 05 May 2021 21:11:04 &#43;0800</pubDate><author>
        <name>Wey Gu</name>
    </author><guid>https://siwei.io/vscode-ngql/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>VSCode-ngql 是 Nebula Graph 的 VS Code 之中对 nGQL 语法高亮的插件。
您可以从 <a href="https://marketplace.visualstudio.com/items?itemName=wey-gu.vscode-ngql" target="_blank" rel="noopener noreffer"><em>这里</em></a> 直接下载安装试用。</p>
</blockquote>
<h1 id="vs-code-ngql-syntax-highlight">VS Code nGQL Syntax Highlight</h1>
<p></p>
<h2 id="download">Download</h2>
<p>Search ngql from the market or click <a href="https://marketplace.visualstudio.com/items?itemName=wey-gu.vscode-ngql" target="_blank" rel="noopener noreffer">here</a>.</p>
<h2 id="features">Features</h2>
<ul>
<li>Highlighting all Keywords, Functions of a given <code>.ngql</code> file</li>
</ul>
<h2 id="release-notes">Release Notes</h2>
<h3 id="001">0.0.1</h3>
<p>Initial release, only <code>.ngql</code> Syntax is supported.</p>
<h3 id="002">0.0.2</h3>
<p>Lower supported vscode version till <code>^1.50.1</code></p>
<h2 id="reference">Reference</h2>
<ul>
<li><a href="https://docs.nebula-graph.com.cn/" target="_blank" rel="noopener noreffer">https://docs.nebula-graph.com.cn/</a></li>
<li><a href="https://github.com/vesoft-inc/nebula-graph/blob/master/src/parser/scanner.lex" target="_blank" rel="noopener noreffer">https://github.com/vesoft-inc/nebula-graph/blob/master/src/parser/scanner.lex</a></li>
</ul>]]></description>
</item></channel>
</rss>
